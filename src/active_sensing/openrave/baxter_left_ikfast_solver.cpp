/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2016-08-03 16:06:35.525548
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72;
x0=IKsin(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((0.37429)*x7);
x15=((0.27952)*x9);
x16=((0.01)*x5);
x17=((0.27952)*x7);
x18=((0.01)*x7);
x19=((1.0)*x12);
x20=((0.27952)*x8);
x21=((1.0)*x0);
x22=((1.0)*x5);
x23=((0.37429)*x0);
x24=((1.0)*x7);
x25=((0.01)*x4);
x26=((1.0)*x9);
x27=((0.27952)*x5);
x28=((0.069)*x0);
x29=((1.0)*x8);
x30=((1.0)*x4);
x31=((1.0)*x13);
x32=(x2*x6);
x33=((-1.0)*x9);
x34=(x0*x6);
x35=(x1*x2);
x36=(x4*x7);
x37=((-1.0)*x8);
x38=(x3*x6);
x39=(x2*x3);
x40=(x1*x6);
x41=(x3*x4);
x42=(x0*x3);
x43=(x30*x35);
x44=(x24*x32);
x45=(x21*x41);
x46=(x21*x6*x7);
x47=((((-1.0)*x45))+x35);
x48=(((x4*x5))+(((-1.0)*x24*x38)));
x49=(x36+((x38*x5)));
x50=((((-1.0)*x21*x3))+x43);
x51=((((-1.0)*x35))+x45);
x52=(((x1*x21))+((x30*x39)));
x53=((-1.0)*x52);
x54=(((x1*x21*x4))+(((1.0)*x39)));
x55=((-1.0)*x54);
x56=(x12*x49);
x57=(x50*x8);
x58=(x5*x51);
x59=(x53*x7);
x60=(x5*x52);
x61=(((x47*x7))+(((-1.0)*x21*x5*x6)));
x62=(((x48*x9))+((x40*x8)));
x63=((((-1.0)*x46))+x58);
x64=(((x26*x40))+(((-1.0)*x29*x48)));
x65=((((-1.0)*x22*x32))+x59);
x66=((((-1.0)*x44))+x60);
x67=(x13*x62);
x68=(x12*x63);
x69=(((x54*x8))+((x61*x9)));
x70=(x57+((x65*x9)));
x71=(x13*x69);
x72=(((x37*x65))+((x33*(((((-1.0)*x43))+x42)))));
eerot[0]=(((x10*((((x12*x66))+((x13*x70))))))+((x11*x72)));
eerot[1]=(((x10*x72))+((x11*(((((-1.0)*x19*x66))+(((-1.0)*x31*x70)))))));
eerot[2]=(((x13*((x44+(((-1.0)*x22*x52))))))+((x12*x70)));
IkReal x73=((1.0)*x32);
IkReal x74=((1.0)*x1);
IkReal x75=(x39*x4);
eetrans[0]=((0.0557)+(((0.069)*x2))+((x5*(((((-0.37429)*x75))+(((-1.0)*x23*x74))))))+(((0.36442)*x32))+((x12*((((x20*x50))+((x15*(((((-1.0)*x5*x73))+x59))))))))+((x13*(((((-1.0)*x27*x52))+((x17*x32))))))+((x14*x32))+((x9*((((x18*x53))+(((-1.0)*x16*x73))))))+(((-1.0)*x28*x74))+(((-0.069)*x75))+((x8*((((x25*x35))+(((-0.01)*x42)))))));
eerot[3]=(((x10*((x71+x68))))+((x11*(((((-1.0)*x29*x61))+(((-1.0)*x26*x55)))))));
eerot[4]=(((x11*(((((-1.0)*x31*x69))+(((-1.0)*x19*x63))))))+((x10*((((x37*x61))+((x33*x55)))))));
eerot[5]=(((x12*x69))+((x13*((x46+(((-1.0)*x22*x51)))))));
IkReal x76=((1.0)*x41);
eetrans[1]=(((x5*(((((0.37429)*x35))+(((-1.0)*x23*x76))))))+(((0.36442)*x34))+((x9*((((x18*x47))+(((-0.01)*x34*x5))))))+((x14*x34))+((x8*((((x0*x1*x25))+(((0.01)*x39))))))+x28+(((-1.0)*x28*x76))+((x12*((((x15*x61))+((x20*x54))))))+((x13*(((((-1.0)*x27*x51))+((x17*x34))))))+(((0.069)*x35)));
eerot[6]=(((x10*((x56+x67))))+((x11*x64)));
eerot[7]=(((x10*x64))+((x11*(((((-1.0)*x56))+(((-1.0)*x67)))))));
eerot[8]=(((x12*x62))+((x13*(((((-1.0)*x24*x4))+(((-1.0)*x22*x38)))))));
IkReal x77=((1.0)*x38);
IkReal x78=((1.0)*x4);
eetrans[2]=((0.28139)+((x13*(((((-1.0)*x27*x77))+(((-1.0)*x17*x78))))))+(((0.01)*x40*x8))+((x12*((((x20*x40))+((x15*x48))))))+((x9*(((((-1.0)*x18*x77))+((x16*x4))))))+(((-0.36442)*x4))+(((-0.37429)*x38*x5))+(((-1.0)*x14*x78))+(((-0.069)*x38)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {6}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j6=pfree[0]; cj6=cos(pfree[0]); sj6=sin(pfree[0]), htj6=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=r00;
new_r02=r02;
new_px=((-0.0557)+(((-0.27952)*r02))+px);
new_r10=((-1.0)*r11);
new_r11=r10;
new_r12=r12;
new_py=((((-0.27952)*r12))+py);
new_r20=((-1.0)*r21);
new_r21=r20;
new_r22=r22;
new_pz=((-0.28139)+(((-0.27952)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x79=((1.0)*px);
IkReal x80=((1.0)*pz);
IkReal x81=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x81))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x80)));
rxp0_2=((((-1.0)*r10*x79))+((py*r00)));
rxp1_0=((((-1.0)*r21*x81))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x80)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x79)));
rxp2_0=((((-1.0)*r22*x81))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x80))+((px*r22)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x79)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x82=((0.01)*r22);
IkReal x83=((1.0)*sj6);
IkReal x84=((0.37429)*r20);
IkReal x85=(cj6*r21);
IkReal x86=(npx*sj6);
IkReal x87=((1.0)*cj6);
IkReal x88=(cj6*npy);
IkReal x89=(r20*sj6);
IkReal x90=((-1.0)*r22);
IkReal x91=((-1.0)*npz);
IkReal x92=(((cj6*r20))+(((-1.0)*r21*x83)));
IkReal x93=(((npy*sj6))+(((-1.0)*npx*x87)));
IkReal x94=(((cj6*rxp0_2))+(((-1.0)*rxp1_2*x83)));
IkReal x95=(((rxp0_2*sj6))+((cj6*rxp1_2)));
IkReal x96=(((cj6*npx))+(((-1.0)*npy*x83)));
IkReal x97=((((-1.0)*rxp0_2*x87))+((rxp1_2*sj6)));
IkReal x98=(x89+x85);
IkReal x99=((((-1.0)*cj6*x84))+(((0.37429)*r21*sj6)));
IkReal x100=((((-1.0)*r20*x83))+(((-1.0)*x85)));
IkReal x101=((((-1.0)*npx*x83))+(((-1.0)*npy*x87)));
IkReal x102=(((sj6*x84))+(((0.37429)*x85)));
IkReal x103=((((-1.0)*x102))+x82);
IkReal x104=((((0.74858)*x88))+(((0.74858)*x86))+(((-0.02)*npz)));
IkReal x105=(x102+(((-1.0)*x82)));
IkReal x106=((((0.37429)*r22))+(((0.01)*x85))+(((0.01)*x89)));
IkReal x107=((((-0.02)*x86))+(((-0.02)*x88))+(((-0.74858)*npz)));
IkReal x108=((-1.0)*x106);
matrixinvcoeffs[0]=0;
matrixinvcoeffs[1]=x103;
matrixinvcoeffs[2]=x104;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=x98;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=x101;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x95;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=0;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=x103;
matrixinvcoeffs[22]=x104;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=x100;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=(x88+x86);
matrixinvcoeffs[27]=0;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=((((-1.0)*rxp0_2*x83))+(((-1.0)*rxp1_2*x87)));
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=0;
matrixinvcoeffs[33]=x106;
matrixinvcoeffs[34]=x107;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=x90;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=npz;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=((-1.0)*rxp2_2);
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=0;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=x106;
matrixinvcoeffs[54]=x107;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=r22;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=x91;
matrixinvcoeffs[59]=0;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=rxp2_2;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0.01;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=x92;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=x93;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=x99;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=x94;
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0.01;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x92;
matrixinvcoeffs[90]=0;
matrixinvcoeffs[91]=x93;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x99;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=x94;
matrixinvcoeffs[96]=x90;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=x91;
matrixinvcoeffs[100]=0;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=rxp2_2;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x106;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=x90;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=x91;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=rxp2_2;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x106;
matrixinvcoeffs[128]=x100;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=x101;
matrixinvcoeffs[132]=0;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=x95;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=x105;
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=x100;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=x101;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=x95;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x105;
matrixinvcoeffs[160]=x92;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=x96;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0.01;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=x97;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x99;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=x92;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=x96;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0.01;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=x97;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=x99;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=r22;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=x91;
matrixinvcoeffs[203]=0;
matrixinvcoeffs[204]=x108;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=rxp2_2;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=r22;
matrixinvcoeffs[218]=0;
matrixinvcoeffs[219]=x91;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x108;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp2_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x98;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=x101;
matrixinvcoeffs[235]=0;
matrixinvcoeffs[236]=x103;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=x95;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=x98;
matrixinvcoeffs[250]=0;
matrixinvcoeffs[251]=x101;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x103;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x95;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_1=matrixinvcoeffs[16], gclwh0_2=matrixinvcoeffs[32], gclwh1_5=matrixinvcoeffs[81], gclwh1_6=matrixinvcoeffs[97], gclwh2_1=matrixinvcoeffs[18], gclwh2_2=matrixinvcoeffs[34], gclwh3_5=matrixinvcoeffs[83], gclwh3_6=matrixinvcoeffs[99], gclwh4_0=matrixinvcoeffs[4], gclwh4_3=matrixinvcoeffs[52], gclwh4_5=matrixinvcoeffs[84], gclwh4_6=matrixinvcoeffs[100], gclwh4_8=matrixinvcoeffs[132], gclwh4_10=matrixinvcoeffs[164], gclwh4_12=matrixinvcoeffs[196], gclwh4_14=matrixinvcoeffs[228], gclwh5_1=matrixinvcoeffs[21], gclwh5_2=matrixinvcoeffs[37], gclwh5_4=matrixinvcoeffs[69], gclwh5_7=matrixinvcoeffs[117], gclwh5_9=matrixinvcoeffs[149], gclwh5_11=matrixinvcoeffs[181], gclwh5_13=matrixinvcoeffs[213], gclwh5_15=matrixinvcoeffs[245], gclwh6_0=matrixinvcoeffs[6], gclwh6_3=matrixinvcoeffs[54], gclwh6_5=matrixinvcoeffs[86], gclwh6_6=matrixinvcoeffs[102], gclwh6_8=matrixinvcoeffs[134], gclwh6_10=matrixinvcoeffs[166], gclwh6_12=matrixinvcoeffs[198], gclwh6_14=matrixinvcoeffs[230], gclwh7_1=matrixinvcoeffs[23], gclwh7_2=matrixinvcoeffs[39], gclwh7_4=matrixinvcoeffs[71], gclwh7_7=matrixinvcoeffs[119], gclwh7_9=matrixinvcoeffs[151], gclwh7_11=matrixinvcoeffs[183], gclwh7_13=matrixinvcoeffs[215], gclwh7_15=matrixinvcoeffs[247], gclwh8_0=matrixinvcoeffs[8], gclwh8_3=matrixinvcoeffs[56], gclwh8_5=matrixinvcoeffs[88], gclwh8_6=matrixinvcoeffs[104], gclwh8_8=matrixinvcoeffs[136], gclwh8_10=matrixinvcoeffs[168], gclwh8_12=matrixinvcoeffs[200], gclwh8_14=matrixinvcoeffs[232], gclwh9_1=matrixinvcoeffs[25], gclwh9_2=matrixinvcoeffs[41], gclwh9_4=matrixinvcoeffs[73], gclwh9_7=matrixinvcoeffs[121], gclwh9_9=matrixinvcoeffs[153], gclwh9_11=matrixinvcoeffs[185], gclwh9_13=matrixinvcoeffs[217], gclwh9_15=matrixinvcoeffs[249], gclwh10_0=matrixinvcoeffs[10], gclwh10_3=matrixinvcoeffs[58], gclwh10_5=matrixinvcoeffs[90], gclwh10_6=matrixinvcoeffs[106], gclwh10_8=matrixinvcoeffs[138], gclwh10_10=matrixinvcoeffs[170], gclwh10_12=matrixinvcoeffs[202], gclwh10_14=matrixinvcoeffs[234], gclwh11_1=matrixinvcoeffs[27], gclwh11_2=matrixinvcoeffs[43], gclwh11_4=matrixinvcoeffs[75], gclwh11_7=matrixinvcoeffs[123], gclwh11_9=matrixinvcoeffs[155], gclwh11_11=matrixinvcoeffs[187], gclwh11_13=matrixinvcoeffs[219], gclwh11_15=matrixinvcoeffs[251], gclwh12_0=matrixinvcoeffs[12], gclwh12_3=matrixinvcoeffs[60], gclwh12_5=matrixinvcoeffs[92], gclwh12_6=matrixinvcoeffs[108], gclwh12_8=matrixinvcoeffs[140], gclwh12_10=matrixinvcoeffs[172], gclwh12_12=matrixinvcoeffs[204], gclwh12_14=matrixinvcoeffs[236], gclwh13_1=matrixinvcoeffs[29], gclwh13_2=matrixinvcoeffs[45], gclwh13_4=matrixinvcoeffs[77], gclwh13_7=matrixinvcoeffs[125], gclwh13_9=matrixinvcoeffs[157], gclwh13_11=matrixinvcoeffs[189], gclwh13_13=matrixinvcoeffs[221], gclwh13_15=matrixinvcoeffs[253], gclwh14_0=matrixinvcoeffs[14], gclwh14_3=matrixinvcoeffs[62], gclwh14_5=matrixinvcoeffs[94], gclwh14_6=matrixinvcoeffs[110], gclwh14_8=matrixinvcoeffs[142], gclwh14_10=matrixinvcoeffs[174], gclwh14_12=matrixinvcoeffs[206], gclwh14_14=matrixinvcoeffs[238], gclwh15_1=matrixinvcoeffs[31], gclwh15_2=matrixinvcoeffs[47], gclwh15_4=matrixinvcoeffs[79], gclwh15_7=matrixinvcoeffs[127], gclwh15_9=matrixinvcoeffs[159], gclwh15_11=matrixinvcoeffs[191], gclwh15_13=matrixinvcoeffs[223], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x109=((2.0)*pp);
IkReal x110=(gclwh6_0*r22);
IkReal x111=(gclwh10_14*pz);
IkReal x112=(cj6*npx);
IkReal x113=((0.10330404)*gclwh4_14);
IkReal x114=(rxp1_2*sj6);
IkReal x115=(cj6*rxp0_2);
IkReal x116=((0.276)*npy);
IkReal x117=((0.86684)*pp);
IkReal x118=(cj6*r20);
IkReal x119=((0.121524903674044)*gclwh10_14);
IkReal x120=(cj6*r21);
IkReal x121=((0.006488990872)*gclwh6_14);
IkReal x122=(gclwh14_14*rxp2_2);
IkReal x123=(cj6*rxp1_2);
IkReal x124=((0.00276)*gclwh12_14);
IkReal x125=((0.04)*gclwh12_0);
IkReal x126=(gclwh4_14*pz);
IkReal x127=((0.6488990872)*gclwh4_14);
IkReal x128=(gclwh6_14*r22);
IkReal x129=(r20*sj6);
IkReal x130=((0.0010330404)*gclwh6_14);
IkReal x131=((0.0149716)*gclwh6_0);
IkReal x132=(rxp0_2*sj6);
IkReal x133=((0.0173368)*gclwh12_14);
IkReal x134=((0.2799860082)*gclwh8_0);
IkReal x135=(npy*sj6);
IkReal x136=((1.49716)*gclwh4_0);
IkReal x137=(npz*pz);
IkReal x138=((0.0193466345658)*gclwh10_14);
IkReal x139=(npx*sj6);
IkReal x140=((0.138)*pp);
IkReal x141=(r21*sj6);
IkReal x142=((0.2803860082)*gclwh10_0);
IkReal x143=(gclwh8_14*r22);
IkReal x144=((0.6488990872)*gclwh14_14);
IkReal x145=((0.10330404)*gclwh14_14);
IkReal x146=(gclwh12_14*rxp2_2);
IkReal x147=((1.49716)*gclwh14_0);
IkReal x148=(gclwh8_14*pz);
IkReal x149=(gclwh8_14*x129);
IkReal x150=(cj6*x148);
IkReal x151=((4.0)*gclwh10_0*pz);
IkReal x152=((4.0)*gclwh8_0*pz);
op[0]=((((-0.0096595172829)*gclwh6_10*r22))+(((0.138)*cj6*gclwh8_10*npy*pz))+(((-0.05165202)*cj6*gclwh14_10*rxp1_2))+(((-0.1399930041)*gclwh8_8*r20*sj6))+(((2.0)*gclwh8_8*npx*pz*sj6))+(((-0.3244495436)*cj6*gclwh14_12*rxp1_2))+(((0.74858)*gclwh4_8*rxp1_2*sj6))+(((-0.060675767837022)*gclwh8_12*r20*sj6))+(((-0.43342)*gclwh6_12*pp*r22))+(((-0.060675767837022)*gclwh6_12*r22))+(((0.069)*cj6*gclwh10_10*pp*r20))+(((-0.02)*cj6*gclwh12_8*rxp1_2))+(((0.1401930041)*cj6*gclwh10_8*r20))+(((-0.0096595172829)*cj6*gclwh8_10*r21))+(((-0.0086684)*gclwh12_12*rxp0_2*sj6))+(((-0.003244495436)*cj6*gclwh6_12*r21))+(((0.86684)*gclwh8_12*npx*pz*sj6))+(((-0.0096733172829)*gclwh10_10*r21*sj6))+(((0.86684)*cj6*gclwh8_12*npy*pz))+(((-0.069)*gclwh8_10*pp*r20*sj6))+((cj6*gclwh10_8*pp*r20))+(((0.138)*gclwh10_10*npy*pz*sj6))+(((-0.74858)*gclwh14_8*rxp0_2*sj6))+(((-0.86684)*cj6*gclwh10_12*npx*pz))+(((0.0086684)*gclwh14_12*rxp2_2))+(((-0.0005165202)*gclwh6_10*r20*sj6))+(((-0.74858)*gclwh12_8*rxp2_2))+(((-0.00138)*gclwh4_10*pz))+(((-0.05165202)*gclwh12_10*rxp2_2))+(((-0.069)*gclwh6_10*pp*r22))+(((0.138)*gclwh6_10*npz*pz))+(((0.0096733172829)*cj6*gclwh10_10*r20))+(((-1.0)*gclwh8_8*pp*r20*sj6))+(((-1.0)*gclwh10_8*pp*r21*sj6))+(((-0.138)*cj6*gclwh10_10*npx*pz))+(((-0.0096595172829)*gclwh8_10*r20*sj6))+(((0.86684)*gclwh6_12*npz*pz))+(((-0.003244495436)*gclwh6_12*r20*sj6))+(((-0.1401930041)*gclwh10_8*r21*sj6))+(((-0.00138)*gclwh12_10*rxp0_2*sj6))+(((-0.060675767837022)*cj6*gclwh8_12*r21))+(((0.0005165202)*gclwh8_10*r22))+(((-0.43342)*cj6*gclwh8_12*pp*r21))+(((0.138)*gclwh8_10*npx*pz*sj6))+(((-2.0)*cj6*gclwh10_8*npx*pz))+(((-0.43342)*gclwh10_12*pp*r21*sj6))+(((-0.0005165202)*cj6*gclwh6_10*r21))+(((0.43342)*cj6*gclwh10_12*pp*r20))+(((-0.1399930041)*gclwh6_8*r22))+(((-1.0)*gclwh6_8*pp*r22))+(((-0.0086684)*cj6*gclwh12_12*rxp1_2))+(((-0.74858)*cj6*gclwh4_8*rxp0_2))+(((-0.060762451837022)*gclwh10_12*r21*sj6))+(((-0.05165202)*cj6*gclwh4_10*rxp0_2))+(((-0.43342)*gclwh8_12*pp*r20*sj6))+(((-0.3244495436)*cj6*gclwh4_12*rxp0_2))+(((0.0074858)*gclwh8_8*r22))+(((-0.3244495436)*gclwh14_12*rxp0_2*sj6))+(((-0.1399930041)*cj6*gclwh8_8*r21))+(((2.0)*gclwh6_8*npz*pz))+(((-0.00138)*cj6*gclwh12_10*rxp1_2))+(((-0.069)*gclwh10_10*pp*r21*sj6))+(((2.0)*gclwh10_8*npy*pz*sj6))+(((-0.02)*gclwh4_8*pz))+(((0.02)*gclwh14_8*rxp2_2))+(((0.060762451837022)*cj6*gclwh10_12*r20))+(((-0.74858)*cj6*gclwh14_8*rxp1_2))+(((-0.0086684)*gclwh4_12*pz))+(((-0.02)*gclwh12_8*rxp0_2*sj6))+(((-0.069)*cj6*gclwh8_10*pp*r21))+(((0.3244495436)*gclwh4_12*rxp1_2*sj6))+(((-0.3244495436)*gclwh12_12*rxp2_2))+(((0.05165202)*gclwh4_10*rxp1_2*sj6))+(((-0.05165202)*gclwh14_10*rxp0_2*sj6))+(((-0.0074858)*cj6*gclwh6_8*r21))+(((-0.0074858)*gclwh6_8*r20*sj6))+(((-1.0)*cj6*gclwh8_8*pp*r21))+(((0.003244495436)*gclwh8_12*r22))+(((0.00138)*gclwh14_10*rxp2_2))+(((0.86684)*gclwh10_12*npy*pz*sj6))+(((2.0)*cj6*gclwh8_8*npy*pz)));
op[1]=((((0.001048417846)*gclwh12_6*rxp0_2*sj6))+(((0.74858)*gclwh4_6*pp*rxp1_2*sj6))+(((0.000442635354)*gclwh6_10*r20*sj6))+(((2.0)*gclwh8_6*npx*pp*pz*sj6))+(((-0.0011826)*gclwh14_10*rxp2_2))+(((-0.0875721118)*cj6*gclwh8_6*pp*r21))+(((-0.138)*gclwh8_5*npx*pz*sj6))+(((0.74858)*gclwh12_5*pz*rxp2_2))+(((0.069)*gclwh8_5*pp*r20*sj6))+(((-0.0005165202)*gclwh8_5*r22))+(((0.02)*cj6*gclwh6_14*npz*pz*r20))+(((-0.0074858)*gclwh6_6*pp*r20*sj6))+(((0.0442635354)*cj6*gclwh4_10*rxp0_2))+(((2.0)*cj6*gclwh10_5*npx*(pz*pz)))+(((0.008289612332433)*gclwh10_10*r21*sj6))+(((-0.74858)*gclwh14_6*pp*rxp0_2*sj6))+(((0.00734904236913956)*gclwh10_6*r21*sj6))+(((0.11826)*cj6*gclwh10_10*npx*pz))+(((0.00733855819067956)*cj6*gclwh8_6*r21))+(((7.4858e-5)*gclwh6_14*r20*r21*(sj6*sj6)))+(((0.0005165202)*gclwh6_5*r20*sj6))+(((0.008277786332433)*gclwh6_10*r22))+(((0.02)*gclwh14_6*pp*rxp2_2))+((cj6*gclwh10_6*r20*(pp*pp)))+(((0.0002)*cj6*gclwh12_14*r21*rxp1_2*sj6))+(((-2.0)*gclwh6_5*npz*(pz*pz)))+(((-0.0074858)*gclwh4_14*r20*rxp0_2*(cj6*cj6)))+(((0.039241231557934)*cj6*gclwh14_6*rxp1_2))+(((0.00039241231557934)*cj6*gclwh6_6*r21))+(((-0.0074858)*gclwh8_5*pz*r22))+(((-0.001399930041)*cj6*gclwh6_14*r20*r22))+(((0.02)*gclwh4_5*(pz*pz)))+(((0.1048417846)*cj6*gclwh10_6*npx*pz))+(((-0.02)*gclwh4_6*pp*pz))+((gclwh8_5*pp*pz*r20*sj6))+(((-0.02)*gclwh6_14*npz*pz*r21*sj6))+(((0.74858)*cj6*gclwh4_5*pz*rxp0_2))+(((-0.02)*gclwh8_14*npx*pz*r21*(sj6*sj6)))+(((0.0074858)*cj6*gclwh14_14*r21*rxp1_2*sj6))+(((0.001399930041)*cj6*gclwh8_14*sj6*(r21*r21)))+(((-0.74858)*gclwh4_5*pz*rxp1_2*sj6))+(((0.0074858)*gclwh8_6*pp*r22))+(((-0.1048417846)*gclwh10_6*npy*pz*sj6))+(((-0.1048417846)*cj6*gclwh8_6*npy*pz))+((gclwh6_5*pp*pz*r22))+(((0.0074858)*cj6*gclwh4_14*r21*rxp0_2*sj6))+((cj6*gclwh8_5*pp*pz*r21))+(((0.05165202)*cj6*gclwh14_5*rxp1_2))+(((-0.05165202)*gclwh4_5*rxp1_2*sj6))+(((0.0096595172829)*gclwh6_5*r22))+(((0.01)*gclwh10_14*pp*(cj6*cj6)*(r20*r20)))+(((-0.0002)*gclwh12_14*r20*rxp1_2*(cj6*cj6)))+(((0.01)*gclwh6_14*pp*r21*r22*sj6))+(((0.069)*gclwh10_5*pp*r21*sj6))+(((0.00138)*gclwh4_5*pz))+(((-2.0)*gclwh8_5*npx*sj6*(pz*pz)))+(((-0.01)*gclwh8_14*pp*r20*r21*(cj6*cj6)))+(((0.01)*gclwh10_14*pp*(r21*r21)*(sj6*sj6)))+(((-0.0002)*gclwh14_14*r21*rxp2_2*sj6))+(((0.138)*cj6*gclwh10_5*npx*pz))+(((0.0074858)*gclwh14_14*r21*rxp0_2*(sj6*sj6)))+(((-1.0)*gclwh8_6*r20*sj6*(pp*pp)))+(((0.1399930041)*gclwh6_5*pz*r22))+(((-0.0002)*cj6*gclwh4_14*pz*r20))+(((-0.02)*gclwh12_6*pp*rxp0_2*sj6))+(((0.01)*gclwh8_14*pp*r20*r21*(sj6*sj6)))+(((0.0074858)*cj6*gclwh6_5*pz*r21))+(((-0.002803860082)*cj6*gclwh10_14*r20*r21*sj6))+(((-0.0074858)*gclwh4_14*r21*rxp1_2*(sj6*sj6)))+(((0.0002)*cj6*gclwh14_14*r20*rxp2_2))+(((-1.0)*cj6*gclwh10_5*pp*pz*r20))+(((0.0011826)*cj6*gclwh12_10*rxp1_2))+(((0.0074858)*gclwh12_14*r21*rxp2_2*sj6))+(((2.0)*cj6*gclwh8_6*npy*pp*pz))+(((-0.1048417846)*gclwh6_6*npz*pz))+(((0.05165202)*gclwh14_5*rxp0_2*sj6))+(((0.0074858)*gclwh6_5*pz*r20*sj6))+(((-0.008289612332433)*cj6*gclwh10_10*r20))+(((0.00733855819067956)*gclwh8_6*r20*sj6))+(((0.008277786332433)*gclwh8_10*r20*sj6))+(((0.02)*cj6*gclwh8_14*npx*pz*r20*sj6))+(((-7.4858e-5)*cj6*gclwh6_14*sj6*(r20*r20)))+(((-0.11826)*gclwh6_10*npz*pz))+(((-0.74858)*gclwh12_6*pp*rxp2_2))+(((0.0074858)*cj6*gclwh4_14*r20*rxp1_2*sj6))+(((0.05913)*gclwh10_10*pp*r21*sj6))+(((-0.00138)*gclwh14_5*rxp2_2))+(((-0.1048417846)*gclwh8_6*npx*pz*sj6))+(((-7.4858e-5)*gclwh6_14*r20*r21*(cj6*cj6)))+(((-0.069)*cj6*gclwh10_5*pp*r20))+(((0.0011826)*gclwh4_10*pz))+(((0.069)*cj6*gclwh8_5*pp*r21))+(((0.0096595172829)*gclwh8_5*r20*sj6))+(((-0.0877721118)*gclwh10_6*pp*r21*sj6))+(((0.000442635354)*cj6*gclwh6_10*r21))+(((-0.0875721118)*gclwh6_6*pp*r22))+(((-0.001399930041)*gclwh8_14*r20*r21*(cj6*cj6)))+(((0.05165202)*gclwh12_5*rxp2_2))+(((-2.0)*cj6*gclwh10_6*npx*pp*pz))+(((-0.138)*gclwh6_5*npz*pz))+(((0.0096733172829)*gclwh10_5*r21*sj6))+(((0.069)*gclwh6_5*pp*r22))+(((-0.05913)*cj6*gclwh10_10*pp*r20))+(((-0.0875721118)*gclwh8_6*pp*r20*sj6))+(((-0.01)*cj6*gclwh8_14*pp*sj6*(r20*r20)))+(((-0.0074858)*cj6*gclwh12_14*r20*rxp2_2))+(((-2.0)*gclwh10_5*npy*sj6*(pz*pz)))+(((0.05913)*gclwh6_10*pp*r22))+(((0.02)*gclwh12_5*pz*rxp0_2*sj6))+(((0.1399930041)*gclwh8_5*pz*r20*sj6))+(((-0.001048417846)*gclwh14_6*rxp2_2))+(((-0.02)*cj6*gclwh8_14*npy*pz*r21*sj6))+(((0.0877721118)*cj6*gclwh10_6*pp*r20))+(((-7.4858e-5)*gclwh8_14*r21*r22*sj6))+(((0.008277786332433)*cj6*gclwh8_10*r21))+(((0.02)*cj6*gclwh10_14*npy*pz*r20*sj6))+(((-0.01)*cj6*gclwh6_14*pp*r20*r22))+(((-0.02)*cj6*gclwh12_6*pp*rxp1_2))+(((-0.0074858)*cj6*gclwh14_14*r20*rxp0_2*sj6))+(((-0.11826)*cj6*gclwh8_10*npy*pz))+(((0.039241231557934)*gclwh14_6*rxp0_2*sj6))+(((0.039241231557934)*gclwh12_6*rxp2_2))+(((0.001399930041)*gclwh8_14*r20*r21*(sj6*sj6)))+(((-0.11826)*gclwh10_10*npy*pz*sj6))+(((-0.00039241231557934)*gclwh8_6*r22))+(((-2.0)*cj6*gclwh8_5*npy*(pz*pz)))+(((-1.0)*gclwh6_6*r22*(pp*pp)))+(((0.001399930041)*gclwh6_14*r21*r22*sj6))+(((-0.000442635354)*gclwh8_10*r22))+(((-0.02)*gclwh14_5*pz*rxp2_2))+(((-0.1401930041)*cj6*gclwh10_5*pz*r20))+(((-0.11826)*gclwh8_10*npx*pz*sj6))+(((-1.0)*cj6*gclwh8_6*r21*(pp*pp)))+(((0.0442635354)*gclwh12_10*rxp2_2))+(((0.001401930041)*gclwh10_14*(r21*r21)*(sj6*sj6)))+(((0.00138)*gclwh12_5*rxp0_2*sj6))+(((0.0442635354)*gclwh14_10*rxp0_2*sj6))+(((-0.74858)*cj6*gclwh4_6*pp*rxp0_2))+(((-0.00734904236913956)*cj6*gclwh10_6*r20))+(((0.1399930041)*cj6*gclwh8_5*pz*r21))+(((0.74858)*gclwh14_5*pz*rxp0_2*sj6))+(((7.4858e-5)*cj6*gclwh6_14*sj6*(r21*r21)))+(((-0.0096733172829)*cj6*gclwh10_5*r20))+(((0.0011826)*gclwh12_10*rxp0_2*sj6))+(((0.02)*gclwh8_14*npy*pz*r20*(cj6*cj6)))+(((0.0442635354)*cj6*gclwh14_10*rxp1_2))+(((0.0002)*gclwh4_14*pz*r21*sj6))+(((7.4858e-5)*cj6*gclwh8_14*r20*r22))+(((0.001048417846)*cj6*gclwh12_6*rxp1_2))+(((-0.0074858)*cj6*gclwh6_6*pp*r21))+(((-0.0002)*cj6*gclwh12_14*r20*rxp0_2*sj6))+(((0.74858)*cj6*gclwh14_5*pz*rxp1_2))+(((0.05165202)*cj6*gclwh4_5*rxp0_2))+(((-0.138)*gclwh10_5*npy*pz*sj6))+(((-0.039241231557934)*gclwh4_6*rxp1_2*sj6))+(((0.00733855819067956)*gclwh6_6*r22))+(((2.0)*gclwh10_6*npy*pp*pz*sj6))+(((0.001048417846)*gclwh4_6*pz))+(((0.0096595172829)*cj6*gclwh8_5*r21))+(((0.00039241231557934)*gclwh6_6*r20*sj6))+(((0.02)*cj6*gclwh12_5*pz*rxp1_2))+(((0.00138)*cj6*gclwh12_5*rxp1_2))+(((-0.138)*cj6*gclwh8_5*npy*pz))+(((0.0005165202)*cj6*gclwh6_5*r21))+((gclwh10_5*pp*pz*r21*sj6))+(((-0.02)*gclwh10_14*npy*pz*r21*(sj6*sj6)))+(((0.05913)*gclwh8_10*pp*r20*sj6))+(((0.01)*cj6*gclwh8_14*pp*sj6*(r21*r21)))+(((-0.0442635354)*gclwh4_10*rxp1_2*sj6))+(((-0.001399930041)*cj6*gclwh8_14*sj6*(r20*r20)))+(((-0.02)*cj6*gclwh10_14*pp*r20*r21*sj6))+(((-0.02)*gclwh10_14*npx*pz*r20*(cj6*cj6)))+(((-0.74858)*cj6*gclwh14_6*pp*rxp1_2))+(((-1.0)*gclwh10_6*r21*sj6*(pp*pp)))+(((0.1401930041)*gclwh10_5*pz*r21*sj6))+(((2.0)*gclwh6_6*npz*pp*pz))+(((0.05913)*cj6*gclwh8_10*pp*r21))+(((0.039241231557934)*cj6*gclwh4_6*rxp0_2))+(((0.0002)*gclwh12_14*r21*rxp0_2*(sj6*sj6)))+(((-0.0074858)*gclwh14_14*r20*rxp1_2*(cj6*cj6)))+(((0.02)*cj6*gclwh10_14*npx*pz*r21*sj6))+(((0.001401930041)*gclwh10_14*(cj6*cj6)*(r20*r20))));
op[2]=((-0.3852277928)+((x139*x152))+(((-1.0)*x123*x133))+(((-1.0)*x120*x121))+(((-1.0)*x123*x125))+(((-0.121351535674044)*x149))+(((-1.0)*x120*x131))+(((-1.0)*x120*x134))+(((-1.73368)*x111*x112))+(((0.0149716)*gclwh8_0*r22))+(((-0.121351535674044)*gclwh8_14*x120))+(((-0.2799860082)*x110))+(((0.0173368)*x122))+(((0.04)*gclwh14_0*rxp2_2))+(((1.73368)*x139*x148))+(((-1.0)*gclwh8_0*x109*x129))+(((-1.0)*gclwh8_0*x109*x120))+(((-1.0)*x132*x144))+(((-1.0)*x132*x147))+(((-1.0)*x115*x136))+(((-1.0)*x123*x147))+(((-1.0)*x123*x144))+(((-1.0)*gclwh10_14*x117*x141))+(((-1.0)*x115*x127))+((x114*x127))+((x135*x151))+((gclwh10_0*x109*x118))+((x114*x136))+(((-0.0173368)*x126))+(((-1.0)*x117*x128))+((x118*x142))+(((-0.121351535674044)*x128))+(((4.0)*gclwh6_0*x137))+(((-1.0)*x109*x110))+(((1.73368)*gclwh6_14*x137))+(((-1.0)*x117*x149))+(((-1.0)*x125*x132))+(((-1.0)*x132*x133))+(((-1.0)*x121*x129))+(((-1.0)*x141*x142))+((gclwh10_14*x117*x118))+(((-1.0)*x112*x151))+(((-1.49716)*gclwh12_0*rxp2_2))+((x118*x119))+(((-1.0)*x129*x134))+(((-1.0)*x129*x131))+(((-0.6488990872)*x146))+(((-1.0)*gclwh8_14*x117*x120))+(((-1.0)*gclwh10_0*x109*x141))+(((-1.0)*x119*x141))+(((-0.04)*gclwh4_0*pz))+((cj6*npy*x152))+(((0.006488990872)*x143))+(((1.73368)*x111*x135))+(((1.73368)*npy*x150)));
op[3]=((((-0.0193190345658)*x128))+(((-1.0)*x138*x141))+(((-1.0)*x123*x124))+(((-1.0)*x120*x130))+(((-1.0)*x140*x149))+(((-1.0)*gclwh10_14*x140*x141))+(((-1.0)*x132*x145))+((gclwh10_14*x118*x140))+(((-1.0)*x128*x140))+(((-1.0)*x123*x145))+(((-1.0)*x113*x115))+(((0.276)*x139*x148))+((x113*x114))+((sj6*x111*x116))+(((0.276)*gclwh6_14*x137))+(((-1.0)*x124*x132))+(((-1.0)*gclwh8_14*x120*x140))+((x116*x150))+(((-0.00276)*x126))+(((-0.276)*x111*x112))+(((-1.0)*x129*x130))+(((-0.10330404)*x146))+(((0.0010330404)*x143))+(((0.00276)*x122))+((x118*x138))+(((-0.0193190345658)*gclwh8_14*x120))+(((-0.0193190345658)*x149)));
op[4]=((((0.0086684)*gclwh4_12*pz))+(((-0.0096595172829)*gclwh6_10*r22))+(((0.0086684)*gclwh12_12*rxp0_2*sj6))+(((0.138)*cj6*gclwh8_10*npy*pz))+(((-0.05165202)*cj6*gclwh14_10*rxp1_2))+(((-0.74858)*gclwh4_8*rxp1_2*sj6))+(((0.86684)*cj6*gclwh10_12*npx*pz))+(((0.060675767837022)*gclwh6_12*r22))+(((-2.0)*gclwh6_8*npz*pz))+(((0.3244495436)*gclwh12_12*rxp2_2))+(((-2.0)*gclwh8_8*npx*pz*sj6))+(((0.0086684)*cj6*gclwh12_12*rxp1_2))+(((-0.0074858)*gclwh8_8*r22))+(((0.74858)*gclwh14_8*rxp0_2*sj6))+(((0.1399930041)*gclwh6_8*r22))+(((0.003244495436)*gclwh6_12*r20*sj6))+(((0.069)*cj6*gclwh10_10*pp*r20))+((gclwh8_8*pp*r20*sj6))+(((-0.0096595172829)*cj6*gclwh8_10*r21))+((cj6*gclwh8_8*pp*r21))+((gclwh10_8*pp*r21*sj6))+(((-0.0086684)*gclwh14_12*rxp2_2))+(((0.1401930041)*gclwh10_8*r21*sj6))+(((-0.0096733172829)*gclwh10_10*r21*sj6))+(((-0.069)*gclwh8_10*pp*r20*sj6))+(((-2.0)*gclwh10_8*npy*pz*sj6))+(((0.74858)*cj6*gclwh14_8*rxp1_2))+(((0.138)*gclwh10_10*npy*pz*sj6))+(((0.1399930041)*cj6*gclwh8_8*r21))+(((0.02)*gclwh4_8*pz))+(((-0.0005165202)*gclwh6_10*r20*sj6))+(((0.43342)*gclwh8_12*pp*r20*sj6))+(((-0.86684)*cj6*gclwh8_12*npy*pz))+(((0.0074858)*cj6*gclwh6_8*r21))+(((-0.00138)*gclwh4_10*pz))+(((0.060762451837022)*gclwh10_12*r21*sj6))+(((-0.05165202)*gclwh12_10*rxp2_2))+(((-0.069)*gclwh6_10*pp*r22))+(((0.3244495436)*cj6*gclwh14_12*rxp1_2))+(((0.138)*gclwh6_10*npz*pz))+(((0.0096733172829)*cj6*gclwh10_10*r20))+(((-0.138)*cj6*gclwh10_10*npx*pz))+(((-0.0096595172829)*gclwh8_10*r20*sj6))+(((0.0074858)*gclwh6_8*r20*sj6))+(((-0.86684)*gclwh10_12*npy*pz*sj6))+(((-0.86684)*gclwh8_12*npx*pz*sj6))+(((0.3244495436)*cj6*gclwh4_12*rxp0_2))+((gclwh6_8*pp*r22))+(((-0.00138)*gclwh12_10*rxp0_2*sj6))+(((0.0005165202)*gclwh8_10*r22))+(((-0.1401930041)*cj6*gclwh10_8*r20))+(((-0.86684)*gclwh6_12*npz*pz))+(((0.138)*gclwh8_10*npx*pz*sj6))+(((0.43342)*gclwh6_12*pp*r22))+(((0.060675767837022)*cj6*gclwh8_12*r21))+(((0.060675767837022)*gclwh8_12*r20*sj6))+(((-0.0005165202)*cj6*gclwh6_10*r21))+(((0.02)*cj6*gclwh12_8*rxp1_2))+(((-0.05165202)*cj6*gclwh4_10*rxp0_2))+(((0.74858)*cj6*gclwh4_8*rxp0_2))+(((-0.43342)*cj6*gclwh10_12*pp*r20))+(((0.43342)*gclwh10_12*pp*r21*sj6))+(((-0.060762451837022)*cj6*gclwh10_12*r20))+(((-0.00138)*cj6*gclwh12_10*rxp1_2))+(((0.43342)*cj6*gclwh8_12*pp*r21))+(((0.3244495436)*gclwh14_12*rxp0_2*sj6))+(((-2.0)*cj6*gclwh8_8*npy*pz))+(((0.1399930041)*gclwh8_8*r20*sj6))+(((-0.069)*gclwh10_10*pp*r21*sj6))+(((-0.3244495436)*gclwh4_12*rxp1_2*sj6))+(((2.0)*cj6*gclwh10_8*npx*pz))+(((0.74858)*gclwh12_8*rxp2_2))+(((0.02)*gclwh12_8*rxp0_2*sj6))+(((0.003244495436)*cj6*gclwh6_12*r21))+(((-0.069)*cj6*gclwh8_10*pp*r21))+(((0.05165202)*gclwh4_10*rxp1_2*sj6))+(((-0.05165202)*gclwh14_10*rxp0_2*sj6))+(((-0.003244495436)*gclwh8_12*r22))+(((-1.0)*cj6*gclwh10_8*pp*r20))+(((-0.02)*gclwh14_8*rxp2_2))+(((0.00138)*gclwh14_10*rxp2_2)));
op[5]=((((0.001048417846)*gclwh12_6*rxp0_2*sj6))+(((0.74858)*gclwh4_6*pp*rxp1_2*sj6))+(((0.000442635354)*gclwh6_10*r20*sj6))+(((2.0)*gclwh8_6*npx*pp*pz*sj6))+(((-0.0011826)*gclwh14_10*rxp2_2))+(((-0.0875721118)*cj6*gclwh8_6*pp*r21))+(((0.138)*gclwh6_5*npz*pz))+(((0.74858)*gclwh12_5*pz*rxp2_2))+(((0.02)*cj6*gclwh6_14*npz*pz*r20))+(((-0.0074858)*gclwh6_6*pp*r20*sj6))+(((0.0442635354)*cj6*gclwh4_10*rxp0_2))+(((2.0)*cj6*gclwh10_5*npx*(pz*pz)))+(((0.008289612332433)*gclwh10_10*r21*sj6))+(((-0.74858)*gclwh14_6*pp*rxp0_2*sj6))+(((-0.00138)*cj6*gclwh12_5*rxp1_2))+(((0.00734904236913956)*gclwh10_6*r21*sj6))+(((0.11826)*cj6*gclwh10_10*npx*pz))+(((0.00733855819067956)*cj6*gclwh8_6*r21))+(((7.4858e-5)*gclwh6_14*r20*r21*(sj6*sj6)))+(((0.008277786332433)*gclwh6_10*r22))+(((0.02)*gclwh14_6*pp*rxp2_2))+((cj6*gclwh10_6*r20*(pp*pp)))+(((0.0002)*cj6*gclwh12_14*r21*rxp1_2*sj6))+(((-0.05165202)*gclwh12_5*rxp2_2))+(((-2.0)*gclwh6_5*npz*(pz*pz)))+(((-0.0074858)*gclwh4_14*r20*rxp0_2*(cj6*cj6)))+(((0.039241231557934)*cj6*gclwh14_6*rxp1_2))+(((0.00039241231557934)*cj6*gclwh6_6*r21))+(((-0.0074858)*gclwh8_5*pz*r22))+(((-0.001399930041)*cj6*gclwh6_14*r20*r22))+(((0.02)*gclwh4_5*(pz*pz)))+(((0.1048417846)*cj6*gclwh10_6*npx*pz))+(((-0.02)*gclwh4_6*pp*pz))+((gclwh8_5*pp*pz*r20*sj6))+(((-0.02)*gclwh6_14*npz*pz*r21*sj6))+(((0.74858)*cj6*gclwh4_5*pz*rxp0_2))+(((-0.02)*gclwh8_14*npx*pz*r21*(sj6*sj6)))+(((0.0074858)*cj6*gclwh14_14*r21*rxp1_2*sj6))+(((0.001399930041)*cj6*gclwh8_14*sj6*(r21*r21)))+(((-0.74858)*gclwh4_5*pz*rxp1_2*sj6))+(((0.0074858)*gclwh8_6*pp*r22))+(((-0.1048417846)*gclwh10_6*npy*pz*sj6))+(((-0.1048417846)*cj6*gclwh8_6*npy*pz))+((gclwh6_5*pp*pz*r22))+(((0.0074858)*cj6*gclwh4_14*r21*rxp0_2*sj6))+((cj6*gclwh8_5*pp*pz*r21))+(((0.138)*cj6*gclwh8_5*npy*pz))+(((-0.138)*cj6*gclwh10_5*npx*pz))+(((-0.0096595172829)*gclwh6_5*r22))+(((-0.0005165202)*gclwh6_5*r20*sj6))+(((-0.0096595172829)*cj6*gclwh8_5*r21))+(((0.01)*gclwh10_14*pp*(cj6*cj6)*(r20*r20)))+(((-0.0002)*gclwh12_14*r20*rxp1_2*(cj6*cj6)))+(((0.01)*gclwh6_14*pp*r21*r22*sj6))+(((-2.0)*gclwh8_5*npx*sj6*(pz*pz)))+(((-0.01)*gclwh8_14*pp*r20*r21*(cj6*cj6)))+(((0.01)*gclwh10_14*pp*(r21*r21)*(sj6*sj6)))+(((-0.0002)*gclwh14_14*r21*rxp2_2*sj6))+(((0.0074858)*gclwh14_14*r21*rxp0_2*(sj6*sj6)))+(((-0.05165202)*cj6*gclwh4_5*rxp0_2))+(((-1.0)*gclwh8_6*r20*sj6*(pp*pp)))+(((0.1399930041)*gclwh6_5*pz*r22))+(((-0.0002)*cj6*gclwh4_14*pz*r20))+(((-0.02)*gclwh12_6*pp*rxp0_2*sj6))+(((0.01)*gclwh8_14*pp*r20*r21*(sj6*sj6)))+(((0.0074858)*cj6*gclwh6_5*pz*r21))+(((-0.002803860082)*cj6*gclwh10_14*r20*r21*sj6))+(((-0.0074858)*gclwh4_14*r21*rxp1_2*(sj6*sj6)))+(((0.0002)*cj6*gclwh14_14*r20*rxp2_2))+(((-1.0)*cj6*gclwh10_5*pp*pz*r20))+(((0.0011826)*cj6*gclwh12_10*rxp1_2))+(((0.0074858)*gclwh12_14*r21*rxp2_2*sj6))+(((2.0)*cj6*gclwh8_6*npy*pp*pz))+(((-0.1048417846)*gclwh6_6*npz*pz))+(((-0.069)*gclwh6_5*pp*r22))+(((-0.069)*gclwh10_5*pp*r21*sj6))+(((0.0074858)*gclwh6_5*pz*r20*sj6))+(((-0.008289612332433)*cj6*gclwh10_10*r20))+(((0.00733855819067956)*gclwh8_6*r20*sj6))+(((0.008277786332433)*gclwh8_10*r20*sj6))+(((0.02)*cj6*gclwh8_14*npx*pz*r20*sj6))+(((-7.4858e-5)*cj6*gclwh6_14*sj6*(r20*r20)))+(((-0.11826)*gclwh6_10*npz*pz))+(((-0.74858)*gclwh12_6*pp*rxp2_2))+(((0.0074858)*cj6*gclwh4_14*r20*rxp1_2*sj6))+(((0.05913)*gclwh10_10*pp*r21*sj6))+(((-0.1048417846)*gclwh8_6*npx*pz*sj6))+(((-7.4858e-5)*gclwh6_14*r20*r21*(cj6*cj6)))+(((0.0011826)*gclwh4_10*pz))+(((-0.0877721118)*gclwh10_6*pp*r21*sj6))+(((0.000442635354)*cj6*gclwh6_10*r21))+(((-0.0875721118)*gclwh6_6*pp*r22))+(((-0.001399930041)*gclwh8_14*r20*r21*(cj6*cj6)))+(((-2.0)*cj6*gclwh10_6*npx*pp*pz))+(((-0.0096733172829)*gclwh10_5*r21*sj6))+(((-0.05913)*cj6*gclwh10_10*pp*r20))+(((-0.0875721118)*gclwh8_6*pp*r20*sj6))+(((-0.01)*cj6*gclwh8_14*pp*sj6*(r20*r20)))+(((0.138)*gclwh8_5*npx*pz*sj6))+(((-0.0074858)*cj6*gclwh12_14*r20*rxp2_2))+(((-2.0)*gclwh10_5*npy*sj6*(pz*pz)))+(((0.05913)*gclwh6_10*pp*r22))+(((0.02)*gclwh12_5*pz*rxp0_2*sj6))+(((0.1399930041)*gclwh8_5*pz*r20*sj6))+(((-0.001048417846)*gclwh14_6*rxp2_2))+(((-0.00138)*gclwh4_5*pz))+(((-0.02)*cj6*gclwh8_14*npy*pz*r21*sj6))+(((0.0877721118)*cj6*gclwh10_6*pp*r20))+(((-7.4858e-5)*gclwh8_14*r21*r22*sj6))+(((0.008277786332433)*cj6*gclwh8_10*r21))+(((0.02)*cj6*gclwh10_14*npy*pz*r20*sj6))+(((-0.01)*cj6*gclwh6_14*pp*r20*r22))+(((-0.05165202)*gclwh14_5*rxp0_2*sj6))+(((-0.02)*cj6*gclwh12_6*pp*rxp1_2))+(((-0.069)*cj6*gclwh8_5*pp*r21))+(((-0.0074858)*cj6*gclwh14_14*r20*rxp0_2*sj6))+(((-0.11826)*cj6*gclwh8_10*npy*pz))+(((0.039241231557934)*gclwh14_6*rxp0_2*sj6))+(((0.0005165202)*gclwh8_5*r22))+(((0.039241231557934)*gclwh12_6*rxp2_2))+(((0.001399930041)*gclwh8_14*r20*r21*(sj6*sj6)))+(((0.00138)*gclwh14_5*rxp2_2))+(((-0.11826)*gclwh10_10*npy*pz*sj6))+(((-0.00039241231557934)*gclwh8_6*r22))+(((-2.0)*cj6*gclwh8_5*npy*(pz*pz)))+(((-1.0)*gclwh6_6*r22*(pp*pp)))+(((0.001399930041)*gclwh6_14*r21*r22*sj6))+(((-0.00138)*gclwh12_5*rxp0_2*sj6))+(((-0.000442635354)*gclwh8_10*r22))+(((-0.02)*gclwh14_5*pz*rxp2_2))+(((-0.1401930041)*cj6*gclwh10_5*pz*r20))+(((-0.11826)*gclwh8_10*npx*pz*sj6))+(((-1.0)*cj6*gclwh8_6*r21*(pp*pp)))+(((0.0442635354)*gclwh12_10*rxp2_2))+(((-0.069)*gclwh8_5*pp*r20*sj6))+(((0.001401930041)*gclwh10_14*(r21*r21)*(sj6*sj6)))+(((0.0442635354)*gclwh14_10*rxp0_2*sj6))+(((-0.74858)*cj6*gclwh4_6*pp*rxp0_2))+(((-0.00734904236913956)*cj6*gclwh10_6*r20))+(((0.1399930041)*cj6*gclwh8_5*pz*r21))+(((0.74858)*gclwh14_5*pz*rxp0_2*sj6))+(((-0.05165202)*cj6*gclwh14_5*rxp1_2))+(((7.4858e-5)*cj6*gclwh6_14*sj6*(r21*r21)))+(((0.0011826)*gclwh12_10*rxp0_2*sj6))+(((0.02)*gclwh8_14*npy*pz*r20*(cj6*cj6)))+(((0.0442635354)*cj6*gclwh14_10*rxp1_2))+(((0.0002)*gclwh4_14*pz*r21*sj6))+(((7.4858e-5)*cj6*gclwh8_14*r20*r22))+(((0.001048417846)*cj6*gclwh12_6*rxp1_2))+(((0.05165202)*gclwh4_5*rxp1_2*sj6))+(((-0.0074858)*cj6*gclwh6_6*pp*r21))+(((-0.0002)*cj6*gclwh12_14*r20*rxp0_2*sj6))+(((0.74858)*cj6*gclwh14_5*pz*rxp1_2))+(((-0.039241231557934)*gclwh4_6*rxp1_2*sj6))+(((0.00733855819067956)*gclwh6_6*r22))+(((2.0)*gclwh10_6*npy*pp*pz*sj6))+(((0.001048417846)*gclwh4_6*pz))+(((0.00039241231557934)*gclwh6_6*r20*sj6))+(((0.02)*cj6*gclwh12_5*pz*rxp1_2))+((gclwh10_5*pp*pz*r21*sj6))+(((-0.02)*gclwh10_14*npy*pz*r21*(sj6*sj6)))+(((0.05913)*gclwh8_10*pp*r20*sj6))+(((0.01)*cj6*gclwh8_14*pp*sj6*(r21*r21)))+(((-0.0005165202)*cj6*gclwh6_5*r21))+(((0.0096733172829)*cj6*gclwh10_5*r20))+(((-0.0442635354)*gclwh4_10*rxp1_2*sj6))+(((-0.001399930041)*cj6*gclwh8_14*sj6*(r20*r20)))+(((-0.02)*cj6*gclwh10_14*pp*r20*r21*sj6))+(((-0.0096595172829)*gclwh8_5*r20*sj6))+(((-0.02)*gclwh10_14*npx*pz*r20*(cj6*cj6)))+(((-0.74858)*cj6*gclwh14_6*pp*rxp1_2))+(((0.138)*gclwh10_5*npy*pz*sj6))+(((-1.0)*gclwh10_6*r21*sj6*(pp*pp)))+(((0.1401930041)*gclwh10_5*pz*r21*sj6))+(((2.0)*gclwh6_6*npz*pp*pz))+(((0.05913)*cj6*gclwh8_10*pp*r21))+(((0.039241231557934)*cj6*gclwh4_6*rxp0_2))+(((0.0002)*gclwh12_14*r21*rxp0_2*(sj6*sj6)))+(((0.069)*cj6*gclwh10_5*pp*r20))+(((-0.0074858)*gclwh14_14*r20*rxp1_2*(cj6*cj6)))+(((0.02)*cj6*gclwh10_14*npx*pz*r21*sj6))+(((0.001401930041)*gclwh10_14*(cj6*cj6)*(r20*r20))));
op[6]=((((-7.4858e-5)*cj6*gclwh7_15*sj6*(r21*r21)))+(((-0.02)*gclwh15_1*pz*rxp2_2))+(((-0.02)*cj6*gclwh9_15*npx*pz*r20*sj6))+(((-0.0074858)*cj6*gclwh5_15*r20*rxp1_2*sj6))+(((-0.001399930041)*gclwh7_15*r21*r22*sj6))+(((-0.02)*cj6*gclwh13_2*pp*rxp1_2))+(((0.113073749341611)*cj6*gclwh9_11*r21))+(((0.1401930041)*gclwh11_1*pz*r21*sj6))+(((-0.80771)*cj6*gclwh11_11*pp*r20))+(((0.113073749341611)*gclwh9_11*r20*sj6))+(((0.0161542)*gclwh13_11*rxp0_2*sj6))+(((-0.0074858)*cj6*gclwh5_15*r21*rxp0_2*sj6))+(((0.001048417846)*gclwh13_2*rxp0_2*sj6))+(((-1.0)*gclwh9_2*r20*sj6*(pp*pp)))+(((0.0002)*gclwh13_15*r20*rxp1_2*(cj6*cj6)))+(((0.001399930041)*gclwh9_15*r20*r21*(cj6*cj6)))+(((0.113235291341611)*gclwh11_11*r21*sj6))+(((0.0074858)*cj6*gclwh7_1*pz*r21))+(((0.05165202)*cj6*gclwh15_1*rxp1_2))+(((0.01)*cj6*gclwh9_15*pp*sj6*(r20*r20)))+(((-0.138)*gclwh11_1*npy*pz*sj6))+(((0.74858)*gclwh15_1*pz*rxp0_2*sj6))+(((-0.05165202)*gclwh5_1*rxp1_2*sj6))+(((-0.0002)*cj6*gclwh15_15*r20*rxp2_2))+(((0.0074858)*gclwh7_1*pz*r20*sj6))+(((-1.61542)*gclwh7_11*npz*pz))+(((0.001048417846)*cj6*gclwh13_2*rxp1_2))+(((0.001399930041)*cj6*gclwh7_15*r20*r22))+(((-0.02)*gclwh5_2*pp*pz))+(((0.0002)*gclwh15_15*r21*rxp2_2*sj6))+(((-1.0)*gclwh11_2*r21*sj6*(pp*pp)))+(((2.0)*gclwh9_2*npx*pp*pz*sj6))+(((0.0096595172829)*gclwh9_1*r20*sj6))+(((-0.0877721118)*gclwh11_2*pp*r21*sj6))+(((1.61542)*cj6*gclwh11_11*npx*pz))+(((0.0074858)*gclwh5_15*r21*rxp1_2*(sj6*sj6)))+(((-0.0096733172829)*cj6*gclwh11_1*r20))+(((0.02)*cj6*gclwh13_1*pz*rxp1_2))+(((0.00138)*cj6*gclwh13_1*rxp1_2))+(((-0.1048417846)*gclwh7_2*npz*pz))+(((-0.01)*gclwh7_15*pp*r21*r22*sj6))+(((-0.138)*cj6*gclwh9_1*npy*pz))+(((-0.0002)*cj6*gclwh13_15*r21*rxp1_2*sj6))+(((-0.113235291341611)*cj6*gclwh11_11*r20))+(((0.1399930041)*cj6*gclwh9_1*pz*r21))+(((-1.0)*cj6*gclwh9_2*r21*(pp*pp)))+(((0.001399930041)*cj6*gclwh9_15*sj6*(r20*r20)))+(((0.02)*gclwh11_15*npx*pz*r20*(cj6*cj6)))+(((0.0005165202)*gclwh7_1*r20*sj6))+(((0.1399930041)*gclwh7_1*pz*r22))+(((0.02)*gclwh13_1*pz*rxp0_2*sj6))+(((-0.02)*cj6*gclwh11_15*npx*pz*r21*sj6))+(((0.02)*cj6*gclwh11_15*pp*r20*r21*sj6))+(((2.0)*gclwh7_2*npz*pp*pz))+(((0.069)*gclwh11_1*pp*r21*sj6))+(((7.4858e-5)*gclwh7_15*r20*r21*(cj6*cj6)))+(((0.02)*cj6*gclwh9_15*npy*pz*r21*sj6))+(((-0.74858)*cj6*gclwh5_2*pp*rxp0_2))+(((0.05165202)*cj6*gclwh5_1*rxp0_2))+(((0.0161542)*gclwh5_11*pz))+(((0.069)*gclwh7_1*pp*r22))+(((-0.0875721118)*gclwh9_2*pp*r20*sj6))+(((0.0074858)*gclwh15_15*r20*rxp1_2*(cj6*cj6)))+(((-7.4858e-5)*gclwh7_15*r20*r21*(sj6*sj6)))+(((0.6046355518)*gclwh15_11*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh13_15*r20*rxp2_2))+(((0.80771)*cj6*gclwh9_11*pp*r21))+(((0.00138)*gclwh5_1*pz))+(((0.002803860082)*cj6*gclwh11_15*r20*r21*sj6))+(((-0.01)*gclwh11_15*pp*(cj6*cj6)*(r20*r20)))+(((-0.0074858)*gclwh15_15*r21*rxp0_2*(sj6*sj6)))+(((-1.61542)*gclwh9_11*npx*pz*sj6))+((cj6*gclwh9_1*pp*pz*r21))+(((0.138)*cj6*gclwh11_1*npx*pz))+(((0.74858)*gclwh13_1*pz*rxp2_2))+(((-0.1401930041)*cj6*gclwh11_1*pz*r20))+(((7.4858e-5)*gclwh9_15*r21*r22*sj6))+(((7.4858e-5)*cj6*gclwh7_15*sj6*(r20*r20)))+(((-0.0161542)*gclwh15_11*rxp2_2))+(((0.80771)*gclwh7_11*pp*r22))+(((0.0161542)*cj6*gclwh13_11*rxp1_2))+(((0.039241231557934)*cj6*gclwh5_2*rxp0_2))+(((-0.138)*gclwh9_1*npx*pz*sj6))+(((0.02)*gclwh9_15*npx*pz*r21*(sj6*sj6)))+(((-0.001401930041)*gclwh11_15*(r21*r21)*(sj6*sj6)))+(((0.0877721118)*cj6*gclwh11_2*pp*r20))+(((-0.0074858)*gclwh7_2*pp*r20*sj6))+(((0.0074858)*gclwh5_15*r20*rxp0_2*(cj6*cj6)))+(((-1.0)*gclwh7_2*r22*(pp*pp)))+(((0.0074858)*gclwh9_2*pp*r22))+(((0.02)*gclwh11_15*npy*pz*r21*(sj6*sj6)))+(((0.00733855819067956)*cj6*gclwh9_2*r21))+((gclwh9_1*pp*pz*r20*sj6))+(((-1.0)*cj6*gclwh11_1*pp*pz*r20))+(((0.00734904236913956)*gclwh11_2*r21*sj6))+(((-0.0074858)*gclwh9_1*pz*r22))+(((-0.01)*gclwh9_15*pp*r20*r21*(sj6*sj6)))+(((0.001048417846)*gclwh5_2*pz))+(((0.069)*cj6*gclwh9_1*pp*r21))+(((0.80771)*gclwh11_11*pp*r21*sj6))+(((-0.0074858)*cj6*gclwh15_15*r21*rxp1_2*sj6))+(((0.74858)*gclwh5_2*pp*rxp1_2*sj6))+(((0.00733855819067956)*gclwh7_2*r22))+(((-0.01)*cj6*gclwh9_15*pp*sj6*(r21*r21)))+(((0.1048417846)*cj6*gclwh11_2*npx*pz))+(((-0.039241231557934)*gclwh5_2*rxp1_2*sj6))+(((0.039241231557934)*cj6*gclwh15_2*rxp1_2))+(((-0.74858)*gclwh13_2*pp*rxp2_2))+(((-0.02)*gclwh13_2*pp*rxp0_2*sj6))+(((-0.02)*gclwh9_15*npy*pz*r20*(cj6*cj6)))+(((-7.4858e-5)*cj6*gclwh9_15*r20*r22))+(((0.01)*cj6*gclwh7_15*pp*r20*r22))+(((-0.00734904236913956)*cj6*gclwh11_2*r20))+(((-0.74858)*cj6*gclwh15_2*pp*rxp1_2))+(((0.006046355518)*gclwh7_11*r20*sj6))+(((-0.1048417846)*gclwh11_2*npy*pz*sj6))+(((-2.0)*gclwh7_1*npz*(pz*pz)))+(((0.00138)*gclwh13_1*rxp0_2*sj6))+((gclwh7_1*pp*pz*r22))+(((-0.069)*cj6*gclwh11_1*pp*r20))+((gclwh11_1*pp*pz*r21*sj6))+(((-0.0002)*gclwh5_15*pz*r21*sj6))+(((2.0)*cj6*gclwh9_2*npy*pp*pz))+(((-0.00039241231557934)*gclwh9_2*r22))+(((0.74858)*cj6*gclwh5_1*pz*rxp0_2))+(((-1.61542)*cj6*gclwh9_11*npy*pz))+(((0.0002)*cj6*gclwh5_15*pz*r20))+(((-0.006046355518)*gclwh9_11*r22))+(((-0.001399930041)*cj6*gclwh9_15*sj6*(r21*r21)))+(((0.00039241231557934)*cj6*gclwh7_2*r21))+(((0.05165202)*gclwh13_1*rxp2_2))+(((-0.138)*gclwh7_1*npz*pz))+(((-0.1048417846)*cj6*gclwh9_2*npy*pz))+(((-0.02)*cj6*gclwh7_15*npz*pz*r20))+(((0.02)*gclwh15_2*pp*rxp2_2))+(((0.0005165202)*cj6*gclwh7_1*r21))+(((-0.74858)*gclwh5_1*pz*rxp1_2*sj6))+(((-2.0)*cj6*gclwh9_1*npy*(pz*pz)))+(((0.00039241231557934)*gclwh7_2*r20*sj6))+(((-0.02)*cj6*gclwh11_15*npy*pz*r20*sj6))+(((0.1399930041)*gclwh9_1*pz*r20*sj6))+(((0.0096733172829)*gclwh11_1*r21*sj6))+(((-0.01)*gclwh11_15*pp*(r21*r21)*(sj6*sj6)))+(((0.80771)*gclwh9_11*pp*r20*sj6))+(((0.00733855819067956)*gclwh9_2*r20*sj6))+(((0.069)*gclwh9_1*pp*r20*sj6))+(((-0.0002)*gclwh13_15*r21*rxp0_2*(sj6*sj6)))+(((-0.0005165202)*gclwh9_1*r22))+(((0.0096595172829)*gclwh7_1*r22))+(((0.039241231557934)*gclwh13_2*rxp2_2))+(((-0.6046355518)*gclwh5_11*rxp1_2*sj6))+(((2.0)*cj6*gclwh11_1*npx*(pz*pz)))+(((-0.0074858)*gclwh13_15*r21*rxp2_2*sj6))+(((0.6046355518)*cj6*gclwh15_11*rxp1_2))+(((-2.0)*cj6*gclwh11_2*npx*pp*pz))+(((2.0)*gclwh11_2*npy*pp*pz*sj6))+((cj6*gclwh11_2*r20*(pp*pp)))+(((-0.0875721118)*gclwh7_2*pp*r22))+(((0.02)*gclwh7_15*npz*pz*r21*sj6))+(((-2.0)*gclwh9_1*npx*sj6*(pz*pz)))+(((0.74858)*cj6*gclwh15_1*pz*rxp1_2))+(((-0.001048417846)*gclwh15_2*rxp2_2))+(((0.01)*gclwh9_15*pp*r20*r21*(cj6*cj6)))+(((-0.74858)*gclwh15_2*pp*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh15_15*r20*rxp0_2*sj6))+(((0.039241231557934)*gclwh15_2*rxp0_2*sj6))+(((-0.1048417846)*gclwh9_2*npx*pz*sj6))+(((0.6046355518)*gclwh13_11*rxp2_2))+(((-2.0)*gclwh11_1*npy*sj6*(pz*pz)))+(((-0.0875721118)*cj6*gclwh9_2*pp*r21))+(((0.0002)*cj6*gclwh13_15*r20*rxp0_2*sj6))+(((-0.001401930041)*gclwh11_15*(cj6*cj6)*(r20*r20)))+(((0.02)*gclwh5_1*(pz*pz)))+(((-0.0074858)*cj6*gclwh7_2*pp*r21))+(((0.113073749341611)*gclwh7_11*r22))+(((-1.61542)*gclwh11_11*npy*pz*sj6))+(((0.6046355518)*cj6*gclwh5_11*rxp0_2))+(((-0.001399930041)*gclwh9_15*r20*r21*(sj6*sj6)))+(((0.006046355518)*cj6*gclwh7_11*r21))+(((0.0096595172829)*cj6*gclwh9_1*r21))+(((-0.00138)*gclwh15_1*rxp2_2))+(((0.05165202)*gclwh15_1*rxp0_2*sj6)));
IkReal x153=((0.6488990872)*gclwh5_15);
IkReal x154=(cj6*rxp0_2);
IkReal x155=(cj6*npx);
IkReal x156=(r21*sj6);
IkReal x157=((0.0193466345658)*gclwh11_15);
IkReal x158=(npy*sj6);
IkReal x159=(gclwh15_15*rxp2_2);
IkReal x160=(gclwh12_0*r22);
IkReal x161=(npz*pz);
IkReal x162=(rxp1_2*sj6);
IkReal x163=(rxp0_2*sj6);
IkReal x164=((0.0173368)*gclwh6_14);
IkReal x165=((0.04)*gclwh6_0);
IkReal x166=(cj6*r21);
IkReal x167=((0.0193190345658)*gclwh9_15);
IkReal x168=((0.0173368)*pz);
IkReal x169=((0.0149716)*r22);
IkReal x170=(r20*sj6);
IkReal x171=((0.2799860082)*gclwh14_0);
IkReal x172=((0.6488990872)*rxp2_2);
IkReal x173=((0.10330404)*gclwh5_15);
IkReal x174=((0.86684)*gclwh4_14);
IkReal x175=((0.006488990872)*gclwh7_15);
IkReal x176=((0.121351535674044)*gclwh14_14);
IkReal x177=((2.0)*gclwh4_0);
IkReal x178=((1.73368)*pz);
IkReal x179=((0.2803860082)*gclwh4_0);
IkReal x180=((0.006488990872)*r22);
IkReal x181=((0.6488990872)*gclwh10_14);
IkReal x182=((4.0)*pz);
IkReal x183=((0.2799860082)*gclwh9_4);
IkReal x184=((0.0149716)*gclwh12_0);
IkReal x185=((0.121351535674044)*gclwh9_15);
IkReal x186=(cj6*npy);
IkReal x187=((0.04)*rxp2_2);
IkReal x188=(cj6*r20);
IkReal x189=((0.121524903674044)*gclwh4_14);
IkReal x190=((0.121524903674044)*gclwh11_15);
IkReal x191=((0.138)*gclwh11_15);
IkReal x192=(cj6*rxp1_2);
IkReal x193=((1.49716)*gclwh8_0);
IkReal x194=((0.04)*gclwh13_4);
IkReal x195=((1.49716)*gclwh5_4);
IkReal x196=((0.0149716)*gclwh7_4);
IkReal x197=(gclwh7_15*r22);
IkReal x198=((0.86684)*pp);
IkReal x199=((2.0)*gclwh11_4);
IkReal x200=((0.2803860082)*gclwh11_4);
IkReal x201=(gclwh12_14*r22);
IkReal x202=((0.138)*pp);
IkReal x203=((1.49716)*rxp2_2);
IkReal x204=((0.006488990872)*gclwh12_14);
IkReal x205=(npx*sj6);
IkReal x206=((2.0)*pp);
IkReal x207=((0.6488990872)*gclwh8_14);
IkReal x208=(gclwh7_4*r22);
IkReal x209=((0.0010330404)*gclwh7_15);
IkReal x210=((1.49716)*gclwh10_0);
IkReal x211=((1.49716)*gclwh15_4);
IkReal x212=((0.04)*pz);
IkReal x213=((0.276)*gclwh11_15*pz);
IkReal x214=(gclwh13_15*x163);
IkReal x215=(pp*x188);
IkReal x216=(gclwh15_15*x192);
IkReal x217=(gclwh14_0*x206);
IkReal x218=(gclwh9_4*x206);
IkReal x219=((0.276)*gclwh9_15*pz);
op[7]=(((gclwh9_9*pp*r20*sj6))+(((-0.86684)*cj6*gclwh11_13*npx*pz))+(((0.3244495436)*gclwh5_13*rxp1_2*sj6))+(((0.138)*cj6*gclwh11_11*npx*pz))+(((2.0)*cj6*gclwh11_9*npx*pz))+(((-0.05165202)*gclwh5_11*rxp1_2*sj6))+((cj6*gclwh9_9*pp*r21))+(((0.74858)*cj6*gclwh15_9*rxp1_2))+(((0.069)*gclwh11_11*pp*r21*sj6))+(((-0.3244495436)*cj6*gclwh15_13*rxp1_2))+(((0.0005165202)*gclwh7_11*r20*sj6))+(((0.86684)*gclwh11_13*npy*pz*sj6))+(((-0.138)*cj6*gclwh9_11*npy*pz))+(((-0.0086684)*gclwh5_13*pz))+(((-2.0)*gclwh9_9*npx*pz*sj6))+(((0.05165202)*cj6*gclwh5_11*rxp0_2))+(((-0.1401930041)*cj6*gclwh11_9*r20))+(((-0.060675767837022)*gclwh7_13*r22))+(((-0.43342)*cj6*gclwh9_13*pp*r21))+(((0.060762451837022)*cj6*gclwh11_13*r20))+(((-0.00138)*gclwh15_11*rxp2_2))+(((0.0096595172829)*cj6*gclwh9_11*r21))+(((0.00138)*gclwh13_11*rxp0_2*sj6))+(((-0.138)*gclwh9_11*npx*pz*sj6))+(((-1.0)*cj6*gclwh11_9*pp*r20))+(((0.0074858)*cj6*gclwh7_9*r21))+(((0.00138)*gclwh5_11*pz))+(((0.0096733172829)*gclwh11_11*r21*sj6))+(((-0.003244495436)*cj6*gclwh7_13*r21))+(((-0.0086684)*gclwh13_13*rxp0_2*sj6))+(((0.1399930041)*gclwh7_9*r22))+(((0.86684)*gclwh7_13*npz*pz))+(((-0.0074858)*gclwh9_9*r22))+(((-0.3244495436)*gclwh13_13*rxp2_2))+(((-0.3244495436)*gclwh15_13*rxp0_2*sj6))+(((0.0096595172829)*gclwh7_11*r22))+(((0.0086684)*gclwh15_13*rxp2_2))+(((-0.003244495436)*gclwh7_13*r20*sj6))+(((-0.43342)*gclwh7_13*pp*r22))+(((0.069)*gclwh7_11*pp*r22))+(((-0.060675767837022)*cj6*gclwh9_13*r21))+(((0.003244495436)*gclwh9_13*r22))+(((-0.02)*gclwh15_9*rxp2_2))+(((0.1399930041)*cj6*gclwh9_9*r21))+((gclwh7_9*pp*r22))+(((-0.0096733172829)*cj6*gclwh11_11*r20))+(((0.00138)*cj6*gclwh13_11*rxp1_2))+(((0.069)*cj6*gclwh9_11*pp*r21))+(((-0.43342)*gclwh11_13*pp*r21*sj6))+(((0.1401930041)*gclwh11_9*r21*sj6))+(((-0.060762451837022)*gclwh11_13*r21*sj6))+(((0.43342)*cj6*gclwh11_13*pp*r20))+(((0.069)*gclwh9_11*pp*r20*sj6))+(((0.02)*gclwh5_9*pz))+(((0.0005165202)*cj6*gclwh7_11*r21))+(((0.05165202)*cj6*gclwh15_11*rxp1_2))+((gclwh11_9*pp*r21*sj6))+(((0.05165202)*gclwh15_11*rxp0_2*sj6))+(((-2.0)*gclwh11_9*npy*pz*sj6))+(((-2.0)*gclwh7_9*npz*pz))+(((-0.0005165202)*gclwh9_11*r22))+(((0.74858)*gclwh15_9*rxp0_2*sj6))+(((-0.138)*gclwh7_11*npz*pz))+(((-2.0)*cj6*gclwh9_9*npy*pz))+(((0.0096595172829)*gclwh9_11*r20*sj6))+(((0.86684)*gclwh9_13*npx*pz*sj6))+(((-0.74858)*gclwh5_9*rxp1_2*sj6))+(((0.02)*gclwh13_9*rxp0_2*sj6))+(((0.74858)*cj6*gclwh5_9*rxp0_2))+(((-0.069)*cj6*gclwh11_11*pp*r20))+(((0.05165202)*gclwh13_11*rxp2_2))+(((-0.43342)*gclwh9_13*pp*r20*sj6))+(((0.74858)*gclwh13_9*rxp2_2))+(((-0.3244495436)*cj6*gclwh5_13*rxp0_2))+(((0.0074858)*gclwh7_9*r20*sj6))+(((-0.060675767837022)*gclwh9_13*r20*sj6))+(((-0.138)*gclwh11_11*npy*pz*sj6))+(((0.86684)*cj6*gclwh9_13*npy*pz))+(((0.02)*cj6*gclwh13_9*rxp1_2))+(((0.1399930041)*gclwh9_9*r20*sj6))+(((-0.0086684)*cj6*gclwh13_13*rxp1_2)));
op[8]=((((-1.0)*x166*x167))+(((-1.0)*pp*x156*x191))+(((-1.0)*x154*x173))+((x157*x188))+((x191*x215))+(((-0.00276)*gclwh5_15*pz))+((x162*x173))+(((-0.00276)*gclwh13_15*x192))+(((-1.0)*x197*x202))+(((0.00276)*x159))+(((-1.0)*x155*x213))+(((-1.0)*x166*x209))+(((-0.10330404)*gclwh13_15*rxp2_2))+(((0.0010330404)*gclwh9_15*r22))+((x158*x213))+((x205*x219))+(((-0.00276)*x214))+((x186*x219))+(((-1.0)*x156*x157))+(((0.276)*gclwh7_15*x161))+(((-0.10330404)*gclwh15_15*x163))+(((-1.0)*gclwh9_15*x166*x202))+(((-0.10330404)*x216))+(((-1.0)*x170*x209))+(((-1.0)*gclwh9_15*x170*x202))+(((-0.0193190345658)*x197))+(((-1.0)*x167*x170)));
op[9]=((-0.3852277928)+(((-1.0)*x163*x194))+(((-1.0)*pp*x156*x199))+(((-1.0)*gclwh9_15*x178*x186))+((x153*x154))+(((4.0)*gclwh7_4*x161))+((gclwh11_4*x158*x182))+((gclwh15_4*x187))+((x162*x195))+(((0.6488990872)*x216))+(((-1.0)*x188*x190))+(((0.121351535674044)*x197))+(((-1.0)*x166*x218))+(((-1.0)*x154*x195))+((gclwh9_4*x182*x186))+(((-1.0)*x192*x194))+(((-1.0)*gclwh9_15*x178*x205))+((x199*x215))+((gclwh11_15*x155*x178))+(((0.0173368)*x214))+(((-1.0)*gclwh11_4*x155*x182))+(((0.6488990872)*gclwh15_15*x163))+(((-1.0)*x170*x196))+(((-1.0)*x163*x211))+((gclwh9_4*x182*x205))+(((-1.0)*x206*x208))+((x156*x190))+((x188*x200))+(((-1.0)*x170*x183))+((gclwh11_15*x156*x198))+((x166*x185))+(((-1.0)*gclwh13_4*x203))+((x166*x175))+(((0.0173368)*gclwh13_15*x192))+(((-1.0)*gclwh5_4*x212))+(((-1.0)*gclwh11_15*x188*x198))+(((-1.0)*x170*x218))+((gclwh9_15*x170*x198))+(((-1.73368)*gclwh7_15*x161))+((gclwh9_15*x166*x198))+(((-1.0)*gclwh9_15*x180))+(((-0.2799860082)*x208))+(((-1.0)*gclwh11_15*x158*x178))+((x170*x175))+((gclwh9_4*x169))+(((-1.0)*x166*x196))+((gclwh13_15*x172))+(((-1.0)*x192*x211))+((gclwh5_15*x168))+(((-1.0)*x166*x183))+((x170*x185))+((x197*x198))+(((-1.0)*x156*x200))+(((-0.0173368)*x159))+(((-1.0)*x153*x162)));
op[10]=((((-0.0096595172829)*gclwh9_1*r20*sj6))+(((-0.00138)*gclwh13_1*rxp0_2*sj6))+(((-7.4858e-5)*cj6*gclwh7_15*sj6*(r21*r21)))+(((-0.02)*gclwh15_1*pz*rxp2_2))+(((-0.02)*cj6*gclwh9_15*npx*pz*r20*sj6))+(((-0.0074858)*cj6*gclwh5_15*r20*rxp1_2*sj6))+(((-0.001399930041)*gclwh7_15*r21*r22*sj6))+(((-0.02)*cj6*gclwh13_2*pp*rxp1_2))+(((0.113073749341611)*cj6*gclwh9_11*r21))+(((0.1401930041)*gclwh11_1*pz*r21*sj6))+(((-0.80771)*cj6*gclwh11_11*pp*r20))+(((0.113073749341611)*gclwh9_11*r20*sj6))+(((0.0161542)*gclwh13_11*rxp0_2*sj6))+(((-0.0074858)*cj6*gclwh5_15*r21*rxp0_2*sj6))+(((0.001048417846)*gclwh13_2*rxp0_2*sj6))+(((-1.0)*gclwh9_2*r20*sj6*(pp*pp)))+(((0.0002)*gclwh13_15*r20*rxp1_2*(cj6*cj6)))+(((0.001399930041)*gclwh9_15*r20*r21*(cj6*cj6)))+(((0.113235291341611)*gclwh11_11*r21*sj6))+(((0.0074858)*cj6*gclwh7_1*pz*r21))+(((0.01)*cj6*gclwh9_15*pp*sj6*(r20*r20)))+(((-0.069)*cj6*gclwh9_1*pp*r21))+(((0.74858)*gclwh15_1*pz*rxp0_2*sj6))+(((-0.0002)*cj6*gclwh15_15*r20*rxp2_2))+(((0.0074858)*gclwh7_1*pz*r20*sj6))+(((-1.61542)*gclwh7_11*npz*pz))+(((0.138)*gclwh11_1*npy*pz*sj6))+(((0.001048417846)*cj6*gclwh13_2*rxp1_2))+(((-0.00138)*cj6*gclwh13_1*rxp1_2))+(((0.001399930041)*cj6*gclwh7_15*r20*r22))+(((-0.0096595172829)*cj6*gclwh9_1*r21))+(((-0.02)*gclwh5_2*pp*pz))+(((0.0096733172829)*cj6*gclwh11_1*r20))+(((0.0002)*gclwh15_15*r21*rxp2_2*sj6))+(((-1.0)*gclwh11_2*r21*sj6*(pp*pp)))+(((2.0)*gclwh9_2*npx*pp*pz*sj6))+(((-0.0877721118)*gclwh11_2*pp*r21*sj6))+(((1.61542)*cj6*gclwh11_11*npx*pz))+(((0.0074858)*gclwh5_15*r21*rxp1_2*(sj6*sj6)))+(((0.02)*cj6*gclwh13_1*pz*rxp1_2))+(((-0.1048417846)*gclwh7_2*npz*pz))+(((-0.01)*gclwh7_15*pp*r21*r22*sj6))+(((-0.0002)*cj6*gclwh13_15*r21*rxp1_2*sj6))+(((-0.113235291341611)*cj6*gclwh11_11*r20))+(((-0.069)*gclwh7_1*pp*r22))+(((0.1399930041)*cj6*gclwh9_1*pz*r21))+(((-1.0)*cj6*gclwh9_2*r21*(pp*pp)))+(((0.001399930041)*cj6*gclwh9_15*sj6*(r20*r20)))+(((0.02)*gclwh11_15*npx*pz*r20*(cj6*cj6)))+(((0.138)*gclwh9_1*npx*pz*sj6))+(((-0.0005165202)*cj6*gclwh7_1*r21))+(((0.1399930041)*gclwh7_1*pz*r22))+(((0.02)*gclwh13_1*pz*rxp0_2*sj6))+(((-0.02)*cj6*gclwh11_15*npx*pz*r21*sj6))+(((0.02)*cj6*gclwh11_15*pp*r20*r21*sj6))+(((2.0)*gclwh7_2*npz*pp*pz))+(((7.4858e-5)*gclwh7_15*r20*r21*(cj6*cj6)))+(((0.02)*cj6*gclwh9_15*npy*pz*r21*sj6))+(((-0.74858)*cj6*gclwh5_2*pp*rxp0_2))+(((0.0161542)*gclwh5_11*pz))+(((-0.069)*gclwh9_1*pp*r20*sj6))+(((-0.0875721118)*gclwh9_2*pp*r20*sj6))+(((0.0074858)*gclwh15_15*r20*rxp1_2*(cj6*cj6)))+(((-7.4858e-5)*gclwh7_15*r20*r21*(sj6*sj6)))+(((0.6046355518)*gclwh15_11*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh13_15*r20*rxp2_2))+(((0.80771)*cj6*gclwh9_11*pp*r21))+(((0.069)*cj6*gclwh11_1*pp*r20))+(((0.002803860082)*cj6*gclwh11_15*r20*r21*sj6))+(((-0.01)*gclwh11_15*pp*(cj6*cj6)*(r20*r20)))+(((0.05165202)*gclwh5_1*rxp1_2*sj6))+(((-0.0074858)*gclwh15_15*r21*rxp0_2*(sj6*sj6)))+(((-1.61542)*gclwh9_11*npx*pz*sj6))+((cj6*gclwh9_1*pp*pz*r21))+(((0.74858)*gclwh13_1*pz*rxp2_2))+(((-0.1401930041)*cj6*gclwh11_1*pz*r20))+(((-0.05165202)*cj6*gclwh15_1*rxp1_2))+(((7.4858e-5)*gclwh9_15*r21*r22*sj6))+(((7.4858e-5)*cj6*gclwh7_15*sj6*(r20*r20)))+(((-0.0161542)*gclwh15_11*rxp2_2))+(((0.0005165202)*gclwh9_1*r22))+(((0.80771)*gclwh7_11*pp*r22))+(((-0.138)*cj6*gclwh11_1*npx*pz))+(((0.0161542)*cj6*gclwh13_11*rxp1_2))+(((0.039241231557934)*cj6*gclwh5_2*rxp0_2))+(((0.02)*gclwh9_15*npx*pz*r21*(sj6*sj6)))+(((-0.001401930041)*gclwh11_15*(r21*r21)*(sj6*sj6)))+(((0.0877721118)*cj6*gclwh11_2*pp*r20))+(((-0.0074858)*gclwh7_2*pp*r20*sj6))+(((0.0074858)*gclwh5_15*r20*rxp0_2*(cj6*cj6)))+(((-0.05165202)*gclwh15_1*rxp0_2*sj6))+(((-1.0)*gclwh7_2*r22*(pp*pp)))+(((0.0074858)*gclwh9_2*pp*r22))+(((0.02)*gclwh11_15*npy*pz*r21*(sj6*sj6)))+(((0.00733855819067956)*cj6*gclwh9_2*r21))+((gclwh9_1*pp*pz*r20*sj6))+(((-1.0)*cj6*gclwh11_1*pp*pz*r20))+(((0.00734904236913956)*gclwh11_2*r21*sj6))+(((-0.0074858)*gclwh9_1*pz*r22))+(((-0.01)*gclwh9_15*pp*r20*r21*(sj6*sj6)))+(((0.001048417846)*gclwh5_2*pz))+(((0.80771)*gclwh11_11*pp*r21*sj6))+(((-0.0074858)*cj6*gclwh15_15*r21*rxp1_2*sj6))+(((0.74858)*gclwh5_2*pp*rxp1_2*sj6))+(((0.00733855819067956)*gclwh7_2*r22))+(((-0.01)*cj6*gclwh9_15*pp*sj6*(r21*r21)))+(((-0.069)*gclwh11_1*pp*r21*sj6))+(((0.1048417846)*cj6*gclwh11_2*npx*pz))+(((-0.039241231557934)*gclwh5_2*rxp1_2*sj6))+(((0.039241231557934)*cj6*gclwh15_2*rxp1_2))+(((-0.74858)*gclwh13_2*pp*rxp2_2))+(((-0.02)*gclwh13_2*pp*rxp0_2*sj6))+(((-0.02)*gclwh9_15*npy*pz*r20*(cj6*cj6)))+(((-7.4858e-5)*cj6*gclwh9_15*r20*r22))+(((0.01)*cj6*gclwh7_15*pp*r20*r22))+(((-0.00734904236913956)*cj6*gclwh11_2*r20))+(((-0.74858)*cj6*gclwh15_2*pp*rxp1_2))+(((0.006046355518)*gclwh7_11*r20*sj6))+(((-0.1048417846)*gclwh11_2*npy*pz*sj6))+(((-0.0096595172829)*gclwh7_1*r22))+(((0.00138)*gclwh15_1*rxp2_2))+(((-2.0)*gclwh7_1*npz*(pz*pz)))+((gclwh7_1*pp*pz*r22))+((gclwh11_1*pp*pz*r21*sj6))+(((-0.0002)*gclwh5_15*pz*r21*sj6))+(((2.0)*cj6*gclwh9_2*npy*pp*pz))+(((-0.00039241231557934)*gclwh9_2*r22))+(((0.74858)*cj6*gclwh5_1*pz*rxp0_2))+(((-1.61542)*cj6*gclwh9_11*npy*pz))+(((0.0002)*cj6*gclwh5_15*pz*r20))+(((-0.006046355518)*gclwh9_11*r22))+(((-0.001399930041)*cj6*gclwh9_15*sj6*(r21*r21)))+(((0.00039241231557934)*cj6*gclwh7_2*r21))+(((-0.1048417846)*cj6*gclwh9_2*npy*pz))+(((-0.02)*cj6*gclwh7_15*npz*pz*r20))+(((0.02)*gclwh15_2*pp*rxp2_2))+(((-0.74858)*gclwh5_1*pz*rxp1_2*sj6))+(((-2.0)*cj6*gclwh9_1*npy*(pz*pz)))+(((0.00039241231557934)*gclwh7_2*r20*sj6))+(((-0.02)*cj6*gclwh11_15*npy*pz*r20*sj6))+(((0.138)*cj6*gclwh9_1*npy*pz))+(((0.1399930041)*gclwh9_1*pz*r20*sj6))+(((-0.01)*gclwh11_15*pp*(r21*r21)*(sj6*sj6)))+(((0.80771)*gclwh9_11*pp*r20*sj6))+(((0.00733855819067956)*gclwh9_2*r20*sj6))+(((-0.0002)*gclwh13_15*r21*rxp0_2*(sj6*sj6)))+(((0.138)*gclwh7_1*npz*pz))+(((0.039241231557934)*gclwh13_2*rxp2_2))+(((-0.0005165202)*gclwh7_1*r20*sj6))+(((-0.6046355518)*gclwh5_11*rxp1_2*sj6))+(((2.0)*cj6*gclwh11_1*npx*(pz*pz)))+(((-0.0074858)*gclwh13_15*r21*rxp2_2*sj6))+(((0.6046355518)*cj6*gclwh15_11*rxp1_2))+(((-2.0)*cj6*gclwh11_2*npx*pp*pz))+(((2.0)*gclwh11_2*npy*pp*pz*sj6))+(((-0.05165202)*gclwh13_1*rxp2_2))+((cj6*gclwh11_2*r20*(pp*pp)))+(((-0.0875721118)*gclwh7_2*pp*r22))+(((0.02)*gclwh7_15*npz*pz*r21*sj6))+(((-2.0)*gclwh9_1*npx*sj6*(pz*pz)))+(((0.74858)*cj6*gclwh15_1*pz*rxp1_2))+(((-0.001048417846)*gclwh15_2*rxp2_2))+(((0.01)*gclwh9_15*pp*r20*r21*(cj6*cj6)))+(((-0.74858)*gclwh15_2*pp*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh15_15*r20*rxp0_2*sj6))+(((0.039241231557934)*gclwh15_2*rxp0_2*sj6))+(((-0.05165202)*cj6*gclwh5_1*rxp0_2))+(((-0.1048417846)*gclwh9_2*npx*pz*sj6))+(((0.6046355518)*gclwh13_11*rxp2_2))+(((-2.0)*gclwh11_1*npy*sj6*(pz*pz)))+(((-0.0875721118)*cj6*gclwh9_2*pp*r21))+(((0.0002)*cj6*gclwh13_15*r20*rxp0_2*sj6))+(((-0.001401930041)*gclwh11_15*(cj6*cj6)*(r20*r20)))+(((0.02)*gclwh5_1*(pz*pz)))+(((-0.0074858)*cj6*gclwh7_2*pp*r21))+(((0.113073749341611)*gclwh7_11*r22))+(((-1.61542)*gclwh11_11*npy*pz*sj6))+(((0.6046355518)*cj6*gclwh5_11*rxp0_2))+(((-0.001399930041)*gclwh9_15*r20*r21*(sj6*sj6)))+(((0.006046355518)*cj6*gclwh7_11*r21))+(((-0.00138)*gclwh5_1*pz))+(((-0.0096733172829)*gclwh11_1*r21*sj6)));
op[11]=((((-0.060762451837022)*cj6*gclwh11_13*r20))+(((0.0086684)*gclwh13_13*rxp0_2*sj6))+(((0.02)*gclwh15_9*rxp2_2))+(((-0.86684)*gclwh9_13*npx*pz*sj6))+(((0.138)*cj6*gclwh11_11*npx*pz))+(((-0.1399930041)*cj6*gclwh9_9*r21))+(((-0.05165202)*gclwh5_11*rxp1_2*sj6))+(((0.069)*gclwh11_11*pp*r21*sj6))+(((-0.0074858)*gclwh7_9*r20*sj6))+(((0.0005165202)*gclwh7_11*r20*sj6))+(((0.86684)*cj6*gclwh11_13*npx*pz))+(((0.3244495436)*cj6*gclwh5_13*rxp0_2))+(((-0.138)*cj6*gclwh9_11*npy*pz))+(((-0.86684)*gclwh7_13*npz*pz))+(((0.0074858)*gclwh9_9*r22))+(((0.0086684)*gclwh5_13*pz))+(((0.05165202)*cj6*gclwh5_11*rxp0_2))+(((-0.86684)*cj6*gclwh9_13*npy*pz))+(((-0.00138)*gclwh15_11*rxp2_2))+(((-2.0)*cj6*gclwh11_9*npx*pz))+(((0.003244495436)*cj6*gclwh7_13*r21))+(((-0.43342)*cj6*gclwh11_13*pp*r20))+(((0.0096595172829)*cj6*gclwh9_11*r21))+(((-0.0086684)*gclwh15_13*rxp2_2))+(((0.00138)*gclwh13_11*rxp0_2*sj6))+(((-0.138)*gclwh9_11*npx*pz*sj6))+(((-0.86684)*gclwh11_13*npy*pz*sj6))+(((0.00138)*gclwh5_11*pz))+(((0.0096733172829)*gclwh11_11*r21*sj6))+(((0.003244495436)*gclwh7_13*r20*sj6))+(((-0.1399930041)*gclwh9_9*r20*sj6))+(((0.0096595172829)*gclwh7_11*r22))+(((0.060675767837022)*gclwh7_13*r22))+(((-1.0)*cj6*gclwh9_9*pp*r21))+(((-0.02)*gclwh5_9*pz))+(((-1.0)*gclwh9_9*pp*r20*sj6))+(((0.069)*gclwh7_11*pp*r22))+(((0.1401930041)*cj6*gclwh11_9*r20))+(((-0.74858)*cj6*gclwh5_9*rxp0_2))+(((-0.02)*gclwh13_9*rxp0_2*sj6))+(((0.43342)*cj6*gclwh9_13*pp*r21))+(((2.0)*gclwh11_9*npy*pz*sj6))+(((-1.0)*gclwh11_9*pp*r21*sj6))+(((-0.0096733172829)*cj6*gclwh11_11*r20))+(((0.060675767837022)*gclwh9_13*r20*sj6))+(((0.00138)*cj6*gclwh13_11*rxp1_2))+(((0.3244495436)*gclwh13_13*rxp2_2))+(((0.069)*cj6*gclwh9_11*pp*r21))+(((0.0086684)*cj6*gclwh13_13*rxp1_2))+(((0.3244495436)*gclwh15_13*rxp0_2*sj6))+(((-1.0)*gclwh7_9*pp*r22))+(((0.43342)*gclwh7_13*pp*r22))+(((2.0)*cj6*gclwh9_9*npy*pz))+(((-0.74858)*gclwh13_9*rxp2_2))+(((0.069)*gclwh9_11*pp*r20*sj6))+(((0.0005165202)*cj6*gclwh7_11*r21))+(((0.060762451837022)*gclwh11_13*r21*sj6))+((cj6*gclwh11_9*pp*r20))+(((0.05165202)*cj6*gclwh15_11*rxp1_2))+(((0.05165202)*gclwh15_11*rxp0_2*sj6))+(((-0.0005165202)*gclwh9_11*r22))+(((-0.0074858)*cj6*gclwh7_9*r21))+(((-0.138)*gclwh7_11*npz*pz))+(((0.0096595172829)*gclwh9_11*r20*sj6))+(((-0.02)*cj6*gclwh13_9*rxp1_2))+(((-0.1399930041)*gclwh7_9*r22))+(((2.0)*gclwh9_9*npx*pz*sj6))+(((-0.069)*cj6*gclwh11_11*pp*r20))+(((0.05165202)*gclwh13_11*rxp2_2))+(((0.74858)*gclwh5_9*rxp1_2*sj6))+(((-0.74858)*gclwh15_9*rxp0_2*sj6))+(((-0.1401930041)*gclwh11_9*r21*sj6))+(((2.0)*gclwh7_9*npz*pz))+(((0.43342)*gclwh9_13*pp*r20*sj6))+(((0.060675767837022)*cj6*gclwh9_13*r21))+(((-0.003244495436)*gclwh9_13*r22))+(((-0.138)*gclwh11_11*npy*pz*sj6))+(((0.43342)*gclwh11_13*pp*r21*sj6))+(((-0.3244495436)*gclwh5_13*rxp1_2*sj6))+(((-0.74858)*cj6*gclwh15_9*rxp1_2))+(((0.3244495436)*cj6*gclwh15_13*rxp1_2)));
op[12]=((0.1830918964)+(((-0.43342)*gclwh12_12*pp*r22))+(((0.00138)*cj6*gclwh6_10*rxp1_2))+((gclwh4_8*pp*r21*sj6))+(((0.02)*cj6*gclwh6_8*rxp1_2))+(((0.86684)*cj6*gclwh14_12*npy*pz))+(((-0.3244495436)*cj6*gclwh10_12*rxp0_2))+(((-0.1401930041)*cj6*gclwh4_8*r20))+(((2.0)*cj6*gclwh14_8*npy*pz))+(((0.74858)*gclwh6_8*rxp2_2))+(((0.3244495436)*gclwh10_12*rxp1_2*sj6))+(((-0.069)*cj6*gclwh14_10*pp*r21))+(((-0.00138)*gclwh8_10*rxp2_2))+(((2.0)*cj6*gclwh4_8*npx*pz))+(((0.138)*gclwh12_10*npz*pz))+(((0.43342)*gclwh4_12*pp*r21*sj6))+(((-0.069)*gclwh12_10*pp*r22))+(((0.05165202)*gclwh10_10*rxp1_2*sj6))+(((-0.0096733172829)*cj6*gclwh4_10*r20))+(((0.74858)*cj6*gclwh8_8*rxp1_2))+(((0.003244495436)*gclwh14_12*r22))+(((0.74858)*gclwh10_8*rxp1_2*sj6))+(((-0.060762451837022)*cj6*gclwh4_12*r20))+(((0.138)*gclwh14_10*npx*pz*sj6))+(((-0.05165202)*cj6*gclwh10_10*rxp0_2))+(((-0.003244495436)*cj6*gclwh12_12*r21))+(((-1.0)*cj6*gclwh14_8*pp*r21))+(((-1.0)*cj6*gclwh4_8*pp*r20))+(((-0.1399930041)*cj6*gclwh14_8*r21))+(((0.86684)*cj6*gclwh4_12*npx*pz))+(((-0.43342)*gclwh14_12*pp*r20*sj6))+(((-0.060675767837022)*gclwh14_12*r20*sj6))+(((-0.0005165202)*cj6*gclwh12_10*r21))+(((-0.0096595172829)*cj6*gclwh14_10*r21))+(((-0.060675767837022)*cj6*gclwh14_12*r21))+(((0.0086684)*cj6*gclwh6_12*rxp1_2))+(((-1.0)*gclwh12_8*pp*r22))+(((0.0086684)*gclwh6_12*rxp0_2*sj6))+(((0.3244495436)*gclwh6_12*rxp2_2))+(((-0.02)*gclwh10_8*pz))+(((-0.0096595172829)*gclwh12_10*r22))+(((-0.069)*gclwh14_10*pp*r20*sj6))+(((-0.069)*cj6*gclwh4_10*pp*r20))+(((0.00138)*gclwh6_10*rxp0_2*sj6))+(((-1.0)*gclwh14_8*pp*r20*sj6))+(((-0.003244495436)*gclwh12_12*r20*sj6))+(((-0.02)*gclwh8_8*rxp2_2))+(((0.05165202)*cj6*gclwh8_10*rxp1_2))+(((0.138)*cj6*gclwh14_10*npy*pz))+(((0.74858)*gclwh8_8*rxp0_2*sj6))+(((0.02)*gclwh6_8*rxp0_2*sj6))+(((-0.86684)*gclwh4_12*npy*pz*sj6))+(((-2.0)*gclwh4_8*npy*pz*sj6))+(((0.138)*cj6*gclwh4_10*npx*pz))+(((-0.0005165202)*gclwh12_10*r20*sj6))+(((0.0074858)*gclwh14_8*r22))+(((-0.00138)*gclwh10_10*pz))+(((-0.0086684)*gclwh8_12*rxp2_2))+(((0.05165202)*gclwh6_10*rxp2_2))+(((-0.1399930041)*gclwh14_8*r20*sj6))+(((-0.0074858)*cj6*gclwh12_8*r21))+(((-0.1399930041)*gclwh12_8*r22))+(((0.86684)*gclwh14_12*npx*pz*sj6))+(((0.86684)*gclwh12_12*npz*pz))+(((-0.43342)*cj6*gclwh14_12*pp*r21))+(((2.0)*gclwh12_8*npz*pz))+(((-0.0096595172829)*gclwh14_10*r20*sj6))+(((0.069)*gclwh4_10*pp*r21*sj6))+(((2.0)*gclwh14_8*npx*pz*sj6))+(((-0.43342)*cj6*gclwh4_12*pp*r20))+(((-0.0086684)*gclwh10_12*pz))+(((0.1401930041)*gclwh4_8*r21*sj6))+(((0.0096733172829)*gclwh4_10*r21*sj6))+(((-0.74858)*cj6*gclwh10_8*rxp0_2))+(((-0.0074858)*gclwh12_8*r20*sj6))+(((-0.138)*gclwh4_10*npy*pz*sj6))+(((-0.060675767837022)*gclwh12_12*r22))+(((0.060762451837022)*gclwh4_12*r21*sj6))+(((0.05165202)*gclwh8_10*rxp0_2*sj6))+(((0.0005165202)*gclwh14_10*r22))+(((0.3244495436)*gclwh8_12*rxp0_2*sj6))+(((0.3244495436)*cj6*gclwh8_12*rxp1_2)));
op[13]=((0.05981196)+(((0.00733855819067956)*gclwh14_6*r20*sj6))+(((-0.001401930041)*gclwh4_14*(r21*r21)*(sj6*sj6)))+(((0.0096595172829)*cj6*gclwh1_5*r21))+(((-0.0074858)*cj6*gclwh3_5*pz*r21))+((gclwh1_6*r20*sj6*(pp*pp)))+(((-0.00039241231557934)*gclwh3_6*r20*sj6))+(((0.000442635354)*gclwh12_10*r20*sj6))+(((-0.1048417846)*gclwh12_6*npz*pz))+(((-0.01)*cj6*gclwh12_14*pp*r20*r22))+(((-0.01)*gclwh14_14*pp*r20*r21*(cj6*cj6)))+(((0.0074858)*cj6*gclwh8_14*r20*rxp0_2*sj6))+(((0.008277786332433)*cj6*gclwh14_10*r21))+(((-1.0)*cj6*gclwh4_6*r20*(pp*pp)))+(((0.0074858)*gclwh14_6*pp*r22))+(((-0.11826)*gclwh14_10*npx*pz*sj6))+(((0.0442635354)*cj6*gclwh10_10*rxp0_2))+(((-0.0002)*cj6*gclwh8_14*r20*rxp2_2))+(((0.0096595172829)*gclwh12_5*r22))+(((-0.0074858)*gclwh10_14*r21*rxp1_2*(sj6*sj6)))+(((-0.00138)*cj6*gclwh6_5*rxp1_2))+(((-0.1401930041)*gclwh4_5*pz*r21*sj6))+(((0.0074858)*cj6*gclwh12_5*pz*r21))+(((0.039241231557934)*cj6*gclwh10_6*rxp0_2))+(((0.001048417846)*gclwh8_6*rxp2_2))+(((0.0074858)*cj6*gclwh10_14*r20*rxp1_2*sj6))+(((-0.0074858)*cj6*gclwh8_14*r21*rxp1_2*sj6))+(((-0.74858)*cj6*gclwh10_6*pp*rxp0_2))+(((2.0)*gclwh1_5*npx*sj6*(pz*pz)))+(((-0.039241231557934)*cj6*gclwh8_6*rxp1_2))+(((0.0074858)*gclwh3_6*pp*r20*sj6))+(((-0.02)*gclwh6_5*pz*rxp0_2*sj6))+(((-0.001048417846)*gclwh6_6*rxp0_2*sj6))+(((-0.0096595172829)*gclwh3_5*r22))+(((0.0005165202)*gclwh12_5*r20*sj6))+(((-0.0875721118)*gclwh14_6*pp*r20*sj6))+(((0.02)*cj6*gclwh6_6*pp*rxp1_2))+(((0.01)*cj6*gclwh14_14*pp*sj6*(r21*r21)))+(((-0.05165202)*gclwh10_5*rxp1_2*sj6))+(((-7.4858e-5)*gclwh14_14*r21*r22*sj6))+(((-0.0011826)*cj6*gclwh6_10*rxp1_2))+(((-0.0877721118)*cj6*gclwh4_6*pp*r20))+(((-0.02)*cj6*gclwh14_14*npy*pz*r21*sj6))+(((0.1399930041)*gclwh12_5*pz*r22))+(((0.02)*rxp1_2*sj6))+(((0.1399930041)*cj6*gclwh14_5*pz*r21))+(((-2.0)*cj6*gclwh1_6*npy*pp*pz))+(((-2.0)*cj6*gclwh4_5*npx*(pz*pz)))+(((0.02)*gclwh4_14*npy*pz*r21*(sj6*sj6)))+(((-0.0074858)*gclwh12_6*pp*r20*sj6))+(((-0.001399930041)*cj6*gclwh12_14*r20*r22))+(((0.0005165202)*cj6*gclwh12_5*r21))+(((-0.01)*gclwh4_14*pp*(r21*r21)*(sj6*sj6)))+(((-0.069)*cj6*gclwh1_5*pp*r21))+(((-0.0005165202)*cj6*gclwh3_5*r21))+(((-0.00138)*gclwh6_5*rxp0_2*sj6))+((cj6*gclwh4_5*pp*pz*r20))+(((-0.74858)*cj6*gclwh8_5*pz*rxp1_2))+(((-0.0442635354)*gclwh6_10*rxp2_2))+(((0.74858)*gclwh6_6*pp*rxp2_2))+(((0.000442635354)*cj6*gclwh12_10*r21))+(((0.008277786332433)*gclwh12_10*r22))+(((-0.0005165202)*gclwh14_5*r22))+(((0.0096733172829)*cj6*gclwh4_5*r20))+(((-0.05165202)*gclwh6_5*rxp2_2))+(((-0.02)*cj6*gclwh4_14*npy*pz*r20*sj6))+(((0.02)*gclwh6_6*pp*rxp0_2*sj6))+(((0.74858)*pz))+(((0.00733855819067956)*gclwh1_6*r20*sj6))+(((-0.1048417846)*gclwh14_6*npx*pz*sj6))+(((0.0002)*gclwh10_14*pz*r21*sj6))+(((-0.0005165202)*gclwh1_5*r22))+(((-1.0)*gclwh4_5*pp*pz*r21*sj6))+(((0.001399930041)*cj6*gclwh14_14*sj6*(r21*r21)))+(((0.069)*gclwh12_5*pp*r22))+(((-0.001399930041)*gclwh14_14*r20*r21*(cj6*cj6)))+(((0.00733855819067956)*gclwh12_6*r22))+(((-0.74858)*gclwh8_5*pz*rxp0_2*sj6))+(((-0.00039241231557934)*cj6*gclwh3_6*r21))+(((-0.1048417846)*gclwh3_6*npz*pz))+(((-0.1048417846)*cj6*gclwh14_6*npy*pz))+(((-0.001048417846)*cj6*gclwh6_6*rxp1_2))+(((0.00138)*gclwh10_5*pz))+(((-0.0002)*gclwh6_14*r21*rxp0_2*(sj6*sj6)))+(((-2.0)*gclwh12_5*npz*(pz*pz)))+(((-0.039241231557934)*gclwh10_6*rxp1_2*sj6))+(((0.0074858)*cj6*gclwh3_6*pp*r21))+(((-0.00039241231557934)*gclwh1_6*r22))+(((0.05165202)*cj6*gclwh10_5*rxp0_2))+(((-0.0442635354)*cj6*gclwh8_10*rxp1_2))+(((0.74858)*gclwh8_6*pp*rxp0_2*sj6))+(((-0.02)*cj6*gclwh4_14*npx*pz*r21*sj6))+(((-1.0)*gclwh3_6*r22*(pp*pp)))+(((2.0)*cj6*gclwh4_6*npx*pp*pz))+(((2.0)*cj6*gclwh14_6*npy*pp*pz))+(((-0.0442635354)*gclwh8_10*rxp0_2*sj6))+(((-1.0)*gclwh12_6*r22*(pp*pp)))+(((0.1399930041)*cj6*gclwh1_5*pz*r21))+(((0.11826)*gclwh4_10*npy*pz*sj6))+(((-0.11826)*gclwh12_10*npz*pz))+(((0.0074858)*cj6*gclwh10_14*r21*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh6_14*r20*rxp2_2))+(((-0.1399930041)*gclwh3_5*pz*r22))+(((-0.11826)*cj6*gclwh14_10*npy*pz))+(((-2.0)*cj6*gclwh14_5*npy*(pz*pz)))+(((-0.0074858)*gclwh3_5*pz*r20*sj6))+(((7.4858e-5)*cj6*gclwh14_14*r20*r22))+((gclwh14_5*pp*pz*r20*sj6))+(((0.0011826)*gclwh8_10*rxp2_2))+(((-0.001401930041)*gclwh4_14*(cj6*cj6)*(r20*r20)))+(((0.002803860082)*cj6*gclwh4_14*r20*r21*sj6))+(((0.74858)*cj6*gclwh8_6*pp*rxp1_2))+(((7.4858e-5)*gclwh12_14*r20*r21*(sj6*sj6)))+(((-0.0875721118)*cj6*gclwh14_6*pp*r21))+(((-0.008289612332433)*gclwh4_10*r21*sj6))+(((-0.00039241231557934)*gclwh14_6*r22))+(((0.00039241231557934)*cj6*gclwh12_6*r21))+(((-0.02)*cj6*gclwh6_5*pz*rxp1_2))+(((0.0074858)*gclwh8_14*r20*rxp1_2*(cj6*cj6)))+(((-2.0)*gclwh1_6*npx*pp*pz*sj6))+(((2.0)*gclwh4_5*npy*sj6*(pz*pz)))+(((0.0096595172829)*gclwh14_5*r20*sj6))+(((-0.138)*gclwh3_5*npz*pz))+(((0.001399930041)*gclwh12_14*r21*r22*sj6))+(((0.74858)*cj6*gclwh10_5*pz*rxp0_2))+(((0.0877721118)*gclwh4_6*pp*r21*sj6))+(((-0.069)*gclwh1_5*pp*r20*sj6))+((cj6*gclwh14_5*pp*pz*r21))+(((-0.0074858)*gclwh8_14*r21*rxp0_2*(sj6*sj6)))+(((0.1399930041)*gclwh1_5*pz*r20*sj6))+(((-1.0)*cj6*gclwh1_5*pp*pz*r21))+(((-0.0074858)*gclwh6_14*r21*rxp2_2*sj6))+(((-0.02)*gclwh8_6*pp*rxp2_2))+(((-0.01)*cj6*gclwh14_14*pp*sj6*(r20*r20)))+(((-2.0)*gclwh3_5*npz*(pz*pz)))+(((0.0096595172829)*cj6*gclwh14_5*r21))+((gclwh4_6*r21*sj6*(pp*pp)))+(((-0.0875721118)*gclwh12_6*pp*r22))+(((0.1399930041)*gclwh14_5*pz*r20*sj6))+(((-7.4858e-5)*cj6*gclwh12_14*sj6*(r20*r20)))+(((0.05913)*cj6*gclwh14_10*pp*r21))+(((0.001399930041)*gclwh14_14*r20*r21*(sj6*sj6)))+(((0.008277786332433)*gclwh14_10*r20*sj6))+(((-0.74858)*gclwh6_5*pz*rxp2_2))+(((0.0011826)*gclwh10_10*pz))+(((-0.000442635354)*gclwh14_10*r22))+(((-0.138)*cj6*gclwh14_5*npy*pz))+(((0.0096595172829)*gclwh1_5*r20*sj6))+(((-0.0002)*cj6*gclwh6_14*r21*rxp1_2*sj6))+(((-0.039241231557934)*gclwh6_6*rxp2_2))+(((0.069)*gclwh14_5*pp*r20*sj6))+(((-0.02)*gclwh12_14*npz*pz*r21*sj6))+(((-0.1048417846)*cj6*gclwh4_6*npx*pz))+(((-0.00734904236913956)*gclwh4_6*r21*sj6))+(((-1.0)*gclwh14_6*r20*sj6*(pp*pp)))+(((-0.05165202)*gclwh8_5*rxp0_2*sj6))+(((2.0)*gclwh3_6*npz*pp*pz))+(((0.1048417846)*gclwh1_6*npx*pz*sj6))+(((0.138)*gclwh1_5*npx*pz*sj6))+(((0.1924138964)*gclwh3_6*pp*r22))+(((-0.74858)*gclwh10_5*pz*rxp1_2*sj6))+(((0.1048417846)*gclwh4_6*npy*pz*sj6))+(((0.0074858)*gclwh12_5*pz*r20*sj6))+(((0.02)*cj6*gclwh12_14*npz*pz*r20))+(((-0.02)*cj6*rxp0_2))+(((-0.1924138964)*cj6*gclwh1_6*pp*r21))+(((-1.0)*cj6*gclwh14_6*r21*(pp*pp)))+(((-0.138)*cj6*gclwh4_5*npx*pz))+(((-0.02)*gclwh10_6*pp*pz))+(((0.138)*cj6*gclwh1_5*npy*pz))+(((-0.0011826)*gclwh6_10*rxp0_2*sj6))+(((0.00733855819067956)*cj6*gclwh1_6*r21))+(((-0.138)*gclwh12_5*npz*pz))+(((0.02)*gclwh14_14*npy*pz*r20*(cj6*cj6)))+(((-0.00733855819067956)*gclwh3_6*r22))+(((-0.0442635354)*gclwh10_10*rxp1_2*sj6))+((gclwh12_5*pp*pz*r22))+(((-2.0)*gclwh4_6*npy*pp*pz*sj6))+(((0.0002)*gclwh8_14*r21*rxp2_2*sj6))+(((0.00734904236913956)*cj6*gclwh4_6*r20))+(((-0.1924138964)*gclwh1_6*pp*r20*sj6))+(((0.0002)*cj6*gclwh6_14*r20*rxp0_2*sj6))+(((0.02)*gclwh8_5*pz*rxp2_2))+(((0.00733855819067956)*cj6*gclwh14_6*r21))+(((-0.05165202)*cj6*gclwh8_5*rxp1_2))+(((2.0)*cj6*gclwh1_5*npy*(pz*pz)))+(((2.0)*gclwh14_6*npx*pp*pz*sj6))+(((-0.0074858)*gclwh1_5*pz*r22))+(((0.00138)*gclwh8_5*rxp2_2))+(((0.01)*gclwh12_14*pp*r21*r22*sj6))+(((-0.039241231557934)*gclwh8_6*rxp0_2*sj6))+(((-0.138)*gclwh14_5*npx*pz*sj6))+(((-0.0074858)*gclwh14_5*pz*r22))+(((0.05913)*cj6*gclwh4_10*pp*r20))+(((0.05913)*gclwh12_10*pp*r22))+((cj6*gclwh1_6*r21*(pp*pp)))+(((-0.069)*gclwh4_5*pp*r21*sj6))+(((0.1401930041)*cj6*gclwh4_5*pz*r20))+(((0.1048417846)*cj6*gclwh1_6*npy*pz))+(((0.02)*cj6*gclwh4_14*pp*r20*r21*sj6))+(((-0.11826)*cj6*gclwh4_10*npx*pz))+(((-0.0002)*cj6*gclwh10_14*pz*r20))+(((0.05913)*gclwh14_10*pp*r20*sj6))+(((-0.0005165202)*gclwh3_5*r20*sj6))+(((-0.0096733172829)*gclwh4_5*r21*sj6))+(((-1.0)*gclwh1_5*pp*pz*r20*sj6))+(((0.069)*cj6*gclwh4_5*pp*r20))+(((-2.0)*gclwh14_5*npx*sj6*(pz*pz)))+(((-0.001399930041)*cj6*gclwh14_14*sj6*(r20*r20)))+(((0.01)*gclwh14_14*pp*r20*r21*(sj6*sj6)))+(((0.02)*gclwh10_5*(pz*pz)))+(((0.02)*cj6*gclwh14_14*npx*pz*r20*sj6))+(((-0.0074858)*cj6*gclwh12_6*pp*r21))+(((0.008289612332433)*cj6*gclwh4_10*r20))+(((-0.01)*gclwh4_14*pp*(cj6*cj6)*(r20*r20)))+(((-0.02)*gclwh14_14*npx*pz*r21*(sj6*sj6)))+(((7.4858e-5)*cj6*gclwh12_14*sj6*(r21*r21)))+(((0.001048417846)*gclwh10_6*pz))+(((0.0002)*gclwh6_14*r20*rxp1_2*(cj6*cj6)))+(((0.069)*gclwh3_5*pp*r22))+(((0.0074858)*gclwh1_6*pp*r22))+(((-7.4858e-5)*gclwh12_14*r20*r21*(cj6*cj6)))+(((0.74858)*gclwh10_6*pp*rxp1_2*sj6))+(((0.069)*cj6*gclwh14_5*pp*r21))+((gclwh3_5*pp*pz*r22))+(((0.138)*gclwh4_5*npy*pz*sj6))+(((0.02)*gclwh4_14*npx*pz*r20*(cj6*cj6)))+(((0.00039241231557934)*gclwh12_6*r20*sj6))+(((-0.0074858)*gclwh10_14*r20*rxp0_2*(cj6*cj6)))+(((2.0)*gclwh12_6*npz*pp*pz))+(((-0.05913)*gclwh4_10*pp*r21*sj6)));
op[14]=((((-1.0)*x174*x215))+(((-1.0)*x188*x189))+(((-1.0)*x166*x217))+((gclwh14_0*x182*x186))+(((-0.2799860082)*x160))+((x162*x210))+(((-1.0)*gclwh10_14*x168))+(((-1.0)*x177*x215))+((gclwh14_14*x180))+((x162*x181))+(((1.73368)*gclwh12_14*x161))+((gclwh4_0*x155*x182))+((pp*x156*x174))+((pp*x156*x177))+(((-1.0)*x154*x181))+(((-1.0)*gclwh14_14*x166*x198))+((x192*x207))+((gclwh14_14*x178*x205))+(((-1.0)*x166*x204))+((x156*x189))+(((-0.121351535674044)*x201))+(((-1.0)*x154*x210))+(((-1.0)*x170*x184))+((x164*x192))+((gclwh14_0*x182*x205))+(((-1.0)*x170*x171))+(((-1.0)*x170*x176))+(((-1.0)*x170*x217))+(((-1.0)*gclwh4_0*x158*x182))+((x165*x192))+((gclwh14_14*x178*x186))+((x192*x193))+((gclwh14_0*x169))+(((-1.0)*x198*x201))+((x156*x179))+(((-0.0173368)*gclwh8_14*rxp2_2))+(((-1.0)*x160*x206))+((gclwh6_14*x172))+(((-1.0)*gclwh4_14*x158*x178))+(((-1.0)*gclwh8_0*x187))+(((-1.0)*x166*x184))+(((-1.0)*x179*x188))+(((-1.0)*gclwh10_0*x212))+(((-1.0)*x170*x204))+((gclwh6_0*x203))+(((4.0)*gclwh12_0*x161))+((gclwh4_14*x155*x178))+((x163*x165))+((x163*x164))+(((-1.0)*gclwh14_14*x170*x198))+(((-1.0)*x166*x176))+(((-1.0)*x166*x171))+((x163*x207))+((x163*x193)));
IkReal x220=((0.138)*pp);
IkReal x221=(gclwh12_14*r22);
IkReal x222=(cj6*r21);
IkReal x223=((0.0193190345658)*gclwh15_15);
IkReal x224=(r20*sj6);
IkReal x225=((0.121351535674044)*gclwh15_15);
IkReal x226=((0.10330404)*cj6);
IkReal x227=((0.0010330404)*r22);
IkReal x228=(gclwh11_15*rxp0_2);
IkReal x229=(cj6*rxp1_2);
IkReal x230=((1.49716)*gclwh9_4);
IkReal x231=((0.276)*pz);
IkReal x232=(cj6*npx);
IkReal x233=((0.04)*gclwh7_4);
IkReal x234=((0.86684)*pp);
IkReal x235=((0.0193190345658)*gclwh14_14);
IkReal x236=(gclwh9_15*rxp2_2);
IkReal x237=(gclwh13_15*r22);
IkReal x238=(gclwh13_15*npz);
IkReal x239=(cj6*npy);
IkReal x240=((0.10330404)*rxp2_2);
IkReal x241=((0.0149716)*gclwh13_4);
IkReal x242=(r21*sj6);
IkReal x243=((0.0010330404)*gclwh12_14);
IkReal x244=((1.49716)*gclwh11_4);
IkReal x245=(cj6*r20);
IkReal x246=((0.2803860082)*gclwh5_4);
IkReal x247=(gclwh11_15*pz);
IkReal x248=((0.10330404)*sj6);
IkReal x249=(rxp0_2*sj6);
IkReal x250=((0.0010330404)*gclwh13_15);
IkReal x251=((0.006488990872)*gclwh13_15);
IkReal x252=((0.0193466345658)*gclwh4_14);
IkReal x253=((0.00276)*gclwh6_14);
IkReal x254=((0.00276)*gclwh7_15);
IkReal x255=((0.6488990872)*gclwh9_15);
IkReal x256=(npx*sj6);
IkReal x257=(gclwh13_4*r22);
IkReal x258=((2.0)*pp);
IkReal x259=((0.2799860082)*gclwh15_4);
IkReal x260=(gclwh11_15*rxp1_2);
IkReal x261=(npy*sj6);
IkReal x262=((4.0)*pz);
IkReal x263=((0.0173368)*gclwh7_15);
IkReal x264=((1.73368)*pz);
IkReal x265=(gclwh15_4*x258);
IkReal x266=(gclwh5_15*x245);
IkReal x267=(gclwh5_15*x264);
IkReal x268=(gclwh15_15*pz*x256);
op[15]=((((-1.0)*gclwh14_14*x220*x222))+(((-1.0)*gclwh14_14*x220*x224))+(((-1.0)*gclwh10_14*rxp0_2*x226))+((gclwh8_14*rxp0_2*x248))+((x242*x252))+((gclwh14_14*x231*x239))+((gclwh8_14*rxp1_2*x226))+((gclwh14_14*x231*x256))+(((-1.0)*x224*x235))+((gclwh4_14*x220*x242))+((gclwh14_14*x227))+((x249*x253))+(((-0.0193190345658)*x221))+(((-1.0)*gclwh4_14*x220*x245))+((x229*x253))+(((-1.0)*x222*x243))+(((-1.0)*gclwh4_14*x231*x261))+((gclwh10_14*rxp1_2*x248))+(((-1.0)*x245*x252))+(((-1.0)*x220*x221))+((gclwh12_14*npz*x231))+((gclwh6_14*x240))+(((-1.0)*x224*x243))+(((-0.00276)*gclwh8_14*rxp2_2))+(((-1.0)*x222*x235))+(((-0.00276)*gclwh10_14*pz))+((gclwh4_14*x231*x232)));
op[16]=((-0.1830918964)+((cj6*gclwh4_8*pp*r20))+(((-0.02)*gclwh6_8*rxp0_2*sj6))+(((0.00138)*cj6*gclwh6_10*rxp1_2))+(((0.1399930041)*gclwh12_8*r22))+(((-2.0)*cj6*gclwh14_8*npy*pz))+(((-0.3244495436)*gclwh10_12*rxp1_2*sj6))+(((-0.3244495436)*gclwh6_12*rxp2_2))+(((-0.86684)*cj6*gclwh14_12*npy*pz))+((gclwh14_8*pp*r20*sj6))+(((-0.069)*cj6*gclwh14_10*pp*r21))+(((-0.0086684)*cj6*gclwh6_12*rxp1_2))+(((0.86684)*gclwh4_12*npy*pz*sj6))+(((0.0074858)*cj6*gclwh12_8*r21))+(((-0.74858)*cj6*gclwh8_8*rxp1_2))+(((-0.00138)*gclwh8_10*rxp2_2))+(((0.138)*gclwh12_10*npz*pz))+(((-0.1401930041)*gclwh4_8*r21*sj6))+(((0.003244495436)*gclwh12_12*r20*sj6))+(((0.43342)*gclwh14_12*pp*r20*sj6))+(((0.003244495436)*cj6*gclwh12_12*r21))+(((-0.069)*gclwh12_10*pp*r22))+((cj6*gclwh14_8*pp*r21))+(((0.05165202)*gclwh10_10*rxp1_2*sj6))+(((-0.02)*cj6*gclwh6_8*rxp1_2))+(((-0.060762451837022)*gclwh4_12*r21*sj6))+(((-0.0096733172829)*cj6*gclwh4_10*r20))+(((0.060675767837022)*gclwh12_12*r22))+(((0.138)*gclwh14_10*npx*pz*sj6))+(((-0.05165202)*cj6*gclwh10_10*rxp0_2))+(((-0.86684)*gclwh12_12*npz*pz))+(((0.1399930041)*cj6*gclwh14_8*r21))+(((0.74858)*cj6*gclwh10_8*rxp0_2))+(((-0.43342)*gclwh4_12*pp*r21*sj6))+(((0.0086684)*gclwh8_12*rxp2_2))+(((0.3244495436)*cj6*gclwh10_12*rxp0_2))+(((0.43342)*gclwh12_12*pp*r22))+(((-0.0005165202)*cj6*gclwh12_10*r21))+(((-0.0096595172829)*cj6*gclwh14_10*r21))+(((0.43342)*cj6*gclwh4_12*pp*r20))+(((-2.0)*gclwh12_8*npz*pz))+(((-0.74858)*gclwh6_8*rxp2_2))+(((0.43342)*cj6*gclwh14_12*pp*r21))+(((-0.0096595172829)*gclwh12_10*r22))+(((0.0086684)*gclwh10_12*pz))+(((-0.069)*gclwh14_10*pp*r20*sj6))+(((-0.069)*cj6*gclwh4_10*pp*r20))+(((0.00138)*gclwh6_10*rxp0_2*sj6))+(((-0.3244495436)*gclwh8_12*rxp0_2*sj6))+(((0.0074858)*gclwh12_8*r20*sj6))+(((-0.0086684)*gclwh6_12*rxp0_2*sj6))+(((0.060675767837022)*cj6*gclwh14_12*r21))+(((0.05165202)*cj6*gclwh8_10*rxp1_2))+(((-0.86684)*gclwh14_12*npx*pz*sj6))+(((0.02)*gclwh10_8*pz))+((gclwh12_8*pp*r22))+(((0.138)*cj6*gclwh14_10*npy*pz))+(((0.138)*cj6*gclwh4_10*npx*pz))+(((0.02)*gclwh8_8*rxp2_2))+(((0.060762451837022)*cj6*gclwh4_12*r20))+(((0.1401930041)*cj6*gclwh4_8*r20))+(((-0.0005165202)*gclwh12_10*r20*sj6))+(((-0.00138)*gclwh10_10*pz))+(((-0.74858)*gclwh8_8*rxp0_2*sj6))+(((0.05165202)*gclwh6_10*rxp2_2))+(((-0.74858)*gclwh10_8*rxp1_2*sj6))+(((-0.003244495436)*gclwh14_12*r22))+(((-2.0)*cj6*gclwh4_8*npx*pz))+(((-0.0096595172829)*gclwh14_10*r20*sj6))+(((0.069)*gclwh4_10*pp*r21*sj6))+(((-0.0074858)*gclwh14_8*r22))+(((0.1399930041)*gclwh14_8*r20*sj6))+(((-2.0)*gclwh14_8*npx*pz*sj6))+(((-1.0)*gclwh4_8*pp*r21*sj6))+(((0.0096733172829)*gclwh4_10*r21*sj6))+(((0.060675767837022)*gclwh14_12*r20*sj6))+(((2.0)*gclwh4_8*npy*pz*sj6))+(((-0.138)*gclwh4_10*npy*pz*sj6))+(((0.05165202)*gclwh8_10*rxp0_2*sj6))+(((-0.86684)*cj6*gclwh4_12*npx*pz))+(((0.0005165202)*gclwh14_10*r22))+(((-0.3244495436)*cj6*gclwh8_12*rxp1_2)));
op[17]=((-0.05981196)+(((0.00733855819067956)*gclwh14_6*r20*sj6))+(((-0.001401930041)*gclwh4_14*(r21*r21)*(sj6*sj6)))+(((-0.0074858)*cj6*gclwh3_5*pz*r21))+(((0.0005165202)*cj6*gclwh3_5*r21))+((gclwh1_6*r20*sj6*(pp*pp)))+(((-0.00039241231557934)*gclwh3_6*r20*sj6))+(((-0.0005165202)*cj6*gclwh12_5*r21))+(((0.0096595172829)*gclwh3_5*r22))+(((0.000442635354)*gclwh12_10*r20*sj6))+(((-0.1048417846)*gclwh12_6*npz*pz))+(((-0.05165202)*cj6*gclwh10_5*rxp0_2))+(((-0.01)*cj6*gclwh12_14*pp*r20*r22))+(((-0.01)*gclwh14_14*pp*r20*r21*(cj6*cj6)))+(((0.0074858)*cj6*gclwh8_14*r20*rxp0_2*sj6))+(((0.008277786332433)*cj6*gclwh14_10*r21))+(((0.069)*gclwh1_5*pp*r20*sj6))+(((-1.0)*cj6*gclwh4_6*r20*(pp*pp)))+(((0.0074858)*gclwh14_6*pp*r22))+(((-0.11826)*gclwh14_10*npx*pz*sj6))+(((0.0442635354)*cj6*gclwh10_10*rxp0_2))+(((-0.0002)*cj6*gclwh8_14*r20*rxp2_2))+(((-0.0074858)*gclwh10_14*r21*rxp1_2*(sj6*sj6)))+(((0.05165202)*cj6*gclwh8_5*rxp1_2))+(((-0.069)*gclwh12_5*pp*r22))+(((-0.1401930041)*gclwh4_5*pz*r21*sj6))+(((0.0074858)*cj6*gclwh12_5*pz*r21))+(((0.039241231557934)*cj6*gclwh10_6*rxp0_2))+(((0.001048417846)*gclwh8_6*rxp2_2))+(((0.0074858)*cj6*gclwh10_14*r20*rxp1_2*sj6))+(((-0.0074858)*cj6*gclwh8_14*r21*rxp1_2*sj6))+(((-0.00138)*gclwh8_5*rxp2_2))+(((-0.74858)*cj6*gclwh10_6*pp*rxp0_2))+(((2.0)*gclwh1_5*npx*sj6*(pz*pz)))+(((-0.039241231557934)*cj6*gclwh8_6*rxp1_2))+(((0.0074858)*gclwh3_6*pp*r20*sj6))+(((-0.02)*gclwh6_5*pz*rxp0_2*sj6))+(((-0.001048417846)*gclwh6_6*rxp0_2*sj6))+(((-0.0875721118)*gclwh14_6*pp*r20*sj6))+(((0.02)*cj6*gclwh6_6*pp*rxp1_2))+(((-0.0096595172829)*cj6*gclwh14_5*r21))+(((-0.069)*gclwh14_5*pp*r20*sj6))+(((0.01)*cj6*gclwh14_14*pp*sj6*(r21*r21)))+(((-7.4858e-5)*gclwh14_14*r21*r22*sj6))+(((-0.0011826)*cj6*gclwh6_10*rxp1_2))+(((-0.0877721118)*cj6*gclwh4_6*pp*r20))+(((-0.02)*cj6*gclwh14_14*npy*pz*r21*sj6))+(((0.1399930041)*gclwh12_5*pz*r22))+(((0.02)*rxp1_2*sj6))+(((0.1399930041)*cj6*gclwh14_5*pz*r21))+(((-2.0)*cj6*gclwh1_6*npy*pp*pz))+(((-2.0)*cj6*gclwh4_5*npx*(pz*pz)))+(((0.02)*gclwh4_14*npy*pz*r21*(sj6*sj6)))+(((-0.00138)*gclwh10_5*pz))+(((-0.0096595172829)*gclwh1_5*r20*sj6))+(((-0.0074858)*gclwh12_6*pp*r20*sj6))+(((-0.001399930041)*cj6*gclwh12_14*r20*r22))+(((-0.01)*gclwh4_14*pp*(r21*r21)*(sj6*sj6)))+((cj6*gclwh4_5*pp*pz*r20))+(((-0.74858)*cj6*gclwh8_5*pz*rxp1_2))+(((-0.0442635354)*gclwh6_10*rxp2_2))+(((0.74858)*gclwh6_6*pp*rxp2_2))+(((0.000442635354)*cj6*gclwh12_10*r21))+(((0.008277786332433)*gclwh12_10*r22))+(((-0.02)*cj6*gclwh4_14*npy*pz*r20*sj6))+(((0.02)*gclwh6_6*pp*rxp0_2*sj6))+(((0.74858)*pz))+(((0.00733855819067956)*gclwh1_6*r20*sj6))+(((-0.1048417846)*gclwh14_6*npx*pz*sj6))+(((0.0002)*gclwh10_14*pz*r21*sj6))+(((-0.0096595172829)*gclwh14_5*r20*sj6))+(((-1.0)*gclwh4_5*pp*pz*r21*sj6))+(((0.001399930041)*cj6*gclwh14_14*sj6*(r21*r21)))+(((-0.001399930041)*gclwh14_14*r20*r21*(cj6*cj6)))+(((0.138)*cj6*gclwh14_5*npy*pz))+(((0.00733855819067956)*gclwh12_6*r22))+(((-0.74858)*gclwh8_5*pz*rxp0_2*sj6))+(((-0.00039241231557934)*cj6*gclwh3_6*r21))+(((-0.1048417846)*gclwh3_6*npz*pz))+(((-0.1048417846)*cj6*gclwh14_6*npy*pz))+(((-0.001048417846)*cj6*gclwh6_6*rxp1_2))+(((0.138)*gclwh3_5*npz*pz))+(((-0.0002)*gclwh6_14*r21*rxp0_2*(sj6*sj6)))+(((-2.0)*gclwh12_5*npz*(pz*pz)))+(((-0.039241231557934)*gclwh10_6*rxp1_2*sj6))+(((0.0074858)*cj6*gclwh3_6*pp*r21))+(((-0.00039241231557934)*gclwh1_6*r22))+(((-0.0442635354)*cj6*gclwh8_10*rxp1_2))+(((-0.0096595172829)*cj6*gclwh1_5*r21))+(((0.74858)*gclwh8_6*pp*rxp0_2*sj6))+(((-0.02)*cj6*gclwh4_14*npx*pz*r21*sj6))+(((-1.0)*gclwh3_6*r22*(pp*pp)))+(((2.0)*cj6*gclwh4_6*npx*pp*pz))+(((2.0)*cj6*gclwh14_6*npy*pp*pz))+(((-0.0442635354)*gclwh8_10*rxp0_2*sj6))+(((-0.069)*gclwh3_5*pp*r22))+(((-1.0)*gclwh12_6*r22*(pp*pp)))+(((0.1399930041)*cj6*gclwh1_5*pz*r21))+(((0.11826)*gclwh4_10*npy*pz*sj6))+(((-0.11826)*gclwh12_10*npz*pz))+(((0.0074858)*cj6*gclwh10_14*r21*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh6_14*r20*rxp2_2))+(((-0.1399930041)*gclwh3_5*pz*r22))+(((-0.11826)*cj6*gclwh14_10*npy*pz))+(((-2.0)*cj6*gclwh14_5*npy*(pz*pz)))+(((-0.0074858)*gclwh3_5*pz*r20*sj6))+(((7.4858e-5)*cj6*gclwh14_14*r20*r22))+((gclwh14_5*pp*pz*r20*sj6))+(((0.0011826)*gclwh8_10*rxp2_2))+(((0.05165202)*gclwh10_5*rxp1_2*sj6))+(((0.00138)*cj6*gclwh6_5*rxp1_2))+(((-0.001401930041)*gclwh4_14*(cj6*cj6)*(r20*r20)))+(((0.0005165202)*gclwh14_5*r22))+(((0.002803860082)*cj6*gclwh4_14*r20*r21*sj6))+(((0.74858)*cj6*gclwh8_6*pp*rxp1_2))+(((7.4858e-5)*gclwh12_14*r20*r21*(sj6*sj6)))+(((-0.0875721118)*cj6*gclwh14_6*pp*r21))+(((-0.008289612332433)*gclwh4_10*r21*sj6))+(((-0.00039241231557934)*gclwh14_6*r22))+(((0.00039241231557934)*cj6*gclwh12_6*r21))+(((-0.02)*cj6*gclwh6_5*pz*rxp1_2))+(((0.0074858)*gclwh8_14*r20*rxp1_2*(cj6*cj6)))+(((-2.0)*gclwh1_6*npx*pp*pz*sj6))+(((2.0)*gclwh4_5*npy*sj6*(pz*pz)))+(((0.001399930041)*gclwh12_14*r21*r22*sj6))+(((0.74858)*cj6*gclwh10_5*pz*rxp0_2))+(((0.0877721118)*gclwh4_6*pp*r21*sj6))+((cj6*gclwh14_5*pp*pz*r21))+(((-0.0074858)*gclwh8_14*r21*rxp0_2*(sj6*sj6)))+(((0.05165202)*gclwh6_5*rxp2_2))+(((-0.069)*cj6*gclwh14_5*pp*r21))+(((0.1399930041)*gclwh1_5*pz*r20*sj6))+(((-1.0)*cj6*gclwh1_5*pp*pz*r21))+(((-0.0074858)*gclwh6_14*r21*rxp2_2*sj6))+(((-0.02)*gclwh8_6*pp*rxp2_2))+(((-0.01)*cj6*gclwh14_14*pp*sj6*(r20*r20)))+(((-2.0)*gclwh3_5*npz*(pz*pz)))+(((-0.0096733172829)*cj6*gclwh4_5*r20))+((gclwh4_6*r21*sj6*(pp*pp)))+(((0.0005165202)*gclwh3_5*r20*sj6))+(((-0.0875721118)*gclwh12_6*pp*r22))+(((0.1399930041)*gclwh14_5*pz*r20*sj6))+(((-7.4858e-5)*cj6*gclwh12_14*sj6*(r20*r20)))+(((0.05913)*cj6*gclwh14_10*pp*r21))+(((0.001399930041)*gclwh14_14*r20*r21*(sj6*sj6)))+(((0.138)*gclwh12_5*npz*pz))+(((0.008277786332433)*gclwh14_10*r20*sj6))+(((-0.74858)*gclwh6_5*pz*rxp2_2))+(((0.0011826)*gclwh10_10*pz))+(((-0.138)*gclwh4_5*npy*pz*sj6))+(((-0.000442635354)*gclwh14_10*r22))+(((-0.0002)*cj6*gclwh6_14*r21*rxp1_2*sj6))+(((-0.039241231557934)*gclwh6_6*rxp2_2))+(((-0.02)*gclwh12_14*npz*pz*r21*sj6))+(((-0.1048417846)*cj6*gclwh4_6*npx*pz))+(((-0.00734904236913956)*gclwh4_6*r21*sj6))+(((-1.0)*gclwh14_6*r20*sj6*(pp*pp)))+(((2.0)*gclwh3_6*npz*pp*pz))+(((0.1048417846)*gclwh1_6*npx*pz*sj6))+(((0.1924138964)*gclwh3_6*pp*r22))+(((-0.74858)*gclwh10_5*pz*rxp1_2*sj6))+(((-0.0005165202)*gclwh12_5*r20*sj6))+(((0.1048417846)*gclwh4_6*npy*pz*sj6))+(((0.0074858)*gclwh12_5*pz*r20*sj6))+(((0.02)*cj6*gclwh12_14*npz*pz*r20))+(((-0.02)*cj6*rxp0_2))+(((-0.1924138964)*cj6*gclwh1_6*pp*r21))+(((0.05165202)*gclwh8_5*rxp0_2*sj6))+(((-1.0)*cj6*gclwh14_6*r21*(pp*pp)))+(((-0.02)*gclwh10_6*pp*pz))+(((-0.0011826)*gclwh6_10*rxp0_2*sj6))+(((0.00733855819067956)*cj6*gclwh1_6*r21))+(((0.069)*cj6*gclwh1_5*pp*r21))+(((-0.0096595172829)*gclwh12_5*r22))+(((0.02)*gclwh14_14*npy*pz*r20*(cj6*cj6)))+(((-0.00733855819067956)*gclwh3_6*r22))+(((-0.0442635354)*gclwh10_10*rxp1_2*sj6))+((gclwh12_5*pp*pz*r22))+(((-2.0)*gclwh4_6*npy*pp*pz*sj6))+(((-0.069)*cj6*gclwh4_5*pp*r20))+(((0.0002)*gclwh8_14*r21*rxp2_2*sj6))+(((0.0005165202)*gclwh1_5*r22))+(((0.00734904236913956)*cj6*gclwh4_6*r20))+(((-0.1924138964)*gclwh1_6*pp*r20*sj6))+(((0.0002)*cj6*gclwh6_14*r20*rxp0_2*sj6))+(((0.02)*gclwh8_5*pz*rxp2_2))+(((0.00733855819067956)*cj6*gclwh14_6*r21))+(((0.00138)*gclwh6_5*rxp0_2*sj6))+(((2.0)*cj6*gclwh1_5*npy*(pz*pz)))+(((-0.138)*gclwh1_5*npx*pz*sj6))+(((2.0)*gclwh14_6*npx*pp*pz*sj6))+(((-0.0074858)*gclwh1_5*pz*r22))+(((0.01)*gclwh12_14*pp*r21*r22*sj6))+(((-0.039241231557934)*gclwh8_6*rxp0_2*sj6))+(((-0.0074858)*gclwh14_5*pz*r22))+(((0.05913)*cj6*gclwh4_10*pp*r20))+(((0.05913)*gclwh12_10*pp*r22))+((cj6*gclwh1_6*r21*(pp*pp)))+(((0.1401930041)*cj6*gclwh4_5*pz*r20))+(((0.1048417846)*cj6*gclwh1_6*npy*pz))+(((0.02)*cj6*gclwh4_14*pp*r20*r21*sj6))+(((-0.11826)*cj6*gclwh4_10*npx*pz))+(((-0.0002)*cj6*gclwh10_14*pz*r20))+(((0.0096733172829)*gclwh4_5*r21*sj6))+(((0.05913)*gclwh14_10*pp*r20*sj6))+(((-1.0)*gclwh1_5*pp*pz*r20*sj6))+(((-2.0)*gclwh14_5*npx*sj6*(pz*pz)))+(((-0.001399930041)*cj6*gclwh14_14*sj6*(r20*r20)))+(((0.01)*gclwh14_14*pp*r20*r21*(sj6*sj6)))+(((0.02)*gclwh10_5*(pz*pz)))+(((0.02)*cj6*gclwh14_14*npx*pz*r20*sj6))+(((-0.0074858)*cj6*gclwh12_6*pp*r21))+(((0.008289612332433)*cj6*gclwh4_10*r20))+(((-0.01)*gclwh4_14*pp*(cj6*cj6)*(r20*r20)))+(((-0.02)*gclwh14_14*npx*pz*r21*(sj6*sj6)))+(((0.069)*gclwh4_5*pp*r21*sj6))+(((7.4858e-5)*cj6*gclwh12_14*sj6*(r21*r21)))+(((0.001048417846)*gclwh10_6*pz))+(((0.0002)*gclwh6_14*r20*rxp1_2*(cj6*cj6)))+(((0.0074858)*gclwh1_6*pp*r22))+(((-7.4858e-5)*gclwh12_14*r20*r21*(cj6*cj6)))+(((0.74858)*gclwh10_6*pp*rxp1_2*sj6))+(((0.138)*gclwh14_5*npx*pz*sj6))+(((0.138)*cj6*gclwh4_5*npx*pz))+((gclwh3_5*pp*pz*r22))+(((0.02)*gclwh4_14*npx*pz*r20*(cj6*cj6)))+(((-0.138)*cj6*gclwh1_5*npy*pz))+(((0.00039241231557934)*gclwh12_6*r20*sj6))+(((-0.0074858)*gclwh10_14*r20*rxp0_2*(cj6*cj6)))+(((2.0)*gclwh12_6*npz*pp*pz))+(((-0.05913)*gclwh4_10*pp*r21*sj6)));
op[18]=((0.05981196)+(((0.01)*cj6*gclwh15_15*pp*sj6*(r20*r20)))+(((0.1924138964)*gclwh0_2*pp*r20*sj6))+(((-0.74858)*pz))+(((7.4858e-5)*gclwh13_15*r20*r21*(cj6*cj6)))+(((-0.0002)*cj6*gclwh7_15*r20*rxp0_2*sj6))+(((0.02)*gclwh9_1*pz*rxp2_2))+(((0.001399930041)*gclwh15_15*r20*r21*(cj6*cj6)))+(((-0.0002)*gclwh11_15*pz*r21*sj6))+(((0.01)*gclwh15_15*pp*r20*r21*(cj6*cj6)))+(((0.001399930041)*cj6*gclwh13_15*r20*r22))+(((0.0074858)*gclwh2_1*pz*r20*sj6))+(((-0.001048417846)*gclwh7_2*rxp0_2*sj6))+(((2.0)*gclwh15_2*npx*pp*pz*sj6))+(((0.0096595172829)*gclwh15_1*r20*sj6))+(((0.001401930041)*gclwh5_15*(cj6*cj6)*(r20*r20)))+(((0.80771)*gclwh15_11*pp*r20*sj6))+(((2.0)*gclwh0_2*npx*pp*pz*sj6))+(((0.0074858)*gclwh11_15*r21*rxp1_2*(sj6*sj6)))+(((1.61542)*gclwh5_11*npy*pz*sj6))+(((-0.0161542)*gclwh7_11*rxp0_2*sj6))+(((0.00039241231557934)*gclwh2_2*r20*sj6))+(((0.74858)*gclwh9_2*pp*rxp0_2*sj6))+(((0.069)*cj6*gclwh15_1*pp*r21))+(((0.80771)*cj6*gclwh5_11*pp*r20))+(((0.113073749341611)*gclwh13_11*r22))+(((0.113073749341611)*cj6*gclwh15_11*r21))+(((0.006046355518)*gclwh13_11*r20*sj6))+((gclwh2_2*r22*(pp*pp)))+(((-0.001399930041)*gclwh15_15*r20*r21*(sj6*sj6)))+(((0.069)*gclwh15_1*pp*r20*sj6))+(((0.001048417846)*gclwh11_2*pz))+(((0.1399930041)*gclwh15_1*pz*r20*sj6))+(((0.00733855819067956)*gclwh13_2*r22))+(((0.00039241231557934)*cj6*gclwh2_2*r21))+(((0.05165202)*cj6*gclwh11_1*rxp0_2))+(((0.0074858)*gclwh0_1*pz*r22))+(((-0.069)*gclwh2_1*pp*r22))+(((0.1399930041)*gclwh13_1*pz*r22))+(((-0.039241231557934)*cj6*gclwh9_2*rxp1_2))+(((-0.0074858)*cj6*gclwh13_2*pp*r21))+(((0.069)*cj6*gclwh5_1*pp*r20))+(((0.0005165202)*cj6*gclwh13_1*r21))+(((-0.0074858)*cj6*gclwh2_2*pp*r21))+(((0.138)*gclwh2_1*npz*pz))+(((-1.0)*gclwh5_1*pp*pz*r21*sj6))+(((-0.039241231557934)*gclwh11_2*rxp1_2*sj6))+((gclwh0_1*pp*pz*r20*sj6))+(((0.113235291341611)*cj6*gclwh5_11*r20))+(((0.069)*cj6*gclwh0_1*pp*r21))+(((-0.001399930041)*gclwh13_15*r21*r22*sj6))+((gclwh13_1*pp*pz*r22))+(((-1.61542)*gclwh15_11*npx*pz*sj6))+(((-1.61542)*cj6*gclwh5_11*npx*pz))+(((0.00039241231557934)*cj6*gclwh13_2*r21))+(((0.0096595172829)*gclwh13_1*r22))+(((-2.0)*cj6*gclwh0_1*npy*(pz*pz)))+(((-0.01)*gclwh15_15*pp*r20*r21*(sj6*sj6)))+(((-0.039241231557934)*gclwh9_2*rxp0_2*sj6))+(((-0.0074858)*cj6*gclwh11_15*r21*rxp0_2*sj6))+(((0.1048417846)*gclwh5_2*npy*pz*sj6))+(((0.0074858)*cj6*gclwh2_1*pz*r21))+(((2.0)*gclwh2_1*npz*(pz*pz)))+(((0.00733855819067956)*gclwh15_2*r20*sj6))+(((7.4858e-5)*cj6*gclwh13_15*sj6*(r20*r20)))+(((-7.4858e-5)*gclwh13_15*r20*r21*(sj6*sj6)))+(((-0.0074858)*cj6*gclwh7_15*r20*rxp2_2))+(((-0.138)*cj6*gclwh15_1*npy*pz))+(((0.113073749341611)*gclwh15_11*r20*sj6))+(((0.001399930041)*cj6*gclwh15_15*sj6*(r20*r20)))+((gclwh5_2*r21*sj6*(pp*pp)))+(((-1.0)*gclwh0_2*r20*sj6*(pp*pp)))+(((-0.0877721118)*cj6*gclwh5_2*pp*r20))+(((7.4858e-5)*gclwh15_15*r21*r22*sj6))+(((-0.00138)*cj6*gclwh7_1*rxp1_2))+(((-0.0875721118)*cj6*gclwh15_2*pp*r21))+(((0.138)*gclwh5_1*npy*pz*sj6))+(((-0.1924138964)*gclwh2_2*pp*r22))+(((0.80771)*cj6*gclwh15_11*pp*r21))+(((-0.6046355518)*gclwh7_11*rxp2_2))+(((-2.0)*gclwh13_1*npz*(pz*pz)))+(((0.0074858)*gclwh11_15*r20*rxp0_2*(cj6*cj6)))+(((0.00039241231557934)*gclwh13_2*r20*sj6))+(((0.1924138964)*cj6*gclwh0_2*pp*r21))+(((-1.0)*cj6*gclwh0_2*r21*(pp*pp)))+(((-0.1401930041)*gclwh5_1*pz*r21*sj6))+(((-1.0)*cj6*gclwh15_2*r21*(pp*pp)))+(((-0.02)*gclwh7_1*pz*rxp0_2*sj6))+(((0.02)*cj6*gclwh5_15*npy*pz*r20*sj6))+(((0.01)*gclwh5_15*pp*(cj6*cj6)*(r20*r20)))+(((-0.05165202)*gclwh11_1*rxp1_2*sj6))+(((0.0074858)*cj6*gclwh9_15*r21*rxp1_2*sj6))+(((0.0005165202)*cj6*gclwh2_1*r21))+(((-0.74858)*gclwh11_1*pz*rxp1_2*sj6))+(((-0.0074858)*gclwh15_1*pz*r22))+(((-2.0)*gclwh0_1*npx*sj6*(pz*pz)))+(((-0.00733855819067956)*cj6*gclwh0_2*r21))+(((0.00138)*gclwh11_1*pz))+(((-2.0)*gclwh15_1*npx*sj6*(pz*pz)))+(((0.0096733172829)*cj6*gclwh5_1*r20))+(((0.0096595172829)*gclwh2_1*r22))+(((-0.6046355518)*gclwh11_11*rxp1_2*sj6))+(((-0.1048417846)*cj6*gclwh15_2*npy*pz))+(((-0.0074858)*cj6*gclwh11_15*r20*rxp1_2*sj6))+(((0.0877721118)*gclwh5_2*pp*r21*sj6))+(((-0.1048417846)*gclwh0_2*npx*pz*sj6))+(((-7.4858e-5)*cj6*gclwh13_15*sj6*(r21*r21)))+(((0.00733855819067956)*gclwh2_2*r22))+(((0.00138)*gclwh9_1*rxp2_2))+(((-0.0002)*gclwh9_15*r21*rxp2_2*sj6))+(((0.02)*gclwh7_2*pp*rxp0_2*sj6))+(((0.0005165202)*gclwh0_1*r22))+((cj6*gclwh15_1*pp*pz*r21))+(((0.0074858)*gclwh9_15*r21*rxp0_2*(sj6*sj6)))+(((0.0096595172829)*cj6*gclwh15_1*r21))+(((-1.0)*gclwh13_2*r22*(pp*pp)))+(((-0.00733855819067956)*gclwh0_2*r20*sj6))+(((0.74858)*cj6*gclwh11_1*pz*rxp0_2))+(((-0.02)*cj6*gclwh5_15*pp*r20*r21*sj6))+(((0.0002)*cj6*gclwh11_15*pz*r20))+(((-1.61542)*cj6*gclwh15_11*npy*pz))+(((-0.02)*gclwh15_15*npy*pz*r20*(cj6*cj6)))+(((0.74858)*gclwh11_2*pp*rxp1_2*sj6))+(((-0.00734904236913956)*gclwh5_2*r21*sj6))+((gclwh15_1*pp*pz*r20*sj6))+(((2.0)*gclwh5_1*npy*sj6*(pz*pz)))+(((0.006046355518)*cj6*gclwh13_11*r21))+(((-0.00039241231557934)*gclwh15_2*r22))+(((0.0074858)*gclwh13_1*pz*r20*sj6))+(((0.00039241231557934)*gclwh0_2*r22))+(((2.0)*cj6*gclwh15_2*npy*pp*pz))+(((-0.02)*gclwh5_15*npx*pz*r20*(cj6*cj6)))+(((-0.0002)*gclwh7_15*r20*rxp1_2*(cj6*cj6)))+(((0.0161542)*gclwh9_11*rxp2_2))+(((-0.138)*cj6*gclwh0_1*npy*pz))+(((0.1401930041)*cj6*gclwh5_1*pz*r20))+(((0.001048417846)*gclwh9_2*rxp2_2))+(((0.01)*gclwh5_15*pp*(r21*r21)*(sj6*sj6)))+(((-2.0)*cj6*gclwh15_1*npy*(pz*pz)))+(((0.1399930041)*cj6*gclwh15_1*pz*r21))+(((-0.74858)*gclwh9_1*pz*rxp0_2*sj6))+(((-0.0074858)*cj6*gclwh9_15*r20*rxp0_2*sj6))+(((-0.1048417846)*gclwh15_2*npx*pz*sj6))+(((-0.6046355518)*cj6*gclwh9_11*rxp1_2))+(((-0.006046355518)*gclwh15_11*r22))+(((-0.0096733172829)*gclwh5_1*r21*sj6))+(((-0.069)*gclwh5_1*pp*r21*sj6))+(((0.01)*cj6*gclwh13_15*pp*r20*r22))+(((-0.001399930041)*cj6*gclwh15_15*sj6*(r21*r21)))+(((-0.02)*cj6*gclwh15_15*npx*pz*r20*sj6))+(((-0.113235291341611)*gclwh5_11*r21*sj6))+(((2.0)*gclwh13_2*npz*pp*pz))+(((0.0002)*cj6*gclwh7_15*r21*rxp1_2*sj6))+(((0.1048417846)*gclwh2_2*npz*pz))+(((0.02)*gclwh15_15*npx*pz*r21*(sj6*sj6)))+(((-0.05165202)*gclwh9_1*rxp0_2*sj6))+(((-0.1048417846)*gclwh13_2*npz*pz))+(((-0.0875721118)*gclwh15_2*pp*r20*sj6))+(((-7.4858e-5)*cj6*gclwh15_15*r20*r22))+(((-0.02)*cj6*gclwh7_1*pz*rxp1_2))+(((-0.05165202)*gclwh7_1*rxp2_2))+(((0.0002)*gclwh7_15*r21*rxp0_2*(sj6*sj6)))+(((-0.74858)*cj6*gclwh9_1*pz*rxp1_2))+(((-0.80771)*gclwh5_11*pp*r21*sj6))+(((-1.0)*cj6*gclwh5_2*r20*(pp*pp)))+(((0.039241231557934)*cj6*gclwh11_2*rxp0_2))+(((0.74858)*cj6*gclwh9_2*pp*rxp1_2))+(((0.74858)*gclwh7_2*pp*rxp2_2))+(((0.0005165202)*gclwh2_1*r20*sj6))+(((-0.0074858)*gclwh9_15*r20*rxp1_2*(cj6*cj6)))+(((0.02)*cj6*gclwh15_15*npy*pz*r21*sj6))+(((-0.0005165202)*gclwh15_1*r22))+(((-0.0096595172829)*cj6*gclwh0_1*r21))+(((0.02)*cj6*gclwh7_2*pp*rxp1_2))+((cj6*gclwh5_1*pp*pz*r20))+(((-0.6046355518)*gclwh9_11*rxp0_2*sj6))+(((-0.02)*gclwh5_15*npy*pz*r21*(sj6*sj6)))+(((0.00733855819067956)*cj6*gclwh15_2*r21))+(((-0.74858)*gclwh7_1*pz*rxp2_2))+(((-0.138)*gclwh15_1*npx*pz*sj6))+(((-0.001048417846)*cj6*gclwh7_2*rxp1_2))+(((0.02)*cj6*rxp0_2))+(((0.02)*gclwh13_15*npz*pz*r21*sj6))+(((-0.01)*cj6*gclwh15_15*pp*sj6*(r21*r21)))+(((2.0)*cj6*gclwh5_2*npx*pp*pz))+(((0.0074858)*gclwh15_2*pp*r22))+(((-0.0074858)*gclwh13_2*pp*r20*sj6))+(((-0.0161542)*cj6*gclwh7_11*rxp1_2))+(((0.0005165202)*gclwh13_1*r20*sj6))+(((-0.1399930041)*gclwh0_1*pz*r20*sj6))+(((0.6046355518)*cj6*gclwh11_11*rxp0_2))+(((-1.61542)*gclwh13_11*npz*pz))+(((-0.0875721118)*gclwh13_2*pp*r22))+(((0.80771)*gclwh13_11*pp*r22))+(((-0.01)*gclwh13_15*pp*r21*r22*sj6))+(((-0.1399930041)*cj6*gclwh0_1*pz*r21))+(((-2.0)*cj6*gclwh5_1*npx*(pz*pz)))+(((0.0074858)*cj6*gclwh13_1*pz*r21))+(((-0.0074858)*gclwh2_2*pp*r20*sj6))+(((-0.74858)*cj6*gclwh11_2*pp*rxp0_2))+(((0.02)*gclwh11_1*(pz*pz)))+(((0.0002)*cj6*gclwh9_15*r20*rxp2_2))+(((-2.0)*gclwh2_2*npz*pp*pz))+(((-0.0074858)*gclwh0_2*pp*r22))+(((-0.138)*gclwh0_1*npx*pz*sj6))+(((0.00734904236913956)*cj6*gclwh5_2*r20))+(((0.0074858)*gclwh7_15*r21*rxp2_2*sj6))+(((2.0)*cj6*gclwh0_2*npy*pp*pz))+(((-0.0096595172829)*gclwh0_1*r20*sj6))+(((-1.0)*gclwh15_2*r20*sj6*(pp*pp)))+(((0.1399930041)*gclwh2_1*pz*r22))+(((-0.138)*gclwh13_1*npz*pz))+(((-0.02)*gclwh11_2*pp*pz))+(((-1.0)*gclwh2_1*pp*pz*r22))+(((-0.00138)*gclwh7_1*rxp0_2*sj6))+(((0.069)*gclwh0_1*pp*r20*sj6))+(((-0.039241231557934)*gclwh7_2*rxp2_2))+(((-0.02)*rxp1_2*sj6))+(((-0.05165202)*cj6*gclwh9_1*rxp1_2))+(((0.001401930041)*gclwh5_15*(r21*r21)*(sj6*sj6)))+(((0.069)*gclwh13_1*pp*r22))+(((-2.0)*gclwh5_2*npy*pp*pz*sj6))+(((-0.02)*cj6*gclwh13_15*npz*pz*r20))+(((-0.02)*gclwh9_2*pp*rxp2_2))+(((-0.138)*cj6*gclwh5_1*npx*pz))+((cj6*gclwh0_1*pp*pz*r21))+(((-0.1048417846)*cj6*gclwh0_2*npy*pz))+(((0.02)*cj6*gclwh5_15*npx*pz*r21*sj6))+(((-0.002803860082)*cj6*gclwh5_15*r20*r21*sj6))+(((0.0161542)*gclwh11_11*pz))+(((-0.1048417846)*cj6*gclwh5_2*npx*pz)));
op[19]=((-0.1830918964)+(((-0.05165202)*gclwh7_11*rxp2_2))+(((-0.43342)*gclwh13_13*pp*r22))+(((-0.069)*gclwh5_11*pp*r21*sj6))+(((0.86684)*cj6*gclwh5_13*npx*pz))+(((0.003244495436)*gclwh15_13*r22))+(((0.138)*gclwh5_11*npy*pz*sj6))+(((0.3244495436)*gclwh11_13*rxp1_2*sj6))+(((0.05165202)*cj6*gclwh11_11*rxp0_2))+(((-0.060675767837022)*gclwh13_13*r22))+(((-0.05165202)*cj6*gclwh9_11*rxp1_2))+(((0.0005165202)*cj6*gclwh13_11*r21))+(((2.0)*gclwh5_9*npy*pz*sj6))+(((0.0074858)*cj6*gclwh13_9*r21))+(((0.0005165202)*gclwh13_11*r20*sj6))+(((0.02)*gclwh9_9*rxp2_2))+(((-0.138)*cj6*gclwh15_11*npy*pz))+(((-0.138)*gclwh15_11*npx*pz*sj6))+(((-0.3244495436)*cj6*gclwh11_13*rxp0_2))+(((0.1399930041)*gclwh13_9*r22))+(((-0.1401930041)*gclwh5_9*r21*sj6))+(((-0.05165202)*gclwh11_11*rxp1_2*sj6))+(((-2.0)*cj6*gclwh5_9*npx*pz))+(((-0.060762451837022)*cj6*gclwh5_13*r20))+(((0.0096595172829)*cj6*gclwh15_11*r21))+(((-0.86684)*gclwh5_13*npy*pz*sj6))+(((-0.74858)*cj6*gclwh9_9*rxp1_2))+(((0.1401930041)*cj6*gclwh5_9*r20))+(((0.1399930041)*gclwh15_9*r20*sj6))+(((-0.00138)*cj6*gclwh7_11*rxp1_2))+(((-0.0086684)*gclwh11_13*pz))+(((0.069)*gclwh13_11*pp*r22))+(((-0.0096733172829)*gclwh5_11*r21*sj6))+(((-0.138)*gclwh13_11*npz*pz))+(((0.069)*cj6*gclwh15_11*pp*r21))+(((-1.0)*gclwh5_9*pp*r21*sj6))+(((-0.02)*gclwh7_9*rxp0_2*sj6))+(((-2.0)*gclwh15_9*npx*pz*sj6))+(((0.02)*gclwh11_9*pz))+((gclwh15_9*pp*r20*sj6))+(((-2.0)*gclwh13_9*npz*pz))+(((-0.74858)*gclwh7_9*rxp2_2))+(((-0.0086684)*gclwh9_13*rxp2_2))+(((0.3244495436)*gclwh9_13*rxp0_2*sj6))+(((-0.74858)*gclwh9_9*rxp0_2*sj6))+(((-2.0)*cj6*gclwh15_9*npy*pz))+(((-0.00138)*gclwh7_11*rxp0_2*sj6))+(((0.060762451837022)*gclwh5_13*r21*sj6))+(((0.00138)*gclwh11_11*pz))+(((-0.138)*cj6*gclwh5_11*npx*pz))+(((0.3244495436)*cj6*gclwh9_13*rxp1_2))+((cj6*gclwh5_9*pp*r20))+(((0.3244495436)*gclwh7_13*rxp2_2))+(((-0.43342)*cj6*gclwh5_13*pp*r20))+(((-0.74858)*gclwh11_9*rxp1_2*sj6))+(((-0.43342)*gclwh15_13*pp*r20*sj6))+(((-0.0074858)*gclwh15_9*r22))+(((-0.0005165202)*gclwh15_11*r22))+(((0.43342)*gclwh5_13*pp*r21*sj6))+(((-0.05165202)*gclwh9_11*rxp0_2*sj6))+(((0.0086684)*gclwh7_13*rxp0_2*sj6))+(((0.86684)*cj6*gclwh15_13*npy*pz))+(((0.0096595172829)*gclwh15_11*r20*sj6))+(((0.069)*cj6*gclwh5_11*pp*r20))+(((0.0096595172829)*gclwh13_11*r22))+((gclwh13_9*pp*r22))+((cj6*gclwh15_9*pp*r21))+(((-0.060675767837022)*cj6*gclwh15_13*r21))+(((0.86684)*gclwh15_13*npx*pz*sj6))+(((0.74858)*cj6*gclwh11_9*rxp0_2))+(((0.069)*gclwh15_11*pp*r20*sj6))+(((0.86684)*gclwh13_13*npz*pz))+(((0.00138)*gclwh9_11*rxp2_2))+(((0.0096733172829)*cj6*gclwh5_11*r20))+(((-0.003244495436)*cj6*gclwh13_13*r21))+(((0.0086684)*cj6*gclwh7_13*rxp1_2))+(((-0.060675767837022)*gclwh15_13*r20*sj6))+(((0.0074858)*gclwh13_9*r20*sj6))+(((-0.43342)*cj6*gclwh15_13*pp*r21))+(((0.1399930041)*cj6*gclwh15_9*r21))+(((-0.003244495436)*gclwh13_13*r20*sj6))+(((-0.02)*cj6*gclwh7_9*rxp1_2)));
op[20]=((((-1.0)*gclwh5_15*x231*x261))+(((0.0193466345658)*gclwh5_15*x242))+(((-0.00276)*x236))+((gclwh15_15*x231*x256))+((gclwh9_15*rxp1_2*x226))+((gclwh9_15*rxp0_2*x248))+((x249*x254))+(((-1.0)*x224*x250))+((x229*x254))+((x248*x260))+(((-1.0)*x220*x266))+(((-1.0)*x222*x250))+(((-0.00276)*x247))+(((-1.0)*x222*x223))+(((-0.0193190345658)*x237))+(((-1.0)*x223*x224))+(((-1.0)*gclwh15_15*x220*x224))+(((-1.0)*gclwh15_15*x220*x222))+((gclwh15_15*x231*x239))+(((-1.0)*x220*x237))+((gclwh7_15*x240))+((gclwh15_15*x227))+(((-1.0)*x226*x228))+((x231*x238))+(((-0.0193466345658)*x266))+((gclwh5_15*x220*x242))+((gclwh5_15*x231*x232)));
op[21]=((((-1.0)*gclwh5_15*x234*x242))+((x224*x225))+((x234*x237))+(((-1.0)*cj6*rxp0_2*x244))+((gclwh15_15*x222*x234))+(((-1.0)*x229*x263))+((x230*x249))+((x222*x251))+((x229*x233))+((x229*x230))+((x233*x249))+(((-0.6488990872)*gclwh7_15*rxp2_2))+(((-0.006488990872)*gclwh15_15*r22))+(((-1.0)*gclwh5_4*x261*x262))+((x222*x225))+(((0.0149716)*gclwh15_4*r22))+(((-1.0)*gclwh15_15*x239*x264))+((gclwh15_4*x239*x262))+(((-1.0)*x224*x259))+(((-1.0)*x249*x263))+(((-1.0)*x222*x265))+(((-0.2799860082)*x257))+((x234*x266))+(((-1.0)*x222*x241))+(((-1.0)*x257*x258))+(((1.49716)*gclwh7_4*rxp2_2))+(((-1.0)*x222*x259))+(((0.121351535674044)*x237))+(((-1.0)*gclwh5_4*x245*x258))+(((-0.04)*gclwh11_4*pz))+(((-1.0)*x229*x255))+(((-0.6488990872)*sj6*x260))+(((0.6488990872)*cj6*x228))+((gclwh5_4*x242*x258))+(((-1.0)*gclwh15_15*x256*x264))+(((-0.121524903674044)*gclwh5_15*x242))+(((0.121524903674044)*x266))+((gclwh5_4*x232*x262))+(((-1.0)*x232*x267))+(((0.0173368)*x247))+(((-1.0)*x249*x255))+(((-1.0)*x238*x264))+((gclwh15_4*x256*x262))+((x242*x246))+((rxp1_2*sj6*x244))+(((-1.0)*x245*x246))+((x261*x267))+(((0.0173368)*x236))+((gclwh13_4*npz*x262))+(((-1.0)*x224*x241))+(((-1.0)*x224*x265))+((gclwh15_15*x224*x234))+(((-0.04)*gclwh9_4*rxp2_2))+((x224*x251)));
op[22]=((-0.05981196)+(((0.01)*cj6*gclwh15_15*pp*sj6*(r20*r20)))+(((0.1924138964)*gclwh0_2*pp*r20*sj6))+(((-0.74858)*pz))+(((7.4858e-5)*gclwh13_15*r20*r21*(cj6*cj6)))+(((-0.0002)*cj6*gclwh7_15*r20*rxp0_2*sj6))+(((0.138)*gclwh15_1*npx*pz*sj6))+(((0.02)*gclwh9_1*pz*rxp2_2))+(((0.001399930041)*gclwh15_15*r20*r21*(cj6*cj6)))+(((-0.0002)*gclwh11_15*pz*r21*sj6))+(((0.01)*gclwh15_15*pp*r20*r21*(cj6*cj6)))+(((0.001399930041)*cj6*gclwh13_15*r20*r22))+(((0.0074858)*gclwh2_1*pz*r20*sj6))+(((-0.001048417846)*gclwh7_2*rxp0_2*sj6))+(((0.069)*gclwh2_1*pp*r22))+(((2.0)*gclwh15_2*npx*pp*pz*sj6))+(((0.001401930041)*gclwh5_15*(cj6*cj6)*(r20*r20)))+(((0.80771)*gclwh15_11*pp*r20*sj6))+(((-0.0096595172829)*gclwh13_1*r22))+(((-0.069)*gclwh15_1*pp*r20*sj6))+(((2.0)*gclwh0_2*npx*pp*pz*sj6))+(((-0.0005165202)*gclwh0_1*r22))+(((0.0074858)*gclwh11_15*r21*rxp1_2*(sj6*sj6)))+(((-0.0096733172829)*cj6*gclwh5_1*r20))+(((1.61542)*gclwh5_11*npy*pz*sj6))+(((-0.0161542)*gclwh7_11*rxp0_2*sj6))+(((0.00039241231557934)*gclwh2_2*r20*sj6))+(((0.74858)*gclwh9_2*pp*rxp0_2*sj6))+(((0.80771)*cj6*gclwh5_11*pp*r20))+(((0.113073749341611)*gclwh13_11*r22))+(((0.113073749341611)*cj6*gclwh15_11*r21))+(((0.006046355518)*gclwh13_11*r20*sj6))+((gclwh2_2*r22*(pp*pp)))+(((-0.001399930041)*gclwh15_15*r20*r21*(sj6*sj6)))+(((0.001048417846)*gclwh11_2*pz))+(((0.1399930041)*gclwh15_1*pz*r20*sj6))+(((0.00733855819067956)*gclwh13_2*r22))+(((0.00039241231557934)*cj6*gclwh2_2*r21))+(((-0.0096595172829)*cj6*gclwh15_1*r21))+(((0.0074858)*gclwh0_1*pz*r22))+(((-0.069)*gclwh13_1*pp*r22))+(((0.1399930041)*gclwh13_1*pz*r22))+(((-0.138)*gclwh2_1*npz*pz))+(((-0.039241231557934)*cj6*gclwh9_2*rxp1_2))+(((-0.0074858)*cj6*gclwh13_2*pp*r21))+(((-0.0074858)*cj6*gclwh2_2*pp*r21))+(((-1.0)*gclwh5_1*pp*pz*r21*sj6))+(((-0.039241231557934)*gclwh11_2*rxp1_2*sj6))+((gclwh0_1*pp*pz*r20*sj6))+(((0.113235291341611)*cj6*gclwh5_11*r20))+(((-0.001399930041)*gclwh13_15*r21*r22*sj6))+((gclwh13_1*pp*pz*r22))+(((-1.61542)*gclwh15_11*npx*pz*sj6))+(((-1.61542)*cj6*gclwh5_11*npx*pz))+(((0.00039241231557934)*cj6*gclwh13_2*r21))+(((-2.0)*cj6*gclwh0_1*npy*(pz*pz)))+(((-0.01)*gclwh15_15*pp*r20*r21*(sj6*sj6)))+(((-0.039241231557934)*gclwh9_2*rxp0_2*sj6))+(((-0.0096595172829)*gclwh2_1*r22))+(((0.0096595172829)*gclwh0_1*r20*sj6))+(((-0.0074858)*cj6*gclwh11_15*r21*rxp0_2*sj6))+(((0.1048417846)*gclwh5_2*npy*pz*sj6))+(((-0.0005165202)*gclwh2_1*r20*sj6))+(((0.05165202)*cj6*gclwh9_1*rxp1_2))+(((0.0074858)*cj6*gclwh2_1*pz*r21))+(((2.0)*gclwh2_1*npz*(pz*pz)))+(((0.00733855819067956)*gclwh15_2*r20*sj6))+(((7.4858e-5)*cj6*gclwh13_15*sj6*(r20*r20)))+(((-7.4858e-5)*gclwh13_15*r20*r21*(sj6*sj6)))+(((-0.0074858)*cj6*gclwh7_15*r20*rxp2_2))+(((0.113073749341611)*gclwh15_11*r20*sj6))+(((0.001399930041)*cj6*gclwh15_15*sj6*(r20*r20)))+((gclwh5_2*r21*sj6*(pp*pp)))+(((-1.0)*gclwh0_2*r20*sj6*(pp*pp)))+(((-0.0877721118)*cj6*gclwh5_2*pp*r20))+(((7.4858e-5)*gclwh15_15*r21*r22*sj6))+(((-0.0875721118)*cj6*gclwh15_2*pp*r21))+(((-0.05165202)*cj6*gclwh11_1*rxp0_2))+(((-0.1924138964)*gclwh2_2*pp*r22))+(((0.80771)*cj6*gclwh15_11*pp*r21))+(((-0.6046355518)*gclwh7_11*rxp2_2))+(((-2.0)*gclwh13_1*npz*(pz*pz)))+(((0.00138)*gclwh7_1*rxp0_2*sj6))+(((0.0074858)*gclwh11_15*r20*rxp0_2*(cj6*cj6)))+(((0.00039241231557934)*gclwh13_2*r20*sj6))+(((0.1924138964)*cj6*gclwh0_2*pp*r21))+(((-1.0)*cj6*gclwh0_2*r21*(pp*pp)))+(((-0.1401930041)*gclwh5_1*pz*r21*sj6))+(((-1.0)*cj6*gclwh15_2*r21*(pp*pp)))+(((-0.02)*gclwh7_1*pz*rxp0_2*sj6))+(((0.02)*cj6*gclwh5_15*npy*pz*r20*sj6))+(((0.01)*gclwh5_15*pp*(cj6*cj6)*(r20*r20)))+(((0.0074858)*cj6*gclwh9_15*r21*rxp1_2*sj6))+(((-0.74858)*gclwh11_1*pz*rxp1_2*sj6))+(((-0.0074858)*gclwh15_1*pz*r22))+(((0.0096733172829)*gclwh5_1*r21*sj6))+(((-0.0005165202)*cj6*gclwh2_1*r21))+(((0.00138)*cj6*gclwh7_1*rxp1_2))+(((-2.0)*gclwh0_1*npx*sj6*(pz*pz)))+(((-0.00733855819067956)*cj6*gclwh0_2*r21))+(((-2.0)*gclwh15_1*npx*sj6*(pz*pz)))+(((-0.6046355518)*gclwh11_11*rxp1_2*sj6))+(((-0.1048417846)*cj6*gclwh15_2*npy*pz))+(((-0.0074858)*cj6*gclwh11_15*r20*rxp1_2*sj6))+(((0.0877721118)*gclwh5_2*pp*r21*sj6))+(((-0.1048417846)*gclwh0_2*npx*pz*sj6))+(((-7.4858e-5)*cj6*gclwh13_15*sj6*(r21*r21)))+(((0.0096595172829)*cj6*gclwh0_1*r21))+(((-0.069)*gclwh0_1*pp*r20*sj6))+(((0.00733855819067956)*gclwh2_2*r22))+(((-0.0002)*gclwh9_15*r21*rxp2_2*sj6))+(((0.02)*gclwh7_2*pp*rxp0_2*sj6))+((cj6*gclwh15_1*pp*pz*r21))+(((0.138)*cj6*gclwh0_1*npy*pz))+(((0.0074858)*gclwh9_15*r21*rxp0_2*(sj6*sj6)))+(((-0.138)*gclwh5_1*npy*pz*sj6))+(((-0.0096595172829)*gclwh15_1*r20*sj6))+(((-1.0)*gclwh13_2*r22*(pp*pp)))+(((0.138)*gclwh0_1*npx*pz*sj6))+(((-0.00733855819067956)*gclwh0_2*r20*sj6))+(((0.74858)*cj6*gclwh11_1*pz*rxp0_2))+(((-0.02)*cj6*gclwh5_15*pp*r20*r21*sj6))+(((0.0002)*cj6*gclwh11_15*pz*r20))+(((-1.61542)*cj6*gclwh15_11*npy*pz))+(((-0.02)*gclwh15_15*npy*pz*r20*(cj6*cj6)))+(((0.74858)*gclwh11_2*pp*rxp1_2*sj6))+(((-0.00734904236913956)*gclwh5_2*r21*sj6))+((gclwh15_1*pp*pz*r20*sj6))+(((2.0)*gclwh5_1*npy*sj6*(pz*pz)))+(((0.006046355518)*cj6*gclwh13_11*r21))+(((-0.00039241231557934)*gclwh15_2*r22))+(((0.0074858)*gclwh13_1*pz*r20*sj6))+(((0.00039241231557934)*gclwh0_2*r22))+(((2.0)*cj6*gclwh15_2*npy*pp*pz))+(((-0.02)*gclwh5_15*npx*pz*r20*(cj6*cj6)))+(((-0.0002)*gclwh7_15*r20*rxp1_2*(cj6*cj6)))+(((0.0161542)*gclwh9_11*rxp2_2))+(((0.1401930041)*cj6*gclwh5_1*pz*r20))+(((0.001048417846)*gclwh9_2*rxp2_2))+(((0.01)*gclwh5_15*pp*(r21*r21)*(sj6*sj6)))+(((-2.0)*cj6*gclwh15_1*npy*(pz*pz)))+(((0.1399930041)*cj6*gclwh15_1*pz*r21))+(((-0.74858)*gclwh9_1*pz*rxp0_2*sj6))+(((-0.0074858)*cj6*gclwh9_15*r20*rxp0_2*sj6))+(((-0.1048417846)*gclwh15_2*npx*pz*sj6))+(((-0.6046355518)*cj6*gclwh9_11*rxp1_2))+(((-0.006046355518)*gclwh15_11*r22))+(((0.01)*cj6*gclwh13_15*pp*r20*r22))+(((-0.001399930041)*cj6*gclwh15_15*sj6*(r21*r21)))+(((-0.02)*cj6*gclwh15_15*npx*pz*r20*sj6))+(((-0.113235291341611)*gclwh5_11*r21*sj6))+(((2.0)*gclwh13_2*npz*pp*pz))+(((0.0002)*cj6*gclwh7_15*r21*rxp1_2*sj6))+(((0.1048417846)*gclwh2_2*npz*pz))+(((0.02)*gclwh15_15*npx*pz*r21*(sj6*sj6)))+(((-0.1048417846)*gclwh13_2*npz*pz))+(((-0.0875721118)*gclwh15_2*pp*r20*sj6))+(((-7.4858e-5)*cj6*gclwh15_15*r20*r22))+(((-0.02)*cj6*gclwh7_1*pz*rxp1_2))+(((0.05165202)*gclwh7_1*rxp2_2))+(((0.0002)*gclwh7_15*r21*rxp0_2*(sj6*sj6)))+(((-0.74858)*cj6*gclwh9_1*pz*rxp1_2))+(((-0.80771)*gclwh5_11*pp*r21*sj6))+(((-0.0005165202)*cj6*gclwh13_1*r21))+(((-1.0)*cj6*gclwh5_2*r20*(pp*pp)))+(((0.039241231557934)*cj6*gclwh11_2*rxp0_2))+(((0.74858)*cj6*gclwh9_2*pp*rxp1_2))+(((0.74858)*gclwh7_2*pp*rxp2_2))+(((0.05165202)*gclwh9_1*rxp0_2*sj6))+(((-0.0074858)*gclwh9_15*r20*rxp1_2*(cj6*cj6)))+(((0.02)*cj6*gclwh15_15*npy*pz*r21*sj6))+(((0.02)*cj6*gclwh7_2*pp*rxp1_2))+((cj6*gclwh5_1*pp*pz*r20))+(((-0.6046355518)*gclwh9_11*rxp0_2*sj6))+(((-0.00138)*gclwh9_1*rxp2_2))+(((-0.02)*gclwh5_15*npy*pz*r21*(sj6*sj6)))+(((0.00733855819067956)*cj6*gclwh15_2*r21))+(((-0.74858)*gclwh7_1*pz*rxp2_2))+(((0.138)*cj6*gclwh5_1*npx*pz))+(((-0.001048417846)*cj6*gclwh7_2*rxp1_2))+(((0.069)*gclwh5_1*pp*r21*sj6))+(((0.02)*cj6*rxp0_2))+(((0.02)*gclwh13_15*npz*pz*r21*sj6))+(((-0.01)*cj6*gclwh15_15*pp*sj6*(r21*r21)))+(((-0.0005165202)*gclwh13_1*r20*sj6))+(((2.0)*cj6*gclwh5_2*npx*pp*pz))+(((0.0074858)*gclwh15_2*pp*r22))+(((-0.0074858)*gclwh13_2*pp*r20*sj6))+(((-0.0161542)*cj6*gclwh7_11*rxp1_2))+(((-0.1399930041)*gclwh0_1*pz*r20*sj6))+(((0.6046355518)*cj6*gclwh11_11*rxp0_2))+(((-1.61542)*gclwh13_11*npz*pz))+(((-0.0875721118)*gclwh13_2*pp*r22))+(((0.80771)*gclwh13_11*pp*r22))+(((-0.01)*gclwh13_15*pp*r21*r22*sj6))+(((-0.1399930041)*cj6*gclwh0_1*pz*r21))+(((-2.0)*cj6*gclwh5_1*npx*(pz*pz)))+(((0.0074858)*cj6*gclwh13_1*pz*r21))+(((0.05165202)*gclwh11_1*rxp1_2*sj6))+(((-0.0074858)*gclwh2_2*pp*r20*sj6))+(((-0.74858)*cj6*gclwh11_2*pp*rxp0_2))+(((-0.069)*cj6*gclwh0_1*pp*r21))+(((-0.00138)*gclwh11_1*pz))+(((0.02)*gclwh11_1*(pz*pz)))+(((0.0002)*cj6*gclwh9_15*r20*rxp2_2))+(((-2.0)*gclwh2_2*npz*pp*pz))+(((0.138)*gclwh13_1*npz*pz))+(((-0.0074858)*gclwh0_2*pp*r22))+(((-0.069)*cj6*gclwh15_1*pp*r21))+(((0.00734904236913956)*cj6*gclwh5_2*r20))+(((0.0074858)*gclwh7_15*r21*rxp2_2*sj6))+(((2.0)*cj6*gclwh0_2*npy*pp*pz))+(((0.138)*cj6*gclwh15_1*npy*pz))+(((-1.0)*gclwh15_2*r20*sj6*(pp*pp)))+(((0.1399930041)*gclwh2_1*pz*r22))+(((-0.02)*gclwh11_2*pp*pz))+(((-1.0)*gclwh2_1*pp*pz*r22))+(((-0.039241231557934)*gclwh7_2*rxp2_2))+(((-0.02)*rxp1_2*sj6))+(((0.001401930041)*gclwh5_15*(r21*r21)*(sj6*sj6)))+(((-2.0)*gclwh5_2*npy*pp*pz*sj6))+(((-0.02)*cj6*gclwh13_15*npz*pz*r20))+(((-0.02)*gclwh9_2*pp*rxp2_2))+(((-0.069)*cj6*gclwh5_1*pp*r20))+((cj6*gclwh0_1*pp*pz*r21))+(((-0.1048417846)*cj6*gclwh0_2*npy*pz))+(((0.02)*cj6*gclwh5_15*npx*pz*r21*sj6))+(((-0.002803860082)*cj6*gclwh5_15*r20*r21*sj6))+(((0.0005165202)*gclwh15_1*r22))+(((0.0161542)*gclwh11_11*pz))+(((-0.1048417846)*cj6*gclwh5_2*npx*pz)));
IkReal x269=(rxp0_2*sj6);
IkReal x270=((0.00552)*gclwh12_3);
IkReal x271=(cj6*rxp1_2);
IkReal x272=((0.10330404)*gclwh8_12);
IkReal x273=((0.138)*pp);
IkReal x274=(gclwh7_11*r22);
IkReal x275=(cj6*rxp0_2);
IkReal x276=((0.20660808)*gclwh4_3);
IkReal x277=((0.20660808)*gclwh15_7);
IkReal x278=((0.276)*cj6);
IkReal x279=(pp*r21);
IkReal x280=(npx*pz);
IkReal x281=(r20*sj6);
IkReal x282=((0.0386380691316)*gclwh9_7);
IkReal x283=(r21*sj6);
IkReal x284=(pp*r20);
IkReal x285=(cj6*r21);
IkReal x286=((0.0193190345658)*gclwh8_10);
IkReal x287=((0.276)*sj6);
IkReal x288=(cj6*r20);
IkReal x289=((0.0386380691316)*gclwh8_3);
IkReal x290=((0.0193466345658)*gclwh11_13);
IkReal x291=((0.00276)*gclwh13_11);
IkReal x292=((0.00276)*gclwh12_10);
IkReal x293=((0.00276)*gclwh12_12);
IkReal x294=((0.0193466345658)*gclwh10_12);
IkReal x295=((0.0193466345658)*gclwh4_12);
IkReal x296=((0.0010330404)*r22);
IkReal x297=((0.0020660808)*r22);
IkReal x298=((0.0020660808)*gclwh7_7);
IkReal x299=((0.0193466345658)*gclwh4_10);
IkReal x300=((0.00552)*gclwh13_7);
IkReal x301=(npy*pz);
IkReal x302=((0.20660808)*rxp2_2);
IkReal x303=((0.10330404)*gclwh5_11);
IkReal x304=((0.0020660808)*gclwh6_3);
IkReal x305=((0.552)*gclwh11_7);
IkReal x306=((0.20660808)*gclwh5_7);
IkReal x307=(npz*pz);
IkReal x308=((0.10330404)*gclwh15_11);
IkReal x309=((0.0193190345658)*gclwh14_12);
IkReal x310=((0.552)*cj6);
IkReal x311=((0.00276)*gclwh13_13);
IkReal x312=((0.10330404)*gclwh5_13);
IkReal x313=((0.0193190345658)*r22);
IkReal x314=((0.0193190345658)*gclwh9_13);
IkReal x315=((0.276)*pp);
IkReal x316=(gclwh6_3*r22);
IkReal x317=((0.10330404)*gclwh14_10);
IkReal x318=((0.0193466345658)*gclwh10_10);
IkReal x319=(rxp1_2*sj6);
IkReal x320=((0.00276)*pz);
IkReal x321=((0.0193190345658)*gclwh8_12);
IkReal x322=((0.10330404)*gclwh14_12);
IkReal x323=((0.0010330404)*gclwh7_11);
IkReal x324=((0.0193466345658)*gclwh11_11);
IkReal x325=((0.0010330404)*gclwh7_13);
IkReal x326=((0.0010330404)*gclwh12_10);
IkReal x327=((0.00552)*pz);
IkReal x328=((0.0193190345658)*gclwh9_11);
IkReal x329=((0.00276)*rxp2_2);
IkReal x330=(gclwh7_7*r22);
IkReal x331=((0.10330404)*rxp2_2);
IkReal x332=((0.10330404)*gclwh8_10);
IkReal x333=((0.00276)*gclwh6_12);
IkReal x334=((0.0010330404)*gclwh12_12);
IkReal x335=((0.00552)*rxp2_2);
IkReal x336=((0.552)*sj6);
IkReal x337=((0.0010330404)*gclwh6_12);
IkReal x338=((0.20660808)*gclwh14_3);
IkReal x339=((0.00276)*gclwh6_10);
IkReal x340=((0.0010330404)*gclwh6_10);
IkReal x341=((0.0193190345658)*gclwh14_10);
IkReal x342=((0.10330404)*gclwh15_13);
IkReal x343=(gclwh6_12*x313);
IkReal x344=(gclwh14_10*x329);
IkReal x345=(gclwh4_12*x320);
IkReal x346=(gclwh12_12*x331);
IkReal x347=(gclwh8_10*x296);
IkReal x348=(gclwh4_10*x320);
IkReal x349=(gclwh8_12*x296);
IkReal x350=(gclwh6_10*x313);
IkReal x351=(gclwh14_12*x329);
IkReal x352=(gclwh12_10*x331);
IkReal x353=((0.0193190345658)*x274);
IkReal x354=(gclwh7_13*x313);
IkReal x355=(gclwh5_11*x320);
IkReal x356=(gclwh13_13*x331);
IkReal x357=(gclwh5_13*x320);
IkReal x358=(gclwh13_11*x331);
IkReal x359=(gclwh9_11*x296);
IkReal x360=(gclwh9_13*x296);
IkReal x361=(gclwh15_13*x329);
IkReal x362=(gclwh15_11*x329);
IkReal x363=((0.0386932691316)*x283);
IkReal x364=((0.10330404)*x319);
IkReal x365=(x281*x337);
IkReal x366=(x269*x322);
IkReal x367=(x271*x322);
IkReal x368=(x283*x294);
IkReal x369=(x285*x337);
IkReal x370=(gclwh6_12*r22*x273);
IkReal x371=(x285*x321);
IkReal x372=(x271*x293);
IkReal x373=((0.276)*gclwh6_10*x307);
IkReal x374=(x269*x293);
IkReal x375=((0.10330404)*gclwh4_12*x275);
IkReal x376=(gclwh4_10*x364);
IkReal x377=(x281*x321);
IkReal x378=(x288*x318);
IkReal x379=(gclwh4_12*x364);
IkReal x380=(x285*x340);
IkReal x381=(x269*x292);
IkReal x382=(x285*x286);
IkReal x383=(gclwh6_10*r22*x273);
IkReal x384=(x271*x292);
IkReal x385=(x288*x294);
IkReal x386=(x283*x318);
IkReal x387=((0.276)*gclwh6_12*x307);
IkReal x388=(x271*x317);
IkReal x389=(x281*x286);
IkReal x390=((0.10330404)*gclwh4_10*x275);
IkReal x391=(x281*x340);
IkReal x392=(x269*x317);
IkReal x393=(x269*x308);
IkReal x394=(x283*x290);
IkReal x395=(x281*x325);
IkReal x396=(x285*x323);
IkReal x397=(x275*x303);
IkReal x398=(x281*x323);
IkReal x399=(x283*x324);
IkReal x400=(x285*x325);
IkReal x401=(x271*x308);
IkReal x402=(x285*x314);
IkReal x403=(x281*x328);
IkReal x404=(x285*x328);
IkReal x405=(x273*x274);
IkReal x406=(x269*x311);
IkReal x407=(x271*x311);
IkReal x408=(gclwh7_13*r22*x273);
IkReal x409=(x271*x291);
IkReal x410=(x269*x291);
IkReal x411=(x275*x312);
IkReal x412=(x281*x314);
IkReal x413=(x271*x342);
IkReal x414=(x269*x342);
IkReal x415=((0.276)*gclwh7_11*x307);
IkReal x416=(x288*x324);
IkReal x417=(x303*x319);
IkReal x418=((0.276)*gclwh7_13*x307);
IkReal x419=(x288*x290);
IkReal x420=(x312*x319);
IkReal x421=(x287*x301);
IkReal x422=(gclwh8_10*x278*x301);
IkReal x423=(gclwh8_12*x273*x285);
IkReal x424=(gclwh10_10*x421);
IkReal x425=(gclwh8_12*x273*x281);
IkReal x426=(gclwh10_10*x273*x288);
IkReal x427=(gclwh10_12*x273*x283);
IkReal x428=(gclwh8_10*x280*x287);
IkReal x429=(gclwh10_12*x278*x280);
IkReal x430=(gclwh8_12*x278*x301);
IkReal x431=(gclwh10_10*x278*x280);
IkReal x432=(gclwh10_12*x421);
IkReal x433=(gclwh8_10*x273*x281);
IkReal x434=(gclwh10_12*x273*x288);
IkReal x435=(gclwh8_10*x273*x285);
IkReal x436=(gclwh8_12*x280*x287);
IkReal x437=(gclwh10_10*x273*x283);
IkReal x438=(gclwh11_11*x278*x280);
IkReal x439=(gclwh11_13*x278*x280);
IkReal x440=(gclwh9_13*x273*x285);
IkReal x441=(gclwh9_11*x273*x285);
IkReal x442=(gclwh11_11*x273*x283);
IkReal x443=(gclwh9_11*x273*x281);
IkReal x444=(gclwh11_13*x273*x283);
IkReal x445=(gclwh9_13*x273*x281);
IkReal x446=(gclwh11_13*x421);
IkReal x447=(gclwh11_11*x273*x288);
IkReal x448=(gclwh11_11*x421);
IkReal x449=(gclwh9_13*x280*x287);
IkReal x450=(gclwh11_13*x273*x288);
IkReal x451=(gclwh9_11*x280*x287);
IkReal x452=(gclwh9_13*x278*x301);
IkReal x453=(gclwh9_11*x278*x301);
IkReal x454=(x347+x344+x378+x376+x373+x428+x426+x424+x422);
IkReal x455=(x351+x387+x385+x349+x379+x430+x432+x434+x436);
IkReal x456=(x359+x362+x416+x417+x415+x448+x447+x453+x451);
IkReal x457=(x360+x361+x418+x419+x420+x449+x446+x452+x450);
IkReal x458=(x343+x346+x345+x377+x375+x374+x372+x371+x370+x368+x369+x365+x366+x367+x429+x427+x425+x423);
IkReal x459=(x354+x357+x356+x395+x394+x400+x402+x407+x406+x408+x412+x413+x411+x414+x439+x445+x444+x440);
IkReal x460=(x353+x355+x358+x397+x396+x393+x399+x398+x401+x403+x405+x404+x409+x410+x438+x441+x443+x442);
IkReal x461=(x350+x352+x386+x384+x382+x383+x380+x381+x388+x389+x348+x391+x390+x392+x431+x433+x435+x437);
op[23]=((0.1830918964)+(((-0.05165202)*gclwh7_11*rxp2_2))+(((0.74858)*cj6*gclwh9_9*rxp1_2))+(((2.0)*gclwh13_9*npz*pz))+(((-0.0074858)*gclwh13_9*r20*sj6))+(((-0.069)*gclwh5_11*pp*r21*sj6))+(((-0.3244495436)*gclwh9_13*rxp0_2*sj6))+(((-0.1399930041)*cj6*gclwh15_9*r21))+(((-0.3244495436)*gclwh7_13*rxp2_2))+(((-0.0086684)*cj6*gclwh7_13*rxp1_2))+(((-0.003244495436)*gclwh15_13*r22))+(((0.138)*gclwh5_11*npy*pz*sj6))+(((2.0)*cj6*gclwh5_9*npx*pz))+(((0.05165202)*cj6*gclwh11_11*rxp0_2))+(((-0.05165202)*cj6*gclwh9_11*rxp1_2))+(((0.74858)*gclwh11_9*rxp1_2*sj6))+(((0.0005165202)*cj6*gclwh13_11*r21))+(((0.1401930041)*gclwh5_9*r21*sj6))+(((0.3244495436)*cj6*gclwh11_13*rxp0_2))+(((-1.0)*cj6*gclwh15_9*pp*r21))+(((0.0005165202)*gclwh13_11*r20*sj6))+(((-0.138)*cj6*gclwh15_11*npy*pz))+(((-0.86684)*cj6*gclwh5_13*npx*pz))+(((0.86684)*gclwh5_13*npy*pz*sj6))+(((-0.138)*gclwh15_11*npx*pz*sj6))+(((0.74858)*gclwh9_9*rxp0_2*sj6))+(((-2.0)*gclwh5_9*npy*pz*sj6))+(((0.43342)*cj6*gclwh15_13*pp*r21))+(((-0.05165202)*gclwh11_11*rxp1_2*sj6))+(((-0.3244495436)*cj6*gclwh9_13*rxp1_2))+(((0.43342)*cj6*gclwh5_13*pp*r20))+(((-0.86684)*cj6*gclwh15_13*npy*pz))+(((-1.0)*gclwh15_9*pp*r20*sj6))+(((-0.43342)*gclwh5_13*pp*r21*sj6))+(((0.0096595172829)*cj6*gclwh15_11*r21))+(((-0.3244495436)*gclwh11_13*rxp1_2*sj6))+(((-0.00138)*cj6*gclwh7_11*rxp1_2))+(((-0.0074858)*cj6*gclwh13_9*r21))+(((0.0086684)*gclwh11_13*pz))+(((0.069)*gclwh13_11*pp*r22))+(((-0.0096733172829)*gclwh5_11*r21*sj6))+(((-0.138)*gclwh13_11*npz*pz))+(((0.060675767837022)*cj6*gclwh15_13*r21))+(((0.069)*cj6*gclwh15_11*pp*r21))+(((-0.0086684)*gclwh7_13*rxp0_2*sj6))+(((0.02)*cj6*gclwh7_9*rxp1_2))+(((-0.02)*gclwh9_9*rxp2_2))+(((0.060762451837022)*cj6*gclwh5_13*r20))+((gclwh5_9*pp*r21*sj6))+(((-0.00138)*gclwh7_11*rxp0_2*sj6))+(((-0.1399930041)*gclwh15_9*r20*sj6))+(((-0.1401930041)*cj6*gclwh5_9*r20))+(((0.02)*gclwh7_9*rxp0_2*sj6))+(((0.00138)*gclwh11_11*pz))+(((0.060675767837022)*gclwh13_13*r22))+(((-0.138)*cj6*gclwh5_11*npx*pz))+(((0.74858)*gclwh7_9*rxp2_2))+(((0.003244495436)*cj6*gclwh13_13*r21))+(((-0.1399930041)*gclwh13_9*r22))+(((-0.0005165202)*gclwh15_11*r22))+(((-0.74858)*cj6*gclwh11_9*rxp0_2))+(((-0.060762451837022)*gclwh5_13*r21*sj6))+(((0.0086684)*gclwh9_13*rxp2_2))+(((-0.05165202)*gclwh9_11*rxp0_2*sj6))+(((-0.86684)*gclwh13_13*npz*pz))+(((-1.0)*cj6*gclwh5_9*pp*r20))+(((0.0096595172829)*gclwh15_11*r20*sj6))+(((0.069)*cj6*gclwh5_11*pp*r20))+(((0.0096595172829)*gclwh13_11*r22))+(((0.43342)*gclwh15_13*pp*r20*sj6))+(((-1.0)*gclwh13_9*pp*r22))+(((2.0)*gclwh15_9*npx*pz*sj6))+(((0.069)*gclwh15_11*pp*r20*sj6))+(((0.00138)*gclwh9_11*rxp2_2))+(((0.060675767837022)*gclwh15_13*r20*sj6))+(((0.0096733172829)*cj6*gclwh5_11*r20))+(((0.0074858)*gclwh15_9*r22))+(((-0.86684)*gclwh15_13*npx*pz*sj6))+(((2.0)*cj6*gclwh15_9*npy*pz))+(((0.43342)*gclwh13_13*pp*r22))+(((-0.02)*gclwh11_9*pz))+(((0.003244495436)*gclwh13_13*r20*sj6)));
op[24]=((((-1.0)*x455))+(((-1.0)*x454))+x458+x461);
op[25]=((((0.72884)*gclwh10_5*pp*r21*sj6))+(((-0.72884)*cj6*gclwh10_5*pp*r20))+(((0.72884)*gclwh8_5*pp*r20*sj6))+(((4.0)*cj6*gclwh10_8*npx*pz))+(((-1.45768)*gclwh6_5*npz*pz))+(((0.5455950472)*cj6*gclwh14_5*rxp1_2))+(((0.102032501108244)*gclwh6_5*r22))+(((-1.49716)*gclwh4_8*rxp1_2*sj6))+(((0.0001425595752)*gclwh8_6*r22))+(((-0.0001425595752)*cj6*gclwh6_6*r21))+(((-0.0026698355700804)*gclwh10_6*r21*sj6))+(((0.5455950472)*cj6*gclwh4_5*rxp0_2))+(((-0.019044)*cj6*gclwh8_6*pp*r21))+(((0.72884)*gclwh6_5*pp*r22))+(((-0.0026660267700804)*gclwh6_6*r22))+(((-0.04)*gclwh14_8*rxp2_2))+(((-0.01425595752)*cj6*gclwh4_6*rxp0_2))+(((0.04)*gclwh4_8*pz))+(((0.5455950472)*gclwh12_5*rxp2_2))+(((0.0149716)*gclwh6_8*r20*sj6))+(((1.49716)*gclwh12_8*rxp2_2))+(((-0.00038088)*gclwh12_6*rxp0_2*sj6))+(((0.005455950472)*cj6*gclwh6_5*r21))+(((0.0145768)*cj6*gclwh12_5*rxp1_2))+(((0.01425595752)*gclwh4_6*rxp1_2*sj6))+(((-0.00038088)*cj6*gclwh12_6*rxp1_2))+(((-0.01425595752)*cj6*gclwh14_6*rxp1_2))+(((-2.0)*cj6*gclwh10_8*pp*r20))+(((-4.0)*gclwh6_8*npz*pz))+(((0.102032501108244)*gclwh8_5*r20*sj6))+(((0.04)*gclwh12_8*rxp0_2*sj6))+(((2.0)*gclwh8_8*pp*r20*sj6))+(((-4.0)*cj6*gclwh8_8*npy*pz))+(((0.5455950472)*gclwh14_5*rxp0_2*sj6))+(((2.0)*cj6*gclwh8_8*pp*r21))+(((-0.0026660267700804)*gclwh8_6*r20*sj6))+(((0.00038088)*gclwh14_6*rxp2_2))+(((0.038088)*gclwh8_6*npx*pz*sj6))+(((0.2799860082)*cj6*gclwh8_8*r21))+(((-0.2803860082)*cj6*gclwh10_8*r20))+(((-0.01425595752)*gclwh14_6*rxp0_2*sj6))+(((-0.01425595752)*gclwh12_6*rxp2_2))+(((-1.45768)*gclwh10_5*npy*pz*sj6))+(((2.0)*gclwh6_8*pp*r22))+(((-0.5455950472)*gclwh4_5*rxp1_2*sj6))+(((-0.0145768)*gclwh14_5*rxp2_2))+(((-0.0149716)*gclwh8_8*r22))+(((2.0)*gclwh10_8*pp*r21*sj6))+(((0.038088)*cj6*gclwh8_6*npy*pz))+(((0.2799860082)*gclwh8_8*r20*sj6))+(((-0.019044)*gclwh10_6*pp*r21*sj6))+(((0.72884)*cj6*gclwh8_5*pp*r21))+(((-0.00038088)*gclwh4_6*pz))+(((-4.0)*gclwh10_8*npy*pz*sj6))+(((0.038088)*gclwh6_6*npz*pz))+(((-0.019044)*gclwh8_6*pp*r20*sj6))+(((0.2803860082)*gclwh10_8*r21*sj6))+(((-0.019044)*gclwh6_6*pp*r22))+(((1.45768)*cj6*gclwh10_5*npx*pz))+(((1.49716)*gclwh14_8*rxp0_2*sj6))+(((0.0145768)*gclwh12_5*rxp0_2*sj6))+(((0.0026698355700804)*cj6*gclwh10_6*r20))+(((1.49716)*cj6*gclwh4_8*rxp0_2))+(((0.102178269108244)*gclwh10_5*r21*sj6))+(((0.005455950472)*gclwh6_5*r20*sj6))+(((0.102032501108244)*cj6*gclwh8_5*r21))+(((-0.0026660267700804)*cj6*gclwh8_6*r21))+(((-4.0)*gclwh8_8*npx*pz*sj6))+(((0.038088)*gclwh10_6*npy*pz*sj6))+(((-0.038088)*cj6*gclwh10_6*npx*pz))+(((0.04)*cj6*gclwh12_8*rxp1_2))+(((0.0145768)*gclwh4_5*pz))+(((-0.102178269108244)*cj6*gclwh10_5*r20))+(((-0.005455950472)*gclwh8_5*r22))+(((-0.0001425595752)*gclwh6_6*r20*sj6))+(((0.019044)*cj6*gclwh10_6*pp*r20))+(((1.49716)*cj6*gclwh14_8*rxp1_2))+(((0.0149716)*cj6*gclwh6_8*r21))+(((-1.45768)*cj6*gclwh8_5*npy*pz))+(((0.2799860082)*gclwh6_8*r22))+(((-1.45768)*gclwh8_5*npx*pz*sj6)));
op[26]=(((x276*x319))+(((-1.0)*gclwh12_3*x302))+(((-1.0)*x271*x338))+(((-1.0)*gclwh10_3*x363))+(((-1.0)*gclwh10_3*x279*x287))+((gclwh8_3*x280*x336))+(((-1.0)*gclwh4_3*x327))+(((-1.0)*gclwh8_3*x278*x279))+(((-1.0)*x269*x270))+(((-1.0)*x269*x338))+(((-1.0)*x285*x304))+(((-1.0)*x281*x289))+(((0.552)*gclwh6_3*x307))+(((-1.0)*x281*x304))+(((-1.0)*gclwh10_3*x280*x310))+((gclwh8_3*x301*x310))+((gclwh8_3*x297))+(((-1.0)*x315*x316))+(((-1.0)*x285*x289))+((gclwh14_3*x335))+(((-1.0)*x270*x271))+(((-1.0)*x275*x276))+(((0.0386932691316)*gclwh10_3*x288))+((gclwh10_3*x301*x336))+(((-1.0)*gclwh8_3*x281*x315))+((gclwh10_3*x278*x284))+(((-0.0386380691316)*x316)));
op[27]=0;
op[28]=((((-1.0)*x461))+(((-1.0)*x455))+x458+x454);
op[29]=((((0.72884)*gclwh10_5*pp*r21*sj6))+(((-0.038088)*gclwh8_6*npx*pz*sj6))+(((-0.72884)*cj6*gclwh10_5*pp*r20))+(((-0.00038088)*gclwh14_6*rxp2_2))+(((-0.0026698355700804)*cj6*gclwh10_6*r20))+(((0.72884)*gclwh8_5*pp*r20*sj6))+(((4.0)*cj6*gclwh10_8*npx*pz))+(((-1.45768)*gclwh6_5*npz*pz))+(((0.5455950472)*cj6*gclwh14_5*rxp1_2))+(((0.102032501108244)*gclwh6_5*r22))+(((0.0001425595752)*cj6*gclwh6_6*r21))+(((-1.49716)*gclwh4_8*rxp1_2*sj6))+(((0.0001425595752)*gclwh6_6*r20*sj6))+(((-0.038088)*gclwh10_6*npy*pz*sj6))+(((0.5455950472)*cj6*gclwh4_5*rxp0_2))+(((0.019044)*gclwh10_6*pp*r21*sj6))+(((0.72884)*gclwh6_5*pp*r22))+(((0.01425595752)*gclwh14_6*rxp0_2*sj6))+(((0.00038088)*gclwh12_6*rxp0_2*sj6))+(((0.01425595752)*cj6*gclwh14_6*rxp1_2))+(((-0.04)*gclwh14_8*rxp2_2))+(((0.04)*gclwh4_8*pz))+(((0.5455950472)*gclwh12_5*rxp2_2))+(((0.01425595752)*gclwh12_6*rxp2_2))+(((-0.01425595752)*gclwh4_6*rxp1_2*sj6))+(((0.0149716)*gclwh6_8*r20*sj6))+(((1.49716)*gclwh12_8*rxp2_2))+(((0.005455950472)*cj6*gclwh6_5*r21))+(((0.019044)*cj6*gclwh8_6*pp*r21))+(((0.0145768)*cj6*gclwh12_5*rxp1_2))+(((-2.0)*cj6*gclwh10_8*pp*r20))+(((-4.0)*gclwh6_8*npz*pz))+(((0.102032501108244)*gclwh8_5*r20*sj6))+(((0.04)*gclwh12_8*rxp0_2*sj6))+(((2.0)*gclwh8_8*pp*r20*sj6))+(((-4.0)*cj6*gclwh8_8*npy*pz))+(((0.5455950472)*gclwh14_5*rxp0_2*sj6))+(((2.0)*cj6*gclwh8_8*pp*r21))+(((-0.038088)*cj6*gclwh8_6*npy*pz))+(((0.00038088)*cj6*gclwh12_6*rxp1_2))+(((0.2799860082)*cj6*gclwh8_8*r21))+(((-0.2803860082)*cj6*gclwh10_8*r20))+(((0.019044)*gclwh8_6*pp*r20*sj6))+(((-1.45768)*gclwh10_5*npy*pz*sj6))+(((2.0)*gclwh6_8*pp*r22))+(((0.0026698355700804)*gclwh10_6*r21*sj6))+(((-0.5455950472)*gclwh4_5*rxp1_2*sj6))+(((-0.0145768)*gclwh14_5*rxp2_2))+(((-0.0001425595752)*gclwh8_6*r22))+(((-0.0149716)*gclwh8_8*r22))+(((-0.038088)*gclwh6_6*npz*pz))+(((2.0)*gclwh10_8*pp*r21*sj6))+(((0.0026660267700804)*gclwh6_6*r22))+(((0.0026660267700804)*cj6*gclwh8_6*r21))+(((0.2799860082)*gclwh8_8*r20*sj6))+(((0.72884)*cj6*gclwh8_5*pp*r21))+(((-4.0)*gclwh10_8*npy*pz*sj6))+(((0.2803860082)*gclwh10_8*r21*sj6))+(((1.45768)*cj6*gclwh10_5*npx*pz))+(((1.49716)*gclwh14_8*rxp0_2*sj6))+(((0.0145768)*gclwh12_5*rxp0_2*sj6))+(((1.49716)*cj6*gclwh4_8*rxp0_2))+(((0.102178269108244)*gclwh10_5*r21*sj6))+(((0.038088)*cj6*gclwh10_6*npx*pz))+(((0.005455950472)*gclwh6_5*r20*sj6))+(((0.102032501108244)*cj6*gclwh8_5*r21))+(((0.01425595752)*cj6*gclwh4_6*rxp0_2))+(((0.00038088)*gclwh4_6*pz))+(((-4.0)*gclwh8_8*npx*pz*sj6))+(((0.04)*cj6*gclwh12_8*rxp1_2))+(((0.0145768)*gclwh4_5*pz))+(((-0.102178269108244)*cj6*gclwh10_5*r20))+(((-0.005455950472)*gclwh8_5*r22))+(((-0.019044)*cj6*gclwh10_6*pp*r20))+(((0.0026660267700804)*gclwh8_6*r20*sj6))+(((0.019044)*gclwh6_6*pp*r22))+(((1.49716)*cj6*gclwh14_8*rxp1_2))+(((0.0149716)*cj6*gclwh6_8*r21))+(((-1.45768)*cj6*gclwh8_5*npy*pz))+(((0.2799860082)*gclwh6_8*r22))+(((-1.45768)*gclwh8_5*npx*pz*sj6)));
op[30]=((((-4.0)*gclwh11_9*npy*pz*sj6))+(((2.0)*cj6*gclwh9_9*pp*r21))+(((0.5455950472)*gclwh13_1*rxp2_2))+(((0.0149716)*cj6*gclwh7_9*r21))+(((0.00038088)*gclwh15_2*rxp2_2))+(((-0.0149716)*gclwh9_9*r22))+(((0.0149716)*gclwh7_9*r20*sj6))+(((-0.005455950472)*gclwh9_1*r22))+(((0.0001425595752)*gclwh9_2*r22))+(((0.0145768)*gclwh5_1*pz))+(((-0.72884)*cj6*gclwh11_1*pp*r20))+(((0.5455950472)*gclwh15_1*rxp0_2*sj6))+(((-4.0)*gclwh7_9*npz*pz))+(((-1.45768)*gclwh7_1*npz*pz))+(((-0.01425595752)*gclwh13_2*rxp2_2))+(((0.72884)*gclwh7_1*pp*r22))+(((-4.0)*cj6*gclwh9_9*npy*pz))+(((0.005455950472)*cj6*gclwh7_1*r21))+(((-1.45768)*gclwh9_1*npx*pz*sj6))+(((-0.2803860082)*cj6*gclwh11_9*r20))+(((0.2799860082)*gclwh9_9*r20*sj6))+(((2.0)*gclwh11_9*pp*r21*sj6))+(((-0.019044)*cj6*gclwh9_2*pp*r21))+(((4.0)*cj6*gclwh11_9*npx*pz))+(((-1.49716)*gclwh5_9*rxp1_2*sj6))+(((-0.01425595752)*cj6*gclwh5_2*rxp0_2))+(((-2.0)*cj6*gclwh11_9*pp*r20))+(((0.019044)*cj6*gclwh11_2*pp*r20))+(((1.49716)*gclwh13_9*rxp2_2))+(((0.72884)*gclwh9_1*pp*r20*sj6))+(((0.5455950472)*cj6*gclwh15_1*rxp1_2))+(((-0.5455950472)*gclwh5_1*rxp1_2*sj6))+(((-0.019044)*gclwh11_2*pp*r21*sj6))+(((0.2799860082)*gclwh7_9*r22))+(((0.038088)*gclwh7_2*npz*pz))+(((0.0145768)*cj6*gclwh13_1*rxp1_2))+(((-0.00038088)*cj6*gclwh13_2*rxp1_2))+(((-0.0026660267700804)*gclwh9_2*r20*sj6))+(((-0.038088)*cj6*gclwh11_2*npx*pz))+(((-0.00038088)*gclwh13_2*rxp0_2*sj6))+(((-0.00038088)*gclwh5_2*pz))+(((-0.0026660267700804)*cj6*gclwh9_2*r21))+(((-0.019044)*gclwh7_2*pp*r22))+(((-0.0145768)*gclwh15_1*rxp2_2))+(((0.2799860082)*cj6*gclwh9_9*r21))+(((0.102032501108244)*cj6*gclwh9_1*r21))+(((-0.04)*gclwh15_9*rxp2_2))+(((-0.0001425595752)*cj6*gclwh7_2*r21))+(((0.72884)*gclwh11_1*pp*r21*sj6))+(((2.0)*gclwh7_9*pp*r22))+(((0.5455950472)*cj6*gclwh5_1*rxp0_2))+(((-0.0026660267700804)*gclwh7_2*r22))+(((0.04)*gclwh13_9*rxp0_2*sj6))+(((0.102032501108244)*gclwh9_1*r20*sj6))+(((0.0145768)*gclwh13_1*rxp0_2*sj6))+(((0.0026698355700804)*cj6*gclwh11_2*r20))+(((0.102032501108244)*gclwh7_1*r22))+(((-0.01425595752)*cj6*gclwh15_2*rxp1_2))+(((1.49716)*gclwh15_9*rxp0_2*sj6))+(((1.45768)*cj6*gclwh11_1*npx*pz))+(((0.005455950472)*gclwh7_1*r20*sj6))+(((-1.45768)*cj6*gclwh9_1*npy*pz))+(((-4.0)*gclwh9_9*npx*pz*sj6))+(((0.04)*gclwh5_9*pz))+(((-0.0026698355700804)*gclwh11_2*r21*sj6))+(((1.49716)*cj6*gclwh5_9*rxp0_2))+(((-0.0001425595752)*gclwh7_2*r20*sj6))+(((2.0)*gclwh9_9*pp*r20*sj6))+(((0.2803860082)*gclwh11_9*r21*sj6))+(((0.038088)*gclwh9_2*npx*pz*sj6))+(((0.038088)*cj6*gclwh9_2*npy*pz))+(((-1.45768)*gclwh11_1*npy*pz*sj6))+(((-0.102178269108244)*cj6*gclwh11_1*r20))+(((1.49716)*cj6*gclwh15_9*rxp1_2))+(((-0.01425595752)*gclwh15_2*rxp0_2*sj6))+(((0.038088)*gclwh11_2*npy*pz*sj6))+(((0.102178269108244)*gclwh11_1*r21*sj6))+(((0.01425595752)*gclwh5_2*rxp1_2*sj6))+(((0.04)*cj6*gclwh13_9*rxp1_2))+(((0.72884)*cj6*gclwh9_1*pp*r21))+(((-0.019044)*gclwh9_2*pp*r20*sj6)));
op[31]=((((-1.0)*x460))+(((-1.0)*x457))+x459+x456);
op[32]=0;
op[33]=((((-1.0)*cj6*x280*x305))+((gclwh15_7*x335))+(((-1.0)*x285*x298))+(((-1.0)*x271*x277))+((gclwh11_7*x278*x284))+(((-1.0)*x269*x300))+(((-1.0)*gclwh5_7*x327))+((gclwh9_7*x297))+(((-1.0)*gclwh11_7*x363))+(((-1.0)*gclwh11_7*x279*x287))+(((-1.0)*x269*x277))+(((-1.0)*x281*x282))+(((-1.0)*gclwh13_7*x302))+(((-1.0)*x275*x306))+((gclwh9_7*x280*x336))+(((-1.0)*x282*x285))+(((-1.0)*x315*x330))+(((0.552)*gclwh7_7*x307))+((x306*x319))+((sj6*x301*x305))+((gclwh9_7*x301*x310))+(((-0.0386380691316)*x330))+(((-1.0)*gclwh9_7*x281*x315))+(((-1.0)*gclwh9_7*x278*x279))+(((-1.0)*x281*x298))+(((-1.0)*x271*x300))+(((0.0386932691316)*gclwh11_7*x288)));
op[34]=((((-4.0)*gclwh11_9*npy*pz*sj6))+(((-0.01425595752)*gclwh5_2*rxp1_2*sj6))+(((2.0)*cj6*gclwh9_9*pp*r21))+(((0.5455950472)*gclwh13_1*rxp2_2))+(((0.0149716)*cj6*gclwh7_9*r21))+(((-0.0149716)*gclwh9_9*r22))+(((0.00038088)*cj6*gclwh13_2*rxp1_2))+(((0.0149716)*gclwh7_9*r20*sj6))+(((-0.038088)*gclwh7_2*npz*pz))+(((-0.005455950472)*gclwh9_1*r22))+(((0.0145768)*gclwh5_1*pz))+(((-0.72884)*cj6*gclwh11_1*pp*r20))+(((0.5455950472)*gclwh15_1*rxp0_2*sj6))+(((-4.0)*gclwh7_9*npz*pz))+(((-1.45768)*gclwh7_1*npz*pz))+(((0.72884)*gclwh7_1*pp*r22))+(((-4.0)*cj6*gclwh9_9*npy*pz))+(((-0.038088)*gclwh11_2*npy*pz*sj6))+(((0.005455950472)*cj6*gclwh7_1*r21))+(((-1.45768)*gclwh9_1*npx*pz*sj6))+(((-0.2803860082)*cj6*gclwh11_9*r20))+(((0.2799860082)*gclwh9_9*r20*sj6))+(((2.0)*gclwh11_9*pp*r21*sj6))+(((0.01425595752)*gclwh15_2*rxp0_2*sj6))+(((4.0)*cj6*gclwh11_9*npx*pz))+(((-1.49716)*gclwh5_9*rxp1_2*sj6))+(((0.00038088)*gclwh13_2*rxp0_2*sj6))+(((-2.0)*cj6*gclwh11_9*pp*r20))+(((0.0026698355700804)*gclwh11_2*r21*sj6))+(((1.49716)*gclwh13_9*rxp2_2))+(((0.72884)*gclwh9_1*pp*r20*sj6))+(((0.5455950472)*cj6*gclwh15_1*rxp1_2))+(((-0.5455950472)*gclwh5_1*rxp1_2*sj6))+(((0.2799860082)*gclwh7_9*r22))+(((-0.038088)*gclwh9_2*npx*pz*sj6))+(((0.0145768)*cj6*gclwh13_1*rxp1_2))+(((0.0001425595752)*gclwh7_2*r20*sj6))+(((0.0026660267700804)*gclwh7_2*r22))+(((0.0001425595752)*cj6*gclwh7_2*r21))+(((-0.0145768)*gclwh15_1*rxp2_2))+(((0.2799860082)*cj6*gclwh9_9*r21))+(((0.102032501108244)*cj6*gclwh9_1*r21))+(((-0.04)*gclwh15_9*rxp2_2))+(((0.019044)*cj6*gclwh9_2*pp*r21))+(((-0.038088)*cj6*gclwh9_2*npy*pz))+(((-0.0001425595752)*gclwh9_2*r22))+(((0.72884)*gclwh11_1*pp*r21*sj6))+(((2.0)*gclwh7_9*pp*r22))+(((0.5455950472)*cj6*gclwh5_1*rxp0_2))+(((0.019044)*gclwh11_2*pp*r21*sj6))+(((0.04)*gclwh13_9*rxp0_2*sj6))+(((0.102032501108244)*gclwh9_1*r20*sj6))+(((0.0145768)*gclwh13_1*rxp0_2*sj6))+(((0.019044)*gclwh9_2*pp*r20*sj6))+(((0.102032501108244)*gclwh7_1*r22))+(((1.49716)*gclwh15_9*rxp0_2*sj6))+(((0.0026660267700804)*cj6*gclwh9_2*r21))+(((1.45768)*cj6*gclwh11_1*npx*pz))+(((0.005455950472)*gclwh7_1*r20*sj6))+(((-1.45768)*cj6*gclwh9_1*npy*pz))+(((-4.0)*gclwh9_9*npx*pz*sj6))+(((0.04)*gclwh5_9*pz))+(((1.49716)*cj6*gclwh5_9*rxp0_2))+(((-0.00038088)*gclwh15_2*rxp2_2))+(((-0.019044)*cj6*gclwh11_2*pp*r20))+(((0.019044)*gclwh7_2*pp*r22))+(((2.0)*gclwh9_9*pp*r20*sj6))+(((0.2803860082)*gclwh11_9*r21*sj6))+(((0.00038088)*gclwh5_2*pz))+(((-1.45768)*gclwh11_1*npy*pz*sj6))+(((-0.102178269108244)*cj6*gclwh11_1*r20))+(((0.01425595752)*cj6*gclwh15_2*rxp1_2))+(((1.49716)*cj6*gclwh15_9*rxp1_2))+(((0.102178269108244)*gclwh11_1*r21*sj6))+(((0.0026660267700804)*gclwh9_2*r20*sj6))+(((0.04)*cj6*gclwh13_9*rxp1_2))+(((0.72884)*cj6*gclwh9_1*pp*r21))+(((0.038088)*cj6*gclwh11_2*npx*pz))+(((0.01425595752)*cj6*gclwh5_2*rxp0_2))+(((-0.0026698355700804)*cj6*gclwh11_2*r20))+(((0.01425595752)*gclwh13_2*rxp2_2)));
op[35]=((((-1.0)*x457))+(((-1.0)*x456))+x459+x460);
op[36]=((-0.10057992)+((x285*x341))+(((-1.0)*x271*x332))+(((-1.0)*x271*x339))+(((-1.0)*x271*x333))+((gclwh4_10*x421))+(((-0.276)*gclwh12_12*x307))+(((-1.0)*gclwh10_10*x364))+((x285*x309))+(((-1.0)*gclwh6_12*x331))+((gclwh8_10*x329))+(((-1.0)*x271*x272))+((gclwh12_12*x313))+((x281*x326))+(((-1.0)*gclwh14_10*x278*x301))+((gclwh12_10*x313))+((x285*x334))+(((-1.0)*gclwh14_12*x280*x287))+(((0.10330404)*gclwh10_12*x275))+((gclwh14_12*x273*x285))+((gclwh14_12*x273*x281))+(((-0.276)*gclwh12_10*x307))+(((-1.0)*gclwh4_10*x273*x283))+(((-1.0)*x269*x272))+(((-1.0)*x269*x332))+(((-1.0)*x269*x333))+(((-1.0)*x269*x339))+((x281*x309))+((gclwh12_12*r22*x273))+((gclwh10_10*x320))+(((-1.0)*gclwh6_10*x331))+(((-1.0)*x283*x299))+(((-1.0)*x283*x295))+(((-1.0)*gclwh10_12*x364))+((gclwh14_10*x273*x285))+((gclwh14_10*x273*x281))+((gclwh4_12*x273*x288))+(((-1.0)*gclwh14_10*x296))+((x285*x326))+((x281*x334))+((gclwh8_12*x329))+(((-1.0)*gclwh14_10*x280*x287))+((gclwh4_10*x273*x288))+((gclwh10_12*x320))+((x281*x341))+(((-1.0)*gclwh14_12*x296))+(((0.10330404)*gclwh10_10*x275))+(((-1.0)*gclwh4_10*x278*x280))+(((-1.0)*gclwh4_12*x273*x283))+((gclwh4_12*x421))+((gclwh12_10*r22*x273))+((x288*x295))+((x288*x299))+(((-1.0)*gclwh14_12*x278*x301))+(((-1.0)*gclwh4_12*x278*x280)));
op[37]=((0.2465598728)+(((0.72884)*gclwh12_5*pp*r22))+(((0.0149716)*gclwh12_8*r20*sj6))+(((-4.0)*gclwh14_8*npx*pz*sj6))+(((0.102178269108244)*cj6*gclwh4_5*r20))+(((-1.45768)*gclwh12_5*npz*pz))+(((0.01425595752)*gclwh10_6*rxp1_2*sj6))+(((0.2799860082)*cj6*gclwh14_8*r21))+(((0.102032501108244)*gclwh12_5*r22))+(((0.0145768)*gclwh8_5*rxp2_2))+(((1.45768)*gclwh1_5*npx*pz*sj6))+(((-0.5455950472)*gclwh6_5*rxp2_2))+(((-0.038088)*cj6*gclwh1_6*npy*pz))+(((4.0)*gclwh4_8*npy*pz*sj6))+(((2.0)*cj6*gclwh14_8*pp*r21))+(((2.0)*cj6*gclwh4_8*pp*r20))+(((0.0001425595752)*gclwh1_6*r22))+(((0.038088)*gclwh14_6*npx*pz*sj6))+(((-0.019044)*cj6*gclwh4_6*pp*r20))+(((0.019044)*cj6*gclwh1_6*pp*r21))+(((0.2799860082)*gclwh14_8*r20*sj6))+(((-0.0145768)*gclwh6_5*rxp0_2*sj6))+(((-1.49716)*cj6*gclwh8_8*rxp1_2))+(((-0.04)*cj6*gclwh6_8*rxp1_2))+(((1.45768)*cj6*gclwh1_5*npy*pz))+(((-0.72884)*gclwh4_5*pp*r21*sj6))+(((-0.5455950472)*gclwh10_5*rxp1_2*sj6))+(((-1.49716)*gclwh10_8*rxp1_2*sj6))+(((0.0001425595752)*gclwh14_6*r22))+(((-0.00038088)*gclwh10_6*pz))+(((0.72884)*cj6*gclwh4_5*pp*r20))+(((-0.72884)*gclwh1_5*pp*r20*sj6))+(((-2.0)*gclwh4_8*pp*r21*sj6))+(((-4.0)*cj6*gclwh14_8*npy*pz))+(((-0.0145768)*cj6*gclwh6_5*rxp1_2))+(((-0.0149716)*gclwh14_8*r22))+(((-0.0026660267700804)*gclwh14_6*r20*sj6))+(((-1.45768)*cj6*gclwh4_5*npx*pz))+(((-0.01425595752)*cj6*gclwh10_6*rxp0_2))+(((0.038088)*gclwh12_6*npz*pz))+(((0.019044)*gclwh4_6*pp*r21*sj6))+(((0.0026660267700804)*gclwh3_6*r22))+(((-4.0)*cj6*gclwh4_8*npx*pz))+(((0.0001425595752)*gclwh3_6*r20*sj6))+(((-0.019044)*gclwh14_6*pp*r20*sj6))+(((-0.0026660267700804)*gclwh12_6*r22))+(((-0.019044)*gclwh3_6*pp*r22))+(((0.2799860082)*gclwh12_8*r22))+(((-0.0001425595752)*gclwh12_6*r20*sj6))+(((0.0149716)*cj6*gclwh12_8*r21))+(((-0.5455950472)*cj6*gclwh8_5*rxp1_2))+(((-0.102178269108244)*gclwh4_5*r21*sj6))+(((-0.2803860082)*gclwh4_8*r21*sj6))+(((-0.0001425595752)*cj6*gclwh12_6*r21))+(((0.0145768)*gclwh10_5*pz))+(((0.5455950472)*cj6*gclwh10_5*rxp0_2))+(((-0.005455950472)*cj6*gclwh3_5*r21))+(((0.038088)*gclwh3_6*npz*pz))+(((0.01425595752)*gclwh8_6*rxp0_2*sj6))+(((0.00038088)*cj6*gclwh6_6*rxp1_2))+(((-1.49716)*gclwh6_8*rxp2_2))+(((-0.0026698355700804)*cj6*gclwh4_6*r20))+(((-0.0026660267700804)*cj6*gclwh1_6*r21))+(((0.2803860082)*cj6*gclwh4_8*r20))+(((0.00038088)*gclwh6_6*rxp0_2*sj6))+(((-0.005455950472)*gclwh3_5*r20*sj6))+(((2.0)*gclwh12_8*pp*r22))+(((0.04)*gclwh10_8*pz))+(((-0.00038088)*gclwh8_6*rxp2_2))+(((-0.005455950472)*gclwh1_5*r22))+(((-1.45768)*gclwh14_5*npx*pz*sj6))+(((-0.04)*gclwh6_8*rxp0_2*sj6))+(((-1.45768)*cj6*gclwh14_5*npy*pz))+(((0.01425595752)*cj6*gclwh8_6*rxp1_2))+(((0.005455950472)*cj6*gclwh12_5*r21))+(((2.0)*gclwh14_8*pp*r20*sj6))+(((-0.019044)*gclwh12_6*pp*r22))+(((-4.0)*gclwh12_8*npz*pz))+(((1.49716)*cj6*gclwh10_8*rxp0_2))+(((0.01425595752)*gclwh6_6*rxp2_2))+(((-0.72884)*cj6*gclwh1_5*pp*r21))+(((-0.019044)*cj6*gclwh14_6*pp*r21))+(((0.038088)*cj6*gclwh14_6*npy*pz))+(((0.102032501108244)*gclwh14_5*r20*sj6))+(((0.102032501108244)*cj6*gclwh14_5*r21))+(((0.72884)*gclwh14_5*pp*r20*sj6))+(((-0.005455950472)*gclwh14_5*r22))+(((1.45768)*gclwh4_5*npy*pz*sj6))+(((-1.45768)*gclwh3_5*npz*pz))+(((0.102032501108244)*cj6*gclwh1_5*r21))+(((-0.0026660267700804)*gclwh1_6*r20*sj6))+(((-0.102032501108244)*gclwh3_5*r22))+(((0.0026698355700804)*gclwh4_6*r21*sj6))+(((0.04)*gclwh8_8*rxp2_2))+(((0.72884)*gclwh3_5*pp*r22))+(((0.0001425595752)*cj6*gclwh3_6*r21))+(((0.005455950472)*gclwh12_5*r20*sj6))+(((-1.49716)*gclwh8_8*rxp0_2*sj6))+(((0.038088)*cj6*gclwh4_6*npx*pz))+(((0.102032501108244)*gclwh1_5*r20*sj6))+(((0.019044)*gclwh1_6*pp*r20*sj6))+(((-0.038088)*gclwh1_6*npx*pz*sj6))+(((-0.0026660267700804)*cj6*gclwh14_6*r21))+(((0.72884)*cj6*gclwh14_5*pp*r21))+(((-0.5455950472)*gclwh8_5*rxp0_2*sj6))+(((-0.038088)*gclwh4_6*npy*pz*sj6)));
IkReal x462=((0.276)*sj6);
IkReal x463=(npx*pz);
IkReal x464=(pp*r20);
IkReal x465=((0.0193466345658)*gclwh5_13);
IkReal x466=(r21*sj6);
IkReal x467=((0.00276)*pz);
IkReal x468=((0.138)*cj6);
IkReal x469=(cj6*rxp0_2);
IkReal x470=((0.10330404)*gclwh10_10);
IkReal x471=(pp*r21);
IkReal x472=((0.20660808)*sj6);
IkReal x473=(cj6*r20);
IkReal x474=((0.00552)*pz);
IkReal x475=((0.0193466345658)*gclwh4_12);
IkReal x476=((0.138)*sj6);
IkReal x477=((0.10330404)*gclwh11_11);
IkReal x478=((0.0193466345658)*gclwh4_10);
IkReal x479=((0.00552)*rxp2_2);
IkReal x480=((0.0386380691316)*r22);
IkReal x481=((0.552)*sj6);
IkReal x482=(r20*sj6);
IkReal x483=((0.0193190345658)*gclwh14_12);
IkReal x484=((0.0010330404)*r22);
IkReal x485=((0.0386932691316)*gclwh5_7);
IkReal x486=(cj6*gclwh4_3);
IkReal x487=(cj6*r21);
IkReal x488=((0.0386380691316)*gclwh15_7);
IkReal x489=((0.552)*cj6);
IkReal x490=((0.20660808)*rxp2_2);
IkReal x491=((0.0010330404)*gclwh13_13);
IkReal x492=(cj6*rxp1_2);
IkReal x493=((0.10330404)*gclwh9_11);
IkReal x494=(rxp1_2*sj6);
IkReal x495=(npy*pz);
IkReal x496=((0.0020660808)*gclwh12_3);
IkReal x497=((0.10330404)*rxp2_2);
IkReal x498=((0.0010330404)*gclwh12_10);
IkReal x499=(rxp0_2*sj6);
IkReal x500=((0.00276)*gclwh7_13);
IkReal x501=((0.0193466345658)*gclwh5_11);
IkReal x502=((0.276)*cj6);
IkReal x503=((0.138)*pp);
IkReal x504=((0.0193190345658)*r22);
IkReal x505=((0.0020660808)*gclwh13_7);
IkReal x506=((0.0386380691316)*gclwh14_3);
IkReal x507=((0.0010330404)*gclwh13_11);
IkReal x508=((0.00276)*rxp2_2);
IkReal x509=((0.00276)*gclwh7_11);
IkReal x510=((0.10330404)*gclwh8_12);
IkReal x511=((0.0386932691316)*gclwh4_3);
IkReal x512=((0.0020660808)*r22);
IkReal x513=((0.0010330404)*gclwh12_12);
IkReal x514=((0.00552)*gclwh6_3);
IkReal x515=((0.00552)*gclwh7_7);
IkReal x516=((0.10330404)*gclwh8_10);
IkReal x517=((0.10330404)*gclwh9_13);
IkReal x518=((0.0193190345658)*gclwh15_11);
IkReal x519=((0.10330404)*gclwh10_12);
IkReal x520=((0.00276)*gclwh6_10);
IkReal x521=((0.00276)*gclwh6_12);
IkReal x522=((0.0193190345658)*gclwh15_13);
IkReal x523=((0.10330404)*gclwh11_13);
IkReal x524=((0.0193190345658)*gclwh14_10);
IkReal x525=(gclwh13_13*x504);
IkReal x526=(gclwh9_11*x508);
IkReal x527=(gclwh11_11*x467);
IkReal x528=(gclwh9_13*x508);
IkReal x529=(gclwh11_13*x467);
IkReal x530=(gclwh13_11*x504);
IkReal x531=(gclwh15_13*x484);
IkReal x532=(gclwh7_11*x497);
IkReal x533=(gclwh7_13*x497);
IkReal x534=(gclwh15_11*x484);
IkReal x535=((0.276)*npz*pz);
IkReal x536=(r22*x503);
IkReal x537=((0.552)*npz*pz);
IkReal x538=((0.276)*pp*r22);
IkReal x539=(x487*x507);
IkReal x540=(x482*x507);
IkReal x541=(x487*x522);
IkReal x542=(gclwh13_11*x536);
IkReal x543=(x487*x491);
IkReal x544=(x469*x477);
IkReal x545=(x482*x491);
IkReal x546=(x473*x501);
IkReal x547=(x482*x522);
IkReal x548=(x469*x523);
IkReal x549=(x465*x473);
IkReal x550=(x482*x518);
IkReal x551=(gclwh13_13*x536);
IkReal x552=(x487*x518);
IkReal x553=(x492*x509);
IkReal x554=(x499*x509);
IkReal x555=(x494*x523);
IkReal x556=(gclwh13_13*x535);
IkReal x557=(x477*x494);
IkReal x558=(x492*x493);
IkReal x559=(x492*x517);
IkReal x560=(x492*x500);
IkReal x561=(x465*x466);
IkReal x562=(x466*x501);
IkReal x563=(x499*x500);
IkReal x564=(x493*x499);
IkReal x565=(x499*x517);
IkReal x566=(gclwh13_11*x535);
IkReal x567=(gclwh15_13*x464*x476);
IkReal x568=(gclwh15_11*x464*x476);
IkReal x569=(gclwh5_11*x462*x495);
IkReal x570=(gclwh5_11*x464*x468);
IkReal x571=(gclwh15_13*x468*x471);
IkReal x572=(gclwh5_13*x462*x495);
IkReal x573=(gclwh5_13*x464*x468);
IkReal x574=(gclwh15_11*x468*x471);
IkReal x575=(gclwh5_13*x463*x502);
IkReal x576=(gclwh5_11*x466*x503);
IkReal x577=(gclwh15_11*x495*x502);
IkReal x578=(gclwh5_13*x466*x503);
IkReal x579=(gclwh15_13*x495*x502);
IkReal x580=(gclwh15_13*x462*x463);
IkReal x581=(gclwh15_11*x462*x463);
IkReal x582=(gclwh5_11*x463*x502);
IkReal x583=(x558+x553+x557+x554+x532+x534+x577+x576+x566+x564+x562+x581+x582);
IkReal x584=(x559+x556+x555+x531+x533+x579+x578+x575+x565+x563+x560+x561+x580);
IkReal x585=(x552+x550+x544+x546+x540+x542+x530+x539+x526+x527+x574+x570+x568+x569);
IkReal x586=((0.10057992)+x551+x545+x547+x541+x543+x548+x549+x525+x528+x529+x571+x573+x572+x567);
op[38]=((((-1.0)*x482*x496))+(((0.552)*x463*x486))+(((-1.0)*gclwh10_3*x474))+(((-0.276)*x464*x486))+(((-1.0)*gclwh8_3*x479))+(((-1.0)*gclwh14_3*x462*x464))+((gclwh6_3*x490))+((gclwh10_3*rxp1_2*x472))+(((-0.20660808)*gclwh10_3*x469))+(((-1.0)*x482*x506))+(((-1.0)*gclwh14_3*x471*x502))+(((-1.0)*gclwh12_3*x480))+((x492*x514))+((x466*x511))+((x499*x514))+((gclwh14_3*x463*x481))+((gclwh14_3*x512))+(((-1.0)*x487*x506))+(((-1.0)*x487*x496))+((gclwh8_3*rxp0_2*x472))+((gclwh4_3*x462*x471))+(((0.20660808)*gclwh8_3*x492))+(((-1.0)*gclwh4_3*x481*x495))+((gclwh12_3*x537))+(((-1.0)*x473*x511))+(((-1.0)*gclwh12_3*x538))+((gclwh14_3*x489*x495)));
op[39]=0;
op[40]=((-0.10057992)+(((-1.0)*gclwh4_10*x464*x468))+(((-1.0)*x482*x498))+((x492*x520))+((gclwh14_10*x495*x502))+(((-1.0)*x482*x524))+(((-1.0)*gclwh14_10*x464*x476))+(((-1.0)*gclwh14_12*x462*x463))+((x487*x513))+(((-1.0)*x487*x524))+((gclwh14_10*x462*x463))+(((-1.0)*gclwh12_12*x535))+((x473*x475))+(((-1.0)*gclwh4_12*x466*x503))+((x492*x516))+(((-1.0)*gclwh12_10*x536))+((gclwh12_12*x504))+((x483*x487))+((gclwh4_10*x466*x503))+((x470*x494))+((gclwh6_10*x497))+(((-1.0)*gclwh14_12*x484))+(((-1.0)*x492*x510))+((x499*x516))+(((-1.0)*x469*x470))+((x466*x478))+(((-1.0)*gclwh8_10*x508))+(((-1.0)*x473*x478))+(((-1.0)*x492*x521))+(((-1.0)*x487*x498))+(((-1.0)*x499*x510))+(((-1.0)*gclwh14_12*x495*x502))+((gclwh4_12*x462*x495))+(((-1.0)*x499*x521))+(((-1.0)*gclwh14_10*x468*x471))+((gclwh4_12*x464*x468))+((x499*x520))+(((-1.0)*gclwh4_10*x462*x495))+(((-1.0)*gclwh10_10*x467))+((x482*x483))+((gclwh4_10*x463*x502))+((gclwh8_12*x508))+(((-1.0)*gclwh12_10*x504))+(((-1.0)*gclwh6_12*x497))+((x469*x519))+((gclwh14_12*x464*x476))+(((-1.0)*x494*x519))+((gclwh14_12*x468*x471))+((gclwh12_12*x536))+(((-1.0)*x466*x475))+(((-1.0)*gclwh4_12*x463*x502))+((gclwh14_10*x484))+((gclwh12_10*x535))+((x482*x513))+((gclwh10_12*x467)));
op[41]=((0.2465598728)+(((0.72884)*gclwh12_5*pp*r22))+(((0.0149716)*gclwh12_8*r20*sj6))+(((-4.0)*gclwh14_8*npx*pz*sj6))+(((0.019044)*gclwh12_6*pp*r22))+(((0.102178269108244)*cj6*gclwh4_5*r20))+(((-1.45768)*gclwh12_5*npz*pz))+(((0.2799860082)*cj6*gclwh14_8*r21))+(((0.102032501108244)*gclwh12_5*r22))+(((0.0145768)*gclwh8_5*rxp2_2))+(((1.45768)*gclwh1_5*npx*pz*sj6))+(((-0.0026660267700804)*gclwh3_6*r22))+(((-0.5455950472)*gclwh6_5*rxp2_2))+(((4.0)*gclwh4_8*npy*pz*sj6))+(((2.0)*cj6*gclwh14_8*pp*r21))+(((2.0)*cj6*gclwh4_8*pp*r20))+(((0.019044)*gclwh3_6*pp*r22))+(((-0.01425595752)*gclwh10_6*rxp1_2*sj6))+(((0.00038088)*gclwh8_6*rxp2_2))+(((0.00038088)*gclwh10_6*pz))+(((-0.0001425595752)*gclwh14_6*r22))+(((0.2799860082)*gclwh14_8*r20*sj6))+(((0.038088)*cj6*gclwh1_6*npy*pz))+(((0.0026660267700804)*gclwh1_6*r20*sj6))+(((-0.0145768)*gclwh6_5*rxp0_2*sj6))+(((-0.019044)*gclwh1_6*pp*r20*sj6))+(((0.019044)*gclwh14_6*pp*r20*sj6))+(((-1.49716)*cj6*gclwh8_8*rxp1_2))+(((-0.04)*cj6*gclwh6_8*rxp1_2))+(((1.45768)*cj6*gclwh1_5*npy*pz))+(((-0.72884)*gclwh4_5*pp*r21*sj6))+(((-0.5455950472)*gclwh10_5*rxp1_2*sj6))+(((-0.01425595752)*gclwh6_6*rxp2_2))+(((-1.49716)*gclwh10_8*rxp1_2*sj6))+(((0.72884)*cj6*gclwh4_5*pp*r20))+(((-0.72884)*gclwh1_5*pp*r20*sj6))+(((0.0026660267700804)*gclwh12_6*r22))+(((-2.0)*gclwh4_8*pp*r21*sj6))+(((0.038088)*gclwh1_6*npx*pz*sj6))+(((-4.0)*cj6*gclwh14_8*npy*pz))+(((-0.0145768)*cj6*gclwh6_5*rxp1_2))+(((-0.0149716)*gclwh14_8*r22))+(((-1.45768)*cj6*gclwh4_5*npx*pz))+(((-4.0)*cj6*gclwh4_8*npx*pz))+(((-0.01425595752)*gclwh8_6*rxp0_2*sj6))+(((0.0001425595752)*cj6*gclwh12_6*r21))+(((-0.0001425595752)*gclwh3_6*r20*sj6))+(((0.2799860082)*gclwh12_8*r22))+(((0.0149716)*cj6*gclwh12_8*r21))+(((-0.5455950472)*cj6*gclwh8_5*rxp1_2))+(((-0.102178269108244)*gclwh4_5*r21*sj6))+(((-0.2803860082)*gclwh4_8*r21*sj6))+(((0.0026660267700804)*cj6*gclwh1_6*r21))+(((0.0145768)*gclwh10_5*pz))+(((-0.019044)*cj6*gclwh1_6*pp*r21))+(((0.5455950472)*cj6*gclwh10_5*rxp0_2))+(((-0.005455950472)*cj6*gclwh3_5*r21))+(((-0.038088)*gclwh14_6*npx*pz*sj6))+(((0.038088)*gclwh4_6*npy*pz*sj6))+(((-1.49716)*gclwh6_8*rxp2_2))+(((-0.01425595752)*cj6*gclwh8_6*rxp1_2))+(((0.2803860082)*cj6*gclwh4_8*r20))+(((-0.0001425595752)*cj6*gclwh3_6*r21))+(((-0.005455950472)*gclwh3_5*r20*sj6))+(((2.0)*gclwh12_8*pp*r22))+(((-0.038088)*gclwh12_6*npz*pz))+(((0.04)*gclwh10_8*pz))+(((0.0026660267700804)*gclwh14_6*r20*sj6))+(((-0.005455950472)*gclwh1_5*r22))+(((-0.038088)*gclwh3_6*npz*pz))+(((-1.45768)*gclwh14_5*npx*pz*sj6))+(((-0.04)*gclwh6_8*rxp0_2*sj6))+(((-1.45768)*cj6*gclwh14_5*npy*pz))+(((0.005455950472)*cj6*gclwh12_5*r21))+(((2.0)*gclwh14_8*pp*r20*sj6))+(((0.0001425595752)*gclwh12_6*r20*sj6))+(((0.0026698355700804)*cj6*gclwh4_6*r20))+(((0.0026660267700804)*cj6*gclwh14_6*r21))+(((-4.0)*gclwh12_8*npz*pz))+(((1.49716)*cj6*gclwh10_8*rxp0_2))+(((-0.038088)*cj6*gclwh14_6*npy*pz))+(((-0.0001425595752)*gclwh1_6*r22))+(((-0.00038088)*gclwh6_6*rxp0_2*sj6))+(((-0.72884)*cj6*gclwh1_5*pp*r21))+(((-0.00038088)*cj6*gclwh6_6*rxp1_2))+(((0.102032501108244)*gclwh14_5*r20*sj6))+(((0.102032501108244)*cj6*gclwh14_5*r21))+(((0.72884)*gclwh14_5*pp*r20*sj6))+(((-0.005455950472)*gclwh14_5*r22))+(((1.45768)*gclwh4_5*npy*pz*sj6))+(((-1.45768)*gclwh3_5*npz*pz))+(((0.102032501108244)*cj6*gclwh1_5*r21))+(((0.019044)*cj6*gclwh14_6*pp*r21))+(((-0.102032501108244)*gclwh3_5*r22))+(((0.04)*gclwh8_8*rxp2_2))+(((0.72884)*gclwh3_5*pp*r22))+(((0.005455950472)*gclwh12_5*r20*sj6))+(((-1.49716)*gclwh8_8*rxp0_2*sj6))+(((-0.019044)*gclwh4_6*pp*r21*sj6))+(((0.019044)*cj6*gclwh4_6*pp*r20))+(((0.01425595752)*cj6*gclwh10_6*rxp0_2))+(((0.102032501108244)*gclwh1_5*r20*sj6))+(((-0.0026698355700804)*gclwh4_6*r21*sj6))+(((-0.038088)*cj6*gclwh4_6*npx*pz))+(((0.72884)*cj6*gclwh14_5*pp*r21))+(((-0.5455950472)*gclwh8_5*rxp0_2*sj6)));
op[42]=((0.2465598728)+(((0.0001425595752)*gclwh15_2*r22))+(((0.0149716)*gclwh13_9*r20*sj6))+(((-4.0)*cj6*gclwh15_9*npy*pz))+(((-0.0145768)*cj6*gclwh7_1*rxp1_2))+(((0.038088)*gclwh15_2*npx*pz*sj6))+(((-0.5455950472)*gclwh9_1*rxp0_2*sj6))+(((0.72884)*gclwh13_1*pp*r22))+(((-1.49716)*gclwh11_9*rxp1_2*sj6))+(((2.0)*gclwh13_9*pp*r22))+(((0.72884)*cj6*gclwh0_1*pp*r21))+(((-0.5455950472)*gclwh7_1*rxp2_2))+(((0.2799860082)*gclwh13_9*r22))+(((0.01425595752)*gclwh11_2*rxp1_2*sj6))+(((0.038088)*cj6*gclwh15_2*npy*pz))+(((-0.019044)*cj6*gclwh15_2*pp*r21))+(((-0.019044)*cj6*gclwh0_2*pp*r21))+(((-0.72884)*gclwh2_1*pp*r22))+(((-1.45768)*gclwh0_1*npx*pz*sj6))+(((-1.49716)*gclwh7_9*rxp2_2))+(((-0.04)*gclwh7_9*rxp0_2*sj6))+(((0.0026698355700804)*gclwh5_2*r21*sj6))+(((-0.0001425595752)*gclwh13_2*r20*sj6))+(((0.102032501108244)*gclwh2_1*r22))+(((-1.45768)*cj6*gclwh0_1*npy*pz))+(((0.2803860082)*cj6*gclwh5_9*r20))+(((2.0)*gclwh15_9*pp*r20*sj6))+(((0.005455950472)*gclwh0_1*r22))+(((-4.0)*cj6*gclwh5_9*npx*pz))+(((0.102032501108244)*gclwh15_1*r20*sj6))+(((-1.45768)*cj6*gclwh5_1*npx*pz))+(((0.038088)*gclwh0_2*npx*pz*sj6))+(((0.72884)*gclwh15_1*pp*r20*sj6))+(((0.038088)*cj6*gclwh5_2*npx*pz))+(((-1.49716)*cj6*gclwh9_9*rxp1_2))+(((2.0)*cj6*gclwh5_9*pp*r20))+(((-0.005455950472)*gclwh15_1*r22))+(((-0.102032501108244)*gclwh0_1*r20*sj6))+(((-4.0)*gclwh15_9*npx*pz*sj6))+(((-1.45768)*gclwh13_1*npz*pz))+(((0.0026660267700804)*gclwh0_2*r20*sj6))+(((0.2799860082)*cj6*gclwh15_9*r21))+(((-0.00038088)*gclwh11_2*pz))+(((0.0149716)*cj6*gclwh13_9*r21))+(((1.45768)*gclwh2_1*npz*pz))+(((-0.0026660267700804)*gclwh15_2*r20*sj6))+(((0.01425595752)*gclwh7_2*rxp2_2))+(((0.04)*gclwh9_9*rxp2_2))+(((-0.0001425595752)*cj6*gclwh2_2*r21))+(((1.45768)*gclwh5_1*npy*pz*sj6))+(((0.038088)*gclwh13_2*npz*pz))+(((-1.45768)*gclwh15_1*npx*pz*sj6))+(((-0.5455950472)*gclwh11_1*rxp1_2*sj6))+(((0.0145768)*gclwh11_1*pz))+(((0.005455950472)*cj6*gclwh13_1*r21))+(((-4.0)*gclwh13_9*npz*pz))+(((-0.0001425595752)*gclwh0_2*r22))+(((-0.0026698355700804)*cj6*gclwh5_2*r20))+(((-0.0149716)*gclwh15_9*r22))+(((0.00038088)*cj6*gclwh7_2*rxp1_2))+(((-2.0)*gclwh5_9*pp*r21*sj6))+(((-0.038088)*gclwh5_2*npy*pz*sj6))+(((-0.0026660267700804)*cj6*gclwh15_2*r21))+(((-0.5455950472)*cj6*gclwh9_1*rxp1_2))+(((-0.019044)*gclwh13_2*pp*r22))+(((0.72884)*cj6*gclwh5_1*pp*r20))+(((0.038088)*cj6*gclwh0_2*npy*pz))+(((-0.102032501108244)*cj6*gclwh0_1*r21))+(((0.04)*gclwh11_9*pz))+(((-0.038088)*gclwh2_2*npz*pz))+(((0.0145768)*gclwh9_1*rxp2_2))+(((-0.00038088)*gclwh9_2*rxp2_2))+(((0.005455950472)*gclwh2_1*r20*sj6))+(((1.49716)*cj6*gclwh11_9*rxp0_2))+(((0.005455950472)*gclwh13_1*r20*sj6))+(((0.019044)*gclwh5_2*pp*r21*sj6))+(((-0.102178269108244)*gclwh5_1*r21*sj6))+(((-0.0001425595752)*gclwh2_2*r20*sj6))+(((0.01425595752)*cj6*gclwh9_2*rxp1_2))+(((4.0)*gclwh5_9*npy*pz*sj6))+(((0.72884)*gclwh0_1*pp*r20*sj6))+(((0.5455950472)*cj6*gclwh11_1*rxp0_2))+(((0.72884)*cj6*gclwh15_1*pp*r21))+(((-0.019044)*cj6*gclwh5_2*pp*r20))+(((-0.2803860082)*gclwh5_9*r21*sj6))+(((-0.72884)*gclwh5_1*pp*r21*sj6))+(((-1.45768)*cj6*gclwh15_1*npy*pz))+(((0.01425595752)*gclwh9_2*rxp0_2*sj6))+(((0.005455950472)*cj6*gclwh2_1*r21))+(((-1.49716)*gclwh9_9*rxp0_2*sj6))+(((0.102178269108244)*cj6*gclwh5_1*r20))+(((0.0026660267700804)*cj6*gclwh0_2*r21))+(((-0.019044)*gclwh0_2*pp*r20*sj6))+(((0.2799860082)*gclwh15_9*r20*sj6))+(((-0.01425595752)*cj6*gclwh11_2*rxp0_2))+(((-0.0145768)*gclwh7_1*rxp0_2*sj6))+(((0.102032501108244)*gclwh13_1*r22))+(((2.0)*cj6*gclwh15_9*pp*r21))+(((0.019044)*gclwh2_2*pp*r22))+(((-0.019044)*gclwh15_2*pp*r20*sj6))+(((-0.0026660267700804)*gclwh2_2*r22))+(((0.102032501108244)*cj6*gclwh15_1*r21))+(((-0.0026660267700804)*gclwh13_2*r22))+(((-0.0001425595752)*cj6*gclwh13_2*r21))+(((-0.04)*cj6*gclwh7_9*rxp1_2))+(((0.00038088)*gclwh7_2*rxp0_2*sj6)));
op[43]=(x583+x586+(((-1.0)*x585))+(((-1.0)*x584)));
op[44]=0;
op[45]=((((-1.0)*gclwh5_7*x464*x502))+(((-0.20660808)*gclwh11_7*x469))+((gclwh7_7*x490))+(((-1.0)*gclwh5_7*x481*x495))+(((0.20660808)*gclwh9_7*x492))+(((-1.0)*x482*x505))+(((-1.0)*gclwh11_7*x474))+((x492*x515))+((gclwh13_7*x537))+((x499*x515))+(((-1.0)*gclwh9_7*x479))+(((-1.0)*gclwh13_7*x538))+((gclwh5_7*x463*x489))+(((-1.0)*x487*x488))+(((-1.0)*gclwh15_7*x471*x502))+((gclwh9_7*rxp0_2*x472))+(((-1.0)*x487*x505))+(((-1.0)*gclwh13_7*x480))+((gclwh15_7*x463*x481))+(((-1.0)*x482*x488))+((x466*x485))+(((-1.0)*gclwh15_7*x462*x464))+((gclwh15_7*x489*x495))+((gclwh11_7*rxp1_2*x472))+((gclwh5_7*x462*x471))+((gclwh15_7*x512))+(((-1.0)*x473*x485)));
op[46]=((0.2465598728)+(((0.0149716)*gclwh13_9*r20*sj6))+(((-4.0)*cj6*gclwh15_9*npy*pz))+(((-0.0145768)*cj6*gclwh7_1*rxp1_2))+(((-0.5455950472)*gclwh9_1*rxp0_2*sj6))+(((0.72884)*gclwh13_1*pp*r22))+(((-1.49716)*gclwh11_9*rxp1_2*sj6))+(((0.00038088)*gclwh11_2*pz))+(((2.0)*gclwh13_9*pp*r22))+(((0.72884)*cj6*gclwh0_1*pp*r21))+(((-0.00038088)*cj6*gclwh7_2*rxp1_2))+(((0.00038088)*gclwh9_2*rxp2_2))+(((-0.5455950472)*gclwh7_1*rxp2_2))+(((0.2799860082)*gclwh13_9*r22))+(((0.038088)*gclwh5_2*npy*pz*sj6))+(((0.0001425595752)*gclwh13_2*r20*sj6))+(((0.0026660267700804)*gclwh13_2*r22))+(((-0.72884)*gclwh2_1*pp*r22))+(((-1.45768)*gclwh0_1*npx*pz*sj6))+(((-1.49716)*gclwh7_9*rxp2_2))+(((-0.04)*gclwh7_9*rxp0_2*sj6))+(((0.102032501108244)*gclwh2_1*r22))+(((-1.45768)*cj6*gclwh0_1*npy*pz))+(((0.2803860082)*cj6*gclwh5_9*r20))+(((2.0)*gclwh15_9*pp*r20*sj6))+(((0.0026660267700804)*gclwh15_2*r20*sj6))+(((-0.0026660267700804)*cj6*gclwh0_2*r21))+(((0.005455950472)*gclwh0_1*r22))+(((-4.0)*cj6*gclwh5_9*npx*pz))+(((0.0026660267700804)*gclwh2_2*r22))+(((-0.038088)*cj6*gclwh15_2*npy*pz))+(((0.102032501108244)*gclwh15_1*r20*sj6))+(((-1.45768)*cj6*gclwh5_1*npx*pz))+(((-0.019044)*gclwh5_2*pp*r21*sj6))+(((0.72884)*gclwh15_1*pp*r20*sj6))+(((0.019044)*cj6*gclwh15_2*pp*r21))+(((-1.49716)*cj6*gclwh9_9*rxp1_2))+(((2.0)*cj6*gclwh5_9*pp*r20))+(((-0.005455950472)*gclwh15_1*r22))+(((-0.102032501108244)*gclwh0_1*r20*sj6))+(((-4.0)*gclwh15_9*npx*pz*sj6))+(((-1.45768)*gclwh13_1*npz*pz))+(((0.2799860082)*cj6*gclwh15_9*r21))+(((0.0026660267700804)*cj6*gclwh15_2*r21))+(((0.0149716)*cj6*gclwh13_9*r21))+(((1.45768)*gclwh2_1*npz*pz))+(((0.019044)*cj6*gclwh0_2*pp*r21))+(((0.04)*gclwh9_9*rxp2_2))+(((0.038088)*gclwh2_2*npz*pz))+(((1.45768)*gclwh5_1*npy*pz*sj6))+(((-1.45768)*gclwh15_1*npx*pz*sj6))+(((-0.5455950472)*gclwh11_1*rxp1_2*sj6))+(((0.0145768)*gclwh11_1*pz))+(((0.005455950472)*cj6*gclwh13_1*r21))+(((-4.0)*gclwh13_9*npz*pz))+(((-0.0149716)*gclwh15_9*r22))+(((0.019044)*cj6*gclwh5_2*pp*r20))+(((-2.0)*gclwh5_9*pp*r21*sj6))+(((-0.0026660267700804)*gclwh0_2*r20*sj6))+(((-0.0026698355700804)*gclwh5_2*r21*sj6))+(((-0.5455950472)*cj6*gclwh9_1*rxp1_2))+(((0.0001425595752)*cj6*gclwh13_2*r21))+(((0.72884)*cj6*gclwh5_1*pp*r20))+(((-0.102032501108244)*cj6*gclwh0_1*r21))+(((0.04)*gclwh11_9*pz))+(((0.0145768)*gclwh9_1*rxp2_2))+(((-0.01425595752)*gclwh11_2*rxp1_2*sj6))+(((0.005455950472)*gclwh2_1*r20*sj6))+(((-0.038088)*cj6*gclwh0_2*npy*pz))+(((1.49716)*cj6*gclwh11_9*rxp0_2))+(((0.005455950472)*gclwh13_1*r20*sj6))+(((-0.102178269108244)*gclwh5_1*r21*sj6))+(((0.0026698355700804)*cj6*gclwh5_2*r20))+(((-0.038088)*gclwh0_2*npx*pz*sj6))+(((-0.01425595752)*gclwh7_2*rxp2_2))+(((4.0)*gclwh5_9*npy*pz*sj6))+(((-0.038088)*gclwh13_2*npz*pz))+(((0.72884)*gclwh0_1*pp*r20*sj6))+(((0.5455950472)*cj6*gclwh11_1*rxp0_2))+(((-0.01425595752)*gclwh9_2*rxp0_2*sj6))+(((0.72884)*cj6*gclwh15_1*pp*r21))+(((-0.2803860082)*gclwh5_9*r21*sj6))+(((0.019044)*gclwh13_2*pp*r22))+(((-0.72884)*gclwh5_1*pp*r21*sj6))+(((-1.45768)*cj6*gclwh15_1*npy*pz))+(((-0.019044)*gclwh2_2*pp*r22))+(((0.005455950472)*cj6*gclwh2_1*r21))+(((-0.038088)*gclwh15_2*npx*pz*sj6))+(((-1.49716)*gclwh9_9*rxp0_2*sj6))+(((-0.0001425595752)*gclwh15_2*r22))+(((0.102178269108244)*cj6*gclwh5_1*r20))+(((0.01425595752)*cj6*gclwh11_2*rxp0_2))+(((-0.01425595752)*cj6*gclwh9_2*rxp1_2))+(((0.2799860082)*gclwh15_9*r20*sj6))+(((-0.0145768)*gclwh7_1*rxp0_2*sj6))+(((0.102032501108244)*gclwh13_1*r22))+(((2.0)*cj6*gclwh15_9*pp*r21))+(((-0.00038088)*gclwh7_2*rxp0_2*sj6))+(((0.019044)*gclwh15_2*pp*r20*sj6))+(((0.0001425595752)*gclwh0_2*r22))+(((0.0001425595752)*gclwh2_2*r20*sj6))+(((0.102032501108244)*cj6*gclwh15_1*r21))+(((0.0001425595752)*cj6*gclwh2_2*r21))+(((0.019044)*gclwh0_2*pp*r20*sj6))+(((-0.04)*cj6*gclwh7_9*rxp1_2))+(((-0.038088)*cj6*gclwh5_2*npx*pz)));
op[47]=(x585+x586+(((-1.0)*x584))+(((-1.0)*x583)));
op[48]=((((-0.0096595172829)*gclwh6_10*r22))+(((0.138)*cj6*gclwh8_10*npy*pz))+(((-0.05165202)*cj6*gclwh14_10*rxp1_2))+(((-0.74858)*gclwh4_8*rxp1_2*sj6))+(((0.041356733271222)*gclwh6_12*r22))+(((-2.0)*gclwh6_8*npz*pz))+(((-2.0)*gclwh8_8*npx*pz*sj6))+(((0.041356733271222)*cj6*gclwh8_12*r21))+(((-0.0074858)*gclwh8_8*r22))+(((0.0059084)*gclwh4_12*pz))+(((0.74858)*gclwh14_8*rxp0_2*sj6))+(((-0.002211455036)*gclwh8_12*r22))+(((0.2211455036)*cj6*gclwh14_12*rxp1_2))+(((0.1399930041)*gclwh6_8*r22))+(((0.069)*cj6*gclwh10_10*pp*r20))+(((0.29542)*gclwh8_12*pp*r20*sj6))+((gclwh8_8*pp*r20*sj6))+(((0.29542)*gclwh6_12*pp*r22))+(((-0.0096595172829)*cj6*gclwh8_10*r21))+((cj6*gclwh8_8*pp*r21))+(((-0.041415817271222)*cj6*gclwh10_12*r20))+((gclwh10_8*pp*r21*sj6))+(((0.1401930041)*gclwh10_8*r21*sj6))+(((-0.0096733172829)*gclwh10_10*r21*sj6))+(((-0.069)*gclwh8_10*pp*r20*sj6))+(((-2.0)*gclwh10_8*npy*pz*sj6))+(((0.74858)*cj6*gclwh14_8*rxp1_2))+(((0.138)*gclwh10_10*npy*pz*sj6))+(((0.1399930041)*cj6*gclwh8_8*r21))+(((0.02)*gclwh4_8*pz))+(((-0.0005165202)*gclwh6_10*r20*sj6))+(((-0.59084)*cj6*gclwh8_12*npy*pz))+(((0.0074858)*cj6*gclwh6_8*r21))+(((-0.00138)*gclwh4_10*pz))+(((-0.05165202)*gclwh12_10*rxp2_2))+(((-0.069)*gclwh6_10*pp*r22))+(((-0.2211455036)*gclwh4_12*rxp1_2*sj6))+(((0.138)*gclwh6_10*npz*pz))+(((0.0096733172829)*cj6*gclwh10_10*r20))+(((0.002211455036)*cj6*gclwh6_12*r21))+(((-0.138)*cj6*gclwh10_10*npx*pz))+(((-0.59084)*gclwh10_12*npy*pz*sj6))+(((-0.0096595172829)*gclwh8_10*r20*sj6))+(((0.0074858)*gclwh6_8*r20*sj6))+(((0.59084)*cj6*gclwh10_12*npx*pz))+((gclwh6_8*pp*r22))+(((0.2211455036)*cj6*gclwh4_12*rxp0_2))+(((-0.59084)*gclwh8_12*npx*pz*sj6))+(((-0.00138)*gclwh12_10*rxp0_2*sj6))+(((0.0005165202)*gclwh8_10*r22))+(((-0.1401930041)*cj6*gclwh10_8*r20))+(((0.041356733271222)*gclwh8_12*r20*sj6))+(((0.2211455036)*gclwh14_12*rxp0_2*sj6))+(((0.138)*gclwh8_10*npx*pz*sj6))+(((-0.0005165202)*cj6*gclwh6_10*r21))+(((0.0059084)*cj6*gclwh12_12*rxp1_2))+(((0.02)*cj6*gclwh12_8*rxp1_2))+(((-0.05165202)*cj6*gclwh4_10*rxp0_2))+(((-0.59084)*gclwh6_12*npz*pz))+(((-0.29542)*cj6*gclwh10_12*pp*r20))+(((0.74858)*cj6*gclwh4_8*rxp0_2))+(((-0.00138)*cj6*gclwh12_10*rxp1_2))+(((-2.0)*cj6*gclwh8_8*npy*pz))+(((0.1399930041)*gclwh8_8*r20*sj6))+(((-0.069)*gclwh10_10*pp*r21*sj6))+(((2.0)*cj6*gclwh10_8*npx*pz))+(((0.74858)*gclwh12_8*rxp2_2))+(((0.002211455036)*gclwh6_12*r20*sj6))+(((0.02)*gclwh12_8*rxp0_2*sj6))+(((0.29542)*gclwh10_12*pp*r21*sj6))+(((-0.069)*cj6*gclwh8_10*pp*r21))+(((0.0059084)*gclwh12_12*rxp0_2*sj6))+(((0.05165202)*gclwh4_10*rxp1_2*sj6))+(((-0.05165202)*gclwh14_10*rxp0_2*sj6))+(((0.2211455036)*gclwh12_12*rxp2_2))+(((0.29542)*cj6*gclwh8_12*pp*r21))+(((-1.0)*cj6*gclwh10_8*pp*r20))+(((-0.0059084)*gclwh14_12*rxp2_2))+(((-0.02)*gclwh14_8*rxp2_2))+(((0.041415817271222)*gclwh10_12*r21*sj6))+(((0.00138)*gclwh14_10*rxp2_2)));
op[49]=((((-0.07887)*gclwh6_10*pp*r22))+(((0.74858)*gclwh4_6*pp*rxp1_2*sj6))+(((2.0)*gclwh8_6*npx*pp*pz*sj6))+(((-0.1881520318)*cj6*gclwh8_6*pp*r21))+(((0.138)*gclwh6_5*npz*pz))+(((0.15774)*gclwh10_10*npy*pz*sj6))+(((-0.000590405046)*cj6*gclwh6_10*r21))+(((0.74858)*gclwh12_5*pz*rxp2_2))+(((-0.0590405046)*gclwh14_10*rxp0_2*sj6))+(((-0.000963180554)*gclwh12_6*rxp0_2*sj6))+(((-0.000963180554)*gclwh4_6*pz))+(((0.02)*cj6*gclwh6_14*npz*pz*r20))+(((-0.0074858)*gclwh6_6*pp*r20*sj6))+(((0.036050884955666)*gclwh4_6*rxp1_2*sj6))+(((2.0)*cj6*gclwh10_5*npx*(pz*pz)))+(((-0.74858)*gclwh14_6*pp*rxp0_2*sj6))+(((-0.00138)*cj6*gclwh12_5*rxp1_2))+(((-0.0590405046)*gclwh12_10*rxp2_2))+(((-0.000963180554)*cj6*gclwh12_6*rxp1_2))+(((0.00036050884955666)*gclwh8_6*r22))+(((7.4858e-5)*gclwh6_14*r20*r21*(sj6*sj6)))+(((-0.07887)*gclwh8_10*pp*r20*sj6))+(((0.02)*gclwh14_6*pp*rxp2_2))+((cj6*gclwh10_6*r20*(pp*pp)))+(((0.0002)*cj6*gclwh12_14*r21*rxp1_2*sj6))+(((-0.05165202)*gclwh12_5*rxp2_2))+(((-2.0)*gclwh6_5*npz*(pz*pz)))+(((-0.0074858)*gclwh4_14*r20*rxp0_2*(cj6*cj6)))+(((-0.0074858)*gclwh8_5*pz*r22))+(((-0.001399930041)*cj6*gclwh6_14*r20*r22))+(((-0.15774)*cj6*gclwh10_10*npx*pz))+(((0.02)*gclwh4_5*(pz*pz)))+(((-0.00675155876779811)*gclwh10_6*r21*sj6))+(((-0.02)*gclwh4_6*pp*pz))+((gclwh8_5*pp*pz*r20*sj6))+(((-0.02)*gclwh6_14*npz*pz*r21*sj6))+(((-0.00674192696225811)*cj6*gclwh8_6*r21))+(((0.74858)*cj6*gclwh4_5*pz*rxp0_2))+(((-0.02)*gclwh8_14*npx*pz*r21*(sj6*sj6)))+(((0.0074858)*cj6*gclwh14_14*r21*rxp1_2*sj6))+(((0.001399930041)*cj6*gclwh8_14*sj6*(r21*r21)))+(((-0.74858)*gclwh4_5*pz*rxp1_2*sj6))+(((0.0074858)*gclwh8_6*pp*r22))+((gclwh6_5*pp*pz*r22))+(((0.0074858)*cj6*gclwh4_14*r21*rxp0_2*sj6))+((cj6*gclwh8_5*pp*pz*r21))+(((-0.00036050884955666)*gclwh6_6*r20*sj6))+(((0.138)*cj6*gclwh8_5*npy*pz))+(((-0.138)*cj6*gclwh10_5*npx*pz))+(((-0.0096595172829)*gclwh6_5*r22))+(((-0.0005165202)*gclwh6_5*r20*sj6))+(((-0.0096595172829)*cj6*gclwh8_5*r21))+(((0.000963180554)*gclwh14_6*rxp2_2))+(((0.01)*gclwh10_14*pp*(cj6*cj6)*(r20*r20)))+(((-0.0002)*gclwh12_14*r20*rxp1_2*(cj6*cj6)))+(((0.011057022233367)*cj6*gclwh10_10*r20))+(((0.01)*gclwh6_14*pp*r21*r22*sj6))+(((0.00675155876779811)*cj6*gclwh10_6*r20))+(((-2.0)*gclwh8_5*npx*sj6*(pz*pz)))+(((-0.01)*gclwh8_14*pp*r20*r21*(cj6*cj6)))+(((0.01)*gclwh10_14*pp*(r21*r21)*(sj6*sj6)))+(((-0.0002)*gclwh14_14*r21*rxp2_2*sj6))+(((0.0074858)*gclwh14_14*r21*rxp0_2*(sj6*sj6)))+(((-0.011057022233367)*gclwh10_10*r21*sj6))+(((-0.05165202)*cj6*gclwh4_5*rxp0_2))+(((-1.0)*gclwh8_6*r20*sj6*(pp*pp)))+(((0.1399930041)*gclwh6_5*pz*r22))+(((-0.07887)*cj6*gclwh8_10*pp*r21))+(((-0.0002)*cj6*gclwh4_14*pz*r20))+(((-0.02)*gclwh12_6*pp*rxp0_2*sj6))+(((0.01)*gclwh8_14*pp*r20*r21*(sj6*sj6)))+(((-0.07887)*gclwh10_10*pp*r21*sj6))+(((0.0074858)*cj6*gclwh6_5*pz*r21))+(((-0.002803860082)*cj6*gclwh10_14*r20*r21*sj6))+(((-0.0074858)*gclwh4_14*r21*rxp1_2*(sj6*sj6)))+(((0.0002)*cj6*gclwh14_14*r20*rxp2_2))+(((-1.0)*cj6*gclwh10_5*pp*pz*r20))+(((0.0963180554)*gclwh6_6*npz*pz))+(((-0.000590405046)*gclwh6_10*r20*sj6))+(((0.0074858)*gclwh12_14*r21*rxp2_2*sj6))+(((2.0)*cj6*gclwh8_6*npy*pp*pz))+(((-0.069)*gclwh6_5*pp*r22))+(((-0.036050884955666)*gclwh14_6*rxp0_2*sj6))+(((-0.069)*gclwh10_5*pp*r21*sj6))+(((0.0074858)*gclwh6_5*pz*r20*sj6))+(((0.0015774)*gclwh14_10*rxp2_2))+(((0.02)*cj6*gclwh8_14*npx*pz*r20*sj6))+(((-7.4858e-5)*cj6*gclwh6_14*sj6*(r20*r20)))+(((-0.74858)*gclwh12_6*pp*rxp2_2))+(((0.0074858)*cj6*gclwh4_14*r20*rxp1_2*sj6))+(((-0.1881520318)*gclwh8_6*pp*r20*sj6))+(((-7.4858e-5)*gclwh6_14*r20*r21*(cj6*cj6)))+(((0.0590405046)*gclwh4_10*rxp1_2*sj6))+(((0.0963180554)*gclwh10_6*npy*pz*sj6))+(((-0.001399930041)*gclwh8_14*r20*r21*(cj6*cj6)))+(((-2.0)*cj6*gclwh10_6*npx*pp*pz))+(((0.1883520318)*cj6*gclwh10_6*pp*r20))+(((0.15774)*gclwh8_10*npx*pz*sj6))+(((-0.0096733172829)*gclwh10_5*r21*sj6))+(((-0.01)*cj6*gclwh8_14*pp*sj6*(r20*r20)))+(((0.138)*gclwh8_5*npx*pz*sj6))+(((0.07887)*cj6*gclwh10_10*pp*r20))+(((-0.0074858)*cj6*gclwh12_14*r20*rxp2_2))+(((-2.0)*gclwh10_5*npy*sj6*(pz*pz)))+(((-0.036050884955666)*cj6*gclwh14_6*rxp1_2))+(((-0.011041248233367)*cj6*gclwh8_10*r21))+(((0.02)*gclwh12_5*pz*rxp0_2*sj6))+(((0.1399930041)*gclwh8_5*pz*r20*sj6))+(((-0.0590405046)*cj6*gclwh4_10*rxp0_2))+(((-0.00138)*gclwh4_5*pz))+(((-0.02)*cj6*gclwh8_14*npy*pz*r21*sj6))+(((-7.4858e-5)*gclwh8_14*r21*r22*sj6))+(((0.0963180554)*cj6*gclwh8_6*npy*pz))+(((-0.1883520318)*gclwh10_6*pp*r21*sj6))+(((0.02)*cj6*gclwh10_14*npy*pz*r20*sj6))+(((-0.01)*cj6*gclwh6_14*pp*r20*r22))+(((-0.05165202)*gclwh14_5*rxp0_2*sj6))+(((-0.0015774)*cj6*gclwh12_10*rxp1_2))+(((-0.02)*cj6*gclwh12_6*pp*rxp1_2))+(((-0.069)*cj6*gclwh8_5*pp*r21))+(((-0.00674192696225811)*gclwh6_6*r22))+(((-0.0074858)*cj6*gclwh14_14*r20*rxp0_2*sj6))+(((0.0005165202)*gclwh8_5*r22))+(((0.001399930041)*gclwh8_14*r20*r21*(sj6*sj6)))+(((0.00138)*gclwh14_5*rxp2_2))+(((-2.0)*cj6*gclwh8_5*npy*(pz*pz)))+(((-1.0)*gclwh6_6*r22*(pp*pp)))+(((0.001399930041)*gclwh6_14*r21*r22*sj6))+(((-0.00138)*gclwh12_5*rxp0_2*sj6))+(((-0.0590405046)*cj6*gclwh14_10*rxp1_2))+(((-0.02)*gclwh14_5*pz*rxp2_2))+(((-0.1401930041)*cj6*gclwh10_5*pz*r20))+(((-0.0015774)*gclwh12_10*rxp0_2*sj6))+(((-1.0)*cj6*gclwh8_6*r21*(pp*pp)))+(((0.15774)*cj6*gclwh8_10*npy*pz))+(((-0.069)*gclwh8_5*pp*r20*sj6))+(((0.001401930041)*gclwh10_14*(r21*r21)*(sj6*sj6)))+(((-0.1881520318)*gclwh6_6*pp*r22))+(((-0.74858)*cj6*gclwh4_6*pp*rxp0_2))+(((0.1399930041)*cj6*gclwh8_5*pz*r21))+(((0.74858)*gclwh14_5*pz*rxp0_2*sj6))+(((-0.05165202)*cj6*gclwh14_5*rxp1_2))+(((0.000590405046)*gclwh8_10*r22))+(((7.4858e-5)*cj6*gclwh6_14*sj6*(r21*r21)))+(((-0.0015774)*gclwh4_10*pz))+(((-0.00036050884955666)*cj6*gclwh6_6*r21))+(((0.02)*gclwh8_14*npy*pz*r20*(cj6*cj6)))+(((0.0002)*gclwh4_14*pz*r21*sj6))+(((-0.036050884955666)*cj6*gclwh4_6*rxp0_2))+(((7.4858e-5)*cj6*gclwh8_14*r20*r22))+(((-0.011041248233367)*gclwh6_10*r22))+(((0.05165202)*gclwh4_5*rxp1_2*sj6))+(((-0.0074858)*cj6*gclwh6_6*pp*r21))+(((-0.0002)*cj6*gclwh12_14*r20*rxp0_2*sj6))+(((0.74858)*cj6*gclwh14_5*pz*rxp1_2))+(((2.0)*gclwh10_6*npy*pp*pz*sj6))+(((-0.011041248233367)*gclwh8_10*r20*sj6))+(((0.02)*cj6*gclwh12_5*pz*rxp1_2))+(((-0.00674192696225811)*gclwh8_6*r20*sj6))+((gclwh10_5*pp*pz*r21*sj6))+(((-0.02)*gclwh10_14*npy*pz*r21*(sj6*sj6)))+(((0.01)*cj6*gclwh8_14*pp*sj6*(r21*r21)))+(((-0.0005165202)*cj6*gclwh6_5*r21))+(((0.15774)*gclwh6_10*npz*pz))+(((0.0096733172829)*cj6*gclwh10_5*r20))+(((-0.036050884955666)*gclwh12_6*rxp2_2))+(((-0.001399930041)*cj6*gclwh8_14*sj6*(r20*r20)))+(((-0.02)*cj6*gclwh10_14*pp*r20*r21*sj6))+(((-0.0096595172829)*gclwh8_5*r20*sj6))+(((-0.0963180554)*cj6*gclwh10_6*npx*pz))+(((-0.02)*gclwh10_14*npx*pz*r20*(cj6*cj6)))+(((-0.74858)*cj6*gclwh14_6*pp*rxp1_2))+(((0.138)*gclwh10_5*npy*pz*sj6))+(((-1.0)*gclwh10_6*r21*sj6*(pp*pp)))+(((0.1401930041)*gclwh10_5*pz*r21*sj6))+(((2.0)*gclwh6_6*npz*pp*pz))+(((0.0002)*gclwh12_14*r21*rxp0_2*(sj6*sj6)))+(((0.069)*cj6*gclwh10_5*pp*r20))+(((0.0963180554)*gclwh8_6*npx*pz*sj6))+(((-0.0074858)*gclwh14_14*r20*rxp1_2*(cj6*cj6)))+(((0.02)*cj6*gclwh10_14*npx*pz*r21*sj6))+(((0.001401930041)*gclwh10_14*(cj6*cj6)*(r20*r20))));
IkReal x587=(cj6*npx);
IkReal x588=(r21*sj6);
IkReal x589=((0.0193466345658)*gclwh11_15);
IkReal x590=(npy*sj6);
IkReal x591=(cj6*r20);
IkReal x592=((0.082831634542444)*gclwh10_14);
IkReal x593=((0.04)*rxp2_2);
IkReal x594=(cj6*r21);
IkReal x595=((0.0193190345658)*gclwh9_15);
IkReal x596=((0.2799860082)*gclwh8_0);
IkReal x597=((0.59084)*pp);
IkReal x598=((0.0149716)*r22);
IkReal x599=(rxp1_2*sj6);
IkReal x600=((0.4422910072)*gclwh4_14);
IkReal x601=(gclwh8_0*sj6);
IkReal x602=((2.0)*pp);
IkReal x603=((0.138)*pp);
IkReal x604=((0.10330404)*gclwh5_15);
IkReal x605=((4.0)*pz);
IkReal x606=((0.00276)*rxp2_2);
IkReal x607=(cj6*rxp1_2);
IkReal x608=((0.4422910072)*gclwh14_14);
IkReal x609=(gclwh13_15*rxp2_2);
IkReal x610=((0.10330404)*gclwh15_15);
IkReal x611=((0.004422910072)*gclwh7_15);
IkReal x612=(r20*sj6);
IkReal x613=(cj6*npy);
IkReal x614=(gclwh8_14*pz);
IkReal x615=(rxp0_2*sj6);
IkReal x616=((1.49716)*gclwh14_0);
IkReal x617=((0.04)*pz);
IkReal x618=((0.082831634542444)*gclwh11_15);
IkReal x619=(gclwh6_0*r22);
IkReal x620=((0.00276)*gclwh12_14);
IkReal x621=((0.0118168)*rxp2_2);
IkReal x622=((0.04)*gclwh13_4);
IkReal x623=(gclwh6_14*r22);
IkReal x624=(gclwh7_15*r22);
IkReal x625=(gclwh4_14*pz);
IkReal x626=((0.0149716)*gclwh6_0);
IkReal x627=((1.18168)*pz);
IkReal x628=((1.49716)*gclwh4_0);
IkReal x629=((0.0193466345658)*gclwh10_14);
IkReal x630=(cj6*rxp0_2);
IkReal x631=((1.49716)*gclwh5_4);
IkReal x632=((0.10330404)*gclwh4_14);
IkReal x633=((0.0149716)*gclwh7_4);
IkReal x634=((0.10330404)*gclwh14_14);
IkReal x635=((0.0118168)*gclwh12_14);
IkReal x636=(gclwh5_15*pz);
IkReal x637=((0.2799860082)*gclwh9_4);
IkReal x638=((0.276)*pz);
IkReal x639=(gclwh7_15*npz);
IkReal x640=((0.004422910072)*gclwh6_14);
IkReal x641=(gclwh6_14*npz);
IkReal x642=((0.2803860082)*gclwh11_4);
IkReal x643=(npx*sj6);
IkReal x644=((1.49716)*rxp2_2);
IkReal x645=(gclwh12_14*rxp2_2);
IkReal x646=((0.4422910072)*gclwh15_15);
IkReal x647=((0.2803860082)*gclwh10_0);
IkReal x648=((0.004422910072)*r22);
IkReal x649=((0.0010330404)*gclwh6_14);
IkReal x650=((1.49716)*gclwh15_4);
IkReal x651=((0.4422910072)*gclwh5_15);
IkReal x652=((0.04)*gclwh12_0);
IkReal x653=((0.0010330404)*gclwh7_15);
IkReal x654=(gclwh7_4*r22);
IkReal x655=((0.0193190345658)*gclwh8_14);
IkReal x656=((0.0010330404)*r22);
IkReal x657=(gclwh11_15*x638);
IkReal x658=(gclwh13_15*x615);
IkReal x659=((0.082713466542444)*x594);
op[50]=((0.1840679528)+((gclwh10_0*x587*x605))+((x615*x635))+((x594*x596))+(((0.4422910072)*x645))+(((-1.0)*npx*x601*x605))+(((-1.0)*x627*x641))+(((-1.18168)*x613*x614))+((x608*x615))+((x628*x630))+((gclwh4_0*x617))+(((-1.0)*gclwh8_0*x605*x613))+((gclwh10_14*x588*x597))+((x594*x640))+((x588*x647))+((x615*x652))+(((-1.0)*gclwh14_0*x593))+(((-1.0)*gclwh6_0*npz*x605))+((gclwh12_0*x644))+(((-1.0)*gclwh10_14*x590*x627))+(((-1.0)*gclwh14_14*x621))+(((-1.0)*x599*x600))+((x594*x626))+(((-1.18168)*x614*x643))+((x612*x626))+((x607*x608))+(((-1.0)*gclwh10_0*x590*x605))+(((0.082713466542444)*gclwh8_14*x612))+((x607*x616))+(((-1.0)*gclwh8_14*x648))+((gclwh8_14*x594*x597))+(((0.2799860082)*x619))+(((-1.0)*gclwh10_0*x591*x602))+((gclwh8_14*x597*x612))+(((-1.0)*gclwh8_0*x598))+((x615*x616))+((x596*x612))+(((0.082713466542444)*x623))+(((-1.0)*x599*x628))+(((0.0118168)*x625))+((gclwh10_14*x587*x627))+((x600*x630))+((x602*x619))+(((-1.0)*gclwh10_14*x591*x597))+((gclwh8_0*x594*x602))+(((-1.0)*x591*x647))+((x607*x652))+((r20*x601*x602))+((x588*x592))+(((-1.0)*x591*x592))+((x597*x623))+((gclwh10_0*x588*x602))+((gclwh8_14*x659))+((x612*x640))+((x607*x635)));
op[51]=((((0.10330404)*x645))+((x615*x634))+((x603*x623))+(((0.0193190345658)*x623))+((gclwh8_14*x603*x612))+(((-0.276)*x614*x643))+((x612*x655))+((x588*x629))+((x594*x649))+((gclwh8_14*x594*x603))+(((-1.0)*x591*x629))+(((-1.0)*gclwh10_14*x590*x638))+((x594*x655))+(((0.00276)*x625))+((gclwh10_14*x588*x603))+(((-1.0)*x599*x632))+((gclwh10_14*x587*x638))+((x630*x632))+(((-1.0)*gclwh10_14*x591*x603))+(((-0.276)*x613*x614))+(((-1.0)*x638*x641))+(((-1.0)*gclwh8_14*x656))+((x607*x620))+(((-1.0)*gclwh14_14*x606))+((x612*x649))+((x607*x634))+((x615*x620)));
op[52]=((((-0.0096595172829)*gclwh6_10*r22))+(((0.138)*cj6*gclwh8_10*npy*pz))+(((-0.002211455036)*cj6*gclwh6_12*r21))+(((-0.05165202)*cj6*gclwh14_10*rxp1_2))+(((-0.1399930041)*gclwh8_8*r20*sj6))+(((2.0)*gclwh8_8*npx*pz*sj6))+(((-0.041356733271222)*gclwh6_12*r22))+(((0.74858)*gclwh4_8*rxp1_2*sj6))+(((-0.041356733271222)*cj6*gclwh8_12*r21))+(((0.2211455036)*gclwh4_12*rxp1_2*sj6))+(((0.069)*cj6*gclwh10_10*pp*r20))+(((-0.02)*cj6*gclwh12_8*rxp1_2))+(((0.1401930041)*cj6*gclwh10_8*r20))+(((-0.0096595172829)*cj6*gclwh8_10*r21))+(((-0.041356733271222)*gclwh8_12*r20*sj6))+(((-0.0096733172829)*gclwh10_10*r21*sj6))+(((-0.069)*gclwh8_10*pp*r20*sj6))+((cj6*gclwh10_8*pp*r20))+(((-0.29542)*gclwh6_12*pp*r22))+(((0.002211455036)*gclwh8_12*r22))+(((0.138)*gclwh10_10*npy*pz*sj6))+(((0.59084)*gclwh10_12*npy*pz*sj6))+(((-0.74858)*gclwh14_8*rxp0_2*sj6))+(((-0.0005165202)*gclwh6_10*r20*sj6))+(((-0.0059084)*gclwh4_12*pz))+(((-0.0059084)*cj6*gclwh12_12*rxp1_2))+(((-0.74858)*gclwh12_8*rxp2_2))+(((0.59084)*gclwh6_12*npz*pz))+(((-0.00138)*gclwh4_10*pz))+(((-0.29542)*cj6*gclwh8_12*pp*r21))+(((-0.05165202)*gclwh12_10*rxp2_2))+(((-0.069)*gclwh6_10*pp*r22))+(((-0.2211455036)*cj6*gclwh14_12*rxp1_2))+(((0.138)*gclwh6_10*npz*pz))+(((0.0096733172829)*cj6*gclwh10_10*r20))+(((-1.0)*gclwh8_8*pp*r20*sj6))+(((0.59084)*cj6*gclwh8_12*npy*pz))+(((-1.0)*gclwh10_8*pp*r21*sj6))+(((-0.138)*cj6*gclwh10_10*npx*pz))+(((-0.0096595172829)*gclwh8_10*r20*sj6))+(((-0.2211455036)*gclwh12_12*rxp2_2))+(((-0.29542)*gclwh8_12*pp*r20*sj6))+(((0.29542)*cj6*gclwh10_12*pp*r20))+(((-0.1401930041)*gclwh10_8*r21*sj6))+(((-0.00138)*gclwh12_10*rxp0_2*sj6))+(((0.0005165202)*gclwh8_10*r22))+(((0.138)*gclwh8_10*npx*pz*sj6))+(((-0.59084)*cj6*gclwh10_12*npx*pz))+(((-2.0)*cj6*gclwh10_8*npx*pz))+(((-0.041415817271222)*gclwh10_12*r21*sj6))+(((-0.0005165202)*cj6*gclwh6_10*r21))+(((-0.2211455036)*gclwh14_12*rxp0_2*sj6))+(((-0.1399930041)*gclwh6_8*r22))+(((-1.0)*gclwh6_8*pp*r22))+(((-0.74858)*cj6*gclwh4_8*rxp0_2))+(((-0.05165202)*cj6*gclwh4_10*rxp0_2))+(((-0.2211455036)*cj6*gclwh4_12*rxp0_2))+(((0.0074858)*gclwh8_8*r22))+(((-0.0059084)*gclwh12_12*rxp0_2*sj6))+(((0.041415817271222)*cj6*gclwh10_12*r20))+(((-0.1399930041)*cj6*gclwh8_8*r21))+(((2.0)*gclwh6_8*npz*pz))+(((-0.00138)*cj6*gclwh12_10*rxp1_2))+(((-0.069)*gclwh10_10*pp*r21*sj6))+(((2.0)*gclwh10_8*npy*pz*sj6))+(((-0.02)*gclwh4_8*pz))+(((0.02)*gclwh14_8*rxp2_2))+(((-0.74858)*cj6*gclwh14_8*rxp1_2))+(((0.59084)*gclwh8_12*npx*pz*sj6))+(((-0.02)*gclwh12_8*rxp0_2*sj6))+(((-0.069)*cj6*gclwh8_10*pp*r21))+(((0.05165202)*gclwh4_10*rxp1_2*sj6))+(((-0.05165202)*gclwh14_10*rxp0_2*sj6))+(((-0.29542)*gclwh10_12*pp*r21*sj6))+(((-0.0074858)*cj6*gclwh6_8*r21))+(((-0.0074858)*gclwh6_8*r20*sj6))+(((0.0059084)*gclwh14_12*rxp2_2))+(((-1.0)*cj6*gclwh8_8*pp*r21))+(((-0.002211455036)*gclwh6_12*r20*sj6))+(((0.00138)*gclwh14_10*rxp2_2))+(((2.0)*cj6*gclwh8_8*npy*pz)));
op[53]=((((-0.07887)*gclwh6_10*pp*r22))+(((0.74858)*gclwh4_6*pp*rxp1_2*sj6))+(((2.0)*gclwh8_6*npx*pp*pz*sj6))+(((-0.1881520318)*cj6*gclwh8_6*pp*r21))+(((0.15774)*gclwh10_10*npy*pz*sj6))+(((-0.138)*gclwh8_5*npx*pz*sj6))+(((-0.000590405046)*cj6*gclwh6_10*r21))+(((0.74858)*gclwh12_5*pz*rxp2_2))+(((-0.0590405046)*gclwh14_10*rxp0_2*sj6))+(((0.069)*gclwh8_5*pp*r20*sj6))+(((-0.0005165202)*gclwh8_5*r22))+(((-0.000963180554)*gclwh12_6*rxp0_2*sj6))+(((-0.000963180554)*gclwh4_6*pz))+(((0.02)*cj6*gclwh6_14*npz*pz*r20))+(((-0.0074858)*gclwh6_6*pp*r20*sj6))+(((0.036050884955666)*gclwh4_6*rxp1_2*sj6))+(((2.0)*cj6*gclwh10_5*npx*(pz*pz)))+(((-0.74858)*gclwh14_6*pp*rxp0_2*sj6))+(((-0.0590405046)*gclwh12_10*rxp2_2))+(((-0.000963180554)*cj6*gclwh12_6*rxp1_2))+(((0.00036050884955666)*gclwh8_6*r22))+(((7.4858e-5)*gclwh6_14*r20*r21*(sj6*sj6)))+(((0.0005165202)*gclwh6_5*r20*sj6))+(((-0.07887)*gclwh8_10*pp*r20*sj6))+(((0.02)*gclwh14_6*pp*rxp2_2))+((cj6*gclwh10_6*r20*(pp*pp)))+(((0.0002)*cj6*gclwh12_14*r21*rxp1_2*sj6))+(((-2.0)*gclwh6_5*npz*(pz*pz)))+(((-0.0074858)*gclwh4_14*r20*rxp0_2*(cj6*cj6)))+(((-0.0074858)*gclwh8_5*pz*r22))+(((-0.001399930041)*cj6*gclwh6_14*r20*r22))+(((-0.15774)*cj6*gclwh10_10*npx*pz))+(((0.02)*gclwh4_5*(pz*pz)))+(((-0.00675155876779811)*gclwh10_6*r21*sj6))+(((-0.02)*gclwh4_6*pp*pz))+((gclwh8_5*pp*pz*r20*sj6))+(((-0.02)*gclwh6_14*npz*pz*r21*sj6))+(((-0.00674192696225811)*cj6*gclwh8_6*r21))+(((0.74858)*cj6*gclwh4_5*pz*rxp0_2))+(((-0.02)*gclwh8_14*npx*pz*r21*(sj6*sj6)))+(((0.0074858)*cj6*gclwh14_14*r21*rxp1_2*sj6))+(((0.001399930041)*cj6*gclwh8_14*sj6*(r21*r21)))+(((-0.74858)*gclwh4_5*pz*rxp1_2*sj6))+(((0.0074858)*gclwh8_6*pp*r22))+((gclwh6_5*pp*pz*r22))+(((0.0074858)*cj6*gclwh4_14*r21*rxp0_2*sj6))+((cj6*gclwh8_5*pp*pz*r21))+(((-0.00036050884955666)*gclwh6_6*r20*sj6))+(((0.05165202)*cj6*gclwh14_5*rxp1_2))+(((-0.05165202)*gclwh4_5*rxp1_2*sj6))+(((0.000963180554)*gclwh14_6*rxp2_2))+(((0.0096595172829)*gclwh6_5*r22))+(((0.01)*gclwh10_14*pp*(cj6*cj6)*(r20*r20)))+(((-0.0002)*gclwh12_14*r20*rxp1_2*(cj6*cj6)))+(((0.011057022233367)*cj6*gclwh10_10*r20))+(((0.01)*gclwh6_14*pp*r21*r22*sj6))+(((0.069)*gclwh10_5*pp*r21*sj6))+(((0.00675155876779811)*cj6*gclwh10_6*r20))+(((0.00138)*gclwh4_5*pz))+(((-2.0)*gclwh8_5*npx*sj6*(pz*pz)))+(((-0.01)*gclwh8_14*pp*r20*r21*(cj6*cj6)))+(((0.01)*gclwh10_14*pp*(r21*r21)*(sj6*sj6)))+(((-0.0002)*gclwh14_14*r21*rxp2_2*sj6))+(((0.138)*cj6*gclwh10_5*npx*pz))+(((0.0074858)*gclwh14_14*r21*rxp0_2*(sj6*sj6)))+(((-0.011057022233367)*gclwh10_10*r21*sj6))+(((-1.0)*gclwh8_6*r20*sj6*(pp*pp)))+(((0.1399930041)*gclwh6_5*pz*r22))+(((-0.07887)*cj6*gclwh8_10*pp*r21))+(((-0.0002)*cj6*gclwh4_14*pz*r20))+(((-0.02)*gclwh12_6*pp*rxp0_2*sj6))+(((0.01)*gclwh8_14*pp*r20*r21*(sj6*sj6)))+(((-0.07887)*gclwh10_10*pp*r21*sj6))+(((0.0074858)*cj6*gclwh6_5*pz*r21))+(((-0.002803860082)*cj6*gclwh10_14*r20*r21*sj6))+(((-0.0074858)*gclwh4_14*r21*rxp1_2*(sj6*sj6)))+(((0.0002)*cj6*gclwh14_14*r20*rxp2_2))+(((-1.0)*cj6*gclwh10_5*pp*pz*r20))+(((0.0963180554)*gclwh6_6*npz*pz))+(((-0.000590405046)*gclwh6_10*r20*sj6))+(((0.0074858)*gclwh12_14*r21*rxp2_2*sj6))+(((2.0)*cj6*gclwh8_6*npy*pp*pz))+(((-0.036050884955666)*gclwh14_6*rxp0_2*sj6))+(((0.05165202)*gclwh14_5*rxp0_2*sj6))+(((0.0074858)*gclwh6_5*pz*r20*sj6))+(((0.0015774)*gclwh14_10*rxp2_2))+(((0.02)*cj6*gclwh8_14*npx*pz*r20*sj6))+(((-7.4858e-5)*cj6*gclwh6_14*sj6*(r20*r20)))+(((-0.74858)*gclwh12_6*pp*rxp2_2))+(((0.0074858)*cj6*gclwh4_14*r20*rxp1_2*sj6))+(((-0.1881520318)*gclwh8_6*pp*r20*sj6))+(((-0.00138)*gclwh14_5*rxp2_2))+(((-7.4858e-5)*gclwh6_14*r20*r21*(cj6*cj6)))+(((-0.069)*cj6*gclwh10_5*pp*r20))+(((0.069)*cj6*gclwh8_5*pp*r21))+(((0.0590405046)*gclwh4_10*rxp1_2*sj6))+(((0.0096595172829)*gclwh8_5*r20*sj6))+(((0.0963180554)*gclwh10_6*npy*pz*sj6))+(((-0.001399930041)*gclwh8_14*r20*r21*(cj6*cj6)))+(((0.05165202)*gclwh12_5*rxp2_2))+(((-2.0)*cj6*gclwh10_6*npx*pp*pz))+(((-0.138)*gclwh6_5*npz*pz))+(((0.0096733172829)*gclwh10_5*r21*sj6))+(((0.069)*gclwh6_5*pp*r22))+(((0.1883520318)*cj6*gclwh10_6*pp*r20))+(((0.15774)*gclwh8_10*npx*pz*sj6))+(((-0.01)*cj6*gclwh8_14*pp*sj6*(r20*r20)))+(((0.07887)*cj6*gclwh10_10*pp*r20))+(((-0.0074858)*cj6*gclwh12_14*r20*rxp2_2))+(((-2.0)*gclwh10_5*npy*sj6*(pz*pz)))+(((-0.036050884955666)*cj6*gclwh14_6*rxp1_2))+(((-0.011041248233367)*cj6*gclwh8_10*r21))+(((0.02)*gclwh12_5*pz*rxp0_2*sj6))+(((0.1399930041)*gclwh8_5*pz*r20*sj6))+(((-0.0590405046)*cj6*gclwh4_10*rxp0_2))+(((-0.02)*cj6*gclwh8_14*npy*pz*r21*sj6))+(((-7.4858e-5)*gclwh8_14*r21*r22*sj6))+(((0.0963180554)*cj6*gclwh8_6*npy*pz))+(((-0.1883520318)*gclwh10_6*pp*r21*sj6))+(((0.02)*cj6*gclwh10_14*npy*pz*r20*sj6))+(((-0.01)*cj6*gclwh6_14*pp*r20*r22))+(((-0.0015774)*cj6*gclwh12_10*rxp1_2))+(((-0.02)*cj6*gclwh12_6*pp*rxp1_2))+(((-0.00674192696225811)*gclwh6_6*r22))+(((-0.0074858)*cj6*gclwh14_14*r20*rxp0_2*sj6))+(((0.001399930041)*gclwh8_14*r20*r21*(sj6*sj6)))+(((-2.0)*cj6*gclwh8_5*npy*(pz*pz)))+(((-1.0)*gclwh6_6*r22*(pp*pp)))+(((0.001399930041)*gclwh6_14*r21*r22*sj6))+(((-0.0590405046)*cj6*gclwh14_10*rxp1_2))+(((-0.02)*gclwh14_5*pz*rxp2_2))+(((-0.1401930041)*cj6*gclwh10_5*pz*r20))+(((-0.0015774)*gclwh12_10*rxp0_2*sj6))+(((-1.0)*cj6*gclwh8_6*r21*(pp*pp)))+(((0.15774)*cj6*gclwh8_10*npy*pz))+(((0.001401930041)*gclwh10_14*(r21*r21)*(sj6*sj6)))+(((-0.1881520318)*gclwh6_6*pp*r22))+(((0.00138)*gclwh12_5*rxp0_2*sj6))+(((-0.74858)*cj6*gclwh4_6*pp*rxp0_2))+(((0.1399930041)*cj6*gclwh8_5*pz*r21))+(((0.74858)*gclwh14_5*pz*rxp0_2*sj6))+(((0.000590405046)*gclwh8_10*r22))+(((7.4858e-5)*cj6*gclwh6_14*sj6*(r21*r21)))+(((-0.0096733172829)*cj6*gclwh10_5*r20))+(((-0.0015774)*gclwh4_10*pz))+(((-0.00036050884955666)*cj6*gclwh6_6*r21))+(((0.02)*gclwh8_14*npy*pz*r20*(cj6*cj6)))+(((0.0002)*gclwh4_14*pz*r21*sj6))+(((-0.036050884955666)*cj6*gclwh4_6*rxp0_2))+(((7.4858e-5)*cj6*gclwh8_14*r20*r22))+(((-0.011041248233367)*gclwh6_10*r22))+(((-0.0074858)*cj6*gclwh6_6*pp*r21))+(((-0.0002)*cj6*gclwh12_14*r20*rxp0_2*sj6))+(((0.74858)*cj6*gclwh14_5*pz*rxp1_2))+(((0.05165202)*cj6*gclwh4_5*rxp0_2))+(((-0.138)*gclwh10_5*npy*pz*sj6))+(((2.0)*gclwh10_6*npy*pp*pz*sj6))+(((0.0096595172829)*cj6*gclwh8_5*r21))+(((-0.011041248233367)*gclwh8_10*r20*sj6))+(((0.02)*cj6*gclwh12_5*pz*rxp1_2))+(((0.00138)*cj6*gclwh12_5*rxp1_2))+(((-0.00674192696225811)*gclwh8_6*r20*sj6))+(((-0.138)*cj6*gclwh8_5*npy*pz))+(((0.0005165202)*cj6*gclwh6_5*r21))+((gclwh10_5*pp*pz*r21*sj6))+(((-0.02)*gclwh10_14*npy*pz*r21*(sj6*sj6)))+(((0.01)*cj6*gclwh8_14*pp*sj6*(r21*r21)))+(((0.15774)*gclwh6_10*npz*pz))+(((-0.036050884955666)*gclwh12_6*rxp2_2))+(((-0.001399930041)*cj6*gclwh8_14*sj6*(r20*r20)))+(((-0.02)*cj6*gclwh10_14*pp*r20*r21*sj6))+(((-0.0963180554)*cj6*gclwh10_6*npx*pz))+(((-0.02)*gclwh10_14*npx*pz*r20*(cj6*cj6)))+(((-0.74858)*cj6*gclwh14_6*pp*rxp1_2))+(((-1.0)*gclwh10_6*r21*sj6*(pp*pp)))+(((0.1401930041)*gclwh10_5*pz*r21*sj6))+(((2.0)*gclwh6_6*npz*pp*pz))+(((0.0002)*gclwh12_14*r21*rxp0_2*(sj6*sj6)))+(((0.0963180554)*gclwh8_6*npx*pz*sj6))+(((-0.0074858)*gclwh14_14*r20*rxp1_2*(cj6*cj6)))+(((0.02)*cj6*gclwh10_14*npx*pz*r21*sj6))+(((0.001401930041)*gclwh10_14*(cj6*cj6)*(r20*r20))));
op[54]=((((-0.0096595172829)*gclwh9_1*r20*sj6))+(((-0.00675155876779811)*gclwh11_2*r21*sj6))+(((-0.00138)*gclwh13_1*rxp0_2*sj6))+(((-7.4858e-5)*cj6*gclwh7_15*sj6*(r21*r21)))+(((-0.00674192696225811)*cj6*gclwh9_2*r21))+(((-0.02)*gclwh15_1*pz*rxp2_2))+(((-0.02)*cj6*gclwh9_15*npx*pz*r20*sj6))+(((-1.33942)*gclwh7_11*npz*pz))+(((-0.1883520318)*gclwh11_2*pp*r21*sj6))+(((-0.0074858)*cj6*gclwh5_15*r20*rxp1_2*sj6))+(((-0.001399930041)*gclwh7_15*r21*r22*sj6))+(((-0.02)*cj6*gclwh13_2*pp*rxp1_2))+(((0.1401930041)*gclwh11_1*pz*r21*sj6))+(((-0.005013315118)*gclwh9_11*r22))+(((-0.036050884955666)*gclwh15_2*rxp0_2*sj6))+(((-0.036050884955666)*cj6*gclwh5_2*rxp0_2))+(((-0.0074858)*cj6*gclwh5_15*r21*rxp0_2*sj6))+(((-1.0)*gclwh9_2*r20*sj6*(pp*pp)))+(((0.0963180554)*gclwh11_2*npy*pz*sj6))+(((0.0002)*gclwh13_15*r20*rxp1_2*(cj6*cj6)))+(((0.001399930041)*gclwh9_15*r20*r21*(cj6*cj6)))+(((-0.093888656775811)*cj6*gclwh11_11*r20))+(((0.0074858)*cj6*gclwh7_1*pz*r21))+(((-0.00036050884955666)*gclwh7_2*r20*sj6))+(((0.00036050884955666)*gclwh9_2*r22))+(((0.01)*cj6*gclwh9_15*pp*sj6*(r20*r20)))+(((-0.069)*cj6*gclwh9_1*pp*r21))+(((0.5013315118)*cj6*gclwh5_11*rxp0_2))+(((0.74858)*gclwh15_1*pz*rxp0_2*sj6))+(((-0.036050884955666)*cj6*gclwh15_2*rxp1_2))+(((-0.66971)*cj6*gclwh11_11*pp*r20))+(((-0.0002)*cj6*gclwh15_15*r20*rxp2_2))+(((0.0074858)*gclwh7_1*pz*r20*sj6))+(((0.138)*gclwh11_1*npy*pz*sj6))+(((0.0963180554)*cj6*gclwh9_2*npy*pz))+(((-0.00138)*cj6*gclwh13_1*rxp1_2))+(((0.001399930041)*cj6*gclwh7_15*r20*r22))+(((-0.0096595172829)*cj6*gclwh9_1*r21))+(((-0.02)*gclwh5_2*pp*pz))+(((0.093888656775811)*gclwh11_11*r21*sj6))+(((0.0096733172829)*cj6*gclwh11_1*r20))+(((0.0002)*gclwh15_15*r21*rxp2_2*sj6))+(((-1.0)*gclwh11_2*r21*sj6*(pp*pp)))+(((2.0)*gclwh9_2*npx*pp*pz*sj6))+(((1.33942)*cj6*gclwh11_11*npx*pz))+(((0.0074858)*gclwh5_15*r21*rxp1_2*(sj6*sj6)))+(((0.02)*cj6*gclwh13_1*pz*rxp1_2))+(((0.66971)*gclwh11_11*pp*r21*sj6))+(((-0.00036050884955666)*cj6*gclwh7_2*r21))+(((-0.01)*gclwh7_15*pp*r21*r22*sj6))+(((-0.0002)*cj6*gclwh13_15*r21*rxp1_2*sj6))+(((-0.069)*gclwh7_1*pp*r22))+(((0.1399930041)*cj6*gclwh9_1*pz*r21))+(((0.0963180554)*gclwh7_2*npz*pz))+(((0.5013315118)*gclwh15_11*rxp0_2*sj6))+(((-1.0)*cj6*gclwh9_2*r21*(pp*pp)))+(((0.001399930041)*cj6*gclwh9_15*sj6*(r20*r20)))+(((0.005013315118)*cj6*gclwh7_11*r21))+(((0.02)*gclwh11_15*npx*pz*r20*(cj6*cj6)))+(((0.138)*gclwh9_1*npx*pz*sj6))+(((-0.0005165202)*cj6*gclwh7_1*r21))+(((0.1399930041)*gclwh7_1*pz*r22))+(((-0.0133942)*gclwh15_11*rxp2_2))+(((0.02)*gclwh13_1*pz*rxp0_2*sj6))+(((-0.02)*cj6*gclwh11_15*npx*pz*r21*sj6))+(((0.02)*cj6*gclwh11_15*pp*r20*r21*sj6))+(((2.0)*gclwh7_2*npz*pp*pz))+(((7.4858e-5)*gclwh7_15*r20*r21*(cj6*cj6)))+(((0.02)*cj6*gclwh9_15*npy*pz*r21*sj6))+(((0.5013315118)*cj6*gclwh15_11*rxp1_2))+(((-0.74858)*cj6*gclwh5_2*pp*rxp0_2))+(((-0.069)*gclwh9_1*pp*r20*sj6))+(((0.0074858)*gclwh15_15*r20*rxp1_2*(cj6*cj6)))+(((-7.4858e-5)*gclwh7_15*r20*r21*(sj6*sj6)))+(((0.0074858)*cj6*gclwh13_15*r20*rxp2_2))+(((0.069)*cj6*gclwh11_1*pp*r20))+(((0.002803860082)*cj6*gclwh11_15*r20*r21*sj6))+(((-0.01)*gclwh11_15*pp*(cj6*cj6)*(r20*r20)))+(((0.05165202)*gclwh5_1*rxp1_2*sj6))+(((-0.0074858)*gclwh15_15*r21*rxp0_2*(sj6*sj6)))+((cj6*gclwh9_1*pp*pz*r21))+(((-1.33942)*cj6*gclwh9_11*npy*pz))+(((0.74858)*gclwh13_1*pz*rxp2_2))+(((-0.0963180554)*cj6*gclwh11_2*npx*pz))+(((-0.1401930041)*cj6*gclwh11_1*pz*r20))+(((-0.000963180554)*gclwh13_2*rxp0_2*sj6))+(((-0.05165202)*cj6*gclwh15_1*rxp1_2))+(((7.4858e-5)*gclwh9_15*r21*r22*sj6))+(((-0.5013315118)*gclwh5_11*rxp1_2*sj6))+(((0.5013315118)*gclwh13_11*rxp2_2))+(((-0.000963180554)*cj6*gclwh13_2*rxp1_2))+(((7.4858e-5)*cj6*gclwh7_15*sj6*(r20*r20)))+(((0.0005165202)*gclwh9_1*r22))+(((-0.00674192696225811)*gclwh7_2*r22))+(((-0.1881520318)*gclwh9_2*pp*r20*sj6))+(((-0.138)*cj6*gclwh11_1*npx*pz))+(((0.02)*gclwh9_15*npx*pz*r21*(sj6*sj6)))+(((-0.001401930041)*gclwh11_15*(r21*r21)*(sj6*sj6)))+(((-0.0074858)*gclwh7_2*pp*r20*sj6))+(((0.0074858)*gclwh5_15*r20*rxp0_2*(cj6*cj6)))+(((-0.05165202)*gclwh15_1*rxp0_2*sj6))+(((-1.0)*gclwh7_2*r22*(pp*pp)))+(((0.0074858)*gclwh9_2*pp*r22))+(((-1.33942)*gclwh9_11*npx*pz*sj6))+(((0.02)*gclwh11_15*npy*pz*r21*(sj6*sj6)))+((gclwh9_1*pp*pz*r20*sj6))+(((-1.0)*cj6*gclwh11_1*pp*pz*r20))+(((-0.0074858)*gclwh9_1*pz*r22))+(((0.093754714775811)*cj6*gclwh9_11*r21))+(((-0.01)*gclwh9_15*pp*r20*r21*(sj6*sj6)))+(((0.000963180554)*gclwh15_2*rxp2_2))+(((-0.0074858)*cj6*gclwh15_15*r21*rxp1_2*sj6))+(((0.74858)*gclwh5_2*pp*rxp1_2*sj6))+(((0.66971)*gclwh7_11*pp*r22))+(((-0.01)*cj6*gclwh9_15*pp*sj6*(r21*r21)))+(((-0.069)*gclwh11_1*pp*r21*sj6))+(((-0.74858)*gclwh13_2*pp*rxp2_2))+(((0.0133942)*cj6*gclwh13_11*rxp1_2))+(((-0.02)*gclwh13_2*pp*rxp0_2*sj6))+(((-0.02)*gclwh9_15*npy*pz*r20*(cj6*cj6)))+(((0.093754714775811)*gclwh7_11*r22))+(((-7.4858e-5)*cj6*gclwh9_15*r20*r22))+(((0.01)*cj6*gclwh7_15*pp*r20*r22))+(((-0.74858)*cj6*gclwh15_2*pp*rxp1_2))+(((-0.0096595172829)*gclwh7_1*r22))+(((0.00138)*gclwh15_1*rxp2_2))+(((-0.1881520318)*cj6*gclwh9_2*pp*r21))+(((-1.33942)*gclwh11_11*npy*pz*sj6))+(((-2.0)*gclwh7_1*npz*(pz*pz)))+(((0.093754714775811)*gclwh9_11*r20*sj6))+(((0.0133942)*gclwh13_11*rxp0_2*sj6))+((gclwh7_1*pp*pz*r22))+((gclwh11_1*pp*pz*r21*sj6))+(((-0.0002)*gclwh5_15*pz*r21*sj6))+(((2.0)*cj6*gclwh9_2*npy*pp*pz))+(((0.74858)*cj6*gclwh5_1*pz*rxp0_2))+(((0.036050884955666)*gclwh5_2*rxp1_2*sj6))+(((0.0002)*cj6*gclwh5_15*pz*r20))+(((-0.001399930041)*cj6*gclwh9_15*sj6*(r21*r21)))+(((0.66971)*gclwh9_11*pp*r20*sj6))+(((0.00675155876779811)*cj6*gclwh11_2*r20))+(((-0.02)*cj6*gclwh7_15*npz*pz*r20))+(((0.1883520318)*cj6*gclwh11_2*pp*r20))+(((0.02)*gclwh15_2*pp*rxp2_2))+(((-0.74858)*gclwh5_1*pz*rxp1_2*sj6))+(((-0.000963180554)*gclwh5_2*pz))+(((-2.0)*cj6*gclwh9_1*npy*(pz*pz)))+(((-0.02)*cj6*gclwh11_15*npy*pz*r20*sj6))+(((0.138)*cj6*gclwh9_1*npy*pz))+(((0.1399930041)*gclwh9_1*pz*r20*sj6))+(((-0.036050884955666)*gclwh13_2*rxp2_2))+(((-0.01)*gclwh11_15*pp*(r21*r21)*(sj6*sj6)))+(((-0.0002)*gclwh13_15*r21*rxp0_2*(sj6*sj6)))+(((0.138)*gclwh7_1*npz*pz))+(((-0.0005165202)*gclwh7_1*r20*sj6))+(((2.0)*cj6*gclwh11_1*npx*(pz*pz)))+(((-0.0074858)*gclwh13_15*r21*rxp2_2*sj6))+(((0.0963180554)*gclwh9_2*npx*pz*sj6))+(((-0.1881520318)*gclwh7_2*pp*r22))+(((-2.0)*cj6*gclwh11_2*npx*pp*pz))+(((2.0)*gclwh11_2*npy*pp*pz*sj6))+(((-0.05165202)*gclwh13_1*rxp2_2))+((cj6*gclwh11_2*r20*(pp*pp)))+(((0.005013315118)*gclwh7_11*r20*sj6))+(((0.02)*gclwh7_15*npz*pz*r21*sj6))+(((-2.0)*gclwh9_1*npx*sj6*(pz*pz)))+(((0.0133942)*gclwh5_11*pz))+(((0.74858)*cj6*gclwh15_1*pz*rxp1_2))+(((0.01)*gclwh9_15*pp*r20*r21*(cj6*cj6)))+(((-0.74858)*gclwh15_2*pp*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh15_15*r20*rxp0_2*sj6))+(((0.66971)*cj6*gclwh9_11*pp*r21))+(((-0.05165202)*cj6*gclwh5_1*rxp0_2))+(((-2.0)*gclwh11_1*npy*sj6*(pz*pz)))+(((0.0002)*cj6*gclwh13_15*r20*rxp0_2*sj6))+(((-0.001401930041)*gclwh11_15*(cj6*cj6)*(r20*r20)))+(((0.02)*gclwh5_1*(pz*pz)))+(((-0.0074858)*cj6*gclwh7_2*pp*r21))+(((-0.001399930041)*gclwh9_15*r20*r21*(sj6*sj6)))+(((-0.00138)*gclwh5_1*pz))+(((-0.00674192696225811)*gclwh9_2*r20*sj6))+(((-0.0096733172829)*gclwh11_1*r21*sj6)));
op[55]=((((0.2211455036)*cj6*gclwh15_13*rxp1_2))+(((0.02)*gclwh15_9*rxp2_2))+(((0.138)*cj6*gclwh11_11*npx*pz))+(((-0.1399930041)*cj6*gclwh9_9*r21))+(((-0.05165202)*gclwh5_11*rxp1_2*sj6))+(((0.2211455036)*cj6*gclwh5_13*rxp0_2))+(((0.29542)*gclwh7_13*pp*r22))+(((0.069)*gclwh11_11*pp*r21*sj6))+(((-0.0074858)*gclwh7_9*r20*sj6))+(((-0.29542)*cj6*gclwh11_13*pp*r20))+(((0.0005165202)*gclwh7_11*r20*sj6))+(((-0.138)*cj6*gclwh9_11*npy*pz))+(((0.29542)*gclwh9_13*pp*r20*sj6))+(((0.0074858)*gclwh9_9*r22))+(((0.05165202)*cj6*gclwh5_11*rxp0_2))+(((-0.00138)*gclwh15_11*rxp2_2))+(((-2.0)*cj6*gclwh11_9*npx*pz))+(((0.0096595172829)*cj6*gclwh9_11*r21))+(((0.00138)*gclwh13_11*rxp0_2*sj6))+(((-0.138)*gclwh9_11*npx*pz*sj6))+(((0.00138)*gclwh5_11*pz))+(((0.0096733172829)*gclwh11_11*r21*sj6))+(((-0.1399930041)*gclwh9_9*r20*sj6))+(((-0.2211455036)*gclwh5_13*rxp1_2*sj6))+(((0.002211455036)*cj6*gclwh7_13*r21))+(((-0.041415817271222)*cj6*gclwh11_13*r20))+(((0.0096595172829)*gclwh7_11*r22))+(((-1.0)*cj6*gclwh9_9*pp*r21))+(((0.041356733271222)*gclwh9_13*r20*sj6))+(((0.002211455036)*gclwh7_13*r20*sj6))+(((-0.02)*gclwh5_9*pz))+(((-1.0)*gclwh9_9*pp*r20*sj6))+(((0.069)*gclwh7_11*pp*r22))+(((-0.59084)*cj6*gclwh9_13*npy*pz))+(((0.1401930041)*cj6*gclwh11_9*r20))+(((-0.74858)*cj6*gclwh5_9*rxp0_2))+(((0.2211455036)*gclwh13_13*rxp2_2))+(((0.041415817271222)*gclwh11_13*r21*sj6))+(((-0.02)*gclwh13_9*rxp0_2*sj6))+(((0.0059084)*gclwh13_13*rxp0_2*sj6))+(((2.0)*gclwh11_9*npy*pz*sj6))+(((-1.0)*gclwh11_9*pp*r21*sj6))+(((-0.0096733172829)*cj6*gclwh11_11*r20))+(((0.00138)*cj6*gclwh13_11*rxp1_2))+(((0.0059084)*gclwh5_13*pz))+(((0.59084)*cj6*gclwh11_13*npx*pz))+(((-0.59084)*gclwh9_13*npx*pz*sj6))+(((0.29542)*cj6*gclwh9_13*pp*r21))+(((0.069)*cj6*gclwh9_11*pp*r21))+(((0.29542)*gclwh11_13*pp*r21*sj6))+(((-0.002211455036)*gclwh9_13*r22))+(((-1.0)*gclwh7_9*pp*r22))+(((2.0)*cj6*gclwh9_9*npy*pz))+(((0.0059084)*cj6*gclwh13_13*rxp1_2))+(((-0.74858)*gclwh13_9*rxp2_2))+(((0.069)*gclwh9_11*pp*r20*sj6))+(((0.0005165202)*cj6*gclwh7_11*r21))+((cj6*gclwh11_9*pp*r20))+(((0.05165202)*cj6*gclwh15_11*rxp1_2))+(((-0.59084)*gclwh11_13*npy*pz*sj6))+(((0.05165202)*gclwh15_11*rxp0_2*sj6))+(((-0.0005165202)*gclwh9_11*r22))+(((-0.0074858)*cj6*gclwh7_9*r21))+(((-0.138)*gclwh7_11*npz*pz))+(((0.0096595172829)*gclwh9_11*r20*sj6))+(((-0.02)*cj6*gclwh13_9*rxp1_2))+(((-0.1399930041)*gclwh7_9*r22))+(((-0.0059084)*gclwh15_13*rxp2_2))+(((2.0)*gclwh9_9*npx*pz*sj6))+(((-0.069)*cj6*gclwh11_11*pp*r20))+(((0.041356733271222)*cj6*gclwh9_13*r21))+(((0.05165202)*gclwh13_11*rxp2_2))+(((0.74858)*gclwh5_9*rxp1_2*sj6))+(((-0.74858)*gclwh15_9*rxp0_2*sj6))+(((-0.59084)*gclwh7_13*npz*pz))+(((-0.1401930041)*gclwh11_9*r21*sj6))+(((2.0)*gclwh7_9*npz*pz))+(((0.041356733271222)*gclwh7_13*r22))+(((-0.138)*gclwh11_11*npy*pz*sj6))+(((0.2211455036)*gclwh15_13*rxp0_2*sj6))+(((-0.74858)*cj6*gclwh15_9*rxp1_2)));
op[56]=(((x603*x624))+(((0.0193190345658)*x624))+((gclwh11_15*x588*x603))+((x594*x595))+((x612*x653))+(((-1.0)*x589*x591))+((x587*x657))+(((-1.0)*gclwh9_15*x638*x643))+((x595*x612))+((x588*x589))+((gclwh9_15*x594*x603))+(((-1.0)*gclwh9_15*x613*x638))+(((0.00276)*x658))+(((-1.0)*x638*x639))+(((-1.0)*x599*x604))+((x594*x653))+(((0.00276)*x636))+(((-1.0)*gclwh11_15*x591*x603))+(((0.00276)*gclwh13_15*x607))+((x607*x610))+((gclwh9_15*x603*x612))+(((-1.0)*gclwh15_15*x606))+((x604*x630))+(((-1.0)*gclwh9_15*x656))+(((0.10330404)*x609))+((x610*x615))+(((-1.0)*x590*x657)));
op[57]=((0.1840679528)+(((-1.0)*gclwh9_4*x605*x643))+((gclwh11_4*x588*x602))+((gclwh11_15*x590*x627))+(((-1.0)*gclwh15_4*x593))+(((-1.0)*gclwh9_4*x605*x613))+(((-1.0)*x594*x611))+((gclwh13_4*x644))+(((-1.0)*gclwh11_4*x591*x602))+(((-0.0118168)*x658))+((x591*x618))+(((-1.0)*gclwh11_15*x587*x627))+(((-1.0)*x611*x612))+(((-0.4422910072)*x609))+((gclwh15_15*x621))+(((-1.0)*gclwh11_4*x590*x605))+(((-1.0)*gclwh9_15*x594*x597))+(((-1.0)*x615*x646))+((x588*x642))+((gclwh9_15*x613*x627))+((x615*x650))+(((-1.0)*x630*x651))+(((-1.0)*gclwh11_15*x588*x597))+((x594*x637))+((x594*x633))+(((-1.0)*x607*x646))+(((-1.0)*gclwh9_15*x597*x612))+(((0.2799860082)*x654))+((x599*x651))+(((-1.0)*x588*x618))+(((-1.0)*gclwh7_4*npz*x605))+((x602*x654))+((x612*x637))+((x612*x633))+(((-1.0)*gclwh9_4*x598))+((gclwh9_4*x594*x602))+(((-1.0)*x599*x631))+(((-0.082713466542444)*x624))+(((-1.0)*gclwh9_15*x659))+((gclwh5_4*x617))+(((-0.0118168)*x636))+((gclwh9_4*x602*x612))+((gclwh11_4*x587*x605))+((gclwh9_15*x627*x643))+((x627*x639))+((x630*x631))+(((-0.082713466542444)*gclwh9_15*x612))+(((-1.0)*x591*x642))+((x607*x650))+(((-1.0)*x597*x624))+((gclwh9_15*x648))+(((-0.0118168)*gclwh13_15*x607))+((x607*x622))+((gclwh11_15*x591*x597))+((x615*x622)));
op[58]=((((-0.00675155876779811)*gclwh11_2*r21*sj6))+(((-7.4858e-5)*cj6*gclwh7_15*sj6*(r21*r21)))+(((-0.00674192696225811)*cj6*gclwh9_2*r21))+(((-0.02)*gclwh15_1*pz*rxp2_2))+(((-0.02)*cj6*gclwh9_15*npx*pz*r20*sj6))+(((-1.33942)*gclwh7_11*npz*pz))+(((-0.1883520318)*gclwh11_2*pp*r21*sj6))+(((-0.0074858)*cj6*gclwh5_15*r20*rxp1_2*sj6))+(((-0.001399930041)*gclwh7_15*r21*r22*sj6))+(((-0.02)*cj6*gclwh13_2*pp*rxp1_2))+(((0.1401930041)*gclwh11_1*pz*r21*sj6))+(((-0.005013315118)*gclwh9_11*r22))+(((-0.036050884955666)*gclwh15_2*rxp0_2*sj6))+(((-0.036050884955666)*cj6*gclwh5_2*rxp0_2))+(((-0.0074858)*cj6*gclwh5_15*r21*rxp0_2*sj6))+(((-1.0)*gclwh9_2*r20*sj6*(pp*pp)))+(((0.0963180554)*gclwh11_2*npy*pz*sj6))+(((0.0002)*gclwh13_15*r20*rxp1_2*(cj6*cj6)))+(((0.001399930041)*gclwh9_15*r20*r21*(cj6*cj6)))+(((-0.093888656775811)*cj6*gclwh11_11*r20))+(((0.0074858)*cj6*gclwh7_1*pz*r21))+(((-0.00036050884955666)*gclwh7_2*r20*sj6))+(((0.05165202)*cj6*gclwh15_1*rxp1_2))+(((0.00036050884955666)*gclwh9_2*r22))+(((0.01)*cj6*gclwh9_15*pp*sj6*(r20*r20)))+(((-0.138)*gclwh11_1*npy*pz*sj6))+(((0.5013315118)*cj6*gclwh5_11*rxp0_2))+(((0.74858)*gclwh15_1*pz*rxp0_2*sj6))+(((-0.05165202)*gclwh5_1*rxp1_2*sj6))+(((-0.036050884955666)*cj6*gclwh15_2*rxp1_2))+(((-0.66971)*cj6*gclwh11_11*pp*r20))+(((-0.0002)*cj6*gclwh15_15*r20*rxp2_2))+(((0.0074858)*gclwh7_1*pz*r20*sj6))+(((0.0963180554)*cj6*gclwh9_2*npy*pz))+(((0.001399930041)*cj6*gclwh7_15*r20*r22))+(((-0.02)*gclwh5_2*pp*pz))+(((0.093888656775811)*gclwh11_11*r21*sj6))+(((0.0002)*gclwh15_15*r21*rxp2_2*sj6))+(((-1.0)*gclwh11_2*r21*sj6*(pp*pp)))+(((2.0)*gclwh9_2*npx*pp*pz*sj6))+(((0.0096595172829)*gclwh9_1*r20*sj6))+(((1.33942)*cj6*gclwh11_11*npx*pz))+(((0.0074858)*gclwh5_15*r21*rxp1_2*(sj6*sj6)))+(((-0.0096733172829)*cj6*gclwh11_1*r20))+(((0.02)*cj6*gclwh13_1*pz*rxp1_2))+(((0.66971)*gclwh11_11*pp*r21*sj6))+(((-0.00036050884955666)*cj6*gclwh7_2*r21))+(((0.00138)*cj6*gclwh13_1*rxp1_2))+(((-0.01)*gclwh7_15*pp*r21*r22*sj6))+(((-0.138)*cj6*gclwh9_1*npy*pz))+(((-0.0002)*cj6*gclwh13_15*r21*rxp1_2*sj6))+(((0.1399930041)*cj6*gclwh9_1*pz*r21))+(((0.0963180554)*gclwh7_2*npz*pz))+(((0.5013315118)*gclwh15_11*rxp0_2*sj6))+(((-1.0)*cj6*gclwh9_2*r21*(pp*pp)))+(((0.001399930041)*cj6*gclwh9_15*sj6*(r20*r20)))+(((0.005013315118)*cj6*gclwh7_11*r21))+(((0.02)*gclwh11_15*npx*pz*r20*(cj6*cj6)))+(((0.0005165202)*gclwh7_1*r20*sj6))+(((0.1399930041)*gclwh7_1*pz*r22))+(((-0.0133942)*gclwh15_11*rxp2_2))+(((0.02)*gclwh13_1*pz*rxp0_2*sj6))+(((-0.02)*cj6*gclwh11_15*npx*pz*r21*sj6))+(((0.02)*cj6*gclwh11_15*pp*r20*r21*sj6))+(((2.0)*gclwh7_2*npz*pp*pz))+(((0.069)*gclwh11_1*pp*r21*sj6))+(((7.4858e-5)*gclwh7_15*r20*r21*(cj6*cj6)))+(((0.02)*cj6*gclwh9_15*npy*pz*r21*sj6))+(((0.5013315118)*cj6*gclwh15_11*rxp1_2))+(((-0.74858)*cj6*gclwh5_2*pp*rxp0_2))+(((0.05165202)*cj6*gclwh5_1*rxp0_2))+(((0.069)*gclwh7_1*pp*r22))+(((0.0074858)*gclwh15_15*r20*rxp1_2*(cj6*cj6)))+(((-7.4858e-5)*gclwh7_15*r20*r21*(sj6*sj6)))+(((0.0074858)*cj6*gclwh13_15*r20*rxp2_2))+(((0.00138)*gclwh5_1*pz))+(((0.002803860082)*cj6*gclwh11_15*r20*r21*sj6))+(((-0.01)*gclwh11_15*pp*(cj6*cj6)*(r20*r20)))+(((-0.0074858)*gclwh15_15*r21*rxp0_2*(sj6*sj6)))+((cj6*gclwh9_1*pp*pz*r21))+(((0.138)*cj6*gclwh11_1*npx*pz))+(((-1.33942)*cj6*gclwh9_11*npy*pz))+(((0.74858)*gclwh13_1*pz*rxp2_2))+(((-0.0963180554)*cj6*gclwh11_2*npx*pz))+(((-0.1401930041)*cj6*gclwh11_1*pz*r20))+(((-0.000963180554)*gclwh13_2*rxp0_2*sj6))+(((7.4858e-5)*gclwh9_15*r21*r22*sj6))+(((-0.5013315118)*gclwh5_11*rxp1_2*sj6))+(((0.5013315118)*gclwh13_11*rxp2_2))+(((-0.000963180554)*cj6*gclwh13_2*rxp1_2))+(((7.4858e-5)*cj6*gclwh7_15*sj6*(r20*r20)))+(((-0.00674192696225811)*gclwh7_2*r22))+(((-0.1881520318)*gclwh9_2*pp*r20*sj6))+(((-0.138)*gclwh9_1*npx*pz*sj6))+(((0.02)*gclwh9_15*npx*pz*r21*(sj6*sj6)))+(((-0.001401930041)*gclwh11_15*(r21*r21)*(sj6*sj6)))+(((-0.0074858)*gclwh7_2*pp*r20*sj6))+(((0.0074858)*gclwh5_15*r20*rxp0_2*(cj6*cj6)))+(((-1.0)*gclwh7_2*r22*(pp*pp)))+(((0.0074858)*gclwh9_2*pp*r22))+(((-1.33942)*gclwh9_11*npx*pz*sj6))+(((0.02)*gclwh11_15*npy*pz*r21*(sj6*sj6)))+((gclwh9_1*pp*pz*r20*sj6))+(((-1.0)*cj6*gclwh11_1*pp*pz*r20))+(((-0.0074858)*gclwh9_1*pz*r22))+(((0.093754714775811)*cj6*gclwh9_11*r21))+(((-0.01)*gclwh9_15*pp*r20*r21*(sj6*sj6)))+(((0.000963180554)*gclwh15_2*rxp2_2))+(((0.069)*cj6*gclwh9_1*pp*r21))+(((-0.0074858)*cj6*gclwh15_15*r21*rxp1_2*sj6))+(((0.74858)*gclwh5_2*pp*rxp1_2*sj6))+(((0.66971)*gclwh7_11*pp*r22))+(((-0.01)*cj6*gclwh9_15*pp*sj6*(r21*r21)))+(((-0.74858)*gclwh13_2*pp*rxp2_2))+(((0.0133942)*cj6*gclwh13_11*rxp1_2))+(((-0.02)*gclwh13_2*pp*rxp0_2*sj6))+(((-0.02)*gclwh9_15*npy*pz*r20*(cj6*cj6)))+(((0.093754714775811)*gclwh7_11*r22))+(((-7.4858e-5)*cj6*gclwh9_15*r20*r22))+(((0.01)*cj6*gclwh7_15*pp*r20*r22))+(((-0.74858)*cj6*gclwh15_2*pp*rxp1_2))+(((-0.1881520318)*cj6*gclwh9_2*pp*r21))+(((-1.33942)*gclwh11_11*npy*pz*sj6))+(((-2.0)*gclwh7_1*npz*(pz*pz)))+(((0.00138)*gclwh13_1*rxp0_2*sj6))+(((0.093754714775811)*gclwh9_11*r20*sj6))+(((0.0133942)*gclwh13_11*rxp0_2*sj6))+((gclwh7_1*pp*pz*r22))+(((-0.069)*cj6*gclwh11_1*pp*r20))+((gclwh11_1*pp*pz*r21*sj6))+(((-0.0002)*gclwh5_15*pz*r21*sj6))+(((2.0)*cj6*gclwh9_2*npy*pp*pz))+(((0.74858)*cj6*gclwh5_1*pz*rxp0_2))+(((0.036050884955666)*gclwh5_2*rxp1_2*sj6))+(((0.0002)*cj6*gclwh5_15*pz*r20))+(((-0.001399930041)*cj6*gclwh9_15*sj6*(r21*r21)))+(((0.05165202)*gclwh13_1*rxp2_2))+(((-0.138)*gclwh7_1*npz*pz))+(((0.66971)*gclwh9_11*pp*r20*sj6))+(((0.00675155876779811)*cj6*gclwh11_2*r20))+(((-0.02)*cj6*gclwh7_15*npz*pz*r20))+(((0.1883520318)*cj6*gclwh11_2*pp*r20))+(((0.02)*gclwh15_2*pp*rxp2_2))+(((0.0005165202)*cj6*gclwh7_1*r21))+(((-0.74858)*gclwh5_1*pz*rxp1_2*sj6))+(((-0.000963180554)*gclwh5_2*pz))+(((-2.0)*cj6*gclwh9_1*npy*(pz*pz)))+(((-0.02)*cj6*gclwh11_15*npy*pz*r20*sj6))+(((0.1399930041)*gclwh9_1*pz*r20*sj6))+(((-0.036050884955666)*gclwh13_2*rxp2_2))+(((0.0096733172829)*gclwh11_1*r21*sj6))+(((-0.01)*gclwh11_15*pp*(r21*r21)*(sj6*sj6)))+(((0.069)*gclwh9_1*pp*r20*sj6))+(((-0.0002)*gclwh13_15*r21*rxp0_2*(sj6*sj6)))+(((-0.0005165202)*gclwh9_1*r22))+(((0.0096595172829)*gclwh7_1*r22))+(((2.0)*cj6*gclwh11_1*npx*(pz*pz)))+(((-0.0074858)*gclwh13_15*r21*rxp2_2*sj6))+(((0.0963180554)*gclwh9_2*npx*pz*sj6))+(((-0.1881520318)*gclwh7_2*pp*r22))+(((-2.0)*cj6*gclwh11_2*npx*pp*pz))+(((2.0)*gclwh11_2*npy*pp*pz*sj6))+((cj6*gclwh11_2*r20*(pp*pp)))+(((0.005013315118)*gclwh7_11*r20*sj6))+(((0.02)*gclwh7_15*npz*pz*r21*sj6))+(((-2.0)*gclwh9_1*npx*sj6*(pz*pz)))+(((0.0133942)*gclwh5_11*pz))+(((0.74858)*cj6*gclwh15_1*pz*rxp1_2))+(((0.01)*gclwh9_15*pp*r20*r21*(cj6*cj6)))+(((-0.74858)*gclwh15_2*pp*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh15_15*r20*rxp0_2*sj6))+(((0.66971)*cj6*gclwh9_11*pp*r21))+(((-2.0)*gclwh11_1*npy*sj6*(pz*pz)))+(((0.0002)*cj6*gclwh13_15*r20*rxp0_2*sj6))+(((-0.001401930041)*gclwh11_15*(cj6*cj6)*(r20*r20)))+(((0.02)*gclwh5_1*(pz*pz)))+(((-0.0074858)*cj6*gclwh7_2*pp*r21))+(((-0.001399930041)*gclwh9_15*r20*r21*(sj6*sj6)))+(((0.0096595172829)*cj6*gclwh9_1*r21))+(((-0.00674192696225811)*gclwh9_2*r20*sj6))+(((-0.00138)*gclwh15_1*rxp2_2))+(((0.05165202)*gclwh15_1*rxp0_2*sj6)));
IkReal x660=(npy*pz);
IkReal x661=(cj6*gclwh14_14);
IkReal x662=(r20*sj6);
IkReal x663=((0.0149716)*gclwh12_0);
IkReal x664=(r21*sj6);
IkReal x665=((0.10330404)*rxp1_2);
IkReal x666=(gclwh10_14*sj6);
IkReal x667=((0.59084)*pp);
IkReal x668=((0.138)*pp);
IkReal x669=(gclwh12_0*r22);
IkReal x670=(cj6*r20);
IkReal x671=((1.49716)*gclwh8_0);
IkReal x672=(rxp0_2*sj6);
IkReal x673=(gclwh12_14*r22);
IkReal x674=(cj6*rxp1_2);
IkReal x675=((0.04)*gclwh6_0);
IkReal x676=(gclwh14_14*r22);
IkReal x677=(gclwh6_14*rxp2_2);
IkReal x678=(gclwh10_14*pz);
IkReal x679=((4.0)*sj6);
IkReal x680=((0.0010330404)*gclwh12_14);
IkReal x681=((2.0)*pp);
IkReal x682=((0.004422910072)*gclwh12_14);
IkReal x683=(npz*pz);
IkReal x684=((0.2799860082)*gclwh14_0);
IkReal x685=(cj6*gclwh14_0);
IkReal x686=((1.49716)*gclwh10_0);
IkReal x687=(cj6*rxp0_2);
IkReal x688=(gclwh8_14*rxp2_2);
IkReal x689=(npx*pz);
IkReal x690=((1.18168)*gclwh4_14);
IkReal x691=((0.2803860082)*gclwh4_0);
IkReal x692=((0.276)*sj6);
IkReal x693=((0.0118168)*gclwh6_14);
IkReal x694=(cj6*r21);
IkReal x695=((0.00276)*gclwh6_14);
IkReal x696=((0.4422910072)*gclwh8_14);
IkReal x697=(gclwh4_0*x681);
IkReal x698=(gclwh4_14*x670);
op[59]=(((gclwh9_9*pp*r20*sj6))+(((-0.29542)*gclwh7_13*pp*r22))+(((0.138)*cj6*gclwh11_11*npx*pz))+(((2.0)*cj6*gclwh11_9*npx*pz))+(((-0.05165202)*gclwh5_11*rxp1_2*sj6))+((cj6*gclwh9_9*pp*r21))+(((-0.59084)*cj6*gclwh11_13*npx*pz))+(((0.74858)*cj6*gclwh15_9*rxp1_2))+(((-0.2211455036)*gclwh15_13*rxp0_2*sj6))+(((0.069)*gclwh11_11*pp*r21*sj6))+(((-0.041415817271222)*gclwh11_13*r21*sj6))+(((-0.041356733271222)*gclwh9_13*r20*sj6))+(((0.0005165202)*gclwh7_11*r20*sj6))+(((-0.138)*cj6*gclwh9_11*npy*pz))+(((-0.2211455036)*cj6*gclwh5_13*rxp0_2))+(((-2.0)*gclwh9_9*npx*pz*sj6))+(((0.59084)*gclwh7_13*npz*pz))+(((0.59084)*cj6*gclwh9_13*npy*pz))+(((0.05165202)*cj6*gclwh5_11*rxp0_2))+(((-0.1401930041)*cj6*gclwh11_9*r20))+(((-0.0059084)*cj6*gclwh13_13*rxp1_2))+(((-0.00138)*gclwh15_11*rxp2_2))+(((0.0096595172829)*cj6*gclwh9_11*r21))+(((0.00138)*gclwh13_11*rxp0_2*sj6))+(((-0.138)*gclwh9_11*npx*pz*sj6))+(((-1.0)*cj6*gclwh11_9*pp*r20))+(((-0.2211455036)*gclwh13_13*rxp2_2))+(((0.0074858)*cj6*gclwh7_9*r21))+(((0.00138)*gclwh5_11*pz))+(((0.0096733172829)*gclwh11_11*r21*sj6))+(((0.1399930041)*gclwh7_9*r22))+(((-0.0074858)*gclwh9_9*r22))+(((-0.2211455036)*cj6*gclwh15_13*rxp1_2))+(((0.0096595172829)*gclwh7_11*r22))+(((0.29542)*cj6*gclwh11_13*pp*r20))+(((0.069)*gclwh7_11*pp*r22))+(((-0.041356733271222)*cj6*gclwh9_13*r21))+(((-0.02)*gclwh15_9*rxp2_2))+(((0.1399930041)*cj6*gclwh9_9*r21))+((gclwh7_9*pp*r22))+(((-0.002211455036)*gclwh7_13*r20*sj6))+(((-0.29542)*gclwh9_13*pp*r20*sj6))+(((-0.0096733172829)*cj6*gclwh11_11*r20))+(((0.00138)*cj6*gclwh13_11*rxp1_2))+(((0.069)*cj6*gclwh9_11*pp*r21))+(((0.1401930041)*gclwh11_9*r21*sj6))+(((0.002211455036)*gclwh9_13*r22))+(((0.069)*gclwh9_11*pp*r20*sj6))+(((0.02)*gclwh5_9*pz))+(((0.0005165202)*cj6*gclwh7_11*r21))+(((-0.0059084)*gclwh13_13*rxp0_2*sj6))+(((0.05165202)*cj6*gclwh15_11*rxp1_2))+(((-0.29542)*gclwh11_13*pp*r21*sj6))+((gclwh11_9*pp*r21*sj6))+(((0.05165202)*gclwh15_11*rxp0_2*sj6))+(((-2.0)*gclwh11_9*npy*pz*sj6))+(((0.2211455036)*gclwh5_13*rxp1_2*sj6))+(((-2.0)*gclwh7_9*npz*pz))+(((-0.0005165202)*gclwh9_11*r22))+(((0.041415817271222)*cj6*gclwh11_13*r20))+(((0.74858)*gclwh15_9*rxp0_2*sj6))+(((-0.138)*gclwh7_11*npz*pz))+(((-2.0)*cj6*gclwh9_9*npy*pz))+(((0.0096595172829)*gclwh9_11*r20*sj6))+(((-0.74858)*gclwh5_9*rxp1_2*sj6))+(((0.02)*gclwh13_9*rxp0_2*sj6))+(((0.59084)*gclwh9_13*npx*pz*sj6))+(((0.0059084)*gclwh15_13*rxp2_2))+(((0.74858)*cj6*gclwh5_9*rxp0_2))+(((-0.069)*cj6*gclwh11_11*pp*r20))+(((-0.041356733271222)*gclwh7_13*r22))+(((-0.29542)*cj6*gclwh9_13*pp*r21))+(((0.05165202)*gclwh13_11*rxp2_2))+(((-0.002211455036)*cj6*gclwh7_13*r21))+(((0.74858)*gclwh13_9*rxp2_2))+(((0.0074858)*gclwh7_9*r20*sj6))+(((-0.138)*gclwh11_11*npy*pz*sj6))+(((0.59084)*gclwh11_13*npy*pz*sj6))+(((-0.0059084)*gclwh5_13*pz))+(((0.02)*cj6*gclwh13_9*rxp1_2))+(((0.1399930041)*gclwh9_9*r20*sj6)));
op[60]=((-0.0825119764)+(((-0.0059084)*gclwh6_12*rxp0_2*sj6))+((cj6*gclwh4_8*pp*r20))+(((-0.02)*gclwh6_8*rxp0_2*sj6))+(((0.00138)*cj6*gclwh6_10*rxp1_2))+(((-0.2211455036)*cj6*gclwh8_12*rxp1_2))+(((0.1399930041)*gclwh12_8*r22))+(((-0.2211455036)*gclwh8_12*rxp0_2*sj6))+(((-2.0)*cj6*gclwh14_8*npy*pz))+((gclwh14_8*pp*r20*sj6))+(((-0.069)*cj6*gclwh14_10*pp*r21))+(((0.29542)*gclwh14_12*pp*r20*sj6))+(((0.0059084)*gclwh10_12*pz))+(((0.0074858)*cj6*gclwh12_8*r21))+(((-0.74858)*cj6*gclwh8_8*rxp1_2))+(((-0.00138)*gclwh8_10*rxp2_2))+(((0.138)*gclwh12_10*npz*pz))+(((-0.1401930041)*gclwh4_8*r21*sj6))+(((-0.069)*gclwh12_10*pp*r22))+((cj6*gclwh14_8*pp*r21))+(((0.05165202)*gclwh10_10*rxp1_2*sj6))+(((-0.02)*cj6*gclwh6_8*rxp1_2))+(((0.041356733271222)*gclwh14_12*r20*sj6))+(((-0.0096733172829)*cj6*gclwh4_10*r20))+(((0.29542)*gclwh12_12*pp*r22))+(((0.138)*gclwh14_10*npx*pz*sj6))+(((0.0059084)*gclwh8_12*rxp2_2))+(((-0.05165202)*cj6*gclwh10_10*rxp0_2))+(((-0.59084)*gclwh14_12*npx*pz*sj6))+(((0.1399930041)*cj6*gclwh14_8*r21))+(((0.74858)*cj6*gclwh10_8*rxp0_2))+(((-0.0059084)*cj6*gclwh6_12*rxp1_2))+(((-0.0005165202)*cj6*gclwh12_10*r21))+(((-0.0096595172829)*cj6*gclwh14_10*r21))+(((-0.59084)*cj6*gclwh14_12*npy*pz))+(((-2.0)*gclwh12_8*npz*pz))+(((-0.74858)*gclwh6_8*rxp2_2))+(((-0.2211455036)*gclwh10_12*rxp1_2*sj6))+(((-0.0096595172829)*gclwh12_10*r22))+(((-0.2211455036)*gclwh6_12*rxp2_2))+(((-0.29542)*gclwh4_12*pp*r21*sj6))+(((0.002211455036)*gclwh12_12*r20*sj6))+(((-0.069)*gclwh14_10*pp*r20*sj6))+(((-0.069)*cj6*gclwh4_10*pp*r20))+(((0.00138)*gclwh6_10*rxp0_2*sj6))+(((0.041356733271222)*gclwh12_12*r22))+(((0.0074858)*gclwh12_8*r20*sj6))+(((0.05165202)*cj6*gclwh8_10*rxp1_2))+(((0.02)*gclwh10_8*pz))+((gclwh12_8*pp*r22))+(((0.138)*cj6*gclwh14_10*npy*pz))+(((0.138)*cj6*gclwh4_10*npx*pz))+(((0.02)*gclwh8_8*rxp2_2))+(((0.1401930041)*cj6*gclwh4_8*r20))+(((-0.0005165202)*gclwh12_10*r20*sj6))+(((-0.00138)*gclwh10_10*pz))+(((-0.74858)*gclwh8_8*rxp0_2*sj6))+(((0.05165202)*gclwh6_10*rxp2_2))+(((-0.74858)*gclwh10_8*rxp1_2*sj6))+(((-0.59084)*gclwh12_12*npz*pz))+(((0.29542)*cj6*gclwh14_12*pp*r21))+(((-0.002211455036)*gclwh14_12*r22))+(((-2.0)*cj6*gclwh4_8*npx*pz))+(((-0.0096595172829)*gclwh14_10*r20*sj6))+(((0.069)*gclwh4_10*pp*r21*sj6))+(((-0.59084)*cj6*gclwh4_12*npx*pz))+(((0.59084)*gclwh4_12*npy*pz*sj6))+(((0.041415817271222)*cj6*gclwh4_12*r20))+(((-0.0074858)*gclwh14_8*r22))+(((0.1399930041)*gclwh14_8*r20*sj6))+(((-2.0)*gclwh14_8*npx*pz*sj6))+(((-1.0)*gclwh4_8*pp*r21*sj6))+(((0.0096733172829)*gclwh4_10*r21*sj6))+(((-0.041415817271222)*gclwh4_12*r21*sj6))+(((2.0)*gclwh4_8*npy*pz*sj6))+(((0.041356733271222)*cj6*gclwh14_12*r21))+(((-0.138)*gclwh4_10*npy*pz*sj6))+(((0.05165202)*gclwh8_10*rxp0_2*sj6))+(((0.0005165202)*gclwh14_10*r22))+(((0.002211455036)*cj6*gclwh12_12*r21))+(((0.2211455036)*cj6*gclwh10_12*rxp0_2))+(((0.29542)*cj6*gclwh4_12*pp*r20)));
op[61]=((-0.04076796)+(((0.0963180554)*cj6*gclwh4_6*npx*pz))+(((-0.07887)*cj6*gclwh4_10*pp*r20))+(((0.15774)*cj6*gclwh14_10*npy*pz))+(((-0.001401930041)*gclwh4_14*(r21*r21)*(sj6*sj6)))+(((0.00036050884955666)*cj6*gclwh3_6*r21))+(((-0.0074858)*cj6*gclwh3_5*pz*r21))+(((0.0005165202)*cj6*gclwh3_5*r21))+(((-0.000590405046)*cj6*gclwh12_10*r21))+((gclwh1_6*r20*sj6*(pp*pp)))+(((-0.0005165202)*cj6*gclwh12_5*r21))+(((0.0918339764)*gclwh3_6*pp*r22))+(((0.0096595172829)*gclwh3_5*r22))+(((-0.05165202)*cj6*gclwh10_5*rxp0_2))+(((-0.01)*cj6*gclwh12_14*pp*r20*r22))+(((0.0963180554)*gclwh12_6*npz*pz))+(((-0.01)*gclwh14_14*pp*r20*r21*(cj6*cj6)))+(((0.0074858)*cj6*gclwh8_14*r20*rxp0_2*sj6))+(((0.069)*gclwh1_5*pp*r20*sj6))+(((-1.0)*cj6*gclwh4_6*r20*(pp*pp)))+(((0.0074858)*gclwh14_6*pp*r22))+(((0.0590405046)*gclwh8_10*rxp0_2*sj6))+(((-0.0002)*cj6*gclwh8_14*r20*rxp2_2))+(((-0.0074858)*gclwh10_14*r21*rxp1_2*(sj6*sj6)))+(((0.05165202)*cj6*gclwh8_5*rxp1_2))+(((-0.069)*gclwh12_5*pp*r22))+(((-0.1401930041)*gclwh4_5*pz*r21*sj6))+(((0.0074858)*cj6*gclwh12_5*pz*r21))+(((0.0074858)*cj6*gclwh10_14*r20*rxp1_2*sj6))+(((-0.00674192696225811)*gclwh1_6*r20*sj6))+(((0.15774)*gclwh14_10*npx*pz*sj6))+(((-0.0015774)*gclwh8_10*rxp2_2))+(((-0.0074858)*cj6*gclwh8_14*r21*rxp1_2*sj6))+(((-0.00138)*gclwh8_5*rxp2_2))+(((-0.74858)*cj6*gclwh10_6*pp*rxp0_2))+(((2.0)*gclwh1_5*npx*sj6*(pz*pz)))+(((0.0074858)*gclwh3_6*pp*r20*sj6))+(((-0.02)*gclwh6_5*pz*rxp0_2*sj6))+(((0.02)*cj6*gclwh6_6*pp*rxp1_2))+(((-0.07887)*cj6*gclwh14_10*pp*r21))+(((-0.0096595172829)*cj6*gclwh14_5*r21))+(((-0.069)*gclwh14_5*pp*r20*sj6))+(((-0.1881520318)*gclwh12_6*pp*r22))+(((0.01)*cj6*gclwh14_14*pp*sj6*(r21*r21)))+(((-7.4858e-5)*gclwh14_14*r21*r22*sj6))+(((-0.02)*cj6*gclwh14_14*npy*pz*r21*sj6))+(((0.1399930041)*gclwh12_5*pz*r22))+(((0.02)*rxp1_2*sj6))+(((0.000963180554)*gclwh6_6*rxp0_2*sj6))+(((0.1399930041)*cj6*gclwh14_5*pz*r21))+(((-2.0)*cj6*gclwh1_6*npy*pp*pz))+(((-0.0963180554)*gclwh1_6*npx*pz*sj6))+(((-0.000963180554)*gclwh8_6*rxp2_2))+(((-2.0)*cj6*gclwh4_5*npx*(pz*pz)))+(((0.02)*gclwh4_14*npy*pz*r21*(sj6*sj6)))+(((-0.00138)*gclwh10_5*pz))+(((-0.0096595172829)*gclwh1_5*r20*sj6))+(((-0.0074858)*gclwh12_6*pp*r20*sj6))+(((0.0015774)*gclwh6_10*rxp0_2*sj6))+(((-0.07887)*gclwh14_10*pp*r20*sj6))+(((-0.001399930041)*cj6*gclwh12_14*r20*r22))+(((-0.00675155876779811)*cj6*gclwh4_6*r20))+(((0.000963180554)*cj6*gclwh6_6*rxp1_2))+(((-0.01)*gclwh4_14*pp*(r21*r21)*(sj6*sj6)))+(((-0.1881520318)*cj6*gclwh14_6*pp*r21))+(((-0.1883520318)*cj6*gclwh4_6*pp*r20))+((cj6*gclwh4_5*pp*pz*r20))+(((-0.74858)*cj6*gclwh8_5*pz*rxp1_2))+(((0.74858)*gclwh6_6*pp*rxp2_2))+(((-0.02)*cj6*gclwh4_14*npy*pz*r20*sj6))+(((0.02)*gclwh6_6*pp*rxp0_2*sj6))+(((0.74858)*pz))+(((0.0002)*gclwh10_14*pz*r21*sj6))+(((-0.0096595172829)*gclwh14_5*r20*sj6))+(((-1.0)*gclwh4_5*pp*pz*r21*sj6))+(((0.001399930041)*cj6*gclwh14_14*sj6*(r21*r21)))+(((-0.00674192696225811)*gclwh12_6*r22))+(((-0.001399930041)*gclwh14_14*r20*r21*(cj6*cj6)))+(((0.138)*cj6*gclwh14_5*npy*pz))+(((0.036050884955666)*gclwh6_6*rxp2_2))+(((-0.74858)*gclwh8_5*pz*rxp0_2*sj6))+(((0.0590405046)*gclwh6_10*rxp2_2))+(((0.138)*gclwh3_5*npz*pz))+(((-0.0002)*gclwh6_14*r21*rxp0_2*(sj6*sj6)))+(((-0.000963180554)*gclwh10_6*pz))+(((-2.0)*gclwh12_5*npz*(pz*pz)))+(((0.0963180554)*gclwh14_6*npx*pz*sj6))+(((0.0074858)*cj6*gclwh3_6*pp*r21))+(((-0.0096595172829)*cj6*gclwh1_5*r21))+(((0.74858)*gclwh8_6*pp*rxp0_2*sj6))+(((-0.0590405046)*cj6*gclwh10_10*rxp0_2))+(((-0.02)*cj6*gclwh4_14*npx*pz*r21*sj6))+(((-1.0)*gclwh3_6*r22*(pp*pp)))+(((2.0)*cj6*gclwh4_6*npx*pp*pz))+(((2.0)*cj6*gclwh14_6*npy*pp*pz))+(((-0.069)*gclwh3_5*pp*r22))+(((-0.000590405046)*gclwh12_10*r20*sj6))+(((-1.0)*gclwh12_6*r22*(pp*pp)))+(((0.1399930041)*cj6*gclwh1_5*pz*r21))+(((0.0074858)*cj6*gclwh10_14*r21*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh6_14*r20*rxp2_2))+(((-0.0918339764)*gclwh1_6*pp*r20*sj6))+(((0.0963180554)*cj6*gclwh14_6*npy*pz))+(((-0.1399930041)*gclwh3_5*pz*r22))+(((-2.0)*cj6*gclwh14_5*npy*(pz*pz)))+(((-0.0074858)*gclwh3_5*pz*r20*sj6))+(((7.4858e-5)*cj6*gclwh14_14*r20*r22))+((gclwh14_5*pp*pz*r20*sj6))+(((0.05165202)*gclwh10_5*rxp1_2*sj6))+(((0.0015774)*cj6*gclwh6_10*rxp1_2))+(((0.00138)*cj6*gclwh6_5*rxp1_2))+(((-0.0918339764)*cj6*gclwh1_6*pp*r21))+(((-0.001401930041)*gclwh4_14*(cj6*cj6)*(r20*r20)))+(((-0.15774)*gclwh4_10*npy*pz*sj6))+(((0.0005165202)*gclwh14_5*r22))+(((0.002803860082)*cj6*gclwh4_14*r20*r21*sj6))+(((0.74858)*cj6*gclwh8_6*pp*rxp1_2))+(((7.4858e-5)*gclwh12_14*r20*r21*(sj6*sj6)))+(((-0.02)*cj6*gclwh6_5*pz*rxp1_2))+(((0.0074858)*gclwh8_14*r20*rxp1_2*(cj6*cj6)))+(((-2.0)*gclwh1_6*npx*pp*pz*sj6))+(((2.0)*gclwh4_5*npy*sj6*(pz*pz)))+(((0.00674192696225811)*gclwh3_6*r22))+(((0.001399930041)*gclwh12_14*r21*r22*sj6))+(((-0.00036050884955666)*cj6*gclwh12_6*r21))+(((0.00036050884955666)*gclwh14_6*r22))+(((0.15774)*cj6*gclwh4_10*npx*pz))+(((0.74858)*cj6*gclwh10_5*pz*rxp0_2))+((cj6*gclwh14_5*pp*pz*r21))+(((-0.0074858)*gclwh8_14*r21*rxp0_2*(sj6*sj6)))+(((0.05165202)*gclwh6_5*rxp2_2))+(((-0.069)*cj6*gclwh14_5*pp*r21))+(((0.1399930041)*gclwh1_5*pz*r20*sj6))+(((0.00036050884955666)*gclwh3_6*r20*sj6))+(((-1.0)*cj6*gclwh1_5*pp*pz*r21))+(((-0.0074858)*gclwh6_14*r21*rxp2_2*sj6))+(((-0.02)*gclwh8_6*pp*rxp2_2))+(((-0.01)*cj6*gclwh14_14*pp*sj6*(r20*r20)))+(((-2.0)*gclwh3_5*npz*(pz*pz)))+(((-0.0096733172829)*cj6*gclwh4_5*r20))+((gclwh4_6*r21*sj6*(pp*pp)))+(((0.0005165202)*gclwh3_5*r20*sj6))+(((0.1399930041)*gclwh14_5*pz*r20*sj6))+(((-7.4858e-5)*cj6*gclwh12_14*sj6*(r20*r20)))+(((-0.011041248233367)*cj6*gclwh14_10*r21))+(((0.001399930041)*gclwh14_14*r20*r21*(sj6*sj6)))+(((0.138)*gclwh12_5*npz*pz))+(((-0.74858)*gclwh6_5*pz*rxp2_2))+(((-0.138)*gclwh4_5*npy*pz*sj6))+(((0.036050884955666)*gclwh8_6*rxp0_2*sj6))+(((0.07887)*gclwh4_10*pp*r21*sj6))+(((0.00675155876779811)*gclwh4_6*r21*sj6))+(((-0.0002)*cj6*gclwh6_14*r21*rxp1_2*sj6))+(((-0.02)*gclwh12_14*npz*pz*r21*sj6))+(((-1.0)*gclwh14_6*r20*sj6*(pp*pp)))+(((-0.0963180554)*cj6*gclwh1_6*npy*pz))+(((-0.036050884955666)*cj6*gclwh10_6*rxp0_2))+(((2.0)*gclwh3_6*npz*pp*pz))+(((0.1883520318)*gclwh4_6*pp*r21*sj6))+(((-0.74858)*gclwh10_5*pz*rxp1_2*sj6))+(((-0.011057022233367)*cj6*gclwh4_10*r20))+(((-0.0005165202)*gclwh12_5*r20*sj6))+(((0.0074858)*gclwh12_5*pz*r20*sj6))+(((-0.011041248233367)*gclwh14_10*r20*sj6))+(((0.02)*cj6*gclwh12_14*npz*pz*r20))+(((-0.02)*cj6*rxp0_2))+(((0.15774)*gclwh12_10*npz*pz))+(((0.05165202)*gclwh8_5*rxp0_2*sj6))+(((-1.0)*cj6*gclwh14_6*r21*(pp*pp)))+(((-0.02)*gclwh10_6*pp*pz))+(((-0.00674192696225811)*cj6*gclwh14_6*r21))+(((0.069)*cj6*gclwh1_5*pp*r21))+(((-0.0096595172829)*gclwh12_5*r22))+(((0.02)*gclwh14_14*npy*pz*r20*(cj6*cj6)))+(((0.011057022233367)*gclwh4_10*r21*sj6))+((gclwh12_5*pp*pz*r22))+(((-2.0)*gclwh4_6*npy*pp*pz*sj6))+(((-0.069)*cj6*gclwh4_5*pp*r20))+(((0.0590405046)*cj6*gclwh8_10*rxp1_2))+(((0.0002)*gclwh8_14*r21*rxp2_2*sj6))+(((0.0005165202)*gclwh1_5*r22))+(((0.0002)*cj6*gclwh6_14*r20*rxp0_2*sj6))+(((-0.011041248233367)*gclwh12_10*r22))+(((0.036050884955666)*cj6*gclwh8_6*rxp1_2))+(((0.02)*gclwh8_5*pz*rxp2_2))+(((0.00138)*gclwh6_5*rxp0_2*sj6))+(((2.0)*cj6*gclwh1_5*npy*(pz*pz)))+(((-0.138)*gclwh1_5*npx*pz*sj6))+(((2.0)*gclwh14_6*npx*pp*pz*sj6))+(((-0.0074858)*gclwh1_5*pz*r22))+(((0.01)*gclwh12_14*pp*r21*r22*sj6))+(((-0.0015774)*gclwh10_10*pz))+(((-0.0074858)*gclwh14_5*pz*r22))+((cj6*gclwh1_6*r21*(pp*pp)))+(((0.1401930041)*cj6*gclwh4_5*pz*r20))+(((-0.1881520318)*gclwh14_6*pp*r20*sj6))+(((0.02)*cj6*gclwh4_14*pp*r20*r21*sj6))+(((-0.0002)*cj6*gclwh10_14*pz*r20))+(((0.0096733172829)*gclwh4_5*r21*sj6))+(((-0.07887)*gclwh12_10*pp*r22))+(((0.0590405046)*gclwh10_10*rxp1_2*sj6))+(((0.036050884955666)*gclwh10_6*rxp1_2*sj6))+(((-0.00674192696225811)*cj6*gclwh1_6*r21))+(((-1.0)*gclwh1_5*pp*pz*r20*sj6))+(((-0.00674192696225811)*gclwh14_6*r20*sj6))+(((-2.0)*gclwh14_5*npx*sj6*(pz*pz)))+(((-0.001399930041)*cj6*gclwh14_14*sj6*(r20*r20)))+(((0.01)*gclwh14_14*pp*r20*r21*(sj6*sj6)))+(((-0.00036050884955666)*gclwh12_6*r20*sj6))+(((0.02)*gclwh10_5*(pz*pz)))+(((0.02)*cj6*gclwh14_14*npx*pz*r20*sj6))+(((-0.0074858)*cj6*gclwh12_6*pp*r21))+(((-0.01)*gclwh4_14*pp*(cj6*cj6)*(r20*r20)))+(((-0.02)*gclwh14_14*npx*pz*r21*(sj6*sj6)))+(((0.069)*gclwh4_5*pp*r21*sj6))+(((7.4858e-5)*cj6*gclwh12_14*sj6*(r21*r21)))+(((0.0002)*gclwh6_14*r20*rxp1_2*(cj6*cj6)))+(((0.000590405046)*gclwh14_10*r22))+(((0.00036050884955666)*gclwh1_6*r22))+(((0.0074858)*gclwh1_6*pp*r22))+(((-7.4858e-5)*gclwh12_14*r20*r21*(cj6*cj6)))+(((0.74858)*gclwh10_6*pp*rxp1_2*sj6))+(((0.138)*gclwh14_5*npx*pz*sj6))+(((0.138)*cj6*gclwh4_5*npx*pz))+((gclwh3_5*pp*pz*r22))+(((0.02)*gclwh4_14*npx*pz*r20*(cj6*cj6)))+(((-0.0963180554)*gclwh4_6*npy*pz*sj6))+(((-0.138)*cj6*gclwh1_5*npy*pz))+(((-0.0074858)*gclwh10_14*r20*rxp0_2*(cj6*cj6)))+(((2.0)*gclwh12_6*npz*pp*pz))+(((0.0963180554)*gclwh3_6*npz*pz)));
op[62]=(((x669*x681))+(((-1.0)*x672*x696))+(((-1.0)*x672*x693))+(((0.0118168)*x678))+((x682*x694))+(((0.082713466542444)*r21*x661))+((x686*x687))+(((-4.0)*cj6*gclwh4_0*x689))+(((-0.4422910072)*rxp1_2*x666))+(((-1.49716)*gclwh6_0*rxp2_2))+(((0.082831634542444)*x698))+((sj6*x660*x690))+((x662*x663))+(((-1.18168)*gclwh12_14*x683))+(((-1.18168)*x660*x661))+(((0.082713466542444)*x673))+(((0.04)*gclwh10_0*pz))+((x684*x694))+(((-1.0)*gclwh14_0*x679*x689))+(((-1.0)*cj6*x689*x690))+(((0.4422910072)*gclwh10_14*x687))+((r21*x681*x685))+(((-0.004422910072)*x676))+(((0.04)*gclwh8_0*rxp2_2))+(((-4.0)*x660*x685))+(((-0.0149716)*gclwh14_0*r22))+((gclwh14_14*x662*x667))+((x667*x673))+(((-1.0)*gclwh4_14*x664*x667))+((gclwh4_0*x660*x679))+(((-1.0)*x674*x696))+(((-1.0)*x674*x693))+(((-1.0)*rxp1_2*sj6*x686))+((x663*x694))+(((-1.0)*x671*x672))+(((-1.0)*x671*x674))+(((0.2799860082)*x669))+(((-1.0)*x672*x675))+(((-1.0)*x664*x697))+(((-1.0)*x664*x691))+(((0.082713466542444)*gclwh14_14*x662))+(((-1.0)*x674*x675))+((x670*x691))+((x670*x697))+(((-1.18168)*gclwh14_14*sj6*x689))+((x667*x698))+(((-0.082831634542444)*gclwh4_14*x664))+(((0.0118168)*x688))+((gclwh14_0*x662*x681))+((r21*x661*x667))+(((-4.0)*gclwh12_0*x683))+((x662*x682))+((x662*x684))+(((-0.4422910072)*x677)));
op[63]=((((-0.276)*gclwh12_14*x683))+(((-0.0010330404)*x676))+(((-1.0)*x665*x666))+(((-1.0)*x672*x695))+(((-0.10330404)*gclwh8_14*x672))+((x668*x698))+(((0.0193466345658)*x698))+(((-1.0)*gclwh14_14*x689*x692))+(((0.0193190345658)*gclwh14_14*x662))+(((0.0193190345658)*r21*x661))+((gclwh14_14*x662*x668))+(((-0.276)*x660*x661))+(((-1.0)*gclwh4_14*x664*x668))+(((-0.276)*cj6*gclwh4_14*x689))+((x680*x694))+(((-1.0)*x674*x695))+((x668*x673))+(((0.00276)*x688))+(((-0.10330404)*x677))+((gclwh4_14*x660*x692))+(((0.00276)*x678))+(((0.10330404)*gclwh10_14*x687))+((r21*x661*x668))+(((-1.0)*cj6*gclwh8_14*x665))+((x662*x680))+(((-0.0193466345658)*gclwh4_14*x664))+(((0.0193190345658)*x673)));
op[64]=((0.0825119764)+(((0.2211455036)*cj6*gclwh8_12*rxp1_2))+(((-0.29542)*cj6*gclwh4_12*pp*r20))+(((0.00138)*cj6*gclwh6_10*rxp1_2))+(((-0.2211455036)*cj6*gclwh10_12*rxp0_2))+(((0.2211455036)*gclwh8_12*rxp0_2*sj6))+((gclwh4_8*pp*r21*sj6))+(((0.02)*cj6*gclwh6_8*rxp1_2))+(((0.2211455036)*gclwh6_12*rxp2_2))+(((-0.1401930041)*cj6*gclwh4_8*r20))+(((2.0)*cj6*gclwh14_8*npy*pz))+(((0.74858)*gclwh6_8*rxp2_2))+(((-0.069)*cj6*gclwh14_10*pp*r21))+(((-0.29542)*cj6*gclwh14_12*pp*r21))+(((-0.00138)*gclwh8_10*rxp2_2))+(((2.0)*cj6*gclwh4_8*npx*pz))+(((0.138)*gclwh12_10*npz*pz))+(((-0.069)*gclwh12_10*pp*r22))+(((0.05165202)*gclwh10_10*rxp1_2*sj6))+(((0.59084)*cj6*gclwh4_12*npx*pz))+(((-0.0096733172829)*cj6*gclwh4_10*r20))+(((0.74858)*cj6*gclwh8_8*rxp1_2))+(((0.59084)*cj6*gclwh14_12*npy*pz))+(((0.2211455036)*gclwh10_12*rxp1_2*sj6))+(((0.74858)*gclwh10_8*rxp1_2*sj6))+(((0.138)*gclwh14_10*npx*pz*sj6))+(((-0.05165202)*cj6*gclwh10_10*rxp0_2))+(((-1.0)*cj6*gclwh14_8*pp*r21))+(((-1.0)*cj6*gclwh4_8*pp*r20))+(((-0.1399930041)*cj6*gclwh14_8*r21))+(((-0.0005165202)*cj6*gclwh12_10*r21))+(((-0.0096595172829)*cj6*gclwh14_10*r21))+(((0.59084)*gclwh14_12*npx*pz*sj6))+(((-1.0)*gclwh12_8*pp*r22))+(((-0.29542)*gclwh12_12*pp*r22))+(((-0.02)*gclwh10_8*pz))+(((-0.0059084)*gclwh8_12*rxp2_2))+(((-0.0096595172829)*gclwh12_10*r22))+(((-0.069)*gclwh14_10*pp*r20*sj6))+(((-0.069)*cj6*gclwh4_10*pp*r20))+(((0.00138)*gclwh6_10*rxp0_2*sj6))+(((-0.002211455036)*gclwh12_12*r20*sj6))+(((-1.0)*gclwh14_8*pp*r20*sj6))+(((-0.041415817271222)*cj6*gclwh4_12*r20))+(((-0.002211455036)*cj6*gclwh12_12*r21))+(((-0.02)*gclwh8_8*rxp2_2))+(((0.05165202)*cj6*gclwh8_10*rxp1_2))+(((-0.041356733271222)*gclwh14_12*r20*sj6))+(((0.138)*cj6*gclwh14_10*npy*pz))+(((0.74858)*gclwh8_8*rxp0_2*sj6))+(((0.02)*gclwh6_8*rxp0_2*sj6))+(((-2.0)*gclwh4_8*npy*pz*sj6))+(((0.29542)*gclwh4_12*pp*r21*sj6))+(((0.138)*cj6*gclwh4_10*npx*pz))+(((-0.0005165202)*gclwh12_10*r20*sj6))+(((-0.041356733271222)*cj6*gclwh14_12*r21))+(((0.0074858)*gclwh14_8*r22))+(((-0.00138)*gclwh10_10*pz))+(((0.05165202)*gclwh6_10*rxp2_2))+(((-0.1399930041)*gclwh14_8*r20*sj6))+(((-0.0074858)*cj6*gclwh12_8*r21))+(((-0.1399930041)*gclwh12_8*r22))+(((0.041415817271222)*gclwh4_12*r21*sj6))+(((2.0)*gclwh12_8*npz*pz))+(((-0.0096595172829)*gclwh14_10*r20*sj6))+(((0.069)*gclwh4_10*pp*r21*sj6))+(((2.0)*gclwh14_8*npx*pz*sj6))+(((-0.29542)*gclwh14_12*pp*r20*sj6))+(((-0.59084)*gclwh4_12*npy*pz*sj6))+(((0.002211455036)*gclwh14_12*r22))+(((0.1401930041)*gclwh4_8*r21*sj6))+(((0.0096733172829)*gclwh4_10*r21*sj6))+(((0.0059084)*gclwh6_12*rxp0_2*sj6))+(((-0.041356733271222)*gclwh12_12*r22))+(((-0.0059084)*gclwh10_12*pz))+(((-0.74858)*cj6*gclwh10_8*rxp0_2))+(((-0.0074858)*gclwh12_8*r20*sj6))+(((-0.138)*gclwh4_10*npy*pz*sj6))+(((0.05165202)*gclwh8_10*rxp0_2*sj6))+(((0.0005165202)*gclwh14_10*r22))+(((0.0059084)*cj6*gclwh6_12*rxp1_2))+(((0.59084)*gclwh12_12*npz*pz)));
op[65]=((0.04076796)+(((0.0963180554)*cj6*gclwh4_6*npx*pz))+(((-0.07887)*cj6*gclwh4_10*pp*r20))+(((0.15774)*cj6*gclwh14_10*npy*pz))+(((-0.001401930041)*gclwh4_14*(r21*r21)*(sj6*sj6)))+(((0.0096595172829)*cj6*gclwh1_5*r21))+(((0.00036050884955666)*cj6*gclwh3_6*r21))+(((-0.0074858)*cj6*gclwh3_5*pz*r21))+(((-0.000590405046)*cj6*gclwh12_10*r21))+((gclwh1_6*r20*sj6*(pp*pp)))+(((0.0918339764)*gclwh3_6*pp*r22))+(((-0.01)*cj6*gclwh12_14*pp*r20*r22))+(((0.0963180554)*gclwh12_6*npz*pz))+(((-0.01)*gclwh14_14*pp*r20*r21*(cj6*cj6)))+(((0.0074858)*cj6*gclwh8_14*r20*rxp0_2*sj6))+(((-1.0)*cj6*gclwh4_6*r20*(pp*pp)))+(((0.0074858)*gclwh14_6*pp*r22))+(((0.0590405046)*gclwh8_10*rxp0_2*sj6))+(((-0.0002)*cj6*gclwh8_14*r20*rxp2_2))+(((0.0096595172829)*gclwh12_5*r22))+(((-0.0074858)*gclwh10_14*r21*rxp1_2*(sj6*sj6)))+(((-0.00138)*cj6*gclwh6_5*rxp1_2))+(((-0.1401930041)*gclwh4_5*pz*r21*sj6))+(((0.0074858)*cj6*gclwh12_5*pz*r21))+(((0.0074858)*cj6*gclwh10_14*r20*rxp1_2*sj6))+(((-0.00674192696225811)*gclwh1_6*r20*sj6))+(((0.15774)*gclwh14_10*npx*pz*sj6))+(((-0.0015774)*gclwh8_10*rxp2_2))+(((-0.0074858)*cj6*gclwh8_14*r21*rxp1_2*sj6))+(((-0.74858)*cj6*gclwh10_6*pp*rxp0_2))+(((2.0)*gclwh1_5*npx*sj6*(pz*pz)))+(((0.0074858)*gclwh3_6*pp*r20*sj6))+(((-0.02)*gclwh6_5*pz*rxp0_2*sj6))+(((-0.0096595172829)*gclwh3_5*r22))+(((0.0005165202)*gclwh12_5*r20*sj6))+(((0.02)*cj6*gclwh6_6*pp*rxp1_2))+(((-0.07887)*cj6*gclwh14_10*pp*r21))+(((-0.1881520318)*gclwh12_6*pp*r22))+(((0.01)*cj6*gclwh14_14*pp*sj6*(r21*r21)))+(((-0.05165202)*gclwh10_5*rxp1_2*sj6))+(((-7.4858e-5)*gclwh14_14*r21*r22*sj6))+(((-0.02)*cj6*gclwh14_14*npy*pz*r21*sj6))+(((0.1399930041)*gclwh12_5*pz*r22))+(((0.02)*rxp1_2*sj6))+(((0.000963180554)*gclwh6_6*rxp0_2*sj6))+(((0.1399930041)*cj6*gclwh14_5*pz*r21))+(((-2.0)*cj6*gclwh1_6*npy*pp*pz))+(((-0.0963180554)*gclwh1_6*npx*pz*sj6))+(((-0.000963180554)*gclwh8_6*rxp2_2))+(((-2.0)*cj6*gclwh4_5*npx*(pz*pz)))+(((0.02)*gclwh4_14*npy*pz*r21*(sj6*sj6)))+(((-0.0074858)*gclwh12_6*pp*r20*sj6))+(((0.0015774)*gclwh6_10*rxp0_2*sj6))+(((-0.07887)*gclwh14_10*pp*r20*sj6))+(((-0.001399930041)*cj6*gclwh12_14*r20*r22))+(((-0.00675155876779811)*cj6*gclwh4_6*r20))+(((0.0005165202)*cj6*gclwh12_5*r21))+(((0.000963180554)*cj6*gclwh6_6*rxp1_2))+(((-0.01)*gclwh4_14*pp*(r21*r21)*(sj6*sj6)))+(((-0.1881520318)*cj6*gclwh14_6*pp*r21))+(((-0.069)*cj6*gclwh1_5*pp*r21))+(((-0.1883520318)*cj6*gclwh4_6*pp*r20))+(((-0.0005165202)*cj6*gclwh3_5*r21))+(((-0.00138)*gclwh6_5*rxp0_2*sj6))+((cj6*gclwh4_5*pp*pz*r20))+(((-0.74858)*cj6*gclwh8_5*pz*rxp1_2))+(((0.74858)*gclwh6_6*pp*rxp2_2))+(((-0.0005165202)*gclwh14_5*r22))+(((0.0096733172829)*cj6*gclwh4_5*r20))+(((-0.05165202)*gclwh6_5*rxp2_2))+(((-0.02)*cj6*gclwh4_14*npy*pz*r20*sj6))+(((0.02)*gclwh6_6*pp*rxp0_2*sj6))+(((0.74858)*pz))+(((0.0002)*gclwh10_14*pz*r21*sj6))+(((-0.0005165202)*gclwh1_5*r22))+(((-1.0)*gclwh4_5*pp*pz*r21*sj6))+(((0.001399930041)*cj6*gclwh14_14*sj6*(r21*r21)))+(((0.069)*gclwh12_5*pp*r22))+(((-0.00674192696225811)*gclwh12_6*r22))+(((-0.001399930041)*gclwh14_14*r20*r21*(cj6*cj6)))+(((0.036050884955666)*gclwh6_6*rxp2_2))+(((-0.74858)*gclwh8_5*pz*rxp0_2*sj6))+(((0.00138)*gclwh10_5*pz))+(((0.0590405046)*gclwh6_10*rxp2_2))+(((-0.0002)*gclwh6_14*r21*rxp0_2*(sj6*sj6)))+(((-0.000963180554)*gclwh10_6*pz))+(((-2.0)*gclwh12_5*npz*(pz*pz)))+(((0.0963180554)*gclwh14_6*npx*pz*sj6))+(((0.0074858)*cj6*gclwh3_6*pp*r21))+(((0.05165202)*cj6*gclwh10_5*rxp0_2))+(((0.74858)*gclwh8_6*pp*rxp0_2*sj6))+(((-0.0590405046)*cj6*gclwh10_10*rxp0_2))+(((-0.02)*cj6*gclwh4_14*npx*pz*r21*sj6))+(((-1.0)*gclwh3_6*r22*(pp*pp)))+(((2.0)*cj6*gclwh4_6*npx*pp*pz))+(((2.0)*cj6*gclwh14_6*npy*pp*pz))+(((-0.000590405046)*gclwh12_10*r20*sj6))+(((-1.0)*gclwh12_6*r22*(pp*pp)))+(((0.1399930041)*cj6*gclwh1_5*pz*r21))+(((0.0074858)*cj6*gclwh10_14*r21*rxp0_2*sj6))+(((0.0074858)*cj6*gclwh6_14*r20*rxp2_2))+(((-0.0918339764)*gclwh1_6*pp*r20*sj6))+(((0.0963180554)*cj6*gclwh14_6*npy*pz))+(((-0.1399930041)*gclwh3_5*pz*r22))+(((-2.0)*cj6*gclwh14_5*npy*(pz*pz)))+(((-0.0074858)*gclwh3_5*pz*r20*sj6))+(((7.4858e-5)*cj6*gclwh14_14*r20*r22))+((gclwh14_5*pp*pz*r20*sj6))+(((0.0015774)*cj6*gclwh6_10*rxp1_2))+(((-0.0918339764)*cj6*gclwh1_6*pp*r21))+(((-0.001401930041)*gclwh4_14*(cj6*cj6)*(r20*r20)))+(((-0.15774)*gclwh4_10*npy*pz*sj6))+(((0.002803860082)*cj6*gclwh4_14*r20*r21*sj6))+(((0.74858)*cj6*gclwh8_6*pp*rxp1_2))+(((7.4858e-5)*gclwh12_14*r20*r21*(sj6*sj6)))+(((-0.02)*cj6*gclwh6_5*pz*rxp1_2))+(((0.0074858)*gclwh8_14*r20*rxp1_2*(cj6*cj6)))+(((-2.0)*gclwh1_6*npx*pp*pz*sj6))+(((2.0)*gclwh4_5*npy*sj6*(pz*pz)))+(((0.0096595172829)*gclwh14_5*r20*sj6))+(((-0.138)*gclwh3_5*npz*pz))+(((0.00674192696225811)*gclwh3_6*r22))+(((0.001399930041)*gclwh12_14*r21*r22*sj6))+(((-0.00036050884955666)*cj6*gclwh12_6*r21))+(((0.00036050884955666)*gclwh14_6*r22))+(((0.15774)*cj6*gclwh4_10*npx*pz))+(((0.74858)*cj6*gclwh10_5*pz*rxp0_2))+(((-0.069)*gclwh1_5*pp*r20*sj6))+((cj6*gclwh14_5*pp*pz*r21))+(((-0.0074858)*gclwh8_14*r21*rxp0_2*(sj6*sj6)))+(((0.1399930041)*gclwh1_5*pz*r20*sj6))+(((0.00036050884955666)*gclwh3_6*r20*sj6))+(((-1.0)*cj6*gclwh1_5*pp*pz*r21))+(((-0.0074858)*gclwh6_14*r21*rxp2_2*sj6))+(((-0.02)*gclwh8_6*pp*rxp2_2))+(((-0.01)*cj6*gclwh14_14*pp*sj6*(r20*r20)))+(((-2.0)*gclwh3_5*npz*(pz*pz)))+(((0.0096595172829)*cj6*gclwh14_5*r21))+((gclwh4_6*r21*sj6*(pp*pp)))+(((0.1399930041)*gclwh14_5*pz*r20*sj6))+(((-7.4858e-5)*cj6*gclwh12_14*sj6*(r20*r20)))+(((-0.011041248233367)*cj6*gclwh14_10*r21))+(((0.001399930041)*gclwh14_14*r20*r21*(sj6*sj6)))+(((-0.74858)*gclwh6_5*pz*rxp2_2))+(((0.036050884955666)*gclwh8_6*rxp0_2*sj6))+(((0.07887)*gclwh4_10*pp*r21*sj6))+(((-0.138)*cj6*gclwh14_5*npy*pz))+(((0.00675155876779811)*gclwh4_6*r21*sj6))+(((0.0096595172829)*gclwh1_5*r20*sj6))+(((-0.0002)*cj6*gclwh6_14*r21*rxp1_2*sj6))+(((0.069)*gclwh14_5*pp*r20*sj6))+(((-0.02)*gclwh12_14*npz*pz*r21*sj6))+(((-1.0)*gclwh14_6*r20*sj6*(pp*pp)))+(((-0.05165202)*gclwh8_5*rxp0_2*sj6))+(((-0.0963180554)*cj6*gclwh1_6*npy*pz))+(((-0.036050884955666)*cj6*gclwh10_6*rxp0_2))+(((2.0)*gclwh3_6*npz*pp*pz))+(((0.1883520318)*gclwh4_6*pp*r21*sj6))+(((0.138)*gclwh1_5*npx*pz*sj6))+(((-0.74858)*gclwh10_5*pz*rxp1_2*sj6))+(((-0.011057022233367)*cj6*gclwh4_10*r20))+(((0.0074858)*gclwh12_5*pz*r20*sj6))+(((-0.011041248233367)*gclwh14_10*r20*sj6))+(((0.02)*cj6*gclwh12_14*npz*pz*r20))+(((-0.02)*cj6*rxp0_2))+(((0.15774)*gclwh12_10*npz*pz))+(((-1.0)*cj6*gclwh14_6*r21*(pp*pp)))+(((-0.138)*cj6*gclwh4_5*npx*pz))+(((-0.02)*gclwh10_6*pp*pz))+(((0.138)*cj6*gclwh1_5*npy*pz))+(((-0.00674192696225811)*cj6*gclwh14_6*r21))+(((-0.138)*gclwh12_5*npz*pz))+(((0.02)*gclwh14_14*npy*pz*r20*(cj6*cj6)))+(((0.011057022233367)*gclwh4_10*r21*sj6))+((gclwh12_5*pp*pz*r22))+(((-2.0)*gclwh4_6*npy*pp*pz*sj6))+(((0.0590405046)*cj6*gclwh8_10*rxp1_2))+(((0.0002)*gclwh8_14*r21*rxp2_2*sj6))+(((0.0002)*cj6*gclwh6_14*r20*rxp0_2*sj6))+(((-0.011041248233367)*gclwh12_10*r22))+(((0.036050884955666)*cj6*gclwh8_6*rxp1_2))+(((0.02)*gclwh8_5*pz*rxp2_2))+(((-0.05165202)*cj6*gclwh8_5*rxp1_2))+(((2.0)*cj6*gclwh1_5*npy*(pz*pz)))+(((2.0)*gclwh14_6*npx*pp*pz*sj6))+(((-0.0074858)*gclwh1_5*pz*r22))+(((0.00138)*gclwh8_5*rxp2_2))+(((0.01)*gclwh12_14*pp*r21*r22*sj6))+(((-0.0015774)*gclwh10_10*pz))+(((-0.138)*gclwh14_5*npx*pz*sj6))+(((-0.0074858)*gclwh14_5*pz*r22))+((cj6*gclwh1_6*r21*(pp*pp)))+(((-0.069)*gclwh4_5*pp*r21*sj6))+(((0.1401930041)*cj6*gclwh4_5*pz*r20))+(((-0.1881520318)*gclwh14_6*pp*r20*sj6))+(((0.02)*cj6*gclwh4_14*pp*r20*r21*sj6))+(((-0.0002)*cj6*gclwh10_14*pz*r20))+(((-0.07887)*gclwh12_10*pp*r22))+(((-0.0005165202)*gclwh3_5*r20*sj6))+(((0.0590405046)*gclwh10_10*rxp1_2*sj6))+(((-0.0096733172829)*gclwh4_5*r21*sj6))+(((0.036050884955666)*gclwh10_6*rxp1_2*sj6))+(((-0.00674192696225811)*cj6*gclwh1_6*r21))+(((-1.0)*gclwh1_5*pp*pz*r20*sj6))+(((-0.00674192696225811)*gclwh14_6*r20*sj6))+(((0.069)*cj6*gclwh4_5*pp*r20))+(((-2.0)*gclwh14_5*npx*sj6*(pz*pz)))+(((-0.001399930041)*cj6*gclwh14_14*sj6*(r20*r20)))+(((0.01)*gclwh14_14*pp*r20*r21*(sj6*sj6)))+(((-0.00036050884955666)*gclwh12_6*r20*sj6))+(((0.02)*gclwh10_5*(pz*pz)))+(((0.02)*cj6*gclwh14_14*npx*pz*r20*sj6))+(((-0.0074858)*cj6*gclwh12_6*pp*r21))+(((-0.01)*gclwh4_14*pp*(cj6*cj6)*(r20*r20)))+(((-0.02)*gclwh14_14*npx*pz*r21*(sj6*sj6)))+(((7.4858e-5)*cj6*gclwh12_14*sj6*(r21*r21)))+(((0.0002)*gclwh6_14*r20*rxp1_2*(cj6*cj6)))+(((0.000590405046)*gclwh14_10*r22))+(((0.069)*gclwh3_5*pp*r22))+(((0.00036050884955666)*gclwh1_6*r22))+(((0.0074858)*gclwh1_6*pp*r22))+(((-7.4858e-5)*gclwh12_14*r20*r21*(cj6*cj6)))+(((0.74858)*gclwh10_6*pp*rxp1_2*sj6))+(((0.069)*cj6*gclwh14_5*pp*r21))+((gclwh3_5*pp*pz*r22))+(((0.138)*gclwh4_5*npy*pz*sj6))+(((0.02)*gclwh4_14*npx*pz*r20*(cj6*cj6)))+(((-0.0963180554)*gclwh4_6*npy*pz*sj6))+(((-0.0074858)*gclwh10_14*r20*rxp0_2*(cj6*cj6)))+(((2.0)*gclwh12_6*npz*pp*pz))+(((0.0963180554)*gclwh3_6*npz*pz)));
IkReal x699=(rxp0_2*sj6);
IkReal x700=((1.49716)*gclwh9_4);
IkReal x701=(gclwh15_15*r22);
IkReal x702=(cj6*gclwh5_15);
IkReal x703=(gclwh9_15*rxp2_2);
IkReal x704=(npz*pz);
IkReal x705=(gclwh15_15*sj6);
IkReal x706=(gclwh5_15*sj6);
IkReal x707=(npy*pz);
IkReal x708=((0.138)*pp);
IkReal x709=(cj6*gclwh15_15);
IkReal x710=(gclwh13_15*r22);
IkReal x711=((2.0)*pp);
IkReal x712=((0.04)*gclwh7_4);
IkReal x713=((0.0149716)*gclwh13_4);
IkReal x714=(r20*sj6);
IkReal x715=(cj6*r21);
IkReal x716=(gclwh5_4*sj6);
IkReal x717=(gclwh13_4*r22);
IkReal x718=(npx*pz);
IkReal x719=((4.0)*gclwh15_4);
IkReal x720=((0.10330404)*gclwh9_15);
IkReal x721=((0.0010330404)*gclwh13_15);
IkReal x722=((0.59084)*pp);
IkReal x723=(cj6*rxp1_2);
IkReal x724=((0.0118168)*gclwh7_15);
IkReal x725=((0.004422910072)*gclwh13_15);
IkReal x726=((1.49716)*gclwh11_4);
IkReal x727=((0.00276)*gclwh7_15);
IkReal x728=(gclwh7_15*rxp2_2);
IkReal x729=(gclwh11_15*pz);
IkReal x730=((0.4422910072)*gclwh9_15);
IkReal x731=(cj6*gclwh11_15*rxp0_2);
IkReal x732=(r21*x709);
IkReal x733=((1.18168)*x718);
IkReal x734=(gclwh15_4*x715);
IkReal x735=(cj6*gclwh5_4*r20);
IkReal x736=(gclwh11_15*rxp1_2*sj6);
op[66]=((-0.04076796)+(((0.01)*cj6*gclwh15_15*pp*sj6*(r20*r20)))+(((-0.74858)*pz))+(((7.4858e-5)*gclwh13_15*r20*r21*(cj6*cj6)))+(((-0.00674192696225811)*gclwh2_2*r22))+(((-0.0002)*cj6*gclwh7_15*r20*rxp0_2*sj6))+(((0.138)*gclwh15_1*npx*pz*sj6))+(((0.02)*gclwh9_1*pz*rxp2_2))+(((0.001399930041)*gclwh15_15*r20*r21*(cj6*cj6)))+(((-0.0002)*gclwh11_15*pz*r21*sj6))+(((0.0963180554)*gclwh0_2*npx*pz*sj6))+(((0.01)*gclwh15_15*pp*r20*r21*(cj6*cj6)))+(((0.001399930041)*cj6*gclwh13_15*r20*r22))+(((0.1883520318)*gclwh5_2*pp*r21*sj6))+(((0.0074858)*gclwh2_1*pz*r20*sj6))+(((-0.005013315118)*gclwh15_11*r22))+(((0.069)*gclwh2_1*pp*r22))+(((2.0)*gclwh15_2*npx*pp*pz*sj6))+(((0.001401930041)*gclwh5_15*(cj6*cj6)*(r20*r20)))+(((-0.0096595172829)*gclwh13_1*r22))+(((-0.069)*gclwh15_1*pp*r20*sj6))+(((2.0)*gclwh0_2*npx*pp*pz*sj6))+(((-0.0005165202)*gclwh0_1*r22))+(((0.0074858)*gclwh11_15*r21*rxp1_2*(sj6*sj6)))+(((-0.0096733172829)*cj6*gclwh5_1*r20))+(((0.5013315118)*cj6*gclwh11_11*rxp0_2))+(((0.000963180554)*cj6*gclwh7_2*rxp1_2))+(((0.0918339764)*cj6*gclwh0_2*pp*r21))+(((0.74858)*gclwh9_2*pp*rxp0_2*sj6))+((gclwh2_2*r22*(pp*pp)))+(((-0.001399930041)*gclwh15_15*r20*r21*(sj6*sj6)))+(((0.1399930041)*gclwh15_1*pz*r20*sj6))+(((0.000963180554)*gclwh7_2*rxp0_2*sj6))+(((0.0963180554)*cj6*gclwh0_2*npy*pz))+(((0.0963180554)*cj6*gclwh15_2*npy*pz))+(((-0.0096595172829)*cj6*gclwh15_1*r21))+(((0.0074858)*gclwh0_1*pz*r22))+(((-0.069)*gclwh13_1*pp*r22))+(((0.1399930041)*gclwh13_1*pz*r22))+(((-0.138)*gclwh2_1*npz*pz))+(((-0.0074858)*cj6*gclwh13_2*pp*r21))+(((-0.0074858)*cj6*gclwh2_2*pp*r21))+(((-0.5013315118)*gclwh11_11*rxp1_2*sj6))+(((-1.0)*gclwh5_1*pp*pz*r21*sj6))+((gclwh0_1*pp*pz*r20*sj6))+(((-0.5013315118)*gclwh7_11*rxp2_2))+(((-0.001399930041)*gclwh13_15*r21*r22*sj6))+((gclwh13_1*pp*pz*r22))+(((-2.0)*cj6*gclwh0_1*npy*(pz*pz)))+(((-0.01)*gclwh15_15*pp*r20*r21*(sj6*sj6)))+(((-0.00674192696225811)*gclwh15_2*r20*sj6))+(((-0.0096595172829)*gclwh2_1*r22))+(((0.66971)*gclwh15_11*pp*r20*sj6))+(((-0.036050884955666)*cj6*gclwh11_2*rxp0_2))+(((-0.0963180554)*gclwh5_2*npy*pz*sj6))+(((0.0096595172829)*gclwh0_1*r20*sj6))+(((-0.0074858)*cj6*gclwh11_15*r21*rxp0_2*sj6))+(((-0.0005165202)*gclwh2_1*r20*sj6))+(((-1.33942)*gclwh15_11*npx*pz*sj6))+(((0.05165202)*cj6*gclwh9_1*rxp1_2))+(((0.0074858)*cj6*gclwh2_1*pz*r21))+(((2.0)*gclwh2_1*npz*(pz*pz)))+(((-0.0918339764)*gclwh2_2*pp*r22))+(((7.4858e-5)*cj6*gclwh13_15*sj6*(r20*r20)))+(((-7.4858e-5)*gclwh13_15*r20*r21*(sj6*sj6)))+(((-0.0074858)*cj6*gclwh7_15*r20*rxp2_2))+(((0.001399930041)*cj6*gclwh15_15*sj6*(r20*r20)))+((gclwh5_2*r21*sj6*(pp*pp)))+(((-1.0)*gclwh0_2*r20*sj6*(pp*pp)))+(((0.00674192696225811)*cj6*gclwh0_2*r21))+(((7.4858e-5)*gclwh15_15*r21*r22*sj6))+(((0.0963180554)*gclwh13_2*npz*pz))+(((-0.05165202)*cj6*gclwh11_1*rxp0_2))+(((-2.0)*gclwh13_1*npz*(pz*pz)))+(((0.00138)*gclwh7_1*rxp0_2*sj6))+(((0.036050884955666)*gclwh11_2*rxp1_2*sj6))+(((0.0074858)*gclwh11_15*r20*rxp0_2*(cj6*cj6)))+(((-1.0)*cj6*gclwh0_2*r21*(pp*pp)))+(((-0.000963180554)*gclwh9_2*rxp2_2))+(((-0.1401930041)*gclwh5_1*pz*r21*sj6))+(((-1.0)*cj6*gclwh15_2*r21*(pp*pp)))+(((0.66971)*gclwh13_11*pp*r22))+(((-0.5013315118)*gclwh9_11*rxp0_2*sj6))+(((-0.00675155876779811)*cj6*gclwh5_2*r20))+(((-0.02)*gclwh7_1*pz*rxp0_2*sj6))+(((0.036050884955666)*cj6*gclwh9_2*rxp1_2))+(((0.02)*cj6*gclwh5_15*npy*pz*r20*sj6))+(((0.01)*gclwh5_15*pp*(cj6*cj6)*(r20*r20)))+(((0.0074858)*cj6*gclwh9_15*r21*rxp1_2*sj6))+(((-0.74858)*gclwh11_1*pz*rxp1_2*sj6))+(((-0.0074858)*gclwh15_1*pz*r22))+(((0.0096733172829)*gclwh5_1*r21*sj6))+(((-0.0133942)*cj6*gclwh7_11*rxp1_2))+(((-0.0005165202)*cj6*gclwh2_1*r21))+(((0.00138)*cj6*gclwh7_1*rxp1_2))+(((0.036050884955666)*gclwh9_2*rxp0_2*sj6))+(((-2.0)*gclwh0_1*npx*sj6*(pz*pz)))+(((-2.0)*gclwh15_1*npx*sj6*(pz*pz)))+(((-0.00674192696225811)*cj6*gclwh15_2*r21))+(((-0.0074858)*cj6*gclwh11_15*r20*rxp1_2*sj6))+(((0.005013315118)*gclwh13_11*r20*sj6))+(((-7.4858e-5)*cj6*gclwh13_15*sj6*(r21*r21)))+(((0.0096595172829)*cj6*gclwh0_1*r21))+(((-0.069)*gclwh0_1*pp*r20*sj6))+(((0.093754714775811)*gclwh13_11*r22))+(((0.0918339764)*gclwh0_2*pp*r20*sj6))+(((0.093888656775811)*cj6*gclwh5_11*r20))+(((-0.0002)*gclwh9_15*r21*rxp2_2*sj6))+(((0.02)*gclwh7_2*pp*rxp0_2*sj6))+((cj6*gclwh15_1*pp*pz*r21))+(((0.138)*cj6*gclwh0_1*npy*pz))+(((0.0074858)*gclwh9_15*r21*rxp0_2*(sj6*sj6)))+(((-0.138)*gclwh5_1*npy*pz*sj6))+(((-0.0963180554)*gclwh2_2*npz*pz))+(((-0.0096595172829)*gclwh15_1*r20*sj6))+(((-1.33942)*cj6*gclwh5_11*npx*pz))+(((-0.00036050884955666)*gclwh2_2*r20*sj6))+(((-1.0)*gclwh13_2*r22*(pp*pp)))+(((-0.00036050884955666)*gclwh13_2*r20*sj6))+(((0.138)*gclwh0_1*npx*pz*sj6))+(((-0.00036050884955666)*cj6*gclwh13_2*r21))+(((0.74858)*cj6*gclwh11_1*pz*rxp0_2))+(((0.0963180554)*cj6*gclwh5_2*npx*pz))+(((-0.02)*cj6*gclwh5_15*pp*r20*r21*sj6))+(((0.0002)*cj6*gclwh11_15*pz*r20))+(((-0.02)*gclwh15_15*npy*pz*r20*(cj6*cj6)))+(((0.74858)*gclwh11_2*pp*rxp1_2*sj6))+(((-1.33942)*cj6*gclwh15_11*npy*pz))+((gclwh15_1*pp*pz*r20*sj6))+(((-1.33942)*gclwh13_11*npz*pz))+(((2.0)*gclwh5_1*npy*sj6*(pz*pz)))+(((0.0074858)*gclwh13_1*pz*r20*sj6))+(((0.005013315118)*cj6*gclwh13_11*r21))+(((2.0)*cj6*gclwh15_2*npy*pp*pz))+(((-0.02)*gclwh5_15*npx*pz*r20*(cj6*cj6)))+(((-0.0002)*gclwh7_15*r20*rxp1_2*(cj6*cj6)))+(((-0.1881520318)*cj6*gclwh15_2*pp*r21))+(((0.1401930041)*cj6*gclwh5_1*pz*r20))+(((0.01)*gclwh5_15*pp*(r21*r21)*(sj6*sj6)))+(((-2.0)*cj6*gclwh15_1*npy*(pz*pz)))+(((0.1399930041)*cj6*gclwh15_1*pz*r21))+(((-0.74858)*gclwh9_1*pz*rxp0_2*sj6))+(((-0.0074858)*cj6*gclwh9_15*r20*rxp0_2*sj6))+(((-0.66971)*gclwh5_11*pp*r21*sj6))+(((0.01)*cj6*gclwh13_15*pp*r20*r22))+(((0.0963180554)*gclwh15_2*npx*pz*sj6))+(((-0.1881520318)*gclwh13_2*pp*r22))+(((-0.001399930041)*cj6*gclwh15_15*sj6*(r21*r21)))+(((-0.02)*cj6*gclwh15_15*npx*pz*r20*sj6))+(((2.0)*gclwh13_2*npz*pp*pz))+(((0.0002)*cj6*gclwh7_15*r21*rxp1_2*sj6))+(((0.66971)*cj6*gclwh15_11*pp*r21))+(((0.00675155876779811)*gclwh5_2*r21*sj6))+(((0.02)*gclwh15_15*npx*pz*r21*(sj6*sj6)))+(((0.0133942)*gclwh11_11*pz))+(((-7.4858e-5)*cj6*gclwh15_15*r20*r22))+(((-0.02)*cj6*gclwh7_1*pz*rxp1_2))+(((0.05165202)*gclwh7_1*rxp2_2))+(((0.00674192696225811)*gclwh0_2*r20*sj6))+(((0.0002)*gclwh7_15*r21*rxp0_2*(sj6*sj6)))+(((-0.74858)*cj6*gclwh9_1*pz*rxp1_2))+(((-0.0005165202)*cj6*gclwh13_1*r21))+(((-1.0)*cj6*gclwh5_2*r20*(pp*pp)))+(((-0.0133942)*gclwh7_11*rxp0_2*sj6))+(((0.74858)*cj6*gclwh9_2*pp*rxp1_2))+(((0.74858)*gclwh7_2*pp*rxp2_2))+(((0.05165202)*gclwh9_1*rxp0_2*sj6))+(((-0.0074858)*gclwh9_15*r20*rxp1_2*(cj6*cj6)))+(((0.02)*cj6*gclwh15_15*npy*pz*r21*sj6))+(((0.093754714775811)*gclwh15_11*r20*sj6))+(((0.02)*cj6*gclwh7_2*pp*rxp1_2))+((cj6*gclwh5_1*pp*pz*r20))+(((0.093754714775811)*cj6*gclwh15_11*r21))+(((-0.00138)*gclwh9_1*rxp2_2))+(((-0.02)*gclwh5_15*npy*pz*r21*(sj6*sj6)))+(((-0.5013315118)*cj6*gclwh9_11*rxp1_2))+(((-0.74858)*gclwh7_1*pz*rxp2_2))+(((0.138)*cj6*gclwh5_1*npx*pz))+(((-0.00674192696225811)*gclwh13_2*r22))+(((0.069)*gclwh5_1*pp*r21*sj6))+(((0.02)*cj6*rxp0_2))+(((0.02)*gclwh13_15*npz*pz*r21*sj6))+(((-0.01)*cj6*gclwh15_15*pp*sj6*(r21*r21)))+(((-0.0005165202)*gclwh13_1*r20*sj6))+(((2.0)*cj6*gclwh5_2*npx*pp*pz))+(((0.0074858)*gclwh15_2*pp*r22))+(((-0.0074858)*gclwh13_2*pp*r20*sj6))+(((-0.1399930041)*gclwh0_1*pz*r20*sj6))+(((1.33942)*gclwh5_11*npy*pz*sj6))+(((-0.01)*gclwh13_15*pp*r21*r22*sj6))+(((-0.1399930041)*cj6*gclwh0_1*pz*r21))+(((-2.0)*cj6*gclwh5_1*npx*(pz*pz)))+(((0.0074858)*cj6*gclwh13_1*pz*r21))+(((0.05165202)*gclwh11_1*rxp1_2*sj6))+(((-0.0074858)*gclwh2_2*pp*r20*sj6))+(((0.66971)*cj6*gclwh5_11*pp*r20))+(((-0.000963180554)*gclwh11_2*pz))+(((-0.74858)*cj6*gclwh11_2*pp*rxp0_2))+(((-0.069)*cj6*gclwh0_1*pp*r21))+(((-0.00138)*gclwh11_1*pz))+(((0.02)*gclwh11_1*(pz*pz)))+(((-0.00036050884955666)*cj6*gclwh2_2*r21))+(((0.0133942)*gclwh9_11*rxp2_2))+(((0.0002)*cj6*gclwh9_15*r20*rxp2_2))+(((-2.0)*gclwh2_2*npz*pp*pz))+(((-0.093888656775811)*gclwh5_11*r21*sj6))+(((0.138)*gclwh13_1*npz*pz))+(((-0.0074858)*gclwh0_2*pp*r22))+(((-0.069)*cj6*gclwh15_1*pp*r21))+(((0.0074858)*gclwh7_15*r21*rxp2_2*sj6))+(((-0.00036050884955666)*gclwh0_2*r22))+(((0.036050884955666)*gclwh7_2*rxp2_2))+(((2.0)*cj6*gclwh0_2*npy*pp*pz))+(((0.138)*cj6*gclwh15_1*npy*pz))+(((-0.1883520318)*cj6*gclwh5_2*pp*r20))+(((-1.0)*gclwh15_2*r20*sj6*(pp*pp)))+(((0.1399930041)*gclwh2_1*pz*r22))+(((0.00036050884955666)*gclwh15_2*r22))+(((-0.02)*gclwh11_2*pp*pz))+(((-1.0)*gclwh2_1*pp*pz*r22))+(((-0.02)*rxp1_2*sj6))+(((0.001401930041)*gclwh5_15*(r21*r21)*(sj6*sj6)))+(((-2.0)*gclwh5_2*npy*pp*pz*sj6))+(((-0.1881520318)*gclwh15_2*pp*r20*sj6))+(((-0.02)*cj6*gclwh13_15*npz*pz*r20))+(((-0.02)*gclwh9_2*pp*rxp2_2))+(((-0.069)*cj6*gclwh5_1*pp*r20))+((cj6*gclwh0_1*pp*pz*r21))+(((0.02)*cj6*gclwh5_15*npx*pz*r21*sj6))+(((-0.002803860082)*cj6*gclwh5_15*r20*r21*sj6))+(((0.0005165202)*gclwh15_1*r22)));
op[67]=((0.0825119764)+(((0.29542)*cj6*gclwh5_13*pp*r20))+(((-0.05165202)*gclwh7_11*rxp2_2))+(((0.74858)*cj6*gclwh9_9*rxp1_2))+(((0.041415817271222)*cj6*gclwh5_13*r20))+(((2.0)*gclwh13_9*npz*pz))+(((-0.0074858)*gclwh13_9*r20*sj6))+(((-0.069)*gclwh5_11*pp*r21*sj6))+(((-0.1399930041)*cj6*gclwh15_9*r21))+(((0.59084)*gclwh5_13*npy*pz*sj6))+(((0.138)*gclwh5_11*npy*pz*sj6))+(((2.0)*cj6*gclwh5_9*npx*pz))+(((0.002211455036)*cj6*gclwh13_13*r21))+(((0.05165202)*cj6*gclwh11_11*rxp0_2))+(((-0.05165202)*cj6*gclwh9_11*rxp1_2))+(((0.74858)*gclwh11_9*rxp1_2*sj6))+(((0.0005165202)*cj6*gclwh13_11*r21))+(((0.1401930041)*gclwh5_9*r21*sj6))+(((-0.2211455036)*gclwh7_13*rxp2_2))+(((-1.0)*cj6*gclwh15_9*pp*r21))+(((0.0005165202)*gclwh13_11*r20*sj6))+(((-0.138)*cj6*gclwh15_11*npy*pz))+(((-0.29542)*gclwh5_13*pp*r21*sj6))+(((-0.138)*gclwh15_11*npx*pz*sj6))+(((0.74858)*gclwh9_9*rxp0_2*sj6))+(((-2.0)*gclwh5_9*npy*pz*sj6))+(((-0.59084)*gclwh13_13*npz*pz))+(((-0.59084)*cj6*gclwh15_13*npy*pz))+(((-0.05165202)*gclwh11_11*rxp1_2*sj6))+(((-0.2211455036)*gclwh11_13*rxp1_2*sj6))+(((0.0059084)*gclwh9_13*rxp2_2))+(((-0.002211455036)*gclwh15_13*r22))+(((-1.0)*gclwh15_9*pp*r20*sj6))+(((0.0096595172829)*cj6*gclwh15_11*r21))+(((-0.00138)*cj6*gclwh7_11*rxp1_2))+(((-0.0074858)*cj6*gclwh13_9*r21))+(((0.29542)*cj6*gclwh15_13*pp*r21))+(((0.041356733271222)*gclwh13_13*r22))+(((0.29542)*gclwh15_13*pp*r20*sj6))+(((0.069)*gclwh13_11*pp*r22))+(((-0.0096733172829)*gclwh5_11*r21*sj6))+(((-0.138)*gclwh13_11*npz*pz))+(((0.069)*cj6*gclwh15_11*pp*r21))+(((0.02)*cj6*gclwh7_9*rxp1_2))+(((-0.02)*gclwh9_9*rxp2_2))+(((-0.2211455036)*cj6*gclwh9_13*rxp1_2))+(((-0.041415817271222)*gclwh5_13*r21*sj6))+(((0.29542)*gclwh13_13*pp*r22))+(((0.041356733271222)*cj6*gclwh15_13*r21))+((gclwh5_9*pp*r21*sj6))+(((-0.00138)*gclwh7_11*rxp0_2*sj6))+(((-0.1399930041)*gclwh15_9*r20*sj6))+(((-0.1401930041)*cj6*gclwh5_9*r20))+(((0.02)*gclwh7_9*rxp0_2*sj6))+(((0.00138)*gclwh11_11*pz))+(((-0.138)*cj6*gclwh5_11*npx*pz))+(((-0.0059084)*gclwh7_13*rxp0_2*sj6))+(((0.002211455036)*gclwh13_13*r20*sj6))+(((0.74858)*gclwh7_9*rxp2_2))+(((-0.1399930041)*gclwh13_9*r22))+(((0.041356733271222)*gclwh15_13*r20*sj6))+(((-0.0005165202)*gclwh15_11*r22))+(((-0.74858)*cj6*gclwh11_9*rxp0_2))+(((-0.05165202)*gclwh9_11*rxp0_2*sj6))+(((-1.0)*cj6*gclwh5_9*pp*r20))+(((-0.2211455036)*gclwh9_13*rxp0_2*sj6))+(((0.0059084)*gclwh11_13*pz))+(((0.0096595172829)*gclwh15_11*r20*sj6))+(((0.069)*cj6*gclwh5_11*pp*r20))+(((0.0096595172829)*gclwh13_11*r22))+(((-0.59084)*gclwh15_13*npx*pz*sj6))+(((-0.59084)*cj6*gclwh5_13*npx*pz))+(((-1.0)*gclwh13_9*pp*r22))+(((2.0)*gclwh15_9*npx*pz*sj6))+(((0.069)*gclwh15_11*pp*r20*sj6))+(((0.00138)*gclwh9_11*rxp2_2))+(((0.0096733172829)*cj6*gclwh5_11*r20))+(((0.0074858)*gclwh15_9*r22))+(((0.2211455036)*cj6*gclwh11_13*rxp0_2))+(((2.0)*cj6*gclwh15_9*npy*pz))+(((-0.0059084)*cj6*gclwh7_13*rxp1_2))+(((-0.02)*gclwh11_9*pz)));
op[68]=((((0.276)*x706*x707))+((x708*x732))+(((0.0193190345658)*x710))+(((0.10330404)*x731))+(((0.0193190345658)*x732))+((r20*x705*x708))+(((0.0193190345658)*r20*x705))+(((-1.0)*r21*x706*x708))+(((-1.0)*x723*x727))+((r20*x702*x708))+(((-0.276)*x705*x718))+(((-0.10330404)*x728))+(((-0.10330404)*x736))+(((0.0193466345658)*r20*x702))+(((0.00276)*x703))+(((-1.0)*x720*x723))+(((-0.0010330404)*x701))+(((-1.0)*x699*x720))+(((-1.0)*x699*x727))+(((-0.276)*x702*x718))+(((0.00276)*x729))+(((-0.0193466345658)*r21*x706))+((x708*x710))+(((-0.276)*gclwh13_15*x704))+((x714*x721))+((x715*x721))+(((-0.276)*x707*x709)));
op[69]=((((-0.082713466542444)*r20*x705))+(((-1.0)*r21*x711*x716))+(((-0.082713466542444)*x710))+(((-1.18168)*x706*x707))+((x702*x733))+(((-1.0)*r20*x705*x722))+(((-1.0)*x700*x723))+(((-1.0)*rxp1_2*sj6*x726))+(((-1.0)*x710*x722))+((r21*x706*x722))+(((0.04)*gclwh11_4*pz))+(((-1.49716)*gclwh7_4*rxp2_2))+(((1.18168)*x707*x709))+(((-1.0)*cj6*x707*x719))+(((0.4422910072)*x728))+((x723*x730))+(((-1.0)*x722*x732))+(((0.4422910072)*x736))+((x711*x717))+((cj6*rxp0_2*x726))+((x723*x724))+((gclwh15_4*x711*x714))+(((-0.0149716)*gclwh15_4*r22))+(((-0.4422910072)*x731))+(((-0.082831634542444)*r20*x702))+((x711*x735))+((x711*x734))+(((0.2799860082)*x734))+(((-4.0)*gclwh13_4*x704))+(((0.082831634542444)*r21*x706))+(((-1.0)*sj6*x718*x719))+(((0.2803860082)*x735))+(((-1.0)*x699*x700))+(((0.004422910072)*x701))+(((0.2799860082)*x717))+(((-0.0118168)*x703))+(((0.04)*gclwh9_4*rxp2_2))+(((1.18168)*gclwh13_15*x704))+(((-1.0)*x699*x712))+((x699*x730))+((x705*x733))+(((-1.0)*r20*x702*x722))+((x699*x724))+(((-0.0118168)*x729))+(((-1.0)*x714*x725))+(((-1.0)*x715*x725))+(((0.2799860082)*gclwh15_4*x714))+(((-0.2803860082)*r21*x716))+(((-4.0)*cj6*gclwh5_4*x718))+(((-1.0)*x712*x723))+((x713*x714))+((x713*x715))+(((4.0)*x707*x716))+(((-0.082713466542444)*x732)));
op[70]=((0.04076796)+(((0.01)*cj6*gclwh15_15*pp*sj6*(r20*r20)))+(((-0.74858)*pz))+(((7.4858e-5)*gclwh13_15*r20*r21*(cj6*cj6)))+(((-0.00674192696225811)*gclwh2_2*r22))+(((-0.0002)*cj6*gclwh7_15*r20*rxp0_2*sj6))+(((0.02)*gclwh9_1*pz*rxp2_2))+(((0.001399930041)*gclwh15_15*r20*r21*(cj6*cj6)))+(((-0.0002)*gclwh11_15*pz*r21*sj6))+(((0.0963180554)*gclwh0_2*npx*pz*sj6))+(((0.01)*gclwh15_15*pp*r20*r21*(cj6*cj6)))+(((0.001399930041)*cj6*gclwh13_15*r20*r22))+(((0.1883520318)*gclwh5_2*pp*r21*sj6))+(((0.0074858)*gclwh2_1*pz*r20*sj6))+(((-0.005013315118)*gclwh15_11*r22))+(((2.0)*gclwh15_2*npx*pp*pz*sj6))+(((0.0096595172829)*gclwh15_1*r20*sj6))+(((0.001401930041)*gclwh5_15*(cj6*cj6)*(r20*r20)))+(((2.0)*gclwh0_2*npx*pp*pz*sj6))+(((0.0074858)*gclwh11_15*r21*rxp1_2*(sj6*sj6)))+(((0.5013315118)*cj6*gclwh11_11*rxp0_2))+(((0.000963180554)*cj6*gclwh7_2*rxp1_2))+(((0.0918339764)*cj6*gclwh0_2*pp*r21))+(((0.74858)*gclwh9_2*pp*rxp0_2*sj6))+(((0.069)*cj6*gclwh15_1*pp*r21))+((gclwh2_2*r22*(pp*pp)))+(((-0.001399930041)*gclwh15_15*r20*r21*(sj6*sj6)))+(((0.069)*gclwh15_1*pp*r20*sj6))+(((0.1399930041)*gclwh15_1*pz*r20*sj6))+(((0.05165202)*cj6*gclwh11_1*rxp0_2))+(((0.000963180554)*gclwh7_2*rxp0_2*sj6))+(((0.0963180554)*cj6*gclwh0_2*npy*pz))+(((0.0963180554)*cj6*gclwh15_2*npy*pz))+(((0.0074858)*gclwh0_1*pz*r22))+(((-0.069)*gclwh2_1*pp*r22))+(((0.1399930041)*gclwh13_1*pz*r22))+(((-0.0074858)*cj6*gclwh13_2*pp*r21))+(((0.069)*cj6*gclwh5_1*pp*r20))+(((0.0005165202)*cj6*gclwh13_1*r21))+(((-0.0074858)*cj6*gclwh2_2*pp*r21))+(((-0.5013315118)*gclwh11_11*rxp1_2*sj6))+(((0.138)*gclwh2_1*npz*pz))+(((-1.0)*gclwh5_1*pp*pz*r21*sj6))+((gclwh0_1*pp*pz*r20*sj6))+(((0.069)*cj6*gclwh0_1*pp*r21))+(((-0.5013315118)*gclwh7_11*rxp2_2))+(((-0.001399930041)*gclwh13_15*r21*r22*sj6))+((gclwh13_1*pp*pz*r22))+(((0.0096595172829)*gclwh13_1*r22))+(((-2.0)*cj6*gclwh0_1*npy*(pz*pz)))+(((-0.01)*gclwh15_15*pp*r20*r21*(sj6*sj6)))+(((-0.00674192696225811)*gclwh15_2*r20*sj6))+(((0.66971)*gclwh15_11*pp*r20*sj6))+(((-0.036050884955666)*cj6*gclwh11_2*rxp0_2))+(((-0.0963180554)*gclwh5_2*npy*pz*sj6))+(((-0.0074858)*cj6*gclwh11_15*r21*rxp0_2*sj6))+(((-1.33942)*gclwh15_11*npx*pz*sj6))+(((0.0074858)*cj6*gclwh2_1*pz*r21))+(((2.0)*gclwh2_1*npz*(pz*pz)))+(((-0.0918339764)*gclwh2_2*pp*r22))+(((7.4858e-5)*cj6*gclwh13_15*sj6*(r20*r20)))+(((-7.4858e-5)*gclwh13_15*r20*r21*(sj6*sj6)))+(((-0.0074858)*cj6*gclwh7_15*r20*rxp2_2))+(((-0.138)*cj6*gclwh15_1*npy*pz))+(((0.001399930041)*cj6*gclwh15_15*sj6*(r20*r20)))+((gclwh5_2*r21*sj6*(pp*pp)))+(((-1.0)*gclwh0_2*r20*sj6*(pp*pp)))+(((0.00674192696225811)*cj6*gclwh0_2*r21))+(((7.4858e-5)*gclwh15_15*r21*r22*sj6))+(((-0.00138)*cj6*gclwh7_1*rxp1_2))+(((0.138)*gclwh5_1*npy*pz*sj6))+(((0.0963180554)*gclwh13_2*npz*pz))+(((-2.0)*gclwh13_1*npz*(pz*pz)))+(((0.036050884955666)*gclwh11_2*rxp1_2*sj6))+(((0.0074858)*gclwh11_15*r20*rxp0_2*(cj6*cj6)))+(((-1.0)*cj6*gclwh0_2*r21*(pp*pp)))+(((-0.000963180554)*gclwh9_2*rxp2_2))+(((-0.1401930041)*gclwh5_1*pz*r21*sj6))+(((-1.0)*cj6*gclwh15_2*r21*(pp*pp)))+(((0.66971)*gclwh13_11*pp*r22))+(((-0.5013315118)*gclwh9_11*rxp0_2*sj6))+(((-0.00675155876779811)*cj6*gclwh5_2*r20))+(((-0.02)*gclwh7_1*pz*rxp0_2*sj6))+(((0.036050884955666)*cj6*gclwh9_2*rxp1_2))+(((0.02)*cj6*gclwh5_15*npy*pz*r20*sj6))+(((0.01)*gclwh5_15*pp*(cj6*cj6)*(r20*r20)))+(((-0.05165202)*gclwh11_1*rxp1_2*sj6))+(((0.0074858)*cj6*gclwh9_15*r21*rxp1_2*sj6))+(((0.0005165202)*cj6*gclwh2_1*r21))+(((-0.74858)*gclwh11_1*pz*rxp1_2*sj6))+(((-0.0074858)*gclwh15_1*pz*r22))+(((-0.0133942)*cj6*gclwh7_11*rxp1_2))+(((0.036050884955666)*gclwh9_2*rxp0_2*sj6))+(((-2.0)*gclwh0_1*npx*sj6*(pz*pz)))+(((0.00138)*gclwh11_1*pz))+(((-2.0)*gclwh15_1*npx*sj6*(pz*pz)))+(((0.0096733172829)*cj6*gclwh5_1*r20))+(((0.0096595172829)*gclwh2_1*r22))+(((-0.00674192696225811)*cj6*gclwh15_2*r21))+(((-0.0074858)*cj6*gclwh11_15*r20*rxp1_2*sj6))+(((0.005013315118)*gclwh13_11*r20*sj6))+(((-7.4858e-5)*cj6*gclwh13_15*sj6*(r21*r21)))+(((0.093754714775811)*gclwh13_11*r22))+(((0.00138)*gclwh9_1*rxp2_2))+(((0.0918339764)*gclwh0_2*pp*r20*sj6))+(((0.093888656775811)*cj6*gclwh5_11*r20))+(((-0.0002)*gclwh9_15*r21*rxp2_2*sj6))+(((0.02)*gclwh7_2*pp*rxp0_2*sj6))+(((0.0005165202)*gclwh0_1*r22))+((cj6*gclwh15_1*pp*pz*r21))+(((0.0074858)*gclwh9_15*r21*rxp0_2*(sj6*sj6)))+(((-0.0963180554)*gclwh2_2*npz*pz))+(((0.0096595172829)*cj6*gclwh15_1*r21))+(((-1.33942)*cj6*gclwh5_11*npx*pz))+(((-0.00036050884955666)*gclwh2_2*r20*sj6))+(((-1.0)*gclwh13_2*r22*(pp*pp)))+(((-0.00036050884955666)*gclwh13_2*r20*sj6))+(((-0.00036050884955666)*cj6*gclwh13_2*r21))+(((0.74858)*cj6*gclwh11_1*pz*rxp0_2))+(((0.0963180554)*cj6*gclwh5_2*npx*pz))+(((-0.02)*cj6*gclwh5_15*pp*r20*r21*sj6))+(((0.0002)*cj6*gclwh11_15*pz*r20))+(((-0.02)*gclwh15_15*npy*pz*r20*(cj6*cj6)))+(((0.74858)*gclwh11_2*pp*rxp1_2*sj6))+(((-1.33942)*cj6*gclwh15_11*npy*pz))+((gclwh15_1*pp*pz*r20*sj6))+(((-1.33942)*gclwh13_11*npz*pz))+(((2.0)*gclwh5_1*npy*sj6*(pz*pz)))+(((0.0074858)*gclwh13_1*pz*r20*sj6))+(((0.005013315118)*cj6*gclwh13_11*r21))+(((2.0)*cj6*gclwh15_2*npy*pp*pz))+(((-0.02)*gclwh5_15*npx*pz*r20*(cj6*cj6)))+(((-0.0002)*gclwh7_15*r20*rxp1_2*(cj6*cj6)))+(((-0.1881520318)*cj6*gclwh15_2*pp*r21))+(((-0.138)*cj6*gclwh0_1*npy*pz))+(((0.1401930041)*cj6*gclwh5_1*pz*r20))+(((0.01)*gclwh5_15*pp*(r21*r21)*(sj6*sj6)))+(((-2.0)*cj6*gclwh15_1*npy*(pz*pz)))+(((0.1399930041)*cj6*gclwh15_1*pz*r21))+(((-0.74858)*gclwh9_1*pz*rxp0_2*sj6))+(((-0.0074858)*cj6*gclwh9_15*r20*rxp0_2*sj6))+(((-0.66971)*gclwh5_11*pp*r21*sj6))+(((-0.0096733172829)*gclwh5_1*r21*sj6))+(((-0.069)*gclwh5_1*pp*r21*sj6))+(((0.01)*cj6*gclwh13_15*pp*r20*r22))+(((0.0963180554)*gclwh15_2*npx*pz*sj6))+(((-0.1881520318)*gclwh13_2*pp*r22))+(((-0.001399930041)*cj6*gclwh15_15*sj6*(r21*r21)))+(((-0.02)*cj6*gclwh15_15*npx*pz*r20*sj6))+(((2.0)*gclwh13_2*npz*pp*pz))+(((0.0002)*cj6*gclwh7_15*r21*rxp1_2*sj6))+(((0.66971)*cj6*gclwh15_11*pp*r21))+(((0.00675155876779811)*gclwh5_2*r21*sj6))+(((0.02)*gclwh15_15*npx*pz*r21*(sj6*sj6)))+(((-0.05165202)*gclwh9_1*rxp0_2*sj6))+(((0.0133942)*gclwh11_11*pz))+(((-7.4858e-5)*cj6*gclwh15_15*r20*r22))+(((-0.02)*cj6*gclwh7_1*pz*rxp1_2))+(((-0.05165202)*gclwh7_1*rxp2_2))+(((0.00674192696225811)*gclwh0_2*r20*sj6))+(((0.0002)*gclwh7_15*r21*rxp0_2*(sj6*sj6)))+(((-0.74858)*cj6*gclwh9_1*pz*rxp1_2))+(((-1.0)*cj6*gclwh5_2*r20*(pp*pp)))+(((-0.0133942)*gclwh7_11*rxp0_2*sj6))+(((0.74858)*cj6*gclwh9_2*pp*rxp1_2))+(((0.74858)*gclwh7_2*pp*rxp2_2))+(((0.0005165202)*gclwh2_1*r20*sj6))+(((-0.0074858)*gclwh9_15*r20*rxp1_2*(cj6*cj6)))+(((0.02)*cj6*gclwh15_15*npy*pz*r21*sj6))+(((0.093754714775811)*gclwh15_11*r20*sj6))+(((-0.0005165202)*gclwh15_1*r22))+(((-0.0096595172829)*cj6*gclwh0_1*r21))+(((0.02)*cj6*gclwh7_2*pp*rxp1_2))+((cj6*gclwh5_1*pp*pz*r20))+(((0.093754714775811)*cj6*gclwh15_11*r21))+(((-0.02)*gclwh5_15*npy*pz*r21*(sj6*sj6)))+(((-0.5013315118)*cj6*gclwh9_11*rxp1_2))+(((-0.74858)*gclwh7_1*pz*rxp2_2))+(((-0.138)*gclwh15_1*npx*pz*sj6))+(((-0.00674192696225811)*gclwh13_2*r22))+(((0.02)*cj6*rxp0_2))+(((0.02)*gclwh13_15*npz*pz*r21*sj6))+(((-0.01)*cj6*gclwh15_15*pp*sj6*(r21*r21)))+(((2.0)*cj6*gclwh5_2*npx*pp*pz))+(((0.0074858)*gclwh15_2*pp*r22))+(((-0.0074858)*gclwh13_2*pp*r20*sj6))+(((0.0005165202)*gclwh13_1*r20*sj6))+(((-0.1399930041)*gclwh0_1*pz*r20*sj6))+(((1.33942)*gclwh5_11*npy*pz*sj6))+(((-0.01)*gclwh13_15*pp*r21*r22*sj6))+(((-0.1399930041)*cj6*gclwh0_1*pz*r21))+(((-2.0)*cj6*gclwh5_1*npx*(pz*pz)))+(((0.0074858)*cj6*gclwh13_1*pz*r21))+(((-0.0074858)*gclwh2_2*pp*r20*sj6))+(((0.66971)*cj6*gclwh5_11*pp*r20))+(((-0.000963180554)*gclwh11_2*pz))+(((-0.74858)*cj6*gclwh11_2*pp*rxp0_2))+(((0.02)*gclwh11_1*(pz*pz)))+(((-0.00036050884955666)*cj6*gclwh2_2*r21))+(((0.0133942)*gclwh9_11*rxp2_2))+(((0.0002)*cj6*gclwh9_15*r20*rxp2_2))+(((-2.0)*gclwh2_2*npz*pp*pz))+(((-0.093888656775811)*gclwh5_11*r21*sj6))+(((-0.0074858)*gclwh0_2*pp*r22))+(((-0.138)*gclwh0_1*npx*pz*sj6))+(((0.0074858)*gclwh7_15*r21*rxp2_2*sj6))+(((-0.00036050884955666)*gclwh0_2*r22))+(((0.036050884955666)*gclwh7_2*rxp2_2))+(((2.0)*cj6*gclwh0_2*npy*pp*pz))+(((-0.0096595172829)*gclwh0_1*r20*sj6))+(((-0.1883520318)*cj6*gclwh5_2*pp*r20))+(((-1.0)*gclwh15_2*r20*sj6*(pp*pp)))+(((0.1399930041)*gclwh2_1*pz*r22))+(((0.00036050884955666)*gclwh15_2*r22))+(((-0.138)*gclwh13_1*npz*pz))+(((-0.02)*gclwh11_2*pp*pz))+(((-1.0)*gclwh2_1*pp*pz*r22))+(((-0.00138)*gclwh7_1*rxp0_2*sj6))+(((0.069)*gclwh0_1*pp*r20*sj6))+(((-0.02)*rxp1_2*sj6))+(((-0.05165202)*cj6*gclwh9_1*rxp1_2))+(((0.001401930041)*gclwh5_15*(r21*r21)*(sj6*sj6)))+(((0.069)*gclwh13_1*pp*r22))+(((-2.0)*gclwh5_2*npy*pp*pz*sj6))+(((-0.1881520318)*gclwh15_2*pp*r20*sj6))+(((-0.02)*cj6*gclwh13_15*npz*pz*r20))+(((-0.02)*gclwh9_2*pp*rxp2_2))+(((-0.138)*cj6*gclwh5_1*npx*pz))+((cj6*gclwh0_1*pp*pz*r21))+(((0.02)*cj6*gclwh5_15*npx*pz*r21*sj6))+(((-0.002803860082)*cj6*gclwh5_15*r20*r21*sj6)));
op[71]=((-0.0825119764)+(((-0.05165202)*gclwh7_11*rxp2_2))+(((0.59084)*cj6*gclwh5_13*npx*pz))+(((-0.069)*gclwh5_11*pp*r21*sj6))+(((-0.2211455036)*cj6*gclwh11_13*rxp0_2))+(((0.0059084)*gclwh7_13*rxp0_2*sj6))+(((0.138)*gclwh5_11*npy*pz*sj6))+(((0.05165202)*cj6*gclwh11_11*rxp0_2))+(((-0.05165202)*cj6*gclwh9_11*rxp1_2))+(((0.2211455036)*gclwh7_13*rxp2_2))+(((0.0005165202)*cj6*gclwh13_11*r21))+(((2.0)*gclwh5_9*npy*pz*sj6))+(((0.0074858)*cj6*gclwh13_9*r21))+(((0.0005165202)*gclwh13_11*r20*sj6))+(((0.002211455036)*gclwh15_13*r22))+(((0.02)*gclwh9_9*rxp2_2))+(((-0.138)*cj6*gclwh15_11*npy*pz))+(((-0.138)*gclwh15_11*npx*pz*sj6))+(((-0.041415817271222)*cj6*gclwh5_13*r20))+(((0.29542)*gclwh5_13*pp*r21*sj6))+(((0.1399930041)*gclwh13_9*r22))+(((-0.1401930041)*gclwh5_9*r21*sj6))+(((-0.05165202)*gclwh11_11*rxp1_2*sj6))+(((-0.29542)*cj6*gclwh15_13*pp*r21))+(((-2.0)*cj6*gclwh5_9*npx*pz))+(((0.0096595172829)*cj6*gclwh15_11*r21))+(((0.59084)*cj6*gclwh15_13*npy*pz))+(((-0.74858)*cj6*gclwh9_9*rxp1_2))+(((0.1401930041)*cj6*gclwh5_9*r20))+(((-0.041356733271222)*cj6*gclwh15_13*r21))+(((0.1399930041)*gclwh15_9*r20*sj6))+(((-0.00138)*cj6*gclwh7_11*rxp1_2))+(((0.069)*gclwh13_11*pp*r22))+(((-0.0096733172829)*gclwh5_11*r21*sj6))+(((-0.138)*gclwh13_11*npz*pz))+(((0.069)*cj6*gclwh15_11*pp*r21))+(((-1.0)*gclwh5_9*pp*r21*sj6))+(((-0.041356733271222)*gclwh15_13*r20*sj6))+(((-0.02)*gclwh7_9*rxp0_2*sj6))+(((-2.0)*gclwh15_9*npx*pz*sj6))+(((0.02)*gclwh11_9*pz))+((gclwh15_9*pp*r20*sj6))+(((-2.0)*gclwh13_9*npz*pz))+(((-0.0059084)*gclwh11_13*pz))+(((0.2211455036)*gclwh11_13*rxp1_2*sj6))+(((0.59084)*gclwh15_13*npx*pz*sj6))+(((-0.74858)*gclwh7_9*rxp2_2))+(((-0.74858)*gclwh9_9*rxp0_2*sj6))+(((-2.0)*cj6*gclwh15_9*npy*pz))+(((-0.00138)*gclwh7_11*rxp0_2*sj6))+(((0.59084)*gclwh13_13*npz*pz))+(((0.00138)*gclwh11_11*pz))+(((-0.138)*cj6*gclwh5_11*npx*pz))+((cj6*gclwh5_9*pp*r20))+(((-0.74858)*gclwh11_9*rxp1_2*sj6))+(((-0.002211455036)*cj6*gclwh13_13*r21))+(((0.041415817271222)*gclwh5_13*r21*sj6))+(((-0.0074858)*gclwh15_9*r22))+(((-0.0005165202)*gclwh15_11*r22))+(((0.2211455036)*cj6*gclwh9_13*rxp1_2))+(((-0.05165202)*gclwh9_11*rxp0_2*sj6))+(((0.0096595172829)*gclwh15_11*r20*sj6))+(((0.069)*cj6*gclwh5_11*pp*r20))+(((0.0096595172829)*gclwh13_11*r22))+((gclwh13_9*pp*r22))+(((-0.29542)*cj6*gclwh5_13*pp*r20))+(((-0.002211455036)*gclwh13_13*r20*sj6))+((cj6*gclwh15_9*pp*r21))+(((-0.29542)*gclwh13_13*pp*r22))+(((-0.0059084)*gclwh9_13*rxp2_2))+(((-0.041356733271222)*gclwh13_13*r22))+(((0.74858)*cj6*gclwh11_9*rxp0_2))+(((0.069)*gclwh15_11*pp*r20*sj6))+(((-0.29542)*gclwh15_13*pp*r20*sj6))+(((0.00138)*gclwh9_11*rxp2_2))+(((0.0096733172829)*cj6*gclwh5_11*r20))+(((-0.59084)*gclwh5_13*npy*pz*sj6))+(((0.0074858)*gclwh13_9*r20*sj6))+(((0.1399930041)*cj6*gclwh15_9*r21))+(((0.2211455036)*gclwh9_13*rxp0_2*sj6))+(((0.0059084)*cj6*gclwh7_13*rxp1_2))+(((-0.02)*cj6*gclwh7_9*rxp1_2)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x737=htj1*htj1;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(((1.0)+x737),-1);
if(!x738.valid){
continue;
}
cj1array[numsolutions]=((x738.value)*(((1.0)+(((-1.0)*x737)))));
CheckValue<IkReal> x739=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x739.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x739.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x740=htj2*htj2;
CheckValue<IkReal> x741=IKPowWithIntegerCheck(((1.0)+x740),-1);
if(!x741.valid){
continue;
}
cj2array[numsolutions]=((x741.value)*(((1.0)+(((-1.0)*x740)))));
CheckValue<IkReal> x742=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x742.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x742.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x743=htj3*htj3;
CheckValue<IkReal> x744=IKPowWithIntegerCheck(((1.0)+x743),-1);
if(!x744.valid){
continue;
}
cj3array[numsolutions]=((x744.value)*(((1.0)+(((-1.0)*x743)))));
CheckValue<IkReal> x745=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x745.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x745.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}

template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[1];
j5eval[0]=((((r20*r20)*(sj6*sj6)))+(((2.0)*cj6*r20*r21*sj6))+(r22*r22)+(((cj6*cj6)*(r21*r21))));
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j4, j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x746=(r20*sj6);
IkReal x747=(cj6*r21);
IkReal x748=((((-0.37429)*x747))+(((-0.37429)*x746))+(((0.01)*r22)));
IkReal x749=((((0.37429)*r22))+(((0.01)*x746))+(((0.01)*x747)));
CheckValue<IkReal> x752 = IKatan2WithCheck(IkReal(x749),IkReal(x748),IKFAST_ATAN2_MAGTHRESH);
if(!x752.valid){
continue;
}
IkReal x750=((1.0)*(x752.value));
if((((x748*x748)+(x749*x749))) < -0.00001)
continue;
CheckValue<IkReal> x753=IKPowWithIntegerCheck(IKabs(IKsqrt(((x748*x748)+(x749*x749)))),-1);
if(!x753.valid){
continue;
}
if( (((-1.0)*(x753.value)*(((((-1.0)*pz))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x753.value)*(((((-1.0)*pz))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x751=((-1.0)*(IKasin(((-1.0)*(x753.value)*(((((-1.0)*pz))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1))))))));
j5array[0]=((((-1.0)*x750))+(((-1.0)*x751)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x751))+(((-1.0)*x750)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x754=cj6*cj6;
IkReal x755=cj5*cj5;
IkReal x756=r21*r21;
IkReal x757=r22*r22;
IkReal x758=r20*r20;
IkReal x759=(cj6*r21);
IkReal x760=(sj3*x756);
IkReal x761=(cj5*r22*sj5);
IkReal x762=(sj3*x757);
IkReal x763=((1.0)*x755);
IkReal x764=((2.0)*r20*sj3*sj6);
IkReal x765=(sj3*x754*x758);
IkReal x766=((((-1.0)*sj3*x758*x763))+((x759*x764))+(((-1.0)*x760))+(((-1.0)*x762))+(((-1.0)*x765))+(((-1.0)*x754*x760*x763))+(((-2.0)*sj3*x759*x761))+((x755*x762))+((x755*x765))+(((-1.0)*x761*x764))+((x754*x760))+(((-1.0)*x755*x759*x764)));
j4eval[0]=x766;
j4eval[1]=IKsign(x766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x767=cj5*cj5;
IkReal x768=cj6*cj6;
IkReal x769=r22*r22;
IkReal x770=r20*r20;
IkReal x771=r21*r21;
IkReal x772=((1.0)*cj3);
IkReal x773=(cj6*r21);
IkReal x774=(r20*sj6);
IkReal x775=(cj3*x768);
IkReal x776=((1.0)*x770);
IkReal x777=(cj3*x767);
IkReal x778=((2.0)*cj3*cj5*r22*sj5);
IkReal x779=((((-1.0)*x767*x768*x771*x772))+((x771*x775))+(((-1.0)*x774*x778))+(((-1.0)*x767*x770*x772))+(((-2.0)*x773*x774*x777))+((x769*x777))+(((-1.0)*x768*x770*x772))+(((-1.0)*x771*x772))+(((-1.0)*x769*x772))+(((-1.0)*x773*x778))+((x767*x770*x775))+(((2.0)*cj3*x773*x774)));
j4eval[0]=x779;
j4eval[1]=IKsign(x779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x780=cj1*cj1;
IkReal x781=cj2*cj2;
IkReal x782=(cj2*sj1);
IkReal x783=((50289.96)*cj1);
IkReal x784=((10.5628985507246)*cj1);
IkReal x785=(x780*x781);
j0eval[0]=((2.0)+(((-2.0)*x782))+(((-1.0)*x782*x784))+x784+(((-1.0)*x785))+(((27.8937064482252)*x780)));
j0eval[1]=IKsign(((9522.0)+(((132801.9364)*x780))+(((-4761.0)*x785))+(((-9522.0)*x782))+(((-1.0)*x782*x783))+x783));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x786=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x786;
j0eval[1]=IKsign(x786);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x787=cj5*cj5;
IkReal x788=cj6*cj6;
IkReal x789=r20*r20;
IkReal x790=r21*r21;
IkReal x791=r22*r22;
IkReal x792=(r22*sj5);
IkReal x793=(cj6*r20);
IkReal x794=(cj1*sj2);
IkReal x795=(cj6*r21);
IkReal x796=(cj5*sj1);
IkReal x797=(r20*sj6);
IkReal x798=(r21*sj6);
IkReal x799=((2.0)*x797);
IkReal x800=((1.0)*x787);
IkReal x801=(x788*x789);
IkReal x802=(x788*x790);
IkReal x803=((((-1.0)*x802))+((cj5*x792*x799))+(((-1.0)*x791*x800))+((x787*x789))+(((-2.0)*x793*x798))+(((-1.0)*x800*x801))+(((2.0)*cj5*x792*x795))+x791+x790+x801+(((2.0)*x787*x793*x798))+((x787*x802)));
j4eval[0]=x803;
j4eval[1]=((IKabs(((((-1.0)*x793*x794))+((x796*x797))+((sj1*x792))+((x794*x798))+((x795*x796)))))+(IKabs((((cj5*x794*x797))+((cj5*x794*x795))+((sj1*x793))+((x792*x794))+(((-1.0)*sj1*x798))))));
j4eval[2]=IKsign(x803);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x804=cj1*cj1;
IkReal x805=cj2*cj2;
IkReal x806=(cj2*sj1);
IkReal x807=(x804*x805);
j0eval[0]=((-1.0)+(((5.28144927536232)*cj1*x806))+x807+x806);
j0eval[1]=IKsign(((-69.0)+(((364.42)*cj1*x806))+(((69.0)*x807))+(((69.0)*x806))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x808=(r10*sj6);
IkReal x809=((0.863573439158322)*sj5);
IkReal x810=((0.0230723086152)*cj5);
IkReal x811=(cj6*r11);
IkReal x812=(r00*sj6);
IkReal x813=((0.0230723086152)*sj5);
IkReal x814=((0.863573439158322)*cj5);
IkReal x815=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+((x809*x811))+(((-1.0)*x808*x810))+(((-1.0)*r12*x813))+(((-1.0)*r12*x814))+(((-1.0)*x810*x811))+((x808*x809)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+((x809*x812))+((x809*x815))+(((-1.0)*x810*x815))+(((-1.0)*x810*x812))+(((-1.0)*r02*x813))+(((-1.0)*r02*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+((x809*x811))+(((-1.0)*x808*x810))+(((-1.0)*r12*x813))+(((-1.0)*r12*x814))+(((-1.0)*x810*x811))+((x808*x809))))+IKsqr(((((2.30723086152)*px))+((x809*x812))+((x809*x815))+(((-1.0)*x810*x815))+(((-1.0)*x810*x812))+(((-1.0)*r02*x813))+(((-1.0)*r02*x814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+((x809*x811))+(((-1.0)*x808*x810))+(((-1.0)*r12*x813))+(((-1.0)*r12*x814))+(((-1.0)*x810*x811))+((x808*x809))), ((((2.30723086152)*px))+((x809*x812))+((x809*x815))+(((-1.0)*x810*x815))+(((-1.0)*x810*x812))+(((-1.0)*r02*x813))+(((-1.0)*r02*x814))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x816=((0.01)*cj5);
IkReal x817=(cj6*r01);
IkReal x818=((0.37429)*sj5);
IkReal x819=(cj6*r11);
IkReal x820=((0.01)*sj5);
IkReal x821=(r00*sj6);
IkReal x822=((0.37429)*cj5);
IkReal x823=(r10*sj6);
evalcond[0]=((((-1.0)*x818*x821))+((x816*x817))+(((-1.0)*x817*x818))+((x816*x821))+(((-1.0)*px))+((r02*x820))+((r02*x822))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=(((r12*x822))+((r12*x820))+(((0.43342)*(IKsin(j0))))+(((-1.0)*x818*x819))+(((-1.0)*x818*x823))+((x816*x819))+((x816*x823))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x824=(cj0*sj6);
IkReal x825=(cj0*cj6);
IkReal x826=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x826;
j4eval[1]=((IKabs((((cj5*r20*x824))+((cj5*r21*x825))+((cj0*r22*sj5)))))+(IKabs((((r20*x825))+(((-1.0)*r21*x824))))));
j4eval[2]=IKsign(x826);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x827=(r21*sj0);
IkReal x828=(r20*sj0);
IkReal x829=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x829;
j4eval[1]=((IKabs((((cj5*cj6*x827))+((r22*sj0*sj5))+((cj5*sj6*x828)))))+(IKabs((((cj6*x828))+(((-1.0)*sj6*x827))))));
j4eval[2]=IKsign(x829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x830=cj6*cj6;
IkReal x831=cj5*cj5;
IkReal x832=(r02*r22);
IkReal x833=(r22*sj5);
IkReal x834=(r00*r20);
IkReal x835=((1.0)*r21);
IkReal x836=(r20*sj6);
IkReal x837=(cj6*r01);
IkReal x838=(cj0*cj5);
IkReal x839=(r00*sj6);
IkReal x840=((1.0)*cj5);
IkReal x841=(cj6*r21);
IkReal x842=(cj5*r02*sj5);
IkReal x843=((1.0)*x831);
IkReal x844=(x830*x831);
IkReal x845=(((r01*r21*x830))+((x831*x832))+(((-1.0)*x833*x837*x840))+(((-1.0)*cj6*x831*x835*x839))+((x839*x841))+(((-1.0)*x833*x839*x840))+((x836*x837))+(((-1.0)*cj6*x835*x842))+(((-1.0)*x834*x843))+((x834*x844))+(((-1.0)*r01*x835*x844))+(((-1.0)*x830*x834))+(((-1.0)*x832))+(((-1.0)*r02*sj5*x836*x840))+(((-1.0)*r01*x835))+(((-1.0)*x836*x837*x843)));
j4eval[0]=x845;
j4eval[1]=((IKabs((((x838*x841))+((cj0*x833))+((x836*x838)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x835))))));
j4eval[2]=IKsign(x845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x846=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x846;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x847=((1.0)*sj5);
IkReal x848=(((cj5*r22))+(((-1.0)*cj6*r21*x847))+(((-1.0)*r20*sj6*x847)));
j4eval[0]=x848;
j4eval[1]=IKsign(x848);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x849=cj6*cj6;
IkReal x850=cj5*cj5;
IkReal x851=r10*r10;
IkReal x852=r11*r11;
IkReal x853=r12*r12;
IkReal x854=(r10*sj6);
IkReal x855=(r12*sj5);
IkReal x856=((2.0)*cj6*r11);
IkReal x857=((1.0)*x851);
IkReal x858=(x849*x852);
IkReal x859=(((x850*x853))+(((-2.0)*cj5*x854*x855))+(((-1.0)*x850*x858))+(((-1.0)*x852))+(((-1.0)*x853))+(((-1.0)*x850*x857))+(((-1.0)*x849*x857))+((x854*x856))+(((-1.0)*x850*x854*x856))+x858+(((-1.0)*cj5*x855*x856))+((x849*x850*x851)));
j4eval[0]=x859;
j4eval[1]=((IKabs((((cj5*cj6*r11))+x855+((cj5*x854)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x860=cj6*cj6;
IkReal x861=cj5*cj5;
IkReal x862=r10*r10;
IkReal x863=r11*r11;
IkReal x864=r12*r12;
IkReal x865=(r10*sj6);
IkReal x866=(r12*sj5);
IkReal x867=((2.0)*cj6*r11);
IkReal x868=(x860*x863);
IkReal x869=(x861*x862);
CheckValue<IkReal> x870=IKPowWithIntegerCheck(IKsign(((((-1.0)*x863))+(((-1.0)*x864))+(((-1.0)*x869))+(((-1.0)*cj5*x866*x867))+(((-1.0)*x861*x868))+((x861*x864))+((x860*x869))+x868+(((-1.0)*x861*x865*x867))+((x865*x867))+(((-2.0)*cj5*x865*x866))+(((-1.0)*x860*x862)))),-1);
if(!x870.valid){
continue;
}
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*cj6*r11))+((cj5*x865))+x866)),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x870.value)))+(x871.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x872=IKsin(j4);
IkReal x873=IKcos(j4);
IkReal x874=(cj5*cj6);
IkReal x875=(r11*sj6);
IkReal x876=(cj6*r20);
IkReal x877=(cj6*r10);
IkReal x878=(cj5*sj6);
IkReal x879=(r01*sj6);
IkReal x880=(r21*sj6);
IkReal x881=(cj6*r00);
IkReal x882=((1.0)*x873);
IkReal x883=((1.0)*x872);
IkReal x884=(sj5*x883);
evalcond[0]=((((-1.0)*r21*x874*x883))+(((-1.0)*r20*x878*x883))+((x873*x876))+(((-1.0)*r22*x884))+(((-1.0)*x880*x882)));
evalcond[1]=((((-1.0)*r12*x884))+((x873*x877))+(((-1.0)*r11*x874*x883))+(((-1.0)*r10*x878*x883))+(((-1.0)*x875*x882)));
evalcond[2]=((((-1.0)*r21*x874*x882))+(((-1.0)*r20*x878*x882))+(((-1.0)*r22*sj5*x882))+(((-1.0)*x876*x883))+((x872*x880)));
evalcond[3]=(((x872*x879))+(((-1.0)*x881*x883))+(((-1.0)*r01*x874*x882))+(((-1.0)*r02*sj5*x882))+(((-1.0)*r00*x878*x882)));
evalcond[4]=((-1.0)+(((-1.0)*x879*x882))+(((-1.0)*r01*x874*x883))+(((-1.0)*r00*x878*x883))+(((-1.0)*r02*x884))+((x873*x881)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x882))+((x872*x875))+(((-1.0)*r11*x874*x882))+(((-1.0)*x877*x883))+(((-1.0)*r10*x878*x882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x885=((1.0)*sj5);
CheckValue<IkReal> x886 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x886.valid){
continue;
}
CheckValue<IkReal> x887=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x885))+(((-1.0)*cj6*r21*x885)))),-1);
if(!x887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x886.value)+(((1.5707963267949)*(x887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x888=IKsin(j4);
IkReal x889=IKcos(j4);
IkReal x890=(cj5*cj6);
IkReal x891=(r11*sj6);
IkReal x892=(cj6*r20);
IkReal x893=(cj6*r10);
IkReal x894=(cj5*sj6);
IkReal x895=(r01*sj6);
IkReal x896=(r21*sj6);
IkReal x897=(cj6*r00);
IkReal x898=((1.0)*x889);
IkReal x899=((1.0)*x888);
IkReal x900=(sj5*x899);
evalcond[0]=((((-1.0)*r22*x900))+(((-1.0)*x896*x898))+(((-1.0)*r20*x894*x899))+((x889*x892))+(((-1.0)*r21*x890*x899)));
evalcond[1]=((((-1.0)*r10*x894*x899))+(((-1.0)*r12*x900))+(((-1.0)*r11*x890*x899))+((x889*x893))+(((-1.0)*x891*x898)));
evalcond[2]=((((-1.0)*x892*x899))+(((-1.0)*r22*sj5*x898))+(((-1.0)*r20*x894*x898))+((x888*x896))+(((-1.0)*r21*x890*x898)));
evalcond[3]=((((-1.0)*r01*x890*x898))+(((-1.0)*r00*x894*x898))+(((-1.0)*r02*sj5*x898))+(((-1.0)*x897*x899))+((x888*x895)));
evalcond[4]=((-1.0)+(((-1.0)*x895*x898))+(((-1.0)*r01*x890*x899))+(((-1.0)*r00*x894*x899))+(((-1.0)*r02*x900))+((x889*x897)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x894*x898))+(((-1.0)*r11*x890*x898))+(((-1.0)*x893*x899))+((x888*x891))+(((-1.0)*r12*sj5*x898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x901 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x901.value)+(((1.5707963267949)*(x902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x903=IKsin(j4);
IkReal x904=IKcos(j4);
IkReal x905=(cj5*cj6);
IkReal x906=(r11*sj6);
IkReal x907=(cj6*r20);
IkReal x908=(cj6*r10);
IkReal x909=(cj5*sj6);
IkReal x910=(r01*sj6);
IkReal x911=(r21*sj6);
IkReal x912=(cj6*r00);
IkReal x913=((1.0)*x904);
IkReal x914=((1.0)*x903);
IkReal x915=(sj5*x914);
evalcond[0]=((((-1.0)*r22*x915))+(((-1.0)*r21*x905*x914))+(((-1.0)*r20*x909*x914))+(((-1.0)*x911*x913))+((x904*x907)));
evalcond[1]=((((-1.0)*x906*x913))+(((-1.0)*r11*x905*x914))+(((-1.0)*r10*x909*x914))+(((-1.0)*r12*x915))+((x904*x908)));
evalcond[2]=(((x903*x911))+(((-1.0)*r21*x905*x913))+(((-1.0)*r22*sj5*x913))+(((-1.0)*r20*x909*x913))+(((-1.0)*x907*x914)));
evalcond[3]=(((x903*x910))+(((-1.0)*r00*x909*x913))+(((-1.0)*r01*x905*x913))+(((-1.0)*r02*sj5*x913))+(((-1.0)*x912*x914)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x915))+(((-1.0)*x910*x913))+(((-1.0)*r00*x909*x914))+(((-1.0)*r01*x905*x914))+((x904*x912)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x905*x913))+(((-1.0)*x908*x914))+((x903*x906))+(((-1.0)*r10*x909*x913))+(((-1.0)*r12*sj5*x913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x916=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x916;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x917=((1.0)*sj6);
IkReal x918=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x917)));
j4eval[0]=x918;
j4eval[1]=IKsign(x918);
j4eval[2]=((IKabs(((((-1.0)*r21*x917))+((cj6*r20)))))+(IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x919=r11*r11;
IkReal x920=cj5*cj5;
IkReal x921=cj6*cj6;
IkReal x922=r10*r10;
IkReal x923=r12*r12;
IkReal x924=(r12*sj5);
IkReal x925=(cj6*r10);
IkReal x926=((1.0)*x921);
IkReal x927=(cj5*cj6*r11);
IkReal x928=(cj5*r10*sj6);
IkReal x929=((2.0)*r11*sj6);
IkReal x930=(x920*x922);
IkReal x931=((((-1.0)*x925*x929))+((x919*x920*x921))+(((-1.0)*x920*x923))+((x921*x922))+(((-1.0)*x926*x930))+(((2.0)*x924*x928))+(((2.0)*x924*x927))+((x920*x925*x929))+(((-1.0)*x919*x926))+x930+x923+x919);
j4eval[0]=x931;
j4eval[1]=IKsign(x931);
j4eval[2]=((IKabs((x928+x927+x924)))+(IKabs(((((-1.0)*r11*sj6))+x925))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x932=r11*r11;
IkReal x933=cj5*cj5;
IkReal x934=cj6*cj6;
IkReal x935=r10*r10;
IkReal x936=r12*r12;
IkReal x937=(r10*sj6);
IkReal x938=(r12*sj5);
IkReal x939=((1.0)*x934);
IkReal x940=(cj5*cj6*r11);
IkReal x941=((2.0)*cj6*r11);
IkReal x942=(x933*x935);
CheckValue<IkReal> x943=IKPowWithIntegerCheck(IKsign((((x932*x933*x934))+(((-1.0)*x939*x942))+(((2.0)*cj5*x937*x938))+((x933*x937*x941))+(((2.0)*x938*x940))+(((-1.0)*x932*x939))+(((-1.0)*x933*x936))+((x934*x935))+(((-1.0)*x937*x941))+x936+x932+x942)),-1);
if(!x943.valid){
continue;
}
CheckValue<IkReal> x944 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x938+x940+((cj5*x937)))),IKFAST_ATAN2_MAGTHRESH);
if(!x944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x943.value)))+(x944.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x945=IKsin(j4);
IkReal x946=IKcos(j4);
IkReal x947=(cj5*cj6);
IkReal x948=(r11*sj6);
IkReal x949=(cj6*r20);
IkReal x950=(cj6*r10);
IkReal x951=(cj5*sj6);
IkReal x952=(r01*sj6);
IkReal x953=(r21*sj6);
IkReal x954=(cj6*r00);
IkReal x955=((1.0)*x946);
IkReal x956=((1.0)*x945);
IkReal x957=(sj5*x956);
evalcond[0]=((((-1.0)*r20*x951*x956))+((x946*x949))+(((-1.0)*r21*x947*x956))+(((-1.0)*x953*x955))+(((-1.0)*r22*x957)));
evalcond[1]=((((-1.0)*r11*x947*x956))+((x946*x950))+(((-1.0)*r12*x957))+(((-1.0)*r10*x951*x956))+(((-1.0)*x948*x955)));
evalcond[2]=((((-1.0)*r20*x951*x955))+(((-1.0)*r21*x947*x955))+(((-1.0)*x949*x956))+((x945*x953))+(((-1.0)*r22*sj5*x955)));
evalcond[3]=((((-1.0)*r02*sj5*x955))+(((-1.0)*r01*x947*x955))+(((-1.0)*r00*x951*x955))+((x945*x952))+(((-1.0)*x954*x956)));
evalcond[4]=((1.0)+(((-1.0)*r01*x947*x956))+(((-1.0)*r00*x951*x956))+((x946*x954))+(((-1.0)*x952*x955))+(((-1.0)*r02*x957)));
evalcond[5]=((1.0)+(((-1.0)*r11*x947*x955))+(((-1.0)*r12*sj5*x955))+((x945*x948))+(((-1.0)*x950*x956))+(((-1.0)*r10*x951*x955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x958=((1.0)*sj6);
CheckValue<IkReal> x959=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x958)))),-1);
if(!x959.valid){
continue;
}
CheckValue<IkReal> x960 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x958))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x960.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x959.value)))+(x960.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x961=IKsin(j4);
IkReal x962=IKcos(j4);
IkReal x963=(cj5*cj6);
IkReal x964=(r11*sj6);
IkReal x965=(cj6*r20);
IkReal x966=(cj6*r10);
IkReal x967=(cj5*sj6);
IkReal x968=(r01*sj6);
IkReal x969=(r21*sj6);
IkReal x970=(cj6*r00);
IkReal x971=((1.0)*x962);
IkReal x972=((1.0)*x961);
IkReal x973=(sj5*x972);
evalcond[0]=((((-1.0)*x969*x971))+(((-1.0)*r21*x963*x972))+((x962*x965))+(((-1.0)*r20*x967*x972))+(((-1.0)*r22*x973)));
evalcond[1]=((((-1.0)*r10*x967*x972))+(((-1.0)*r11*x963*x972))+((x962*x966))+(((-1.0)*x964*x971))+(((-1.0)*r12*x973)));
evalcond[2]=((((-1.0)*x965*x972))+(((-1.0)*r21*x963*x971))+((x961*x969))+(((-1.0)*r20*x967*x971))+(((-1.0)*r22*sj5*x971)));
evalcond[3]=(((x961*x968))+(((-1.0)*r00*x967*x971))+(((-1.0)*r02*sj5*x971))+(((-1.0)*r01*x963*x971))+(((-1.0)*x970*x972)));
evalcond[4]=((1.0)+(((-1.0)*r00*x967*x972))+((x962*x970))+(((-1.0)*r01*x963*x972))+(((-1.0)*r02*x973))+(((-1.0)*x968*x971)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x971))+(((-1.0)*r10*x967*x971))+(((-1.0)*r11*x963*x971))+((x961*x964))+(((-1.0)*x966*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x974=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x974.valid){
continue;
}
CheckValue<IkReal> x975 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x975.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x974.value)))+(x975.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x976=IKsin(j4);
IkReal x977=IKcos(j4);
IkReal x978=(cj5*cj6);
IkReal x979=(r11*sj6);
IkReal x980=(cj6*r20);
IkReal x981=(cj6*r10);
IkReal x982=(cj5*sj6);
IkReal x983=(r01*sj6);
IkReal x984=(r21*sj6);
IkReal x985=(cj6*r00);
IkReal x986=((1.0)*x977);
IkReal x987=((1.0)*x976);
IkReal x988=(sj5*x987);
evalcond[0]=((((-1.0)*r20*x982*x987))+((x977*x980))+(((-1.0)*r21*x978*x987))+(((-1.0)*x984*x986))+(((-1.0)*r22*x988)));
evalcond[1]=((((-1.0)*r10*x982*x987))+((x977*x981))+(((-1.0)*r12*x988))+(((-1.0)*x979*x986))+(((-1.0)*r11*x978*x987)));
evalcond[2]=((((-1.0)*r20*x982*x986))+((x976*x984))+(((-1.0)*r21*x978*x986))+(((-1.0)*x980*x987))+(((-1.0)*r22*sj5*x986)));
evalcond[3]=((((-1.0)*r00*x982*x986))+((x976*x983))+(((-1.0)*r02*sj5*x986))+(((-1.0)*r01*x978*x986))+(((-1.0)*x985*x987)));
evalcond[4]=((1.0)+(((-1.0)*r00*x982*x987))+((x977*x985))+(((-1.0)*r01*x978*x987))+(((-1.0)*r02*x988))+(((-1.0)*x983*x986)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x986))+(((-1.0)*r10*x982*x986))+((x976*x979))+(((-1.0)*x981*x987))+(((-1.0)*r11*x978*x986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x989=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x989;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x990=((1.0)*sj5);
IkReal x991=(((cj5*r22))+(((-1.0)*cj6*r21*x990))+(((-1.0)*r20*sj6*x990)));
j4eval[0]=x991;
j4eval[1]=IKsign(x991);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x992=cj6*cj6;
IkReal x993=cj5*cj5;
IkReal x994=r00*r00;
IkReal x995=r01*r01;
IkReal x996=r02*r02;
IkReal x997=(cj6*r00);
IkReal x998=(cj5*cj6*r01);
IkReal x999=((2.0)*r02*sj5);
IkReal x1000=((1.0)*x992);
IkReal x1001=((2.0)*r01*sj6);
IkReal x1002=(cj5*r00*sj6);
IkReal x1003=(x993*x994);
IkReal x1004=((((-1.0)*x1000*x993*x995))+((x993*x996))+(((-1.0)*x996))+(((-1.0)*x995))+(((-1.0)*x1003))+(((-1.0)*x1002*x999))+((x992*x995))+((x1003*x992))+((x1001*x997))+(((-1.0)*x1000*x994))+(((-1.0)*x998*x999))+(((-1.0)*x1001*x993*x997)));
j4eval[0]=x1004;
j4eval[1]=((IKabs((x1002+((r02*sj5))+x998)))+(IKabs(((((-1.0)*r01*sj6))+x997))));
j4eval[2]=IKsign(x1004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1005=cj6*cj6;
IkReal x1006=cj5*cj5;
IkReal x1007=r00*r00;
IkReal x1008=r01*r01;
IkReal x1009=r02*r02;
IkReal x1010=(cj6*r00);
IkReal x1011=(cj5*cj6*r01);
IkReal x1012=((2.0)*r02*sj5);
IkReal x1013=((1.0)*x1005);
IkReal x1014=((2.0)*r01*sj6);
IkReal x1015=(cj5*r00*sj6);
IkReal x1016=(x1006*x1007);
CheckValue<IkReal> x1017 = IKatan2WithCheck(IkReal((x1010+(((-1.0)*r01*sj6)))),IkReal((x1015+x1011+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1017.valid){
continue;
}
CheckValue<IkReal> x1018=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1012*x1015))+(((-1.0)*x1009))+(((-1.0)*x1008))+(((-1.0)*x1011*x1012))+(((-1.0)*x1006*x1010*x1014))+(((-1.0)*x1006*x1008*x1013))+((x1005*x1016))+((x1006*x1009))+((x1005*x1008))+(((-1.0)*x1007*x1013))+((x1010*x1014))+(((-1.0)*x1016)))),-1);
if(!x1018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1017.value)+(((1.5707963267949)*(x1018.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1019=IKsin(j4);
IkReal x1020=IKcos(j4);
IkReal x1021=(cj5*cj6);
IkReal x1022=(r11*sj6);
IkReal x1023=(cj6*r20);
IkReal x1024=(cj6*r10);
IkReal x1025=(cj5*sj6);
IkReal x1026=(r21*sj6);
IkReal x1027=(cj6*r00);
IkReal x1028=(r01*sj6);
IkReal x1029=((1.0)*x1020);
IkReal x1030=((1.0)*x1019);
IkReal x1031=(sj5*x1030);
evalcond[0]=((((-1.0)*r21*x1021*x1030))+(((-1.0)*x1026*x1029))+(((-1.0)*r20*x1025*x1030))+((x1020*x1023))+(((-1.0)*r22*x1031)));
evalcond[1]=((((-1.0)*x1028*x1029))+(((-1.0)*r02*x1031))+(((-1.0)*r01*x1021*x1030))+((x1020*x1027))+(((-1.0)*r00*x1025*x1030)));
evalcond[2]=((((-1.0)*x1023*x1030))+((x1019*x1026))+(((-1.0)*r21*x1021*x1029))+(((-1.0)*r22*sj5*x1029))+(((-1.0)*r20*x1025*x1029)));
evalcond[3]=((((-1.0)*x1024*x1030))+(((-1.0)*r11*x1021*x1029))+(((-1.0)*r10*x1025*x1029))+((x1019*x1022))+(((-1.0)*r12*sj5*x1029)));
evalcond[4]=((1.0)+(((-1.0)*r11*x1021*x1030))+(((-1.0)*x1022*x1029))+(((-1.0)*r10*x1025*x1030))+((x1020*x1024))+(((-1.0)*r12*x1031)));
evalcond[5]=((-1.0)+(((-1.0)*x1027*x1030))+(((-1.0)*r00*x1025*x1029))+(((-1.0)*r02*sj5*x1029))+((x1019*x1028))+(((-1.0)*r01*x1021*x1029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1032=((1.0)*sj5);
CheckValue<IkReal> x1033=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x1032))+(((-1.0)*cj6*r21*x1032)))),-1);
if(!x1033.valid){
continue;
}
CheckValue<IkReal> x1034 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1033.value)))+(x1034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1035=IKsin(j4);
IkReal x1036=IKcos(j4);
IkReal x1037=(cj5*cj6);
IkReal x1038=(r11*sj6);
IkReal x1039=(cj6*r20);
IkReal x1040=(cj6*r10);
IkReal x1041=(cj5*sj6);
IkReal x1042=(r21*sj6);
IkReal x1043=(cj6*r00);
IkReal x1044=(r01*sj6);
IkReal x1045=((1.0)*x1036);
IkReal x1046=((1.0)*x1035);
IkReal x1047=(sj5*x1046);
evalcond[0]=(((x1036*x1039))+(((-1.0)*r21*x1037*x1046))+(((-1.0)*r22*x1047))+(((-1.0)*x1042*x1045))+(((-1.0)*r20*x1041*x1046)));
evalcond[1]=((((-1.0)*r02*x1047))+(((-1.0)*x1044*x1045))+(((-1.0)*r01*x1037*x1046))+((x1036*x1043))+(((-1.0)*r00*x1041*x1046)));
evalcond[2]=(((x1035*x1042))+(((-1.0)*r21*x1037*x1045))+(((-1.0)*x1039*x1046))+(((-1.0)*r20*x1041*x1045))+(((-1.0)*r22*sj5*x1045)));
evalcond[3]=((((-1.0)*r10*x1041*x1045))+(((-1.0)*r12*sj5*x1045))+(((-1.0)*x1040*x1046))+((x1035*x1038))+(((-1.0)*r11*x1037*x1045)));
evalcond[4]=((1.0)+(((-1.0)*r10*x1041*x1046))+(((-1.0)*x1038*x1045))+(((-1.0)*r12*x1047))+((x1036*x1040))+(((-1.0)*r11*x1037*x1046)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x1045))+((x1035*x1044))+(((-1.0)*x1043*x1046))+(((-1.0)*r01*x1037*x1045))+(((-1.0)*r00*x1041*x1045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1048 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1048.valid){
continue;
}
CheckValue<IkReal> x1049=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x1049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1048.value)+(((1.5707963267949)*(x1049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1050=IKsin(j4);
IkReal x1051=IKcos(j4);
IkReal x1052=(cj5*cj6);
IkReal x1053=(r11*sj6);
IkReal x1054=(cj6*r20);
IkReal x1055=(cj6*r10);
IkReal x1056=(cj5*sj6);
IkReal x1057=(r21*sj6);
IkReal x1058=(cj6*r00);
IkReal x1059=(r01*sj6);
IkReal x1060=((1.0)*x1051);
IkReal x1061=((1.0)*x1050);
IkReal x1062=(sj5*x1061);
evalcond[0]=((((-1.0)*r21*x1052*x1061))+(((-1.0)*r22*x1062))+(((-1.0)*x1057*x1060))+((x1051*x1054))+(((-1.0)*r20*x1056*x1061)));
evalcond[1]=((((-1.0)*r02*x1062))+(((-1.0)*x1059*x1060))+(((-1.0)*r01*x1052*x1061))+((x1051*x1058))+(((-1.0)*r00*x1056*x1061)));
evalcond[2]=((((-1.0)*r21*x1052*x1060))+(((-1.0)*r22*sj5*x1060))+((x1050*x1057))+(((-1.0)*x1054*x1061))+(((-1.0)*r20*x1056*x1060)));
evalcond[3]=((((-1.0)*r12*sj5*x1060))+((x1050*x1053))+(((-1.0)*r11*x1052*x1060))+(((-1.0)*x1055*x1061))+(((-1.0)*r10*x1056*x1060)));
evalcond[4]=((1.0)+(((-1.0)*r12*x1062))+(((-1.0)*r11*x1052*x1061))+((x1051*x1055))+(((-1.0)*x1053*x1060))+(((-1.0)*r10*x1056*x1061)));
evalcond[5]=((-1.0)+(((-1.0)*x1058*x1061))+(((-1.0)*r01*x1052*x1060))+((x1050*x1059))+(((-1.0)*r00*x1056*x1060))+(((-1.0)*r02*sj5*x1060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1063=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x1063;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x1063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1064=((1.0)*sj6);
IkReal x1065=((((-1.0)*r00*sj5*x1064))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x1065;
j4eval[1]=IKsign(x1065);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x1064))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1066=cj6*cj6;
IkReal x1067=r01*r01;
IkReal x1068=cj5*cj5;
IkReal x1069=r00*r00;
IkReal x1070=r02*r02;
IkReal x1071=(cj6*r00);
IkReal x1072=(r02*sj5);
IkReal x1073=(cj5*cj6*r01);
IkReal x1074=((2.0)*r01*sj6);
IkReal x1075=(cj5*r00*sj6);
IkReal x1076=((1.0)*x1068);
IkReal x1077=(x1066*x1069);
IkReal x1078=(x1066*x1067);
IkReal x1079=(((x1068*x1078))+((x1068*x1069))+((x1068*x1071*x1074))+x1077+x1070+x1067+(((-1.0)*x1070*x1076))+(((-1.0)*x1071*x1074))+(((-1.0)*x1076*x1077))+(((2.0)*x1072*x1073))+(((2.0)*x1072*x1075))+(((-1.0)*x1078)));
j4eval[0]=x1079;
j4eval[1]=((IKabs((x1075+x1072+x1073)))+(IKabs((x1071+(((-1.0)*r01*sj6))))));
j4eval[2]=IKsign(x1079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1080=cj6*cj6;
IkReal x1081=r01*r01;
IkReal x1082=cj5*cj5;
IkReal x1083=r00*r00;
IkReal x1084=r02*r02;
IkReal x1085=(cj6*r00);
IkReal x1086=((2.0)*r01);
IkReal x1087=(cj5*cj6);
IkReal x1088=(r02*sj5);
IkReal x1089=(cj5*r00*sj6);
IkReal x1090=(x1082*x1083);
IkReal x1091=(x1080*x1081);
CheckValue<IkReal> x1092 = IKatan2WithCheck(IkReal((x1085+(((-1.0)*r01*sj6)))),IkReal((x1089+x1088+((r01*x1087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1092.valid){
continue;
}
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1080*x1090))+(((-1.0)*x1082*x1084))+x1090+x1084+x1081+(((-1.0)*sj6*x1085*x1086))+((sj6*x1082*x1085*x1086))+((x1086*x1087*x1088))+(((-1.0)*x1091))+(((2.0)*x1088*x1089))+((x1080*x1083))+((x1082*x1091)))),-1);
if(!x1093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1092.value)+(((1.5707963267949)*(x1093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1094=IKsin(j4);
IkReal x1095=IKcos(j4);
IkReal x1096=(cj5*cj6);
IkReal x1097=(r11*sj6);
IkReal x1098=(cj6*r20);
IkReal x1099=(cj6*r10);
IkReal x1100=(cj5*sj6);
IkReal x1101=(r21*sj6);
IkReal x1102=(cj6*r00);
IkReal x1103=(r01*sj6);
IkReal x1104=((1.0)*x1095);
IkReal x1105=((1.0)*x1094);
IkReal x1106=(sj5*x1105);
evalcond[0]=((((-1.0)*r20*x1100*x1105))+(((-1.0)*r21*x1096*x1105))+(((-1.0)*r22*x1106))+((x1095*x1098))+(((-1.0)*x1101*x1104)));
evalcond[1]=((((-1.0)*x1103*x1104))+(((-1.0)*r02*x1106))+(((-1.0)*r01*x1096*x1105))+(((-1.0)*r00*x1100*x1105))+((x1095*x1102)));
evalcond[2]=(((x1094*x1101))+(((-1.0)*r20*x1100*x1104))+(((-1.0)*x1098*x1105))+(((-1.0)*r21*x1096*x1104))+(((-1.0)*r22*sj5*x1104)));
evalcond[3]=((((-1.0)*r12*sj5*x1104))+(((-1.0)*r10*x1100*x1104))+((x1094*x1097))+(((-1.0)*x1099*x1105))+(((-1.0)*r11*x1096*x1104)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x1106))+(((-1.0)*r10*x1100*x1105))+((x1095*x1099))+(((-1.0)*r11*x1096*x1105))+(((-1.0)*x1097*x1104)));
evalcond[5]=((1.0)+((x1094*x1103))+(((-1.0)*r01*x1096*x1104))+(((-1.0)*r02*sj5*x1104))+(((-1.0)*r00*x1100*x1104))+(((-1.0)*x1102*x1105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1107=((1.0)*sj6);
CheckValue<IkReal> x1108 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1107))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1108.valid){
continue;
}
CheckValue<IkReal> x1109=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x1107))+((cj5*r02)))),-1);
if(!x1109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1108.value)+(((1.5707963267949)*(x1109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1110=IKsin(j4);
IkReal x1111=IKcos(j4);
IkReal x1112=(cj5*cj6);
IkReal x1113=(r11*sj6);
IkReal x1114=(cj6*r20);
IkReal x1115=(cj6*r10);
IkReal x1116=(cj5*sj6);
IkReal x1117=(r21*sj6);
IkReal x1118=(cj6*r00);
IkReal x1119=(r01*sj6);
IkReal x1120=((1.0)*x1111);
IkReal x1121=((1.0)*x1110);
IkReal x1122=(sj5*x1121);
evalcond[0]=((((-1.0)*r21*x1112*x1121))+((x1111*x1114))+(((-1.0)*r20*x1116*x1121))+(((-1.0)*x1117*x1120))+(((-1.0)*r22*x1122)));
evalcond[1]=((((-1.0)*r00*x1116*x1121))+(((-1.0)*r01*x1112*x1121))+((x1111*x1118))+(((-1.0)*x1119*x1120))+(((-1.0)*r02*x1122)));
evalcond[2]=((((-1.0)*r21*x1112*x1120))+(((-1.0)*r20*x1116*x1120))+(((-1.0)*x1114*x1121))+((x1110*x1117))+(((-1.0)*r22*sj5*x1120)));
evalcond[3]=(((x1110*x1113))+(((-1.0)*r11*x1112*x1120))+(((-1.0)*x1115*x1121))+(((-1.0)*r10*x1116*x1120))+(((-1.0)*r12*sj5*x1120)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x1122))+((x1111*x1115))+(((-1.0)*x1113*x1120))+(((-1.0)*r11*x1112*x1121))+(((-1.0)*r10*x1116*x1121)));
evalcond[5]=((1.0)+(((-1.0)*r00*x1116*x1120))+(((-1.0)*r01*x1112*x1120))+((x1110*x1119))+(((-1.0)*r02*sj5*x1120))+(((-1.0)*x1118*x1121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1123=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x1123.valid){
continue;
}
CheckValue<IkReal> x1124 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1123.value)))+(x1124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1125=IKsin(j4);
IkReal x1126=IKcos(j4);
IkReal x1127=(cj5*cj6);
IkReal x1128=(r11*sj6);
IkReal x1129=(cj6*r20);
IkReal x1130=(cj6*r10);
IkReal x1131=(cj5*sj6);
IkReal x1132=(r21*sj6);
IkReal x1133=(cj6*r00);
IkReal x1134=(r01*sj6);
IkReal x1135=((1.0)*x1126);
IkReal x1136=((1.0)*x1125);
IkReal x1137=(sj5*x1136);
evalcond[0]=((((-1.0)*r20*x1131*x1136))+(((-1.0)*r22*x1137))+(((-1.0)*r21*x1127*x1136))+(((-1.0)*x1132*x1135))+((x1126*x1129)));
evalcond[1]=((((-1.0)*r00*x1131*x1136))+((x1126*x1133))+(((-1.0)*r01*x1127*x1136))+(((-1.0)*x1134*x1135))+(((-1.0)*r02*x1137)));
evalcond[2]=(((x1125*x1132))+(((-1.0)*r20*x1131*x1135))+(((-1.0)*r22*sj5*x1135))+(((-1.0)*r21*x1127*x1135))+(((-1.0)*x1129*x1136)));
evalcond[3]=((((-1.0)*r10*x1131*x1135))+(((-1.0)*x1130*x1136))+((x1125*x1128))+(((-1.0)*r11*x1127*x1135))+(((-1.0)*r12*sj5*x1135)));
evalcond[4]=((-1.0)+((x1126*x1130))+(((-1.0)*r10*x1131*x1136))+(((-1.0)*r12*x1137))+(((-1.0)*r11*x1127*x1136))+(((-1.0)*x1128*x1135)));
evalcond[5]=((1.0)+(((-1.0)*r00*x1131*x1135))+(((-1.0)*r02*sj5*x1135))+(((-1.0)*r01*x1127*x1135))+((x1125*x1134))+(((-1.0)*x1133*x1136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1138=cj6*cj6;
IkReal x1139=cj5*cj5;
IkReal x1140=(r22*sj5);
IkReal x1141=(cj0*r20);
IkReal x1142=((1.0)*r21);
IkReal x1143=(cj5*sj6);
IkReal x1144=(r02*r22);
IkReal x1145=(cj5*cj6);
IkReal x1146=(r02*sj5);
IkReal x1147=(cj6*sj6);
IkReal x1148=((1.0)*r20);
IkReal x1149=(r01*x1142);
IkReal x1150=(r00*r20*x1139);
CheckValue<IkReal> x1151 = IKatan2WithCheck(IkReal((((cj6*x1141))+(((-1.0)*cj0*sj6*x1142)))),IkReal((((x1141*x1143))+((cj0*r21*x1145))+((cj0*x1140)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1151.valid){
continue;
}
CheckValue<IkReal> x1152=IKPowWithIntegerCheck(IKsign((((r01*r20*x1147))+(((-1.0)*r00*x1138*x1148))+(((-1.0)*r00*x1139*x1142*x1147))+(((-1.0)*r00*x1140*x1143))+(((-1.0)*x1149))+(((-1.0)*x1144))+(((-1.0)*x1142*x1145*x1146))+(((-1.0)*r01*x1139*x1147*x1148))+(((-1.0)*x1143*x1146*x1148))+(((-1.0)*r01*x1140*x1145))+((r01*r21*x1138))+((x1139*x1144))+((x1138*x1150))+(((-1.0)*x1138*x1139*x1149))+((r00*r21*x1147))+(((-1.0)*r00*x1139*x1148)))),-1);
if(!x1152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1151.value)+(((1.5707963267949)*(x1152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1153=IKsin(j4);
IkReal x1154=IKcos(j4);
IkReal x1155=((1.0)*sj0);
IkReal x1156=((1.0)*cj6);
IkReal x1157=((1.0)*sj6);
IkReal x1158=(cj5*x1154);
IkReal x1159=(r20*x1153);
IkReal x1160=(cj6*x1154);
IkReal x1161=(r11*x1153);
IkReal x1162=(r21*x1153);
IkReal x1163=(r01*x1153);
IkReal x1164=((1.0)*sj5*x1153);
IkReal x1165=((1.0)*sj5*x1154);
IkReal x1166=(cj5*x1153*x1157);
evalcond[0]=(((r20*x1160))+(((-1.0)*cj5*x1156*x1162))+(((-1.0)*cj5*x1157*x1159))+(((-1.0)*r21*x1154*x1157))+(((-1.0)*r22*x1164)));
evalcond[1]=((((-1.0)*r20*x1157*x1158))+(((-1.0)*r21*x1156*x1158))+(((-1.0)*x1156*x1159))+((sj6*x1162))+(((-1.0)*r22*x1165)));
evalcond[2]=((((-1.0)*r10*x1166))+cj0+(((-1.0)*cj5*x1156*x1161))+((r10*x1160))+(((-1.0)*r12*x1164))+(((-1.0)*r11*x1154*x1157)));
evalcond[3]=((((-1.0)*r02*x1164))+(((-1.0)*x1155))+(((-1.0)*cj5*x1156*x1163))+((r00*x1160))+(((-1.0)*r01*x1154*x1157))+(((-1.0)*r00*x1166)));
evalcond[4]=((((-1.0)*r02*x1165))+((sj6*x1163))+(((-1.0)*r00*x1157*x1158))+(((-1.0)*r00*x1153*x1156))+(((-1.0)*r01*x1156*x1158))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1155))+(((-1.0)*r11*x1156*x1158))+(((-1.0)*r10*x1157*x1158))+(((-1.0)*r12*x1165))+((sj6*x1161))+(((-1.0)*r10*x1153*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1167=(cj5*sj0);
CheckValue<IkReal> x1168=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x1168.valid){
continue;
}
CheckValue<IkReal> x1169 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((cj6*r21*x1167))+((r22*sj0*sj5))+((r20*sj6*x1167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1168.value)))+(x1169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1170=IKsin(j4);
IkReal x1171=IKcos(j4);
IkReal x1172=((1.0)*sj0);
IkReal x1173=((1.0)*cj6);
IkReal x1174=((1.0)*sj6);
IkReal x1175=(cj5*x1171);
IkReal x1176=(r20*x1170);
IkReal x1177=(cj6*x1171);
IkReal x1178=(r11*x1170);
IkReal x1179=(r21*x1170);
IkReal x1180=(r01*x1170);
IkReal x1181=((1.0)*sj5*x1170);
IkReal x1182=((1.0)*sj5*x1171);
IkReal x1183=(cj5*x1170*x1174);
evalcond[0]=((((-1.0)*cj5*x1174*x1176))+((r20*x1177))+(((-1.0)*r21*x1171*x1174))+(((-1.0)*r22*x1181))+(((-1.0)*cj5*x1173*x1179)));
evalcond[1]=((((-1.0)*x1173*x1176))+((sj6*x1179))+(((-1.0)*r21*x1173*x1175))+(((-1.0)*r22*x1182))+(((-1.0)*r20*x1174*x1175)));
evalcond[2]=(cj0+((r10*x1177))+(((-1.0)*r10*x1183))+(((-1.0)*r11*x1171*x1174))+(((-1.0)*r12*x1181))+(((-1.0)*cj5*x1173*x1178)));
evalcond[3]=(((r00*x1177))+(((-1.0)*cj5*x1173*x1180))+(((-1.0)*x1172))+(((-1.0)*r01*x1171*x1174))+(((-1.0)*r00*x1183))+(((-1.0)*r02*x1181)));
evalcond[4]=((((-1.0)*r00*x1174*x1175))+((sj6*x1180))+(((-1.0)*r01*x1173*x1175))+(((-1.0)*r00*x1170*x1173))+(((-1.0)*cj0))+(((-1.0)*r02*x1182)));
evalcond[5]=((((-1.0)*r10*x1170*x1173))+((sj6*x1178))+(((-1.0)*r10*x1174*x1175))+(((-1.0)*r11*x1173*x1175))+(((-1.0)*x1172))+(((-1.0)*r12*x1182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1184=(cj0*sj6);
IkReal x1185=(cj0*cj6);
CheckValue<IkReal> x1186=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x1186.valid){
continue;
}
CheckValue<IkReal> x1187 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1184))+((r20*x1185)))),IkReal((((cj5*r20*x1184))+((cj5*r21*x1185))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1186.value)))+(x1187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1188=IKsin(j4);
IkReal x1189=IKcos(j4);
IkReal x1190=((1.0)*sj0);
IkReal x1191=((1.0)*cj6);
IkReal x1192=((1.0)*sj6);
IkReal x1193=(cj5*x1189);
IkReal x1194=(r20*x1188);
IkReal x1195=(cj6*x1189);
IkReal x1196=(r11*x1188);
IkReal x1197=(r21*x1188);
IkReal x1198=(r01*x1188);
IkReal x1199=((1.0)*sj5*x1188);
IkReal x1200=((1.0)*sj5*x1189);
IkReal x1201=(cj5*x1188*x1192);
evalcond[0]=((((-1.0)*cj5*x1192*x1194))+(((-1.0)*cj5*x1191*x1197))+(((-1.0)*r22*x1199))+(((-1.0)*r21*x1189*x1192))+((r20*x1195)));
evalcond[1]=((((-1.0)*r21*x1191*x1193))+(((-1.0)*x1191*x1194))+(((-1.0)*r22*x1200))+(((-1.0)*r20*x1192*x1193))+((sj6*x1197)));
evalcond[2]=(cj0+(((-1.0)*r10*x1201))+((r10*x1195))+(((-1.0)*r11*x1189*x1192))+(((-1.0)*cj5*x1191*x1196))+(((-1.0)*r12*x1199)));
evalcond[3]=(((r00*x1195))+(((-1.0)*cj5*x1191*x1198))+(((-1.0)*x1190))+(((-1.0)*r00*x1201))+(((-1.0)*r01*x1189*x1192))+(((-1.0)*r02*x1199)));
evalcond[4]=((((-1.0)*r02*x1200))+((sj6*x1198))+(((-1.0)*r00*x1192*x1193))+(((-1.0)*r01*x1191*x1193))+(((-1.0)*cj0))+(((-1.0)*r00*x1188*x1191)));
evalcond[5]=((((-1.0)*r10*x1192*x1193))+(((-1.0)*x1190))+((sj6*x1196))+(((-1.0)*r11*x1191*x1193))+(((-1.0)*r12*x1200))+(((-1.0)*r10*x1188*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1202=(r10*sj6);
IkReal x1203=((0.863573439158322)*sj5);
IkReal x1204=((0.0230723086152)*cj5);
IkReal x1205=(cj6*r11);
IkReal x1206=(r00*sj6);
IkReal x1207=((0.0230723086152)*sj5);
IkReal x1208=((0.863573439158322)*cj5);
IkReal x1209=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*x1204*x1205))+((x1202*x1203))+(((-1.0)*x1202*x1204))+((x1203*x1205))+(((-1.0)*r12*x1207))+(((-1.0)*r12*x1208)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*x1204*x1209))+(((-1.0)*x1204*x1206))+(((-1.0)*r02*x1207))+(((-1.0)*r02*x1208))+((x1203*x1209))+((x1203*x1206)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*x1204*x1205))+((x1202*x1203))+(((-1.0)*x1202*x1204))+((x1203*x1205))+(((-1.0)*r12*x1207))+(((-1.0)*r12*x1208))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*x1204*x1209))+(((-1.0)*x1204*x1206))+(((-1.0)*r02*x1207))+(((-1.0)*r02*x1208))+((x1203*x1209))+((x1203*x1206))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*x1204*x1205))+((x1202*x1203))+(((-1.0)*x1202*x1204))+((x1203*x1205))+(((-1.0)*r12*x1207))+(((-1.0)*r12*x1208))), ((((2.30723086152)*px))+(((-1.0)*x1204*x1209))+(((-1.0)*x1204*x1206))+(((-1.0)*r02*x1207))+(((-1.0)*r02*x1208))+((x1203*x1209))+((x1203*x1206))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1210=((0.01)*cj5);
IkReal x1211=(cj6*r01);
IkReal x1212=((0.37429)*sj5);
IkReal x1213=(cj6*r11);
IkReal x1214=((0.01)*sj5);
IkReal x1215=(r00*sj6);
IkReal x1216=((0.37429)*cj5);
IkReal x1217=(r10*sj6);
evalcond[0]=(((x1210*x1215))+((x1210*x1211))+((r02*x1216))+((r02*x1214))+(((-1.0)*x1212*x1215))+(((-1.0)*px))+(((-1.0)*x1211*x1212))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=(((r12*x1216))+((r12*x1214))+(((0.43342)*(IKsin(j0))))+((x1210*x1217))+((x1210*x1213))+(((-1.0)*x1212*x1217))+(((-1.0)*x1212*x1213))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1218=(r20*sj0);
IkReal x1219=((1.0)*sj5);
IkReal x1220=(r21*sj0);
IkReal x1221=(((cj5*r12))+(((-1.0)*cj6*r11*x1219))+(((-1.0)*r10*sj6*x1219)));
j4eval[0]=x1221;
j4eval[1]=IKsign(x1221);
j4eval[2]=((IKabs(((((-1.0)*sj6*x1220))+((cj6*x1218)))))+(IKabs((((cj5*cj6*x1220))+((cj5*sj6*x1218))+((r22*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1222=(cj0*sj6);
IkReal x1223=((1.0)*sj5);
IkReal x1224=(cj0*cj6);
IkReal x1225=((((-1.0)*r00*sj6*x1223))+(((-1.0)*cj6*r01*x1223))+((cj5*r02)));
j4eval[0]=x1225;
j4eval[1]=IKsign(x1225);
j4eval[2]=((IKabs((((r20*x1224))+(((-1.0)*r21*x1222)))))+(IKabs((((cj5*r21*x1224))+((cj5*r20*x1222))+((cj0*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1226=cj6*cj6;
IkReal x1227=cj5*cj5;
IkReal x1228=(r02*r22);
IkReal x1229=(r22*sj5);
IkReal x1230=(r00*r20);
IkReal x1231=((1.0)*r21);
IkReal x1232=(r20*sj6);
IkReal x1233=(cj6*r01);
IkReal x1234=(cj0*cj5);
IkReal x1235=(r00*sj6);
IkReal x1236=((1.0)*cj5);
IkReal x1237=(cj6*r21);
IkReal x1238=(cj5*r02*sj5);
IkReal x1239=((1.0)*x1227);
IkReal x1240=(x1226*x1227);
IkReal x1241=((((-1.0)*x1228))+(((-1.0)*r01*x1231))+((x1235*x1237))+(((-1.0)*x1232*x1233*x1239))+(((-1.0)*x1226*x1230))+(((-1.0)*x1230*x1239))+(((-1.0)*x1229*x1233*x1236))+(((-1.0)*r02*sj5*x1232*x1236))+(((-1.0)*r01*x1231*x1240))+((x1227*x1228))+((r01*r21*x1226))+(((-1.0)*cj6*x1227*x1231*x1235))+((x1232*x1233))+(((-1.0)*cj6*x1231*x1238))+((x1230*x1240))+(((-1.0)*x1229*x1235*x1236)));
j4eval[0]=x1241;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x1231)))))+(IKabs((((x1234*x1237))+((cj0*x1229))+((x1232*x1234))))));
j4eval[2]=IKsign(x1241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1242=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x1242;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x1242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1243=((1.0)*sj6);
IkReal x1244=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x1243)));
j4eval[0]=x1244;
j4eval[1]=IKsign(x1244);
j4eval[2]=((IKabs(((((-1.0)*r21*x1243))+((cj6*r20)))))+(IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1245=cj6*cj6;
IkReal x1246=cj5*cj5;
IkReal x1247=r10*r10;
IkReal x1248=r11*r11;
IkReal x1249=r12*r12;
IkReal x1250=(r10*sj6);
IkReal x1251=(r12*sj5);
IkReal x1252=((2.0)*cj6*r11);
IkReal x1253=((1.0)*x1247);
IkReal x1254=(x1245*x1248);
IkReal x1255=(x1254+(((-1.0)*x1246*x1250*x1252))+(((-1.0)*x1249))+(((-1.0)*x1248))+(((-1.0)*x1246*x1253))+(((-1.0)*x1245*x1253))+(((-1.0)*x1246*x1254))+((x1250*x1252))+((x1246*x1249))+(((-1.0)*cj5*x1251*x1252))+((x1245*x1246*x1247))+(((-2.0)*cj5*x1250*x1251)));
j4eval[0]=x1255;
j4eval[1]=((IKabs((x1251+((cj5*cj6*r11))+((cj5*x1250)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x1255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1256=cj6*cj6;
IkReal x1257=cj5*cj5;
IkReal x1258=r10*r10;
IkReal x1259=r11*r11;
IkReal x1260=r12*r12;
IkReal x1261=(r10*sj6);
IkReal x1262=(r12*sj5);
IkReal x1263=((2.0)*cj6*r11);
IkReal x1264=(x1256*x1259);
IkReal x1265=(x1257*x1258);
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1256*x1258))+x1264+((x1261*x1263))+(((-1.0)*cj5*x1262*x1263))+((x1256*x1265))+(((-1.0)*x1257*x1264))+(((-2.0)*cj5*x1261*x1262))+(((-1.0)*x1257*x1261*x1263))+((x1257*x1260))+(((-1.0)*x1265))+(((-1.0)*x1260))+(((-1.0)*x1259)))),-1);
if(!x1266.valid){
continue;
}
CheckValue<IkReal> x1267 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x1262+((cj5*cj6*r11))+((cj5*x1261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1266.value)))+(x1267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1268=IKsin(j4);
IkReal x1269=IKcos(j4);
IkReal x1270=(cj5*cj6);
IkReal x1271=(r11*sj6);
IkReal x1272=(cj6*r20);
IkReal x1273=(cj6*r10);
IkReal x1274=(cj5*sj6);
IkReal x1275=(r01*sj6);
IkReal x1276=(r21*sj6);
IkReal x1277=(cj6*r00);
IkReal x1278=((1.0)*x1269);
IkReal x1279=((1.0)*x1268);
IkReal x1280=(sj5*x1279);
evalcond[0]=(((x1269*x1272))+(((-1.0)*r22*x1280))+(((-1.0)*x1276*x1278))+(((-1.0)*r20*x1274*x1279))+(((-1.0)*r21*x1270*x1279)));
evalcond[1]=((((-1.0)*r10*x1274*x1279))+((x1269*x1273))+(((-1.0)*r11*x1270*x1279))+(((-1.0)*x1271*x1278))+(((-1.0)*r12*x1280)));
evalcond[2]=((((-1.0)*r22*sj5*x1278))+(((-1.0)*x1272*x1279))+((x1268*x1276))+(((-1.0)*r20*x1274*x1278))+(((-1.0)*r21*x1270*x1278)));
evalcond[3]=((((-1.0)*r02*sj5*x1278))+(((-1.0)*r00*x1274*x1278))+(((-1.0)*r01*x1270*x1278))+(((-1.0)*x1277*x1279))+((x1268*x1275)));
evalcond[4]=((1.0)+((x1269*x1277))+(((-1.0)*r02*x1280))+(((-1.0)*r00*x1274*x1279))+(((-1.0)*r01*x1270*x1279))+(((-1.0)*x1275*x1278)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x1274*x1278))+(((-1.0)*r11*x1270*x1278))+(((-1.0)*x1273*x1279))+((x1268*x1271))+(((-1.0)*r12*sj5*x1278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1281=((1.0)*sj6);
CheckValue<IkReal> x1282 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x1281)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1282.valid){
continue;
}
CheckValue<IkReal> x1283=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x1281)))),-1);
if(!x1283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1282.value)+(((1.5707963267949)*(x1283.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1284=IKsin(j4);
IkReal x1285=IKcos(j4);
IkReal x1286=(cj5*cj6);
IkReal x1287=(r11*sj6);
IkReal x1288=(cj6*r20);
IkReal x1289=(cj6*r10);
IkReal x1290=(cj5*sj6);
IkReal x1291=(r01*sj6);
IkReal x1292=(r21*sj6);
IkReal x1293=(cj6*r00);
IkReal x1294=((1.0)*x1285);
IkReal x1295=((1.0)*x1284);
IkReal x1296=(sj5*x1295);
evalcond[0]=(((x1285*x1288))+(((-1.0)*r21*x1286*x1295))+(((-1.0)*r20*x1290*x1295))+(((-1.0)*x1292*x1294))+(((-1.0)*r22*x1296)));
evalcond[1]=(((x1285*x1289))+(((-1.0)*x1287*x1294))+(((-1.0)*r10*x1290*x1295))+(((-1.0)*r11*x1286*x1295))+(((-1.0)*r12*x1296)));
evalcond[2]=((((-1.0)*r21*x1286*x1294))+(((-1.0)*x1288*x1295))+(((-1.0)*r20*x1290*x1294))+((x1284*x1292))+(((-1.0)*r22*sj5*x1294)));
evalcond[3]=((((-1.0)*r00*x1290*x1294))+(((-1.0)*r01*x1286*x1294))+(((-1.0)*x1293*x1295))+((x1284*x1291))+(((-1.0)*r02*sj5*x1294)));
evalcond[4]=((1.0)+(((-1.0)*r00*x1290*x1295))+(((-1.0)*r01*x1286*x1295))+((x1285*x1293))+(((-1.0)*r02*x1296))+(((-1.0)*x1291*x1294)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x1290*x1294))+((x1284*x1287))+(((-1.0)*x1289*x1295))+(((-1.0)*r11*x1286*x1294))+(((-1.0)*r12*sj5*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1297=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x1297.valid){
continue;
}
CheckValue<IkReal> x1298 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1297.value)))+(x1298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1299=IKsin(j4);
IkReal x1300=IKcos(j4);
IkReal x1301=(cj5*cj6);
IkReal x1302=(r11*sj6);
IkReal x1303=(cj6*r20);
IkReal x1304=(cj6*r10);
IkReal x1305=(cj5*sj6);
IkReal x1306=(r01*sj6);
IkReal x1307=(r21*sj6);
IkReal x1308=(cj6*r00);
IkReal x1309=((1.0)*x1300);
IkReal x1310=((1.0)*x1299);
IkReal x1311=(sj5*x1310);
evalcond[0]=((((-1.0)*x1307*x1309))+(((-1.0)*r20*x1305*x1310))+(((-1.0)*r22*x1311))+((x1300*x1303))+(((-1.0)*r21*x1301*x1310)));
evalcond[1]=((((-1.0)*r11*x1301*x1310))+((x1300*x1304))+(((-1.0)*r12*x1311))+(((-1.0)*r10*x1305*x1310))+(((-1.0)*x1302*x1309)));
evalcond[2]=(((x1299*x1307))+(((-1.0)*r20*x1305*x1309))+(((-1.0)*r21*x1301*x1309))+(((-1.0)*x1303*x1310))+(((-1.0)*r22*sj5*x1309)));
evalcond[3]=(((x1299*x1306))+(((-1.0)*x1308*x1310))+(((-1.0)*r01*x1301*x1309))+(((-1.0)*r00*x1305*x1309))+(((-1.0)*r02*sj5*x1309)));
evalcond[4]=((1.0)+(((-1.0)*x1306*x1309))+((x1300*x1308))+(((-1.0)*r01*x1301*x1310))+(((-1.0)*r00*x1305*x1310))+(((-1.0)*r02*x1311)));
evalcond[5]=((-1.0)+(((-1.0)*x1304*x1310))+((x1299*x1302))+(((-1.0)*r12*sj5*x1309))+(((-1.0)*r11*x1301*x1309))+(((-1.0)*r10*x1305*x1309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1312=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x1312;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x1312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1313=((1.0)*sj5);
IkReal x1314=(((cj5*r22))+(((-1.0)*r20*sj6*x1313))+(((-1.0)*cj6*r21*x1313)));
j4eval[0]=x1314;
j4eval[1]=IKsign(x1314);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1315=r11*r11;
IkReal x1316=cj5*cj5;
IkReal x1317=cj6*cj6;
IkReal x1318=r10*r10;
IkReal x1319=r12*r12;
IkReal x1320=(r12*sj5);
IkReal x1321=(cj6*r10);
IkReal x1322=((1.0)*x1317);
IkReal x1323=(cj5*cj6*r11);
IkReal x1324=(cj5*r10*sj6);
IkReal x1325=((2.0)*r11*sj6);
IkReal x1326=(x1316*x1318);
IkReal x1327=(x1315+x1319+x1326+((x1317*x1318))+(((-1.0)*x1315*x1322))+(((2.0)*x1320*x1323))+(((2.0)*x1320*x1324))+(((-1.0)*x1322*x1326))+(((-1.0)*x1321*x1325))+((x1315*x1316*x1317))+((x1316*x1321*x1325))+(((-1.0)*x1316*x1319)));
j4eval[0]=x1327;
j4eval[1]=IKsign(x1327);
j4eval[2]=((IKabs((x1321+(((-1.0)*r11*sj6)))))+(IKabs((x1323+x1320+x1324))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1328=r11*r11;
IkReal x1329=cj5*cj5;
IkReal x1330=cj6*cj6;
IkReal x1331=r10*r10;
IkReal x1332=r12*r12;
IkReal x1333=(r10*sj6);
IkReal x1334=(r12*sj5);
IkReal x1335=((1.0)*x1330);
IkReal x1336=(cj5*cj6*r11);
IkReal x1337=((2.0)*cj6*r11);
IkReal x1338=(x1329*x1331);
CheckValue<IkReal> x1339 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x1334+x1336+((cj5*x1333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1339.valid){
continue;
}
CheckValue<IkReal> x1340=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1335*x1338))+x1328+x1338+x1332+(((2.0)*cj5*x1333*x1334))+((x1328*x1329*x1330))+(((-1.0)*x1328*x1335))+((x1329*x1333*x1337))+(((2.0)*x1334*x1336))+(((-1.0)*x1329*x1332))+(((-1.0)*x1333*x1337))+((x1330*x1331)))),-1);
if(!x1340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1339.value)+(((1.5707963267949)*(x1340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1341=IKsin(j4);
IkReal x1342=IKcos(j4);
IkReal x1343=(cj5*cj6);
IkReal x1344=(r11*sj6);
IkReal x1345=(cj6*r20);
IkReal x1346=(cj6*r10);
IkReal x1347=(cj5*sj6);
IkReal x1348=(r01*sj6);
IkReal x1349=(r21*sj6);
IkReal x1350=(cj6*r00);
IkReal x1351=((1.0)*x1342);
IkReal x1352=((1.0)*x1341);
IkReal x1353=(sj5*x1352);
evalcond[0]=((((-1.0)*r20*x1347*x1352))+(((-1.0)*r21*x1343*x1352))+(((-1.0)*r22*x1353))+((x1342*x1345))+(((-1.0)*x1349*x1351)));
evalcond[1]=((((-1.0)*r12*x1353))+(((-1.0)*r11*x1343*x1352))+((x1342*x1346))+(((-1.0)*x1344*x1351))+(((-1.0)*r10*x1347*x1352)));
evalcond[2]=((((-1.0)*r20*x1347*x1351))+(((-1.0)*x1345*x1352))+(((-1.0)*r22*sj5*x1351))+(((-1.0)*r21*x1343*x1351))+((x1341*x1349)));
evalcond[3]=((((-1.0)*r02*sj5*x1351))+(((-1.0)*x1350*x1352))+((x1341*x1348))+(((-1.0)*r01*x1343*x1351))+(((-1.0)*r00*x1347*x1351)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x1353))+((x1342*x1350))+(((-1.0)*r01*x1343*x1352))+(((-1.0)*r00*x1347*x1352))+(((-1.0)*x1348*x1351)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x1351))+(((-1.0)*x1346*x1352))+((x1341*x1344))+(((-1.0)*r11*x1343*x1351))+(((-1.0)*r10*x1347*x1351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1354=((1.0)*sj5);
CheckValue<IkReal> x1355 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1355.valid){
continue;
}
CheckValue<IkReal> x1356=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x1354))+(((-1.0)*r20*sj6*x1354)))),-1);
if(!x1356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1355.value)+(((1.5707963267949)*(x1356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1357=IKsin(j4);
IkReal x1358=IKcos(j4);
IkReal x1359=(cj5*cj6);
IkReal x1360=(r11*sj6);
IkReal x1361=(cj6*r20);
IkReal x1362=(cj6*r10);
IkReal x1363=(cj5*sj6);
IkReal x1364=(r01*sj6);
IkReal x1365=(r21*sj6);
IkReal x1366=(cj6*r00);
IkReal x1367=((1.0)*x1358);
IkReal x1368=((1.0)*x1357);
IkReal x1369=(sj5*x1368);
evalcond[0]=((((-1.0)*r20*x1363*x1368))+(((-1.0)*r21*x1359*x1368))+((x1358*x1361))+(((-1.0)*r22*x1369))+(((-1.0)*x1365*x1367)));
evalcond[1]=((((-1.0)*r11*x1359*x1368))+(((-1.0)*r12*x1369))+((x1358*x1362))+(((-1.0)*r10*x1363*x1368))+(((-1.0)*x1360*x1367)));
evalcond[2]=(((x1357*x1365))+(((-1.0)*r22*sj5*x1367))+(((-1.0)*r20*x1363*x1367))+(((-1.0)*r21*x1359*x1367))+(((-1.0)*x1361*x1368)));
evalcond[3]=((((-1.0)*x1366*x1368))+((x1357*x1364))+(((-1.0)*r02*sj5*x1367))+(((-1.0)*r00*x1363*x1367))+(((-1.0)*r01*x1359*x1367)));
evalcond[4]=((-1.0)+(((-1.0)*x1364*x1367))+(((-1.0)*r00*x1363*x1368))+(((-1.0)*r02*x1369))+((x1358*x1366))+(((-1.0)*r01*x1359*x1368)));
evalcond[5]=((1.0)+((x1357*x1360))+(((-1.0)*r11*x1359*x1367))+(((-1.0)*x1362*x1368))+(((-1.0)*r10*x1363*x1367))+(((-1.0)*r12*sj5*x1367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1370 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1370.valid){
continue;
}
CheckValue<IkReal> x1371=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x1371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1370.value)+(((1.5707963267949)*(x1371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1372=IKsin(j4);
IkReal x1373=IKcos(j4);
IkReal x1374=(cj5*cj6);
IkReal x1375=(r11*sj6);
IkReal x1376=(cj6*r20);
IkReal x1377=(cj6*r10);
IkReal x1378=(cj5*sj6);
IkReal x1379=(r01*sj6);
IkReal x1380=(r21*sj6);
IkReal x1381=(cj6*r00);
IkReal x1382=((1.0)*x1373);
IkReal x1383=((1.0)*x1372);
IkReal x1384=(sj5*x1383);
evalcond[0]=((((-1.0)*r21*x1374*x1383))+(((-1.0)*x1380*x1382))+(((-1.0)*r22*x1384))+(((-1.0)*r20*x1378*x1383))+((x1373*x1376)));
evalcond[1]=((((-1.0)*r12*x1384))+(((-1.0)*r10*x1378*x1383))+(((-1.0)*x1375*x1382))+(((-1.0)*r11*x1374*x1383))+((x1373*x1377)));
evalcond[2]=((((-1.0)*r22*sj5*x1382))+(((-1.0)*x1376*x1383))+(((-1.0)*r21*x1374*x1382))+((x1372*x1380))+(((-1.0)*r20*x1378*x1382)));
evalcond[3]=((((-1.0)*r01*x1374*x1382))+((x1372*x1379))+(((-1.0)*r02*sj5*x1382))+(((-1.0)*r00*x1378*x1382))+(((-1.0)*x1381*x1383)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x1374*x1383))+(((-1.0)*r02*x1384))+(((-1.0)*r00*x1378*x1383))+((x1373*x1381))+(((-1.0)*x1379*x1382)));
evalcond[5]=((1.0)+((x1372*x1375))+(((-1.0)*r10*x1378*x1382))+(((-1.0)*x1377*x1383))+(((-1.0)*r11*x1374*x1382))+(((-1.0)*r12*sj5*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1385=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x1385;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x1385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1386=((1.0)*sj6);
IkReal x1387=((((-1.0)*r00*sj5*x1386))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x1387;
j4eval[1]=IKsign(x1387);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x1386))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1388=cj6*cj6;
IkReal x1389=cj5*cj5;
IkReal x1390=r00*r00;
IkReal x1391=r01*r01;
IkReal x1392=r02*r02;
IkReal x1393=(cj6*r00);
IkReal x1394=(cj5*cj6*r01);
IkReal x1395=((2.0)*r02*sj5);
IkReal x1396=((1.0)*x1388);
IkReal x1397=((2.0)*r01*sj6);
IkReal x1398=(cj5*r00*sj6);
IkReal x1399=(x1389*x1390);
IkReal x1400=(((x1388*x1391))+((x1388*x1399))+((x1393*x1397))+(((-1.0)*x1394*x1395))+(((-1.0)*x1395*x1398))+(((-1.0)*x1389*x1393*x1397))+(((-1.0)*x1389*x1391*x1396))+(((-1.0)*x1390*x1396))+((x1389*x1392))+(((-1.0)*x1392))+(((-1.0)*x1391))+(((-1.0)*x1399)));
j4eval[0]=x1400;
j4eval[1]=((IKabs((x1393+(((-1.0)*r01*sj6)))))+(IKabs((x1398+x1394+((r02*sj5))))));
j4eval[2]=IKsign(x1400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1401=cj6*cj6;
IkReal x1402=cj5*cj5;
IkReal x1403=r00*r00;
IkReal x1404=r01*r01;
IkReal x1405=r02*r02;
IkReal x1406=(cj6*r00);
IkReal x1407=(cj5*cj6*r01);
IkReal x1408=((2.0)*r02*sj5);
IkReal x1409=((1.0)*x1401);
IkReal x1410=((2.0)*r01*sj6);
IkReal x1411=(cj5*r00*sj6);
IkReal x1412=(x1402*x1403);
CheckValue<IkReal> x1413 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x1406)),IkReal((((r02*sj5))+x1411+x1407)),IKFAST_ATAN2_MAGTHRESH);
if(!x1413.valid){
continue;
}
CheckValue<IkReal> x1414=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1405))+(((-1.0)*x1404))+((x1401*x1412))+(((-1.0)*x1408*x1411))+(((-1.0)*x1402*x1406*x1410))+((x1406*x1410))+(((-1.0)*x1407*x1408))+((x1402*x1405))+(((-1.0)*x1403*x1409))+(((-1.0)*x1402*x1404*x1409))+((x1401*x1404))+(((-1.0)*x1412)))),-1);
if(!x1414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1413.value)+(((1.5707963267949)*(x1414.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1415=IKsin(j4);
IkReal x1416=IKcos(j4);
IkReal x1417=(cj5*cj6);
IkReal x1418=(r11*sj6);
IkReal x1419=(cj6*r20);
IkReal x1420=(cj6*r10);
IkReal x1421=(cj5*sj6);
IkReal x1422=(r21*sj6);
IkReal x1423=(cj6*r00);
IkReal x1424=(r01*sj6);
IkReal x1425=((1.0)*x1416);
IkReal x1426=((1.0)*x1415);
IkReal x1427=(sj5*x1426);
evalcond[0]=((((-1.0)*r20*x1421*x1426))+(((-1.0)*r21*x1417*x1426))+((x1416*x1419))+(((-1.0)*x1422*x1425))+(((-1.0)*r22*x1427)));
evalcond[1]=((((-1.0)*r01*x1417*x1426))+(((-1.0)*x1424*x1425))+(((-1.0)*r02*x1427))+(((-1.0)*r00*x1421*x1426))+((x1416*x1423)));
evalcond[2]=((((-1.0)*r20*x1421*x1425))+((x1415*x1422))+(((-1.0)*r22*sj5*x1425))+(((-1.0)*r21*x1417*x1425))+(((-1.0)*x1419*x1426)));
evalcond[3]=(((x1415*x1418))+(((-1.0)*r12*sj5*x1425))+(((-1.0)*r10*x1421*x1425))+(((-1.0)*x1420*x1426))+(((-1.0)*r11*x1417*x1425)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x1421*x1426))+(((-1.0)*x1418*x1425))+(((-1.0)*r12*x1427))+(((-1.0)*r11*x1417*x1426))+((x1416*x1420)));
evalcond[5]=((-1.0)+((x1415*x1424))+(((-1.0)*r01*x1417*x1425))+(((-1.0)*x1423*x1426))+(((-1.0)*r02*sj5*x1425))+(((-1.0)*r00*x1421*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1428=((1.0)*sj6);
CheckValue<IkReal> x1429=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x1428))+((cj5*r02)))),-1);
if(!x1429.valid){
continue;
}
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1428))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1429.value)))+(x1430.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1431=IKsin(j4);
IkReal x1432=IKcos(j4);
IkReal x1433=(cj5*cj6);
IkReal x1434=(r11*sj6);
IkReal x1435=(cj6*r20);
IkReal x1436=(cj6*r10);
IkReal x1437=(cj5*sj6);
IkReal x1438=(r21*sj6);
IkReal x1439=(cj6*r00);
IkReal x1440=(r01*sj6);
IkReal x1441=((1.0)*x1432);
IkReal x1442=((1.0)*x1431);
IkReal x1443=(sj5*x1442);
evalcond[0]=(((x1432*x1435))+(((-1.0)*r22*x1443))+(((-1.0)*x1438*x1441))+(((-1.0)*r21*x1433*x1442))+(((-1.0)*r20*x1437*x1442)));
evalcond[1]=(((x1432*x1439))+(((-1.0)*r00*x1437*x1442))+(((-1.0)*r02*x1443))+(((-1.0)*x1440*x1441))+(((-1.0)*r01*x1433*x1442)));
evalcond[2]=((((-1.0)*r21*x1433*x1441))+(((-1.0)*r22*sj5*x1441))+(((-1.0)*x1435*x1442))+((x1431*x1438))+(((-1.0)*r20*x1437*x1441)));
evalcond[3]=((((-1.0)*r11*x1433*x1441))+(((-1.0)*r10*x1437*x1441))+(((-1.0)*r12*sj5*x1441))+(((-1.0)*x1436*x1442))+((x1431*x1434)));
evalcond[4]=((-1.0)+((x1432*x1436))+(((-1.0)*r11*x1433*x1442))+(((-1.0)*r10*x1437*x1442))+(((-1.0)*r12*x1443))+(((-1.0)*x1434*x1441)));
evalcond[5]=((-1.0)+(((-1.0)*x1439*x1442))+(((-1.0)*r02*sj5*x1441))+(((-1.0)*r00*x1437*x1441))+((x1431*x1440))+(((-1.0)*r01*x1433*x1441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1444=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x1444.valid){
continue;
}
CheckValue<IkReal> x1445 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1444.value)))+(x1445.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1446=IKsin(j4);
IkReal x1447=IKcos(j4);
IkReal x1448=(cj5*cj6);
IkReal x1449=(r11*sj6);
IkReal x1450=(cj6*r20);
IkReal x1451=(cj6*r10);
IkReal x1452=(cj5*sj6);
IkReal x1453=(r21*sj6);
IkReal x1454=(cj6*r00);
IkReal x1455=(r01*sj6);
IkReal x1456=((1.0)*x1447);
IkReal x1457=((1.0)*x1446);
IkReal x1458=(sj5*x1457);
evalcond[0]=((((-1.0)*r22*x1458))+((x1447*x1450))+(((-1.0)*r20*x1452*x1457))+(((-1.0)*x1453*x1456))+(((-1.0)*r21*x1448*x1457)));
evalcond[1]=(((x1447*x1454))+(((-1.0)*r00*x1452*x1457))+(((-1.0)*x1455*x1456))+(((-1.0)*r02*x1458))+(((-1.0)*r01*x1448*x1457)));
evalcond[2]=(((x1446*x1453))+(((-1.0)*r20*x1452*x1456))+(((-1.0)*r22*sj5*x1456))+(((-1.0)*r21*x1448*x1456))+(((-1.0)*x1450*x1457)));
evalcond[3]=((((-1.0)*r12*sj5*x1456))+(((-1.0)*r11*x1448*x1456))+(((-1.0)*r10*x1452*x1456))+(((-1.0)*x1451*x1457))+((x1446*x1449)));
evalcond[4]=((-1.0)+((x1447*x1451))+(((-1.0)*r11*x1448*x1457))+(((-1.0)*r10*x1452*x1457))+(((-1.0)*x1449*x1456))+(((-1.0)*r12*x1458)));
evalcond[5]=((-1.0)+((x1446*x1455))+(((-1.0)*r00*x1452*x1456))+(((-1.0)*x1454*x1457))+(((-1.0)*r02*sj5*x1456))+(((-1.0)*r01*x1448*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1459=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x1459;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x1459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1460=((1.0)*sj5);
IkReal x1461=(((cj5*r22))+(((-1.0)*r20*sj6*x1460))+(((-1.0)*cj6*r21*x1460)));
j4eval[0]=x1461;
j4eval[1]=IKsign(x1461);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1462=cj6*cj6;
IkReal x1463=r01*r01;
IkReal x1464=cj5*cj5;
IkReal x1465=r00*r00;
IkReal x1466=r02*r02;
IkReal x1467=(cj6*r00);
IkReal x1468=(r02*sj5);
IkReal x1469=(cj5*cj6*r01);
IkReal x1470=((2.0)*r01*sj6);
IkReal x1471=(cj5*r00*sj6);
IkReal x1472=((1.0)*x1464);
IkReal x1473=(x1462*x1465);
IkReal x1474=(x1462*x1463);
IkReal x1475=((((2.0)*x1468*x1471))+((x1464*x1467*x1470))+(((-1.0)*x1474))+((x1464*x1465))+(((-1.0)*x1467*x1470))+(((2.0)*x1468*x1469))+x1466+x1463+x1473+(((-1.0)*x1466*x1472))+(((-1.0)*x1472*x1473))+((x1464*x1474)));
j4eval[0]=x1475;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x1467)))+(IKabs((x1469+x1468+x1471))));
j4eval[2]=IKsign(x1475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1476=cj6*cj6;
IkReal x1477=r01*r01;
IkReal x1478=cj5*cj5;
IkReal x1479=r00*r00;
IkReal x1480=r02*r02;
IkReal x1481=(cj6*r00);
IkReal x1482=((2.0)*r01);
IkReal x1483=(cj5*cj6);
IkReal x1484=(r02*sj5);
IkReal x1485=(cj5*r00*sj6);
IkReal x1486=(x1478*x1479);
IkReal x1487=(x1476*x1477);
CheckValue<IkReal> x1488 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x1481)),IkReal((((r01*x1483))+x1485+x1484)),IKFAST_ATAN2_MAGTHRESH);
if(!x1488.valid){
continue;
}
CheckValue<IkReal> x1489=IKPowWithIntegerCheck(IKsign(((((2.0)*x1484*x1485))+(((-1.0)*x1476*x1486))+(((-1.0)*x1478*x1480))+((x1482*x1483*x1484))+((sj6*x1478*x1481*x1482))+(((-1.0)*x1487))+(((-1.0)*sj6*x1481*x1482))+((x1476*x1479))+x1477+x1480+x1486+((x1478*x1487)))),-1);
if(!x1489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1488.value)+(((1.5707963267949)*(x1489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1490=IKsin(j4);
IkReal x1491=IKcos(j4);
IkReal x1492=(cj5*cj6);
IkReal x1493=(r11*sj6);
IkReal x1494=(cj6*r20);
IkReal x1495=(cj6*r10);
IkReal x1496=(cj5*sj6);
IkReal x1497=(r21*sj6);
IkReal x1498=(cj6*r00);
IkReal x1499=(r01*sj6);
IkReal x1500=((1.0)*x1491);
IkReal x1501=((1.0)*x1490);
IkReal x1502=(sj5*x1501);
evalcond[0]=((((-1.0)*r20*x1496*x1501))+(((-1.0)*r22*x1502))+(((-1.0)*r21*x1492*x1501))+((x1491*x1494))+(((-1.0)*x1497*x1500)));
evalcond[1]=((((-1.0)*x1499*x1500))+((x1491*x1498))+(((-1.0)*r02*x1502))+(((-1.0)*r00*x1496*x1501))+(((-1.0)*r01*x1492*x1501)));
evalcond[2]=((((-1.0)*r20*x1496*x1500))+(((-1.0)*x1494*x1501))+(((-1.0)*r21*x1492*x1500))+(((-1.0)*r22*sj5*x1500))+((x1490*x1497)));
evalcond[3]=((((-1.0)*r10*x1496*x1500))+(((-1.0)*r11*x1492*x1500))+(((-1.0)*r12*sj5*x1500))+(((-1.0)*x1495*x1501))+((x1490*x1493)));
evalcond[4]=((1.0)+(((-1.0)*r10*x1496*x1501))+(((-1.0)*r11*x1492*x1501))+((x1491*x1495))+(((-1.0)*x1493*x1500))+(((-1.0)*r12*x1502)));
evalcond[5]=((1.0)+(((-1.0)*x1498*x1501))+(((-1.0)*r02*sj5*x1500))+(((-1.0)*r00*x1496*x1500))+(((-1.0)*r01*x1492*x1500))+((x1490*x1499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1503=((1.0)*sj5);
CheckValue<IkReal> x1504 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1504.valid){
continue;
}
CheckValue<IkReal> x1505=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x1503))+(((-1.0)*cj6*r21*x1503)))),-1);
if(!x1505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1504.value)+(((1.5707963267949)*(x1505.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1506=IKsin(j4);
IkReal x1507=IKcos(j4);
IkReal x1508=(cj5*cj6);
IkReal x1509=(r11*sj6);
IkReal x1510=(cj6*r20);
IkReal x1511=(cj6*r10);
IkReal x1512=(cj5*sj6);
IkReal x1513=(r21*sj6);
IkReal x1514=(cj6*r00);
IkReal x1515=(r01*sj6);
IkReal x1516=((1.0)*x1507);
IkReal x1517=((1.0)*x1506);
IkReal x1518=(sj5*x1517);
evalcond[0]=((((-1.0)*r22*x1518))+(((-1.0)*r20*x1512*x1517))+(((-1.0)*x1513*x1516))+((x1507*x1510))+(((-1.0)*r21*x1508*x1517)));
evalcond[1]=((((-1.0)*r01*x1508*x1517))+(((-1.0)*x1515*x1516))+((x1507*x1514))+(((-1.0)*r00*x1512*x1517))+(((-1.0)*r02*x1518)));
evalcond[2]=((((-1.0)*r20*x1512*x1516))+((x1506*x1513))+(((-1.0)*x1510*x1517))+(((-1.0)*r21*x1508*x1516))+(((-1.0)*r22*sj5*x1516)));
evalcond[3]=(((x1506*x1509))+(((-1.0)*r12*sj5*x1516))+(((-1.0)*r11*x1508*x1516))+(((-1.0)*r10*x1512*x1516))+(((-1.0)*x1511*x1517)));
evalcond[4]=((1.0)+((x1507*x1511))+(((-1.0)*x1509*x1516))+(((-1.0)*r11*x1508*x1517))+(((-1.0)*r10*x1512*x1517))+(((-1.0)*r12*x1518)));
evalcond[5]=((1.0)+(((-1.0)*r01*x1508*x1516))+((x1506*x1515))+(((-1.0)*r00*x1512*x1516))+(((-1.0)*r02*sj5*x1516))+(((-1.0)*x1514*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1519 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1519.valid){
continue;
}
CheckValue<IkReal> x1520=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x1520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1519.value)+(((1.5707963267949)*(x1520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1521=IKsin(j4);
IkReal x1522=IKcos(j4);
IkReal x1523=(cj5*cj6);
IkReal x1524=(r11*sj6);
IkReal x1525=(cj6*r20);
IkReal x1526=(cj6*r10);
IkReal x1527=(cj5*sj6);
IkReal x1528=(r21*sj6);
IkReal x1529=(cj6*r00);
IkReal x1530=(r01*sj6);
IkReal x1531=((1.0)*x1522);
IkReal x1532=((1.0)*x1521);
IkReal x1533=(sj5*x1532);
evalcond[0]=(((x1522*x1525))+(((-1.0)*r22*x1533))+(((-1.0)*r21*x1523*x1532))+(((-1.0)*x1528*x1531))+(((-1.0)*r20*x1527*x1532)));
evalcond[1]=((((-1.0)*x1530*x1531))+((x1522*x1529))+(((-1.0)*r02*x1533))+(((-1.0)*r00*x1527*x1532))+(((-1.0)*r01*x1523*x1532)));
evalcond[2]=((((-1.0)*x1525*x1532))+((x1521*x1528))+(((-1.0)*r22*sj5*x1531))+(((-1.0)*r21*x1523*x1531))+(((-1.0)*r20*x1527*x1531)));
evalcond[3]=((((-1.0)*r11*x1523*x1531))+(((-1.0)*r12*sj5*x1531))+((x1521*x1524))+(((-1.0)*r10*x1527*x1531))+(((-1.0)*x1526*x1532)));
evalcond[4]=((1.0)+(((-1.0)*x1524*x1531))+(((-1.0)*r11*x1523*x1532))+(((-1.0)*r12*x1533))+((x1522*x1526))+(((-1.0)*r10*x1527*x1532)));
evalcond[5]=((1.0)+(((-1.0)*x1529*x1532))+(((-1.0)*r00*x1527*x1531))+(((-1.0)*r02*sj5*x1531))+((x1521*x1530))+(((-1.0)*r01*x1523*x1531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1534=cj6*cj6;
IkReal x1535=cj5*cj5;
IkReal x1536=(r22*sj5);
IkReal x1537=(cj0*r20);
IkReal x1538=((1.0)*r21);
IkReal x1539=(cj5*sj6);
IkReal x1540=(r02*r22);
IkReal x1541=(cj5*cj6);
IkReal x1542=(r02*sj5);
IkReal x1543=(cj6*sj6);
IkReal x1544=((1.0)*r20);
IkReal x1545=(r01*x1538);
IkReal x1546=(r00*r20*x1535);
CheckValue<IkReal> x1547=IKPowWithIntegerCheck(IKsign((((r01*r20*x1543))+(((-1.0)*x1540))+(((-1.0)*r00*x1536*x1539))+(((-1.0)*x1539*x1542*x1544))+(((-1.0)*r00*x1535*x1544))+((r00*r21*x1543))+(((-1.0)*x1534*x1535*x1545))+(((-1.0)*r00*x1535*x1538*x1543))+((r01*r21*x1534))+((x1534*x1546))+(((-1.0)*x1538*x1541*x1542))+(((-1.0)*r00*x1534*x1544))+(((-1.0)*r01*x1535*x1543*x1544))+(((-1.0)*r01*x1536*x1541))+((x1535*x1540))+(((-1.0)*x1545)))),-1);
if(!x1547.valid){
continue;
}
CheckValue<IkReal> x1548 = IKatan2WithCheck(IkReal((((cj6*x1537))+(((-1.0)*cj0*sj6*x1538)))),IkReal((((x1537*x1539))+((cj0*r21*x1541))+((cj0*x1536)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1547.value)))+(x1548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1549=IKsin(j4);
IkReal x1550=IKcos(j4);
IkReal x1551=((1.0)*cj0);
IkReal x1552=(cj6*r20);
IkReal x1553=(cj5*sj6);
IkReal x1554=((1.0)*sj6);
IkReal x1555=(r21*sj6);
IkReal x1556=(cj6*r00);
IkReal x1557=((1.0)*cj5*cj6);
IkReal x1558=(r01*x1550);
IkReal x1559=(r11*x1549);
IkReal x1560=((1.0)*x1549);
IkReal x1561=(r11*x1550);
IkReal x1562=(r10*x1550);
IkReal x1563=((1.0)*x1550);
IkReal x1564=(r01*x1549);
IkReal x1565=(sj5*x1560);
evalcond[0]=(((x1550*x1552))+(((-1.0)*r22*x1565))+(((-1.0)*r21*x1550*x1554))+(((-1.0)*r20*x1553*x1560))+(((-1.0)*r21*x1549*x1557)));
evalcond[1]=((((-1.0)*x1552*x1560))+(((-1.0)*r22*sj5*x1563))+((x1549*x1555))+(((-1.0)*r21*x1550*x1557))+(((-1.0)*r20*x1553*x1563)));
evalcond[2]=(sj0+(((-1.0)*r02*x1565))+(((-1.0)*r00*x1553*x1560))+((x1550*x1556))+(((-1.0)*x1557*x1564))+(((-1.0)*x1554*x1558)));
evalcond[3]=(((cj6*x1562))+(((-1.0)*r10*x1553*x1560))+(((-1.0)*x1557*x1559))+(((-1.0)*r12*x1565))+(((-1.0)*x1551))+(((-1.0)*x1554*x1561)));
evalcond[4]=(((sj6*x1564))+(((-1.0)*r02*sj5*x1563))+(((-1.0)*r00*x1553*x1563))+(((-1.0)*x1556*x1560))+(((-1.0)*x1557*x1558))+(((-1.0)*x1551)));
evalcond[5]=((((-1.0)*x1553*x1562))+(((-1.0)*sj0))+(((-1.0)*r12*sj5*x1563))+(((-1.0)*x1557*x1561))+(((-1.0)*cj6*r10*x1560))+((sj6*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1566=(cj0*sj6);
IkReal x1567=((1.0)*sj5);
IkReal x1568=(cj0*cj6);
CheckValue<IkReal> x1569 = IKatan2WithCheck(IkReal((((r20*x1568))+(((-1.0)*r21*x1566)))),IkReal((((cj5*r20*x1566))+((cj5*r21*x1568))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1569.valid){
continue;
}
CheckValue<IkReal> x1570=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x1567))+(((-1.0)*r00*sj6*x1567))+((cj5*r02)))),-1);
if(!x1570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1569.value)+(((1.5707963267949)*(x1570.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1571=IKsin(j4);
IkReal x1572=IKcos(j4);
IkReal x1573=((1.0)*cj0);
IkReal x1574=(cj6*r20);
IkReal x1575=(cj5*sj6);
IkReal x1576=((1.0)*sj6);
IkReal x1577=(r21*sj6);
IkReal x1578=(cj6*r00);
IkReal x1579=((1.0)*cj5*cj6);
IkReal x1580=(r01*x1572);
IkReal x1581=(r11*x1571);
IkReal x1582=((1.0)*x1571);
IkReal x1583=(r11*x1572);
IkReal x1584=(r10*x1572);
IkReal x1585=((1.0)*x1572);
IkReal x1586=(r01*x1571);
IkReal x1587=(sj5*x1582);
evalcond[0]=(((x1572*x1574))+(((-1.0)*r21*x1571*x1579))+(((-1.0)*r22*x1587))+(((-1.0)*r20*x1575*x1582))+(((-1.0)*r21*x1572*x1576)));
evalcond[1]=(((x1571*x1577))+(((-1.0)*x1574*x1582))+(((-1.0)*r20*x1575*x1585))+(((-1.0)*r21*x1572*x1579))+(((-1.0)*r22*sj5*x1585)));
evalcond[2]=(sj0+((x1572*x1578))+(((-1.0)*r00*x1575*x1582))+(((-1.0)*r02*x1587))+(((-1.0)*x1579*x1586))+(((-1.0)*x1576*x1580)));
evalcond[3]=(((cj6*x1584))+(((-1.0)*r10*x1575*x1582))+(((-1.0)*x1579*x1581))+(((-1.0)*x1573))+(((-1.0)*x1576*x1583))+(((-1.0)*r12*x1587)));
evalcond[4]=((((-1.0)*x1578*x1582))+(((-1.0)*r00*x1575*x1585))+(((-1.0)*x1579*x1580))+(((-1.0)*r02*sj5*x1585))+(((-1.0)*x1573))+((sj6*x1586)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x1582))+(((-1.0)*x1575*x1584))+(((-1.0)*r12*sj5*x1585))+(((-1.0)*x1579*x1583))+((sj6*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1588=(cj5*sj0);
IkReal x1589=((1.0)*sj5);
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x1589))+(((-1.0)*cj6*r11*x1589)))),-1);
if(!x1590.valid){
continue;
}
CheckValue<IkReal> x1591 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r20*sj6*x1588))+((r22*sj0*sj5))+((cj6*r21*x1588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1590.value)))+(x1591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1592=IKsin(j4);
IkReal x1593=IKcos(j4);
IkReal x1594=((1.0)*cj0);
IkReal x1595=(cj6*r20);
IkReal x1596=(cj5*sj6);
IkReal x1597=((1.0)*sj6);
IkReal x1598=(r21*sj6);
IkReal x1599=(cj6*r00);
IkReal x1600=((1.0)*cj5*cj6);
IkReal x1601=(r01*x1593);
IkReal x1602=(r11*x1592);
IkReal x1603=((1.0)*x1592);
IkReal x1604=(r11*x1593);
IkReal x1605=(r10*x1593);
IkReal x1606=((1.0)*x1593);
IkReal x1607=(r01*x1592);
IkReal x1608=(sj5*x1603);
evalcond[0]=(((x1593*x1595))+(((-1.0)*r21*x1592*x1600))+(((-1.0)*r22*x1608))+(((-1.0)*r20*x1596*x1603))+(((-1.0)*r21*x1593*x1597)));
evalcond[1]=(((x1592*x1598))+(((-1.0)*x1595*x1603))+(((-1.0)*r22*sj5*x1606))+(((-1.0)*r21*x1593*x1600))+(((-1.0)*r20*x1596*x1606)));
evalcond[2]=((((-1.0)*r00*x1596*x1603))+sj0+((x1593*x1599))+(((-1.0)*x1600*x1607))+(((-1.0)*x1597*x1601))+(((-1.0)*r02*x1608)));
evalcond[3]=((((-1.0)*x1594))+(((-1.0)*r10*x1596*x1603))+(((-1.0)*x1600*x1602))+(((-1.0)*x1597*x1604))+((cj6*x1605))+(((-1.0)*r12*x1608)));
evalcond[4]=((((-1.0)*x1594))+(((-1.0)*r00*x1596*x1606))+((sj6*x1607))+(((-1.0)*x1600*x1601))+(((-1.0)*x1599*x1603))+(((-1.0)*r02*sj5*x1606)));
evalcond[5]=((((-1.0)*x1596*x1605))+(((-1.0)*sj0))+((sj6*x1602))+(((-1.0)*cj6*r10*x1603))+(((-1.0)*x1600*x1604))+(((-1.0)*r12*sj5*x1606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1609=(cj6*sj5);
IkReal x1610=(sj5*sj6);
IkReal x1611=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x1611))+((r11*x1609))+((r10*x1610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1610))+((r01*x1609))+(((-1.0)*r02*x1611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1611))+((r11*x1609))+((r10*x1610))))+IKsqr((((r00*x1610))+((r01*x1609))+(((-1.0)*r02*x1611))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x1611))+((r11*x1609))+((r10*x1610))), (((r00*x1610))+((r01*x1609))+(((-1.0)*r02*x1611))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1612=(cj6*sj5);
IkReal x1613=(sj5*sj6);
IkReal x1614=((1.0)*cj5);
evalcond[0]=((((-1.0)*r12*x1614))+((r11*x1612))+(((-1.0)*(IKsin(j0))))+((r10*x1613)));
evalcond[1]=(((r01*x1612))+((r00*x1613))+(((-1.0)*r02*x1614))+(((-1.0)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1615=((1.0)*cj5);
IkReal x1616=((((-1.0)*r12*x1615))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x1616;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs(((((-1.0)*r00*sj6*x1615))+(((-1.0)*r02*sj5))+(((-1.0)*cj6*r01*x1615))))));
j4eval[2]=IKsign(x1616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1617=(cj0*sj6);
IkReal x1618=(cj0*cj6);
IkReal x1619=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x1619;
j4eval[1]=((IKabs((((r20*x1618))+(((-1.0)*r21*x1617)))))+(IKabs((((cj5*r21*x1618))+((cj5*r20*x1617))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x1619);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1620=cj5*cj5;
IkReal x1621=cj6*cj6;
IkReal x1622=r20*r20;
IkReal x1623=r21*r21;
IkReal x1624=r22*r22;
IkReal x1625=(r22*sj5);
IkReal x1626=(cj6*r21);
IkReal x1627=((2.0)*r20*sj6);
IkReal x1628=((1.0)*x1620);
IkReal x1629=(x1621*x1622);
IkReal x1630=(x1621*x1623);
IkReal x1631=(((x1620*x1622))+((x1620*x1626*x1627))+((x1620*x1630))+x1623+x1624+x1629+((cj5*x1625*x1627))+(((-1.0)*x1630))+(((2.0)*cj5*x1625*x1626))+(((-1.0)*x1628*x1629))+(((-1.0)*x1624*x1628))+(((-1.0)*x1626*x1627)));
j4eval[0]=x1631;
j4eval[1]=IKsign(x1631);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((x1625+((cj5*r20*sj6))+((cj5*x1626))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1632=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x1632;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x1632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1633=((1.0)*sj5);
IkReal x1634=(((cj5*r22))+(((-1.0)*cj6*r21*x1633))+(((-1.0)*r20*sj6*x1633)));
j4eval[0]=x1634;
j4eval[1]=IKsign(x1634);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1635=cj5*cj5;
IkReal x1636=cj6*cj6;
IkReal x1637=r20*r20;
IkReal x1638=r21*r21;
IkReal x1639=r22*r22;
IkReal x1640=(r22*sj5);
IkReal x1641=(cj6*r21);
IkReal x1642=((2.0)*r20*sj6);
IkReal x1643=((1.0)*x1635);
IkReal x1644=(x1636*x1637);
IkReal x1645=(x1636*x1638);
IkReal x1646=(((cj5*x1640*x1642))+(((-1.0)*x1641*x1642))+((x1635*x1641*x1642))+(((2.0)*cj5*x1640*x1641))+x1644+x1638+x1639+(((-1.0)*x1639*x1643))+(((-1.0)*x1645))+(((-1.0)*x1643*x1644))+((x1635*x1637))+((x1635*x1645)));
j4eval[0]=x1646;
j4eval[1]=IKsign(x1646);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((x1640+((cj5*r20*sj6))+((cj5*x1641))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1647=cj5*cj5;
IkReal x1648=cj6*cj6;
IkReal x1649=r20*r20;
IkReal x1650=r21*r21;
IkReal x1651=r22*r22;
IkReal x1652=(cj6*r21);
IkReal x1653=(r22*sj5);
IkReal x1654=((1.0)*x1647);
IkReal x1655=((2.0)*r20*sj6);
IkReal x1656=(x1648*x1649);
IkReal x1657=(x1648*x1650);
CheckValue<IkReal> x1658=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1652*x1655))+(((-1.0)*x1654*x1656))+x1650+x1651+x1656+((x1647*x1652*x1655))+((x1647*x1657))+((cj5*x1653*x1655))+(((-1.0)*x1657))+(((2.0)*cj5*x1652*x1653))+((x1647*x1649))+(((-1.0)*x1651*x1654)))),-1);
if(!x1658.valid){
continue;
}
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*x1652))+x1653+((cj5*r20*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1658.value)))+(x1659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1660=IKsin(j4);
IkReal x1661=IKcos(j4);
IkReal x1662=(cj5*cj6);
IkReal x1663=(r11*sj6);
IkReal x1664=(cj6*r20);
IkReal x1665=(cj5*sj6);
IkReal x1666=(cj6*r10);
IkReal x1667=(r01*sj6);
IkReal x1668=(r21*sj6);
IkReal x1669=(cj6*r00);
IkReal x1670=((1.0)*x1661);
IkReal x1671=((1.0)*x1660);
IkReal x1672=(sj5*x1671);
evalcond[0]=((((-1.0)*r21*x1662*x1671))+(((-1.0)*x1668*x1670))+((x1661*x1664))+(((-1.0)*r20*x1665*x1671))+(((-1.0)*r22*x1672)));
evalcond[1]=((((-1.0)*r11*x1662*x1671))+(((-1.0)*x1663*x1670))+(((-1.0)*r10*x1665*x1671))+(((-1.0)*r12*x1672))+((x1661*x1666)));
evalcond[2]=(((x1660*x1667))+(((-1.0)*x1669*x1671))+(((-1.0)*r00*x1665*x1670))+(((-1.0)*r02*sj5*x1670))+(((-1.0)*r01*x1662*x1670)));
evalcond[3]=(((x1660*x1663))+(((-1.0)*r11*x1662*x1670))+(((-1.0)*r10*x1665*x1670))+(((-1.0)*r12*sj5*x1670))+(((-1.0)*x1666*x1671)));
evalcond[4]=((-1.0)+(((-1.0)*x1667*x1670))+(((-1.0)*r02*x1672))+(((-1.0)*r00*x1665*x1671))+((x1661*x1669))+(((-1.0)*r01*x1662*x1671)));
evalcond[5]=((1.0)+((x1660*x1668))+(((-1.0)*r21*x1662*x1670))+(((-1.0)*r22*sj5*x1670))+(((-1.0)*x1664*x1671))+(((-1.0)*r20*x1665*x1670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1673=((1.0)*sj5);
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x1673))+(((-1.0)*cj6*r21*x1673)))),-1);
if(!x1675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1674.value)+(((1.5707963267949)*(x1675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1676=IKsin(j4);
IkReal x1677=IKcos(j4);
IkReal x1678=(cj5*cj6);
IkReal x1679=(r11*sj6);
IkReal x1680=(cj6*r20);
IkReal x1681=(cj5*sj6);
IkReal x1682=(cj6*r10);
IkReal x1683=(r01*sj6);
IkReal x1684=(r21*sj6);
IkReal x1685=(cj6*r00);
IkReal x1686=((1.0)*x1677);
IkReal x1687=((1.0)*x1676);
IkReal x1688=(sj5*x1687);
evalcond[0]=(((x1677*x1680))+(((-1.0)*r22*x1688))+(((-1.0)*r20*x1681*x1687))+(((-1.0)*r21*x1678*x1687))+(((-1.0)*x1684*x1686)));
evalcond[1]=((((-1.0)*r12*x1688))+((x1677*x1682))+(((-1.0)*r10*x1681*x1687))+(((-1.0)*x1679*x1686))+(((-1.0)*r11*x1678*x1687)));
evalcond[2]=((((-1.0)*r02*sj5*x1686))+(((-1.0)*x1685*x1687))+(((-1.0)*r01*x1678*x1686))+((x1676*x1683))+(((-1.0)*r00*x1681*x1686)));
evalcond[3]=(((x1676*x1679))+(((-1.0)*r10*x1681*x1686))+(((-1.0)*x1682*x1687))+(((-1.0)*r12*sj5*x1686))+(((-1.0)*r11*x1678*x1686)));
evalcond[4]=((-1.0)+((x1677*x1685))+(((-1.0)*r01*x1678*x1687))+(((-1.0)*x1683*x1686))+(((-1.0)*r02*x1688))+(((-1.0)*r00*x1681*x1687)));
evalcond[5]=((1.0)+((x1676*x1684))+(((-1.0)*x1680*x1687))+(((-1.0)*r20*x1681*x1686))+(((-1.0)*r21*x1678*x1686))+(((-1.0)*r22*sj5*x1686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x1690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1689.value)+(((1.5707963267949)*(x1690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1691=IKsin(j4);
IkReal x1692=IKcos(j4);
IkReal x1693=(cj5*cj6);
IkReal x1694=(r11*sj6);
IkReal x1695=(cj6*r20);
IkReal x1696=(cj5*sj6);
IkReal x1697=(cj6*r10);
IkReal x1698=(r01*sj6);
IkReal x1699=(r21*sj6);
IkReal x1700=(cj6*r00);
IkReal x1701=((1.0)*x1692);
IkReal x1702=((1.0)*x1691);
IkReal x1703=(sj5*x1702);
evalcond[0]=((((-1.0)*x1699*x1701))+((x1692*x1695))+(((-1.0)*r22*x1703))+(((-1.0)*r21*x1693*x1702))+(((-1.0)*r20*x1696*x1702)));
evalcond[1]=(((x1692*x1697))+(((-1.0)*r11*x1693*x1702))+(((-1.0)*r10*x1696*x1702))+(((-1.0)*x1694*x1701))+(((-1.0)*r12*x1703)));
evalcond[2]=(((x1691*x1698))+(((-1.0)*r00*x1696*x1701))+(((-1.0)*r01*x1693*x1701))+(((-1.0)*x1700*x1702))+(((-1.0)*r02*sj5*x1701)));
evalcond[3]=(((x1691*x1694))+(((-1.0)*r11*x1693*x1701))+(((-1.0)*r12*sj5*x1701))+(((-1.0)*r10*x1696*x1701))+(((-1.0)*x1697*x1702)));
evalcond[4]=((-1.0)+(((-1.0)*x1698*x1701))+(((-1.0)*r00*x1696*x1702))+(((-1.0)*r01*x1693*x1702))+(((-1.0)*r02*x1703))+((x1692*x1700)));
evalcond[5]=((1.0)+(((-1.0)*r22*sj5*x1701))+((x1691*x1699))+(((-1.0)*x1695*x1702))+(((-1.0)*r21*x1693*x1701))+(((-1.0)*r20*x1696*x1701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1704=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x1704;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x1704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1705=((1.0)*sj6);
IkReal x1706=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x1705)));
j4eval[0]=x1706;
j4eval[1]=IKsign(x1706);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x1705))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1707=cj5*cj5;
IkReal x1708=cj6*cj6;
IkReal x1709=r20*r20;
IkReal x1710=r21*r21;
IkReal x1711=r22*r22;
IkReal x1712=(r22*sj5);
IkReal x1713=(cj6*r21);
IkReal x1714=((2.0)*r20*sj6);
IkReal x1715=((1.0)*x1707);
IkReal x1716=(x1708*x1709);
IkReal x1717=(x1708*x1710);
IkReal x1718=(x1711+x1710+x1716+(((-1.0)*x1713*x1714))+(((-1.0)*x1717))+(((-1.0)*x1711*x1715))+((x1707*x1713*x1714))+(((-1.0)*x1715*x1716))+(((2.0)*cj5*x1712*x1713))+((x1707*x1717))+((cj5*x1712*x1714))+((x1707*x1709)));
j4eval[0]=x1718;
j4eval[1]=IKsign(x1718);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((x1712+((cj5*r20*sj6))+((cj5*x1713))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1719=cj5*cj5;
IkReal x1720=cj6*cj6;
IkReal x1721=r20*r20;
IkReal x1722=r21*r21;
IkReal x1723=r22*r22;
IkReal x1724=(cj6*r21);
IkReal x1725=(r22*sj5);
IkReal x1726=((1.0)*x1719);
IkReal x1727=((2.0)*r20*sj6);
IkReal x1728=(x1720*x1721);
IkReal x1729=(x1720*x1722);
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((x1725+((cj5*r20*sj6))+((cj5*x1724)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
CheckValue<IkReal> x1731=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x1724*x1725))+x1728+x1722+x1723+(((-1.0)*x1726*x1728))+((cj5*x1725*x1727))+(((-1.0)*x1723*x1726))+(((-1.0)*x1724*x1727))+(((-1.0)*x1729))+((x1719*x1724*x1727))+((x1719*x1721))+((x1719*x1729)))),-1);
if(!x1731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1730.value)+(((1.5707963267949)*(x1731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1732=IKsin(j4);
IkReal x1733=IKcos(j4);
IkReal x1734=(cj5*cj6);
IkReal x1735=(r11*sj6);
IkReal x1736=(cj6*r20);
IkReal x1737=(cj5*sj6);
IkReal x1738=(cj6*r10);
IkReal x1739=(r01*sj6);
IkReal x1740=(r21*sj6);
IkReal x1741=(cj6*r00);
IkReal x1742=((1.0)*x1733);
IkReal x1743=((1.0)*x1732);
IkReal x1744=(sj5*x1743);
evalcond[0]=((((-1.0)*x1740*x1742))+(((-1.0)*r20*x1737*x1743))+(((-1.0)*r22*x1744))+((x1733*x1736))+(((-1.0)*r21*x1734*x1743)));
evalcond[1]=((((-1.0)*r12*x1744))+(((-1.0)*r10*x1737*x1743))+(((-1.0)*x1735*x1742))+((x1733*x1738))+(((-1.0)*r11*x1734*x1743)));
evalcond[2]=((((-1.0)*x1741*x1743))+(((-1.0)*r01*x1734*x1742))+(((-1.0)*r02*sj5*x1742))+(((-1.0)*r00*x1737*x1742))+((x1732*x1739)));
evalcond[3]=((((-1.0)*r10*x1737*x1742))+(((-1.0)*x1738*x1743))+(((-1.0)*r12*sj5*x1742))+((x1732*x1735))+(((-1.0)*r11*x1734*x1742)));
evalcond[4]=((1.0)+(((-1.0)*r01*x1734*x1743))+(((-1.0)*x1739*x1742))+(((-1.0)*r00*x1737*x1743))+((x1733*x1741))+(((-1.0)*r02*x1744)));
evalcond[5]=((1.0)+(((-1.0)*r22*sj5*x1742))+(((-1.0)*r20*x1737*x1742))+(((-1.0)*x1736*x1743))+(((-1.0)*r21*x1734*x1742))+((x1732*x1740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1745=((1.0)*sj6);
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x1745))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x1746.valid){
continue;
}
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x1745)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1746.value)))+(x1747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1748=IKsin(j4);
IkReal x1749=IKcos(j4);
IkReal x1750=(cj5*cj6);
IkReal x1751=(r11*sj6);
IkReal x1752=(cj6*r20);
IkReal x1753=(cj5*sj6);
IkReal x1754=(cj6*r10);
IkReal x1755=(r01*sj6);
IkReal x1756=(r21*sj6);
IkReal x1757=(cj6*r00);
IkReal x1758=((1.0)*x1749);
IkReal x1759=((1.0)*x1748);
IkReal x1760=(sj5*x1759);
evalcond[0]=((((-1.0)*x1756*x1758))+((x1749*x1752))+(((-1.0)*r21*x1750*x1759))+(((-1.0)*r22*x1760))+(((-1.0)*r20*x1753*x1759)));
evalcond[1]=((((-1.0)*r11*x1750*x1759))+((x1749*x1754))+(((-1.0)*r10*x1753*x1759))+(((-1.0)*r12*x1760))+(((-1.0)*x1751*x1758)));
evalcond[2]=((((-1.0)*x1757*x1759))+(((-1.0)*r02*sj5*x1758))+((x1748*x1755))+(((-1.0)*r00*x1753*x1758))+(((-1.0)*r01*x1750*x1758)));
evalcond[3]=((((-1.0)*r11*x1750*x1758))+(((-1.0)*r12*sj5*x1758))+(((-1.0)*r10*x1753*x1758))+((x1748*x1751))+(((-1.0)*x1754*x1759)));
evalcond[4]=((1.0)+((x1749*x1757))+(((-1.0)*r02*x1760))+(((-1.0)*r00*x1753*x1759))+(((-1.0)*r01*x1750*x1759))+(((-1.0)*x1755*x1758)));
evalcond[5]=((1.0)+(((-1.0)*r22*sj5*x1758))+(((-1.0)*r21*x1750*x1758))+((x1748*x1756))+(((-1.0)*x1752*x1759))+(((-1.0)*r20*x1753*x1758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1761=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x1761.valid){
continue;
}
CheckValue<IkReal> x1762 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1761.value)))+(x1762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1763=IKsin(j4);
IkReal x1764=IKcos(j4);
IkReal x1765=(cj5*cj6);
IkReal x1766=(r11*sj6);
IkReal x1767=(cj6*r20);
IkReal x1768=(cj5*sj6);
IkReal x1769=(cj6*r10);
IkReal x1770=(r01*sj6);
IkReal x1771=(r21*sj6);
IkReal x1772=(cj6*r00);
IkReal x1773=((1.0)*x1764);
IkReal x1774=((1.0)*x1763);
IkReal x1775=(sj5*x1774);
evalcond[0]=(((x1764*x1767))+(((-1.0)*x1771*x1773))+(((-1.0)*r21*x1765*x1774))+(((-1.0)*r20*x1768*x1774))+(((-1.0)*r22*x1775)));
evalcond[1]=((((-1.0)*r10*x1768*x1774))+((x1764*x1769))+(((-1.0)*x1766*x1773))+(((-1.0)*r11*x1765*x1774))+(((-1.0)*r12*x1775)));
evalcond[2]=((((-1.0)*r01*x1765*x1773))+(((-1.0)*x1772*x1774))+((x1763*x1770))+(((-1.0)*r00*x1768*x1773))+(((-1.0)*r02*sj5*x1773)));
evalcond[3]=((((-1.0)*r10*x1768*x1773))+(((-1.0)*r12*sj5*x1773))+(((-1.0)*r11*x1765*x1773))+(((-1.0)*x1769*x1774))+((x1763*x1766)));
evalcond[4]=((1.0)+(((-1.0)*r01*x1765*x1774))+((x1764*x1772))+(((-1.0)*r00*x1768*x1774))+(((-1.0)*r02*x1775))+(((-1.0)*x1770*x1773)));
evalcond[5]=((1.0)+((x1763*x1771))+(((-1.0)*r22*sj5*x1773))+(((-1.0)*x1767*x1774))+(((-1.0)*r21*x1765*x1773))+(((-1.0)*r20*x1768*x1773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1776=cj5*cj5;
IkReal x1777=cj6*cj6;
IkReal x1778=r20*r20;
IkReal x1779=r21*r21;
IkReal x1780=r22*r22;
IkReal x1781=(cj6*r21);
IkReal x1782=(r22*sj5);
IkReal x1783=((1.0)*x1776);
IkReal x1784=((2.0)*r20*sj6);
IkReal x1785=(x1777*x1778);
IkReal x1786=(x1777*x1779);
CheckValue<IkReal> x1787 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((x1782+((cj5*r20*sj6))+((cj5*x1781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1787.valid){
continue;
}
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1783*x1785))+x1780+x1785+x1779+((x1776*x1778))+(((2.0)*cj5*x1781*x1782))+((x1776*x1781*x1784))+(((-1.0)*x1786))+((x1776*x1786))+(((-1.0)*x1780*x1783))+(((-1.0)*x1781*x1784))+((cj5*x1782*x1784)))),-1);
if(!x1788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1787.value)+(((1.5707963267949)*(x1788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1789=IKsin(j4);
IkReal x1790=IKcos(j4);
IkReal x1791=(cj5*cj6);
IkReal x1792=(r11*sj6);
IkReal x1793=(cj6*r20);
IkReal x1794=(cj6*r10);
IkReal x1795=(cj5*sj6);
IkReal x1796=(r01*sj6);
IkReal x1797=(r21*sj6);
IkReal x1798=(cj6*r00);
IkReal x1799=((1.0)*x1790);
IkReal x1800=((1.0)*x1789);
IkReal x1801=(sj5*x1800);
evalcond[0]=((((-1.0)*r20*x1795*x1800))+((x1790*x1793))+(((-1.0)*x1797*x1799))+(((-1.0)*r22*x1801))+(((-1.0)*r21*x1791*x1800)));
evalcond[1]=((((-1.0)*x1798*x1800))+(((-1.0)*r02*sj5*x1799))+((x1789*x1796))+(((-1.0)*r00*x1795*x1799))+(((-1.0)*r01*x1791*x1799)));
evalcond[2]=((((-1.0)*r12*sj5*x1799))+(((-1.0)*r10*x1795*x1799))+(((-1.0)*x1794*x1800))+(((-1.0)*r11*x1791*x1799))+((x1789*x1792)));
evalcond[3]=((((-1.0)*x1792*x1799))+cj0+(((-1.0)*r11*x1791*x1800))+((x1790*x1794))+(((-1.0)*r12*x1801))+(((-1.0)*r10*x1795*x1800)));
evalcond[4]=((1.0)+(((-1.0)*r21*x1791*x1799))+(((-1.0)*r20*x1795*x1799))+((x1789*x1797))+(((-1.0)*r22*sj5*x1799))+(((-1.0)*x1793*x1800)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1796*x1799))+(((-1.0)*r01*x1791*x1800))+(((-1.0)*r00*x1795*x1800))+(((-1.0)*r02*x1801))+((x1790*x1798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1802=(cj0*sj6);
IkReal x1803=(cj0*cj6);
CheckValue<IkReal> x1804 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1802))+((r20*x1803)))),IkReal((((cj5*r20*x1802))+((cj5*r21*x1803))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1804.valid){
continue;
}
CheckValue<IkReal> x1805=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x1805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1804.value)+(((1.5707963267949)*(x1805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1806=IKsin(j4);
IkReal x1807=IKcos(j4);
IkReal x1808=(cj5*cj6);
IkReal x1809=(r11*sj6);
IkReal x1810=(cj6*r20);
IkReal x1811=(cj6*r10);
IkReal x1812=(cj5*sj6);
IkReal x1813=(r01*sj6);
IkReal x1814=(r21*sj6);
IkReal x1815=(cj6*r00);
IkReal x1816=((1.0)*x1807);
IkReal x1817=((1.0)*x1806);
IkReal x1818=(sj5*x1817);
evalcond[0]=((((-1.0)*r21*x1808*x1817))+(((-1.0)*r20*x1812*x1817))+((x1807*x1810))+(((-1.0)*x1814*x1816))+(((-1.0)*r22*x1818)));
evalcond[1]=((((-1.0)*r00*x1812*x1816))+(((-1.0)*r01*x1808*x1816))+(((-1.0)*x1815*x1817))+(((-1.0)*r02*sj5*x1816))+((x1806*x1813)));
evalcond[2]=((((-1.0)*r12*sj5*x1816))+((x1806*x1809))+(((-1.0)*r11*x1808*x1816))+(((-1.0)*x1811*x1817))+(((-1.0)*r10*x1812*x1816)));
evalcond[3]=(cj0+(((-1.0)*r11*x1808*x1817))+(((-1.0)*x1809*x1816))+((x1807*x1811))+(((-1.0)*r12*x1818))+(((-1.0)*r10*x1812*x1817)));
evalcond[4]=((1.0)+(((-1.0)*r21*x1808*x1816))+(((-1.0)*r20*x1812*x1816))+(((-1.0)*x1810*x1817))+((x1806*x1814))+(((-1.0)*r22*sj5*x1816)));
evalcond[5]=((((-1.0)*r00*x1812*x1817))+(((-1.0)*sj0))+(((-1.0)*x1813*x1816))+(((-1.0)*r02*x1818))+((x1807*x1815))+(((-1.0)*r01*x1808*x1817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1819=((1.0)*cj5);
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r01*x1819))+(((-1.0)*r00*sj6*x1819))+(((-1.0)*r02*sj5)))),IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
CheckValue<IkReal> x1821=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x1819))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x1821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1820.value)+(((1.5707963267949)*(x1821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1822=IKsin(j4);
IkReal x1823=IKcos(j4);
IkReal x1824=(cj5*cj6);
IkReal x1825=(r11*sj6);
IkReal x1826=(cj6*r20);
IkReal x1827=(cj6*r10);
IkReal x1828=(cj5*sj6);
IkReal x1829=(r01*sj6);
IkReal x1830=(r21*sj6);
IkReal x1831=(cj6*r00);
IkReal x1832=((1.0)*x1823);
IkReal x1833=((1.0)*x1822);
IkReal x1834=(sj5*x1833);
evalcond[0]=((((-1.0)*r21*x1824*x1833))+((x1823*x1826))+(((-1.0)*r20*x1828*x1833))+(((-1.0)*r22*x1834))+(((-1.0)*x1830*x1832)));
evalcond[1]=((((-1.0)*r02*sj5*x1832))+((x1822*x1829))+(((-1.0)*r01*x1824*x1832))+(((-1.0)*r00*x1828*x1832))+(((-1.0)*x1831*x1833)));
evalcond[2]=((((-1.0)*r12*sj5*x1832))+((x1822*x1825))+(((-1.0)*r11*x1824*x1832))+(((-1.0)*x1827*x1833))+(((-1.0)*r10*x1828*x1832)));
evalcond[3]=(cj0+(((-1.0)*x1825*x1832))+((x1823*x1827))+(((-1.0)*r11*x1824*x1833))+(((-1.0)*r12*x1834))+(((-1.0)*r10*x1828*x1833)));
evalcond[4]=((1.0)+((x1822*x1830))+(((-1.0)*r21*x1824*x1832))+(((-1.0)*x1826*x1833))+(((-1.0)*r22*sj5*x1832))+(((-1.0)*r20*x1828*x1832)));
evalcond[5]=((((-1.0)*sj0))+((x1823*x1831))+(((-1.0)*r01*x1824*x1833))+(((-1.0)*r00*x1828*x1833))+(((-1.0)*r02*x1834))+(((-1.0)*x1829*x1832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1835=((1.26697583102024)*cj5);
IkReal x1836=((0.0338501117053686)*cj5);
IkReal x1837=(r00*sj6);
IkReal x1838=(r10*sj6);
IkReal x1839=((1.26697583102024)*sj5);
IkReal x1840=(cj6*r11);
IkReal x1841=((0.0338501117053686)*sj5);
IkReal x1842=(cj6*r01);
if( IKabs((((x1836*x1840))+(((-3.38501117053686)*py))+(((-1.0)*x1839*x1840))+(((-1.0)*x1838*x1839))+((r12*x1835))+((r12*x1841))+((x1836*x1838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1836*x1842))+(((-3.38501117053686)*px))+(((-1.0)*x1837*x1839))+((r02*x1841))+(((-1.0)*x1839*x1842))+((r02*x1835))+((x1836*x1837)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1836*x1840))+(((-3.38501117053686)*py))+(((-1.0)*x1839*x1840))+(((-1.0)*x1838*x1839))+((r12*x1835))+((r12*x1841))+((x1836*x1838))))+IKsqr((((x1836*x1842))+(((-3.38501117053686)*px))+(((-1.0)*x1837*x1839))+((r02*x1841))+(((-1.0)*x1839*x1842))+((r02*x1835))+((x1836*x1837))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x1836*x1840))+(((-3.38501117053686)*py))+(((-1.0)*x1839*x1840))+(((-1.0)*x1838*x1839))+((r12*x1835))+((r12*x1841))+((x1836*x1838))), (((x1836*x1842))+(((-3.38501117053686)*px))+(((-1.0)*x1837*x1839))+((r02*x1841))+(((-1.0)*x1839*x1842))+((r02*x1835))+((x1836*x1837))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1843=((0.01)*cj5);
IkReal x1844=(cj6*r01);
IkReal x1845=(r00*sj6);
IkReal x1846=((0.01)*sj5);
IkReal x1847=((0.37429)*sj5);
IkReal x1848=((0.37429)*cj5);
IkReal x1849=(r10*sj6);
IkReal x1850=(cj6*r11);
evalcond[0]=(((r02*x1848))+((r02*x1846))+(((-1.0)*px))+(((-1.0)*x1845*x1847))+(((-0.29542)*(IKcos(j0))))+((x1843*x1844))+((x1843*x1845))+(((-1.0)*x1844*x1847)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+((x1843*x1850))+(((-1.0)*py))+(((-1.0)*x1847*x1849))+((x1843*x1849))+((r12*x1846))+((r12*x1848))+(((-1.0)*x1847*x1850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1851=(cj0*sj6);
IkReal x1852=(cj0*cj6);
IkReal x1853=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x1853;
j4eval[1]=((IKabs(((((-1.0)*r21*x1851))+((r20*x1852)))))+(IKabs((((cj5*r20*x1851))+((cj0*r22*sj5))+((cj5*r21*x1852))))));
j4eval[2]=IKsign(x1853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1854=cj5*cj5;
IkReal x1855=cj6*cj6;
IkReal x1856=(r00*r20);
IkReal x1857=(r02*r22);
IkReal x1858=(r22*sj5);
IkReal x1859=(cj6*r21);
IkReal x1860=(r00*sj6);
IkReal x1861=(r20*sj6);
IkReal x1862=(cj6*r01);
IkReal x1863=(cj0*cj5);
IkReal x1864=((1.0)*x1854);
IkReal x1865=(cj5*r02*sj5);
IkReal x1866=(r01*r21*x1855);
IkReal x1867=(((x1854*x1861*x1862))+(((-1.0)*x1859*x1860))+((x1854*x1859*x1860))+(((-1.0)*x1861*x1862))+((r01*r21))+((x1859*x1865))+((cj5*x1858*x1862))+((cj5*x1858*x1860))+((x1855*x1856))+((x1854*x1856))+(((-1.0)*x1855*x1856*x1864))+x1857+((x1854*x1866))+(((-1.0)*x1866))+((x1861*x1865))+(((-1.0)*x1857*x1864)));
j4eval[0]=x1867;
j4eval[1]=IKsign(x1867);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x1859*x1863))+((x1861*x1863))+((cj0*x1858))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1868=cj6*cj6;
IkReal x1869=cj5*cj5;
IkReal x1870=(r12*sj5);
IkReal x1871=(r22*sj5);
IkReal x1872=((1.0)*r11);
IkReal x1873=(r20*sj0);
IkReal x1874=(r10*r20);
IkReal x1875=(cj5*sj6);
IkReal x1876=(cj6*r10);
IkReal x1877=(r12*r22);
IkReal x1878=(cj5*cj6*r21);
IkReal x1879=(r21*x1868);
IkReal x1880=(cj6*r20*sj6);
IkReal x1881=(r11*x1869);
IkReal x1882=((1.0)*r21*sj6);
IkReal x1883=((1.0)*x1869);
IkReal x1884=((((-1.0)*x1868*x1874*x1883))+(((-1.0)*x1872*x1880))+((x1879*x1881))+(((-1.0)*x1876*x1882))+(((-1.0)*x1872*x1879))+((r20*x1870*x1875))+((cj5*cj6*r11*x1871))+((r11*r21))+((x1880*x1881))+((r10*x1871*x1875))+((r21*sj6*x1869*x1876))+x1877+((x1869*x1874))+((x1868*x1874))+((x1870*x1878))+(((-1.0)*x1877*x1883)));
j4eval[0]=x1884;
j4eval[1]=IKsign(x1884);
j4eval[2]=((IKabs((((sj0*x1878))+((sj0*x1871))+((x1873*x1875)))))+(IKabs((((cj6*x1873))+(((-1.0)*sj0*x1882))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1885=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x1885;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x1885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1886=((1.0)*sj5);
IkReal x1887=(((cj5*r22))+(((-1.0)*cj6*r21*x1886))+(((-1.0)*r20*sj6*x1886)));
j4eval[0]=x1887;
j4eval[1]=IKsign(x1887);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x1888=cj6*cj6;
IkReal x1889=r01*r01;
IkReal x1890=cj5*cj5;
IkReal x1891=r00*r00;
IkReal x1892=r02*r02;
IkReal x1893=(cj6*r00);
IkReal x1894=(r02*sj5);
IkReal x1895=(cj5*cj6*r01);
IkReal x1896=((2.0)*r01*sj6);
IkReal x1897=(cj5*r00*sj6);
IkReal x1898=((1.0)*x1890);
IkReal x1899=(x1888*x1891);
IkReal x1900=(x1888*x1889);
IkReal x1901=((((-1.0)*x1893*x1896))+(((-1.0)*x1892*x1898))+(((2.0)*x1894*x1897))+(((2.0)*x1894*x1895))+((x1890*x1893*x1896))+(((-1.0)*x1900))+(((-1.0)*x1898*x1899))+x1899+x1892+x1889+((x1890*x1900))+((x1890*x1891)));
j4eval[0]=x1901;
j4eval[1]=((IKabs((x1894+x1895+x1897)))+(IKabs(((((-1.0)*r01*sj6))+x1893))));
j4eval[2]=IKsign(x1901);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1902=cj6*cj6;
IkReal x1903=r01*r01;
IkReal x1904=cj5*cj5;
IkReal x1905=r00*r00;
IkReal x1906=r02*r02;
IkReal x1907=(cj6*r00);
IkReal x1908=((2.0)*r01);
IkReal x1909=(cj5*cj6);
IkReal x1910=(r02*sj5);
IkReal x1911=(cj5*r00*sj6);
IkReal x1912=(x1904*x1905);
IkReal x1913=(x1902*x1903);
CheckValue<IkReal> x1914=IKPowWithIntegerCheck(IKsign((((x1904*x1913))+(((-1.0)*x1904*x1906))+(((-1.0)*sj6*x1907*x1908))+((x1908*x1909*x1910))+(((-1.0)*x1902*x1912))+(((2.0)*x1910*x1911))+(((-1.0)*x1913))+x1906+x1903+x1912+((sj6*x1904*x1907*x1908))+((x1902*x1905)))),-1);
if(!x1914.valid){
continue;
}
CheckValue<IkReal> x1915 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x1907)),IkReal((((r01*x1909))+x1911+x1910)),IKFAST_ATAN2_MAGTHRESH);
if(!x1915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1914.value)))+(x1915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1916=IKsin(j4);
IkReal x1917=IKcos(j4);
IkReal x1918=(cj5*cj6);
IkReal x1919=(r11*sj6);
IkReal x1920=(cj6*r20);
IkReal x1921=(cj6*r10);
IkReal x1922=(cj5*sj6);
IkReal x1923=(r21*sj6);
IkReal x1924=(cj6*r00);
IkReal x1925=(r01*sj6);
IkReal x1926=((1.0)*x1917);
IkReal x1927=((1.0)*x1916);
IkReal x1928=(sj5*x1927);
evalcond[0]=((((-1.0)*r20*x1922*x1927))+(((-1.0)*r22*x1928))+((x1917*x1920))+(((-1.0)*r21*x1918*x1927))+(((-1.0)*x1923*x1926)));
evalcond[1]=((((-1.0)*r01*x1918*x1927))+((x1917*x1924))+(((-1.0)*x1925*x1926))+(((-1.0)*r02*x1928))+(((-1.0)*r00*x1922*x1927)));
evalcond[2]=((((-1.0)*r20*x1922*x1926))+(((-1.0)*r22*sj5*x1926))+((x1916*x1923))+(((-1.0)*r21*x1918*x1926))+(((-1.0)*x1920*x1927)));
evalcond[3]=(((x1916*x1919))+(((-1.0)*r10*x1922*x1926))+(((-1.0)*r12*sj5*x1926))+(((-1.0)*r11*x1918*x1926))+(((-1.0)*x1921*x1927)));
evalcond[4]=((1.0)+(((-1.0)*r12*x1928))+(((-1.0)*r10*x1922*x1927))+(((-1.0)*r11*x1918*x1927))+((x1917*x1921))+(((-1.0)*x1919*x1926)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x1926))+(((-1.0)*r01*x1918*x1926))+((x1916*x1925))+(((-1.0)*x1924*x1927))+(((-1.0)*r00*x1922*x1926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1929=((1.0)*sj5);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
CheckValue<IkReal> x1931=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x1929))+(((-1.0)*cj6*r21*x1929)))),-1);
if(!x1931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1930.value)+(((1.5707963267949)*(x1931.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1932=IKsin(j4);
IkReal x1933=IKcos(j4);
IkReal x1934=(cj5*cj6);
IkReal x1935=(r11*sj6);
IkReal x1936=(cj6*r20);
IkReal x1937=(cj6*r10);
IkReal x1938=(cj5*sj6);
IkReal x1939=(r21*sj6);
IkReal x1940=(cj6*r00);
IkReal x1941=(r01*sj6);
IkReal x1942=((1.0)*x1933);
IkReal x1943=((1.0)*x1932);
IkReal x1944=(sj5*x1943);
evalcond[0]=((((-1.0)*r22*x1944))+(((-1.0)*r20*x1938*x1943))+(((-1.0)*x1939*x1942))+(((-1.0)*r21*x1934*x1943))+((x1933*x1936)));
evalcond[1]=((((-1.0)*r02*x1944))+(((-1.0)*r00*x1938*x1943))+(((-1.0)*x1941*x1942))+((x1933*x1940))+(((-1.0)*r01*x1934*x1943)));
evalcond[2]=((((-1.0)*r20*x1938*x1942))+((x1932*x1939))+(((-1.0)*r22*sj5*x1942))+(((-1.0)*x1936*x1943))+(((-1.0)*r21*x1934*x1942)));
evalcond[3]=((((-1.0)*r10*x1938*x1942))+(((-1.0)*x1937*x1943))+(((-1.0)*r12*sj5*x1942))+((x1932*x1935))+(((-1.0)*r11*x1934*x1942)));
evalcond[4]=((1.0)+(((-1.0)*r10*x1938*x1943))+(((-1.0)*x1935*x1942))+(((-1.0)*r12*x1944))+(((-1.0)*r11*x1934*x1943))+((x1933*x1937)));
evalcond[5]=((1.0)+(((-1.0)*x1940*x1943))+(((-1.0)*r00*x1938*x1942))+(((-1.0)*r02*sj5*x1942))+((x1932*x1941))+(((-1.0)*r01*x1934*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1945 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1945.valid){
continue;
}
CheckValue<IkReal> x1946=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x1946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1945.value)+(((1.5707963267949)*(x1946.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1947=IKsin(j4);
IkReal x1948=IKcos(j4);
IkReal x1949=(cj5*cj6);
IkReal x1950=(r11*sj6);
IkReal x1951=(cj6*r20);
IkReal x1952=(cj6*r10);
IkReal x1953=(cj5*sj6);
IkReal x1954=(r21*sj6);
IkReal x1955=(cj6*r00);
IkReal x1956=(r01*sj6);
IkReal x1957=((1.0)*x1948);
IkReal x1958=((1.0)*x1947);
IkReal x1959=(sj5*x1958);
evalcond[0]=((((-1.0)*r22*x1959))+(((-1.0)*x1954*x1957))+((x1948*x1951))+(((-1.0)*r20*x1953*x1958))+(((-1.0)*r21*x1949*x1958)));
evalcond[1]=((((-1.0)*r02*x1959))+((x1948*x1955))+(((-1.0)*r01*x1949*x1958))+(((-1.0)*r00*x1953*x1958))+(((-1.0)*x1956*x1957)));
evalcond[2]=((((-1.0)*x1951*x1958))+(((-1.0)*r22*sj5*x1957))+(((-1.0)*r20*x1953*x1957))+((x1947*x1954))+(((-1.0)*r21*x1949*x1957)));
evalcond[3]=((((-1.0)*r12*sj5*x1957))+(((-1.0)*x1952*x1958))+((x1947*x1950))+(((-1.0)*r11*x1949*x1957))+(((-1.0)*r10*x1953*x1957)));
evalcond[4]=((1.0)+(((-1.0)*x1950*x1957))+((x1948*x1952))+(((-1.0)*r12*x1959))+(((-1.0)*r11*x1949*x1958))+(((-1.0)*r10*x1953*x1958)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x1957))+((x1947*x1956))+(((-1.0)*r01*x1949*x1957))+(((-1.0)*x1955*x1958))+(((-1.0)*r00*x1953*x1957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1960=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x1960;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x1960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1961=((1.0)*sj6);
IkReal x1962=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x1961))+((cj5*r02)));
j4eval[0]=x1962;
j4eval[1]=IKsign(x1962);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x1961))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x1963=cj6*cj6;
IkReal x1964=cj5*cj5;
IkReal x1965=r00*r00;
IkReal x1966=r01*r01;
IkReal x1967=r02*r02;
IkReal x1968=(cj6*r00);
IkReal x1969=(cj5*cj6*r01);
IkReal x1970=((2.0)*r02*sj5);
IkReal x1971=((1.0)*x1963);
IkReal x1972=((2.0)*r01*sj6);
IkReal x1973=(cj5*r00*sj6);
IkReal x1974=(x1964*x1965);
IkReal x1975=((((-1.0)*x1964*x1966*x1971))+((x1964*x1967))+(((-1.0)*x1965*x1971))+(((-1.0)*x1964*x1968*x1972))+(((-1.0)*x1966))+(((-1.0)*x1967))+(((-1.0)*x1974))+(((-1.0)*x1970*x1973))+(((-1.0)*x1969*x1970))+((x1963*x1966))+((x1963*x1974))+((x1968*x1972)));
j4eval[0]=x1975;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x1968)))+(IKabs((((r02*sj5))+x1969+x1973))));
j4eval[2]=IKsign(x1975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1976=cj6*cj6;
IkReal x1977=cj5*cj5;
IkReal x1978=r00*r00;
IkReal x1979=r01*r01;
IkReal x1980=r02*r02;
IkReal x1981=(cj6*r00);
IkReal x1982=(cj5*cj6*r01);
IkReal x1983=((2.0)*r02*sj5);
IkReal x1984=((1.0)*x1976);
IkReal x1985=((2.0)*r01*sj6);
IkReal x1986=(cj5*r00*sj6);
IkReal x1987=(x1977*x1978);
CheckValue<IkReal> x1988=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1983*x1986))+((x1976*x1979))+((x1976*x1987))+((x1981*x1985))+(((-1.0)*x1979))+(((-1.0)*x1977*x1981*x1985))+(((-1.0)*x1980))+(((-1.0)*x1987))+(((-1.0)*x1982*x1983))+(((-1.0)*x1978*x1984))+(((-1.0)*x1977*x1979*x1984))+((x1977*x1980)))),-1);
if(!x1988.valid){
continue;
}
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x1981)),IkReal((((r02*sj5))+x1986+x1982)),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1988.value)))+(x1989.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1990=IKsin(j4);
IkReal x1991=IKcos(j4);
IkReal x1992=(cj5*cj6);
IkReal x1993=(r11*sj6);
IkReal x1994=(cj6*r20);
IkReal x1995=(cj6*r10);
IkReal x1996=(cj5*sj6);
IkReal x1997=(r21*sj6);
IkReal x1998=(cj6*r00);
IkReal x1999=(r01*sj6);
IkReal x2000=((1.0)*x1991);
IkReal x2001=((1.0)*x1990);
IkReal x2002=(sj5*x2001);
evalcond[0]=((((-1.0)*r22*x2002))+(((-1.0)*r20*x1996*x2001))+((x1991*x1994))+(((-1.0)*r21*x1992*x2001))+(((-1.0)*x1997*x2000)));
evalcond[1]=((((-1.0)*r00*x1996*x2001))+((x1991*x1998))+(((-1.0)*r01*x1992*x2001))+(((-1.0)*r02*x2002))+(((-1.0)*x1999*x2000)));
evalcond[2]=((((-1.0)*r20*x1996*x2000))+(((-1.0)*r22*sj5*x2000))+(((-1.0)*x1994*x2001))+(((-1.0)*r21*x1992*x2000))+((x1990*x1997)));
evalcond[3]=((((-1.0)*r10*x1996*x2000))+(((-1.0)*x1995*x2001))+(((-1.0)*r12*sj5*x2000))+(((-1.0)*r11*x1992*x2000))+((x1990*x1993)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x1996*x2001))+((x1991*x1995))+(((-1.0)*r12*x2002))+(((-1.0)*r11*x1992*x2001))+(((-1.0)*x1993*x2000)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x1996*x2000))+(((-1.0)*x1998*x2001))+(((-1.0)*r02*sj5*x2000))+(((-1.0)*r01*x1992*x2000))+((x1990*x1999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2003=((1.0)*sj6);
CheckValue<IkReal> x2004 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x2003)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2004.valid){
continue;
}
CheckValue<IkReal> x2005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x2003))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x2005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2004.value)+(((1.5707963267949)*(x2005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2006=IKsin(j4);
IkReal x2007=IKcos(j4);
IkReal x2008=(cj5*cj6);
IkReal x2009=(r11*sj6);
IkReal x2010=(cj6*r20);
IkReal x2011=(cj6*r10);
IkReal x2012=(cj5*sj6);
IkReal x2013=(r21*sj6);
IkReal x2014=(cj6*r00);
IkReal x2015=(r01*sj6);
IkReal x2016=((1.0)*x2007);
IkReal x2017=((1.0)*x2006);
IkReal x2018=(sj5*x2017);
evalcond[0]=((((-1.0)*x2013*x2016))+(((-1.0)*r20*x2012*x2017))+(((-1.0)*r21*x2008*x2017))+((x2007*x2010))+(((-1.0)*r22*x2018)));
evalcond[1]=((((-1.0)*r00*x2012*x2017))+(((-1.0)*x2015*x2016))+(((-1.0)*r02*x2018))+((x2007*x2014))+(((-1.0)*r01*x2008*x2017)));
evalcond[2]=((((-1.0)*x2010*x2017))+(((-1.0)*r20*x2012*x2016))+(((-1.0)*r21*x2008*x2016))+((x2006*x2013))+(((-1.0)*r22*sj5*x2016)));
evalcond[3]=((((-1.0)*x2011*x2017))+(((-1.0)*r12*sj5*x2016))+((x2006*x2009))+(((-1.0)*r10*x2012*x2016))+(((-1.0)*r11*x2008*x2016)));
evalcond[4]=((-1.0)+(((-1.0)*x2009*x2016))+(((-1.0)*r12*x2018))+(((-1.0)*r10*x2012*x2017))+(((-1.0)*r11*x2008*x2017))+((x2007*x2011)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x2016))+(((-1.0)*r00*x2012*x2016))+(((-1.0)*x2014*x2017))+((x2006*x2015))+(((-1.0)*r01*x2008*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2019=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2019.valid){
continue;
}
CheckValue<IkReal> x2020 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2019.value)))+(x2020.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2021=IKsin(j4);
IkReal x2022=IKcos(j4);
IkReal x2023=(cj5*cj6);
IkReal x2024=(r11*sj6);
IkReal x2025=(cj6*r20);
IkReal x2026=(cj6*r10);
IkReal x2027=(cj5*sj6);
IkReal x2028=(r21*sj6);
IkReal x2029=(cj6*r00);
IkReal x2030=(r01*sj6);
IkReal x2031=((1.0)*x2022);
IkReal x2032=((1.0)*x2021);
IkReal x2033=(sj5*x2032);
evalcond[0]=((((-1.0)*r22*x2033))+(((-1.0)*r21*x2023*x2032))+((x2022*x2025))+(((-1.0)*x2028*x2031))+(((-1.0)*r20*x2027*x2032)));
evalcond[1]=((((-1.0)*r01*x2023*x2032))+((x2022*x2029))+(((-1.0)*r02*x2033))+(((-1.0)*x2030*x2031))+(((-1.0)*r00*x2027*x2032)));
evalcond[2]=((((-1.0)*r22*sj5*x2031))+(((-1.0)*r21*x2023*x2031))+(((-1.0)*x2025*x2032))+(((-1.0)*r20*x2027*x2031))+((x2021*x2028)));
evalcond[3]=((((-1.0)*x2026*x2032))+(((-1.0)*r12*sj5*x2031))+(((-1.0)*r10*x2027*x2031))+(((-1.0)*r11*x2023*x2031))+((x2021*x2024)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x2033))+((x2022*x2026))+(((-1.0)*x2024*x2031))+(((-1.0)*r10*x2027*x2032))+(((-1.0)*r11*x2023*x2032)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x2023*x2031))+(((-1.0)*x2029*x2032))+(((-1.0)*r02*sj5*x2031))+(((-1.0)*r00*x2027*x2031))+((x2021*x2030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2034=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2034;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2035=((1.0)*sj5);
IkReal x2036=(((cj5*r22))+(((-1.0)*cj6*r21*x2035))+(((-1.0)*r20*sj6*x2035)));
j4eval[0]=x2036;
j4eval[1]=IKsign(x2036);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2037=r11*r11;
IkReal x2038=cj5*cj5;
IkReal x2039=cj6*cj6;
IkReal x2040=r10*r10;
IkReal x2041=r12*r12;
IkReal x2042=(r12*sj5);
IkReal x2043=(cj6*r10);
IkReal x2044=((1.0)*x2039);
IkReal x2045=(cj5*cj6*r11);
IkReal x2046=(cj5*r10*sj6);
IkReal x2047=((2.0)*r11*sj6);
IkReal x2048=(x2038*x2040);
IkReal x2049=(((x2037*x2038*x2039))+(((2.0)*x2042*x2045))+(((2.0)*x2042*x2046))+((x2038*x2043*x2047))+x2041+x2048+x2037+(((-1.0)*x2038*x2041))+(((-1.0)*x2044*x2048))+((x2039*x2040))+(((-1.0)*x2043*x2047))+(((-1.0)*x2037*x2044)));
j4eval[0]=x2049;
j4eval[1]=IKsign(x2049);
j4eval[2]=((IKabs((x2046+x2045+x2042)))+(IKabs((x2043+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2050=r11*r11;
IkReal x2051=cj5*cj5;
IkReal x2052=cj6*cj6;
IkReal x2053=r10*r10;
IkReal x2054=r12*r12;
IkReal x2055=(r10*sj6);
IkReal x2056=(r12*sj5);
IkReal x2057=((1.0)*x2052);
IkReal x2058=(cj5*cj6*r11);
IkReal x2059=((2.0)*cj6*r11);
IkReal x2060=(x2051*x2053);
CheckValue<IkReal> x2061 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x2055))+x2056+x2058)),IKFAST_ATAN2_MAGTHRESH);
if(!x2061.valid){
continue;
}
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2057*x2060))+((x2052*x2053))+(((2.0)*cj5*x2055*x2056))+x2060+x2050+x2054+(((2.0)*x2056*x2058))+((x2050*x2051*x2052))+(((-1.0)*x2050*x2057))+(((-1.0)*x2051*x2054))+((x2051*x2055*x2059))+(((-1.0)*x2055*x2059)))),-1);
if(!x2062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2061.value)+(((1.5707963267949)*(x2062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2063=IKsin(j4);
IkReal x2064=IKcos(j4);
IkReal x2065=(cj5*cj6);
IkReal x2066=(r11*sj6);
IkReal x2067=(cj6*r20);
IkReal x2068=(cj6*r10);
IkReal x2069=(cj5*sj6);
IkReal x2070=(r01*sj6);
IkReal x2071=(r21*sj6);
IkReal x2072=(cj6*r00);
IkReal x2073=((1.0)*x2064);
IkReal x2074=((1.0)*x2063);
IkReal x2075=(sj5*x2074);
evalcond[0]=((((-1.0)*r21*x2065*x2074))+(((-1.0)*x2071*x2073))+(((-1.0)*r22*x2075))+(((-1.0)*r20*x2069*x2074))+((x2064*x2067)));
evalcond[1]=((((-1.0)*r11*x2065*x2074))+(((-1.0)*r12*x2075))+(((-1.0)*r10*x2069*x2074))+((x2064*x2068))+(((-1.0)*x2066*x2073)));
evalcond[2]=((((-1.0)*r21*x2065*x2073))+(((-1.0)*r20*x2069*x2073))+((x2063*x2071))+(((-1.0)*r22*sj5*x2073))+(((-1.0)*x2067*x2074)));
evalcond[3]=((((-1.0)*r00*x2069*x2073))+(((-1.0)*r01*x2065*x2073))+((x2063*x2070))+(((-1.0)*r02*sj5*x2073))+(((-1.0)*x2072*x2074)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x2075))+(((-1.0)*x2070*x2073))+(((-1.0)*r00*x2069*x2074))+(((-1.0)*r01*x2065*x2074))+((x2064*x2072)));
evalcond[5]=((1.0)+(((-1.0)*r11*x2065*x2073))+((x2063*x2066))+(((-1.0)*r10*x2069*x2073))+(((-1.0)*x2068*x2074))+(((-1.0)*r12*sj5*x2073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2076=((1.0)*sj5);
CheckValue<IkReal> x2077 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2077.valid){
continue;
}
CheckValue<IkReal> x2078=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x2076))+(((-1.0)*cj6*r21*x2076)))),-1);
if(!x2078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2077.value)+(((1.5707963267949)*(x2078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2079=IKsin(j4);
IkReal x2080=IKcos(j4);
IkReal x2081=(cj5*cj6);
IkReal x2082=(r11*sj6);
IkReal x2083=(cj6*r20);
IkReal x2084=(cj6*r10);
IkReal x2085=(cj5*sj6);
IkReal x2086=(r01*sj6);
IkReal x2087=(r21*sj6);
IkReal x2088=(cj6*r00);
IkReal x2089=((1.0)*x2080);
IkReal x2090=((1.0)*x2079);
IkReal x2091=(sj5*x2090);
evalcond[0]=((((-1.0)*r20*x2085*x2090))+(((-1.0)*x2087*x2089))+(((-1.0)*r21*x2081*x2090))+(((-1.0)*r22*x2091))+((x2080*x2083)));
evalcond[1]=((((-1.0)*r11*x2081*x2090))+(((-1.0)*r12*x2091))+(((-1.0)*x2082*x2089))+(((-1.0)*r10*x2085*x2090))+((x2080*x2084)));
evalcond[2]=((((-1.0)*x2083*x2090))+((x2079*x2087))+(((-1.0)*r20*x2085*x2089))+(((-1.0)*r22*sj5*x2089))+(((-1.0)*r21*x2081*x2089)));
evalcond[3]=((((-1.0)*r02*sj5*x2089))+(((-1.0)*x2088*x2090))+((x2079*x2086))+(((-1.0)*r01*x2081*x2089))+(((-1.0)*r00*x2085*x2089)));
evalcond[4]=((-1.0)+(((-1.0)*x2086*x2089))+(((-1.0)*r00*x2085*x2090))+(((-1.0)*r01*x2081*x2090))+(((-1.0)*r02*x2091))+((x2080*x2088)));
evalcond[5]=((1.0)+(((-1.0)*r10*x2085*x2089))+(((-1.0)*r11*x2081*x2089))+(((-1.0)*r12*sj5*x2089))+(((-1.0)*x2084*x2090))+((x2079*x2082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2092 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2092.valid){
continue;
}
CheckValue<IkReal> x2093=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x2093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2092.value)+(((1.5707963267949)*(x2093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2094=IKsin(j4);
IkReal x2095=IKcos(j4);
IkReal x2096=(cj5*cj6);
IkReal x2097=(r11*sj6);
IkReal x2098=(cj6*r20);
IkReal x2099=(cj6*r10);
IkReal x2100=(cj5*sj6);
IkReal x2101=(r01*sj6);
IkReal x2102=(r21*sj6);
IkReal x2103=(cj6*r00);
IkReal x2104=((1.0)*x2095);
IkReal x2105=((1.0)*x2094);
IkReal x2106=(sj5*x2105);
evalcond[0]=((((-1.0)*r22*x2106))+(((-1.0)*x2102*x2104))+(((-1.0)*r20*x2100*x2105))+((x2095*x2098))+(((-1.0)*r21*x2096*x2105)));
evalcond[1]=((((-1.0)*r12*x2106))+(((-1.0)*r11*x2096*x2105))+(((-1.0)*x2097*x2104))+(((-1.0)*r10*x2100*x2105))+((x2095*x2099)));
evalcond[2]=((((-1.0)*r20*x2100*x2104))+(((-1.0)*x2098*x2105))+((x2094*x2102))+(((-1.0)*r22*sj5*x2104))+(((-1.0)*r21*x2096*x2104)));
evalcond[3]=((((-1.0)*r02*sj5*x2104))+(((-1.0)*r01*x2096*x2104))+(((-1.0)*x2103*x2105))+(((-1.0)*r00*x2100*x2104))+((x2094*x2101)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x2106))+(((-1.0)*r01*x2096*x2105))+(((-1.0)*x2101*x2104))+(((-1.0)*r00*x2100*x2105))+((x2095*x2103)));
evalcond[5]=((1.0)+((x2094*x2097))+(((-1.0)*r11*x2096*x2104))+(((-1.0)*r12*sj5*x2104))+(((-1.0)*x2099*x2105))+(((-1.0)*r10*x2100*x2104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2107=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2107;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2108=((1.0)*sj6);
IkReal x2109=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2108)));
j4eval[0]=x2109;
j4eval[1]=IKsign(x2109);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2108))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2110=cj6*cj6;
IkReal x2111=cj5*cj5;
IkReal x2112=r10*r10;
IkReal x2113=r11*r11;
IkReal x2114=r12*r12;
IkReal x2115=(r10*sj6);
IkReal x2116=(r12*sj5);
IkReal x2117=((2.0)*cj6*r11);
IkReal x2118=((1.0)*x2112);
IkReal x2119=(x2110*x2113);
IkReal x2120=((((-1.0)*x2111*x2119))+((x2110*x2111*x2112))+x2119+((x2111*x2114))+(((-2.0)*cj5*x2115*x2116))+(((-1.0)*cj5*x2116*x2117))+(((-1.0)*x2111*x2118))+(((-1.0)*x2110*x2118))+((x2115*x2117))+(((-1.0)*x2111*x2115*x2117))+(((-1.0)*x2113))+(((-1.0)*x2114)));
j4eval[0]=x2120;
j4eval[1]=((IKabs((x2116+((cj5*x2115))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2121=cj6*cj6;
IkReal x2122=cj5*cj5;
IkReal x2123=r10*r10;
IkReal x2124=r11*r11;
IkReal x2125=r12*r12;
IkReal x2126=(r10*sj6);
IkReal x2127=(r12*sj5);
IkReal x2128=((2.0)*cj6*r11);
IkReal x2129=(x2121*x2124);
IkReal x2130=(x2122*x2123);
CheckValue<IkReal> x2131 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x2127+((cj5*cj6*r11))+((cj5*x2126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2131.valid){
continue;
}
CheckValue<IkReal> x2132=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2122*x2126*x2128))+((x2121*x2130))+((x2122*x2125))+(((-1.0)*cj5*x2127*x2128))+x2129+(((-1.0)*x2121*x2123))+(((-1.0)*x2124))+(((-1.0)*x2125))+(((-1.0)*x2122*x2129))+(((-1.0)*x2130))+((x2126*x2128))+(((-2.0)*cj5*x2126*x2127)))),-1);
if(!x2132.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2131.value)+(((1.5707963267949)*(x2132.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2133=IKsin(j4);
IkReal x2134=IKcos(j4);
IkReal x2135=(cj5*cj6);
IkReal x2136=(r11*sj6);
IkReal x2137=(cj6*r20);
IkReal x2138=(cj6*r10);
IkReal x2139=(cj5*sj6);
IkReal x2140=(r01*sj6);
IkReal x2141=(r21*sj6);
IkReal x2142=(cj6*r00);
IkReal x2143=((1.0)*x2134);
IkReal x2144=((1.0)*x2133);
IkReal x2145=(sj5*x2144);
evalcond[0]=((((-1.0)*r20*x2139*x2144))+((x2134*x2137))+(((-1.0)*r21*x2135*x2144))+(((-1.0)*r22*x2145))+(((-1.0)*x2141*x2143)));
evalcond[1]=((((-1.0)*x2136*x2143))+(((-1.0)*r12*x2145))+(((-1.0)*r11*x2135*x2144))+((x2134*x2138))+(((-1.0)*r10*x2139*x2144)));
evalcond[2]=(((x2133*x2141))+(((-1.0)*r20*x2139*x2143))+(((-1.0)*r22*sj5*x2143))+(((-1.0)*r21*x2135*x2143))+(((-1.0)*x2137*x2144)));
evalcond[3]=((((-1.0)*r01*x2135*x2143))+((x2133*x2140))+(((-1.0)*r00*x2139*x2143))+(((-1.0)*x2142*x2144))+(((-1.0)*r02*sj5*x2143)));
evalcond[4]=((1.0)+(((-1.0)*r01*x2135*x2144))+(((-1.0)*r00*x2139*x2144))+(((-1.0)*r02*x2145))+(((-1.0)*x2140*x2143))+((x2134*x2142)));
evalcond[5]=((-1.0)+(((-1.0)*x2138*x2144))+(((-1.0)*r12*sj5*x2143))+(((-1.0)*r11*x2135*x2143))+((x2133*x2136))+(((-1.0)*r10*x2139*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2146=((1.0)*sj6);
CheckValue<IkReal> x2147=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2146)))),-1);
if(!x2147.valid){
continue;
}
CheckValue<IkReal> x2148 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x2146)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2147.value)))+(x2148.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2149=IKsin(j4);
IkReal x2150=IKcos(j4);
IkReal x2151=(cj5*cj6);
IkReal x2152=(r11*sj6);
IkReal x2153=(cj6*r20);
IkReal x2154=(cj6*r10);
IkReal x2155=(cj5*sj6);
IkReal x2156=(r01*sj6);
IkReal x2157=(r21*sj6);
IkReal x2158=(cj6*r00);
IkReal x2159=((1.0)*x2150);
IkReal x2160=((1.0)*x2149);
IkReal x2161=(sj5*x2160);
evalcond[0]=((((-1.0)*r20*x2155*x2160))+(((-1.0)*x2157*x2159))+((x2150*x2153))+(((-1.0)*r21*x2151*x2160))+(((-1.0)*r22*x2161)));
evalcond[1]=((((-1.0)*r11*x2151*x2160))+(((-1.0)*r10*x2155*x2160))+(((-1.0)*x2152*x2159))+((x2150*x2154))+(((-1.0)*r12*x2161)));
evalcond[2]=((((-1.0)*r21*x2151*x2159))+((x2149*x2157))+(((-1.0)*x2153*x2160))+(((-1.0)*r20*x2155*x2159))+(((-1.0)*r22*sj5*x2159)));
evalcond[3]=(((x2149*x2156))+(((-1.0)*r00*x2155*x2159))+(((-1.0)*x2158*x2160))+(((-1.0)*r02*sj5*x2159))+(((-1.0)*r01*x2151*x2159)));
evalcond[4]=((1.0)+(((-1.0)*r01*x2151*x2160))+(((-1.0)*r00*x2155*x2160))+((x2150*x2158))+(((-1.0)*r02*x2161))+(((-1.0)*x2156*x2159)));
evalcond[5]=((-1.0)+(((-1.0)*x2154*x2160))+((x2149*x2152))+(((-1.0)*r11*x2151*x2159))+(((-1.0)*r12*sj5*x2159))+(((-1.0)*r10*x2155*x2159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2162=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2162.valid){
continue;
}
CheckValue<IkReal> x2163 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2162.value)))+(x2163.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2164=IKsin(j4);
IkReal x2165=IKcos(j4);
IkReal x2166=(cj5*cj6);
IkReal x2167=(r11*sj6);
IkReal x2168=(cj6*r20);
IkReal x2169=(cj6*r10);
IkReal x2170=(cj5*sj6);
IkReal x2171=(r01*sj6);
IkReal x2172=(r21*sj6);
IkReal x2173=(cj6*r00);
IkReal x2174=((1.0)*x2165);
IkReal x2175=((1.0)*x2164);
IkReal x2176=(sj5*x2175);
evalcond[0]=((((-1.0)*r20*x2170*x2175))+((x2165*x2168))+(((-1.0)*x2172*x2174))+(((-1.0)*r22*x2176))+(((-1.0)*r21*x2166*x2175)));
evalcond[1]=((((-1.0)*r11*x2166*x2175))+((x2165*x2169))+(((-1.0)*r10*x2170*x2175))+(((-1.0)*r12*x2176))+(((-1.0)*x2167*x2174)));
evalcond[2]=((((-1.0)*x2168*x2175))+((x2164*x2172))+(((-1.0)*r20*x2170*x2174))+(((-1.0)*r22*sj5*x2174))+(((-1.0)*r21*x2166*x2174)));
evalcond[3]=((((-1.0)*r02*sj5*x2174))+((x2164*x2171))+(((-1.0)*r00*x2170*x2174))+(((-1.0)*x2173*x2175))+(((-1.0)*r01*x2166*x2174)));
evalcond[4]=((1.0)+(((-1.0)*x2171*x2174))+(((-1.0)*r00*x2170*x2175))+((x2165*x2173))+(((-1.0)*r02*x2176))+(((-1.0)*r01*x2166*x2175)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x2166*x2174))+(((-1.0)*x2169*x2175))+((x2164*x2167))+(((-1.0)*r10*x2170*x2174))+(((-1.0)*r12*sj5*x2174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2177=cj6*cj6;
IkReal x2178=cj5*cj5;
IkReal x2179=((1.0)*r11);
IkReal x2180=(cj5*sj0);
IkReal x2181=(cj6*r21);
IkReal x2182=(r22*sj5);
IkReal x2183=(r20*sj6);
IkReal x2184=(r12*r22);
IkReal x2185=((1.0)*sj6);
IkReal x2186=(r21*x2177);
IkReal x2187=(r10*x2178);
IkReal x2188=(r11*x2178);
IkReal x2189=(r20*x2177);
IkReal x2190=(cj5*r12*sj5);
CheckValue<IkReal> x2191 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x2185))+((cj6*r20*sj0)))),IkReal((((x2180*x2183))+((x2180*x2181))+((sj0*x2182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2191.valid){
continue;
}
CheckValue<IkReal> x2192=IKPowWithIntegerCheck(IKsign((((cj5*cj6*r11*x2182))+(((-1.0)*x2187*x2189))+((r11*r21))+((x2186*x2188))+x2184+((r20*x2187))+((cj5*r10*sj6*x2182))+((sj6*x2181*x2187))+((cj6*x2183*x2188))+(((-1.0)*x2178*x2184))+((x2183*x2190))+((x2181*x2190))+(((-1.0)*r10*x2181*x2185))+(((-1.0)*cj6*x2179*x2183))+(((-1.0)*x2179*x2186))+((r10*x2189)))),-1);
if(!x2192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2191.value)+(((1.5707963267949)*(x2192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2193=IKsin(j4);
IkReal x2194=IKcos(j4);
IkReal x2195=(cj5*cj6);
IkReal x2196=(r11*sj6);
IkReal x2197=(cj6*r20);
IkReal x2198=(cj5*sj6);
IkReal x2199=(cj6*r10);
IkReal x2200=(r01*sj6);
IkReal x2201=(r21*sj6);
IkReal x2202=(cj6*r00);
IkReal x2203=((1.0)*x2194);
IkReal x2204=((1.0)*x2193);
IkReal x2205=(sj5*x2204);
evalcond[0]=(((x2194*x2197))+(((-1.0)*r20*x2198*x2204))+(((-1.0)*r21*x2195*x2204))+(((-1.0)*r22*x2205))+(((-1.0)*x2201*x2203)));
evalcond[1]=((((-1.0)*r20*x2198*x2203))+(((-1.0)*r21*x2195*x2203))+(((-1.0)*x2197*x2204))+((x2193*x2201))+(((-1.0)*r22*sj5*x2203)));
evalcond[2]=(cj0+((x2194*x2199))+(((-1.0)*r12*x2205))+(((-1.0)*x2196*x2203))+(((-1.0)*r11*x2195*x2204))+(((-1.0)*r10*x2198*x2204)));
evalcond[3]=((((-1.0)*r00*x2198*x2203))+cj0+(((-1.0)*x2202*x2204))+((x2193*x2200))+(((-1.0)*r02*sj5*x2203))+(((-1.0)*r01*x2195*x2203)));
evalcond[4]=(sj0+((x2193*x2196))+(((-1.0)*r12*sj5*x2203))+(((-1.0)*r11*x2195*x2203))+(((-1.0)*r10*x2198*x2203))+(((-1.0)*x2199*x2204)));
evalcond[5]=((((-1.0)*r00*x2198*x2204))+(((-1.0)*sj0))+((x2194*x2202))+(((-1.0)*x2200*x2203))+(((-1.0)*r02*x2205))+(((-1.0)*r01*x2195*x2204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2206=cj5*cj5;
IkReal x2207=cj6*cj6;
IkReal x2208=(r22*sj5);
IkReal x2209=(cj6*r21);
IkReal x2210=(r20*sj6);
IkReal x2211=((1.0)*sj6);
IkReal x2212=(cj0*cj5);
IkReal x2213=(r02*r22);
IkReal x2214=(cj6*r01);
IkReal x2215=(r00*sj6);
IkReal x2216=(cj5*r02*sj5);
IkReal x2217=(r01*x2206);
IkReal x2218=(r21*x2207);
IkReal x2219=(r00*r20*x2206);
CheckValue<IkReal> x2220=IKPowWithIntegerCheck(IKsign((((x2206*x2209*x2215))+((r00*r20*x2207))+x2213+x2219+((x2210*x2216))+(((-1.0)*x2210*x2214))+(((-1.0)*x2207*x2219))+((cj5*x2208*x2215))+((cj5*x2208*x2214))+((x2217*x2218))+((r01*r21))+(((-1.0)*x2206*x2213))+(((-1.0)*r01*x2218))+((x2206*x2210*x2214))+((x2209*x2216))+(((-1.0)*r00*x2209*x2211)))),-1);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x2211)))),IkReal((((x2210*x2212))+((cj0*x2208))+((x2209*x2212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2220.value)))+(x2221.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2222=IKsin(j4);
IkReal x2223=IKcos(j4);
IkReal x2224=(cj5*cj6);
IkReal x2225=(r11*sj6);
IkReal x2226=(cj6*r20);
IkReal x2227=(cj5*sj6);
IkReal x2228=(cj6*r10);
IkReal x2229=(r01*sj6);
IkReal x2230=(r21*sj6);
IkReal x2231=(cj6*r00);
IkReal x2232=((1.0)*x2223);
IkReal x2233=((1.0)*x2222);
IkReal x2234=(sj5*x2233);
evalcond[0]=((((-1.0)*r21*x2224*x2233))+(((-1.0)*r22*x2234))+(((-1.0)*r20*x2227*x2233))+(((-1.0)*x2230*x2232))+((x2223*x2226)));
evalcond[1]=((((-1.0)*r22*sj5*x2232))+(((-1.0)*x2226*x2233))+((x2222*x2230))+(((-1.0)*r21*x2224*x2232))+(((-1.0)*r20*x2227*x2232)));
evalcond[2]=((((-1.0)*x2225*x2232))+cj0+(((-1.0)*r12*x2234))+(((-1.0)*r10*x2227*x2233))+((x2223*x2228))+(((-1.0)*r11*x2224*x2233)));
evalcond[3]=((((-1.0)*r01*x2224*x2232))+cj0+(((-1.0)*r02*sj5*x2232))+(((-1.0)*r00*x2227*x2232))+((x2222*x2229))+(((-1.0)*x2231*x2233)));
evalcond[4]=(sj0+((x2222*x2225))+(((-1.0)*x2228*x2233))+(((-1.0)*r10*x2227*x2232))+(((-1.0)*r12*sj5*x2232))+(((-1.0)*r11*x2224*x2232)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x2224*x2233))+(((-1.0)*r00*x2227*x2233))+(((-1.0)*r02*x2234))+(((-1.0)*x2229*x2232))+((x2223*x2231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2235=(cj0*sj6);
IkReal x2236=(cj0*cj6);
CheckValue<IkReal> x2237=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2237.valid){
continue;
}
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2235))+((r20*x2236)))),IkReal((((cj5*r20*x2235))+((cj5*r21*x2236))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2237.value)))+(x2238.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2239=IKsin(j4);
IkReal x2240=IKcos(j4);
IkReal x2241=(cj5*cj6);
IkReal x2242=(r11*sj6);
IkReal x2243=(cj6*r20);
IkReal x2244=(cj5*sj6);
IkReal x2245=(cj6*r10);
IkReal x2246=(r01*sj6);
IkReal x2247=(r21*sj6);
IkReal x2248=(cj6*r00);
IkReal x2249=((1.0)*x2240);
IkReal x2250=((1.0)*x2239);
IkReal x2251=(sj5*x2250);
evalcond[0]=((((-1.0)*r20*x2244*x2250))+(((-1.0)*r22*x2251))+(((-1.0)*x2247*x2249))+(((-1.0)*r21*x2241*x2250))+((x2240*x2243)));
evalcond[1]=((((-1.0)*r20*x2244*x2249))+(((-1.0)*r21*x2241*x2249))+(((-1.0)*x2243*x2250))+((x2239*x2247))+(((-1.0)*r22*sj5*x2249)));
evalcond[2]=((((-1.0)*r11*x2241*x2250))+cj0+(((-1.0)*r10*x2244*x2250))+(((-1.0)*r12*x2251))+(((-1.0)*x2242*x2249))+((x2240*x2245)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x2249))+(((-1.0)*x2248*x2250))+(((-1.0)*r01*x2241*x2249))+((x2239*x2246))+(((-1.0)*r00*x2244*x2249)));
evalcond[4]=(sj0+(((-1.0)*r11*x2241*x2249))+(((-1.0)*r10*x2244*x2249))+(((-1.0)*r12*sj5*x2249))+(((-1.0)*x2245*x2250))+((x2239*x2242)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x2251))+(((-1.0)*r01*x2241*x2250))+(((-1.0)*x2246*x2249))+((x2240*x2248))+(((-1.0)*r00*x2244*x2250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2252=((1.26697583102024)*cj5);
IkReal x2253=((0.0338501117053686)*cj5);
IkReal x2254=(r00*sj6);
IkReal x2255=(r10*sj6);
IkReal x2256=((1.26697583102024)*sj5);
IkReal x2257=(cj6*r11);
IkReal x2258=((0.0338501117053686)*sj5);
IkReal x2259=(cj6*r01);
if( IKabs(((((-1.0)*x2255*x2256))+(((-3.38501117053686)*py))+((r12*x2252))+((r12*x2258))+((x2253*x2257))+((x2253*x2255))+(((-1.0)*x2256*x2257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38501117053686)*px))+((x2253*x2259))+((x2253*x2254))+(((-1.0)*x2256*x2259))+((r02*x2258))+((r02*x2252))+(((-1.0)*x2254*x2256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2255*x2256))+(((-3.38501117053686)*py))+((r12*x2252))+((r12*x2258))+((x2253*x2257))+((x2253*x2255))+(((-1.0)*x2256*x2257))))+IKsqr(((((-3.38501117053686)*px))+((x2253*x2259))+((x2253*x2254))+(((-1.0)*x2256*x2259))+((r02*x2258))+((r02*x2252))+(((-1.0)*x2254*x2256))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x2255*x2256))+(((-3.38501117053686)*py))+((r12*x2252))+((r12*x2258))+((x2253*x2257))+((x2253*x2255))+(((-1.0)*x2256*x2257))), ((((-3.38501117053686)*px))+((x2253*x2259))+((x2253*x2254))+(((-1.0)*x2256*x2259))+((r02*x2258))+((r02*x2252))+(((-1.0)*x2254*x2256))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2260=((0.01)*cj5);
IkReal x2261=(cj6*r01);
IkReal x2262=(r00*sj6);
IkReal x2263=((0.01)*sj5);
IkReal x2264=((0.37429)*sj5);
IkReal x2265=((0.37429)*cj5);
IkReal x2266=(r10*sj6);
IkReal x2267=(cj6*r11);
evalcond[0]=(((x2260*x2261))+((x2260*x2262))+(((-1.0)*px))+(((-1.0)*x2261*x2264))+((r02*x2263))+((r02*x2265))+(((-0.29542)*(IKcos(j0))))+(((-1.0)*x2262*x2264)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+((x2260*x2266))+((x2260*x2267))+(((-1.0)*py))+((r12*x2265))+((r12*x2263))+(((-1.0)*x2264*x2266))+(((-1.0)*x2264*x2267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2268=(r20*sj0);
IkReal x2269=((1.0)*sj5);
IkReal x2270=(r21*sj0);
IkReal x2271=(((cj5*r12))+(((-1.0)*cj6*r11*x2269))+(((-1.0)*r10*sj6*x2269)));
j4eval[0]=x2271;
j4eval[1]=IKsign(x2271);
j4eval[2]=((IKabs((((cj5*sj6*x2268))+((cj5*cj6*x2270))+((r22*sj0*sj5)))))+(IKabs(((((-1.0)*sj6*x2270))+((cj6*x2268))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2272=cj5*cj5;
IkReal x2273=cj6*cj6;
IkReal x2274=(r00*r20);
IkReal x2275=(r02*r22);
IkReal x2276=(r22*sj5);
IkReal x2277=(cj6*r21);
IkReal x2278=(r00*sj6);
IkReal x2279=(r20*sj6);
IkReal x2280=(cj6*r01);
IkReal x2281=(cj0*cj5);
IkReal x2282=((1.0)*x2272);
IkReal x2283=(cj5*r02*sj5);
IkReal x2284=(r01*r21*x2273);
IkReal x2285=((((-1.0)*x2277*x2278))+((x2272*x2284))+((cj5*x2276*x2278))+((x2273*x2274))+x2275+((x2272*x2279*x2280))+((x2272*x2277*x2278))+(((-1.0)*x2284))+((r01*r21))+((x2277*x2283))+((x2279*x2283))+(((-1.0)*x2279*x2280))+((x2272*x2274))+((cj5*x2276*x2280))+(((-1.0)*x2275*x2282))+(((-1.0)*x2273*x2274*x2282)));
j4eval[0]=x2285;
j4eval[1]=IKsign(x2285);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x2277*x2281))+((cj0*x2276))+((x2279*x2281))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2286=cj6*cj6;
IkReal x2287=cj5*cj5;
IkReal x2288=(r12*sj5);
IkReal x2289=(r22*sj5);
IkReal x2290=((1.0)*r11);
IkReal x2291=(r20*sj0);
IkReal x2292=(r10*r20);
IkReal x2293=(cj5*sj6);
IkReal x2294=(cj6*r10);
IkReal x2295=(r12*r22);
IkReal x2296=(cj5*cj6*r21);
IkReal x2297=(r21*x2286);
IkReal x2298=(cj6*r20*sj6);
IkReal x2299=(r11*x2287);
IkReal x2300=((1.0)*r21*sj6);
IkReal x2301=((1.0)*x2287);
IkReal x2302=(x2295+((r21*sj6*x2287*x2294))+((r11*r21))+((cj5*cj6*r11*x2289))+(((-1.0)*x2295*x2301))+((x2287*x2292))+(((-1.0)*x2294*x2300))+((r20*x2288*x2293))+(((-1.0)*x2286*x2292*x2301))+((x2298*x2299))+((x2286*x2292))+(((-1.0)*x2290*x2297))+(((-1.0)*x2290*x2298))+((x2288*x2296))+((r10*x2289*x2293))+((x2297*x2299)));
j4eval[0]=x2302;
j4eval[1]=IKsign(x2302);
j4eval[2]=((IKabs((((sj0*x2296))+((x2291*x2293))+((sj0*x2289)))))+(IKabs(((((-1.0)*sj0*x2300))+((cj6*x2291))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2303=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2303;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x2303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2304=((1.0)*sj6);
IkReal x2305=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x2304))+((cj5*r02)));
j4eval[0]=x2305;
j4eval[1]=IKsign(x2305);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2304))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2306=cj6*cj6;
IkReal x2307=r01*r01;
IkReal x2308=cj5*cj5;
IkReal x2309=r00*r00;
IkReal x2310=r02*r02;
IkReal x2311=(cj6*r00);
IkReal x2312=(r02*sj5);
IkReal x2313=(cj5*cj6*r01);
IkReal x2314=((2.0)*r01*sj6);
IkReal x2315=(cj5*r00*sj6);
IkReal x2316=((1.0)*x2308);
IkReal x2317=(x2306*x2309);
IkReal x2318=(x2306*x2307);
IkReal x2319=((((-1.0)*x2318))+((x2308*x2309))+(((-1.0)*x2311*x2314))+x2317+x2310+x2307+((x2308*x2311*x2314))+((x2308*x2318))+(((-1.0)*x2310*x2316))+(((2.0)*x2312*x2313))+(((2.0)*x2312*x2315))+(((-1.0)*x2316*x2317)));
j4eval[0]=x2319;
j4eval[1]=((IKabs((x2315+x2312+x2313)))+(IKabs(((((-1.0)*r01*sj6))+x2311))));
j4eval[2]=IKsign(x2319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2320=cj6*cj6;
IkReal x2321=r01*r01;
IkReal x2322=cj5*cj5;
IkReal x2323=r00*r00;
IkReal x2324=r02*r02;
IkReal x2325=(cj6*r00);
IkReal x2326=((2.0)*r01);
IkReal x2327=(cj5*cj6);
IkReal x2328=(r02*sj5);
IkReal x2329=(cj5*r00*sj6);
IkReal x2330=(x2322*x2323);
IkReal x2331=(x2320*x2321);
CheckValue<IkReal> x2332 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x2325)),IkReal((x2329+x2328+((r01*x2327)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2332.valid){
continue;
}
CheckValue<IkReal> x2333=IKPowWithIntegerCheck(IKsign((x2330+x2321+x2324+(((-1.0)*sj6*x2325*x2326))+(((-1.0)*x2322*x2324))+((x2326*x2327*x2328))+(((-1.0)*x2320*x2330))+((x2322*x2331))+(((2.0)*x2328*x2329))+((x2320*x2323))+((sj6*x2322*x2325*x2326))+(((-1.0)*x2331)))),-1);
if(!x2333.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2332.value)+(((1.5707963267949)*(x2333.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2334=IKsin(j4);
IkReal x2335=IKcos(j4);
IkReal x2336=(cj5*cj6);
IkReal x2337=(r11*sj6);
IkReal x2338=(cj6*r20);
IkReal x2339=(cj6*r10);
IkReal x2340=(cj5*sj6);
IkReal x2341=(r21*sj6);
IkReal x2342=(cj6*r00);
IkReal x2343=(r01*sj6);
IkReal x2344=((1.0)*x2335);
IkReal x2345=((1.0)*x2334);
IkReal x2346=(sj5*x2345);
evalcond[0]=((((-1.0)*x2341*x2344))+(((-1.0)*r20*x2340*x2345))+((x2335*x2338))+(((-1.0)*r22*x2346))+(((-1.0)*r21*x2336*x2345)));
evalcond[1]=(((x2335*x2342))+(((-1.0)*r00*x2340*x2345))+(((-1.0)*r01*x2336*x2345))+(((-1.0)*r02*x2346))+(((-1.0)*x2343*x2344)));
evalcond[2]=((((-1.0)*r22*sj5*x2344))+((x2334*x2341))+(((-1.0)*r20*x2340*x2344))+(((-1.0)*x2338*x2345))+(((-1.0)*r21*x2336*x2344)));
evalcond[3]=((((-1.0)*r10*x2340*x2344))+(((-1.0)*x2339*x2345))+(((-1.0)*r12*sj5*x2344))+(((-1.0)*r11*x2336*x2344))+((x2334*x2337)));
evalcond[4]=((-1.0)+(((-1.0)*x2337*x2344))+(((-1.0)*r10*x2340*x2345))+(((-1.0)*r11*x2336*x2345))+((x2335*x2339))+(((-1.0)*r12*x2346)));
evalcond[5]=((1.0)+((x2334*x2343))+(((-1.0)*r02*sj5*x2344))+(((-1.0)*r00*x2340*x2344))+(((-1.0)*r01*x2336*x2344))+(((-1.0)*x2342*x2345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2347=((1.0)*sj6);
CheckValue<IkReal> x2348 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2347))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2348.valid){
continue;
}
CheckValue<IkReal> x2349=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x2347))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x2349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2348.value)+(((1.5707963267949)*(x2349.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2350=IKsin(j4);
IkReal x2351=IKcos(j4);
IkReal x2352=(cj5*cj6);
IkReal x2353=(r11*sj6);
IkReal x2354=(cj6*r20);
IkReal x2355=(cj6*r10);
IkReal x2356=(cj5*sj6);
IkReal x2357=(r21*sj6);
IkReal x2358=(cj6*r00);
IkReal x2359=(r01*sj6);
IkReal x2360=((1.0)*x2351);
IkReal x2361=((1.0)*x2350);
IkReal x2362=(sj5*x2361);
evalcond[0]=((((-1.0)*x2357*x2360))+(((-1.0)*r21*x2352*x2361))+((x2351*x2354))+(((-1.0)*r22*x2362))+(((-1.0)*r20*x2356*x2361)));
evalcond[1]=((((-1.0)*r01*x2352*x2361))+(((-1.0)*r00*x2356*x2361))+(((-1.0)*x2359*x2360))+((x2351*x2358))+(((-1.0)*r02*x2362)));
evalcond[2]=((((-1.0)*x2354*x2361))+((x2350*x2357))+(((-1.0)*r21*x2352*x2360))+(((-1.0)*r22*sj5*x2360))+(((-1.0)*r20*x2356*x2360)));
evalcond[3]=((((-1.0)*r10*x2356*x2360))+(((-1.0)*r11*x2352*x2360))+(((-1.0)*x2355*x2361))+((x2350*x2353))+(((-1.0)*r12*sj5*x2360)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x2356*x2361))+(((-1.0)*r11*x2352*x2361))+((x2351*x2355))+(((-1.0)*x2353*x2360))+(((-1.0)*r12*x2362)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x2360))+(((-1.0)*r01*x2352*x2360))+(((-1.0)*r00*x2356*x2360))+((x2350*x2359))+(((-1.0)*x2358*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2363=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2363.valid){
continue;
}
CheckValue<IkReal> x2364 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2364.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2363.value)))+(x2364.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2365=IKsin(j4);
IkReal x2366=IKcos(j4);
IkReal x2367=(cj5*cj6);
IkReal x2368=(r11*sj6);
IkReal x2369=(cj6*r20);
IkReal x2370=(cj6*r10);
IkReal x2371=(cj5*sj6);
IkReal x2372=(r21*sj6);
IkReal x2373=(cj6*r00);
IkReal x2374=(r01*sj6);
IkReal x2375=((1.0)*x2366);
IkReal x2376=((1.0)*x2365);
IkReal x2377=(sj5*x2376);
evalcond[0]=((((-1.0)*r20*x2371*x2376))+(((-1.0)*r21*x2367*x2376))+((x2366*x2369))+(((-1.0)*x2372*x2375))+(((-1.0)*r22*x2377)));
evalcond[1]=((((-1.0)*r02*x2377))+(((-1.0)*r01*x2367*x2376))+(((-1.0)*r00*x2371*x2376))+((x2366*x2373))+(((-1.0)*x2374*x2375)));
evalcond[2]=((((-1.0)*r20*x2371*x2375))+((x2365*x2372))+(((-1.0)*r21*x2367*x2375))+(((-1.0)*x2369*x2376))+(((-1.0)*r22*sj5*x2375)));
evalcond[3]=((((-1.0)*r11*x2367*x2375))+((x2365*x2368))+(((-1.0)*r10*x2371*x2375))+(((-1.0)*x2370*x2376))+(((-1.0)*r12*sj5*x2375)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x2367*x2376))+(((-1.0)*x2368*x2375))+((x2366*x2370))+(((-1.0)*r10*x2371*x2376))+(((-1.0)*r12*x2377)));
evalcond[5]=((1.0)+(((-1.0)*r01*x2367*x2375))+((x2365*x2374))+(((-1.0)*r00*x2371*x2375))+(((-1.0)*r02*sj5*x2375))+(((-1.0)*x2373*x2376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2378=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2378;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2378);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2379=((1.0)*sj5);
IkReal x2380=(((cj5*r22))+(((-1.0)*cj6*r21*x2379))+(((-1.0)*r20*sj6*x2379)));
j4eval[0]=x2380;
j4eval[1]=IKsign(x2380);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2381=cj6*cj6;
IkReal x2382=cj5*cj5;
IkReal x2383=r00*r00;
IkReal x2384=r01*r01;
IkReal x2385=r02*r02;
IkReal x2386=(cj6*r00);
IkReal x2387=(cj5*cj6*r01);
IkReal x2388=((2.0)*r02*sj5);
IkReal x2389=((1.0)*x2381);
IkReal x2390=((2.0)*r01*sj6);
IkReal x2391=(cj5*r00*sj6);
IkReal x2392=(x2382*x2383);
IkReal x2393=((((-1.0)*x2382*x2384*x2389))+((x2381*x2384))+((x2381*x2392))+(((-1.0)*x2382*x2386*x2390))+((x2382*x2385))+(((-1.0)*x2392))+(((-1.0)*x2385))+(((-1.0)*x2384))+(((-1.0)*x2383*x2389))+(((-1.0)*x2388*x2391))+(((-1.0)*x2387*x2388))+((x2386*x2390)));
j4eval[0]=x2393;
j4eval[1]=((IKabs((x2391+x2387+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x2386))));
j4eval[2]=IKsign(x2393);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2394=cj6*cj6;
IkReal x2395=cj5*cj5;
IkReal x2396=r00*r00;
IkReal x2397=r01*r01;
IkReal x2398=r02*r02;
IkReal x2399=(cj6*r00);
IkReal x2400=(cj5*cj6*r01);
IkReal x2401=((2.0)*r02*sj5);
IkReal x2402=((1.0)*x2394);
IkReal x2403=((2.0)*r01*sj6);
IkReal x2404=(cj5*r00*sj6);
IkReal x2405=(x2395*x2396);
CheckValue<IkReal> x2406 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x2399)),IkReal((x2404+x2400+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2406.valid){
continue;
}
CheckValue<IkReal> x2407=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2401*x2404))+(((-1.0)*x2405))+(((-1.0)*x2400*x2401))+((x2399*x2403))+(((-1.0)*x2395*x2399*x2403))+(((-1.0)*x2398))+(((-1.0)*x2397))+((x2394*x2397))+((x2394*x2405))+(((-1.0)*x2396*x2402))+(((-1.0)*x2395*x2397*x2402))+((x2395*x2398)))),-1);
if(!x2407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2406.value)+(((1.5707963267949)*(x2407.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2408=IKsin(j4);
IkReal x2409=IKcos(j4);
IkReal x2410=(cj5*cj6);
IkReal x2411=(r11*sj6);
IkReal x2412=(cj6*r20);
IkReal x2413=(cj6*r10);
IkReal x2414=(cj5*sj6);
IkReal x2415=(r21*sj6);
IkReal x2416=(cj6*r00);
IkReal x2417=(r01*sj6);
IkReal x2418=((1.0)*x2409);
IkReal x2419=((1.0)*x2408);
IkReal x2420=(sj5*x2419);
evalcond[0]=(((x2409*x2412))+(((-1.0)*x2415*x2418))+(((-1.0)*r22*x2420))+(((-1.0)*r21*x2410*x2419))+(((-1.0)*r20*x2414*x2419)));
evalcond[1]=((((-1.0)*r02*x2420))+(((-1.0)*x2417*x2418))+(((-1.0)*r01*x2410*x2419))+((x2409*x2416))+(((-1.0)*r00*x2414*x2419)));
evalcond[2]=(((x2408*x2415))+(((-1.0)*r22*sj5*x2418))+(((-1.0)*x2412*x2419))+(((-1.0)*r21*x2410*x2418))+(((-1.0)*r20*x2414*x2418)));
evalcond[3]=((((-1.0)*r11*x2410*x2418))+(((-1.0)*r10*x2414*x2418))+((x2408*x2411))+(((-1.0)*r12*sj5*x2418))+(((-1.0)*x2413*x2419)));
evalcond[4]=((1.0)+(((-1.0)*r11*x2410*x2419))+(((-1.0)*r10*x2414*x2419))+((x2409*x2413))+(((-1.0)*r12*x2420))+(((-1.0)*x2411*x2418)));
evalcond[5]=((-1.0)+((x2408*x2417))+(((-1.0)*x2416*x2419))+(((-1.0)*r01*x2410*x2418))+(((-1.0)*r02*sj5*x2418))+(((-1.0)*r00*x2414*x2418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2421=((1.0)*sj5);
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
CheckValue<IkReal> x2423=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x2421))+(((-1.0)*r20*sj6*x2421)))),-1);
if(!x2423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2422.value)+(((1.5707963267949)*(x2423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2424=IKsin(j4);
IkReal x2425=IKcos(j4);
IkReal x2426=(cj5*cj6);
IkReal x2427=(r11*sj6);
IkReal x2428=(cj6*r20);
IkReal x2429=(cj6*r10);
IkReal x2430=(cj5*sj6);
IkReal x2431=(r21*sj6);
IkReal x2432=(cj6*r00);
IkReal x2433=(r01*sj6);
IkReal x2434=((1.0)*x2425);
IkReal x2435=((1.0)*x2424);
IkReal x2436=(sj5*x2435);
evalcond[0]=((((-1.0)*r22*x2436))+(((-1.0)*r20*x2430*x2435))+(((-1.0)*x2431*x2434))+(((-1.0)*r21*x2426*x2435))+((x2425*x2428)));
evalcond[1]=((((-1.0)*x2433*x2434))+((x2425*x2432))+(((-1.0)*r00*x2430*x2435))+(((-1.0)*r02*x2436))+(((-1.0)*r01*x2426*x2435)));
evalcond[2]=(((x2424*x2431))+(((-1.0)*r20*x2430*x2434))+(((-1.0)*r22*sj5*x2434))+(((-1.0)*x2428*x2435))+(((-1.0)*r21*x2426*x2434)));
evalcond[3]=((((-1.0)*r11*x2426*x2434))+(((-1.0)*x2429*x2435))+(((-1.0)*r12*sj5*x2434))+((x2424*x2427))+(((-1.0)*r10*x2430*x2434)));
evalcond[4]=((1.0)+(((-1.0)*r11*x2426*x2435))+(((-1.0)*x2427*x2434))+((x2425*x2429))+(((-1.0)*r12*x2436))+(((-1.0)*r10*x2430*x2435)));
evalcond[5]=((-1.0)+((x2424*x2433))+(((-1.0)*r00*x2430*x2434))+(((-1.0)*x2432*x2435))+(((-1.0)*r02*sj5*x2434))+(((-1.0)*r01*x2426*x2434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2437 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2437.valid){
continue;
}
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2437.value)+(((1.5707963267949)*(x2438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2439=IKsin(j4);
IkReal x2440=IKcos(j4);
IkReal x2441=(cj5*cj6);
IkReal x2442=(r11*sj6);
IkReal x2443=(cj6*r20);
IkReal x2444=(cj6*r10);
IkReal x2445=(cj5*sj6);
IkReal x2446=(r21*sj6);
IkReal x2447=(cj6*r00);
IkReal x2448=(r01*sj6);
IkReal x2449=((1.0)*x2440);
IkReal x2450=((1.0)*x2439);
IkReal x2451=(sj5*x2450);
evalcond[0]=(((x2440*x2443))+(((-1.0)*r20*x2445*x2450))+(((-1.0)*x2446*x2449))+(((-1.0)*r22*x2451))+(((-1.0)*r21*x2441*x2450)));
evalcond[1]=((((-1.0)*r00*x2445*x2450))+((x2440*x2447))+(((-1.0)*x2448*x2449))+(((-1.0)*r01*x2441*x2450))+(((-1.0)*r02*x2451)));
evalcond[2]=((((-1.0)*r21*x2441*x2449))+(((-1.0)*r22*sj5*x2449))+(((-1.0)*r20*x2445*x2449))+((x2439*x2446))+(((-1.0)*x2443*x2450)));
evalcond[3]=((((-1.0)*r12*sj5*x2449))+(((-1.0)*x2444*x2450))+(((-1.0)*r11*x2441*x2449))+((x2439*x2442))+(((-1.0)*r10*x2445*x2449)));
evalcond[4]=((1.0)+((x2440*x2444))+(((-1.0)*r12*x2451))+(((-1.0)*r11*x2441*x2450))+(((-1.0)*x2442*x2449))+(((-1.0)*r10*x2445*x2450)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x2445*x2449))+(((-1.0)*r02*sj5*x2449))+((x2439*x2448))+(((-1.0)*x2447*x2450))+(((-1.0)*r01*x2441*x2449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2452=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2452;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2453=((1.0)*sj6);
IkReal x2454=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2453)));
j4eval[0]=x2454;
j4eval[1]=IKsign(x2454);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2453))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2455=r11*r11;
IkReal x2456=cj5*cj5;
IkReal x2457=cj6*cj6;
IkReal x2458=r10*r10;
IkReal x2459=r12*r12;
IkReal x2460=(r12*sj5);
IkReal x2461=(cj6*r10);
IkReal x2462=((1.0)*x2457);
IkReal x2463=(cj5*cj6*r11);
IkReal x2464=(cj5*r10*sj6);
IkReal x2465=((2.0)*r11*sj6);
IkReal x2466=(x2456*x2458);
IkReal x2467=(x2466+x2459+x2455+(((2.0)*x2460*x2463))+(((2.0)*x2460*x2464))+((x2457*x2458))+(((-1.0)*x2455*x2462))+(((-1.0)*x2456*x2459))+((x2455*x2456*x2457))+((x2456*x2461*x2465))+(((-1.0)*x2461*x2465))+(((-1.0)*x2462*x2466)));
j4eval[0]=x2467;
j4eval[1]=IKsign(x2467);
j4eval[2]=((IKabs((x2461+(((-1.0)*r11*sj6)))))+(IKabs((x2464+x2460+x2463))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2468=r11*r11;
IkReal x2469=cj5*cj5;
IkReal x2470=cj6*cj6;
IkReal x2471=r10*r10;
IkReal x2472=r12*r12;
IkReal x2473=(r10*sj6);
IkReal x2474=(r12*sj5);
IkReal x2475=((1.0)*x2470);
IkReal x2476=(cj5*cj6*r11);
IkReal x2477=((2.0)*cj6*r11);
IkReal x2478=(x2469*x2471);
CheckValue<IkReal> x2479 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x2476+x2474+((cj5*x2473)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2479.valid){
continue;
}
CheckValue<IkReal> x2480=IKPowWithIntegerCheck(IKsign((x2468+x2472+x2478+(((2.0)*cj5*x2473*x2474))+((x2468*x2469*x2470))+(((-1.0)*x2473*x2477))+(((-1.0)*x2469*x2472))+(((-1.0)*x2468*x2475))+(((-1.0)*x2475*x2478))+(((2.0)*x2474*x2476))+((x2469*x2473*x2477))+((x2470*x2471)))),-1);
if(!x2480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2479.value)+(((1.5707963267949)*(x2480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2481=IKsin(j4);
IkReal x2482=IKcos(j4);
IkReal x2483=(cj5*cj6);
IkReal x2484=(r11*sj6);
IkReal x2485=(cj6*r20);
IkReal x2486=(cj6*r10);
IkReal x2487=(cj5*sj6);
IkReal x2488=(r01*sj6);
IkReal x2489=(r21*sj6);
IkReal x2490=(cj6*r00);
IkReal x2491=((1.0)*x2482);
IkReal x2492=((1.0)*x2481);
IkReal x2493=(sj5*x2492);
evalcond[0]=(((x2482*x2485))+(((-1.0)*r20*x2487*x2492))+(((-1.0)*x2489*x2491))+(((-1.0)*r21*x2483*x2492))+(((-1.0)*r22*x2493)));
evalcond[1]=(((x2482*x2486))+(((-1.0)*r11*x2483*x2492))+(((-1.0)*r10*x2487*x2492))+(((-1.0)*x2484*x2491))+(((-1.0)*r12*x2493)));
evalcond[2]=((((-1.0)*r22*sj5*x2491))+((x2481*x2489))+(((-1.0)*r20*x2487*x2491))+(((-1.0)*x2485*x2492))+(((-1.0)*r21*x2483*x2491)));
evalcond[3]=((((-1.0)*r02*sj5*x2491))+(((-1.0)*x2490*x2492))+(((-1.0)*r00*x2487*x2491))+((x2481*x2488))+(((-1.0)*r01*x2483*x2491)));
evalcond[4]=((1.0)+((x2482*x2490))+(((-1.0)*r00*x2487*x2492))+(((-1.0)*r01*x2483*x2492))+(((-1.0)*r02*x2493))+(((-1.0)*x2488*x2491)));
evalcond[5]=((1.0)+(((-1.0)*r11*x2483*x2491))+((x2481*x2484))+(((-1.0)*r10*x2487*x2491))+(((-1.0)*r12*sj5*x2491))+(((-1.0)*x2486*x2492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2494=((1.0)*sj6);
CheckValue<IkReal> x2495 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2494))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2495.valid){
continue;
}
CheckValue<IkReal> x2496=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2494)))),-1);
if(!x2496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2495.value)+(((1.5707963267949)*(x2496.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2497=IKsin(j4);
IkReal x2498=IKcos(j4);
IkReal x2499=(cj5*cj6);
IkReal x2500=(r11*sj6);
IkReal x2501=(cj6*r20);
IkReal x2502=(cj6*r10);
IkReal x2503=(cj5*sj6);
IkReal x2504=(r01*sj6);
IkReal x2505=(r21*sj6);
IkReal x2506=(cj6*r00);
IkReal x2507=((1.0)*x2498);
IkReal x2508=((1.0)*x2497);
IkReal x2509=(sj5*x2508);
evalcond[0]=((((-1.0)*r21*x2499*x2508))+(((-1.0)*r20*x2503*x2508))+(((-1.0)*r22*x2509))+(((-1.0)*x2505*x2507))+((x2498*x2501)));
evalcond[1]=((((-1.0)*r10*x2503*x2508))+(((-1.0)*r12*x2509))+(((-1.0)*r11*x2499*x2508))+(((-1.0)*x2500*x2507))+((x2498*x2502)));
evalcond[2]=((((-1.0)*r21*x2499*x2507))+((x2497*x2505))+(((-1.0)*r20*x2503*x2507))+(((-1.0)*x2501*x2508))+(((-1.0)*r22*sj5*x2507)));
evalcond[3]=(((x2497*x2504))+(((-1.0)*r01*x2499*x2507))+(((-1.0)*r02*sj5*x2507))+(((-1.0)*r00*x2503*x2507))+(((-1.0)*x2506*x2508)));
evalcond[4]=((1.0)+(((-1.0)*r02*x2509))+(((-1.0)*r01*x2499*x2508))+(((-1.0)*x2504*x2507))+(((-1.0)*r00*x2503*x2508))+((x2498*x2506)));
evalcond[5]=((1.0)+(((-1.0)*r10*x2503*x2507))+((x2497*x2500))+(((-1.0)*x2502*x2508))+(((-1.0)*r12*sj5*x2507))+(((-1.0)*r11*x2499*x2507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2510=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2510.valid){
continue;
}
CheckValue<IkReal> x2511 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2510.value)))+(x2511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2512=IKsin(j4);
IkReal x2513=IKcos(j4);
IkReal x2514=(cj5*cj6);
IkReal x2515=(r11*sj6);
IkReal x2516=(cj6*r20);
IkReal x2517=(cj6*r10);
IkReal x2518=(cj5*sj6);
IkReal x2519=(r01*sj6);
IkReal x2520=(r21*sj6);
IkReal x2521=(cj6*r00);
IkReal x2522=((1.0)*x2513);
IkReal x2523=((1.0)*x2512);
IkReal x2524=(sj5*x2523);
evalcond[0]=((((-1.0)*x2520*x2522))+(((-1.0)*r21*x2514*x2523))+((x2513*x2516))+(((-1.0)*r20*x2518*x2523))+(((-1.0)*r22*x2524)));
evalcond[1]=((((-1.0)*r12*x2524))+(((-1.0)*x2515*x2522))+(((-1.0)*r11*x2514*x2523))+(((-1.0)*r10*x2518*x2523))+((x2513*x2517)));
evalcond[2]=((((-1.0)*r21*x2514*x2522))+(((-1.0)*x2516*x2523))+((x2512*x2520))+(((-1.0)*r20*x2518*x2522))+(((-1.0)*r22*sj5*x2522)));
evalcond[3]=((((-1.0)*r02*sj5*x2522))+((x2512*x2519))+(((-1.0)*r01*x2514*x2522))+(((-1.0)*r00*x2518*x2522))+(((-1.0)*x2521*x2523)));
evalcond[4]=((1.0)+(((-1.0)*r01*x2514*x2523))+(((-1.0)*r02*x2524))+(((-1.0)*x2519*x2522))+(((-1.0)*r00*x2518*x2523))+((x2513*x2521)));
evalcond[5]=((1.0)+((x2512*x2515))+(((-1.0)*x2517*x2523))+(((-1.0)*r11*x2514*x2522))+(((-1.0)*r10*x2518*x2522))+(((-1.0)*r12*sj5*x2522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2525=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2525;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2526=((1.0)*sj5);
IkReal x2527=(((cj5*r22))+(((-1.0)*r20*sj6*x2526))+(((-1.0)*cj6*r21*x2526)));
j4eval[0]=x2527;
j4eval[1]=IKsign(x2527);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2528=cj6*cj6;
IkReal x2529=cj5*cj5;
IkReal x2530=r10*r10;
IkReal x2531=r11*r11;
IkReal x2532=r12*r12;
IkReal x2533=(r10*sj6);
IkReal x2534=(r12*sj5);
IkReal x2535=((2.0)*cj6*r11);
IkReal x2536=((1.0)*x2530);
IkReal x2537=(x2528*x2531);
IkReal x2538=((((-1.0)*x2528*x2536))+x2537+(((-1.0)*x2529*x2537))+(((-2.0)*cj5*x2533*x2534))+((x2528*x2529*x2530))+(((-1.0)*cj5*x2534*x2535))+((x2533*x2535))+(((-1.0)*x2532))+(((-1.0)*x2531))+((x2529*x2532))+(((-1.0)*x2529*x2533*x2535))+(((-1.0)*x2529*x2536)));
j4eval[0]=x2538;
j4eval[1]=((IKabs((((cj5*x2533))+x2534+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2539=cj6*cj6;
IkReal x2540=cj5*cj5;
IkReal x2541=r10*r10;
IkReal x2542=r11*r11;
IkReal x2543=r12*r12;
IkReal x2544=(r10*sj6);
IkReal x2545=(r12*sj5);
IkReal x2546=((2.0)*cj6*r11);
IkReal x2547=(x2539*x2542);
IkReal x2548=(x2540*x2541);
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(IKsign((x2547+(((-2.0)*cj5*x2544*x2545))+(((-1.0)*x2539*x2541))+((x2539*x2548))+(((-1.0)*x2540*x2544*x2546))+(((-1.0)*x2543))+(((-1.0)*x2542))+(((-1.0)*x2548))+(((-1.0)*cj5*x2545*x2546))+((x2540*x2543))+(((-1.0)*x2540*x2547))+((x2544*x2546)))),-1);
if(!x2549.valid){
continue;
}
CheckValue<IkReal> x2550 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x2545+((cj5*x2544))+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2549.value)))+(x2550.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2551=IKsin(j4);
IkReal x2552=IKcos(j4);
IkReal x2553=(cj5*cj6);
IkReal x2554=(r11*sj6);
IkReal x2555=(cj6*r20);
IkReal x2556=(cj6*r10);
IkReal x2557=(cj5*sj6);
IkReal x2558=(r01*sj6);
IkReal x2559=(r21*sj6);
IkReal x2560=(cj6*r00);
IkReal x2561=((1.0)*x2552);
IkReal x2562=((1.0)*x2551);
IkReal x2563=(sj5*x2562);
evalcond[0]=((((-1.0)*r22*x2563))+(((-1.0)*r20*x2557*x2562))+(((-1.0)*x2559*x2561))+((x2552*x2555))+(((-1.0)*r21*x2553*x2562)));
evalcond[1]=((((-1.0)*r10*x2557*x2562))+(((-1.0)*r11*x2553*x2562))+(((-1.0)*x2554*x2561))+((x2552*x2556))+(((-1.0)*r12*x2563)));
evalcond[2]=((((-1.0)*r20*x2557*x2561))+(((-1.0)*x2555*x2562))+((x2551*x2559))+(((-1.0)*r22*sj5*x2561))+(((-1.0)*r21*x2553*x2561)));
evalcond[3]=((((-1.0)*r00*x2557*x2561))+((x2551*x2558))+(((-1.0)*r01*x2553*x2561))+(((-1.0)*r02*sj5*x2561))+(((-1.0)*x2560*x2562)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x2557*x2562))+(((-1.0)*r01*x2553*x2562))+(((-1.0)*r02*x2563))+(((-1.0)*x2558*x2561))+((x2552*x2560)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x2557*x2561))+((x2551*x2554))+(((-1.0)*x2556*x2562))+(((-1.0)*r11*x2553*x2561))+(((-1.0)*r12*sj5*x2561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2564=((1.0)*sj5);
CheckValue<IkReal> x2565=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21*x2564))+((cj5*r22))+(((-1.0)*r20*sj6*x2564)))),-1);
if(!x2565.valid){
continue;
}
CheckValue<IkReal> x2566 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2565.value)))+(x2566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2567=IKsin(j4);
IkReal x2568=IKcos(j4);
IkReal x2569=(cj5*cj6);
IkReal x2570=(r11*sj6);
IkReal x2571=(cj6*r20);
IkReal x2572=(cj6*r10);
IkReal x2573=(cj5*sj6);
IkReal x2574=(r01*sj6);
IkReal x2575=(r21*sj6);
IkReal x2576=(cj6*r00);
IkReal x2577=((1.0)*x2568);
IkReal x2578=((1.0)*x2567);
IkReal x2579=(sj5*x2578);
evalcond[0]=((((-1.0)*x2575*x2577))+(((-1.0)*r21*x2569*x2578))+(((-1.0)*r20*x2573*x2578))+((x2568*x2571))+(((-1.0)*r22*x2579)));
evalcond[1]=((((-1.0)*r12*x2579))+((x2568*x2572))+(((-1.0)*r11*x2569*x2578))+(((-1.0)*x2570*x2577))+(((-1.0)*r10*x2573*x2578)));
evalcond[2]=((((-1.0)*r21*x2569*x2577))+(((-1.0)*r22*sj5*x2577))+(((-1.0)*r20*x2573*x2577))+(((-1.0)*x2571*x2578))+((x2567*x2575)));
evalcond[3]=(((x2567*x2574))+(((-1.0)*r01*x2569*x2577))+(((-1.0)*r00*x2573*x2577))+(((-1.0)*r02*sj5*x2577))+(((-1.0)*x2576*x2578)));
evalcond[4]=((-1.0)+((x2568*x2576))+(((-1.0)*r01*x2569*x2578))+(((-1.0)*r02*x2579))+(((-1.0)*r00*x2573*x2578))+(((-1.0)*x2574*x2577)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x2577))+((x2567*x2570))+(((-1.0)*r11*x2569*x2577))+(((-1.0)*r10*x2573*x2577))+(((-1.0)*x2572*x2578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2580 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2580.valid){
continue;
}
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x2581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2580.value)+(((1.5707963267949)*(x2581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2582=IKsin(j4);
IkReal x2583=IKcos(j4);
IkReal x2584=(cj5*cj6);
IkReal x2585=(r11*sj6);
IkReal x2586=(cj6*r20);
IkReal x2587=(cj6*r10);
IkReal x2588=(cj5*sj6);
IkReal x2589=(r01*sj6);
IkReal x2590=(r21*sj6);
IkReal x2591=(cj6*r00);
IkReal x2592=((1.0)*x2583);
IkReal x2593=((1.0)*x2582);
IkReal x2594=(sj5*x2593);
evalcond[0]=((((-1.0)*r21*x2584*x2593))+(((-1.0)*r22*x2594))+(((-1.0)*x2590*x2592))+((x2583*x2586))+(((-1.0)*r20*x2588*x2593)));
evalcond[1]=((((-1.0)*x2585*x2592))+(((-1.0)*r10*x2588*x2593))+(((-1.0)*r12*x2594))+(((-1.0)*r11*x2584*x2593))+((x2583*x2587)));
evalcond[2]=((((-1.0)*r21*x2584*x2592))+(((-1.0)*r22*sj5*x2592))+(((-1.0)*x2586*x2593))+((x2582*x2590))+(((-1.0)*r20*x2588*x2592)));
evalcond[3]=((((-1.0)*r02*sj5*x2592))+(((-1.0)*x2591*x2593))+(((-1.0)*r01*x2584*x2592))+((x2582*x2589))+(((-1.0)*r00*x2588*x2592)));
evalcond[4]=((-1.0)+((x2583*x2591))+(((-1.0)*r02*x2594))+(((-1.0)*x2589*x2592))+(((-1.0)*r01*x2584*x2593))+(((-1.0)*r00*x2588*x2593)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x2588*x2592))+(((-1.0)*x2587*x2593))+(((-1.0)*r12*sj5*x2592))+((x2582*x2585))+(((-1.0)*r11*x2584*x2592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2595=cj6*cj6;
IkReal x2596=cj5*cj5;
IkReal x2597=((1.0)*r11);
IkReal x2598=(cj5*sj0);
IkReal x2599=(cj6*r21);
IkReal x2600=(r22*sj5);
IkReal x2601=(r20*sj6);
IkReal x2602=(r12*r22);
IkReal x2603=((1.0)*sj6);
IkReal x2604=(r21*x2595);
IkReal x2605=(r10*x2596);
IkReal x2606=(r11*x2596);
IkReal x2607=(r20*x2595);
IkReal x2608=(cj5*r12*sj5);
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(IKsign((((sj6*x2599*x2605))+(((-1.0)*x2605*x2607))+(((-1.0)*x2597*x2604))+((r11*r21))+((r20*x2605))+(((-1.0)*cj6*x2597*x2601))+(((-1.0)*x2596*x2602))+((x2601*x2608))+((r10*x2607))+((x2599*x2608))+((cj5*cj6*r11*x2600))+((cj6*x2601*x2606))+((x2604*x2606))+(((-1.0)*r10*x2599*x2603))+((cj5*r10*sj6*x2600))+x2602)),-1);
if(!x2609.valid){
continue;
}
CheckValue<IkReal> x2610 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x2603))+((cj6*r20*sj0)))),IkReal((((x2598*x2599))+((x2598*x2601))+((sj0*x2600)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2610.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2609.value)))+(x2610.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2611=IKsin(j4);
IkReal x2612=IKcos(j4);
IkReal x2613=(cj5*cj6);
IkReal x2614=(r11*sj6);
IkReal x2615=(cj6*r20);
IkReal x2616=(cj6*r10);
IkReal x2617=(cj5*sj6);
IkReal x2618=(r01*sj6);
IkReal x2619=(r21*sj6);
IkReal x2620=(cj6*r00);
IkReal x2621=((1.0)*x2612);
IkReal x2622=((1.0)*x2611);
IkReal x2623=(sj5*x2622);
evalcond[0]=((((-1.0)*r20*x2617*x2622))+(((-1.0)*x2619*x2621))+(((-1.0)*r21*x2613*x2622))+(((-1.0)*r22*x2623))+((x2612*x2615)));
evalcond[1]=((((-1.0)*r20*x2617*x2621))+(((-1.0)*r22*sj5*x2621))+(((-1.0)*r21*x2613*x2621))+((x2611*x2619))+(((-1.0)*x2615*x2622)));
evalcond[2]=(sj0+(((-1.0)*r01*x2613*x2622))+(((-1.0)*x2618*x2621))+(((-1.0)*r00*x2617*x2622))+(((-1.0)*r02*x2623))+((x2612*x2620)));
evalcond[3]=((((-1.0)*r01*x2613*x2621))+cj0+(((-1.0)*r00*x2617*x2621))+(((-1.0)*r02*sj5*x2621))+((x2611*x2618))+(((-1.0)*x2620*x2622)));
evalcond[4]=((((-1.0)*r12*sj5*x2621))+sj0+(((-1.0)*r10*x2617*x2621))+((x2611*x2614))+(((-1.0)*r11*x2613*x2621))+(((-1.0)*x2616*x2622)));
evalcond[5]=((((-1.0)*r12*x2623))+(((-1.0)*r10*x2617*x2622))+((x2612*x2616))+(((-1.0)*x2614*x2621))+(((-1.0)*r11*x2613*x2622))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2624=cj5*cj5;
IkReal x2625=cj6*cj6;
IkReal x2626=(r22*sj5);
IkReal x2627=(cj6*r21);
IkReal x2628=(r20*sj6);
IkReal x2629=((1.0)*sj6);
IkReal x2630=(cj0*cj5);
IkReal x2631=(r02*r22);
IkReal x2632=(cj6*r01);
IkReal x2633=(r00*sj6);
IkReal x2634=(cj5*r02*sj5);
IkReal x2635=(r01*x2624);
IkReal x2636=(r21*x2625);
IkReal x2637=(r00*r20*x2624);
CheckValue<IkReal> x2638=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2624*x2631))+((r01*r21))+((x2624*x2627*x2633))+((x2628*x2634))+(((-1.0)*r00*x2627*x2629))+((x2624*x2628*x2632))+((x2635*x2636))+(((-1.0)*x2628*x2632))+((cj5*x2626*x2632))+((cj5*x2626*x2633))+((r00*r20*x2625))+(((-1.0)*r01*x2636))+((x2627*x2634))+(((-1.0)*x2625*x2637))+x2637+x2631)),-1);
if(!x2638.valid){
continue;
}
CheckValue<IkReal> x2639 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x2629)))),IkReal((((x2628*x2630))+((x2627*x2630))+((cj0*x2626)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2638.value)))+(x2639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2640=IKsin(j4);
IkReal x2641=IKcos(j4);
IkReal x2642=(cj5*cj6);
IkReal x2643=(r11*sj6);
IkReal x2644=(cj6*r20);
IkReal x2645=(cj6*r10);
IkReal x2646=(cj5*sj6);
IkReal x2647=(r01*sj6);
IkReal x2648=(r21*sj6);
IkReal x2649=(cj6*r00);
IkReal x2650=((1.0)*x2641);
IkReal x2651=((1.0)*x2640);
IkReal x2652=(sj5*x2651);
evalcond[0]=((((-1.0)*r22*x2652))+(((-1.0)*r20*x2646*x2651))+(((-1.0)*r21*x2642*x2651))+(((-1.0)*x2648*x2650))+((x2641*x2644)));
evalcond[1]=((((-1.0)*x2644*x2651))+(((-1.0)*r20*x2646*x2650))+(((-1.0)*r21*x2642*x2650))+(((-1.0)*r22*sj5*x2650))+((x2640*x2648)));
evalcond[2]=(sj0+(((-1.0)*r01*x2642*x2651))+(((-1.0)*x2647*x2650))+(((-1.0)*r00*x2646*x2651))+(((-1.0)*r02*x2652))+((x2641*x2649)));
evalcond[3]=((((-1.0)*r02*sj5*x2650))+cj0+(((-1.0)*r01*x2642*x2650))+(((-1.0)*r00*x2646*x2650))+(((-1.0)*x2649*x2651))+((x2640*x2647)));
evalcond[4]=(sj0+(((-1.0)*x2645*x2651))+(((-1.0)*r10*x2646*x2650))+(((-1.0)*r12*sj5*x2650))+((x2640*x2643))+(((-1.0)*r11*x2642*x2650)));
evalcond[5]=((((-1.0)*r12*x2652))+(((-1.0)*r10*x2646*x2651))+(((-1.0)*x2643*x2650))+(((-1.0)*cj0))+((x2641*x2645))+(((-1.0)*r11*x2642*x2651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2653=(cj5*sj0);
IkReal x2654=((1.0)*sj5);
CheckValue<IkReal> x2655=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x2654))+(((-1.0)*r10*sj6*x2654)))),-1);
if(!x2655.valid){
continue;
}
CheckValue<IkReal> x2656 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r20*sj6*x2653))+((r22*sj0*sj5))+((cj6*r21*x2653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2655.value)))+(x2656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2657=IKsin(j4);
IkReal x2658=IKcos(j4);
IkReal x2659=(cj5*cj6);
IkReal x2660=(r11*sj6);
IkReal x2661=(cj6*r20);
IkReal x2662=(cj6*r10);
IkReal x2663=(cj5*sj6);
IkReal x2664=(r01*sj6);
IkReal x2665=(r21*sj6);
IkReal x2666=(cj6*r00);
IkReal x2667=((1.0)*x2658);
IkReal x2668=((1.0)*x2657);
IkReal x2669=(sj5*x2668);
evalcond[0]=(((x2658*x2661))+(((-1.0)*r20*x2663*x2668))+(((-1.0)*x2665*x2667))+(((-1.0)*r22*x2669))+(((-1.0)*r21*x2659*x2668)));
evalcond[1]=(((x2657*x2665))+(((-1.0)*r20*x2663*x2667))+(((-1.0)*r22*sj5*x2667))+(((-1.0)*x2661*x2668))+(((-1.0)*r21*x2659*x2667)));
evalcond[2]=((((-1.0)*r01*x2659*x2668))+sj0+((x2658*x2666))+(((-1.0)*r00*x2663*x2668))+(((-1.0)*r02*x2669))+(((-1.0)*x2664*x2667)));
evalcond[3]=((((-1.0)*r01*x2659*x2667))+((x2657*x2664))+cj0+(((-1.0)*r00*x2663*x2667))+(((-1.0)*x2666*x2668))+(((-1.0)*r02*sj5*x2667)));
evalcond[4]=(((x2657*x2660))+sj0+(((-1.0)*x2662*x2668))+(((-1.0)*r12*sj5*x2667))+(((-1.0)*r10*x2663*x2667))+(((-1.0)*r11*x2659*x2667)));
evalcond[5]=((((-1.0)*r12*x2669))+(((-1.0)*x2660*x2667))+((x2658*x2662))+(((-1.0)*r10*x2663*x2668))+(((-1.0)*cj0))+(((-1.0)*r11*x2659*x2668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2670=(cj6*sj5);
IkReal x2671=(sj5*sj6);
IkReal x2672=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x2672))+((r10*x2671))+((r11*x2670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x2672))+((r00*x2671))+((r01*x2670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x2672))+((r10*x2671))+((r11*x2670))))+IKsqr(((((-1.0)*r02*x2672))+((r00*x2671))+((r01*x2670))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x2672))+((r10*x2671))+((r11*x2670))), ((((-1.0)*r02*x2672))+((r00*x2671))+((r01*x2670))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2673=(cj6*sj5);
IkReal x2674=(sj5*sj6);
IkReal x2675=((1.0)*cj5);
evalcond[0]=((((-1.0)*r12*x2675))+((r10*x2674))+(((-1.0)*(IKsin(j0))))+((r11*x2673)));
evalcond[1]=((((-1.0)*r02*x2675))+(((-1.0)*(IKcos(j0))))+((r00*x2674))+((r01*x2673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2676=((1.0)*cj5);
IkReal x2677=((1.0)*sj5);
IkReal x2678=(((cj5*r12))+(((-1.0)*r10*sj6*x2677))+(((-1.0)*cj6*r11*x2677)));
j4eval[0]=x2678;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs(((((-1.0)*cj6*r01*x2676))+(((-1.0)*r02*x2677))+(((-1.0)*r00*sj6*x2676))))));
j4eval[2]=IKsign(x2678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2679=(r20*sj0);
IkReal x2680=((1.0)*sj5);
IkReal x2681=(r21*sj0);
IkReal x2682=(((cj5*r12))+(((-1.0)*r10*sj6*x2680))+(((-1.0)*cj6*r11*x2680)));
j4eval[0]=x2682;
j4eval[1]=IKsign(x2682);
j4eval[2]=((IKabs((((cj5*cj6*x2681))+((r22*sj0*sj5))+((cj5*sj6*x2679)))))+(IKabs(((((-1.0)*sj6*x2681))+((cj6*x2679))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2683=cj5*cj5;
IkReal x2684=cj6*cj6;
IkReal x2685=r22*r22;
IkReal x2686=r21*r21;
IkReal x2687=r20*r20;
IkReal x2688=(r22*sj5);
IkReal x2689=(r21*sj6);
IkReal x2690=(cj6*r20);
IkReal x2691=(cj5*r20*sj6);
IkReal x2692=((1.0)*x2683);
IkReal x2693=(cj5*cj6*r21);
IkReal x2694=(x2684*x2686);
IkReal x2695=(x2684*x2687);
IkReal x2696=((((-1.0)*x2692*x2694))+(((2.0)*x2689*x2690))+(((-2.0)*x2683*x2689*x2690))+(((-2.0)*x2688*x2691))+(((-2.0)*x2688*x2693))+((x2683*x2685))+((x2683*x2695))+(((-1.0)*x2685))+(((-1.0)*x2686))+(((-1.0)*x2687*x2692))+(((-1.0)*x2695))+x2694);
j4eval[0]=x2696;
j4eval[1]=IKsign(x2696);
j4eval[2]=((IKabs((x2688+x2693+x2691)))+(IKabs(((((-1.0)*x2689))+x2690))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2697=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2697;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x2697);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2698=((1.0)*sj6);
IkReal x2699=((((-1.0)*r00*sj5*x2698))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x2699;
j4eval[1]=IKsign(x2699);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x2698))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2700=cj5*cj5;
IkReal x2701=cj6*cj6;
IkReal x2702=r22*r22;
IkReal x2703=r21*r21;
IkReal x2704=r20*r20;
IkReal x2705=(r22*sj5);
IkReal x2706=(r21*sj6);
IkReal x2707=(cj6*r20);
IkReal x2708=(cj5*r20*sj6);
IkReal x2709=((1.0)*x2700);
IkReal x2710=(cj5*cj6*r21);
IkReal x2711=(x2701*x2703);
IkReal x2712=(x2701*x2704);
IkReal x2713=(x2711+(((-1.0)*x2712))+(((-2.0)*x2705*x2708))+((x2700*x2712))+(((-1.0)*x2704*x2709))+(((-1.0)*x2709*x2711))+(((-2.0)*x2705*x2710))+((x2700*x2702))+(((-2.0)*x2700*x2706*x2707))+(((2.0)*x2706*x2707))+(((-1.0)*x2703))+(((-1.0)*x2702)));
j4eval[0]=x2713;
j4eval[1]=IKsign(x2713);
j4eval[2]=((IKabs((x2710+x2708+x2705)))+(IKabs((x2707+(((-1.0)*x2706))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2714=cj5*cj5;
IkReal x2715=cj6*cj6;
IkReal x2716=r22*r22;
IkReal x2717=r21*r21;
IkReal x2718=r20*r20;
IkReal x2719=(r21*sj6);
IkReal x2720=(cj6*r20);
IkReal x2721=(cj5*cj6*r21);
IkReal x2722=((1.0)*x2714);
IkReal x2723=(cj5*r20*sj6);
IkReal x2724=((2.0)*r22*sj5);
IkReal x2725=(x2715*x2717);
IkReal x2726=(x2715*x2718);
CheckValue<IkReal> x2727 = IKatan2WithCheck(IkReal((x2720+(((-1.0)*x2719)))),IkReal((x2723+x2721+((r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2727.valid){
continue;
}
CheckValue<IkReal> x2728=IKPowWithIntegerCheck(IKsign((x2725+(((-1.0)*x2717))+(((-1.0)*x2716))+(((-1.0)*x2718*x2722))+((x2714*x2726))+(((-2.0)*x2714*x2719*x2720))+(((-1.0)*x2726))+(((-1.0)*x2722*x2725))+(((-1.0)*x2721*x2724))+(((-1.0)*x2723*x2724))+(((2.0)*x2719*x2720))+((x2714*x2716)))),-1);
if(!x2728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2727.value)+(((1.5707963267949)*(x2728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2729=IKsin(j4);
IkReal x2730=IKcos(j4);
IkReal x2731=(cj5*cj6);
IkReal x2732=(r11*sj6);
IkReal x2733=(cj6*r20);
IkReal x2734=(cj5*sj6);
IkReal x2735=(cj6*r10);
IkReal x2736=(r01*sj6);
IkReal x2737=(r21*sj6);
IkReal x2738=(cj6*r00);
IkReal x2739=((1.0)*x2730);
IkReal x2740=((1.0)*x2729);
IkReal x2741=(sj5*x2740);
evalcond[0]=((((-1.0)*x2737*x2739))+(((-1.0)*r21*x2731*x2740))+((x2730*x2733))+(((-1.0)*r20*x2734*x2740))+(((-1.0)*r22*x2741)));
evalcond[1]=((((-1.0)*r01*x2731*x2740))+(((-1.0)*x2736*x2739))+((x2730*x2738))+(((-1.0)*r00*x2734*x2740))+(((-1.0)*r02*x2741)));
evalcond[2]=((((-1.0)*r01*x2731*x2739))+(((-1.0)*r00*x2734*x2739))+(((-1.0)*x2738*x2740))+(((-1.0)*r02*sj5*x2739))+((x2729*x2736)));
evalcond[3]=((((-1.0)*r12*sj5*x2739))+(((-1.0)*r10*x2734*x2739))+(((-1.0)*r11*x2731*x2739))+(((-1.0)*x2735*x2740))+((x2729*x2732)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x2731*x2740))+(((-1.0)*r10*x2734*x2740))+((x2730*x2735))+(((-1.0)*r12*x2741))+(((-1.0)*x2732*x2739)));
evalcond[5]=((-1.0)+(((-1.0)*r20*x2734*x2739))+(((-1.0)*r21*x2731*x2739))+(((-1.0)*r22*sj5*x2739))+(((-1.0)*x2733*x2740))+((x2729*x2737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2742=((1.0)*sj6);
CheckValue<IkReal> x2743 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x2742)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2743.valid){
continue;
}
CheckValue<IkReal> x2744=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x2742))+((cj5*r02)))),-1);
if(!x2744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2743.value)+(((1.5707963267949)*(x2744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2745=IKsin(j4);
IkReal x2746=IKcos(j4);
IkReal x2747=(cj5*cj6);
IkReal x2748=(r11*sj6);
IkReal x2749=(cj6*r20);
IkReal x2750=(cj5*sj6);
IkReal x2751=(cj6*r10);
IkReal x2752=(r01*sj6);
IkReal x2753=(r21*sj6);
IkReal x2754=(cj6*r00);
IkReal x2755=((1.0)*x2746);
IkReal x2756=((1.0)*x2745);
IkReal x2757=(sj5*x2756);
evalcond[0]=((((-1.0)*r22*x2757))+((x2746*x2749))+(((-1.0)*r20*x2750*x2756))+(((-1.0)*x2753*x2755))+(((-1.0)*r21*x2747*x2756)));
evalcond[1]=((((-1.0)*x2752*x2755))+((x2746*x2754))+(((-1.0)*r00*x2750*x2756))+(((-1.0)*r01*x2747*x2756))+(((-1.0)*r02*x2757)));
evalcond[2]=((((-1.0)*r02*sj5*x2755))+((x2745*x2752))+(((-1.0)*r00*x2750*x2755))+(((-1.0)*r01*x2747*x2755))+(((-1.0)*x2754*x2756)));
evalcond[3]=((((-1.0)*r11*x2747*x2755))+(((-1.0)*r12*sj5*x2755))+((x2745*x2748))+(((-1.0)*x2751*x2756))+(((-1.0)*r10*x2750*x2755)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x2747*x2756))+((x2746*x2751))+(((-1.0)*r12*x2757))+(((-1.0)*x2748*x2755))+(((-1.0)*r10*x2750*x2756)));
evalcond[5]=((-1.0)+(((-1.0)*r22*sj5*x2755))+(((-1.0)*r20*x2750*x2755))+((x2745*x2753))+(((-1.0)*r21*x2747*x2755))+(((-1.0)*x2749*x2756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2758=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2758.valid){
continue;
}
CheckValue<IkReal> x2759 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2758.value)))+(x2759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2760=IKsin(j4);
IkReal x2761=IKcos(j4);
IkReal x2762=(cj5*cj6);
IkReal x2763=(r11*sj6);
IkReal x2764=(cj6*r20);
IkReal x2765=(cj5*sj6);
IkReal x2766=(cj6*r10);
IkReal x2767=(r01*sj6);
IkReal x2768=(r21*sj6);
IkReal x2769=(cj6*r00);
IkReal x2770=((1.0)*x2761);
IkReal x2771=((1.0)*x2760);
IkReal x2772=(sj5*x2771);
evalcond[0]=((((-1.0)*x2768*x2770))+((x2761*x2764))+(((-1.0)*r20*x2765*x2771))+(((-1.0)*r21*x2762*x2771))+(((-1.0)*r22*x2772)));
evalcond[1]=((((-1.0)*r00*x2765*x2771))+(((-1.0)*r02*x2772))+((x2761*x2769))+(((-1.0)*r01*x2762*x2771))+(((-1.0)*x2767*x2770)));
evalcond[2]=((((-1.0)*r00*x2765*x2770))+(((-1.0)*x2769*x2771))+(((-1.0)*r01*x2762*x2770))+((x2760*x2767))+(((-1.0)*r02*sj5*x2770)));
evalcond[3]=((((-1.0)*x2766*x2771))+((x2760*x2763))+(((-1.0)*r12*sj5*x2770))+(((-1.0)*r11*x2762*x2770))+(((-1.0)*r10*x2765*x2770)));
evalcond[4]=((-1.0)+(((-1.0)*x2763*x2770))+((x2761*x2766))+(((-1.0)*r12*x2772))+(((-1.0)*r11*x2762*x2771))+(((-1.0)*r10*x2765*x2771)));
evalcond[5]=((-1.0)+((x2760*x2768))+(((-1.0)*r20*x2765*x2770))+(((-1.0)*r21*x2762*x2770))+(((-1.0)*x2764*x2771))+(((-1.0)*r22*sj5*x2770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2773=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2773;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2774=((1.0)*sj5);
IkReal x2775=((((-1.0)*cj6*r21*x2774))+((cj5*r22))+(((-1.0)*r20*sj6*x2774)));
j4eval[0]=x2775;
j4eval[1]=IKsign(x2775);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2776=cj5*cj5;
IkReal x2777=cj6*cj6;
IkReal x2778=r22*r22;
IkReal x2779=r21*r21;
IkReal x2780=r20*r20;
IkReal x2781=(r22*sj5);
IkReal x2782=(r21*sj6);
IkReal x2783=(cj6*r20);
IkReal x2784=(cj5*r20*sj6);
IkReal x2785=((1.0)*x2776);
IkReal x2786=(cj5*cj6*r21);
IkReal x2787=(x2777*x2779);
IkReal x2788=(x2777*x2780);
IkReal x2789=(x2787+(((-1.0)*x2778))+(((-1.0)*x2779))+(((2.0)*x2782*x2783))+(((-2.0)*x2781*x2786))+(((-2.0)*x2781*x2784))+((x2776*x2788))+(((-1.0)*x2780*x2785))+(((-1.0)*x2785*x2787))+(((-2.0)*x2776*x2782*x2783))+(((-1.0)*x2788))+((x2776*x2778)));
j4eval[0]=x2789;
j4eval[1]=IKsign(x2789);
j4eval[2]=((IKabs((x2783+(((-1.0)*x2782)))))+(IKabs((x2784+x2786+x2781))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2790=cj5*cj5;
IkReal x2791=cj6*cj6;
IkReal x2792=r22*r22;
IkReal x2793=r21*r21;
IkReal x2794=r20*r20;
IkReal x2795=(r21*sj6);
IkReal x2796=(cj6*r20);
IkReal x2797=(cj5*cj6*r21);
IkReal x2798=((1.0)*x2790);
IkReal x2799=(cj5*r20*sj6);
IkReal x2800=((2.0)*r22*sj5);
IkReal x2801=(x2791*x2793);
IkReal x2802=(x2791*x2794);
CheckValue<IkReal> x2803 = IKatan2WithCheck(IkReal((x2796+(((-1.0)*x2795)))),IkReal((x2799+x2797+((r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2803.valid){
continue;
}
CheckValue<IkReal> x2804=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2802))+((x2790*x2802))+(((2.0)*x2795*x2796))+((x2790*x2792))+(((-1.0)*x2792))+(((-1.0)*x2793))+(((-1.0)*x2799*x2800))+(((-1.0)*x2797*x2800))+(((-1.0)*x2798*x2801))+(((-2.0)*x2790*x2795*x2796))+x2801+(((-1.0)*x2794*x2798)))),-1);
if(!x2804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2803.value)+(((1.5707963267949)*(x2804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2805=IKsin(j4);
IkReal x2806=IKcos(j4);
IkReal x2807=(cj5*cj6);
IkReal x2808=(r11*sj6);
IkReal x2809=(cj6*r20);
IkReal x2810=(cj5*sj6);
IkReal x2811=(cj6*r10);
IkReal x2812=(r01*sj6);
IkReal x2813=(r21*sj6);
IkReal x2814=(cj6*r00);
IkReal x2815=((1.0)*x2806);
IkReal x2816=((1.0)*x2805);
IkReal x2817=(sj5*x2816);
evalcond[0]=((((-1.0)*x2813*x2815))+(((-1.0)*r22*x2817))+(((-1.0)*r20*x2810*x2816))+(((-1.0)*r21*x2807*x2816))+((x2806*x2809)));
evalcond[1]=((((-1.0)*r02*x2817))+(((-1.0)*r01*x2807*x2816))+(((-1.0)*x2812*x2815))+(((-1.0)*r00*x2810*x2816))+((x2806*x2814)));
evalcond[2]=((((-1.0)*r01*x2807*x2815))+(((-1.0)*r00*x2810*x2815))+(((-1.0)*r02*sj5*x2815))+((x2805*x2812))+(((-1.0)*x2814*x2816)));
evalcond[3]=(((x2805*x2808))+(((-1.0)*r10*x2810*x2815))+(((-1.0)*r12*sj5*x2815))+(((-1.0)*r11*x2807*x2815))+(((-1.0)*x2811*x2816)));
evalcond[4]=((1.0)+(((-1.0)*r12*x2817))+(((-1.0)*r10*x2810*x2816))+(((-1.0)*x2808*x2815))+(((-1.0)*r11*x2807*x2816))+((x2806*x2811)));
evalcond[5]=((-1.0)+(((-1.0)*x2809*x2816))+(((-1.0)*r20*x2810*x2815))+((x2805*x2813))+(((-1.0)*r21*x2807*x2815))+(((-1.0)*r22*sj5*x2815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2818=((1.0)*sj5);
CheckValue<IkReal> x2819 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2819.valid){
continue;
}
CheckValue<IkReal> x2820=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x2818))+(((-1.0)*r20*sj6*x2818)))),-1);
if(!x2820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2819.value)+(((1.5707963267949)*(x2820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2821=IKsin(j4);
IkReal x2822=IKcos(j4);
IkReal x2823=(cj5*cj6);
IkReal x2824=(r11*sj6);
IkReal x2825=(cj6*r20);
IkReal x2826=(cj5*sj6);
IkReal x2827=(cj6*r10);
IkReal x2828=(r01*sj6);
IkReal x2829=(r21*sj6);
IkReal x2830=(cj6*r00);
IkReal x2831=((1.0)*x2822);
IkReal x2832=((1.0)*x2821);
IkReal x2833=(sj5*x2832);
evalcond[0]=((((-1.0)*r21*x2823*x2832))+((x2822*x2825))+(((-1.0)*r20*x2826*x2832))+(((-1.0)*r22*x2833))+(((-1.0)*x2829*x2831)));
evalcond[1]=(((x2822*x2830))+(((-1.0)*r01*x2823*x2832))+(((-1.0)*r00*x2826*x2832))+(((-1.0)*x2828*x2831))+(((-1.0)*r02*x2833)));
evalcond[2]=(((x2821*x2828))+(((-1.0)*r01*x2823*x2831))+(((-1.0)*r02*sj5*x2831))+(((-1.0)*r00*x2826*x2831))+(((-1.0)*x2830*x2832)));
evalcond[3]=(((x2821*x2824))+(((-1.0)*r12*sj5*x2831))+(((-1.0)*r11*x2823*x2831))+(((-1.0)*x2827*x2832))+(((-1.0)*r10*x2826*x2831)));
evalcond[4]=((1.0)+((x2822*x2827))+(((-1.0)*r11*x2823*x2832))+(((-1.0)*r12*x2833))+(((-1.0)*r10*x2826*x2832))+(((-1.0)*x2824*x2831)));
evalcond[5]=((-1.0)+(((-1.0)*r21*x2823*x2831))+((x2821*x2829))+(((-1.0)*r22*sj5*x2831))+(((-1.0)*x2825*x2832))+(((-1.0)*r20*x2826*x2831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2834 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2834.valid){
continue;
}
CheckValue<IkReal> x2835=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2834.value)+(((1.5707963267949)*(x2835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2836=IKsin(j4);
IkReal x2837=IKcos(j4);
IkReal x2838=(cj5*cj6);
IkReal x2839=(r11*sj6);
IkReal x2840=(cj6*r20);
IkReal x2841=(cj5*sj6);
IkReal x2842=(cj6*r10);
IkReal x2843=(r01*sj6);
IkReal x2844=(r21*sj6);
IkReal x2845=(cj6*r00);
IkReal x2846=((1.0)*x2837);
IkReal x2847=((1.0)*x2836);
IkReal x2848=(sj5*x2847);
evalcond[0]=(((x2837*x2840))+(((-1.0)*r20*x2841*x2847))+(((-1.0)*x2844*x2846))+(((-1.0)*r21*x2838*x2847))+(((-1.0)*r22*x2848)));
evalcond[1]=((((-1.0)*r00*x2841*x2847))+(((-1.0)*x2843*x2846))+((x2837*x2845))+(((-1.0)*r01*x2838*x2847))+(((-1.0)*r02*x2848)));
evalcond[2]=((((-1.0)*r00*x2841*x2846))+((x2836*x2843))+(((-1.0)*x2845*x2847))+(((-1.0)*r01*x2838*x2846))+(((-1.0)*r02*sj5*x2846)));
evalcond[3]=(((x2836*x2839))+(((-1.0)*r12*sj5*x2846))+(((-1.0)*x2842*x2847))+(((-1.0)*r10*x2841*x2846))+(((-1.0)*r11*x2838*x2846)));
evalcond[4]=((1.0)+((x2837*x2842))+(((-1.0)*r12*x2848))+(((-1.0)*x2839*x2846))+(((-1.0)*r10*x2841*x2847))+(((-1.0)*r11*x2838*x2847)));
evalcond[5]=((-1.0)+(((-1.0)*x2840*x2847))+((x2836*x2844))+(((-1.0)*r22*sj5*x2846))+(((-1.0)*r20*x2841*x2846))+(((-1.0)*r21*x2838*x2846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2849=cj5*cj5;
IkReal x2850=cj6*cj6;
IkReal x2851=r22*r22;
IkReal x2852=r21*r21;
IkReal x2853=r20*r20;
IkReal x2854=(r21*sj6);
IkReal x2855=(cj6*r20);
IkReal x2856=(cj5*cj6*r21);
IkReal x2857=((1.0)*x2849);
IkReal x2858=(cj5*r20*sj6);
IkReal x2859=((2.0)*r22*sj5);
IkReal x2860=(x2850*x2852);
IkReal x2861=(x2850*x2853);
CheckValue<IkReal> x2862 = IKatan2WithCheck(IkReal(((((-1.0)*x2854))+x2855)),IkReal((((r22*sj5))+x2858+x2856)),IKFAST_ATAN2_MAGTHRESH);
if(!x2862.valid){
continue;
}
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(IKsign((((x2849*x2851))+(((-1.0)*x2857*x2860))+(((-1.0)*x2861))+(((2.0)*x2854*x2855))+((x2849*x2861))+(((-1.0)*x2856*x2859))+(((-1.0)*x2851))+(((-1.0)*x2852))+x2860+(((-1.0)*x2858*x2859))+(((-1.0)*x2853*x2857))+(((-2.0)*x2849*x2854*x2855)))),-1);
if(!x2863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2862.value)+(((1.5707963267949)*(x2863.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2864=IKsin(j4);
IkReal x2865=IKcos(j4);
IkReal x2866=(cj5*cj6);
IkReal x2867=(r11*sj6);
IkReal x2868=(cj6*r20);
IkReal x2869=(cj6*r10);
IkReal x2870=(cj5*sj6);
IkReal x2871=(r21*sj6);
IkReal x2872=(cj6*r00);
IkReal x2873=(r01*sj6);
IkReal x2874=((1.0)*x2865);
IkReal x2875=((1.0)*x2864);
IkReal x2876=(sj5*x2875);
evalcond[0]=((((-1.0)*r21*x2866*x2875))+((x2865*x2868))+(((-1.0)*x2871*x2874))+(((-1.0)*r22*x2876))+(((-1.0)*r20*x2870*x2875)));
evalcond[1]=((((-1.0)*r00*x2870*x2874))+((x2864*x2873))+(((-1.0)*r02*sj5*x2874))+(((-1.0)*r01*x2866*x2874))+(((-1.0)*x2872*x2875)));
evalcond[2]=((((-1.0)*r11*x2866*x2874))+(((-1.0)*x2869*x2875))+(((-1.0)*r12*sj5*x2874))+(((-1.0)*r10*x2870*x2874))+((x2864*x2867)));
evalcond[3]=(((x2865*x2872))+sj0+(((-1.0)*r00*x2870*x2875))+(((-1.0)*r02*x2876))+(((-1.0)*r01*x2866*x2875))+(((-1.0)*x2873*x2874)));
evalcond[4]=((-1.0)+(((-1.0)*r22*sj5*x2874))+(((-1.0)*r21*x2866*x2874))+((x2864*x2871))+(((-1.0)*x2868*x2875))+(((-1.0)*r20*x2870*x2874)));
evalcond[5]=((((-1.0)*r11*x2866*x2875))+((x2865*x2869))+(((-1.0)*x2867*x2874))+(((-1.0)*r12*x2876))+(((-1.0)*cj0))+(((-1.0)*r10*x2870*x2875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2877=(cj5*sj0);
IkReal x2878=((1.0)*sj5);
CheckValue<IkReal> x2879 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((cj6*r21*x2877))+((r22*sj0*sj5))+((r20*sj6*x2877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2879.valid){
continue;
}
CheckValue<IkReal> x2880=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x2878))+(((-1.0)*r10*sj6*x2878)))),-1);
if(!x2880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2879.value)+(((1.5707963267949)*(x2880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2881=IKsin(j4);
IkReal x2882=IKcos(j4);
IkReal x2883=(cj5*cj6);
IkReal x2884=(r11*sj6);
IkReal x2885=(cj6*r20);
IkReal x2886=(cj6*r10);
IkReal x2887=(cj5*sj6);
IkReal x2888=(r21*sj6);
IkReal x2889=(cj6*r00);
IkReal x2890=(r01*sj6);
IkReal x2891=((1.0)*x2882);
IkReal x2892=((1.0)*x2881);
IkReal x2893=(sj5*x2892);
evalcond[0]=((((-1.0)*r22*x2893))+(((-1.0)*r21*x2883*x2892))+(((-1.0)*x2888*x2891))+((x2882*x2885))+(((-1.0)*r20*x2887*x2892)));
evalcond[1]=((((-1.0)*r02*sj5*x2891))+(((-1.0)*x2889*x2892))+(((-1.0)*r00*x2887*x2891))+((x2881*x2890))+(((-1.0)*r01*x2883*x2891)));
evalcond[2]=((((-1.0)*r10*x2887*x2891))+(((-1.0)*r11*x2883*x2891))+((x2881*x2884))+(((-1.0)*r12*sj5*x2891))+(((-1.0)*x2886*x2892)));
evalcond[3]=((((-1.0)*x2890*x2891))+sj0+(((-1.0)*r00*x2887*x2892))+(((-1.0)*r02*x2893))+(((-1.0)*r01*x2883*x2892))+((x2882*x2889)));
evalcond[4]=((-1.0)+(((-1.0)*r21*x2883*x2891))+(((-1.0)*x2885*x2892))+((x2881*x2888))+(((-1.0)*r22*sj5*x2891))+(((-1.0)*r20*x2887*x2891)));
evalcond[5]=((((-1.0)*r10*x2887*x2892))+(((-1.0)*r11*x2883*x2892))+(((-1.0)*x2884*x2891))+((x2882*x2886))+(((-1.0)*cj0))+(((-1.0)*r12*x2893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2894=((1.0)*cj5);
IkReal x2895=((1.0)*sj5);
CheckValue<IkReal> x2896 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2895))+(((-1.0)*cj6*r01*x2894))+(((-1.0)*r00*sj6*x2894)))),IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2896.valid){
continue;
}
CheckValue<IkReal> x2897=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x2895))+(((-1.0)*r10*sj6*x2895)))),-1);
if(!x2897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2896.value)+(((1.5707963267949)*(x2897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2898=IKsin(j4);
IkReal x2899=IKcos(j4);
IkReal x2900=(cj5*cj6);
IkReal x2901=(r11*sj6);
IkReal x2902=(cj6*r20);
IkReal x2903=(cj6*r10);
IkReal x2904=(cj5*sj6);
IkReal x2905=(r21*sj6);
IkReal x2906=(cj6*r00);
IkReal x2907=(r01*sj6);
IkReal x2908=((1.0)*x2899);
IkReal x2909=((1.0)*x2898);
IkReal x2910=(sj5*x2909);
evalcond[0]=(((x2899*x2902))+(((-1.0)*x2905*x2908))+(((-1.0)*r21*x2900*x2909))+(((-1.0)*r20*x2904*x2909))+(((-1.0)*r22*x2910)));
evalcond[1]=((((-1.0)*x2906*x2909))+(((-1.0)*r01*x2900*x2908))+(((-1.0)*r02*sj5*x2908))+(((-1.0)*r00*x2904*x2908))+((x2898*x2907)));
evalcond[2]=((((-1.0)*r11*x2900*x2908))+((x2898*x2901))+(((-1.0)*x2903*x2909))+(((-1.0)*r10*x2904*x2908))+(((-1.0)*r12*sj5*x2908)));
evalcond[3]=(((x2899*x2906))+sj0+(((-1.0)*r01*x2900*x2909))+(((-1.0)*r00*x2904*x2909))+(((-1.0)*x2907*x2908))+(((-1.0)*r02*x2910)));
evalcond[4]=((-1.0)+(((-1.0)*x2902*x2909))+(((-1.0)*r22*sj5*x2908))+(((-1.0)*r21*x2900*x2908))+((x2898*x2905))+(((-1.0)*r20*x2904*x2908)));
evalcond[5]=(((x2899*x2903))+(((-1.0)*x2901*x2908))+(((-1.0)*r12*x2910))+(((-1.0)*r11*x2900*x2909))+(((-1.0)*r10*x2904*x2909))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2911=(cj2*sj1);
IkReal x2912=((364.42)*cj1);
IkReal x2913=((1000.0)*px);
IkReal x2914=(cj5*sj2);
IkReal x2915=(cj6*r01);
IkReal x2916=((69.0)*r12);
IkReal x2917=(sj5*sj6);
IkReal x2918=((69.0)*r10);
IkReal x2919=((374.29)*r00);
IkReal x2920=((374.29)*sj5);
IkReal x2921=((374.29)*r02);
IkReal x2922=((10.0)*r02*sj5);
IkReal x2923=((10.0)*r00*sj6);
IkReal x2924=(cj6*r11*sj5);
CheckValue<IkReal> x2925=IKPowWithIntegerCheck(IKsign(((-69.0)+(((69.0)*x2911))+((x2911*x2912))+(((69.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x2925.valid){
continue;
}
CheckValue<IkReal> x2926 = IKatan2WithCheck(IkReal((((x2912*x2924))+((r10*x2912*x2917))+((x2917*x2918))+((sj2*x2915*x2920))+(((-1.0)*x2914*x2923))+(((-1.0)*x2914*x2921))+(((69.0)*x2924))+((cj5*x2911*x2916))+((sj2*x2917*x2919))+(((-1.0)*cj5*r12*x2912))+(((-1.0)*sj2*x2922))+(((-69.0)*x2911*x2924))+(((-1.0)*cj5*x2916))+(((-1.0)*x2911*x2917*x2918))+(((-10.0)*x2914*x2915))+((sj2*x2913)))),IkReal(((((-1.0)*x2911*x2922))+((x2911*x2917*x2919))+(((-1.0)*cj5*x2911*x2923))+(((-1.0)*cj5*x2911*x2921))+(((69.0)*sj2*x2924))+((sj2*x2917*x2918))+(((-1.0)*x2914*x2916))+(((-10.0)*cj5*x2911*x2915))+((x2911*x2913))+((x2911*x2915*x2920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2926.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2925.value)))+(x2926.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2927=IKsin(j0);
IkReal x2928=IKcos(j0);
IkReal x2929=(cj6*r11);
IkReal x2930=((0.01)*cj5);
IkReal x2931=(sj5*sj6);
IkReal x2932=((0.36442)*cj1);
IkReal x2933=(cj2*sj1);
IkReal x2934=(cj6*r01);
IkReal x2935=((0.37429)*sj5);
IkReal x2936=(cj5*r02);
IkReal x2937=((0.01)*sj5);
IkReal x2938=(cj5*r12);
IkReal x2939=((0.069)*x2927);
IkReal x2940=((0.069)*x2928);
IkReal x2941=((1.0)*x2927);
evalcond[0]=(((r10*x2931))+((sj2*x2928))+((sj5*x2929))+(((-1.0)*x2938))+(((-1.0)*x2933*x2941)));
evalcond[1]=(((sj5*x2934))+(((-1.0)*x2928*x2933))+((r00*x2931))+(((-1.0)*sj2*x2941))+(((-1.0)*x2936)));
evalcond[2]=(((r02*x2937))+(((-0.37429)*r00*x2931))+((x2928*x2932))+(((0.37429)*x2936))+(((-1.0)*px))+((r00*sj6*x2930))+(((-1.0)*sj2*x2939))+((x2930*x2934))+(((-1.0)*x2934*x2935))+(((-1.0)*x2933*x2940))+x2940);
evalcond[3]=(((x2929*x2930))+((r10*sj6*x2930))+(((-1.0)*x2933*x2939))+(((-0.37429)*r10*x2931))+(((0.37429)*x2938))+(((-1.0)*py))+(((-1.0)*x2929*x2935))+((sj2*x2940))+((r12*x2937))+((x2927*x2932))+x2939);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2942=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2942;
j4eval[1]=IKsign(x2942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2943=((1.0)*sj5);
IkReal x2944=((((-1.0)*cj6*r01*x2943))+(((-1.0)*r00*sj6*x2943))+((cj5*r02)));
j4eval[0]=x2944;
j4eval[1]=IKsign(x2944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2945=cj5*cj5;
IkReal x2946=cj6*cj6;
IkReal x2947=r20*r20;
IkReal x2948=r21*r21;
IkReal x2949=r22*r22;
IkReal x2950=(r22*sj5);
IkReal x2951=(cj6*r20);
IkReal x2952=(cj1*sj2);
IkReal x2953=(cj6*r21);
IkReal x2954=(cj5*sj1);
IkReal x2955=(r20*sj6);
IkReal x2956=(r21*sj6);
IkReal x2957=((2.0)*x2955);
IkReal x2958=((1.0)*x2945);
IkReal x2959=(x2946*x2947);
IkReal x2960=(x2946*x2948);
IkReal x2961=((((-1.0)*x2960))+((x2945*x2947))+(((-1.0)*x2958*x2959))+((x2945*x2960))+(((2.0)*x2945*x2951*x2956))+(((-1.0)*x2949*x2958))+((cj5*x2950*x2957))+x2959+x2949+x2948+(((2.0)*cj5*x2950*x2953))+(((-2.0)*x2951*x2956)));
j4eval[0]=x2961;
j4eval[1]=((IKabs((((x2950*x2952))+((sj1*x2951))+(((-1.0)*sj1*x2956))+((cj5*x2952*x2953))+((cj5*x2952*x2955)))))+(IKabs((((x2954*x2955))+((sj1*x2950))+((x2953*x2954))+((x2952*x2956))+(((-1.0)*x2951*x2952))))));
j4eval[2]=IKsign(x2961);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2962=(cj0*sj6);
IkReal x2963=(cj0*cj6);
IkReal x2964=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2964;
j4eval[1]=((IKabs((((cj5*r21*x2963))+((cj0*r22*sj5))+((cj5*r20*x2962)))))+(IKabs(((((-1.0)*r21*x2962))+((r20*x2963))))));
j4eval[2]=IKsign(x2964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2965=(r21*sj0);
IkReal x2966=(r20*sj0);
IkReal x2967=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2967;
j4eval[1]=((IKabs((((r22*sj0*sj5))+((cj5*cj6*x2965))+((cj5*sj6*x2966)))))+(IKabs(((((-1.0)*sj6*x2965))+((cj6*x2966))))));
j4eval[2]=IKsign(x2967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2968=cj6*cj6;
IkReal x2969=cj5*cj5;
IkReal x2970=(r02*r22);
IkReal x2971=(r22*sj5);
IkReal x2972=(r00*r20);
IkReal x2973=((1.0)*r21);
IkReal x2974=(r20*sj6);
IkReal x2975=(cj6*r01);
IkReal x2976=(cj0*cj5);
IkReal x2977=(r00*sj6);
IkReal x2978=((1.0)*cj5);
IkReal x2979=(cj6*r21);
IkReal x2980=(cj5*r02*sj5);
IkReal x2981=((1.0)*x2969);
IkReal x2982=(x2968*x2969);
IkReal x2983=(((x2977*x2979))+(((-1.0)*r01*x2973*x2982))+(((-1.0)*x2971*x2977*x2978))+(((-1.0)*x2970))+((x2974*x2975))+(((-1.0)*x2968*x2972))+(((-1.0)*x2974*x2975*x2981))+(((-1.0)*cj6*x2969*x2973*x2977))+(((-1.0)*r01*x2973))+(((-1.0)*x2971*x2975*x2978))+((x2969*x2970))+(((-1.0)*x2972*x2981))+(((-1.0)*r02*sj5*x2974*x2978))+(((-1.0)*cj6*x2973*x2980))+((x2972*x2982))+((r01*r21*x2968)));
j4eval[0]=x2983;
j4eval[1]=((IKabs((((x2974*x2976))+((cj0*x2971))+((x2976*x2979)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x2973))))));
j4eval[2]=IKsign(x2983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2984=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2984;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2985=((1.0)*sj5);
IkReal x2986=(((cj5*r22))+(((-1.0)*cj6*r21*x2985))+(((-1.0)*r20*sj6*x2985)));
j4eval[0]=x2986;
j4eval[1]=IKsign(x2986);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2987=cj6*cj6;
IkReal x2988=cj5*cj5;
IkReal x2989=r10*r10;
IkReal x2990=r11*r11;
IkReal x2991=r12*r12;
IkReal x2992=(r10*sj6);
IkReal x2993=(r12*sj5);
IkReal x2994=((2.0)*cj6*r11);
IkReal x2995=((1.0)*x2989);
IkReal x2996=(x2987*x2990);
IkReal x2997=((((-1.0)*cj5*x2993*x2994))+(((-1.0)*x2988*x2996))+((x2992*x2994))+(((-1.0)*x2987*x2995))+((x2987*x2988*x2989))+(((-1.0)*x2988*x2992*x2994))+(((-1.0)*x2988*x2995))+(((-1.0)*x2990))+(((-1.0)*x2991))+(((-2.0)*cj5*x2992*x2993))+((x2988*x2991))+x2996);
j4eval[0]=x2997;
j4eval[1]=((IKabs((((cj5*cj6*r11))+((cj5*x2992))+x2993)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2997);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2998=cj6*cj6;
IkReal x2999=cj5*cj5;
IkReal x3000=r10*r10;
IkReal x3001=r11*r11;
IkReal x3002=r12*r12;
IkReal x3003=(r10*sj6);
IkReal x3004=(r12*sj5);
IkReal x3005=((2.0)*cj6*r11);
IkReal x3006=(x2998*x3001);
IkReal x3007=(x2999*x3000);
CheckValue<IkReal> x3008=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3001))+(((-1.0)*x3002))+(((-1.0)*x3007))+(((-1.0)*x2998*x3000))+((x2999*x3002))+x3006+((x2998*x3007))+(((-1.0)*x2999*x3003*x3005))+(((-1.0)*x2999*x3006))+((x3003*x3005))+(((-2.0)*cj5*x3003*x3004))+(((-1.0)*cj5*x3004*x3005)))),-1);
if(!x3008.valid){
continue;
}
CheckValue<IkReal> x3009 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x3004+((cj5*x3003))+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3008.value)))+(x3009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3010=IKsin(j4);
IkReal x3011=IKcos(j4);
IkReal x3012=(cj5*cj6);
IkReal x3013=(r11*sj6);
IkReal x3014=(cj6*r20);
IkReal x3015=(cj6*r10);
IkReal x3016=(cj5*sj6);
IkReal x3017=(r01*sj6);
IkReal x3018=(r21*sj6);
IkReal x3019=(cj6*r00);
IkReal x3020=((1.0)*x3011);
IkReal x3021=((1.0)*x3010);
IkReal x3022=(sj5*x3021);
evalcond[0]=(((x3011*x3014))+(((-1.0)*x3018*x3020))+(((-1.0)*r20*x3016*x3021))+(((-1.0)*r22*x3022))+(((-1.0)*r21*x3012*x3021)));
evalcond[1]=(((x3011*x3015))+(((-1.0)*r12*x3022))+(((-1.0)*r11*x3012*x3021))+(((-1.0)*r10*x3016*x3021))+(((-1.0)*x3013*x3020)));
evalcond[2]=(((x3010*x3018))+(((-1.0)*r20*x3016*x3020))+(((-1.0)*r22*sj5*x3020))+(((-1.0)*r21*x3012*x3020))+(((-1.0)*x3014*x3021)));
evalcond[3]=(((x3010*x3017))+(((-1.0)*x3019*x3021))+(((-1.0)*r00*x3016*x3020))+(((-1.0)*r01*x3012*x3020))+(((-1.0)*r02*sj5*x3020)));
evalcond[4]=((-1.0)+((x3011*x3019))+(((-1.0)*r00*x3016*x3021))+(((-1.0)*r01*x3012*x3021))+(((-1.0)*r02*x3022))+(((-1.0)*x3017*x3020)));
evalcond[5]=((-1.0)+((x3010*x3013))+(((-1.0)*x3015*x3021))+(((-1.0)*r11*x3012*x3020))+(((-1.0)*r12*sj5*x3020))+(((-1.0)*r10*x3016*x3020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3023=((1.0)*sj5);
CheckValue<IkReal> x3024 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3024.valid){
continue;
}
CheckValue<IkReal> x3025=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3023))+(((-1.0)*r20*sj6*x3023)))),-1);
if(!x3025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3024.value)+(((1.5707963267949)*(x3025.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3026=IKsin(j4);
IkReal x3027=IKcos(j4);
IkReal x3028=(cj5*cj6);
IkReal x3029=(r11*sj6);
IkReal x3030=(cj6*r20);
IkReal x3031=(cj6*r10);
IkReal x3032=(cj5*sj6);
IkReal x3033=(r01*sj6);
IkReal x3034=(r21*sj6);
IkReal x3035=(cj6*r00);
IkReal x3036=((1.0)*x3027);
IkReal x3037=((1.0)*x3026);
IkReal x3038=(sj5*x3037);
evalcond[0]=((((-1.0)*r20*x3032*x3037))+(((-1.0)*r22*x3038))+(((-1.0)*x3034*x3036))+(((-1.0)*r21*x3028*x3037))+((x3027*x3030)));
evalcond[1]=((((-1.0)*x3029*x3036))+(((-1.0)*r10*x3032*x3037))+(((-1.0)*r12*x3038))+(((-1.0)*r11*x3028*x3037))+((x3027*x3031)));
evalcond[2]=((((-1.0)*r22*sj5*x3036))+((x3026*x3034))+(((-1.0)*x3030*x3037))+(((-1.0)*r20*x3032*x3036))+(((-1.0)*r21*x3028*x3036)));
evalcond[3]=((((-1.0)*r00*x3032*x3036))+((x3026*x3033))+(((-1.0)*x3035*x3037))+(((-1.0)*r01*x3028*x3036))+(((-1.0)*r02*sj5*x3036)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x3032*x3037))+(((-1.0)*r01*x3028*x3037))+(((-1.0)*r02*x3038))+(((-1.0)*x3033*x3036))+((x3027*x3035)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x3036))+(((-1.0)*r10*x3032*x3036))+(((-1.0)*x3031*x3037))+(((-1.0)*r11*x3028*x3036))+((x3026*x3029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3039 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3039.valid){
continue;
}
CheckValue<IkReal> x3040=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3039.value)+(((1.5707963267949)*(x3040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3041=IKsin(j4);
IkReal x3042=IKcos(j4);
IkReal x3043=(cj5*cj6);
IkReal x3044=(r11*sj6);
IkReal x3045=(cj6*r20);
IkReal x3046=(cj6*r10);
IkReal x3047=(cj5*sj6);
IkReal x3048=(r01*sj6);
IkReal x3049=(r21*sj6);
IkReal x3050=(cj6*r00);
IkReal x3051=((1.0)*x3042);
IkReal x3052=((1.0)*x3041);
IkReal x3053=(sj5*x3052);
evalcond[0]=((((-1.0)*r20*x3047*x3052))+((x3042*x3045))+(((-1.0)*r21*x3043*x3052))+(((-1.0)*r22*x3053))+(((-1.0)*x3049*x3051)));
evalcond[1]=(((x3042*x3046))+(((-1.0)*x3044*x3051))+(((-1.0)*r10*x3047*x3052))+(((-1.0)*r11*x3043*x3052))+(((-1.0)*r12*x3053)));
evalcond[2]=((((-1.0)*r22*sj5*x3051))+(((-1.0)*r20*x3047*x3051))+(((-1.0)*r21*x3043*x3051))+(((-1.0)*x3045*x3052))+((x3041*x3049)));
evalcond[3]=((((-1.0)*r02*sj5*x3051))+(((-1.0)*r01*x3043*x3051))+(((-1.0)*x3050*x3052))+(((-1.0)*r00*x3047*x3051))+((x3041*x3048)));
evalcond[4]=((-1.0)+(((-1.0)*x3048*x3051))+(((-1.0)*r02*x3053))+(((-1.0)*r01*x3043*x3052))+((x3042*x3050))+(((-1.0)*r00*x3047*x3052)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x3051))+(((-1.0)*r10*x3047*x3051))+(((-1.0)*x3046*x3052))+(((-1.0)*r11*x3043*x3051))+((x3041*x3044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3054=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3054;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3054);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3055=((1.0)*sj6);
IkReal x3056=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3055)));
j4eval[0]=x3056;
j4eval[1]=IKsign(x3056);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3055))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3057=r11*r11;
IkReal x3058=cj5*cj5;
IkReal x3059=cj6*cj6;
IkReal x3060=r10*r10;
IkReal x3061=r12*r12;
IkReal x3062=(r12*sj5);
IkReal x3063=(cj6*r10);
IkReal x3064=((1.0)*x3059);
IkReal x3065=(cj5*cj6*r11);
IkReal x3066=(cj5*r10*sj6);
IkReal x3067=((2.0)*r11*sj6);
IkReal x3068=(x3058*x3060);
IkReal x3069=((((2.0)*x3062*x3065))+(((2.0)*x3062*x3066))+x3061+x3068+x3057+(((-1.0)*x3063*x3067))+((x3057*x3058*x3059))+((x3059*x3060))+(((-1.0)*x3058*x3061))+(((-1.0)*x3064*x3068))+((x3058*x3063*x3067))+(((-1.0)*x3057*x3064)));
j4eval[0]=x3069;
j4eval[1]=IKsign(x3069);
j4eval[2]=((IKabs((x3063+(((-1.0)*r11*sj6)))))+(IKabs((x3062+x3066+x3065))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3070=r11*r11;
IkReal x3071=cj5*cj5;
IkReal x3072=cj6*cj6;
IkReal x3073=r10*r10;
IkReal x3074=r12*r12;
IkReal x3075=(r10*sj6);
IkReal x3076=(r12*sj5);
IkReal x3077=((1.0)*x3072);
IkReal x3078=(cj5*cj6*r11);
IkReal x3079=((2.0)*cj6*r11);
IkReal x3080=(x3071*x3073);
CheckValue<IkReal> x3081=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3071*x3074))+x3080+x3070+x3074+(((-1.0)*x3077*x3080))+(((2.0)*x3076*x3078))+((x3072*x3073))+((x3070*x3071*x3072))+(((-1.0)*x3070*x3077))+(((2.0)*cj5*x3075*x3076))+(((-1.0)*x3075*x3079))+((x3071*x3075*x3079)))),-1);
if(!x3081.valid){
continue;
}
CheckValue<IkReal> x3082 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x3076+x3078+((cj5*x3075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3081.value)))+(x3082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3083=IKsin(j4);
IkReal x3084=IKcos(j4);
IkReal x3085=(cj5*cj6);
IkReal x3086=(r11*sj6);
IkReal x3087=(cj6*r20);
IkReal x3088=(cj6*r10);
IkReal x3089=(cj5*sj6);
IkReal x3090=(r01*sj6);
IkReal x3091=(r21*sj6);
IkReal x3092=(cj6*r00);
IkReal x3093=((1.0)*x3084);
IkReal x3094=((1.0)*x3083);
IkReal x3095=(sj5*x3094);
evalcond[0]=((((-1.0)*r22*x3095))+(((-1.0)*r20*x3089*x3094))+(((-1.0)*x3091*x3093))+((x3084*x3087))+(((-1.0)*r21*x3085*x3094)));
evalcond[1]=((((-1.0)*r12*x3095))+(((-1.0)*r10*x3089*x3094))+((x3084*x3088))+(((-1.0)*x3086*x3093))+(((-1.0)*r11*x3085*x3094)));
evalcond[2]=((((-1.0)*r22*sj5*x3093))+(((-1.0)*r20*x3089*x3093))+((x3083*x3091))+(((-1.0)*x3087*x3094))+(((-1.0)*r21*x3085*x3093)));
evalcond[3]=((((-1.0)*x3092*x3094))+(((-1.0)*r02*sj5*x3093))+(((-1.0)*r00*x3089*x3093))+((x3083*x3090))+(((-1.0)*r01*x3085*x3093)));
evalcond[4]=((1.0)+(((-1.0)*r02*x3095))+((x3084*x3092))+(((-1.0)*r00*x3089*x3094))+(((-1.0)*x3090*x3093))+(((-1.0)*r01*x3085*x3094)));
evalcond[5]=((1.0)+((x3083*x3086))+(((-1.0)*r10*x3089*x3093))+(((-1.0)*r12*sj5*x3093))+(((-1.0)*x3088*x3094))+(((-1.0)*r11*x3085*x3093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3096=((1.0)*sj6);
CheckValue<IkReal> x3097=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3096)))),-1);
if(!x3097.valid){
continue;
}
CheckValue<IkReal> x3098 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3096))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3097.value)))+(x3098.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3099=IKsin(j4);
IkReal x3100=IKcos(j4);
IkReal x3101=(cj5*cj6);
IkReal x3102=(r11*sj6);
IkReal x3103=(cj6*r20);
IkReal x3104=(cj6*r10);
IkReal x3105=(cj5*sj6);
IkReal x3106=(r01*sj6);
IkReal x3107=(r21*sj6);
IkReal x3108=(cj6*r00);
IkReal x3109=((1.0)*x3100);
IkReal x3110=((1.0)*x3099);
IkReal x3111=(sj5*x3110);
evalcond[0]=((((-1.0)*r20*x3105*x3110))+(((-1.0)*x3107*x3109))+(((-1.0)*r22*x3111))+(((-1.0)*r21*x3101*x3110))+((x3100*x3103)));
evalcond[1]=((((-1.0)*r12*x3111))+(((-1.0)*x3102*x3109))+(((-1.0)*r10*x3105*x3110))+(((-1.0)*r11*x3101*x3110))+((x3100*x3104)));
evalcond[2]=((((-1.0)*r22*sj5*x3109))+((x3099*x3107))+(((-1.0)*x3103*x3110))+(((-1.0)*r20*x3105*x3109))+(((-1.0)*r21*x3101*x3109)));
evalcond[3]=(((x3099*x3106))+(((-1.0)*r02*sj5*x3109))+(((-1.0)*x3108*x3110))+(((-1.0)*r00*x3105*x3109))+(((-1.0)*r01*x3101*x3109)));
evalcond[4]=((1.0)+(((-1.0)*r01*x3101*x3110))+(((-1.0)*r02*x3111))+(((-1.0)*x3106*x3109))+(((-1.0)*r00*x3105*x3110))+((x3100*x3108)));
evalcond[5]=((1.0)+((x3099*x3102))+(((-1.0)*r11*x3101*x3109))+(((-1.0)*r10*x3105*x3109))+(((-1.0)*r12*sj5*x3109))+(((-1.0)*x3104*x3110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3112=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3112.valid){
continue;
}
CheckValue<IkReal> x3113 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3112.value)))+(x3113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3114=IKsin(j4);
IkReal x3115=IKcos(j4);
IkReal x3116=(cj5*cj6);
IkReal x3117=(r11*sj6);
IkReal x3118=(cj6*r20);
IkReal x3119=(cj6*r10);
IkReal x3120=(cj5*sj6);
IkReal x3121=(r01*sj6);
IkReal x3122=(r21*sj6);
IkReal x3123=(cj6*r00);
IkReal x3124=((1.0)*x3115);
IkReal x3125=((1.0)*x3114);
IkReal x3126=(sj5*x3125);
evalcond[0]=((((-1.0)*r20*x3120*x3125))+(((-1.0)*x3122*x3124))+(((-1.0)*r21*x3116*x3125))+(((-1.0)*r22*x3126))+((x3115*x3118)));
evalcond[1]=((((-1.0)*r11*x3116*x3125))+(((-1.0)*x3117*x3124))+(((-1.0)*r10*x3120*x3125))+(((-1.0)*r12*x3126))+((x3115*x3119)));
evalcond[2]=((((-1.0)*r20*x3120*x3124))+(((-1.0)*r22*sj5*x3124))+(((-1.0)*r21*x3116*x3124))+((x3114*x3122))+(((-1.0)*x3118*x3125)));
evalcond[3]=((((-1.0)*r02*sj5*x3124))+(((-1.0)*r00*x3120*x3124))+((x3114*x3121))+(((-1.0)*x3123*x3125))+(((-1.0)*r01*x3116*x3124)));
evalcond[4]=((1.0)+((x3115*x3123))+(((-1.0)*r00*x3120*x3125))+(((-1.0)*r02*x3126))+(((-1.0)*x3121*x3124))+(((-1.0)*r01*x3116*x3125)));
evalcond[5]=((1.0)+(((-1.0)*r11*x3116*x3124))+(((-1.0)*r10*x3120*x3124))+((x3114*x3117))+(((-1.0)*x3119*x3125))+(((-1.0)*r12*sj5*x3124)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3127=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3127;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3128=((1.0)*sj5);
IkReal x3129=(((cj5*r22))+(((-1.0)*cj6*r21*x3128))+(((-1.0)*r20*sj6*x3128)));
j4eval[0]=x3129;
j4eval[1]=IKsign(x3129);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3130=cj6*cj6;
IkReal x3131=cj5*cj5;
IkReal x3132=r00*r00;
IkReal x3133=r01*r01;
IkReal x3134=r02*r02;
IkReal x3135=(cj6*r00);
IkReal x3136=(cj5*cj6*r01);
IkReal x3137=((2.0)*r02*sj5);
IkReal x3138=((1.0)*x3130);
IkReal x3139=((2.0)*r01*sj6);
IkReal x3140=(cj5*r00*sj6);
IkReal x3141=(x3131*x3132);
IkReal x3142=((((-1.0)*x3141))+((x3131*x3134))+(((-1.0)*x3131*x3135*x3139))+((x3130*x3133))+(((-1.0)*x3132*x3138))+(((-1.0)*x3133))+(((-1.0)*x3134))+(((-1.0)*x3136*x3137))+(((-1.0)*x3131*x3133*x3138))+((x3135*x3139))+((x3130*x3141))+(((-1.0)*x3137*x3140)));
j4eval[0]=x3142;
j4eval[1]=((IKabs((x3135+(((-1.0)*r01*sj6)))))+(IKabs((x3140+x3136+((r02*sj5))))));
j4eval[2]=IKsign(x3142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3143=cj6*cj6;
IkReal x3144=cj5*cj5;
IkReal x3145=r00*r00;
IkReal x3146=r01*r01;
IkReal x3147=r02*r02;
IkReal x3148=(cj6*r00);
IkReal x3149=(cj5*cj6*r01);
IkReal x3150=((2.0)*r02*sj5);
IkReal x3151=((1.0)*x3143);
IkReal x3152=((2.0)*r01*sj6);
IkReal x3153=(cj5*r00*sj6);
IkReal x3154=(x3144*x3145);
CheckValue<IkReal> x3155=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3146))+(((-1.0)*x3147))+(((-1.0)*x3145*x3151))+(((-1.0)*x3154))+(((-1.0)*x3150*x3153))+((x3144*x3147))+((x3148*x3152))+((x3143*x3146))+((x3143*x3154))+(((-1.0)*x3149*x3150))+(((-1.0)*x3144*x3146*x3151))+(((-1.0)*x3144*x3148*x3152)))),-1);
if(!x3155.valid){
continue;
}
CheckValue<IkReal> x3156 = IKatan2WithCheck(IkReal((x3148+(((-1.0)*r01*sj6)))),IkReal((x3149+x3153+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3156.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3155.value)))+(x3156.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3157=IKsin(j4);
IkReal x3158=IKcos(j4);
IkReal x3159=(cj5*cj6);
IkReal x3160=(r11*sj6);
IkReal x3161=(cj6*r20);
IkReal x3162=(cj6*r10);
IkReal x3163=(cj5*sj6);
IkReal x3164=(r21*sj6);
IkReal x3165=(cj6*r00);
IkReal x3166=(r01*sj6);
IkReal x3167=((1.0)*x3158);
IkReal x3168=((1.0)*x3157);
IkReal x3169=(sj5*x3168);
evalcond[0]=((((-1.0)*r21*x3159*x3168))+(((-1.0)*x3164*x3167))+(((-1.0)*r20*x3163*x3168))+(((-1.0)*r22*x3169))+((x3158*x3161)));
evalcond[1]=((((-1.0)*r01*x3159*x3168))+(((-1.0)*x3166*x3167))+(((-1.0)*r00*x3163*x3168))+(((-1.0)*r02*x3169))+((x3158*x3165)));
evalcond[2]=((((-1.0)*r21*x3159*x3167))+(((-1.0)*x3161*x3168))+(((-1.0)*r22*sj5*x3167))+((x3157*x3164))+(((-1.0)*r20*x3163*x3167)));
evalcond[3]=((((-1.0)*x3162*x3168))+(((-1.0)*r12*sj5*x3167))+((x3157*x3160))+(((-1.0)*r10*x3163*x3167))+(((-1.0)*r11*x3159*x3167)));
evalcond[4]=((1.0)+(((-1.0)*r12*x3169))+(((-1.0)*x3160*x3167))+(((-1.0)*r10*x3163*x3168))+(((-1.0)*r11*x3159*x3168))+((x3158*x3162)));
evalcond[5]=((-1.0)+(((-1.0)*x3165*x3168))+(((-1.0)*r01*x3159*x3167))+(((-1.0)*r02*sj5*x3167))+(((-1.0)*r00*x3163*x3167))+((x3157*x3166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3170=((1.0)*sj5);
CheckValue<IkReal> x3171=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3170))+(((-1.0)*r20*sj6*x3170)))),-1);
if(!x3171.valid){
continue;
}
CheckValue<IkReal> x3172 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3171.value)))+(x3172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3173=IKsin(j4);
IkReal x3174=IKcos(j4);
IkReal x3175=(cj5*cj6);
IkReal x3176=(r11*sj6);
IkReal x3177=(cj6*r20);
IkReal x3178=(cj6*r10);
IkReal x3179=(cj5*sj6);
IkReal x3180=(r21*sj6);
IkReal x3181=(cj6*r00);
IkReal x3182=(r01*sj6);
IkReal x3183=((1.0)*x3174);
IkReal x3184=((1.0)*x3173);
IkReal x3185=(sj5*x3184);
evalcond[0]=(((x3174*x3177))+(((-1.0)*x3180*x3183))+(((-1.0)*r22*x3185))+(((-1.0)*r21*x3175*x3184))+(((-1.0)*r20*x3179*x3184)));
evalcond[1]=((((-1.0)*r02*x3185))+(((-1.0)*r00*x3179*x3184))+(((-1.0)*r01*x3175*x3184))+(((-1.0)*x3182*x3183))+((x3174*x3181)));
evalcond[2]=(((x3173*x3180))+(((-1.0)*x3177*x3184))+(((-1.0)*r21*x3175*x3183))+(((-1.0)*r22*sj5*x3183))+(((-1.0)*r20*x3179*x3183)));
evalcond[3]=((((-1.0)*r10*x3179*x3183))+(((-1.0)*r11*x3175*x3183))+((x3173*x3176))+(((-1.0)*x3178*x3184))+(((-1.0)*r12*sj5*x3183)));
evalcond[4]=((1.0)+((x3174*x3178))+(((-1.0)*r10*x3179*x3184))+(((-1.0)*r11*x3175*x3184))+(((-1.0)*x3176*x3183))+(((-1.0)*r12*x3185)));
evalcond[5]=((-1.0)+((x3173*x3182))+(((-1.0)*x3181*x3184))+(((-1.0)*r00*x3179*x3183))+(((-1.0)*r01*x3175*x3183))+(((-1.0)*r02*sj5*x3183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3186 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3186.valid){
continue;
}
CheckValue<IkReal> x3187=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3186.value)+(((1.5707963267949)*(x3187.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3188=IKsin(j4);
IkReal x3189=IKcos(j4);
IkReal x3190=(cj5*cj6);
IkReal x3191=(r11*sj6);
IkReal x3192=(cj6*r20);
IkReal x3193=(cj6*r10);
IkReal x3194=(cj5*sj6);
IkReal x3195=(r21*sj6);
IkReal x3196=(cj6*r00);
IkReal x3197=(r01*sj6);
IkReal x3198=((1.0)*x3189);
IkReal x3199=((1.0)*x3188);
IkReal x3200=(sj5*x3199);
evalcond[0]=((((-1.0)*r21*x3190*x3199))+(((-1.0)*r22*x3200))+(((-1.0)*x3195*x3198))+(((-1.0)*r20*x3194*x3199))+((x3189*x3192)));
evalcond[1]=((((-1.0)*r02*x3200))+(((-1.0)*x3197*x3198))+(((-1.0)*r01*x3190*x3199))+(((-1.0)*r00*x3194*x3199))+((x3189*x3196)));
evalcond[2]=((((-1.0)*x3192*x3199))+(((-1.0)*r22*sj5*x3198))+((x3188*x3195))+(((-1.0)*r21*x3190*x3198))+(((-1.0)*r20*x3194*x3198)));
evalcond[3]=((((-1.0)*r12*sj5*x3198))+(((-1.0)*r10*x3194*x3198))+(((-1.0)*x3193*x3199))+((x3188*x3191))+(((-1.0)*r11*x3190*x3198)));
evalcond[4]=((1.0)+(((-1.0)*r10*x3194*x3199))+(((-1.0)*x3191*x3198))+(((-1.0)*r12*x3200))+(((-1.0)*r11*x3190*x3199))+((x3189*x3193)));
evalcond[5]=((-1.0)+(((-1.0)*x3196*x3199))+(((-1.0)*r01*x3190*x3198))+(((-1.0)*r00*x3194*x3198))+((x3188*x3197))+(((-1.0)*r02*sj5*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3201=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3201;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3201);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3202=((1.0)*sj6);
IkReal x3203=((((-1.0)*r00*sj5*x3202))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x3203;
j4eval[1]=IKsign(x3203);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3202))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3204=cj6*cj6;
IkReal x3205=r01*r01;
IkReal x3206=cj5*cj5;
IkReal x3207=r00*r00;
IkReal x3208=r02*r02;
IkReal x3209=(cj6*r00);
IkReal x3210=(r02*sj5);
IkReal x3211=(cj5*cj6*r01);
IkReal x3212=((2.0)*r01*sj6);
IkReal x3213=(cj5*r00*sj6);
IkReal x3214=((1.0)*x3206);
IkReal x3215=(x3204*x3207);
IkReal x3216=(x3204*x3205);
IkReal x3217=((((2.0)*x3210*x3213))+(((2.0)*x3210*x3211))+((x3206*x3209*x3212))+(((-1.0)*x3214*x3215))+((x3206*x3207))+x3215+x3205+x3208+(((-1.0)*x3216))+((x3206*x3216))+(((-1.0)*x3209*x3212))+(((-1.0)*x3208*x3214)));
j4eval[0]=x3217;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x3209)))+(IKabs((x3210+x3211+x3213))));
j4eval[2]=IKsign(x3217);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3218=cj6*cj6;
IkReal x3219=r01*r01;
IkReal x3220=cj5*cj5;
IkReal x3221=r00*r00;
IkReal x3222=r02*r02;
IkReal x3223=(cj6*r00);
IkReal x3224=((2.0)*r01);
IkReal x3225=(cj5*cj6);
IkReal x3226=(r02*sj5);
IkReal x3227=(cj5*r00*sj6);
IkReal x3228=(x3220*x3221);
IkReal x3229=(x3218*x3219);
CheckValue<IkReal> x3230 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3223)),IkReal((x3227+x3226+((r01*x3225)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3230.valid){
continue;
}
CheckValue<IkReal> x3231=IKPowWithIntegerCheck(IKsign((((x3218*x3221))+((sj6*x3220*x3223*x3224))+(((-1.0)*sj6*x3223*x3224))+x3219+x3228+x3222+(((2.0)*x3226*x3227))+((x3220*x3229))+(((-1.0)*x3220*x3222))+(((-1.0)*x3229))+(((-1.0)*x3218*x3228))+((x3224*x3225*x3226)))),-1);
if(!x3231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3230.value)+(((1.5707963267949)*(x3231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3232=IKsin(j4);
IkReal x3233=IKcos(j4);
IkReal x3234=(cj5*cj6);
IkReal x3235=(r11*sj6);
IkReal x3236=(cj6*r20);
IkReal x3237=(cj6*r10);
IkReal x3238=(cj5*sj6);
IkReal x3239=(r21*sj6);
IkReal x3240=(cj6*r00);
IkReal x3241=(r01*sj6);
IkReal x3242=((1.0)*x3233);
IkReal x3243=((1.0)*x3232);
IkReal x3244=(sj5*x3243);
evalcond[0]=((((-1.0)*x3239*x3242))+(((-1.0)*r21*x3234*x3243))+(((-1.0)*r22*x3244))+((x3233*x3236))+(((-1.0)*r20*x3238*x3243)));
evalcond[1]=(((x3233*x3240))+(((-1.0)*r02*x3244))+(((-1.0)*x3241*x3242))+(((-1.0)*r00*x3238*x3243))+(((-1.0)*r01*x3234*x3243)));
evalcond[2]=(((x3232*x3239))+(((-1.0)*x3236*x3243))+(((-1.0)*r21*x3234*x3242))+(((-1.0)*r22*sj5*x3242))+(((-1.0)*r20*x3238*x3242)));
evalcond[3]=(((x3232*x3235))+(((-1.0)*r12*sj5*x3242))+(((-1.0)*x3237*x3243))+(((-1.0)*r11*x3234*x3242))+(((-1.0)*r10*x3238*x3242)));
evalcond[4]=((-1.0)+(((-1.0)*x3235*x3242))+(((-1.0)*r12*x3244))+(((-1.0)*r11*x3234*x3243))+(((-1.0)*r10*x3238*x3243))+((x3233*x3237)));
evalcond[5]=((1.0)+((x3232*x3241))+(((-1.0)*r02*sj5*x3242))+(((-1.0)*x3240*x3243))+(((-1.0)*r00*x3238*x3242))+(((-1.0)*r01*x3234*x3242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3245=((1.0)*sj6);
CheckValue<IkReal> x3246 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3245))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3246.valid){
continue;
}
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x3245))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x3247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3246.value)+(((1.5707963267949)*(x3247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3248=IKsin(j4);
IkReal x3249=IKcos(j4);
IkReal x3250=(cj5*cj6);
IkReal x3251=(r11*sj6);
IkReal x3252=(cj6*r20);
IkReal x3253=(cj6*r10);
IkReal x3254=(cj5*sj6);
IkReal x3255=(r21*sj6);
IkReal x3256=(cj6*r00);
IkReal x3257=(r01*sj6);
IkReal x3258=((1.0)*x3249);
IkReal x3259=((1.0)*x3248);
IkReal x3260=(sj5*x3259);
evalcond[0]=((((-1.0)*r20*x3254*x3259))+((x3249*x3252))+(((-1.0)*r22*x3260))+(((-1.0)*r21*x3250*x3259))+(((-1.0)*x3255*x3258)));
evalcond[1]=(((x3249*x3256))+(((-1.0)*r00*x3254*x3259))+(((-1.0)*x3257*x3258))+(((-1.0)*r01*x3250*x3259))+(((-1.0)*r02*x3260)));
evalcond[2]=((((-1.0)*r20*x3254*x3258))+((x3248*x3255))+(((-1.0)*x3252*x3259))+(((-1.0)*r21*x3250*x3258))+(((-1.0)*r22*sj5*x3258)));
evalcond[3]=((((-1.0)*r10*x3254*x3258))+((x3248*x3251))+(((-1.0)*x3253*x3259))+(((-1.0)*r11*x3250*x3258))+(((-1.0)*r12*sj5*x3258)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x3254*x3259))+(((-1.0)*r12*x3260))+((x3249*x3253))+(((-1.0)*x3251*x3258))+(((-1.0)*r11*x3250*x3259)));
evalcond[5]=((1.0)+((x3248*x3257))+(((-1.0)*r00*x3254*x3258))+(((-1.0)*x3256*x3259))+(((-1.0)*r01*x3250*x3258))+(((-1.0)*r02*sj5*x3258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3261=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3261.valid){
continue;
}
CheckValue<IkReal> x3262 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3261.value)))+(x3262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3263=IKsin(j4);
IkReal x3264=IKcos(j4);
IkReal x3265=(cj5*cj6);
IkReal x3266=(r11*sj6);
IkReal x3267=(cj6*r20);
IkReal x3268=(cj6*r10);
IkReal x3269=(cj5*sj6);
IkReal x3270=(r21*sj6);
IkReal x3271=(cj6*r00);
IkReal x3272=(r01*sj6);
IkReal x3273=((1.0)*x3264);
IkReal x3274=((1.0)*x3263);
IkReal x3275=(sj5*x3274);
evalcond[0]=((((-1.0)*r20*x3269*x3274))+(((-1.0)*r21*x3265*x3274))+(((-1.0)*x3270*x3273))+(((-1.0)*r22*x3275))+((x3264*x3267)));
evalcond[1]=(((x3264*x3271))+(((-1.0)*x3272*x3273))+(((-1.0)*r00*x3269*x3274))+(((-1.0)*r01*x3265*x3274))+(((-1.0)*r02*x3275)));
evalcond[2]=((((-1.0)*r20*x3269*x3273))+(((-1.0)*r21*x3265*x3273))+((x3263*x3270))+(((-1.0)*r22*sj5*x3273))+(((-1.0)*x3267*x3274)));
evalcond[3]=((((-1.0)*x3268*x3274))+(((-1.0)*r11*x3265*x3273))+((x3263*x3266))+(((-1.0)*r12*sj5*x3273))+(((-1.0)*r10*x3269*x3273)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x3275))+(((-1.0)*r11*x3265*x3274))+(((-1.0)*x3266*x3273))+(((-1.0)*r10*x3269*x3274))+((x3264*x3268)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x3273))+((x3263*x3272))+(((-1.0)*r00*x3269*x3273))+(((-1.0)*r01*x3265*x3273))+(((-1.0)*x3271*x3274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3276=cj6*cj6;
IkReal x3277=cj5*cj5;
IkReal x3278=(r22*sj5);
IkReal x3279=(cj0*r20);
IkReal x3280=((1.0)*r21);
IkReal x3281=(cj5*sj6);
IkReal x3282=(r02*r22);
IkReal x3283=(cj5*cj6);
IkReal x3284=(r02*sj5);
IkReal x3285=(cj6*sj6);
IkReal x3286=((1.0)*r20);
IkReal x3287=(r01*x3280);
IkReal x3288=(r00*r20*x3277);
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3277*x3285*x3286))+(((-1.0)*x3280*x3283*x3284))+((r00*r21*x3285))+(((-1.0)*x3287))+(((-1.0)*r01*x3278*x3283))+(((-1.0)*r00*x3277*x3280*x3285))+((r01*r20*x3285))+(((-1.0)*r00*x3276*x3286))+((r01*r21*x3276))+((x3276*x3288))+(((-1.0)*x3276*x3277*x3287))+(((-1.0)*r00*x3278*x3281))+(((-1.0)*x3282))+(((-1.0)*x3281*x3284*x3286))+((x3277*x3282))+(((-1.0)*r00*x3277*x3286)))),-1);
if(!x3289.valid){
continue;
}
CheckValue<IkReal> x3290 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj6*x3280))+((cj6*x3279)))),IkReal((((cj0*x3278))+((x3279*x3281))+((cj0*r21*x3283)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3289.value)))+(x3290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3291=IKsin(j4);
IkReal x3292=IKcos(j4);
IkReal x3293=((1.0)*sj0);
IkReal x3294=((1.0)*cj6);
IkReal x3295=((1.0)*sj6);
IkReal x3296=(cj5*x3292);
IkReal x3297=(r20*x3291);
IkReal x3298=(cj6*x3292);
IkReal x3299=(r11*x3291);
IkReal x3300=(r21*x3291);
IkReal x3301=(r01*x3291);
IkReal x3302=((1.0)*sj5*x3291);
IkReal x3303=((1.0)*sj5*x3292);
IkReal x3304=(cj5*x3291*x3295);
evalcond[0]=(((r20*x3298))+(((-1.0)*r22*x3302))+(((-1.0)*cj5*x3294*x3300))+(((-1.0)*r21*x3292*x3295))+(((-1.0)*cj5*x3295*x3297)));
evalcond[1]=(((sj6*x3300))+(((-1.0)*r21*x3294*x3296))+(((-1.0)*r22*x3303))+(((-1.0)*x3294*x3297))+(((-1.0)*r20*x3295*x3296)));
evalcond[2]=(cj0+(((-1.0)*r11*x3292*x3295))+((r10*x3298))+(((-1.0)*cj5*x3294*x3299))+(((-1.0)*r12*x3302))+(((-1.0)*r10*x3304)));
evalcond[3]=(((r00*x3298))+(((-1.0)*x3293))+(((-1.0)*cj5*x3294*x3301))+(((-1.0)*r02*x3302))+(((-1.0)*r00*x3304))+(((-1.0)*r01*x3292*x3295)));
evalcond[4]=((((-1.0)*r00*x3291*x3294))+((sj6*x3301))+(((-1.0)*r02*x3303))+(((-1.0)*r00*x3295*x3296))+(((-1.0)*cj0))+(((-1.0)*r01*x3294*x3296)));
evalcond[5]=(((sj6*x3299))+(((-1.0)*r10*x3291*x3294))+(((-1.0)*x3293))+(((-1.0)*r11*x3294*x3296))+(((-1.0)*r10*x3295*x3296))+(((-1.0)*r12*x3303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3305=(cj5*sj0);
CheckValue<IkReal> x3306=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3306.valid){
continue;
}
CheckValue<IkReal> x3307 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((cj6*r21*x3305))+((r22*sj0*sj5))+((r20*sj6*x3305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3306.value)))+(x3307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3308=IKsin(j4);
IkReal x3309=IKcos(j4);
IkReal x3310=((1.0)*sj0);
IkReal x3311=((1.0)*cj6);
IkReal x3312=((1.0)*sj6);
IkReal x3313=(cj5*x3309);
IkReal x3314=(r20*x3308);
IkReal x3315=(cj6*x3309);
IkReal x3316=(r11*x3308);
IkReal x3317=(r21*x3308);
IkReal x3318=(r01*x3308);
IkReal x3319=((1.0)*sj5*x3308);
IkReal x3320=((1.0)*sj5*x3309);
IkReal x3321=(cj5*x3308*x3312);
evalcond[0]=((((-1.0)*r21*x3309*x3312))+(((-1.0)*cj5*x3311*x3317))+(((-1.0)*r22*x3319))+(((-1.0)*cj5*x3312*x3314))+((r20*x3315)));
evalcond[1]=(((sj6*x3317))+(((-1.0)*r21*x3311*x3313))+(((-1.0)*r20*x3312*x3313))+(((-1.0)*r22*x3320))+(((-1.0)*x3311*x3314)));
evalcond[2]=(cj0+(((-1.0)*cj5*x3311*x3316))+(((-1.0)*r10*x3321))+((r10*x3315))+(((-1.0)*r12*x3319))+(((-1.0)*r11*x3309*x3312)));
evalcond[3]=((((-1.0)*r01*x3309*x3312))+(((-1.0)*cj5*x3311*x3318))+(((-1.0)*x3310))+(((-1.0)*r02*x3319))+((r00*x3315))+(((-1.0)*r00*x3321)));
evalcond[4]=(((sj6*x3318))+(((-1.0)*r02*x3320))+(((-1.0)*r00*x3308*x3311))+(((-1.0)*r00*x3312*x3313))+(((-1.0)*r01*x3311*x3313))+(((-1.0)*cj0)));
evalcond[5]=(((sj6*x3316))+(((-1.0)*r10*x3312*x3313))+(((-1.0)*x3310))+(((-1.0)*r10*x3308*x3311))+(((-1.0)*r11*x3311*x3313))+(((-1.0)*r12*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3322=(cj0*sj6);
IkReal x3323=(cj0*cj6);
CheckValue<IkReal> x3324 = IKatan2WithCheck(IkReal((((r20*x3323))+(((-1.0)*r21*x3322)))),IkReal((((cj5*r20*x3322))+((cj5*r21*x3323))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3324.value)+(((1.5707963267949)*(x3325.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3326=IKsin(j4);
IkReal x3327=IKcos(j4);
IkReal x3328=((1.0)*sj0);
IkReal x3329=((1.0)*cj6);
IkReal x3330=((1.0)*sj6);
IkReal x3331=(cj5*x3327);
IkReal x3332=(r20*x3326);
IkReal x3333=(cj6*x3327);
IkReal x3334=(r11*x3326);
IkReal x3335=(r21*x3326);
IkReal x3336=(r01*x3326);
IkReal x3337=((1.0)*sj5*x3326);
IkReal x3338=((1.0)*sj5*x3327);
IkReal x3339=(cj5*x3326*x3330);
evalcond[0]=((((-1.0)*r21*x3327*x3330))+(((-1.0)*cj5*x3329*x3335))+(((-1.0)*r22*x3337))+(((-1.0)*cj5*x3330*x3332))+((r20*x3333)));
evalcond[1]=((((-1.0)*r20*x3330*x3331))+((sj6*x3335))+(((-1.0)*r22*x3338))+(((-1.0)*r21*x3329*x3331))+(((-1.0)*x3329*x3332)));
evalcond[2]=(cj0+((r10*x3333))+(((-1.0)*cj5*x3329*x3334))+(((-1.0)*r11*x3327*x3330))+(((-1.0)*r10*x3339))+(((-1.0)*r12*x3337)));
evalcond[3]=((((-1.0)*x3328))+(((-1.0)*r01*x3327*x3330))+(((-1.0)*cj5*x3329*x3336))+(((-1.0)*r02*x3337))+(((-1.0)*r00*x3339))+((r00*x3333)));
evalcond[4]=((((-1.0)*r00*x3330*x3331))+((sj6*x3336))+(((-1.0)*r02*x3338))+(((-1.0)*r01*x3329*x3331))+(((-1.0)*r00*x3326*x3329))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x3328))+(((-1.0)*r11*x3329*x3331))+((sj6*x3334))+(((-1.0)*r10*x3326*x3329))+(((-1.0)*r10*x3330*x3331))+(((-1.0)*r12*x3338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3340=(r20*sj0);
IkReal x3341=((1.0)*sj5);
IkReal x3342=(r21*sj0);
IkReal x3343=(((cj5*r12))+(((-1.0)*r10*sj6*x3341))+(((-1.0)*cj6*r11*x3341)));
j4eval[0]=x3343;
j4eval[1]=IKsign(x3343);
j4eval[2]=((IKabs((((cj5*sj6*x3340))+((r22*sj0*sj5))+((cj5*cj6*x3342)))))+(IKabs(((((-1.0)*sj6*x3342))+((cj6*x3340))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3344=(cj0*sj6);
IkReal x3345=((1.0)*sj5);
IkReal x3346=(cj0*cj6);
IkReal x3347=((((-1.0)*r00*sj6*x3345))+(((-1.0)*cj6*r01*x3345))+((cj5*r02)));
j4eval[0]=x3347;
j4eval[1]=IKsign(x3347);
j4eval[2]=((IKabs((((cj5*r20*x3344))+((cj0*r22*sj5))+((cj5*r21*x3346)))))+(IKabs(((((-1.0)*r21*x3344))+((r20*x3346))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3348=cj6*cj6;
IkReal x3349=cj5*cj5;
IkReal x3350=(r02*r22);
IkReal x3351=(r22*sj5);
IkReal x3352=(r00*r20);
IkReal x3353=((1.0)*r21);
IkReal x3354=(r20*sj6);
IkReal x3355=(cj6*r01);
IkReal x3356=(cj0*cj5);
IkReal x3357=(r00*sj6);
IkReal x3358=((1.0)*cj5);
IkReal x3359=(cj6*r21);
IkReal x3360=(cj5*r02*sj5);
IkReal x3361=((1.0)*x3349);
IkReal x3362=(x3348*x3349);
IkReal x3363=(((r01*r21*x3348))+(((-1.0)*x3351*x3357*x3358))+(((-1.0)*cj6*x3353*x3360))+((x3352*x3362))+(((-1.0)*x3351*x3355*x3358))+(((-1.0)*x3348*x3352))+(((-1.0)*r02*sj5*x3354*x3358))+(((-1.0)*cj6*x3349*x3353*x3357))+((x3354*x3355))+(((-1.0)*r01*x3353))+(((-1.0)*x3354*x3355*x3361))+((x3357*x3359))+(((-1.0)*x3352*x3361))+(((-1.0)*r01*x3353*x3362))+((x3349*x3350))+(((-1.0)*x3350)));
j4eval[0]=x3363;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x3353)))))+(IKabs((((x3356*x3359))+((x3354*x3356))+((cj0*x3351))))));
j4eval[2]=IKsign(x3363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3364=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3364;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3364);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3365=((1.0)*sj6);
IkReal x3366=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3365)));
j4eval[0]=x3366;
j4eval[1]=IKsign(x3366);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3365))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3367=cj6*cj6;
IkReal x3368=cj5*cj5;
IkReal x3369=r10*r10;
IkReal x3370=r11*r11;
IkReal x3371=r12*r12;
IkReal x3372=(r10*sj6);
IkReal x3373=(r12*sj5);
IkReal x3374=((2.0)*cj6*r11);
IkReal x3375=((1.0)*x3369);
IkReal x3376=(x3367*x3370);
IkReal x3377=((((-1.0)*x3371))+(((-1.0)*x3370))+(((-2.0)*cj5*x3372*x3373))+(((-1.0)*cj5*x3373*x3374))+(((-1.0)*x3367*x3375))+x3376+((x3368*x3371))+(((-1.0)*x3368*x3372*x3374))+((x3372*x3374))+(((-1.0)*x3368*x3376))+(((-1.0)*x3368*x3375))+((x3367*x3368*x3369)));
j4eval[0]=x3377;
j4eval[1]=((IKabs((((cj5*x3372))+x3373+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3378=cj6*cj6;
IkReal x3379=cj5*cj5;
IkReal x3380=r10*r10;
IkReal x3381=r11*r11;
IkReal x3382=r12*r12;
IkReal x3383=(r10*sj6);
IkReal x3384=(r12*sj5);
IkReal x3385=((2.0)*cj6*r11);
IkReal x3386=(x3378*x3381);
IkReal x3387=(x3379*x3380);
CheckValue<IkReal> x3388=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3379*x3383*x3385))+(((-1.0)*x3382))+(((-1.0)*x3381))+(((-1.0)*x3387))+x3386+((x3379*x3382))+(((-1.0)*x3379*x3386))+(((-1.0)*x3378*x3380))+((x3378*x3387))+(((-2.0)*cj5*x3383*x3384))+((x3383*x3385))+(((-1.0)*cj5*x3384*x3385)))),-1);
if(!x3388.valid){
continue;
}
CheckValue<IkReal> x3389 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x3383))+x3384+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3388.value)))+(x3389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3390=IKsin(j4);
IkReal x3391=IKcos(j4);
IkReal x3392=(cj5*cj6);
IkReal x3393=(r11*sj6);
IkReal x3394=(cj6*r20);
IkReal x3395=(cj6*r10);
IkReal x3396=(cj5*sj6);
IkReal x3397=(r01*sj6);
IkReal x3398=(r21*sj6);
IkReal x3399=(cj6*r00);
IkReal x3400=((1.0)*x3391);
IkReal x3401=((1.0)*x3390);
IkReal x3402=(sj5*x3401);
evalcond[0]=(((x3391*x3394))+(((-1.0)*x3398*x3400))+(((-1.0)*r21*x3392*x3401))+(((-1.0)*r20*x3396*x3401))+(((-1.0)*r22*x3402)));
evalcond[1]=((((-1.0)*r10*x3396*x3401))+(((-1.0)*r11*x3392*x3401))+((x3391*x3395))+(((-1.0)*r12*x3402))+(((-1.0)*x3393*x3400)));
evalcond[2]=((((-1.0)*x3394*x3401))+(((-1.0)*r22*sj5*x3400))+((x3390*x3398))+(((-1.0)*r21*x3392*x3400))+(((-1.0)*r20*x3396*x3400)));
evalcond[3]=((((-1.0)*r01*x3392*x3400))+(((-1.0)*r02*sj5*x3400))+(((-1.0)*x3399*x3401))+((x3390*x3397))+(((-1.0)*r00*x3396*x3400)));
evalcond[4]=((1.0)+(((-1.0)*r01*x3392*x3401))+((x3391*x3399))+(((-1.0)*r00*x3396*x3401))+(((-1.0)*r02*x3402))+(((-1.0)*x3397*x3400)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x3396*x3400))+(((-1.0)*r11*x3392*x3400))+(((-1.0)*x3395*x3401))+((x3390*x3393))+(((-1.0)*r12*sj5*x3400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3403=((1.0)*sj6);
CheckValue<IkReal> x3404 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3403))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3404.valid){
continue;
}
CheckValue<IkReal> x3405=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3403)))),-1);
if(!x3405.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3404.value)+(((1.5707963267949)*(x3405.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3406=IKsin(j4);
IkReal x3407=IKcos(j4);
IkReal x3408=(cj5*cj6);
IkReal x3409=(r11*sj6);
IkReal x3410=(cj6*r20);
IkReal x3411=(cj6*r10);
IkReal x3412=(cj5*sj6);
IkReal x3413=(r01*sj6);
IkReal x3414=(r21*sj6);
IkReal x3415=(cj6*r00);
IkReal x3416=((1.0)*x3407);
IkReal x3417=((1.0)*x3406);
IkReal x3418=(sj5*x3417);
evalcond[0]=((((-1.0)*r22*x3418))+(((-1.0)*r20*x3412*x3417))+(((-1.0)*x3414*x3416))+((x3407*x3410))+(((-1.0)*r21*x3408*x3417)));
evalcond[1]=(((x3407*x3411))+(((-1.0)*r12*x3418))+(((-1.0)*x3409*x3416))+(((-1.0)*r11*x3408*x3417))+(((-1.0)*r10*x3412*x3417)));
evalcond[2]=(((x3406*x3414))+(((-1.0)*r22*sj5*x3416))+(((-1.0)*r20*x3412*x3416))+(((-1.0)*x3410*x3417))+(((-1.0)*r21*x3408*x3416)));
evalcond[3]=(((x3406*x3413))+(((-1.0)*r01*x3408*x3416))+(((-1.0)*x3415*x3417))+(((-1.0)*r02*sj5*x3416))+(((-1.0)*r00*x3412*x3416)));
evalcond[4]=((1.0)+(((-1.0)*r01*x3408*x3417))+(((-1.0)*r02*x3418))+((x3407*x3415))+(((-1.0)*r00*x3412*x3417))+(((-1.0)*x3413*x3416)));
evalcond[5]=((-1.0)+(((-1.0)*x3411*x3417))+((x3406*x3409))+(((-1.0)*r12*sj5*x3416))+(((-1.0)*r11*x3408*x3416))+(((-1.0)*r10*x3412*x3416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3419.valid){
continue;
}
CheckValue<IkReal> x3420 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3419.value)))+(x3420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3421=IKsin(j4);
IkReal x3422=IKcos(j4);
IkReal x3423=(cj5*cj6);
IkReal x3424=(r11*sj6);
IkReal x3425=(cj6*r20);
IkReal x3426=(cj6*r10);
IkReal x3427=(cj5*sj6);
IkReal x3428=(r01*sj6);
IkReal x3429=(r21*sj6);
IkReal x3430=(cj6*r00);
IkReal x3431=((1.0)*x3422);
IkReal x3432=((1.0)*x3421);
IkReal x3433=(sj5*x3432);
evalcond[0]=((((-1.0)*r21*x3423*x3432))+((x3422*x3425))+(((-1.0)*r20*x3427*x3432))+(((-1.0)*r22*x3433))+(((-1.0)*x3429*x3431)));
evalcond[1]=((((-1.0)*r10*x3427*x3432))+(((-1.0)*r12*x3433))+(((-1.0)*r11*x3423*x3432))+(((-1.0)*x3424*x3431))+((x3422*x3426)));
evalcond[2]=((((-1.0)*x3425*x3432))+((x3421*x3429))+(((-1.0)*r21*x3423*x3431))+(((-1.0)*r20*x3427*x3431))+(((-1.0)*r22*sj5*x3431)));
evalcond[3]=((((-1.0)*x3430*x3432))+(((-1.0)*r00*x3427*x3431))+((x3421*x3428))+(((-1.0)*r01*x3423*x3431))+(((-1.0)*r02*sj5*x3431)));
evalcond[4]=((1.0)+(((-1.0)*x3428*x3431))+((x3422*x3430))+(((-1.0)*r00*x3427*x3432))+(((-1.0)*r01*x3423*x3432))+(((-1.0)*r02*x3433)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x3427*x3431))+(((-1.0)*r12*sj5*x3431))+(((-1.0)*r11*x3423*x3431))+(((-1.0)*x3426*x3432))+((x3421*x3424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3434=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3434;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3435=((1.0)*sj5);
IkReal x3436=(((cj5*r22))+(((-1.0)*cj6*r21*x3435))+(((-1.0)*r20*sj6*x3435)));
j4eval[0]=x3436;
j4eval[1]=IKsign(x3436);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3437=r11*r11;
IkReal x3438=cj5*cj5;
IkReal x3439=cj6*cj6;
IkReal x3440=r10*r10;
IkReal x3441=r12*r12;
IkReal x3442=(r12*sj5);
IkReal x3443=(cj6*r10);
IkReal x3444=((1.0)*x3439);
IkReal x3445=(cj5*cj6*r11);
IkReal x3446=(cj5*r10*sj6);
IkReal x3447=((2.0)*r11*sj6);
IkReal x3448=(x3438*x3440);
IkReal x3449=((((2.0)*x3442*x3445))+(((2.0)*x3442*x3446))+((x3438*x3443*x3447))+((x3437*x3438*x3439))+x3448+x3441+x3437+(((-1.0)*x3437*x3444))+(((-1.0)*x3444*x3448))+(((-1.0)*x3443*x3447))+(((-1.0)*x3438*x3441))+((x3439*x3440)));
j4eval[0]=x3449;
j4eval[1]=IKsign(x3449);
j4eval[2]=((IKabs((x3443+(((-1.0)*r11*sj6)))))+(IKabs((x3445+x3446+x3442))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3450=r11*r11;
IkReal x3451=cj5*cj5;
IkReal x3452=cj6*cj6;
IkReal x3453=r10*r10;
IkReal x3454=r12*r12;
IkReal x3455=(r10*sj6);
IkReal x3456=(r12*sj5);
IkReal x3457=((1.0)*x3452);
IkReal x3458=(cj5*cj6*r11);
IkReal x3459=((2.0)*cj6*r11);
IkReal x3460=(x3451*x3453);
CheckValue<IkReal> x3461=IKPowWithIntegerCheck(IKsign((((x3450*x3451*x3452))+(((2.0)*x3456*x3458))+x3450+x3454+x3460+(((2.0)*cj5*x3455*x3456))+(((-1.0)*x3455*x3459))+(((-1.0)*x3450*x3457))+((x3452*x3453))+(((-1.0)*x3451*x3454))+((x3451*x3455*x3459))+(((-1.0)*x3457*x3460)))),-1);
if(!x3461.valid){
continue;
}
CheckValue<IkReal> x3462 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x3456+x3458+((cj5*x3455)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3461.value)))+(x3462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3463=IKsin(j4);
IkReal x3464=IKcos(j4);
IkReal x3465=(cj5*cj6);
IkReal x3466=(r11*sj6);
IkReal x3467=(cj6*r20);
IkReal x3468=(cj6*r10);
IkReal x3469=(cj5*sj6);
IkReal x3470=(r01*sj6);
IkReal x3471=(r21*sj6);
IkReal x3472=(cj6*r00);
IkReal x3473=((1.0)*x3464);
IkReal x3474=((1.0)*x3463);
IkReal x3475=(sj5*x3474);
evalcond[0]=(((x3464*x3467))+(((-1.0)*r21*x3465*x3474))+(((-1.0)*x3471*x3473))+(((-1.0)*r22*x3475))+(((-1.0)*r20*x3469*x3474)));
evalcond[1]=((((-1.0)*r10*x3469*x3474))+((x3464*x3468))+(((-1.0)*r11*x3465*x3474))+(((-1.0)*r12*x3475))+(((-1.0)*x3466*x3473)));
evalcond[2]=((((-1.0)*r22*sj5*x3473))+(((-1.0)*x3467*x3474))+((x3463*x3471))+(((-1.0)*r21*x3465*x3473))+(((-1.0)*r20*x3469*x3473)));
evalcond[3]=((((-1.0)*r01*x3465*x3473))+((x3463*x3470))+(((-1.0)*x3472*x3474))+(((-1.0)*r02*sj5*x3473))+(((-1.0)*r00*x3469*x3473)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x3465*x3474))+((x3464*x3472))+(((-1.0)*r02*x3475))+(((-1.0)*r00*x3469*x3474))+(((-1.0)*x3470*x3473)));
evalcond[5]=((1.0)+(((-1.0)*r10*x3469*x3473))+((x3463*x3466))+(((-1.0)*r12*sj5*x3473))+(((-1.0)*r11*x3465*x3473))+(((-1.0)*x3468*x3474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3476=((1.0)*sj5);
CheckValue<IkReal> x3477=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3476))+(((-1.0)*r20*sj6*x3476)))),-1);
if(!x3477.valid){
continue;
}
CheckValue<IkReal> x3478 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3477.value)))+(x3478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3479=IKsin(j4);
IkReal x3480=IKcos(j4);
IkReal x3481=(cj5*cj6);
IkReal x3482=(r11*sj6);
IkReal x3483=(cj6*r20);
IkReal x3484=(cj6*r10);
IkReal x3485=(cj5*sj6);
IkReal x3486=(r01*sj6);
IkReal x3487=(r21*sj6);
IkReal x3488=(cj6*r00);
IkReal x3489=((1.0)*x3480);
IkReal x3490=((1.0)*x3479);
IkReal x3491=(sj5*x3490);
evalcond[0]=((((-1.0)*r20*x3485*x3490))+(((-1.0)*r21*x3481*x3490))+((x3480*x3483))+(((-1.0)*r22*x3491))+(((-1.0)*x3487*x3489)));
evalcond[1]=((((-1.0)*r12*x3491))+(((-1.0)*x3482*x3489))+(((-1.0)*r10*x3485*x3490))+((x3480*x3484))+(((-1.0)*r11*x3481*x3490)));
evalcond[2]=((((-1.0)*r22*sj5*x3489))+(((-1.0)*x3483*x3490))+(((-1.0)*r21*x3481*x3489))+((x3479*x3487))+(((-1.0)*r20*x3485*x3489)));
evalcond[3]=(((x3479*x3486))+(((-1.0)*x3488*x3490))+(((-1.0)*r02*sj5*x3489))+(((-1.0)*r00*x3485*x3489))+(((-1.0)*r01*x3481*x3489)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x3485*x3490))+(((-1.0)*r02*x3491))+(((-1.0)*r01*x3481*x3490))+((x3480*x3488))+(((-1.0)*x3486*x3489)));
evalcond[5]=((1.0)+((x3479*x3482))+(((-1.0)*r12*sj5*x3489))+(((-1.0)*r11*x3481*x3489))+(((-1.0)*x3484*x3490))+(((-1.0)*r10*x3485*x3489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3492 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3492.valid){
continue;
}
CheckValue<IkReal> x3493=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3492.value)+(((1.5707963267949)*(x3493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3494=IKsin(j4);
IkReal x3495=IKcos(j4);
IkReal x3496=(cj5*cj6);
IkReal x3497=(r11*sj6);
IkReal x3498=(cj6*r20);
IkReal x3499=(cj6*r10);
IkReal x3500=(cj5*sj6);
IkReal x3501=(r01*sj6);
IkReal x3502=(r21*sj6);
IkReal x3503=(cj6*r00);
IkReal x3504=((1.0)*x3495);
IkReal x3505=((1.0)*x3494);
IkReal x3506=(sj5*x3505);
evalcond[0]=((((-1.0)*r21*x3496*x3505))+(((-1.0)*x3502*x3504))+(((-1.0)*r22*x3506))+(((-1.0)*r20*x3500*x3505))+((x3495*x3498)));
evalcond[1]=((((-1.0)*r12*x3506))+(((-1.0)*r10*x3500*x3505))+(((-1.0)*r11*x3496*x3505))+(((-1.0)*x3497*x3504))+((x3495*x3499)));
evalcond[2]=((((-1.0)*r21*x3496*x3504))+(((-1.0)*r22*sj5*x3504))+(((-1.0)*x3498*x3505))+((x3494*x3502))+(((-1.0)*r20*x3500*x3504)));
evalcond[3]=((((-1.0)*r02*sj5*x3504))+((x3494*x3501))+(((-1.0)*r00*x3500*x3504))+(((-1.0)*r01*x3496*x3504))+(((-1.0)*x3503*x3505)));
evalcond[4]=((-1.0)+((x3495*x3503))+(((-1.0)*x3501*x3504))+(((-1.0)*r00*x3500*x3505))+(((-1.0)*r01*x3496*x3505))+(((-1.0)*r02*x3506)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x3504))+((x3494*x3497))+(((-1.0)*r10*x3500*x3504))+(((-1.0)*x3499*x3505))+(((-1.0)*r11*x3496*x3504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3507=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3507;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3508=((1.0)*sj6);
IkReal x3509=((((-1.0)*r00*sj5*x3508))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x3509;
j4eval[1]=IKsign(x3509);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x3508))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3510=cj6*cj6;
IkReal x3511=cj5*cj5;
IkReal x3512=r00*r00;
IkReal x3513=r01*r01;
IkReal x3514=r02*r02;
IkReal x3515=(cj6*r00);
IkReal x3516=(cj5*cj6*r01);
IkReal x3517=((2.0)*r02*sj5);
IkReal x3518=((1.0)*x3510);
IkReal x3519=((2.0)*r01*sj6);
IkReal x3520=(cj5*r00*sj6);
IkReal x3521=(x3511*x3512);
IkReal x3522=((((-1.0)*x3521))+(((-1.0)*x3512*x3518))+((x3510*x3513))+((x3510*x3521))+(((-1.0)*x3511*x3513*x3518))+(((-1.0)*x3517*x3520))+((x3511*x3514))+((x3515*x3519))+(((-1.0)*x3511*x3515*x3519))+(((-1.0)*x3513))+(((-1.0)*x3514))+(((-1.0)*x3516*x3517)));
j4eval[0]=x3522;
j4eval[1]=((IKabs((x3516+x3520+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x3515))));
j4eval[2]=IKsign(x3522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3523=cj6*cj6;
IkReal x3524=cj5*cj5;
IkReal x3525=r00*r00;
IkReal x3526=r01*r01;
IkReal x3527=r02*r02;
IkReal x3528=(cj6*r00);
IkReal x3529=(cj5*cj6*r01);
IkReal x3530=((2.0)*r02*sj5);
IkReal x3531=((1.0)*x3523);
IkReal x3532=((2.0)*r01*sj6);
IkReal x3533=(cj5*r00*sj6);
IkReal x3534=(x3524*x3525);
CheckValue<IkReal> x3535=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3526))+(((-1.0)*x3527))+(((-1.0)*x3524*x3526*x3531))+((x3524*x3527))+(((-1.0)*x3525*x3531))+((x3523*x3526))+(((-1.0)*x3529*x3530))+(((-1.0)*x3524*x3528*x3532))+(((-1.0)*x3534))+(((-1.0)*x3530*x3533))+((x3528*x3532))+((x3523*x3534)))),-1);
if(!x3535.valid){
continue;
}
CheckValue<IkReal> x3536 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3528)),IkReal((x3533+x3529+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3535.value)))+(x3536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3537=IKsin(j4);
IkReal x3538=IKcos(j4);
IkReal x3539=(cj5*cj6);
IkReal x3540=(r11*sj6);
IkReal x3541=(cj6*r20);
IkReal x3542=(cj6*r10);
IkReal x3543=(cj5*sj6);
IkReal x3544=(r21*sj6);
IkReal x3545=(cj6*r00);
IkReal x3546=(r01*sj6);
IkReal x3547=((1.0)*x3538);
IkReal x3548=((1.0)*x3537);
IkReal x3549=(sj5*x3548);
evalcond[0]=(((x3538*x3541))+(((-1.0)*r22*x3549))+(((-1.0)*r21*x3539*x3548))+(((-1.0)*r20*x3543*x3548))+(((-1.0)*x3544*x3547)));
evalcond[1]=((((-1.0)*r02*x3549))+(((-1.0)*r00*x3543*x3548))+((x3538*x3545))+(((-1.0)*r01*x3539*x3548))+(((-1.0)*x3546*x3547)));
evalcond[2]=((((-1.0)*r22*sj5*x3547))+(((-1.0)*x3541*x3548))+(((-1.0)*r21*x3539*x3547))+((x3537*x3544))+(((-1.0)*r20*x3543*x3547)));
evalcond[3]=((((-1.0)*r12*sj5*x3547))+(((-1.0)*x3542*x3548))+((x3537*x3540))+(((-1.0)*r10*x3543*x3547))+(((-1.0)*r11*x3539*x3547)));
evalcond[4]=((-1.0)+((x3538*x3542))+(((-1.0)*r12*x3549))+(((-1.0)*x3540*x3547))+(((-1.0)*r10*x3543*x3548))+(((-1.0)*r11*x3539*x3548)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x3547))+(((-1.0)*x3545*x3548))+(((-1.0)*r00*x3543*x3547))+(((-1.0)*r01*x3539*x3547))+((x3537*x3546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3550=((1.0)*sj6);
CheckValue<IkReal> x3551 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3550))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3551.valid){
continue;
}
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x3550))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x3552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3551.value)+(((1.5707963267949)*(x3552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3553=IKsin(j4);
IkReal x3554=IKcos(j4);
IkReal x3555=(cj5*cj6);
IkReal x3556=(r11*sj6);
IkReal x3557=(cj6*r20);
IkReal x3558=(cj6*r10);
IkReal x3559=(cj5*sj6);
IkReal x3560=(r21*sj6);
IkReal x3561=(cj6*r00);
IkReal x3562=(r01*sj6);
IkReal x3563=((1.0)*x3554);
IkReal x3564=((1.0)*x3553);
IkReal x3565=(sj5*x3564);
evalcond[0]=((((-1.0)*r20*x3559*x3564))+(((-1.0)*x3560*x3563))+(((-1.0)*r22*x3565))+(((-1.0)*r21*x3555*x3564))+((x3554*x3557)));
evalcond[1]=((((-1.0)*r02*x3565))+(((-1.0)*r00*x3559*x3564))+(((-1.0)*r01*x3555*x3564))+(((-1.0)*x3562*x3563))+((x3554*x3561)));
evalcond[2]=((((-1.0)*r20*x3559*x3563))+(((-1.0)*r22*sj5*x3563))+(((-1.0)*r21*x3555*x3563))+((x3553*x3560))+(((-1.0)*x3557*x3564)));
evalcond[3]=((((-1.0)*r12*sj5*x3563))+((x3553*x3556))+(((-1.0)*r11*x3555*x3563))+(((-1.0)*r10*x3559*x3563))+(((-1.0)*x3558*x3564)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x3565))+(((-1.0)*x3556*x3563))+(((-1.0)*r11*x3555*x3564))+(((-1.0)*r10*x3559*x3564))+((x3554*x3558)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x3559*x3563))+(((-1.0)*x3561*x3564))+(((-1.0)*r01*x3555*x3563))+((x3553*x3562))+(((-1.0)*r02*sj5*x3563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3566=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3566.valid){
continue;
}
CheckValue<IkReal> x3567 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3566.value)))+(x3567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3568=IKsin(j4);
IkReal x3569=IKcos(j4);
IkReal x3570=(cj5*cj6);
IkReal x3571=(r11*sj6);
IkReal x3572=(cj6*r20);
IkReal x3573=(cj6*r10);
IkReal x3574=(cj5*sj6);
IkReal x3575=(r21*sj6);
IkReal x3576=(cj6*r00);
IkReal x3577=(r01*sj6);
IkReal x3578=((1.0)*x3569);
IkReal x3579=((1.0)*x3568);
IkReal x3580=(sj5*x3579);
evalcond[0]=((((-1.0)*r20*x3574*x3579))+(((-1.0)*r22*x3580))+(((-1.0)*x3575*x3578))+((x3569*x3572))+(((-1.0)*r21*x3570*x3579)));
evalcond[1]=((((-1.0)*r00*x3574*x3579))+(((-1.0)*r02*x3580))+((x3569*x3576))+(((-1.0)*r01*x3570*x3579))+(((-1.0)*x3577*x3578)));
evalcond[2]=((((-1.0)*r20*x3574*x3578))+(((-1.0)*r22*sj5*x3578))+(((-1.0)*x3572*x3579))+(((-1.0)*r21*x3570*x3578))+((x3568*x3575)));
evalcond[3]=((((-1.0)*r12*sj5*x3578))+(((-1.0)*x3573*x3579))+(((-1.0)*r11*x3570*x3578))+((x3568*x3571))+(((-1.0)*r10*x3574*x3578)));
evalcond[4]=((-1.0)+((x3569*x3573))+(((-1.0)*x3571*x3578))+(((-1.0)*r11*x3570*x3579))+(((-1.0)*r10*x3574*x3579))+(((-1.0)*r12*x3580)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x3574*x3578))+(((-1.0)*r02*sj5*x3578))+(((-1.0)*x3576*x3579))+(((-1.0)*r01*x3570*x3578))+((x3568*x3577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3581=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3581;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3582=((1.0)*sj5);
IkReal x3583=(((cj5*r22))+(((-1.0)*cj6*r21*x3582))+(((-1.0)*r20*sj6*x3582)));
j4eval[0]=x3583;
j4eval[1]=IKsign(x3583);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3584=cj6*cj6;
IkReal x3585=r01*r01;
IkReal x3586=cj5*cj5;
IkReal x3587=r00*r00;
IkReal x3588=r02*r02;
IkReal x3589=(cj6*r00);
IkReal x3590=(r02*sj5);
IkReal x3591=(cj5*cj6*r01);
IkReal x3592=((2.0)*r01*sj6);
IkReal x3593=(cj5*r00*sj6);
IkReal x3594=((1.0)*x3586);
IkReal x3595=(x3584*x3587);
IkReal x3596=(x3584*x3585);
IkReal x3597=(((x3586*x3596))+(((-1.0)*x3594*x3595))+(((-1.0)*x3589*x3592))+((x3586*x3587))+x3585+x3588+x3595+((x3586*x3589*x3592))+(((2.0)*x3590*x3591))+(((2.0)*x3590*x3593))+(((-1.0)*x3596))+(((-1.0)*x3588*x3594)));
j4eval[0]=x3597;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x3589)))+(IKabs((x3593+x3591+x3590))));
j4eval[2]=IKsign(x3597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3598=cj6*cj6;
IkReal x3599=r01*r01;
IkReal x3600=cj5*cj5;
IkReal x3601=r00*r00;
IkReal x3602=r02*r02;
IkReal x3603=(cj6*r00);
IkReal x3604=((2.0)*r01);
IkReal x3605=(cj5*cj6);
IkReal x3606=(r02*sj5);
IkReal x3607=(cj5*r00*sj6);
IkReal x3608=(x3600*x3601);
IkReal x3609=(x3598*x3599);
CheckValue<IkReal> x3610=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3600*x3602))+((x3598*x3601))+(((-1.0)*x3598*x3608))+x3599+(((-1.0)*x3609))+((x3600*x3609))+(((2.0)*x3606*x3607))+x3602+x3608+(((-1.0)*sj6*x3603*x3604))+((sj6*x3600*x3603*x3604))+((x3604*x3605*x3606)))),-1);
if(!x3610.valid){
continue;
}
CheckValue<IkReal> x3611 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3603)),IkReal((x3607+x3606+((r01*x3605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3610.value)))+(x3611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3612=IKsin(j4);
IkReal x3613=IKcos(j4);
IkReal x3614=(cj5*cj6);
IkReal x3615=(r11*sj6);
IkReal x3616=(cj6*r20);
IkReal x3617=(cj6*r10);
IkReal x3618=(cj5*sj6);
IkReal x3619=(r21*sj6);
IkReal x3620=(cj6*r00);
IkReal x3621=(r01*sj6);
IkReal x3622=((1.0)*x3613);
IkReal x3623=((1.0)*x3612);
IkReal x3624=(sj5*x3623);
evalcond[0]=(((x3613*x3616))+(((-1.0)*r21*x3614*x3623))+(((-1.0)*x3619*x3622))+(((-1.0)*r22*x3624))+(((-1.0)*r20*x3618*x3623)));
evalcond[1]=((((-1.0)*x3621*x3622))+(((-1.0)*r01*x3614*x3623))+(((-1.0)*r00*x3618*x3623))+((x3613*x3620))+(((-1.0)*r02*x3624)));
evalcond[2]=(((x3612*x3619))+(((-1.0)*r21*x3614*x3622))+(((-1.0)*r20*x3618*x3622))+(((-1.0)*x3616*x3623))+(((-1.0)*r22*sj5*x3622)));
evalcond[3]=((((-1.0)*r11*x3614*x3622))+((x3612*x3615))+(((-1.0)*r12*sj5*x3622))+(((-1.0)*x3617*x3623))+(((-1.0)*r10*x3618*x3622)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3614*x3623))+((x3613*x3617))+(((-1.0)*r12*x3624))+(((-1.0)*r10*x3618*x3623))+(((-1.0)*x3615*x3622)));
evalcond[5]=((1.0)+(((-1.0)*r01*x3614*x3622))+(((-1.0)*r02*sj5*x3622))+(((-1.0)*r00*x3618*x3622))+((x3612*x3621))+(((-1.0)*x3620*x3623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3625=((1.0)*sj5);
CheckValue<IkReal> x3626 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3626.valid){
continue;
}
CheckValue<IkReal> x3627=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3625))+(((-1.0)*r20*sj6*x3625)))),-1);
if(!x3627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3626.value)+(((1.5707963267949)*(x3627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3628=IKsin(j4);
IkReal x3629=IKcos(j4);
IkReal x3630=(cj5*cj6);
IkReal x3631=(r11*sj6);
IkReal x3632=(cj6*r20);
IkReal x3633=(cj6*r10);
IkReal x3634=(cj5*sj6);
IkReal x3635=(r21*sj6);
IkReal x3636=(cj6*r00);
IkReal x3637=(r01*sj6);
IkReal x3638=((1.0)*x3629);
IkReal x3639=((1.0)*x3628);
IkReal x3640=(sj5*x3639);
evalcond[0]=((((-1.0)*r21*x3630*x3639))+(((-1.0)*r20*x3634*x3639))+((x3629*x3632))+(((-1.0)*r22*x3640))+(((-1.0)*x3635*x3638)));
evalcond[1]=((((-1.0)*x3637*x3638))+(((-1.0)*r00*x3634*x3639))+(((-1.0)*r01*x3630*x3639))+((x3629*x3636))+(((-1.0)*r02*x3640)));
evalcond[2]=((((-1.0)*r21*x3630*x3638))+(((-1.0)*r20*x3634*x3638))+((x3628*x3635))+(((-1.0)*r22*sj5*x3638))+(((-1.0)*x3632*x3639)));
evalcond[3]=((((-1.0)*r12*sj5*x3638))+(((-1.0)*r10*x3634*x3638))+(((-1.0)*x3633*x3639))+((x3628*x3631))+(((-1.0)*r11*x3630*x3638)));
evalcond[4]=((1.0)+(((-1.0)*x3631*x3638))+(((-1.0)*r10*x3634*x3639))+(((-1.0)*r12*x3640))+((x3629*x3633))+(((-1.0)*r11*x3630*x3639)));
evalcond[5]=((1.0)+(((-1.0)*r00*x3634*x3638))+(((-1.0)*r01*x3630*x3638))+((x3628*x3637))+(((-1.0)*r02*sj5*x3638))+(((-1.0)*x3636*x3639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3641 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3641.valid){
continue;
}
CheckValue<IkReal> x3642=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3641.value)+(((1.5707963267949)*(x3642.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3643=IKsin(j4);
IkReal x3644=IKcos(j4);
IkReal x3645=(cj5*cj6);
IkReal x3646=(r11*sj6);
IkReal x3647=(cj6*r20);
IkReal x3648=(cj6*r10);
IkReal x3649=(cj5*sj6);
IkReal x3650=(r21*sj6);
IkReal x3651=(cj6*r00);
IkReal x3652=(r01*sj6);
IkReal x3653=((1.0)*x3644);
IkReal x3654=((1.0)*x3643);
IkReal x3655=(sj5*x3654);
evalcond[0]=((((-1.0)*r21*x3645*x3654))+(((-1.0)*x3650*x3653))+(((-1.0)*r20*x3649*x3654))+(((-1.0)*r22*x3655))+((x3644*x3647)));
evalcond[1]=(((x3644*x3651))+(((-1.0)*r00*x3649*x3654))+(((-1.0)*r01*x3645*x3654))+(((-1.0)*r02*x3655))+(((-1.0)*x3652*x3653)));
evalcond[2]=(((x3643*x3650))+(((-1.0)*r21*x3645*x3653))+(((-1.0)*r20*x3649*x3653))+(((-1.0)*x3647*x3654))+(((-1.0)*r22*sj5*x3653)));
evalcond[3]=((((-1.0)*r12*sj5*x3653))+((x3643*x3646))+(((-1.0)*x3648*x3654))+(((-1.0)*r11*x3645*x3653))+(((-1.0)*r10*x3649*x3653)));
evalcond[4]=((1.0)+(((-1.0)*x3646*x3653))+(((-1.0)*r12*x3655))+(((-1.0)*r11*x3645*x3654))+(((-1.0)*r10*x3649*x3654))+((x3644*x3648)));
evalcond[5]=((1.0)+((x3643*x3652))+(((-1.0)*r00*x3649*x3653))+(((-1.0)*r01*x3645*x3653))+(((-1.0)*x3651*x3654))+(((-1.0)*r02*sj5*x3653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3656=cj6*cj6;
IkReal x3657=cj5*cj5;
IkReal x3658=(r22*sj5);
IkReal x3659=(cj0*r20);
IkReal x3660=((1.0)*r21);
IkReal x3661=(cj5*sj6);
IkReal x3662=(r02*r22);
IkReal x3663=(cj5*cj6);
IkReal x3664=(r02*sj5);
IkReal x3665=(cj6*sj6);
IkReal x3666=((1.0)*r20);
IkReal x3667=(r01*x3660);
IkReal x3668=(r00*r20*x3657);
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal((((cj6*x3659))+(((-1.0)*cj0*sj6*x3660)))),IkReal((((x3659*x3661))+((cj0*r21*x3663))+((cj0*x3658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
CheckValue<IkReal> x3670=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3656*x3657*x3667))+((x3656*x3668))+(((-1.0)*x3667))+(((-1.0)*x3662))+(((-1.0)*r00*x3657*x3666))+(((-1.0)*r01*x3657*x3665*x3666))+((x3657*x3662))+((r00*r21*x3665))+(((-1.0)*r00*x3657*x3660*x3665))+(((-1.0)*r00*x3656*x3666))+(((-1.0)*x3661*x3664*x3666))+(((-1.0)*r00*x3658*x3661))+(((-1.0)*x3660*x3663*x3664))+((r01*r20*x3665))+(((-1.0)*r01*x3658*x3663))+((r01*r21*x3656)))),-1);
if(!x3670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3669.value)+(((1.5707963267949)*(x3670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3671=IKsin(j4);
IkReal x3672=IKcos(j4);
IkReal x3673=((1.0)*cj0);
IkReal x3674=(cj6*r20);
IkReal x3675=(cj5*sj6);
IkReal x3676=((1.0)*sj6);
IkReal x3677=(r21*sj6);
IkReal x3678=(cj6*r00);
IkReal x3679=((1.0)*cj5*cj6);
IkReal x3680=(r01*x3672);
IkReal x3681=(r11*x3671);
IkReal x3682=((1.0)*x3671);
IkReal x3683=(r11*x3672);
IkReal x3684=(r10*x3672);
IkReal x3685=((1.0)*x3672);
IkReal x3686=(r01*x3671);
IkReal x3687=(sj5*x3682);
evalcond[0]=((((-1.0)*r22*x3687))+(((-1.0)*r21*x3672*x3676))+(((-1.0)*r20*x3675*x3682))+((x3672*x3674))+(((-1.0)*r21*x3671*x3679)));
evalcond[1]=((((-1.0)*r21*x3672*x3679))+(((-1.0)*x3674*x3682))+(((-1.0)*r20*x3675*x3685))+((x3671*x3677))+(((-1.0)*r22*sj5*x3685)));
evalcond[2]=(sj0+(((-1.0)*r00*x3675*x3682))+(((-1.0)*x3676*x3680))+(((-1.0)*x3679*x3686))+((x3672*x3678))+(((-1.0)*r02*x3687)));
evalcond[3]=(((cj6*x3684))+(((-1.0)*r10*x3675*x3682))+(((-1.0)*x3676*x3683))+(((-1.0)*x3679*x3681))+(((-1.0)*r12*x3687))+(((-1.0)*x3673)));
evalcond[4]=((((-1.0)*r00*x3675*x3685))+((sj6*x3686))+(((-1.0)*r02*sj5*x3685))+(((-1.0)*x3679*x3680))+(((-1.0)*x3678*x3682))+(((-1.0)*x3673)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x3682))+(((-1.0)*r12*sj5*x3685))+((sj6*x3681))+(((-1.0)*x3675*x3684))+(((-1.0)*x3679*x3683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3688=(cj0*sj6);
IkReal x3689=((1.0)*sj5);
IkReal x3690=(cj0*cj6);
CheckValue<IkReal> x3691=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x3689))+(((-1.0)*cj6*r01*x3689))+((cj5*r02)))),-1);
if(!x3691.valid){
continue;
}
CheckValue<IkReal> x3692 = IKatan2WithCheck(IkReal((((r20*x3690))+(((-1.0)*r21*x3688)))),IkReal((((cj5*r21*x3690))+((cj5*r20*x3688))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3691.value)))+(x3692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3693=IKsin(j4);
IkReal x3694=IKcos(j4);
IkReal x3695=((1.0)*cj0);
IkReal x3696=(cj6*r20);
IkReal x3697=(cj5*sj6);
IkReal x3698=((1.0)*sj6);
IkReal x3699=(r21*sj6);
IkReal x3700=(cj6*r00);
IkReal x3701=((1.0)*cj5*cj6);
IkReal x3702=(r01*x3694);
IkReal x3703=(r11*x3693);
IkReal x3704=((1.0)*x3693);
IkReal x3705=(r11*x3694);
IkReal x3706=(r10*x3694);
IkReal x3707=((1.0)*x3694);
IkReal x3708=(r01*x3693);
IkReal x3709=(sj5*x3704);
evalcond[0]=((((-1.0)*r21*x3694*x3698))+(((-1.0)*r21*x3693*x3701))+(((-1.0)*r20*x3697*x3704))+((x3694*x3696))+(((-1.0)*r22*x3709)));
evalcond[1]=((((-1.0)*r22*sj5*x3707))+(((-1.0)*r21*x3694*x3701))+(((-1.0)*r20*x3697*x3707))+((x3693*x3699))+(((-1.0)*x3696*x3704)));
evalcond[2]=((((-1.0)*x3698*x3702))+(((-1.0)*r02*x3709))+sj0+(((-1.0)*x3701*x3708))+((x3694*x3700))+(((-1.0)*r00*x3697*x3704)));
evalcond[3]=((((-1.0)*x3698*x3705))+(((-1.0)*r10*x3697*x3704))+(((-1.0)*x3701*x3703))+(((-1.0)*r12*x3709))+(((-1.0)*x3695))+((cj6*x3706)));
evalcond[4]=((((-1.0)*r02*sj5*x3707))+(((-1.0)*x3700*x3704))+(((-1.0)*x3701*x3702))+(((-1.0)*r00*x3697*x3707))+(((-1.0)*x3695))+((sj6*x3708)));
evalcond[5]=((((-1.0)*x3697*x3706))+(((-1.0)*sj0))+(((-1.0)*x3701*x3705))+(((-1.0)*cj6*r10*x3704))+((sj6*x3703))+(((-1.0)*r12*sj5*x3707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3710=(cj5*sj0);
IkReal x3711=((1.0)*sj5);
CheckValue<IkReal> x3712=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x3711))+(((-1.0)*cj6*r11*x3711)))),-1);
if(!x3712.valid){
continue;
}
CheckValue<IkReal> x3713 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r20*sj6*x3710))+((r22*sj0*sj5))+((cj6*r21*x3710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3712.value)))+(x3713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3714=IKsin(j4);
IkReal x3715=IKcos(j4);
IkReal x3716=((1.0)*cj0);
IkReal x3717=(cj6*r20);
IkReal x3718=(cj5*sj6);
IkReal x3719=((1.0)*sj6);
IkReal x3720=(r21*sj6);
IkReal x3721=(cj6*r00);
IkReal x3722=((1.0)*cj5*cj6);
IkReal x3723=(r01*x3715);
IkReal x3724=(r11*x3714);
IkReal x3725=((1.0)*x3714);
IkReal x3726=(r11*x3715);
IkReal x3727=(r10*x3715);
IkReal x3728=((1.0)*x3715);
IkReal x3729=(r01*x3714);
IkReal x3730=(sj5*x3725);
evalcond[0]=((((-1.0)*r21*x3715*x3719))+(((-1.0)*r20*x3718*x3725))+(((-1.0)*r21*x3714*x3722))+(((-1.0)*r22*x3730))+((x3715*x3717)));
evalcond[1]=((((-1.0)*r22*sj5*x3728))+(((-1.0)*r21*x3715*x3722))+(((-1.0)*r20*x3718*x3728))+((x3714*x3720))+(((-1.0)*x3717*x3725)));
evalcond[2]=(sj0+(((-1.0)*r00*x3718*x3725))+(((-1.0)*x3719*x3723))+((x3715*x3721))+(((-1.0)*x3722*x3729))+(((-1.0)*r02*x3730)));
evalcond[3]=(((cj6*x3727))+(((-1.0)*r12*x3730))+(((-1.0)*x3716))+(((-1.0)*r10*x3718*x3725))+(((-1.0)*x3719*x3726))+(((-1.0)*x3722*x3724)));
evalcond[4]=(((sj6*x3729))+(((-1.0)*x3716))+(((-1.0)*r02*sj5*x3728))+(((-1.0)*r00*x3718*x3728))+(((-1.0)*x3721*x3725))+(((-1.0)*x3722*x3723)));
evalcond[5]=(((sj6*x3724))+(((-1.0)*sj0))+(((-1.0)*x3718*x3727))+(((-1.0)*cj6*r10*x3725))+(((-1.0)*x3722*x3726))+(((-1.0)*r12*sj5*x3728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3731=(cj0*sj6);
IkReal x3732=(cj0*cj6);
IkReal x3733=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3733;
j4eval[1]=((IKabs(((((-1.0)*r21*x3731))+((r20*x3732)))))+(IKabs((((cj5*r20*x3731))+((cj5*r21*x3732))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x3733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3734=cj5*cj5;
IkReal x3735=cj6*cj6;
IkReal x3736=(r00*r20);
IkReal x3737=(r02*r22);
IkReal x3738=(r22*sj5);
IkReal x3739=(cj6*r21);
IkReal x3740=(r00*sj6);
IkReal x3741=(r20*sj6);
IkReal x3742=(cj6*r01);
IkReal x3743=(cj0*cj5);
IkReal x3744=((1.0)*x3734);
IkReal x3745=(cj5*r02*sj5);
IkReal x3746=(r01*r21*x3735);
IkReal x3747=(((x3734*x3736))+(((-1.0)*x3737*x3744))+((x3735*x3736))+(((-1.0)*x3741*x3742))+((r01*r21))+((x3734*x3746))+((cj5*x3738*x3742))+((cj5*x3738*x3740))+x3737+(((-1.0)*x3746))+((x3734*x3739*x3740))+((x3741*x3745))+(((-1.0)*x3739*x3740))+((x3739*x3745))+(((-1.0)*x3735*x3736*x3744))+((x3734*x3741*x3742)));
j4eval[0]=x3747;
j4eval[1]=IKsign(x3747);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((cj0*x3738))+((x3741*x3743))+((x3739*x3743))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3748=cj6*cj6;
IkReal x3749=cj5*cj5;
IkReal x3750=(r12*sj5);
IkReal x3751=(r22*sj5);
IkReal x3752=((1.0)*r11);
IkReal x3753=(r20*sj0);
IkReal x3754=(r10*r20);
IkReal x3755=(cj5*sj6);
IkReal x3756=(cj6*r10);
IkReal x3757=(r12*r22);
IkReal x3758=(cj5*cj6*r21);
IkReal x3759=(r21*x3748);
IkReal x3760=(cj6*r20*sj6);
IkReal x3761=(r11*x3749);
IkReal x3762=((1.0)*r21*sj6);
IkReal x3763=((1.0)*x3749);
IkReal x3764=(((r10*x3751*x3755))+((cj5*cj6*r11*x3751))+(((-1.0)*x3752*x3759))+(((-1.0)*x3757*x3763))+(((-1.0)*x3748*x3754*x3763))+((r11*r21))+(((-1.0)*x3752*x3760))+((x3748*x3754))+x3757+((x3749*x3754))+((x3759*x3761))+((r20*x3750*x3755))+((x3750*x3758))+((x3760*x3761))+(((-1.0)*x3756*x3762))+((r21*sj6*x3749*x3756)));
j4eval[0]=x3764;
j4eval[1]=IKsign(x3764);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3762))+((cj6*x3753)))))+(IKabs((((sj0*x3758))+((sj0*x3751))+((x3753*x3755))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3765=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3765;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3765);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3766=((1.0)*sj5);
IkReal x3767=(((cj5*r22))+(((-1.0)*r20*sj6*x3766))+(((-1.0)*cj6*r21*x3766)));
j4eval[0]=x3767;
j4eval[1]=IKsign(x3767);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3768=cj6*cj6;
IkReal x3769=r01*r01;
IkReal x3770=cj5*cj5;
IkReal x3771=r00*r00;
IkReal x3772=r02*r02;
IkReal x3773=(cj6*r00);
IkReal x3774=(r02*sj5);
IkReal x3775=(cj5*cj6*r01);
IkReal x3776=((2.0)*r01*sj6);
IkReal x3777=(cj5*r00*sj6);
IkReal x3778=((1.0)*x3770);
IkReal x3779=(x3768*x3771);
IkReal x3780=(x3768*x3769);
IkReal x3781=(((x3770*x3773*x3776))+(((-1.0)*x3780))+(((-1.0)*x3778*x3779))+(((2.0)*x3774*x3775))+(((2.0)*x3774*x3777))+(((-1.0)*x3773*x3776))+x3769+x3772+x3779+((x3770*x3771))+((x3770*x3780))+(((-1.0)*x3772*x3778)));
j4eval[0]=x3781;
j4eval[1]=((IKabs((x3777+x3775+x3774)))+(IKabs(((((-1.0)*r01*sj6))+x3773))));
j4eval[2]=IKsign(x3781);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3782=cj6*cj6;
IkReal x3783=r01*r01;
IkReal x3784=cj5*cj5;
IkReal x3785=r00*r00;
IkReal x3786=r02*r02;
IkReal x3787=(cj6*r00);
IkReal x3788=((2.0)*r01);
IkReal x3789=(cj5*cj6);
IkReal x3790=(r02*sj5);
IkReal x3791=(cj5*r00*sj6);
IkReal x3792=(x3784*x3785);
IkReal x3793=(x3782*x3783);
CheckValue<IkReal> x3794=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3784*x3786))+(((-1.0)*x3793))+((x3782*x3785))+((sj6*x3784*x3787*x3788))+(((-1.0)*x3782*x3792))+x3783+x3786+x3792+(((2.0)*x3790*x3791))+(((-1.0)*sj6*x3787*x3788))+((x3784*x3793))+((x3788*x3789*x3790)))),-1);
if(!x3794.valid){
continue;
}
CheckValue<IkReal> x3795 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3787)),IkReal((x3791+x3790+((r01*x3789)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3794.value)))+(x3795.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3796=IKsin(j4);
IkReal x3797=IKcos(j4);
IkReal x3798=(cj5*cj6);
IkReal x3799=(r11*sj6);
IkReal x3800=(cj6*r20);
IkReal x3801=(cj6*r10);
IkReal x3802=(cj5*sj6);
IkReal x3803=(r21*sj6);
IkReal x3804=(cj6*r00);
IkReal x3805=(r01*sj6);
IkReal x3806=((1.0)*x3797);
IkReal x3807=((1.0)*x3796);
IkReal x3808=(sj5*x3807);
evalcond[0]=((((-1.0)*r20*x3802*x3807))+((x3797*x3800))+(((-1.0)*r21*x3798*x3807))+(((-1.0)*x3803*x3806))+(((-1.0)*r22*x3808)));
evalcond[1]=((((-1.0)*x3805*x3806))+((x3797*x3804))+(((-1.0)*r01*x3798*x3807))+(((-1.0)*r02*x3808))+(((-1.0)*r00*x3802*x3807)));
evalcond[2]=((((-1.0)*r22*sj5*x3806))+(((-1.0)*r20*x3802*x3806))+(((-1.0)*x3800*x3807))+((x3796*x3803))+(((-1.0)*r21*x3798*x3806)));
evalcond[3]=(((x3796*x3799))+(((-1.0)*x3801*x3807))+(((-1.0)*r10*x3802*x3806))+(((-1.0)*r12*sj5*x3806))+(((-1.0)*r11*x3798*x3806)));
evalcond[4]=((1.0)+((x3797*x3801))+(((-1.0)*r10*x3802*x3807))+(((-1.0)*x3799*x3806))+(((-1.0)*r11*x3798*x3807))+(((-1.0)*r12*x3808)));
evalcond[5]=((1.0)+(((-1.0)*r01*x3798*x3806))+(((-1.0)*r02*sj5*x3806))+((x3796*x3805))+(((-1.0)*r00*x3802*x3806))+(((-1.0)*x3804*x3807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3809=((1.0)*sj5);
CheckValue<IkReal> x3810 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3810.valid){
continue;
}
CheckValue<IkReal> x3811=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x3809))+(((-1.0)*cj6*r21*x3809)))),-1);
if(!x3811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3810.value)+(((1.5707963267949)*(x3811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3812=IKsin(j4);
IkReal x3813=IKcos(j4);
IkReal x3814=(cj5*cj6);
IkReal x3815=(r11*sj6);
IkReal x3816=(cj6*r20);
IkReal x3817=(cj6*r10);
IkReal x3818=(cj5*sj6);
IkReal x3819=(r21*sj6);
IkReal x3820=(cj6*r00);
IkReal x3821=(r01*sj6);
IkReal x3822=((1.0)*x3813);
IkReal x3823=((1.0)*x3812);
IkReal x3824=(sj5*x3823);
evalcond[0]=((((-1.0)*r22*x3824))+((x3813*x3816))+(((-1.0)*r21*x3814*x3823))+(((-1.0)*r20*x3818*x3823))+(((-1.0)*x3819*x3822)));
evalcond[1]=(((x3813*x3820))+(((-1.0)*r02*x3824))+(((-1.0)*x3821*x3822))+(((-1.0)*r00*x3818*x3823))+(((-1.0)*r01*x3814*x3823)));
evalcond[2]=((((-1.0)*r21*x3814*x3822))+(((-1.0)*r20*x3818*x3822))+(((-1.0)*x3816*x3823))+(((-1.0)*r22*sj5*x3822))+((x3812*x3819)));
evalcond[3]=((((-1.0)*r10*x3818*x3822))+(((-1.0)*x3817*x3823))+(((-1.0)*r12*sj5*x3822))+(((-1.0)*r11*x3814*x3822))+((x3812*x3815)));
evalcond[4]=((1.0)+(((-1.0)*r12*x3824))+(((-1.0)*r10*x3818*x3823))+((x3813*x3817))+(((-1.0)*x3815*x3822))+(((-1.0)*r11*x3814*x3823)));
evalcond[5]=((1.0)+(((-1.0)*r00*x3818*x3822))+(((-1.0)*r02*sj5*x3822))+(((-1.0)*r01*x3814*x3822))+((x3812*x3821))+(((-1.0)*x3820*x3823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3825 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3825.valid){
continue;
}
CheckValue<IkReal> x3826=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3826.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3825.value)+(((1.5707963267949)*(x3826.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3827=IKsin(j4);
IkReal x3828=IKcos(j4);
IkReal x3829=(cj5*cj6);
IkReal x3830=(r11*sj6);
IkReal x3831=(cj6*r20);
IkReal x3832=(cj6*r10);
IkReal x3833=(cj5*sj6);
IkReal x3834=(r21*sj6);
IkReal x3835=(cj6*r00);
IkReal x3836=(r01*sj6);
IkReal x3837=((1.0)*x3828);
IkReal x3838=((1.0)*x3827);
IkReal x3839=(sj5*x3838);
evalcond[0]=((((-1.0)*r20*x3833*x3838))+(((-1.0)*r21*x3829*x3838))+((x3828*x3831))+(((-1.0)*r22*x3839))+(((-1.0)*x3834*x3837)));
evalcond[1]=(((x3828*x3835))+(((-1.0)*r01*x3829*x3838))+(((-1.0)*r00*x3833*x3838))+(((-1.0)*x3836*x3837))+(((-1.0)*r02*x3839)));
evalcond[2]=((((-1.0)*x3831*x3838))+(((-1.0)*r20*x3833*x3837))+(((-1.0)*r21*x3829*x3837))+((x3827*x3834))+(((-1.0)*r22*sj5*x3837)));
evalcond[3]=((((-1.0)*r11*x3829*x3837))+(((-1.0)*r12*sj5*x3837))+(((-1.0)*x3832*x3838))+((x3827*x3830))+(((-1.0)*r10*x3833*x3837)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3829*x3838))+(((-1.0)*x3830*x3837))+((x3828*x3832))+(((-1.0)*r12*x3839))+(((-1.0)*r10*x3833*x3838)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x3837))+((x3827*x3836))+(((-1.0)*r01*x3829*x3837))+(((-1.0)*r00*x3833*x3837))+(((-1.0)*x3835*x3838)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3840=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3840;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3841=((1.0)*sj6);
IkReal x3842=((((-1.0)*r00*sj5*x3841))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x3842;
j4eval[1]=IKsign(x3842);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3841))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3843=cj6*cj6;
IkReal x3844=cj5*cj5;
IkReal x3845=r00*r00;
IkReal x3846=r01*r01;
IkReal x3847=r02*r02;
IkReal x3848=(cj6*r00);
IkReal x3849=(cj5*cj6*r01);
IkReal x3850=((2.0)*r02*sj5);
IkReal x3851=((1.0)*x3843);
IkReal x3852=((2.0)*r01*sj6);
IkReal x3853=(cj5*r00*sj6);
IkReal x3854=(x3844*x3845);
IkReal x3855=((((-1.0)*x3850*x3853))+(((-1.0)*x3844*x3848*x3852))+((x3848*x3852))+((x3844*x3847))+(((-1.0)*x3854))+((x3843*x3854))+(((-1.0)*x3847))+(((-1.0)*x3846))+((x3843*x3846))+(((-1.0)*x3844*x3846*x3851))+(((-1.0)*x3845*x3851))+(((-1.0)*x3849*x3850)));
j4eval[0]=x3855;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x3848)))+(IKabs((((r02*sj5))+x3853+x3849))));
j4eval[2]=IKsign(x3855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3856=cj6*cj6;
IkReal x3857=cj5*cj5;
IkReal x3858=r00*r00;
IkReal x3859=r01*r01;
IkReal x3860=r02*r02;
IkReal x3861=(cj6*r00);
IkReal x3862=(cj5*cj6*r01);
IkReal x3863=((2.0)*r02*sj5);
IkReal x3864=((1.0)*x3856);
IkReal x3865=((2.0)*r01*sj6);
IkReal x3866=(cj5*r00*sj6);
IkReal x3867=(x3857*x3858);
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3857*x3859*x3864))+(((-1.0)*x3857*x3861*x3865))+(((-1.0)*x3858*x3864))+(((-1.0)*x3863*x3866))+((x3856*x3867))+(((-1.0)*x3860))+(((-1.0)*x3867))+(((-1.0)*x3859))+((x3857*x3860))+((x3856*x3859))+(((-1.0)*x3862*x3863))+((x3861*x3865)))),-1);
if(!x3868.valid){
continue;
}
CheckValue<IkReal> x3869 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3861)),IkReal((((r02*sj5))+x3862+x3866)),IKFAST_ATAN2_MAGTHRESH);
if(!x3869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3868.value)))+(x3869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3870=IKsin(j4);
IkReal x3871=IKcos(j4);
IkReal x3872=(cj5*cj6);
IkReal x3873=(r11*sj6);
IkReal x3874=(cj6*r20);
IkReal x3875=(cj6*r10);
IkReal x3876=(cj5*sj6);
IkReal x3877=(r21*sj6);
IkReal x3878=(cj6*r00);
IkReal x3879=(r01*sj6);
IkReal x3880=((1.0)*x3871);
IkReal x3881=((1.0)*x3870);
IkReal x3882=(sj5*x3881);
evalcond[0]=(((x3871*x3874))+(((-1.0)*r21*x3872*x3881))+(((-1.0)*r22*x3882))+(((-1.0)*x3877*x3880))+(((-1.0)*r20*x3876*x3881)));
evalcond[1]=((((-1.0)*r00*x3876*x3881))+(((-1.0)*x3879*x3880))+(((-1.0)*r02*x3882))+((x3871*x3878))+(((-1.0)*r01*x3872*x3881)));
evalcond[2]=((((-1.0)*r22*sj5*x3880))+((x3870*x3877))+(((-1.0)*r21*x3872*x3880))+(((-1.0)*r20*x3876*x3880))+(((-1.0)*x3874*x3881)));
evalcond[3]=((((-1.0)*r11*x3872*x3880))+((x3870*x3873))+(((-1.0)*r12*sj5*x3880))+(((-1.0)*r10*x3876*x3880))+(((-1.0)*x3875*x3881)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x3872*x3881))+((x3871*x3875))+(((-1.0)*x3873*x3880))+(((-1.0)*r10*x3876*x3881))+(((-1.0)*r12*x3882)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x3876*x3880))+((x3870*x3879))+(((-1.0)*r01*x3872*x3880))+(((-1.0)*x3878*x3881))+(((-1.0)*r02*sj5*x3880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3883=((1.0)*sj6);
CheckValue<IkReal> x3884 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3883))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3884.valid){
continue;
}
CheckValue<IkReal> x3885=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x3883))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x3885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3884.value)+(((1.5707963267949)*(x3885.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3886=IKsin(j4);
IkReal x3887=IKcos(j4);
IkReal x3888=(cj5*cj6);
IkReal x3889=(r11*sj6);
IkReal x3890=(cj6*r20);
IkReal x3891=(cj6*r10);
IkReal x3892=(cj5*sj6);
IkReal x3893=(r21*sj6);
IkReal x3894=(cj6*r00);
IkReal x3895=(r01*sj6);
IkReal x3896=((1.0)*x3887);
IkReal x3897=((1.0)*x3886);
IkReal x3898=(sj5*x3897);
evalcond[0]=((((-1.0)*r20*x3892*x3897))+(((-1.0)*r22*x3898))+(((-1.0)*x3893*x3896))+((x3887*x3890))+(((-1.0)*r21*x3888*x3897)));
evalcond[1]=((((-1.0)*x3895*x3896))+((x3887*x3894))+(((-1.0)*r01*x3888*x3897))+(((-1.0)*r00*x3892*x3897))+(((-1.0)*r02*x3898)));
evalcond[2]=((((-1.0)*r20*x3892*x3896))+((x3886*x3893))+(((-1.0)*r21*x3888*x3896))+(((-1.0)*r22*sj5*x3896))+(((-1.0)*x3890*x3897)));
evalcond[3]=(((x3886*x3889))+(((-1.0)*r12*sj5*x3896))+(((-1.0)*x3891*x3897))+(((-1.0)*r10*x3892*x3896))+(((-1.0)*r11*x3888*x3896)));
evalcond[4]=((-1.0)+(((-1.0)*x3889*x3896))+(((-1.0)*r12*x3898))+((x3887*x3891))+(((-1.0)*r10*x3892*x3897))+(((-1.0)*r11*x3888*x3897)));
evalcond[5]=((-1.0)+((x3886*x3895))+(((-1.0)*x3894*x3897))+(((-1.0)*r01*x3888*x3896))+(((-1.0)*r02*sj5*x3896))+(((-1.0)*r00*x3892*x3896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3899=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3899.valid){
continue;
}
CheckValue<IkReal> x3900 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3899.value)))+(x3900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3901=IKsin(j4);
IkReal x3902=IKcos(j4);
IkReal x3903=(cj5*cj6);
IkReal x3904=(r11*sj6);
IkReal x3905=(cj6*r20);
IkReal x3906=(cj6*r10);
IkReal x3907=(cj5*sj6);
IkReal x3908=(r21*sj6);
IkReal x3909=(cj6*r00);
IkReal x3910=(r01*sj6);
IkReal x3911=((1.0)*x3902);
IkReal x3912=((1.0)*x3901);
IkReal x3913=(sj5*x3912);
evalcond[0]=((((-1.0)*r21*x3903*x3912))+((x3902*x3905))+(((-1.0)*x3908*x3911))+(((-1.0)*r22*x3913))+(((-1.0)*r20*x3907*x3912)));
evalcond[1]=((((-1.0)*r02*x3913))+(((-1.0)*r01*x3903*x3912))+((x3902*x3909))+(((-1.0)*x3910*x3911))+(((-1.0)*r00*x3907*x3912)));
evalcond[2]=((((-1.0)*x3905*x3912))+((x3901*x3908))+(((-1.0)*r21*x3903*x3911))+(((-1.0)*r20*x3907*x3911))+(((-1.0)*r22*sj5*x3911)));
evalcond[3]=(((x3901*x3904))+(((-1.0)*x3906*x3912))+(((-1.0)*r10*x3907*x3911))+(((-1.0)*r11*x3903*x3911))+(((-1.0)*r12*sj5*x3911)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x3907*x3912))+(((-1.0)*x3904*x3911))+((x3902*x3906))+(((-1.0)*r11*x3903*x3912))+(((-1.0)*r12*x3913)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x3903*x3911))+(((-1.0)*x3909*x3912))+(((-1.0)*r02*sj5*x3911))+(((-1.0)*r00*x3907*x3911))+((x3901*x3910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3914=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3914;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3914);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3915=((1.0)*sj5);
IkReal x3916=(((cj5*r22))+(((-1.0)*r20*sj6*x3915))+(((-1.0)*cj6*r21*x3915)));
j4eval[0]=x3916;
j4eval[1]=IKsign(x3916);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3917=r11*r11;
IkReal x3918=cj5*cj5;
IkReal x3919=cj6*cj6;
IkReal x3920=r10*r10;
IkReal x3921=r12*r12;
IkReal x3922=(r12*sj5);
IkReal x3923=(cj6*r10);
IkReal x3924=((1.0)*x3919);
IkReal x3925=(cj5*cj6*r11);
IkReal x3926=(cj5*r10*sj6);
IkReal x3927=((2.0)*r11*sj6);
IkReal x3928=(x3918*x3920);
IkReal x3929=(((x3919*x3920))+(((-1.0)*x3924*x3928))+(((-1.0)*x3917*x3924))+((x3918*x3923*x3927))+x3921+x3928+x3917+((x3917*x3918*x3919))+(((2.0)*x3922*x3926))+(((2.0)*x3922*x3925))+(((-1.0)*x3923*x3927))+(((-1.0)*x3918*x3921)));
j4eval[0]=x3929;
j4eval[1]=IKsign(x3929);
j4eval[2]=((IKabs((x3922+x3926+x3925)))+(IKabs((x3923+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3930=r11*r11;
IkReal x3931=cj5*cj5;
IkReal x3932=cj6*cj6;
IkReal x3933=r10*r10;
IkReal x3934=r12*r12;
IkReal x3935=(r10*sj6);
IkReal x3936=(r12*sj5);
IkReal x3937=((1.0)*x3932);
IkReal x3938=(cj5*cj6*r11);
IkReal x3939=((2.0)*cj6*r11);
IkReal x3940=(x3931*x3933);
CheckValue<IkReal> x3941=IKPowWithIntegerCheck(IKsign(((((2.0)*x3936*x3938))+((x3930*x3931*x3932))+(((-1.0)*x3937*x3940))+(((-1.0)*x3931*x3934))+((x3932*x3933))+((x3931*x3935*x3939))+(((2.0)*cj5*x3935*x3936))+x3934+x3930+x3940+(((-1.0)*x3930*x3937))+(((-1.0)*x3935*x3939)))),-1);
if(!x3941.valid){
continue;
}
CheckValue<IkReal> x3942 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x3938+x3936+((cj5*x3935)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3941.value)))+(x3942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3943=IKsin(j4);
IkReal x3944=IKcos(j4);
IkReal x3945=(cj5*cj6);
IkReal x3946=(r11*sj6);
IkReal x3947=(cj6*r20);
IkReal x3948=(cj6*r10);
IkReal x3949=(cj5*sj6);
IkReal x3950=(r01*sj6);
IkReal x3951=(r21*sj6);
IkReal x3952=(cj6*r00);
IkReal x3953=((1.0)*x3944);
IkReal x3954=((1.0)*x3943);
IkReal x3955=(sj5*x3954);
evalcond[0]=((((-1.0)*r22*x3955))+(((-1.0)*r21*x3945*x3954))+(((-1.0)*r20*x3949*x3954))+(((-1.0)*x3951*x3953))+((x3944*x3947)));
evalcond[1]=((((-1.0)*x3946*x3953))+(((-1.0)*r11*x3945*x3954))+(((-1.0)*r12*x3955))+(((-1.0)*r10*x3949*x3954))+((x3944*x3948)));
evalcond[2]=((((-1.0)*r22*sj5*x3953))+(((-1.0)*r21*x3945*x3953))+(((-1.0)*r20*x3949*x3953))+((x3943*x3951))+(((-1.0)*x3947*x3954)));
evalcond[3]=((((-1.0)*r00*x3949*x3953))+(((-1.0)*r01*x3945*x3953))+(((-1.0)*x3952*x3954))+((x3943*x3950))+(((-1.0)*r02*sj5*x3953)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x3949*x3954))+(((-1.0)*r01*x3945*x3954))+((x3944*x3952))+(((-1.0)*x3950*x3953))+(((-1.0)*r02*x3955)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x3953))+(((-1.0)*x3948*x3954))+(((-1.0)*r11*x3945*x3953))+(((-1.0)*r10*x3949*x3953))+((x3943*x3946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3956=((1.0)*sj5);
CheckValue<IkReal> x3957 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3957.valid){
continue;
}
CheckValue<IkReal> x3958=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3956))+(((-1.0)*r20*sj6*x3956)))),-1);
if(!x3958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3957.value)+(((1.5707963267949)*(x3958.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3959=IKsin(j4);
IkReal x3960=IKcos(j4);
IkReal x3961=(cj5*cj6);
IkReal x3962=(r11*sj6);
IkReal x3963=(cj6*r20);
IkReal x3964=(cj6*r10);
IkReal x3965=(cj5*sj6);
IkReal x3966=(r01*sj6);
IkReal x3967=(r21*sj6);
IkReal x3968=(cj6*r00);
IkReal x3969=((1.0)*x3960);
IkReal x3970=((1.0)*x3959);
IkReal x3971=(sj5*x3970);
evalcond[0]=((((-1.0)*r21*x3961*x3970))+(((-1.0)*r20*x3965*x3970))+((x3960*x3963))+(((-1.0)*r22*x3971))+(((-1.0)*x3967*x3969)));
evalcond[1]=((((-1.0)*r12*x3971))+(((-1.0)*r10*x3965*x3970))+(((-1.0)*x3962*x3969))+(((-1.0)*r11*x3961*x3970))+((x3960*x3964)));
evalcond[2]=((((-1.0)*r21*x3961*x3969))+(((-1.0)*r22*sj5*x3969))+(((-1.0)*r20*x3965*x3969))+((x3959*x3967))+(((-1.0)*x3963*x3970)));
evalcond[3]=((((-1.0)*x3968*x3970))+(((-1.0)*r01*x3961*x3969))+(((-1.0)*r00*x3965*x3969))+(((-1.0)*r02*sj5*x3969))+((x3959*x3966)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x3971))+(((-1.0)*r00*x3965*x3970))+(((-1.0)*r01*x3961*x3970))+((x3960*x3968))+(((-1.0)*x3966*x3969)));
evalcond[5]=((1.0)+(((-1.0)*r10*x3965*x3969))+(((-1.0)*r11*x3961*x3969))+(((-1.0)*r12*sj5*x3969))+((x3959*x3962))+(((-1.0)*x3964*x3970)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3972 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3972.valid){
continue;
}
CheckValue<IkReal> x3973=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3972.value)+(((1.5707963267949)*(x3973.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3974=IKsin(j4);
IkReal x3975=IKcos(j4);
IkReal x3976=(cj5*cj6);
IkReal x3977=(r11*sj6);
IkReal x3978=(cj6*r20);
IkReal x3979=(cj6*r10);
IkReal x3980=(cj5*sj6);
IkReal x3981=(r01*sj6);
IkReal x3982=(r21*sj6);
IkReal x3983=(cj6*r00);
IkReal x3984=((1.0)*x3975);
IkReal x3985=((1.0)*x3974);
IkReal x3986=(sj5*x3985);
evalcond[0]=((((-1.0)*r21*x3976*x3985))+(((-1.0)*r22*x3986))+(((-1.0)*x3982*x3984))+((x3975*x3978))+(((-1.0)*r20*x3980*x3985)));
evalcond[1]=((((-1.0)*r12*x3986))+(((-1.0)*x3977*x3984))+(((-1.0)*r11*x3976*x3985))+((x3975*x3979))+(((-1.0)*r10*x3980*x3985)));
evalcond[2]=((((-1.0)*r21*x3976*x3984))+(((-1.0)*x3978*x3985))+(((-1.0)*r22*sj5*x3984))+(((-1.0)*r20*x3980*x3984))+((x3974*x3982)));
evalcond[3]=((((-1.0)*r00*x3980*x3984))+(((-1.0)*x3983*x3985))+(((-1.0)*r01*x3976*x3984))+(((-1.0)*r02*sj5*x3984))+((x3974*x3981)));
evalcond[4]=((-1.0)+(((-1.0)*x3981*x3984))+((x3975*x3983))+(((-1.0)*r00*x3980*x3985))+(((-1.0)*r01*x3976*x3985))+(((-1.0)*r02*x3986)));
evalcond[5]=((1.0)+(((-1.0)*r11*x3976*x3984))+(((-1.0)*r12*sj5*x3984))+(((-1.0)*x3979*x3985))+((x3974*x3977))+(((-1.0)*r10*x3980*x3984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3987=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3987;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3988=((1.0)*sj6);
IkReal x3989=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3988)));
j4eval[0]=x3989;
j4eval[1]=IKsign(x3989);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3988))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3990=cj6*cj6;
IkReal x3991=cj5*cj5;
IkReal x3992=r10*r10;
IkReal x3993=r11*r11;
IkReal x3994=r12*r12;
IkReal x3995=(r10*sj6);
IkReal x3996=(r12*sj5);
IkReal x3997=((2.0)*cj6*r11);
IkReal x3998=((1.0)*x3992);
IkReal x3999=(x3990*x3993);
IkReal x4000=((((-1.0)*x3991*x3999))+((x3990*x3991*x3992))+(((-1.0)*x3991*x3995*x3997))+(((-1.0)*x3990*x3998))+((x3995*x3997))+x3999+(((-2.0)*cj5*x3995*x3996))+(((-1.0)*x3991*x3998))+(((-1.0)*x3994))+(((-1.0)*x3993))+(((-1.0)*cj5*x3996*x3997))+((x3991*x3994)));
j4eval[0]=x4000;
j4eval[1]=((IKabs((((cj5*x3995))+x3996+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4000);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4001=cj6*cj6;
IkReal x4002=cj5*cj5;
IkReal x4003=r10*r10;
IkReal x4004=r11*r11;
IkReal x4005=r12*r12;
IkReal x4006=(r10*sj6);
IkReal x4007=(r12*sj5);
IkReal x4008=((2.0)*cj6*r11);
IkReal x4009=(x4001*x4004);
IkReal x4010=(x4002*x4003);
CheckValue<IkReal> x4011 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x4006))+x4007+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4011.valid){
continue;
}
CheckValue<IkReal> x4012=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4002*x4006*x4008))+(((-1.0)*x4004))+(((-1.0)*x4005))+(((-1.0)*x4010))+((x4001*x4010))+x4009+(((-1.0)*x4002*x4009))+(((-1.0)*x4001*x4003))+(((-1.0)*cj5*x4007*x4008))+(((-2.0)*cj5*x4006*x4007))+((x4006*x4008))+((x4002*x4005)))),-1);
if(!x4012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4011.value)+(((1.5707963267949)*(x4012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4013=IKsin(j4);
IkReal x4014=IKcos(j4);
IkReal x4015=(cj5*cj6);
IkReal x4016=(r11*sj6);
IkReal x4017=(cj6*r20);
IkReal x4018=(cj6*r10);
IkReal x4019=(cj5*sj6);
IkReal x4020=(r01*sj6);
IkReal x4021=(r21*sj6);
IkReal x4022=(cj6*r00);
IkReal x4023=((1.0)*x4014);
IkReal x4024=((1.0)*x4013);
IkReal x4025=(sj5*x4024);
evalcond[0]=((((-1.0)*r22*x4025))+(((-1.0)*r20*x4019*x4024))+(((-1.0)*r21*x4015*x4024))+(((-1.0)*x4021*x4023))+((x4014*x4017)));
evalcond[1]=((((-1.0)*r12*x4025))+(((-1.0)*r11*x4015*x4024))+(((-1.0)*r10*x4019*x4024))+(((-1.0)*x4016*x4023))+((x4014*x4018)));
evalcond[2]=((((-1.0)*r20*x4019*x4023))+((x4013*x4021))+(((-1.0)*r22*sj5*x4023))+(((-1.0)*r21*x4015*x4023))+(((-1.0)*x4017*x4024)));
evalcond[3]=((((-1.0)*r02*sj5*x4023))+(((-1.0)*x4022*x4024))+((x4013*x4020))+(((-1.0)*r00*x4019*x4023))+(((-1.0)*r01*x4015*x4023)));
evalcond[4]=((1.0)+((x4014*x4022))+(((-1.0)*r02*x4025))+(((-1.0)*r00*x4019*x4024))+(((-1.0)*r01*x4015*x4024))+(((-1.0)*x4020*x4023)));
evalcond[5]=((-1.0)+(((-1.0)*x4018*x4024))+(((-1.0)*r11*x4015*x4023))+(((-1.0)*r12*sj5*x4023))+(((-1.0)*r10*x4019*x4023))+((x4013*x4016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4026=((1.0)*sj6);
CheckValue<IkReal> x4027=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4026)))),-1);
if(!x4027.valid){
continue;
}
CheckValue<IkReal> x4028 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x4026)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4027.value)))+(x4028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4029=IKsin(j4);
IkReal x4030=IKcos(j4);
IkReal x4031=(cj5*cj6);
IkReal x4032=(r11*sj6);
IkReal x4033=(cj6*r20);
IkReal x4034=(cj6*r10);
IkReal x4035=(cj5*sj6);
IkReal x4036=(r01*sj6);
IkReal x4037=(r21*sj6);
IkReal x4038=(cj6*r00);
IkReal x4039=((1.0)*x4030);
IkReal x4040=((1.0)*x4029);
IkReal x4041=(sj5*x4040);
evalcond[0]=((((-1.0)*x4037*x4039))+(((-1.0)*r21*x4031*x4040))+(((-1.0)*r20*x4035*x4040))+(((-1.0)*r22*x4041))+((x4030*x4033)));
evalcond[1]=((((-1.0)*r12*x4041))+(((-1.0)*r11*x4031*x4040))+(((-1.0)*x4032*x4039))+(((-1.0)*r10*x4035*x4040))+((x4030*x4034)));
evalcond[2]=(((x4029*x4037))+(((-1.0)*x4033*x4040))+(((-1.0)*r20*x4035*x4039))+(((-1.0)*r21*x4031*x4039))+(((-1.0)*r22*sj5*x4039)));
evalcond[3]=((((-1.0)*r01*x4031*x4039))+((x4029*x4036))+(((-1.0)*r02*sj5*x4039))+(((-1.0)*r00*x4035*x4039))+(((-1.0)*x4038*x4040)));
evalcond[4]=((1.0)+(((-1.0)*r00*x4035*x4040))+(((-1.0)*x4036*x4039))+(((-1.0)*r02*x4041))+(((-1.0)*r01*x4031*x4040))+((x4030*x4038)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x4031*x4039))+(((-1.0)*r12*sj5*x4039))+((x4029*x4032))+(((-1.0)*r10*x4035*x4039))+(((-1.0)*x4034*x4040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4042=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4042.valid){
continue;
}
CheckValue<IkReal> x4043 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4042.value)))+(x4043.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4044=IKsin(j4);
IkReal x4045=IKcos(j4);
IkReal x4046=(cj5*cj6);
IkReal x4047=(r11*sj6);
IkReal x4048=(cj6*r20);
IkReal x4049=(cj6*r10);
IkReal x4050=(cj5*sj6);
IkReal x4051=(r01*sj6);
IkReal x4052=(r21*sj6);
IkReal x4053=(cj6*r00);
IkReal x4054=((1.0)*x4045);
IkReal x4055=((1.0)*x4044);
IkReal x4056=(sj5*x4055);
evalcond[0]=(((x4045*x4048))+(((-1.0)*r20*x4050*x4055))+(((-1.0)*r21*x4046*x4055))+(((-1.0)*x4052*x4054))+(((-1.0)*r22*x4056)));
evalcond[1]=(((x4045*x4049))+(((-1.0)*r12*x4056))+(((-1.0)*r11*x4046*x4055))+(((-1.0)*x4047*x4054))+(((-1.0)*r10*x4050*x4055)));
evalcond[2]=((((-1.0)*r20*x4050*x4054))+(((-1.0)*r21*x4046*x4054))+((x4044*x4052))+(((-1.0)*r22*sj5*x4054))+(((-1.0)*x4048*x4055)));
evalcond[3]=((((-1.0)*x4053*x4055))+((x4044*x4051))+(((-1.0)*r02*sj5*x4054))+(((-1.0)*r00*x4050*x4054))+(((-1.0)*r01*x4046*x4054)));
evalcond[4]=((1.0)+(((-1.0)*x4051*x4054))+((x4045*x4053))+(((-1.0)*r02*x4056))+(((-1.0)*r00*x4050*x4055))+(((-1.0)*r01*x4046*x4055)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x4046*x4054))+((x4044*x4047))+(((-1.0)*x4049*x4055))+(((-1.0)*r10*x4050*x4054))+(((-1.0)*r12*sj5*x4054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4057=cj6*cj6;
IkReal x4058=cj5*cj5;
IkReal x4059=((1.0)*r11);
IkReal x4060=(cj5*sj0);
IkReal x4061=(cj6*r21);
IkReal x4062=(r22*sj5);
IkReal x4063=(r20*sj6);
IkReal x4064=(r12*r22);
IkReal x4065=((1.0)*sj6);
IkReal x4066=(r21*x4057);
IkReal x4067=(r10*x4058);
IkReal x4068=(r11*x4058);
IkReal x4069=(r20*x4057);
IkReal x4070=(cj5*r12*sj5);
CheckValue<IkReal> x4071=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4067*x4069))+((r11*r21))+((x4066*x4068))+((cj5*cj6*r11*x4062))+(((-1.0)*x4059*x4066))+x4064+((r20*x4067))+((x4061*x4070))+((cj6*x4063*x4068))+(((-1.0)*x4058*x4064))+(((-1.0)*r10*x4061*x4065))+((sj6*x4061*x4067))+((r10*x4069))+((cj5*r10*sj6*x4062))+(((-1.0)*cj6*x4059*x4063))+((x4063*x4070)))),-1);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4065))+((cj6*r20*sj0)))),IkReal((((sj0*x4062))+((x4060*x4061))+((x4060*x4063)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4071.value)))+(x4072.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4073=IKsin(j4);
IkReal x4074=IKcos(j4);
IkReal x4075=(cj5*cj6);
IkReal x4076=(r11*sj6);
IkReal x4077=(cj6*r20);
IkReal x4078=(cj5*sj6);
IkReal x4079=(cj6*r10);
IkReal x4080=(r01*sj6);
IkReal x4081=(r21*sj6);
IkReal x4082=(cj6*r00);
IkReal x4083=((1.0)*x4074);
IkReal x4084=((1.0)*x4073);
IkReal x4085=(sj5*x4084);
evalcond[0]=(((x4074*x4077))+(((-1.0)*r22*x4085))+(((-1.0)*r21*x4075*x4084))+(((-1.0)*r20*x4078*x4084))+(((-1.0)*x4081*x4083)));
evalcond[1]=((((-1.0)*r22*sj5*x4083))+(((-1.0)*r21*x4075*x4083))+(((-1.0)*x4077*x4084))+(((-1.0)*r20*x4078*x4083))+((x4073*x4081)));
evalcond[2]=(((x4074*x4079))+cj0+(((-1.0)*r12*x4085))+(((-1.0)*r10*x4078*x4084))+(((-1.0)*r11*x4075*x4084))+(((-1.0)*x4076*x4083)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x4083))+(((-1.0)*x4082*x4084))+(((-1.0)*r01*x4075*x4083))+(((-1.0)*r00*x4078*x4083))+((x4073*x4080)));
evalcond[4]=((((-1.0)*r12*sj5*x4083))+sj0+(((-1.0)*r10*x4078*x4083))+((x4073*x4076))+(((-1.0)*r11*x4075*x4083))+(((-1.0)*x4079*x4084)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4085))+(((-1.0)*r01*x4075*x4084))+(((-1.0)*r00*x4078*x4084))+(((-1.0)*x4080*x4083))+((x4074*x4082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4086=cj5*cj5;
IkReal x4087=cj6*cj6;
IkReal x4088=(r22*sj5);
IkReal x4089=(cj6*r21);
IkReal x4090=(r20*sj6);
IkReal x4091=((1.0)*sj6);
IkReal x4092=(cj0*cj5);
IkReal x4093=(r02*r22);
IkReal x4094=(cj6*r01);
IkReal x4095=(r00*sj6);
IkReal x4096=(cj5*r02*sj5);
IkReal x4097=(r01*x4086);
IkReal x4098=(r21*x4087);
IkReal x4099=(r00*r20*x4086);
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4086*x4093))+((x4086*x4090*x4094))+((r01*r21))+((x4086*x4089*x4095))+((r00*r20*x4087))+(((-1.0)*r01*x4098))+x4093+x4099+((x4089*x4096))+(((-1.0)*x4090*x4094))+((x4090*x4096))+((x4097*x4098))+(((-1.0)*x4087*x4099))+(((-1.0)*r00*x4089*x4091))+((cj5*x4088*x4094))+((cj5*x4088*x4095)))),-1);
if(!x4100.valid){
continue;
}
CheckValue<IkReal> x4101 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x4091)))),IkReal((((cj0*x4088))+((x4089*x4092))+((x4090*x4092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4100.value)))+(x4101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4102=IKsin(j4);
IkReal x4103=IKcos(j4);
IkReal x4104=(cj5*cj6);
IkReal x4105=(r11*sj6);
IkReal x4106=(cj6*r20);
IkReal x4107=(cj5*sj6);
IkReal x4108=(cj6*r10);
IkReal x4109=(r01*sj6);
IkReal x4110=(r21*sj6);
IkReal x4111=(cj6*r00);
IkReal x4112=((1.0)*x4103);
IkReal x4113=((1.0)*x4102);
IkReal x4114=(sj5*x4113);
evalcond[0]=((((-1.0)*r22*x4114))+((x4103*x4106))+(((-1.0)*x4110*x4112))+(((-1.0)*r20*x4107*x4113))+(((-1.0)*r21*x4104*x4113)));
evalcond[1]=(((x4102*x4110))+(((-1.0)*r20*x4107*x4112))+(((-1.0)*r21*x4104*x4112))+(((-1.0)*x4106*x4113))+(((-1.0)*r22*sj5*x4112)));
evalcond[2]=((((-1.0)*r12*x4114))+(((-1.0)*x4105*x4112))+cj0+((x4103*x4108))+(((-1.0)*r10*x4107*x4113))+(((-1.0)*r11*x4104*x4113)));
evalcond[3]=((((-1.0)*x4111*x4113))+cj0+(((-1.0)*r02*sj5*x4112))+(((-1.0)*r01*x4104*x4112))+(((-1.0)*r00*x4107*x4112))+((x4102*x4109)));
evalcond[4]=(sj0+(((-1.0)*r12*sj5*x4112))+(((-1.0)*r10*x4107*x4112))+(((-1.0)*x4108*x4113))+(((-1.0)*r11*x4104*x4112))+((x4102*x4105)));
evalcond[5]=((((-1.0)*x4109*x4112))+(((-1.0)*sj0))+((x4103*x4111))+(((-1.0)*r01*x4104*x4113))+(((-1.0)*r02*x4114))+(((-1.0)*r00*x4107*x4113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4115=(cj0*sj6);
IkReal x4116=(cj0*cj6);
CheckValue<IkReal> x4117=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4117.valid){
continue;
}
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal((((r20*x4116))+(((-1.0)*r21*x4115)))),IkReal((((cj5*r21*x4116))+((cj0*r22*sj5))+((cj5*r20*x4115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4117.value)))+(x4118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4119=IKsin(j4);
IkReal x4120=IKcos(j4);
IkReal x4121=(cj5*cj6);
IkReal x4122=(r11*sj6);
IkReal x4123=(cj6*r20);
IkReal x4124=(cj5*sj6);
IkReal x4125=(cj6*r10);
IkReal x4126=(r01*sj6);
IkReal x4127=(r21*sj6);
IkReal x4128=(cj6*r00);
IkReal x4129=((1.0)*x4120);
IkReal x4130=((1.0)*x4119);
IkReal x4131=(sj5*x4130);
evalcond[0]=(((x4120*x4123))+(((-1.0)*r20*x4124*x4130))+(((-1.0)*r21*x4121*x4130))+(((-1.0)*x4127*x4129))+(((-1.0)*r22*x4131)));
evalcond[1]=((((-1.0)*r21*x4121*x4129))+(((-1.0)*x4123*x4130))+(((-1.0)*r20*x4124*x4129))+((x4119*x4127))+(((-1.0)*r22*sj5*x4129)));
evalcond[2]=(((x4120*x4125))+cj0+(((-1.0)*r11*x4121*x4130))+(((-1.0)*r10*x4124*x4130))+(((-1.0)*r12*x4131))+(((-1.0)*x4122*x4129)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x4129))+(((-1.0)*x4128*x4130))+(((-1.0)*r00*x4124*x4129))+(((-1.0)*r01*x4121*x4129))+((x4119*x4126)));
evalcond[4]=(sj0+(((-1.0)*x4125*x4130))+(((-1.0)*r12*sj5*x4129))+(((-1.0)*r11*x4121*x4129))+((x4119*x4122))+(((-1.0)*r10*x4124*x4129)));
evalcond[5]=((((-1.0)*r00*x4124*x4130))+(((-1.0)*r01*x4121*x4130))+(((-1.0)*sj0))+((x4120*x4128))+(((-1.0)*r02*x4131))+(((-1.0)*x4126*x4129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4132=(r20*sj0);
IkReal x4133=((1.0)*sj5);
IkReal x4134=(r21*sj0);
IkReal x4135=(((cj5*r12))+(((-1.0)*cj6*r11*x4133))+(((-1.0)*r10*sj6*x4133)));
j4eval[0]=x4135;
j4eval[1]=IKsign(x4135);
j4eval[2]=((IKabs((((cj5*cj6*x4134))+((r22*sj0*sj5))+((cj5*sj6*x4132)))))+(IKabs((((cj6*x4132))+(((-1.0)*sj6*x4134))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4136=cj5*cj5;
IkReal x4137=cj6*cj6;
IkReal x4138=(r00*r20);
IkReal x4139=(r02*r22);
IkReal x4140=(r22*sj5);
IkReal x4141=(cj6*r21);
IkReal x4142=(r00*sj6);
IkReal x4143=(r20*sj6);
IkReal x4144=(cj6*r01);
IkReal x4145=(cj0*cj5);
IkReal x4146=((1.0)*x4136);
IkReal x4147=(cj5*r02*sj5);
IkReal x4148=(r01*r21*x4137);
IkReal x4149=(((x4136*x4138))+((x4143*x4147))+(((-1.0)*x4137*x4138*x4146))+(((-1.0)*x4148))+((r01*r21))+(((-1.0)*x4141*x4142))+((x4141*x4147))+((cj5*x4140*x4142))+((cj5*x4140*x4144))+((x4136*x4143*x4144))+(((-1.0)*x4139*x4146))+x4139+(((-1.0)*x4143*x4144))+((x4137*x4138))+((x4136*x4148))+((x4136*x4141*x4142)));
j4eval[0]=x4149;
j4eval[1]=IKsign(x4149);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x4143*x4145))+((x4141*x4145))+((cj0*x4140))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4150=cj6*cj6;
IkReal x4151=cj5*cj5;
IkReal x4152=(r12*sj5);
IkReal x4153=(r22*sj5);
IkReal x4154=((1.0)*r11);
IkReal x4155=(r20*sj0);
IkReal x4156=(r10*r20);
IkReal x4157=(cj5*sj6);
IkReal x4158=(cj6*r10);
IkReal x4159=(r12*r22);
IkReal x4160=(cj5*cj6*r21);
IkReal x4161=(r21*x4150);
IkReal x4162=(cj6*r20*sj6);
IkReal x4163=(r11*x4151);
IkReal x4164=((1.0)*r21*sj6);
IkReal x4165=((1.0)*x4151);
IkReal x4166=((((-1.0)*x4159*x4165))+((cj5*cj6*r11*x4153))+((r11*r21))+((r10*x4153*x4157))+(((-1.0)*x4150*x4156*x4165))+((r20*x4152*x4157))+((x4150*x4156))+((x4152*x4160))+(((-1.0)*x4158*x4164))+x4159+((x4151*x4156))+((x4161*x4163))+((r21*sj6*x4151*x4158))+(((-1.0)*x4154*x4162))+(((-1.0)*x4154*x4161))+((x4162*x4163)));
j4eval[0]=x4166;
j4eval[1]=IKsign(x4166);
j4eval[2]=((IKabs((((x4155*x4157))+((sj0*x4153))+((sj0*x4160)))))+(IKabs((((cj6*x4155))+(((-1.0)*sj0*x4164))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4167=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4167;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x4167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4168=((1.0)*sj6);
IkReal x4169=((((-1.0)*r00*sj5*x4168))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x4169;
j4eval[1]=IKsign(x4169);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x4168))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4170=cj6*cj6;
IkReal x4171=r01*r01;
IkReal x4172=cj5*cj5;
IkReal x4173=r00*r00;
IkReal x4174=r02*r02;
IkReal x4175=(cj6*r00);
IkReal x4176=(r02*sj5);
IkReal x4177=(cj5*cj6*r01);
IkReal x4178=((2.0)*r01*sj6);
IkReal x4179=(cj5*r00*sj6);
IkReal x4180=((1.0)*x4172);
IkReal x4181=(x4170*x4173);
IkReal x4182=(x4170*x4171);
IkReal x4183=((((-1.0)*x4180*x4181))+(((-1.0)*x4174*x4180))+(((-1.0)*x4182))+((x4172*x4175*x4178))+(((-1.0)*x4175*x4178))+((x4172*x4182))+x4181+x4174+x4171+((x4172*x4173))+(((2.0)*x4176*x4177))+(((2.0)*x4176*x4179)));
j4eval[0]=x4183;
j4eval[1]=((IKabs((x4176+x4177+x4179)))+(IKabs(((((-1.0)*r01*sj6))+x4175))));
j4eval[2]=IKsign(x4183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4184=cj6*cj6;
IkReal x4185=r01*r01;
IkReal x4186=cj5*cj5;
IkReal x4187=r00*r00;
IkReal x4188=r02*r02;
IkReal x4189=(cj6*r00);
IkReal x4190=((2.0)*r01);
IkReal x4191=(cj5*cj6);
IkReal x4192=(r02*sj5);
IkReal x4193=(cj5*r00*sj6);
IkReal x4194=(x4186*x4187);
IkReal x4195=(x4184*x4185);
CheckValue<IkReal> x4196 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4189)),IkReal((x4192+x4193+((r01*x4191)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4196.valid){
continue;
}
CheckValue<IkReal> x4197=IKPowWithIntegerCheck(IKsign((((sj6*x4186*x4189*x4190))+((x4190*x4191*x4192))+(((-1.0)*x4186*x4188))+((x4186*x4195))+(((-1.0)*x4195))+(((-1.0)*sj6*x4189*x4190))+x4194+x4188+x4185+(((-1.0)*x4184*x4194))+(((2.0)*x4192*x4193))+((x4184*x4187)))),-1);
if(!x4197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4196.value)+(((1.5707963267949)*(x4197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4198=IKsin(j4);
IkReal x4199=IKcos(j4);
IkReal x4200=(cj5*cj6);
IkReal x4201=(r11*sj6);
IkReal x4202=(cj6*r20);
IkReal x4203=(cj6*r10);
IkReal x4204=(cj5*sj6);
IkReal x4205=(r21*sj6);
IkReal x4206=(cj6*r00);
IkReal x4207=(r01*sj6);
IkReal x4208=((1.0)*x4199);
IkReal x4209=((1.0)*x4198);
IkReal x4210=(sj5*x4209);
evalcond[0]=(((x4199*x4202))+(((-1.0)*r20*x4204*x4209))+(((-1.0)*r22*x4210))+(((-1.0)*r21*x4200*x4209))+(((-1.0)*x4205*x4208)));
evalcond[1]=(((x4199*x4206))+(((-1.0)*r02*x4210))+(((-1.0)*x4207*x4208))+(((-1.0)*r01*x4200*x4209))+(((-1.0)*r00*x4204*x4209)));
evalcond[2]=(((x4198*x4205))+(((-1.0)*r22*sj5*x4208))+(((-1.0)*r20*x4204*x4208))+(((-1.0)*x4202*x4209))+(((-1.0)*r21*x4200*x4208)));
evalcond[3]=(((x4198*x4201))+(((-1.0)*r10*x4204*x4208))+(((-1.0)*r12*sj5*x4208))+(((-1.0)*r11*x4200*x4208))+(((-1.0)*x4203*x4209)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x4204*x4209))+((x4199*x4203))+(((-1.0)*x4201*x4208))+(((-1.0)*r12*x4210))+(((-1.0)*r11*x4200*x4209)));
evalcond[5]=((1.0)+((x4198*x4207))+(((-1.0)*x4206*x4209))+(((-1.0)*r01*x4200*x4208))+(((-1.0)*r00*x4204*x4208))+(((-1.0)*r02*sj5*x4208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4211=((1.0)*sj6);
CheckValue<IkReal> x4212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x4211))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4211))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4212.value)))+(x4213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4214=IKsin(j4);
IkReal x4215=IKcos(j4);
IkReal x4216=(cj5*cj6);
IkReal x4217=(r11*sj6);
IkReal x4218=(cj6*r20);
IkReal x4219=(cj6*r10);
IkReal x4220=(cj5*sj6);
IkReal x4221=(r21*sj6);
IkReal x4222=(cj6*r00);
IkReal x4223=(r01*sj6);
IkReal x4224=((1.0)*x4215);
IkReal x4225=((1.0)*x4214);
IkReal x4226=(sj5*x4225);
evalcond[0]=((((-1.0)*r21*x4216*x4225))+((x4215*x4218))+(((-1.0)*r20*x4220*x4225))+(((-1.0)*x4221*x4224))+(((-1.0)*r22*x4226)));
evalcond[1]=((((-1.0)*r00*x4220*x4225))+(((-1.0)*r01*x4216*x4225))+(((-1.0)*x4223*x4224))+(((-1.0)*r02*x4226))+((x4215*x4222)));
evalcond[2]=((((-1.0)*r21*x4216*x4224))+(((-1.0)*r22*sj5*x4224))+(((-1.0)*x4218*x4225))+(((-1.0)*r20*x4220*x4224))+((x4214*x4221)));
evalcond[3]=((((-1.0)*r10*x4220*x4224))+(((-1.0)*r11*x4216*x4224))+((x4214*x4217))+(((-1.0)*r12*sj5*x4224))+(((-1.0)*x4219*x4225)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x4226))+(((-1.0)*r10*x4220*x4225))+(((-1.0)*r11*x4216*x4225))+((x4215*x4219))+(((-1.0)*x4217*x4224)));
evalcond[5]=((1.0)+(((-1.0)*r00*x4220*x4224))+(((-1.0)*r01*x4216*x4224))+(((-1.0)*x4222*x4225))+(((-1.0)*r02*sj5*x4224))+((x4214*x4223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4227=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4227.valid){
continue;
}
CheckValue<IkReal> x4228 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4227.value)))+(x4228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4229=IKsin(j4);
IkReal x4230=IKcos(j4);
IkReal x4231=(cj5*cj6);
IkReal x4232=(r11*sj6);
IkReal x4233=(cj6*r20);
IkReal x4234=(cj6*r10);
IkReal x4235=(cj5*sj6);
IkReal x4236=(r21*sj6);
IkReal x4237=(cj6*r00);
IkReal x4238=(r01*sj6);
IkReal x4239=((1.0)*x4230);
IkReal x4240=((1.0)*x4229);
IkReal x4241=(sj5*x4240);
evalcond[0]=((((-1.0)*r21*x4231*x4240))+((x4230*x4233))+(((-1.0)*r22*x4241))+(((-1.0)*r20*x4235*x4240))+(((-1.0)*x4236*x4239)));
evalcond[1]=(((x4230*x4237))+(((-1.0)*r01*x4231*x4240))+(((-1.0)*r00*x4235*x4240))+(((-1.0)*x4238*x4239))+(((-1.0)*r02*x4241)));
evalcond[2]=((((-1.0)*x4233*x4240))+(((-1.0)*r22*sj5*x4239))+(((-1.0)*r21*x4231*x4239))+((x4229*x4236))+(((-1.0)*r20*x4235*x4239)));
evalcond[3]=((((-1.0)*r10*x4235*x4239))+(((-1.0)*r12*sj5*x4239))+(((-1.0)*r11*x4231*x4239))+((x4229*x4232))+(((-1.0)*x4234*x4240)));
evalcond[4]=((-1.0)+((x4230*x4234))+(((-1.0)*x4232*x4239))+(((-1.0)*r11*x4231*x4240))+(((-1.0)*r12*x4241))+(((-1.0)*r10*x4235*x4240)));
evalcond[5]=((1.0)+(((-1.0)*r00*x4235*x4239))+(((-1.0)*r01*x4231*x4239))+((x4229*x4238))+(((-1.0)*x4237*x4240))+(((-1.0)*r02*sj5*x4239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4242=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4242;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4243=((1.0)*sj5);
IkReal x4244=(((cj5*r22))+(((-1.0)*r20*sj6*x4243))+(((-1.0)*cj6*r21*x4243)));
j4eval[0]=x4244;
j4eval[1]=IKsign(x4244);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4245=cj6*cj6;
IkReal x4246=cj5*cj5;
IkReal x4247=r00*r00;
IkReal x4248=r01*r01;
IkReal x4249=r02*r02;
IkReal x4250=(cj6*r00);
IkReal x4251=(cj5*cj6*r01);
IkReal x4252=((2.0)*r02*sj5);
IkReal x4253=((1.0)*x4245);
IkReal x4254=((2.0)*r01*sj6);
IkReal x4255=(cj5*r00*sj6);
IkReal x4256=(x4246*x4247);
IkReal x4257=(((x4246*x4249))+((x4245*x4256))+(((-1.0)*x4252*x4255))+(((-1.0)*x4251*x4252))+(((-1.0)*x4247*x4253))+(((-1.0)*x4246*x4248*x4253))+((x4250*x4254))+(((-1.0)*x4256))+(((-1.0)*x4246*x4250*x4254))+((x4245*x4248))+(((-1.0)*x4248))+(((-1.0)*x4249)));
j4eval[0]=x4257;
j4eval[1]=((IKabs((((r02*sj5))+x4251+x4255)))+(IKabs(((((-1.0)*r01*sj6))+x4250))));
j4eval[2]=IKsign(x4257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4258=cj6*cj6;
IkReal x4259=cj5*cj5;
IkReal x4260=r00*r00;
IkReal x4261=r01*r01;
IkReal x4262=r02*r02;
IkReal x4263=(cj6*r00);
IkReal x4264=(cj5*cj6*r01);
IkReal x4265=((2.0)*r02*sj5);
IkReal x4266=((1.0)*x4258);
IkReal x4267=((2.0)*r01*sj6);
IkReal x4268=(cj5*r00*sj6);
IkReal x4269=(x4259*x4260);
CheckValue<IkReal> x4270 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4263)),IkReal((((r02*sj5))+x4264+x4268)),IKFAST_ATAN2_MAGTHRESH);
if(!x4270.valid){
continue;
}
CheckValue<IkReal> x4271=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4259*x4263*x4267))+(((-1.0)*x4259*x4261*x4266))+(((-1.0)*x4264*x4265))+((x4263*x4267))+((x4259*x4262))+((x4258*x4261))+((x4258*x4269))+(((-1.0)*x4260*x4266))+(((-1.0)*x4261))+(((-1.0)*x4269))+(((-1.0)*x4262))+(((-1.0)*x4265*x4268)))),-1);
if(!x4271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4270.value)+(((1.5707963267949)*(x4271.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4272=IKsin(j4);
IkReal x4273=IKcos(j4);
IkReal x4274=(cj5*cj6);
IkReal x4275=(r11*sj6);
IkReal x4276=(cj6*r20);
IkReal x4277=(cj6*r10);
IkReal x4278=(cj5*sj6);
IkReal x4279=(r21*sj6);
IkReal x4280=(cj6*r00);
IkReal x4281=(r01*sj6);
IkReal x4282=((1.0)*x4273);
IkReal x4283=((1.0)*x4272);
IkReal x4284=(sj5*x4283);
evalcond[0]=((((-1.0)*r20*x4278*x4283))+(((-1.0)*r21*x4274*x4283))+(((-1.0)*x4279*x4282))+(((-1.0)*r22*x4284))+((x4273*x4276)));
evalcond[1]=((((-1.0)*r02*x4284))+(((-1.0)*r00*x4278*x4283))+((x4273*x4280))+(((-1.0)*r01*x4274*x4283))+(((-1.0)*x4281*x4282)));
evalcond[2]=((((-1.0)*r20*x4278*x4282))+(((-1.0)*r21*x4274*x4282))+(((-1.0)*x4276*x4283))+((x4272*x4279))+(((-1.0)*r22*sj5*x4282)));
evalcond[3]=((((-1.0)*r12*sj5*x4282))+(((-1.0)*r11*x4274*x4282))+(((-1.0)*r10*x4278*x4282))+(((-1.0)*x4277*x4283))+((x4272*x4275)));
evalcond[4]=((1.0)+(((-1.0)*x4275*x4282))+(((-1.0)*r12*x4284))+(((-1.0)*r11*x4274*x4283))+(((-1.0)*r10*x4278*x4283))+((x4273*x4277)));
evalcond[5]=((-1.0)+(((-1.0)*x4280*x4283))+(((-1.0)*r02*sj5*x4282))+(((-1.0)*r00*x4278*x4282))+(((-1.0)*r01*x4274*x4282))+((x4272*x4281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4285=((1.0)*sj5);
CheckValue<IkReal> x4286 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4286.valid){
continue;
}
CheckValue<IkReal> x4287=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21*x4285))+((cj5*r22))+(((-1.0)*r20*sj6*x4285)))),-1);
if(!x4287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4286.value)+(((1.5707963267949)*(x4287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4288=IKsin(j4);
IkReal x4289=IKcos(j4);
IkReal x4290=(cj5*cj6);
IkReal x4291=(r11*sj6);
IkReal x4292=(cj6*r20);
IkReal x4293=(cj6*r10);
IkReal x4294=(cj5*sj6);
IkReal x4295=(r21*sj6);
IkReal x4296=(cj6*r00);
IkReal x4297=(r01*sj6);
IkReal x4298=((1.0)*x4289);
IkReal x4299=((1.0)*x4288);
IkReal x4300=(sj5*x4299);
evalcond[0]=((((-1.0)*r22*x4300))+(((-1.0)*r21*x4290*x4299))+((x4289*x4292))+(((-1.0)*x4295*x4298))+(((-1.0)*r20*x4294*x4299)));
evalcond[1]=((((-1.0)*r00*x4294*x4299))+((x4289*x4296))+(((-1.0)*r01*x4290*x4299))+(((-1.0)*x4297*x4298))+(((-1.0)*r02*x4300)));
evalcond[2]=(((x4288*x4295))+(((-1.0)*r21*x4290*x4298))+(((-1.0)*r20*x4294*x4298))+(((-1.0)*x4292*x4299))+(((-1.0)*r22*sj5*x4298)));
evalcond[3]=(((x4288*x4291))+(((-1.0)*r10*x4294*x4298))+(((-1.0)*r12*sj5*x4298))+(((-1.0)*x4293*x4299))+(((-1.0)*r11*x4290*x4298)));
evalcond[4]=((1.0)+(((-1.0)*r12*x4300))+(((-1.0)*x4291*x4298))+((x4289*x4293))+(((-1.0)*r10*x4294*x4299))+(((-1.0)*r11*x4290*x4299)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x4294*x4298))+(((-1.0)*x4296*x4299))+((x4288*x4297))+(((-1.0)*r01*x4290*x4298))+(((-1.0)*r02*sj5*x4298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4301 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4301.valid){
continue;
}
CheckValue<IkReal> x4302=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4301.value)+(((1.5707963267949)*(x4302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4303=IKsin(j4);
IkReal x4304=IKcos(j4);
IkReal x4305=(cj5*cj6);
IkReal x4306=(r11*sj6);
IkReal x4307=(cj6*r20);
IkReal x4308=(cj6*r10);
IkReal x4309=(cj5*sj6);
IkReal x4310=(r21*sj6);
IkReal x4311=(cj6*r00);
IkReal x4312=(r01*sj6);
IkReal x4313=((1.0)*x4304);
IkReal x4314=((1.0)*x4303);
IkReal x4315=(sj5*x4314);
evalcond[0]=((((-1.0)*r22*x4315))+(((-1.0)*r20*x4309*x4314))+(((-1.0)*x4310*x4313))+(((-1.0)*r21*x4305*x4314))+((x4304*x4307)));
evalcond[1]=((((-1.0)*x4312*x4313))+(((-1.0)*r00*x4309*x4314))+(((-1.0)*r01*x4305*x4314))+(((-1.0)*r02*x4315))+((x4304*x4311)));
evalcond[2]=((((-1.0)*x4307*x4314))+(((-1.0)*r20*x4309*x4313))+(((-1.0)*r22*sj5*x4313))+(((-1.0)*r21*x4305*x4313))+((x4303*x4310)));
evalcond[3]=((((-1.0)*r10*x4309*x4313))+(((-1.0)*r11*x4305*x4313))+((x4303*x4306))+(((-1.0)*x4308*x4314))+(((-1.0)*r12*sj5*x4313)));
evalcond[4]=((1.0)+(((-1.0)*x4306*x4313))+(((-1.0)*r10*x4309*x4314))+(((-1.0)*r11*x4305*x4314))+(((-1.0)*r12*x4315))+((x4304*x4308)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x4309*x4313))+(((-1.0)*x4311*x4314))+(((-1.0)*r01*x4305*x4313))+(((-1.0)*r02*sj5*x4313))+((x4303*x4312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4316=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4316;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4317=((1.0)*sj6);
IkReal x4318=(((cj5*r12))+(((-1.0)*r10*sj5*x4317))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x4318;
j4eval[1]=IKsign(x4318);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4317))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4319=r11*r11;
IkReal x4320=cj5*cj5;
IkReal x4321=cj6*cj6;
IkReal x4322=r10*r10;
IkReal x4323=r12*r12;
IkReal x4324=(r12*sj5);
IkReal x4325=(cj6*r10);
IkReal x4326=((1.0)*x4321);
IkReal x4327=(cj5*cj6*r11);
IkReal x4328=(cj5*r10*sj6);
IkReal x4329=((2.0)*r11*sj6);
IkReal x4330=(x4320*x4322);
IkReal x4331=(((x4319*x4320*x4321))+((x4321*x4322))+(((2.0)*x4324*x4328))+(((2.0)*x4324*x4327))+(((-1.0)*x4325*x4329))+(((-1.0)*x4326*x4330))+((x4320*x4325*x4329))+(((-1.0)*x4320*x4323))+x4330+x4323+x4319+(((-1.0)*x4319*x4326)));
j4eval[0]=x4331;
j4eval[1]=IKsign(x4331);
j4eval[2]=((IKabs(((((-1.0)*r11*sj6))+x4325)))+(IKabs((x4328+x4324+x4327))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4332=r11*r11;
IkReal x4333=cj5*cj5;
IkReal x4334=cj6*cj6;
IkReal x4335=r10*r10;
IkReal x4336=r12*r12;
IkReal x4337=(r10*sj6);
IkReal x4338=(r12*sj5);
IkReal x4339=((1.0)*x4334);
IkReal x4340=(cj5*cj6*r11);
IkReal x4341=((2.0)*cj6*r11);
IkReal x4342=(x4333*x4335);
CheckValue<IkReal> x4343=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x4337*x4338))+(((-1.0)*x4332*x4339))+((x4334*x4335))+(((-1.0)*x4339*x4342))+((x4332*x4333*x4334))+(((-1.0)*x4333*x4336))+((x4333*x4337*x4341))+x4336+x4332+x4342+(((-1.0)*x4337*x4341))+(((2.0)*x4338*x4340)))),-1);
if(!x4343.valid){
continue;
}
CheckValue<IkReal> x4344 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x4337))+x4338+x4340)),IKFAST_ATAN2_MAGTHRESH);
if(!x4344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4343.value)))+(x4344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4345=IKsin(j4);
IkReal x4346=IKcos(j4);
IkReal x4347=(cj5*cj6);
IkReal x4348=(r11*sj6);
IkReal x4349=(cj6*r20);
IkReal x4350=(cj6*r10);
IkReal x4351=(cj5*sj6);
IkReal x4352=(r01*sj6);
IkReal x4353=(r21*sj6);
IkReal x4354=(cj6*r00);
IkReal x4355=((1.0)*x4346);
IkReal x4356=((1.0)*x4345);
IkReal x4357=(sj5*x4356);
evalcond[0]=((((-1.0)*x4353*x4355))+(((-1.0)*r20*x4351*x4356))+(((-1.0)*r22*x4357))+((x4346*x4349))+(((-1.0)*r21*x4347*x4356)));
evalcond[1]=((((-1.0)*r10*x4351*x4356))+(((-1.0)*r11*x4347*x4356))+(((-1.0)*r12*x4357))+(((-1.0)*x4348*x4355))+((x4346*x4350)));
evalcond[2]=((((-1.0)*x4349*x4356))+(((-1.0)*r20*x4351*x4355))+(((-1.0)*r22*sj5*x4355))+(((-1.0)*r21*x4347*x4355))+((x4345*x4353)));
evalcond[3]=((((-1.0)*r01*x4347*x4355))+(((-1.0)*r02*sj5*x4355))+(((-1.0)*r00*x4351*x4355))+((x4345*x4352))+(((-1.0)*x4354*x4356)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4347*x4356))+(((-1.0)*r02*x4357))+(((-1.0)*x4352*x4355))+(((-1.0)*r00*x4351*x4356))+((x4346*x4354)));
evalcond[5]=((1.0)+(((-1.0)*r10*x4351*x4355))+((x4345*x4348))+(((-1.0)*r11*x4347*x4355))+(((-1.0)*x4350*x4356))+(((-1.0)*r12*sj5*x4355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4358=((1.0)*sj6);
CheckValue<IkReal> x4359 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4358))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4359.valid){
continue;
}
CheckValue<IkReal> x4360=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4358)))),-1);
if(!x4360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4359.value)+(((1.5707963267949)*(x4360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4361=IKsin(j4);
IkReal x4362=IKcos(j4);
IkReal x4363=(cj5*cj6);
IkReal x4364=(r11*sj6);
IkReal x4365=(cj6*r20);
IkReal x4366=(cj6*r10);
IkReal x4367=(cj5*sj6);
IkReal x4368=(r01*sj6);
IkReal x4369=(r21*sj6);
IkReal x4370=(cj6*r00);
IkReal x4371=((1.0)*x4362);
IkReal x4372=((1.0)*x4361);
IkReal x4373=(sj5*x4372);
evalcond[0]=((((-1.0)*r22*x4373))+(((-1.0)*r20*x4367*x4372))+((x4362*x4365))+(((-1.0)*r21*x4363*x4372))+(((-1.0)*x4369*x4371)));
evalcond[1]=((((-1.0)*r11*x4363*x4372))+(((-1.0)*x4364*x4371))+((x4362*x4366))+(((-1.0)*r12*x4373))+(((-1.0)*r10*x4367*x4372)));
evalcond[2]=((((-1.0)*r20*x4367*x4371))+(((-1.0)*r22*sj5*x4371))+((x4361*x4369))+(((-1.0)*x4365*x4372))+(((-1.0)*r21*x4363*x4371)));
evalcond[3]=((((-1.0)*x4370*x4372))+(((-1.0)*r01*x4363*x4371))+(((-1.0)*r00*x4367*x4371))+((x4361*x4368))+(((-1.0)*r02*sj5*x4371)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4363*x4372))+(((-1.0)*r02*x4373))+(((-1.0)*r00*x4367*x4372))+((x4362*x4370))+(((-1.0)*x4368*x4371)));
evalcond[5]=((1.0)+(((-1.0)*x4366*x4372))+(((-1.0)*r11*x4363*x4371))+((x4361*x4364))+(((-1.0)*r12*sj5*x4371))+(((-1.0)*r10*x4367*x4371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4374=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4374.valid){
continue;
}
CheckValue<IkReal> x4375 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4374.value)))+(x4375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4376=IKsin(j4);
IkReal x4377=IKcos(j4);
IkReal x4378=(cj5*cj6);
IkReal x4379=(r11*sj6);
IkReal x4380=(cj6*r20);
IkReal x4381=(cj6*r10);
IkReal x4382=(cj5*sj6);
IkReal x4383=(r01*sj6);
IkReal x4384=(r21*sj6);
IkReal x4385=(cj6*r00);
IkReal x4386=((1.0)*x4377);
IkReal x4387=((1.0)*x4376);
IkReal x4388=(sj5*x4387);
evalcond[0]=((((-1.0)*r20*x4382*x4387))+(((-1.0)*r22*x4388))+((x4377*x4380))+(((-1.0)*x4384*x4386))+(((-1.0)*r21*x4378*x4387)));
evalcond[1]=((((-1.0)*x4379*x4386))+(((-1.0)*r12*x4388))+((x4377*x4381))+(((-1.0)*r11*x4378*x4387))+(((-1.0)*r10*x4382*x4387)));
evalcond[2]=((((-1.0)*x4380*x4387))+(((-1.0)*r20*x4382*x4386))+((x4376*x4384))+(((-1.0)*r21*x4378*x4386))+(((-1.0)*r22*sj5*x4386)));
evalcond[3]=((((-1.0)*r02*sj5*x4386))+((x4376*x4383))+(((-1.0)*r01*x4378*x4386))+(((-1.0)*r00*x4382*x4386))+(((-1.0)*x4385*x4387)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4388))+((x4377*x4385))+(((-1.0)*r01*x4378*x4387))+(((-1.0)*r00*x4382*x4387))+(((-1.0)*x4383*x4386)));
evalcond[5]=((1.0)+(((-1.0)*x4381*x4387))+((x4376*x4379))+(((-1.0)*r12*sj5*x4386))+(((-1.0)*r11*x4378*x4386))+(((-1.0)*r10*x4382*x4386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4389=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4389;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4390=((1.0)*sj5);
IkReal x4391=((((-1.0)*cj6*r21*x4390))+((cj5*r22))+(((-1.0)*r20*sj6*x4390)));
j4eval[0]=x4391;
j4eval[1]=IKsign(x4391);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4392=cj6*cj6;
IkReal x4393=cj5*cj5;
IkReal x4394=r10*r10;
IkReal x4395=r11*r11;
IkReal x4396=r12*r12;
IkReal x4397=(r10*sj6);
IkReal x4398=(r12*sj5);
IkReal x4399=((2.0)*cj6*r11);
IkReal x4400=((1.0)*x4394);
IkReal x4401=(x4392*x4395);
IkReal x4402=((((-1.0)*x4395))+(((-1.0)*x4396))+x4401+(((-1.0)*x4393*x4401))+((x4392*x4393*x4394))+(((-1.0)*cj5*x4398*x4399))+(((-2.0)*cj5*x4397*x4398))+(((-1.0)*x4393*x4397*x4399))+((x4397*x4399))+(((-1.0)*x4393*x4400))+(((-1.0)*x4392*x4400))+((x4393*x4396)));
j4eval[0]=x4402;
j4eval[1]=((IKabs((((cj5*x4397))+((cj5*cj6*r11))+x4398)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4403=cj6*cj6;
IkReal x4404=cj5*cj5;
IkReal x4405=r10*r10;
IkReal x4406=r11*r11;
IkReal x4407=r12*r12;
IkReal x4408=(r10*sj6);
IkReal x4409=(r12*sj5);
IkReal x4410=((2.0)*cj6*r11);
IkReal x4411=(x4403*x4406);
IkReal x4412=(x4404*x4405);
CheckValue<IkReal> x4413=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4404*x4408*x4410))+(((-1.0)*x4403*x4405))+((x4403*x4412))+x4411+(((-2.0)*cj5*x4408*x4409))+(((-1.0)*x4404*x4411))+((x4404*x4407))+(((-1.0)*x4407))+(((-1.0)*x4406))+(((-1.0)*x4412))+(((-1.0)*cj5*x4409*x4410))+((x4408*x4410)))),-1);
if(!x4413.valid){
continue;
}
CheckValue<IkReal> x4414 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x4409+((cj5*x4408))+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4413.value)))+(x4414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4415=IKsin(j4);
IkReal x4416=IKcos(j4);
IkReal x4417=(cj5*cj6);
IkReal x4418=(r11*sj6);
IkReal x4419=(cj6*r20);
IkReal x4420=(cj6*r10);
IkReal x4421=(cj5*sj6);
IkReal x4422=(r01*sj6);
IkReal x4423=(r21*sj6);
IkReal x4424=(cj6*r00);
IkReal x4425=((1.0)*x4416);
IkReal x4426=((1.0)*x4415);
IkReal x4427=(sj5*x4426);
evalcond[0]=((((-1.0)*x4423*x4425))+(((-1.0)*r20*x4421*x4426))+(((-1.0)*r22*x4427))+(((-1.0)*r21*x4417*x4426))+((x4416*x4419)));
evalcond[1]=((((-1.0)*r10*x4421*x4426))+(((-1.0)*r11*x4417*x4426))+(((-1.0)*r12*x4427))+(((-1.0)*x4418*x4425))+((x4416*x4420)));
evalcond[2]=((((-1.0)*r20*x4421*x4425))+(((-1.0)*r21*x4417*x4425))+(((-1.0)*r22*sj5*x4425))+(((-1.0)*x4419*x4426))+((x4415*x4423)));
evalcond[3]=((((-1.0)*r00*x4421*x4425))+(((-1.0)*r01*x4417*x4425))+(((-1.0)*r02*sj5*x4425))+(((-1.0)*x4424*x4426))+((x4415*x4422)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x4421*x4426))+(((-1.0)*x4422*x4425))+(((-1.0)*r01*x4417*x4426))+(((-1.0)*r02*x4427))+((x4416*x4424)));
evalcond[5]=((-1.0)+(((-1.0)*x4420*x4426))+(((-1.0)*r12*sj5*x4425))+(((-1.0)*r10*x4421*x4425))+((x4415*x4418))+(((-1.0)*r11*x4417*x4425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4428=((1.0)*sj5);
CheckValue<IkReal> x4429 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4429.valid){
continue;
}
CheckValue<IkReal> x4430=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x4428))+((cj5*r22))+(((-1.0)*cj6*r21*x4428)))),-1);
if(!x4430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4429.value)+(((1.5707963267949)*(x4430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4431=IKsin(j4);
IkReal x4432=IKcos(j4);
IkReal x4433=(cj5*cj6);
IkReal x4434=(r11*sj6);
IkReal x4435=(cj6*r20);
IkReal x4436=(cj6*r10);
IkReal x4437=(cj5*sj6);
IkReal x4438=(r01*sj6);
IkReal x4439=(r21*sj6);
IkReal x4440=(cj6*r00);
IkReal x4441=((1.0)*x4432);
IkReal x4442=((1.0)*x4431);
IkReal x4443=(sj5*x4442);
evalcond[0]=((((-1.0)*r21*x4433*x4442))+((x4432*x4435))+(((-1.0)*r22*x4443))+(((-1.0)*x4439*x4441))+(((-1.0)*r20*x4437*x4442)));
evalcond[1]=(((x4432*x4436))+(((-1.0)*r12*x4443))+(((-1.0)*r11*x4433*x4442))+(((-1.0)*r10*x4437*x4442))+(((-1.0)*x4434*x4441)));
evalcond[2]=((((-1.0)*r21*x4433*x4441))+(((-1.0)*x4435*x4442))+((x4431*x4439))+(((-1.0)*r22*sj5*x4441))+(((-1.0)*r20*x4437*x4441)));
evalcond[3]=((((-1.0)*r01*x4433*x4441))+((x4431*x4438))+(((-1.0)*r02*sj5*x4441))+(((-1.0)*x4440*x4442))+(((-1.0)*r00*x4437*x4441)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4433*x4442))+(((-1.0)*r02*x4443))+(((-1.0)*x4438*x4441))+((x4432*x4440))+(((-1.0)*r00*x4437*x4442)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x4433*x4441))+(((-1.0)*r10*x4437*x4441))+((x4431*x4434))+(((-1.0)*x4436*x4442))+(((-1.0)*r12*sj5*x4441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4444 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4444.valid){
continue;
}
CheckValue<IkReal> x4445=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4444.value)+(((1.5707963267949)*(x4445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4446=IKsin(j4);
IkReal x4447=IKcos(j4);
IkReal x4448=(cj5*cj6);
IkReal x4449=(r11*sj6);
IkReal x4450=(cj6*r20);
IkReal x4451=(cj6*r10);
IkReal x4452=(cj5*sj6);
IkReal x4453=(r01*sj6);
IkReal x4454=(r21*sj6);
IkReal x4455=(cj6*r00);
IkReal x4456=((1.0)*x4447);
IkReal x4457=((1.0)*x4446);
IkReal x4458=(sj5*x4457);
evalcond[0]=((((-1.0)*r20*x4452*x4457))+(((-1.0)*r22*x4458))+(((-1.0)*x4454*x4456))+(((-1.0)*r21*x4448*x4457))+((x4447*x4450)));
evalcond[1]=((((-1.0)*r11*x4448*x4457))+(((-1.0)*r12*x4458))+(((-1.0)*x4449*x4456))+(((-1.0)*r10*x4452*x4457))+((x4447*x4451)));
evalcond[2]=((((-1.0)*r20*x4452*x4456))+(((-1.0)*r22*sj5*x4456))+(((-1.0)*r21*x4448*x4456))+(((-1.0)*x4450*x4457))+((x4446*x4454)));
evalcond[3]=((((-1.0)*r01*x4448*x4456))+(((-1.0)*x4455*x4457))+(((-1.0)*r02*sj5*x4456))+(((-1.0)*r00*x4452*x4456))+((x4446*x4453)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4448*x4457))+(((-1.0)*r02*x4458))+((x4447*x4455))+(((-1.0)*r00*x4452*x4457))+(((-1.0)*x4453*x4456)));
evalcond[5]=((-1.0)+((x4446*x4449))+(((-1.0)*r11*x4448*x4456))+(((-1.0)*r10*x4452*x4456))+(((-1.0)*r12*sj5*x4456))+(((-1.0)*x4451*x4457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4459=cj6*cj6;
IkReal x4460=cj5*cj5;
IkReal x4461=((1.0)*r11);
IkReal x4462=(cj5*sj0);
IkReal x4463=(cj6*r21);
IkReal x4464=(r22*sj5);
IkReal x4465=(r20*sj6);
IkReal x4466=(r12*r22);
IkReal x4467=((1.0)*sj6);
IkReal x4468=(r21*x4459);
IkReal x4469=(r10*x4460);
IkReal x4470=(r11*x4460);
IkReal x4471=(r20*x4459);
IkReal x4472=(cj5*r12*sj5);
CheckValue<IkReal> x4473=IKPowWithIntegerCheck(IKsign((x4466+((r11*r21))+((r10*x4471))+((x4463*x4472))+((x4465*x4472))+(((-1.0)*r10*x4463*x4467))+((cj5*r10*sj6*x4464))+((sj6*x4463*x4469))+((cj6*x4465*x4470))+(((-1.0)*x4469*x4471))+((r20*x4469))+(((-1.0)*cj6*x4461*x4465))+((cj5*cj6*r11*x4464))+((x4468*x4470))+(((-1.0)*x4461*x4468))+(((-1.0)*x4460*x4466)))),-1);
if(!x4473.valid){
continue;
}
CheckValue<IkReal> x4474 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4467))+((cj6*r20*sj0)))),IkReal((((sj0*x4464))+((x4462*x4463))+((x4462*x4465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4473.value)))+(x4474.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4475=IKsin(j4);
IkReal x4476=IKcos(j4);
IkReal x4477=(cj5*cj6);
IkReal x4478=(r11*sj6);
IkReal x4479=(cj6*r20);
IkReal x4480=(cj6*r10);
IkReal x4481=(cj5*sj6);
IkReal x4482=(r01*sj6);
IkReal x4483=(r21*sj6);
IkReal x4484=(cj6*r00);
IkReal x4485=((1.0)*x4476);
IkReal x4486=((1.0)*x4475);
IkReal x4487=(sj5*x4486);
evalcond[0]=((((-1.0)*r20*x4481*x4486))+((x4476*x4479))+(((-1.0)*r21*x4477*x4486))+(((-1.0)*r22*x4487))+(((-1.0)*x4483*x4485)));
evalcond[1]=((((-1.0)*r20*x4481*x4485))+(((-1.0)*x4479*x4486))+(((-1.0)*r21*x4477*x4485))+((x4475*x4483))+(((-1.0)*r22*sj5*x4485)));
evalcond[2]=(sj0+(((-1.0)*r00*x4481*x4486))+((x4476*x4484))+(((-1.0)*r01*x4477*x4486))+(((-1.0)*r02*x4487))+(((-1.0)*x4482*x4485)));
evalcond[3]=((((-1.0)*x4484*x4486))+cj0+(((-1.0)*r02*sj5*x4485))+(((-1.0)*r00*x4481*x4485))+(((-1.0)*r01*x4477*x4485))+((x4475*x4482)));
evalcond[4]=(sj0+(((-1.0)*r10*x4481*x4485))+(((-1.0)*r11*x4477*x4485))+(((-1.0)*r12*sj5*x4485))+(((-1.0)*x4480*x4486))+((x4475*x4478)));
evalcond[5]=((((-1.0)*r10*x4481*x4486))+(((-1.0)*r12*x4487))+(((-1.0)*r11*x4477*x4486))+((x4476*x4480))+(((-1.0)*x4478*x4485))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4488=cj5*cj5;
IkReal x4489=cj6*cj6;
IkReal x4490=(r22*sj5);
IkReal x4491=(cj6*r21);
IkReal x4492=(r20*sj6);
IkReal x4493=((1.0)*sj6);
IkReal x4494=(cj0*cj5);
IkReal x4495=(r02*r22);
IkReal x4496=(cj6*r01);
IkReal x4497=(r00*sj6);
IkReal x4498=(cj5*r02*sj5);
IkReal x4499=(r01*x4488);
IkReal x4500=(r21*x4489);
IkReal x4501=(r00*r20*x4488);
CheckValue<IkReal> x4502 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x4493)))),IkReal((((cj0*x4490))+((x4492*x4494))+((x4491*x4494)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4502.valid){
continue;
}
CheckValue<IkReal> x4503=IKPowWithIntegerCheck(IKsign((x4495+x4501+((r01*r21))+((x4492*x4498))+(((-1.0)*r00*x4491*x4493))+(((-1.0)*x4492*x4496))+((x4488*x4492*x4496))+((x4491*x4498))+((x4488*x4491*x4497))+((cj5*x4490*x4496))+((cj5*x4490*x4497))+(((-1.0)*r01*x4500))+(((-1.0)*x4488*x4495))+((r00*r20*x4489))+(((-1.0)*x4489*x4501))+((x4499*x4500)))),-1);
if(!x4503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4502.value)+(((1.5707963267949)*(x4503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4504=IKsin(j4);
IkReal x4505=IKcos(j4);
IkReal x4506=(cj5*cj6);
IkReal x4507=(r11*sj6);
IkReal x4508=(cj6*r20);
IkReal x4509=(cj6*r10);
IkReal x4510=(cj5*sj6);
IkReal x4511=(r01*sj6);
IkReal x4512=(r21*sj6);
IkReal x4513=(cj6*r00);
IkReal x4514=((1.0)*x4505);
IkReal x4515=((1.0)*x4504);
IkReal x4516=(sj5*x4515);
evalcond[0]=((((-1.0)*r20*x4510*x4515))+(((-1.0)*x4512*x4514))+(((-1.0)*r21*x4506*x4515))+((x4505*x4508))+(((-1.0)*r22*x4516)));
evalcond[1]=((((-1.0)*r20*x4510*x4514))+((x4504*x4512))+(((-1.0)*r21*x4506*x4514))+(((-1.0)*r22*sj5*x4514))+(((-1.0)*x4508*x4515)));
evalcond[2]=(sj0+(((-1.0)*r02*x4516))+((x4505*x4513))+(((-1.0)*r01*x4506*x4515))+(((-1.0)*x4511*x4514))+(((-1.0)*r00*x4510*x4515)));
evalcond[3]=(cj0+(((-1.0)*x4513*x4515))+((x4504*x4511))+(((-1.0)*r01*x4506*x4514))+(((-1.0)*r02*sj5*x4514))+(((-1.0)*r00*x4510*x4514)));
evalcond[4]=((((-1.0)*r10*x4510*x4514))+sj0+(((-1.0)*r11*x4506*x4514))+(((-1.0)*r12*sj5*x4514))+((x4504*x4507))+(((-1.0)*x4509*x4515)));
evalcond[5]=((((-1.0)*r10*x4510*x4515))+(((-1.0)*r12*x4516))+(((-1.0)*r11*x4506*x4515))+((x4505*x4509))+(((-1.0)*x4507*x4514))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4517=(cj5*sj0);
IkReal x4518=((1.0)*sj5);
CheckValue<IkReal> x4519 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((cj6*r21*x4517))+((r22*sj0*sj5))+((r20*sj6*x4517)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4519.valid){
continue;
}
CheckValue<IkReal> x4520=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x4518))+(((-1.0)*r10*sj6*x4518)))),-1);
if(!x4520.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4519.value)+(((1.5707963267949)*(x4520.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4521=IKsin(j4);
IkReal x4522=IKcos(j4);
IkReal x4523=(cj5*cj6);
IkReal x4524=(r11*sj6);
IkReal x4525=(cj6*r20);
IkReal x4526=(cj6*r10);
IkReal x4527=(cj5*sj6);
IkReal x4528=(r01*sj6);
IkReal x4529=(r21*sj6);
IkReal x4530=(cj6*r00);
IkReal x4531=((1.0)*x4522);
IkReal x4532=((1.0)*x4521);
IkReal x4533=(sj5*x4532);
evalcond[0]=((((-1.0)*r20*x4527*x4532))+(((-1.0)*r21*x4523*x4532))+(((-1.0)*r22*x4533))+(((-1.0)*x4529*x4531))+((x4522*x4525)));
evalcond[1]=((((-1.0)*r20*x4527*x4531))+(((-1.0)*r22*sj5*x4531))+((x4521*x4529))+(((-1.0)*x4525*x4532))+(((-1.0)*r21*x4523*x4531)));
evalcond[2]=(sj0+(((-1.0)*r00*x4527*x4532))+(((-1.0)*r01*x4523*x4532))+(((-1.0)*x4528*x4531))+(((-1.0)*r02*x4533))+((x4522*x4530)));
evalcond[3]=((((-1.0)*x4530*x4532))+(((-1.0)*r00*x4527*x4531))+cj0+(((-1.0)*r02*sj5*x4531))+(((-1.0)*r01*x4523*x4531))+((x4521*x4528)));
evalcond[4]=(sj0+((x4521*x4524))+(((-1.0)*r12*sj5*x4531))+(((-1.0)*r10*x4527*x4531))+(((-1.0)*r11*x4523*x4531))+(((-1.0)*x4526*x4532)));
evalcond[5]=((((-1.0)*r10*x4527*x4532))+(((-1.0)*r11*x4523*x4532))+(((-1.0)*x4524*x4531))+((x4522*x4526))+(((-1.0)*r12*x4533))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4534=cj5*cj5;
IkReal x4535=cj6*cj6;
IkReal x4536=r20*r20;
IkReal x4537=r21*r21;
IkReal x4538=r22*r22;
IkReal x4539=(r22*sj5);
IkReal x4540=(cj6*r20);
IkReal x4541=(cj1*sj2);
IkReal x4542=(r21*sj6);
IkReal x4543=(cj5*r20*sj6);
IkReal x4544=(cj5*cj6*r21);
IkReal x4545=((1.0)*x4534);
IkReal x4546=(x4535*x4536);
IkReal x4547=(x4535*x4537);
CheckValue<IkReal> x4548=IKPowWithIntegerCheck(IKsign(((((2.0)*x4534*x4540*x4542))+x4546+x4538+x4537+(((-1.0)*x4545*x4546))+(((-1.0)*x4547))+((x4534*x4547))+(((-1.0)*x4538*x4545))+(((2.0)*x4539*x4543))+(((2.0)*x4539*x4544))+(((-2.0)*x4540*x4542))+((x4534*x4536)))),-1);
if(!x4548.valid){
continue;
}
CheckValue<IkReal> x4549 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x4542))+((sj1*x4540))+((x4541*x4543))+((x4541*x4544))+((x4539*x4541)))),IkReal((((sj1*x4539))+((sj1*x4544))+((sj1*x4543))+((x4541*x4542))+(((-1.0)*x4540*x4541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4548.value)))+(x4549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4550=IKsin(j4);
IkReal x4551=IKcos(j4);
IkReal x4552=(cj5*cj6);
IkReal x4553=((1.0)*cj1);
IkReal x4554=(sj1*sj2);
IkReal x4555=(r11*sj6);
IkReal x4556=(cj6*r20);
IkReal x4557=(cj6*r10);
IkReal x4558=(cj5*sj6);
IkReal x4559=(r01*sj6);
IkReal x4560=(r21*sj6);
IkReal x4561=(cj6*r00);
IkReal x4562=((1.0)*x4551);
IkReal x4563=((1.0)*x4550);
IkReal x4564=(sj5*x4563);
evalcond[0]=(sj1+(((-1.0)*x4556*x4563))+(((-1.0)*r22*sj5*x4562))+(((-1.0)*r20*x4558*x4562))+((x4550*x4560))+(((-1.0)*r21*x4552*x4562)));
evalcond[1]=(((cj1*sj2))+((x4551*x4556))+(((-1.0)*r20*x4558*x4563))+(((-1.0)*r22*x4564))+(((-1.0)*x4560*x4562))+(((-1.0)*r21*x4552*x4563)));
evalcond[2]=(((x4550*x4559))+(((-1.0)*r00*x4558*x4562))+(((-1.0)*r02*sj5*x4562))+(((-1.0)*r01*x4552*x4562))+(((-1.0)*x4561*x4563))+(((-1.0)*cj0*x4553)));
evalcond[3]=((((-1.0)*r12*sj5*x4562))+((x4550*x4555))+(((-1.0)*r11*x4552*x4562))+(((-1.0)*r10*x4558*x4562))+(((-1.0)*sj0*x4553))+(((-1.0)*x4557*x4563)));
evalcond[4]=(((x4551*x4557))+((cj0*cj2))+(((-1.0)*x4555*x4562))+(((-1.0)*r11*x4552*x4563))+(((-1.0)*r10*x4558*x4563))+(((-1.0)*r12*x4564))+((sj0*x4554)));
evalcond[5]=(((x4551*x4561))+(((-1.0)*cj2*sj0))+(((-1.0)*r00*x4558*x4563))+(((-1.0)*r02*x4564))+(((-1.0)*x4559*x4562))+(((-1.0)*r01*x4552*x4563))+((cj0*x4554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4565=(cj6*sj1);
IkReal x4566=((1.0)*cj5);
IkReal x4567=((1.0)*sj5);
IkReal x4568=(cj1*sj0);
IkReal x4569=((1.0)*sj6);
CheckValue<IkReal> x4570 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x4566*x4568))+(((-1.0)*r10*sj1*sj6*x4566))+(((-1.0)*r22*x4567*x4568))+(((-1.0)*r11*x4565*x4566))+(((-1.0)*r12*sj1*x4567))+(((-1.0)*cj6*r21*x4566*x4568)))),IkReal((((r10*x4565))+(((-1.0)*r11*sj1*x4569))+((cj6*r20*x4568))+(((-1.0)*r21*x4568*x4569)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4570.valid){
continue;
}
CheckValue<IkReal> x4571=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x4567))+(((-1.0)*r00*sj6*x4567))+((cj5*r02)))),-1);
if(!x4571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4570.value)+(((1.5707963267949)*(x4571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4572=IKsin(j4);
IkReal x4573=IKcos(j4);
IkReal x4574=(cj5*cj6);
IkReal x4575=((1.0)*cj1);
IkReal x4576=(sj1*sj2);
IkReal x4577=(r11*sj6);
IkReal x4578=(cj6*r20);
IkReal x4579=(cj6*r10);
IkReal x4580=(cj5*sj6);
IkReal x4581=(r01*sj6);
IkReal x4582=(r21*sj6);
IkReal x4583=(cj6*r00);
IkReal x4584=((1.0)*x4573);
IkReal x4585=((1.0)*x4572);
IkReal x4586=(sj5*x4585);
evalcond[0]=(((x4572*x4582))+(((-1.0)*r20*x4580*x4584))+sj1+(((-1.0)*r22*sj5*x4584))+(((-1.0)*r21*x4574*x4584))+(((-1.0)*x4578*x4585)));
evalcond[1]=((((-1.0)*r22*x4586))+(((-1.0)*r20*x4580*x4585))+((cj1*sj2))+(((-1.0)*r21*x4574*x4585))+((x4573*x4578))+(((-1.0)*x4582*x4584)));
evalcond[2]=(((x4572*x4581))+(((-1.0)*x4583*x4585))+(((-1.0)*r02*sj5*x4584))+(((-1.0)*r01*x4574*x4584))+(((-1.0)*cj0*x4575))+(((-1.0)*r00*x4580*x4584)));
evalcond[3]=((((-1.0)*x4579*x4585))+(((-1.0)*r12*sj5*x4584))+(((-1.0)*r11*x4574*x4584))+(((-1.0)*r10*x4580*x4584))+(((-1.0)*sj0*x4575))+((x4572*x4577)));
evalcond[4]=(((sj0*x4576))+((cj0*cj2))+(((-1.0)*r11*x4574*x4585))+(((-1.0)*r10*x4580*x4585))+((x4573*x4579))+(((-1.0)*r12*x4586))+(((-1.0)*x4577*x4584)));
evalcond[5]=(((cj0*x4576))+(((-1.0)*cj2*sj0))+((x4573*x4583))+(((-1.0)*r01*x4574*x4585))+(((-1.0)*r02*x4586))+(((-1.0)*x4581*x4584))+(((-1.0)*r00*x4580*x4585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4587=(cj0*cj1);
IkReal x4588=((1.0)*sj1);
IkReal x4589=((1.0)*cj5);
IkReal x4590=(cj5*x4588);
CheckValue<IkReal> x4591=IKPowWithIntegerCheck(IKsign((((cj6*r11*sj5))+(((-1.0)*r12*x4589))+((r10*sj5*sj6)))),-1);
if(!x4591.valid){
continue;
}
CheckValue<IkReal> x4592 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x4587*x4589))+(((-1.0)*cj6*r21*x4587*x4589))+(((-1.0)*cj6*r01*x4590))+(((-1.0)*r02*sj5*x4588))+(((-1.0)*r22*sj5*x4587))+(((-1.0)*r00*sj6*x4590)))),IkReal(((((-1.0)*r21*sj6*x4587))+((cj6*r00*sj1))+(((-1.0)*r01*sj6*x4588))+((cj6*r20*x4587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4591.value)))+(x4592.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4593=IKsin(j4);
IkReal x4594=IKcos(j4);
IkReal x4595=(cj5*cj6);
IkReal x4596=((1.0)*cj1);
IkReal x4597=(sj1*sj2);
IkReal x4598=(r11*sj6);
IkReal x4599=(cj6*r20);
IkReal x4600=(cj6*r10);
IkReal x4601=(cj5*sj6);
IkReal x4602=(r01*sj6);
IkReal x4603=(r21*sj6);
IkReal x4604=(cj6*r00);
IkReal x4605=((1.0)*x4594);
IkReal x4606=((1.0)*x4593);
IkReal x4607=(sj5*x4606);
evalcond[0]=((((-1.0)*r20*x4601*x4605))+sj1+((x4593*x4603))+(((-1.0)*r22*sj5*x4605))+(((-1.0)*x4599*x4606))+(((-1.0)*r21*x4595*x4605)));
evalcond[1]=((((-1.0)*r20*x4601*x4606))+(((-1.0)*x4603*x4605))+((cj1*sj2))+(((-1.0)*r21*x4595*x4606))+(((-1.0)*r22*x4607))+((x4594*x4599)));
evalcond[2]=(((x4593*x4602))+(((-1.0)*r00*x4601*x4605))+(((-1.0)*cj0*x4596))+(((-1.0)*r01*x4595*x4605))+(((-1.0)*x4604*x4606))+(((-1.0)*r02*sj5*x4605)));
evalcond[3]=(((x4593*x4598))+(((-1.0)*sj0*x4596))+(((-1.0)*r12*sj5*x4605))+(((-1.0)*x4600*x4606))+(((-1.0)*r11*x4595*x4605))+(((-1.0)*r10*x4601*x4605)));
evalcond[4]=(((x4594*x4600))+((sj0*x4597))+((cj0*cj2))+(((-1.0)*r11*x4595*x4606))+(((-1.0)*r12*x4607))+(((-1.0)*r10*x4601*x4606))+(((-1.0)*x4598*x4605)));
evalcond[5]=(((x4594*x4604))+(((-1.0)*cj2*sj0))+(((-1.0)*r02*x4607))+(((-1.0)*x4602*x4605))+(((-1.0)*r00*x4601*x4606))+(((-1.0)*r01*x4595*x4606))+((cj0*x4597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4608=cj5*cj5;
IkReal x4609=cj6*cj6;
IkReal x4610=r20*r20;
IkReal x4611=r21*r21;
IkReal x4612=r22*r22;
IkReal x4613=(r22*sj5);
IkReal x4614=(cj6*r20);
IkReal x4615=(cj1*sj2);
IkReal x4616=(r21*sj6);
IkReal x4617=(cj5*r20*sj6);
IkReal x4618=(cj5*cj6*r21);
IkReal x4619=((1.0)*x4608);
IkReal x4620=(x4609*x4610);
IkReal x4621=(x4609*x4611);
CheckValue<IkReal> x4622 = IKatan2WithCheck(IkReal((((sj1*x4614))+(((-1.0)*sj1*x4616))+((x4615*x4617))+((x4615*x4618))+((x4613*x4615)))),IkReal((((sj1*x4618))+((sj1*x4617))+((sj1*x4613))+((x4615*x4616))+(((-1.0)*x4614*x4615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4622.valid){
continue;
}
CheckValue<IkReal> x4623=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4612*x4619))+((x4608*x4610))+((x4608*x4621))+x4611+x4612+x4620+(((2.0)*x4608*x4614*x4616))+(((-1.0)*x4621))+(((-1.0)*x4619*x4620))+(((-2.0)*x4614*x4616))+(((2.0)*x4613*x4617))+(((2.0)*x4613*x4618)))),-1);
if(!x4623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4622.value)+(((1.5707963267949)*(x4623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4624=IKsin(j4);
IkReal x4625=IKcos(j4);
IkReal x4626=((1.0)*r21);
IkReal x4627=(r22*sj5);
IkReal x4628=(cj5*cj6);
IkReal x4629=(cj6*r20);
IkReal x4630=(cj5*r20);
IkReal x4631=(sj6*x4625);
IkReal x4632=((1.0)*x4624);
evalcond[0]=((((-1.0)*x4630*x4631))+sj1+(((-1.0)*x4625*x4627))+(((-1.0)*x4625*x4626*x4628))+((r21*sj6*x4624))+(((-1.0)*x4629*x4632)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*sj6*x4630*x4632))+(((-1.0)*x4627*x4632))+((x4625*x4629))+(((-1.0)*x4626*x4631))+(((-1.0)*x4624*x4626*x4628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4633=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x4633;
j0eval[1]=IKsign(x4633);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4634=(sj2*sj5);
IkReal x4635=(cj6*r01);
IkReal x4636=(r00*sj6);
IkReal x4637=(cj6*r11);
IkReal x4638=(cj2*sj5);
IkReal x4639=(r10*sj6);
IkReal x4640=(cj5*sj2);
IkReal x4641=((1.0)*cj2*cj5);
if( IKabs((((x4638*x4639))+(((-1.0)*r12*x4641))+((x4634*x4635))+((x4634*x4636))+(((-1.0)*r02*x4640))+((x4637*x4638)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x4641))+((x4636*x4638))+((r12*x4640))+((x4635*x4638))+(((-1.0)*x4634*x4639))+(((-1.0)*x4634*x4637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x4638*x4639))+(((-1.0)*r12*x4641))+((x4634*x4635))+((x4634*x4636))+(((-1.0)*r02*x4640))+((x4637*x4638))))+IKsqr(((((-1.0)*r02*x4641))+((x4636*x4638))+((r12*x4640))+((x4635*x4638))+(((-1.0)*x4634*x4639))+(((-1.0)*x4634*x4637))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x4638*x4639))+(((-1.0)*r12*x4641))+((x4634*x4635))+((x4634*x4636))+(((-1.0)*r02*x4640))+((x4637*x4638))), ((((-1.0)*r02*x4641))+((x4636*x4638))+((r12*x4640))+((x4635*x4638))+(((-1.0)*x4634*x4639))+(((-1.0)*x4634*x4637))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4642=IKcos(j0);
IkReal x4643=IKsin(j0);
IkReal x4644=((1.0)*sj4);
IkReal x4645=((0.37429)*sj5);
IkReal x4646=(r10*sj6);
IkReal x4647=(cj5*r12);
IkReal x4648=(cj6*r01);
IkReal x4649=(r00*sj6);
IkReal x4650=(r12*sj5);
IkReal x4651=(cj6*r11);
IkReal x4652=(r02*sj5);
IkReal x4653=((0.01)*cj5);
IkReal x4654=(cj4*cj6);
IkReal x4655=(cj5*r02);
IkReal x4656=(sj2*x4642);
IkReal x4657=(cj5*x4651);
IkReal x4658=((0.069)*x4643);
IkReal x4659=(cj2*x4642);
IkReal x4660=((0.069)*x4642);
IkReal x4661=(sj2*x4643);
IkReal x4662=((1.0)*cj4*sj6);
IkReal x4663=((1.0)*cj2*x4643);
evalcond[0]=(((sj5*x4646))+((sj5*x4651))+x4656+(((-1.0)*x4647))+(((-1.0)*x4663)));
evalcond[1]=(((sj5*x4649))+((sj5*x4648))+(((-1.0)*x4661))+(((-1.0)*x4655))+(((-1.0)*x4659)));
evalcond[2]=((((-1.0)*x4644*x4650))+(((-1.0)*x4644*x4657))+(((-1.0)*cj5*x4644*x4646))+x4661+x4659+((r10*x4654))+(((-1.0)*r11*x4662)));
evalcond[3]=((((-1.0)*x4644*x4652))+(((-1.0)*cj5*x4644*x4648))+(((-1.0)*cj5*x4644*x4649))+x4656+(((-1.0)*r01*x4662))+(((-1.0)*x4663))+((r00*x4654)));
evalcond[4]=((((-1.0)*x4645*x4649))+(((-1.0)*x4645*x4648))+(((-0.069)*x4659))+(((0.37429)*x4655))+x4660+(((-1.0)*sj2*x4658))+((x4649*x4653))+(((-1.0)*px))+((x4648*x4653))+(((0.01)*x4652)));
evalcond[5]=((((-1.0)*x4645*x4646))+x4658+(((0.069)*x4656))+(((-1.0)*cj2*x4658))+(((-1.0)*py))+((x4646*x4653))+(((0.01)*x4650))+(((-1.0)*x4645*x4651))+(((0.37429)*x4647))+((x4651*x4653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4664=(cj5*r02);
IkReal x4665=(sj2*sj5);
IkReal x4666=(cj6*r01);
IkReal x4667=(cj5*r12);
IkReal x4668=(cj2*sj5);
IkReal x4669=((1.0)*cj6*r11);
IkReal x4670=((1.0)*sj6*x4668);
if( IKabs((((r00*sj6*x4665))+((cj2*x4667))+((x4665*x4666))+(((-1.0)*r10*x4670))+(((-1.0)*sj2*x4664))+(((-1.0)*x4668*x4669)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x4667))+((cj2*x4664))+(((-1.0)*x4666*x4668))+(((-1.0)*r10*sj6*x4665))+(((-1.0)*x4665*x4669))+(((-1.0)*r00*x4670)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj6*x4665))+((cj2*x4667))+((x4665*x4666))+(((-1.0)*r10*x4670))+(((-1.0)*sj2*x4664))+(((-1.0)*x4668*x4669))))+IKsqr((((sj2*x4667))+((cj2*x4664))+(((-1.0)*x4666*x4668))+(((-1.0)*r10*sj6*x4665))+(((-1.0)*x4665*x4669))+(((-1.0)*r00*x4670))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj6*x4665))+((cj2*x4667))+((x4665*x4666))+(((-1.0)*r10*x4670))+(((-1.0)*sj2*x4664))+(((-1.0)*x4668*x4669))), (((sj2*x4667))+((cj2*x4664))+(((-1.0)*x4666*x4668))+(((-1.0)*r10*sj6*x4665))+(((-1.0)*x4665*x4669))+(((-1.0)*r00*x4670))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4671=IKcos(j0);
IkReal x4672=IKsin(j0);
IkReal x4673=((1.0)*sj4);
IkReal x4674=((0.37429)*sj5);
IkReal x4675=(r10*sj6);
IkReal x4676=(cj5*r12);
IkReal x4677=(cj6*r01);
IkReal x4678=(r00*sj6);
IkReal x4679=(r12*sj5);
IkReal x4680=(cj6*r11);
IkReal x4681=(r02*sj5);
IkReal x4682=((0.01)*cj5);
IkReal x4683=(cj4*cj6);
IkReal x4684=(cj5*r02);
IkReal x4685=(cj2*x4671);
IkReal x4686=(cj5*x4680);
IkReal x4687=((0.069)*x4672);
IkReal x4688=(sj2*x4671);
IkReal x4689=(cj2*x4672);
IkReal x4690=((1.0)*cj4*sj6);
IkReal x4691=((1.0)*sj2*x4672);
evalcond[0]=(((sj5*x4675))+((sj5*x4680))+(((-1.0)*x4676))+x4688+x4689);
evalcond[1]=(((sj5*x4677))+((sj5*x4678))+x4685+(((-1.0)*x4684))+(((-1.0)*x4691)));
evalcond[2]=((((-1.0)*x4673*x4686))+x4685+(((-1.0)*cj5*x4673*x4675))+(((-1.0)*x4673*x4679))+(((-1.0)*x4691))+((r10*x4683))+(((-1.0)*r11*x4690)));
evalcond[3]=((((-1.0)*x4673*x4681))+(((-1.0)*r01*x4690))+(((-1.0)*cj5*x4673*x4678))+(((-1.0)*cj5*x4673*x4677))+((r00*x4683))+(((-1.0)*x4689))+(((-1.0)*x4688)));
evalcond[4]=((((-1.0)*x4674*x4677))+(((-1.0)*x4674*x4678))+(((0.069)*x4685))+((x4678*x4682))+((x4677*x4682))+(((-1.0)*px))+(((0.069)*x4671))+(((0.01)*x4681))+(((-1.0)*sj2*x4687))+(((0.37429)*x4684)));
evalcond[5]=(((x4675*x4682))+((x4680*x4682))+(((-1.0)*x4674*x4675))+(((0.069)*x4688))+x4687+((cj2*x4687))+(((0.01)*x4679))+(((-1.0)*py))+(((-1.0)*x4674*x4680))+(((0.37429)*x4676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4692=(cj6*sj5);
IkReal x4693=(sj5*sj6);
if( IKabs((((r01*x4692))+((r00*x4693))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x4693))+(((-1.0)*r11*x4692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x4692))+((r00*x4693))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x4693))+(((-1.0)*r11*x4692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x4692))+((r00*x4693))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x4693))+(((-1.0)*r11*x4692))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4694=IKsin(j0);
IkReal x4695=IKcos(j0);
IkReal x4696=((1.0)*cj5);
IkReal x4697=(r11*sj4);
IkReal x4698=(r00*sj6);
IkReal x4699=((0.37429)*sj5);
IkReal x4700=(r10*sj6);
IkReal x4701=(cj6*sj4);
IkReal x4702=((0.36442)*cj1);
IkReal x4703=(cj6*r01);
IkReal x4704=(cj6*r11);
IkReal x4705=((0.01)*cj5);
IkReal x4706=(cj4*cj6);
IkReal x4707=((0.37429)*cj5);
IkReal x4708=((1.0)*cj4);
IkReal x4709=(r12*sj5);
IkReal x4710=(r01*sj6);
IkReal x4711=(r02*sj5);
IkReal x4712=((0.069)*x4694);
IkReal x4713=((0.069)*x4695);
IkReal x4714=((1.0)*sj4*sj5);
IkReal x4715=((1.0)*x4694);
evalcond[0]=((((-1.0)*r12*x4696))+x4695+((sj5*x4704))+((sj5*x4700)));
evalcond[1]=(((sj5*x4698))+(((-1.0)*r02*x4696))+((sj5*x4703))+(((-1.0)*x4715)));
evalcond[2]=((((-1.0)*r11*sj6*x4708))+((r10*x4706))+(((-1.0)*sj4*x4696*x4700))+(((-1.0)*cj6*x4696*x4697))+(((-1.0)*sj4*x4709))+((sj1*x4694)));
evalcond[3]=((((-1.0)*sj4*x4711))+(((-1.0)*r01*x4696*x4701))+((r00*x4706))+(((-1.0)*x4708*x4710))+((sj1*x4695))+(((-1.0)*sj4*x4696*x4698)));
evalcond[4]=((((-1.0)*cj4*x4696*x4698))+(((-1.0)*cj1*x4695))+((sj4*x4710))+(((-1.0)*cj4*x4696*x4703))+(((-1.0)*x4708*x4711))+(((-1.0)*r00*x4701)));
evalcond[5]=((((-1.0)*r10*x4701))+(((-1.0)*cj1*x4715))+(((-1.0)*cj4*x4696*x4704))+(((-1.0)*cj4*x4696*x4700))+((sj6*x4697))+(((-1.0)*x4708*x4709)));
evalcond[6]=((((-1.0)*x4698*x4699))+((x4698*x4705))+x4713+(((-1.0)*px))+((x4695*x4702))+(((-1.0)*x4699*x4703))+((r02*x4707))+(((0.01)*x4711))+(((-1.0)*x4712))+((x4703*x4705)));
evalcond[7]=(((x4704*x4705))+x4712+x4713+(((-1.0)*py))+((x4694*x4702))+((x4700*x4705))+(((0.01)*x4709))+(((-1.0)*x4699*x4700))+(((-1.0)*x4699*x4704))+((r12*x4707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4716=(sj5*sj6);
IkReal x4717=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x4716))+(((-1.0)*r01*x4717))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x4716))+((r11*x4717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4716))+(((-1.0)*r01*x4717))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x4716))+((r11*x4717))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x4716))+(((-1.0)*r01*x4717))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x4716))+((r11*x4717))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4718=IKsin(j0);
IkReal x4719=IKcos(j0);
IkReal x4720=((1.0)*cj5);
IkReal x4721=(r11*sj4);
IkReal x4722=(r00*sj6);
IkReal x4723=((0.37429)*sj5);
IkReal x4724=(r10*sj6);
IkReal x4725=(cj6*sj4);
IkReal x4726=((0.36442)*cj1);
IkReal x4727=(cj6*r01);
IkReal x4728=(cj6*r11);
IkReal x4729=((0.01)*cj5);
IkReal x4730=(cj4*cj6);
IkReal x4731=((0.37429)*cj5);
IkReal x4732=((1.0)*cj4);
IkReal x4733=(r12*sj5);
IkReal x4734=(r01*sj6);
IkReal x4735=(r02*sj5);
IkReal x4736=((0.069)*x4718);
IkReal x4737=((0.069)*x4719);
IkReal x4738=((1.0)*sj4*sj5);
IkReal x4739=((1.0)*x4719);
IkReal x4740=((1.0)*x4718);
evalcond[0]=(((sj5*x4727))+((sj5*x4722))+x4718+(((-1.0)*r02*x4720)));
evalcond[1]=(((sj5*x4724))+((sj5*x4728))+(((-1.0)*r12*x4720))+(((-1.0)*x4739)));
evalcond[2]=((((-1.0)*sj1*x4740))+(((-1.0)*sj4*x4720*x4724))+((r10*x4730))+(((-1.0)*cj6*x4720*x4721))+(((-1.0)*r11*sj6*x4732))+(((-1.0)*sj4*x4733)));
evalcond[3]=((((-1.0)*sj1*x4739))+(((-1.0)*r01*x4720*x4725))+(((-1.0)*x4732*x4734))+(((-1.0)*sj4*x4720*x4722))+((r00*x4730))+(((-1.0)*sj4*x4735)));
evalcond[4]=((((-1.0)*cj4*x4720*x4722))+(((-1.0)*cj4*x4720*x4727))+(((-1.0)*r00*x4725))+(((-1.0)*cj1*x4739))+(((-1.0)*x4732*x4735))+((sj4*x4734)));
evalcond[5]=((((-1.0)*cj4*x4720*x4728))+(((-1.0)*cj4*x4720*x4724))+(((-1.0)*cj1*x4740))+(((-1.0)*x4732*x4733))+(((-1.0)*r10*x4725))+((sj6*x4721)));
evalcond[6]=((((-1.0)*x4722*x4723))+(((0.01)*x4735))+(((-1.0)*x4723*x4727))+((x4722*x4729))+x4736+x4737+(((-1.0)*px))+((x4727*x4729))+((r02*x4731))+((x4719*x4726)));
evalcond[7]=((((0.01)*x4733))+(((-1.0)*x4723*x4728))+(((-1.0)*x4723*x4724))+x4736+(((-1.0)*x4737))+(((-1.0)*py))+((x4724*x4729))+((x4728*x4729))+((x4718*x4726))+((r12*x4731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x4741=(cj6*sj5);
IkReal x4742=(sj5*sj6);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs((((r00*x4742))+((r01*x4741))+(((-1.0)*cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x4742))+(((-1.0)*r11*x4741))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4743=(cj4*sj6);
IkReal x4744=((1.0)*r01);
IkReal x4745=(cj5*sj4);
IkReal x4746=(sj4*sj5);
IkReal x4747=(cj4*cj6);
if( IKabs(((((-1.0)*cj6*x4744*x4745))+((r00*x4747))+(((-1.0)*r02*x4746))+(((-1.0)*r00*sj6*x4745))+(((-1.0)*x4743*x4744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x4743))+((r10*sj6*x4745))+((r12*x4746))+(((-1.0)*r10*x4747))+((cj6*r11*x4745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x4744*x4745))+((r00*x4747))+(((-1.0)*r02*x4746))+(((-1.0)*r00*sj6*x4745))+(((-1.0)*x4743*x4744))))+IKsqr((((r11*x4743))+((r10*sj6*x4745))+((r12*x4746))+(((-1.0)*r10*x4747))+((cj6*r11*x4745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj6*x4744*x4745))+((r00*x4747))+(((-1.0)*r02*x4746))+(((-1.0)*r00*sj6*x4745))+(((-1.0)*x4743*x4744))), (((r11*x4743))+((r10*sj6*x4745))+((r12*x4746))+(((-1.0)*r10*x4747))+((cj6*r11*x4745))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4748=IKcos(j0);
IkReal x4749=IKsin(j0);
IkReal x4750=((1.0)*sj4);
IkReal x4751=(r10*sj6);
IkReal x4752=((0.37429)*sj5);
IkReal x4753=(cj6*r00);
IkReal x4754=((0.37429)*cj5);
IkReal x4755=((0.01)*cj5);
IkReal x4756=((1.0)*cj4);
IkReal x4757=(r00*sj6);
IkReal x4758=(r02*sj5);
IkReal x4759=(r12*sj5);
IkReal x4760=(cj6*r10);
IkReal x4761=(r01*sj6);
IkReal x4762=(r11*sj6);
IkReal x4763=((1.0)*x4749);
IkReal x4764=(cj5*cj6*r11);
IkReal x4765=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x4750*x4759))+x4748+(((-1.0)*x4756*x4762))+(((-1.0)*x4750*x4764))+(((-1.0)*cj5*x4750*x4751))+((cj4*x4760)));
evalcond[1]=((((-1.0)*x4763))+(((-1.0)*x4750*x4758))+(((-1.0)*x4756*x4761))+(((-1.0)*x4750*x4765))+(((-1.0)*cj5*x4750*x4757))+((cj4*x4753)));
evalcond[2]=((((-1.0)*x4750*x4753))+((sj4*x4761))+(((-1.0)*x4756*x4758))+(((-1.0)*x4756*x4765))+(((-1.0)*cj5*x4756*x4757))+(((-1.0)*x4748)));
evalcond[3]=((((-1.0)*x4763))+((sj4*x4762))+(((-1.0)*x4756*x4759))+(((-1.0)*x4756*x4764))+(((-1.0)*x4750*x4760))+(((-1.0)*cj5*x4751*x4756)));
evalcond[4]=(((cj6*r01*x4755))+((x4755*x4757))+(((-1.0)*x4752*x4757))+(((-1.0)*px))+(((0.43342)*x4748))+(((0.01)*x4758))+((r02*x4754))+(((-1.0)*cj6*r01*x4752)));
evalcond[5]=(((r12*x4754))+(((-1.0)*cj6*r11*x4752))+(((-1.0)*py))+((x4751*x4755))+(((-1.0)*x4751*x4752))+(((0.43342)*x4749))+(((0.01)*x4759))+((cj6*r11*x4755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4766=((1.0)*cj4);
IkReal x4767=(sj4*sj5);
IkReal x4768=(cj5*sj4*sj6);
IkReal x4769=(cj5*cj6*sj4);
if( IKabs((((r02*x4767))+((r00*x4768))+((r01*x4769))+(((-1.0)*cj6*r00*x4766))+((cj4*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*cj6*r10))+(((-1.0)*r12*x4767))+(((-1.0)*r11*x4769))+(((-1.0)*r11*sj6*x4766))+(((-1.0)*r10*x4768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x4767))+((r00*x4768))+((r01*x4769))+(((-1.0)*cj6*r00*x4766))+((cj4*r01*sj6))))+IKsqr((((cj4*cj6*r10))+(((-1.0)*r12*x4767))+(((-1.0)*r11*x4769))+(((-1.0)*r11*sj6*x4766))+(((-1.0)*r10*x4768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*x4767))+((r00*x4768))+((r01*x4769))+(((-1.0)*cj6*r00*x4766))+((cj4*r01*sj6))), (((cj4*cj6*r10))+(((-1.0)*r12*x4767))+(((-1.0)*r11*x4769))+(((-1.0)*r11*sj6*x4766))+(((-1.0)*r10*x4768))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4770=IKsin(j0);
IkReal x4771=IKcos(j0);
IkReal x4772=((1.0)*sj4);
IkReal x4773=(r10*sj6);
IkReal x4774=((0.37429)*sj5);
IkReal x4775=(cj6*r00);
IkReal x4776=((0.37429)*cj5);
IkReal x4777=((0.01)*cj5);
IkReal x4778=((1.0)*cj4);
IkReal x4779=(r00*sj6);
IkReal x4780=(r02*sj5);
IkReal x4781=(r12*sj5);
IkReal x4782=(cj6*r10);
IkReal x4783=(r01*sj6);
IkReal x4784=(r11*sj6);
IkReal x4785=((1.0)*x4771);
IkReal x4786=(cj5*cj6*r11);
IkReal x4787=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x4772*x4787))+(((-1.0)*x4772*x4780))+(((-1.0)*cj5*x4772*x4779))+x4770+((cj4*x4775))+(((-1.0)*x4778*x4783)));
evalcond[1]=((((-1.0)*x4772*x4786))+(((-1.0)*x4772*x4781))+(((-1.0)*cj5*x4772*x4773))+((cj4*x4782))+(((-1.0)*x4778*x4784))+(((-1.0)*x4785)));
evalcond[2]=(((sj4*x4783))+(((-1.0)*cj5*x4778*x4779))+(((-1.0)*x4772*x4775))+(((-1.0)*x4778*x4780))+(((-1.0)*x4778*x4787))+(((-1.0)*x4785)));
evalcond[3]=((((-1.0)*x4770))+(((-1.0)*x4772*x4782))+((sj4*x4784))+(((-1.0)*cj5*x4773*x4778))+(((-1.0)*x4778*x4781))+(((-1.0)*x4778*x4786)));
evalcond[4]=((((-1.0)*x4774*x4779))+((x4777*x4779))+(((-1.0)*px))+((r02*x4776))+(((0.01)*x4780))+(((0.43342)*x4771))+(((-1.0)*cj6*r01*x4774))+((cj6*r01*x4777)));
evalcond[5]=(((r12*x4776))+(((-1.0)*x4773*x4774))+(((-1.0)*cj6*r11*x4774))+(((-1.0)*py))+(((0.01)*x4781))+((x4773*x4777))+((cj6*r11*x4777))+(((0.43342)*x4770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4788=(cj6*sj5);
IkReal x4789=(sj5*sj6);
if( IKabs((((r00*x4789))+((r01*x4788))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x4789))+(((-1.0)*r11*x4788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x4789))+((r01*x4788))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x4789))+(((-1.0)*r11*x4788))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x4789))+((r01*x4788))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x4789))+(((-1.0)*r11*x4788))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4790=IKcos(j0);
IkReal x4791=IKsin(j0);
IkReal x4792=((1.0)*cj5);
IkReal x4793=(sj5*sj6);
IkReal x4794=(r10*sj6);
IkReal x4795=(cj6*r11);
IkReal x4796=((0.01)*cj5);
IkReal x4797=(cj6*r01);
IkReal x4798=((0.37429)*cj5);
IkReal x4799=(r12*sj5);
IkReal x4800=((1.0)*cj4);
IkReal x4801=(r00*sj6);
IkReal x4802=((0.37429)*sj5);
IkReal x4803=(r02*sj5);
IkReal x4804=(sj4*sj6);
IkReal x4805=((1.0)*x4791);
IkReal x4806=((1.0)*cj6*sj4);
evalcond[0]=(((r10*x4793))+x4790+((sj5*x4795))+(((-1.0)*r12*x4792)));
evalcond[1]=(((r00*x4793))+(((-1.0)*r02*x4792))+((sj5*x4797))+(((-1.0)*x4805)));
evalcond[2]=((((-1.0)*cj4*x4792*x4797))+((r01*x4804))+(((-1.0)*x4800*x4803))+(((-1.0)*r00*x4806))+(((-1.0)*cj4*x4792*x4801))+(((-1.0)*x4790)));
evalcond[3]=((((-1.0)*cj4*x4792*x4794))+(((-1.0)*cj4*x4792*x4795))+(((-1.0)*x4799*x4800))+(((-1.0)*r10*x4806))+(((-1.0)*x4805))+((r11*x4804)));
evalcond[4]=(((x4796*x4797))+(((-0.37429)*r00*x4793))+(((0.01)*x4803))+(((-1.0)*x4797*x4802))+(((-0.069)*x4791))+(((-1.0)*px))+((x4796*x4801))+((r02*x4798))+(((0.43342)*x4790)));
evalcond[5]=(((x4795*x4796))+(((0.01)*x4799))+(((-0.37429)*r10*x4793))+(((0.069)*x4790))+(((-1.0)*py))+(((0.43342)*x4791))+((r12*x4798))+(((-1.0)*x4795*x4802))+((x4794*x4796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4807=(sj5*sj6);
IkReal x4808=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x4807))+(((-1.0)*r01*x4808))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x4807))+((r11*x4808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x4807))+(((-1.0)*r01*x4808))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x4807))+((r11*x4808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x4807))+(((-1.0)*r01*x4808))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x4807))+((r11*x4808))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4809=IKsin(j0);
IkReal x4810=IKcos(j0);
IkReal x4811=((1.0)*cj5);
IkReal x4812=(sj5*sj6);
IkReal x4813=(r10*sj6);
IkReal x4814=(cj6*r11);
IkReal x4815=((0.01)*cj5);
IkReal x4816=(cj6*r01);
IkReal x4817=((0.37429)*cj5);
IkReal x4818=(r12*sj5);
IkReal x4819=((1.0)*cj4);
IkReal x4820=(r00*sj6);
IkReal x4821=((0.37429)*sj5);
IkReal x4822=(r02*sj5);
IkReal x4823=(sj4*sj6);
IkReal x4824=((1.0)*x4810);
IkReal x4825=((1.0)*cj6*sj4);
evalcond[0]=(((sj5*x4816))+(((-1.0)*r02*x4811))+((r00*x4812))+x4809);
evalcond[1]=((((-1.0)*x4824))+((sj5*x4814))+((r10*x4812))+(((-1.0)*r12*x4811)));
evalcond[2]=((((-1.0)*r00*x4825))+(((-1.0)*x4824))+(((-1.0)*x4819*x4822))+(((-1.0)*cj4*x4811*x4816))+((r01*x4823))+(((-1.0)*cj4*x4811*x4820)));
evalcond[3]=(((r11*x4823))+(((-1.0)*r10*x4825))+(((-1.0)*x4809))+(((-1.0)*cj4*x4811*x4814))+(((-1.0)*cj4*x4811*x4813))+(((-1.0)*x4818*x4819)));
evalcond[4]=(((x4815*x4816))+(((-0.37429)*r00*x4812))+(((0.069)*x4809))+(((0.43342)*x4810))+(((-1.0)*x4816*x4821))+((r02*x4817))+(((-1.0)*px))+(((0.01)*x4822))+((x4815*x4820)));
evalcond[5]=((((0.43342)*x4809))+(((-1.0)*x4814*x4821))+((x4813*x4815))+(((0.01)*x4818))+((r12*x4817))+(((-1.0)*py))+(((-0.069)*x4810))+(((-0.37429)*r10*x4812))+((x4814*x4815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4826=(cj5*sj4);
CheckValue<IkReal> x4827=IKPowWithIntegerCheck(sj2,-1);
if(!x4827.valid){
continue;
}
CheckValue<IkReal> x4828=IKPowWithIntegerCheck(cj2,-1);
if(!x4828.valid){
continue;
}
if( IKabs(((x4827.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4828.value)*(((((-1.0)*cj4*cj6*r10))+((cj6*r11*x4826))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x4826)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4827.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))+IKsqr(((x4828.value)*(((((-1.0)*cj4*cj6*r10))+((cj6*r11*x4826))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x4826))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4827.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))), ((x4828.value)*(((((-1.0)*cj4*cj6*r10))+((cj6*r11*x4826))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x4826))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4829=IKcos(j0);
IkReal x4830=IKsin(j0);
IkReal x4831=((1.0)*cj5);
IkReal x4832=(cj6*sj4);
IkReal x4833=((0.37429)*sj5);
IkReal x4834=(r10*sj6);
IkReal x4835=((0.069)*sj2);
IkReal x4836=(cj6*r01);
IkReal x4837=(r00*sj6);
IkReal x4838=(cj6*r11);
IkReal x4839=((0.01)*cj5);
IkReal x4840=(sj4*sj6);
IkReal x4841=(cj4*cj6);
IkReal x4842=((0.37429)*cj5);
IkReal x4843=(r12*sj5);
IkReal x4844=((1.0)*cj4);
IkReal x4845=(r02*sj5);
IkReal x4846=((1.0)*sj4*sj5);
IkReal x4847=((1.0)*x4830);
evalcond[0]=(((sj2*x4829))+(((-1.0)*r12*x4831))+((sj5*x4834))+((sj5*x4838)));
evalcond[1]=((((-1.0)*sj2*x4847))+((sj5*x4836))+((sj5*x4837))+(((-1.0)*r02*x4831)));
evalcond[2]=(((r10*x4841))+(((-1.0)*sj4*x4831*x4834))+((cj2*x4829))+(((-1.0)*r11*x4831*x4832))+(((-1.0)*sj4*x4843))+(((-1.0)*r11*sj6*x4844)));
evalcond[3]=((((-1.0)*r00*x4832))+(((-1.0)*x4844*x4845))+(((-1.0)*x4829))+(((-1.0)*cj4*x4831*x4836))+(((-1.0)*cj4*x4831*x4837))+((r01*x4840)));
evalcond[4]=((((-1.0)*x4847))+((r11*x4840))+(((-1.0)*cj4*x4831*x4838))+(((-1.0)*cj4*x4831*x4834))+(((-1.0)*r10*x4832))+(((-1.0)*x4843*x4844)));
evalcond[5]=((((-1.0)*r01*sj6*x4844))+(((-1.0)*cj2*x4847))+(((-1.0)*sj4*x4831*x4837))+(((-1.0)*sj4*x4845))+((r00*x4841))+(((-1.0)*r01*x4831*x4832)));
evalcond[6]=(((r02*x4842))+(((0.01)*x4845))+(((-1.0)*x4830*x4835))+(((-1.0)*x4833*x4837))+(((-1.0)*x4833*x4836))+((x4836*x4839))+((x4837*x4839))+(((0.43342)*x4829))+(((-1.0)*px)));
evalcond[7]=((((0.01)*x4843))+(((-1.0)*x4833*x4838))+(((-1.0)*x4833*x4834))+(((-1.0)*py))+((x4838*x4839))+((x4829*x4835))+((r12*x4842))+((x4834*x4839))+(((0.43342)*x4830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4848=((1.0)*cj6);
IkReal x4849=((1.0)*sj5);
IkReal x4850=(r10*sj6);
IkReal x4851=(cj4*cj5);
CheckValue<IkReal> x4852=IKPowWithIntegerCheck(sj2,-1);
if(!x4852.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r12*x4849))+(((-1.0)*r11*x4848*x4851))+(((-1.0)*r10*sj4*x4848))+((r11*sj4*sj6))+(((-1.0)*x4850*x4851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4852.value)*((((cj5*r12))+(((-1.0)*x4849*x4850))+(((-1.0)*r11*sj5*x4848)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x4849))+(((-1.0)*r11*x4848*x4851))+(((-1.0)*r10*sj4*x4848))+((r11*sj4*sj6))+(((-1.0)*x4850*x4851))))+IKsqr(((x4852.value)*((((cj5*r12))+(((-1.0)*x4849*x4850))+(((-1.0)*r11*sj5*x4848))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r12*x4849))+(((-1.0)*r11*x4848*x4851))+(((-1.0)*r10*sj4*x4848))+((r11*sj4*sj6))+(((-1.0)*x4850*x4851))), ((x4852.value)*((((cj5*r12))+(((-1.0)*x4849*x4850))+(((-1.0)*r11*sj5*x4848))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4853=IKcos(j0);
IkReal x4854=IKsin(j0);
IkReal x4855=((1.0)*cj5);
IkReal x4856=(cj6*sj4);
IkReal x4857=((0.37429)*sj5);
IkReal x4858=(r10*sj6);
IkReal x4859=((0.069)*sj2);
IkReal x4860=(cj6*r01);
IkReal x4861=(r00*sj6);
IkReal x4862=(cj6*r11);
IkReal x4863=((0.01)*cj5);
IkReal x4864=(sj4*sj6);
IkReal x4865=(cj4*cj6);
IkReal x4866=((0.37429)*cj5);
IkReal x4867=(r12*sj5);
IkReal x4868=((1.0)*cj4);
IkReal x4869=(r02*sj5);
IkReal x4870=((1.0)*sj4*sj5);
IkReal x4871=((1.0)*x4854);
evalcond[0]=((((-1.0)*r12*x4855))+((sj2*x4853))+((sj5*x4862))+((sj5*x4858)));
evalcond[1]=((((-1.0)*sj2*x4871))+((sj5*x4861))+((sj5*x4860))+(((-1.0)*r02*x4855)));
evalcond[2]=((((-1.0)*r11*x4855*x4856))+((cj2*x4853))+(((-1.0)*sj4*x4867))+((r10*x4865))+(((-1.0)*r11*sj6*x4868))+(((-1.0)*sj4*x4855*x4858)));
evalcond[3]=((((-1.0)*cj4*x4855*x4860))+(((-1.0)*cj4*x4855*x4861))+((r01*x4864))+(((-1.0)*r00*x4856))+(((-1.0)*x4868*x4869))+(((-1.0)*x4853)));
evalcond[4]=((((-1.0)*cj4*x4855*x4862))+((r11*x4864))+(((-1.0)*cj4*x4855*x4858))+(((-1.0)*x4867*x4868))+(((-1.0)*r10*x4856))+(((-1.0)*x4871)));
evalcond[5]=((((-1.0)*sj4*x4855*x4861))+((r00*x4865))+(((-1.0)*r01*x4855*x4856))+(((-1.0)*cj2*x4871))+(((-1.0)*sj4*x4869))+(((-1.0)*r01*sj6*x4868)));
evalcond[6]=(((x4861*x4863))+(((-1.0)*x4857*x4861))+(((-1.0)*x4857*x4860))+((x4860*x4863))+(((-1.0)*px))+((r02*x4866))+(((0.43342)*x4853))+(((0.01)*x4869))+(((-1.0)*x4854*x4859)));
evalcond[7]=(((x4853*x4859))+((r12*x4866))+(((-1.0)*x4857*x4862))+(((-1.0)*x4857*x4858))+((x4862*x4863))+(((-1.0)*py))+(((0.43342)*x4854))+(((0.01)*x4867))+((x4858*x4863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4872=(cj6*sj5);
IkReal x4873=(sj5*sj6);
CheckValue<IkReal> x4874 = IKatan2WithCheck(IkReal((((r00*x4873))+((r01*x4872))+(((-1.0)*cj5*r02)))),IkReal((((cj5*r12))+(((-1.0)*r10*x4873))+(((-1.0)*r11*x4872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4874.valid){
continue;
}
CheckValue<IkReal> x4875=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x4875.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4874.value)+(((1.5707963267949)*(x4875.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4876=IKcos(j0);
IkReal x4877=IKsin(j0);
IkReal x4878=((1.0)*cj5);
IkReal x4879=(cj6*sj4);
IkReal x4880=((0.37429)*sj5);
IkReal x4881=(r10*sj6);
IkReal x4882=((0.069)*sj2);
IkReal x4883=(cj6*r01);
IkReal x4884=(r00*sj6);
IkReal x4885=(cj6*r11);
IkReal x4886=((0.01)*cj5);
IkReal x4887=(sj4*sj6);
IkReal x4888=(cj4*cj6);
IkReal x4889=((0.37429)*cj5);
IkReal x4890=(r12*sj5);
IkReal x4891=((1.0)*cj4);
IkReal x4892=(r02*sj5);
IkReal x4893=((1.0)*sj4*sj5);
IkReal x4894=((1.0)*x4877);
evalcond[0]=(((sj5*x4881))+((sj5*x4885))+(((-1.0)*r12*x4878))+((sj2*x4876)));
evalcond[1]=(((sj5*x4883))+((sj5*x4884))+(((-1.0)*sj2*x4894))+(((-1.0)*r02*x4878)));
evalcond[2]=((((-1.0)*r11*sj6*x4891))+(((-1.0)*sj4*x4890))+((cj2*x4876))+(((-1.0)*sj4*x4878*x4881))+((r10*x4888))+(((-1.0)*r11*x4878*x4879)));
evalcond[3]=((((-1.0)*r00*x4879))+(((-1.0)*x4891*x4892))+(((-1.0)*x4876))+((r01*x4887))+(((-1.0)*cj4*x4878*x4883))+(((-1.0)*cj4*x4878*x4884)));
evalcond[4]=((((-1.0)*x4894))+((r11*x4887))+(((-1.0)*r10*x4879))+(((-1.0)*x4890*x4891))+(((-1.0)*cj4*x4878*x4881))+(((-1.0)*cj4*x4878*x4885)));
evalcond[5]=((((-1.0)*r01*sj6*x4891))+(((-1.0)*sj4*x4892))+(((-1.0)*r01*x4878*x4879))+(((-1.0)*cj2*x4894))+(((-1.0)*sj4*x4878*x4884))+((r00*x4888)));
evalcond[6]=((((-1.0)*x4877*x4882))+(((0.43342)*x4876))+(((-1.0)*x4880*x4883))+(((-1.0)*x4880*x4884))+((r02*x4889))+(((0.01)*x4892))+(((-1.0)*px))+((x4883*x4886))+((x4884*x4886)));
evalcond[7]=(((x4885*x4886))+((r12*x4889))+(((0.43342)*x4877))+(((-1.0)*x4880*x4881))+(((-1.0)*x4880*x4885))+((x4876*x4882))+(((0.01)*x4890))+(((-1.0)*py))+((x4881*x4886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x4895=(cj6*sj5);
IkReal x4896=(sj5*sj6);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x4895))+(((-1.0)*r10*x4896)))))+(IKabs((((r00*x4896))+((r01*x4895))+(((-1.0)*cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4897=(cj6*sj5);
IkReal x4898=(sj5*sj6);
if( IKabs((((r00*x4898))+((r01*x4897))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x4897))+(((-1.0)*r10*x4898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x4898))+((r01*x4897))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x4897))+(((-1.0)*r10*x4898))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x4898))+((r01*x4897))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x4897))+(((-1.0)*r10*x4898))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4899=IKcos(j0);
IkReal x4900=IKsin(j0);
IkReal x4901=((1.0)*cj5);
IkReal x4902=(sj5*sj6);
IkReal x4903=((0.37429)*cj5);
IkReal x4904=(r10*sj6);
IkReal x4905=(cj6*r11);
IkReal x4906=((0.01)*cj5);
IkReal x4907=(cj6*r01);
IkReal x4908=(r12*sj5);
IkReal x4909=((1.0)*cj4);
IkReal x4910=(r00*sj6);
IkReal x4911=((0.37429)*sj5);
IkReal x4912=(r02*sj5);
IkReal x4913=(sj4*sj6);
IkReal x4914=((1.0)*cj6*sj4);
evalcond[0]=((((-1.0)*r12*x4901))+((r10*x4902))+((sj5*x4905))+x4899);
evalcond[1]=((((-1.0)*x4900))+(((-1.0)*r02*x4901))+((r00*x4902))+((sj5*x4907)));
evalcond[2]=((((-1.0)*x4909*x4912))+(((-1.0)*cj4*x4901*x4907))+(((-1.0)*cj4*x4901*x4910))+((r01*x4913))+(((-1.0)*r00*x4914))+x4899);
evalcond[3]=(x4900+(((-1.0)*x4908*x4909))+(((-1.0)*r10*x4914))+(((-1.0)*cj4*x4901*x4905))+(((-1.0)*cj4*x4901*x4904))+((r11*x4913)));
evalcond[4]=((((0.01)*x4912))+((r02*x4903))+((x4906*x4910))+(((-1.0)*px))+((x4906*x4907))+(((-0.37429)*r00*x4902))+(((-0.29542)*x4899))+(((-0.069)*x4900))+(((-1.0)*x4907*x4911)));
evalcond[5]=(((x4905*x4906))+((x4904*x4906))+(((-0.29542)*x4900))+(((-1.0)*x4905*x4911))+(((0.069)*x4899))+(((-1.0)*py))+((r12*x4903))+(((0.01)*x4908))+(((-0.37429)*r10*x4902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4915=(sj5*sj6);
IkReal x4916=(cj6*sj5);
if( IKabs(((((-1.0)*r01*x4916))+(((-1.0)*r00*x4915))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x4915))+((r11*x4916)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x4916))+(((-1.0)*r00*x4915))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x4915))+((r11*x4916))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x4916))+(((-1.0)*r00*x4915))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x4915))+((r11*x4916))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4917=IKcos(j0);
IkReal x4918=IKsin(j0);
IkReal x4919=((1.0)*cj5);
IkReal x4920=(sj5*sj6);
IkReal x4921=((0.37429)*cj5);
IkReal x4922=(r10*sj6);
IkReal x4923=(cj6*r11);
IkReal x4924=((0.01)*cj5);
IkReal x4925=(cj6*r01);
IkReal x4926=(r12*sj5);
IkReal x4927=((1.0)*cj4);
IkReal x4928=(r00*sj6);
IkReal x4929=((0.37429)*sj5);
IkReal x4930=(r02*sj5);
IkReal x4931=(sj4*sj6);
IkReal x4932=((1.0)*cj6*sj4);
evalcond[0]=(x4918+(((-1.0)*r02*x4919))+((sj5*x4925))+((r00*x4920)));
evalcond[1]=(((r10*x4920))+(((-1.0)*r12*x4919))+(((-1.0)*x4917))+((sj5*x4923)));
evalcond[2]=(x4917+(((-1.0)*r00*x4932))+((r01*x4931))+(((-1.0)*cj4*x4919*x4925))+(((-1.0)*cj4*x4919*x4928))+(((-1.0)*x4927*x4930)));
evalcond[3]=(x4918+(((-1.0)*x4926*x4927))+(((-1.0)*cj4*x4919*x4923))+(((-1.0)*cj4*x4919*x4922))+(((-1.0)*r10*x4932))+((r11*x4931)));
evalcond[4]=((((-0.29542)*x4917))+((x4924*x4928))+((x4924*x4925))+(((-0.37429)*r00*x4920))+(((0.01)*x4930))+(((-1.0)*px))+((r02*x4921))+(((0.069)*x4918))+(((-1.0)*x4925*x4929)));
evalcond[5]=((((-0.29542)*x4918))+((x4922*x4924))+(((-0.37429)*r10*x4920))+((x4923*x4924))+(((-1.0)*py))+(((0.01)*x4926))+(((-0.069)*x4917))+(((-1.0)*x4923*x4929))+((r12*x4921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4933=(r11*sj6);
IkReal x4934=(cj6*r10);
IkReal x4935=(r12*sj5);
IkReal x4936=(cj5*cj6*r11);
IkReal x4937=(cj5*r10*sj6);
if( IKabs(((((-1.0)*sj4*x4933))+((cj4*x4937))+((cj4*x4936))+((cj4*x4935))+((sj4*x4934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x4934))+((cj4*x4933))+((sj4*x4936))+((sj4*x4935))+((sj4*x4937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x4933))+((cj4*x4937))+((cj4*x4936))+((cj4*x4935))+((sj4*x4934))))+IKsqr(((((-1.0)*cj4*x4934))+((cj4*x4933))+((sj4*x4936))+((sj4*x4935))+((sj4*x4937))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*sj4*x4933))+((cj4*x4937))+((cj4*x4936))+((cj4*x4935))+((sj4*x4934))), ((((-1.0)*cj4*x4934))+((cj4*x4933))+((sj4*x4936))+((sj4*x4935))+((sj4*x4937))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4938=IKcos(j0);
IkReal x4939=IKsin(j0);
IkReal x4940=((1.0)*sj4);
IkReal x4941=(r10*sj6);
IkReal x4942=((0.37429)*sj5);
IkReal x4943=(cj6*r00);
IkReal x4944=((0.01)*cj5);
IkReal x4945=((1.0)*cj4);
IkReal x4946=(r00*sj6);
IkReal x4947=(r02*sj5);
IkReal x4948=(r12*sj5);
IkReal x4949=((0.37429)*cj5);
IkReal x4950=(cj6*r10);
IkReal x4951=(r01*sj6);
IkReal x4952=(r11*sj6);
IkReal x4953=(cj5*cj6*r11);
IkReal x4954=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x4940*x4953))+x4938+(((-1.0)*x4940*x4948))+(((-1.0)*x4945*x4952))+((cj4*x4950))+(((-1.0)*cj5*x4940*x4941)));
evalcond[1]=(x4938+(((-1.0)*x4940*x4943))+(((-1.0)*x4945*x4947))+(((-1.0)*x4945*x4954))+((sj4*x4951))+(((-1.0)*cj5*x4945*x4946)));
evalcond[2]=((((-1.0)*x4940*x4950))+x4939+(((-1.0)*x4945*x4948))+(((-1.0)*x4945*x4953))+((sj4*x4952))+(((-1.0)*cj5*x4941*x4945)));
evalcond[3]=((((-1.0)*x4940*x4954))+(((-1.0)*x4939))+(((-1.0)*x4940*x4947))+(((-1.0)*x4945*x4951))+((cj4*x4943))+(((-1.0)*cj5*x4940*x4946)));
evalcond[4]=((((-1.0)*cj6*r01*x4942))+(((-1.0)*x4942*x4946))+(((0.01)*x4947))+((r02*x4949))+(((-1.0)*px))+(((-0.29542)*x4938))+((cj6*r01*x4944))+((x4944*x4946)));
evalcond[5]=((((0.01)*x4948))+(((-1.0)*x4941*x4942))+((cj6*r11*x4944))+(((-1.0)*cj6*r11*x4942))+((r12*x4949))+(((-1.0)*py))+((x4941*x4944))+(((-0.29542)*x4939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4955=(cj6*r00);
IkReal x4956=(r02*sj5);
IkReal x4957=(r01*sj6);
IkReal x4958=(cj5*r00*sj6);
IkReal x4959=(cj5*cj6*r01);
if( IKabs(((((-1.0)*cj4*x4955))+((sj4*x4959))+((sj4*x4958))+((sj4*x4956))+((cj4*x4957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x4955))+(((-1.0)*sj4*x4957))+((cj4*x4956))+((cj4*x4959))+((cj4*x4958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x4955))+((sj4*x4959))+((sj4*x4958))+((sj4*x4956))+((cj4*x4957))))+IKsqr((((sj4*x4955))+(((-1.0)*sj4*x4957))+((cj4*x4956))+((cj4*x4959))+((cj4*x4958))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*x4955))+((sj4*x4959))+((sj4*x4958))+((sj4*x4956))+((cj4*x4957))), (((sj4*x4955))+(((-1.0)*sj4*x4957))+((cj4*x4956))+((cj4*x4959))+((cj4*x4958))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x4960=IKsin(j0);
IkReal x4961=IKcos(j0);
IkReal x4962=((1.0)*sj4);
IkReal x4963=(r10*sj6);
IkReal x4964=((0.37429)*sj5);
IkReal x4965=(cj6*r00);
IkReal x4966=((0.01)*cj5);
IkReal x4967=(r12*sj5);
IkReal x4968=(r00*sj6);
IkReal x4969=(r02*sj5);
IkReal x4970=(sj4*sj6);
IkReal x4971=((1.0)*cj4);
IkReal x4972=((0.37429)*cj5);
IkReal x4973=(cj6*r10);
IkReal x4974=(cj5*cj6*r11);
IkReal x4975=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*r01*sj6*x4971))+x4960+(((-1.0)*cj5*x4962*x4968))+(((-1.0)*x4962*x4975))+(((-1.0)*x4962*x4969))+((cj4*x4965)));
evalcond[1]=(x4961+(((-1.0)*x4962*x4965))+(((-1.0)*x4971*x4975))+(((-1.0)*cj5*x4968*x4971))+((r01*x4970))+(((-1.0)*x4969*x4971)));
evalcond[2]=(x4960+(((-1.0)*cj5*x4963*x4971))+((r11*x4970))+(((-1.0)*x4962*x4973))+(((-1.0)*x4971*x4974))+(((-1.0)*x4967*x4971)));
evalcond[3]=((((-1.0)*r11*sj6*x4971))+(((-1.0)*cj5*x4962*x4963))+(((-1.0)*x4962*x4974))+(((-1.0)*x4961))+(((-1.0)*x4962*x4967))+((cj4*x4973)));
evalcond[4]=((((-1.0)*cj6*r01*x4964))+((x4966*x4968))+(((0.01)*x4969))+(((-1.0)*px))+((r02*x4972))+(((-1.0)*x4964*x4968))+((cj6*r01*x4966))+(((-0.29542)*x4961)));
evalcond[5]=(((x4963*x4966))+(((0.01)*x4967))+((cj6*r11*x4966))+((r12*x4972))+(((-1.0)*x4963*x4964))+(((-1.0)*py))+(((-0.29542)*x4960))+(((-1.0)*cj6*r11*x4964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4976=((1.0)*sj6);
IkReal x4977=(cj5*sj4);
IkReal x4978=((1.0)*sj5);
CheckValue<IkReal> x4979=IKPowWithIntegerCheck(cj2,-1);
if(!x4979.valid){
continue;
}
CheckValue<IkReal> x4980=IKPowWithIntegerCheck(sj2,-1);
if(!x4980.valid){
continue;
}
if( IKabs(((x4979.value)*(((((-1.0)*cj6*r01*x4977))+(((-1.0)*r02*sj4*x4978))+(((-1.0)*cj4*r01*x4976))+(((-1.0)*r00*x4976*x4977))+((cj4*cj6*r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x4980.value)*((((cj5*r12))+(((-1.0)*cj6*r11*x4978))+(((-1.0)*r10*sj5*x4976)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x4979.value)*(((((-1.0)*cj6*r01*x4977))+(((-1.0)*r02*sj4*x4978))+(((-1.0)*cj4*r01*x4976))+(((-1.0)*r00*x4976*x4977))+((cj4*cj6*r00))))))+IKsqr(((x4980.value)*((((cj5*r12))+(((-1.0)*cj6*r11*x4978))+(((-1.0)*r10*sj5*x4976))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x4979.value)*(((((-1.0)*cj6*r01*x4977))+(((-1.0)*r02*sj4*x4978))+(((-1.0)*cj4*r01*x4976))+(((-1.0)*r00*x4976*x4977))+((cj4*cj6*r00))))), ((x4980.value)*((((cj5*r12))+(((-1.0)*cj6*r11*x4978))+(((-1.0)*r10*sj5*x4976))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4981=IKcos(j0);
IkReal x4982=IKsin(j0);
IkReal x4983=((1.0)*cj5);
IkReal x4984=(cj6*sj4);
IkReal x4985=((0.37429)*sj5);
IkReal x4986=(r10*sj6);
IkReal x4987=((0.37429)*cj5);
IkReal x4988=((0.069)*sj2);
IkReal x4989=(cj6*r01);
IkReal x4990=(r00*sj6);
IkReal x4991=(cj6*r11);
IkReal x4992=((0.01)*cj5);
IkReal x4993=(r12*sj5);
IkReal x4994=(cj4*cj6);
IkReal x4995=((1.0)*cj4);
IkReal x4996=(r01*sj6);
IkReal x4997=(r02*sj5);
IkReal x4998=(r11*sj6);
IkReal x4999=((1.0)*sj4*sj5);
IkReal x5000=((1.0)*x4982);
evalcond[0]=(((sj5*x4991))+((sj5*x4986))+((sj2*x4981))+(((-1.0)*r12*x4983)));
evalcond[1]=(((sj5*x4990))+((sj5*x4989))+(((-1.0)*sj2*x5000))+(((-1.0)*r02*x4983)));
evalcond[2]=(x4981+(((-1.0)*r00*x4984))+((sj4*x4996))+(((-1.0)*cj4*x4983*x4990))+(((-1.0)*x4995*x4997))+(((-1.0)*cj4*x4983*x4989)));
evalcond[3]=(x4982+((sj4*x4998))+(((-1.0)*x4993*x4995))+(((-1.0)*cj4*x4983*x4991))+(((-1.0)*r10*x4984))+(((-1.0)*cj4*x4983*x4986)));
evalcond[4]=((((-1.0)*r11*x4983*x4984))+((r10*x4994))+(((-1.0)*sj4*x4983*x4986))+(((-1.0)*sj4*x4993))+(((-1.0)*x4995*x4998))+((cj2*x4981)));
evalcond[5]=((((-1.0)*sj4*x4983*x4990))+(((-1.0)*sj4*x4997))+(((-1.0)*cj2*x5000))+(((-1.0)*x4995*x4996))+(((-1.0)*r01*x4983*x4984))+((r00*x4994)));
evalcond[6]=((((-1.0)*x4982*x4988))+(((-1.0)*x4985*x4989))+(((0.01)*x4997))+((x4989*x4992))+(((-1.0)*px))+(((-0.29542)*x4981))+(((-1.0)*x4985*x4990))+((r02*x4987))+((x4990*x4992)));
evalcond[7]=(((r12*x4987))+(((-1.0)*x4985*x4986))+(((0.01)*x4993))+((x4986*x4992))+(((-1.0)*py))+(((-0.29542)*x4982))+(((-1.0)*x4985*x4991))+((x4981*x4988))+((x4991*x4992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5001=(cj6*r01);
IkReal x5002=(r00*sj6);
IkReal x5003=(cj4*cj5);
CheckValue<IkReal> x5004=IKPowWithIntegerCheck(sj2,-1);
if(!x5004.valid){
continue;
}
if( IKabs(((x5004.value)*((((sj5*x5002))+((sj5*x5001))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5001*x5003))+((x5002*x5003))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5004.value)*((((sj5*x5002))+((sj5*x5001))+(((-1.0)*cj5*r02))))))+IKsqr((((x5001*x5003))+((x5002*x5003))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5004.value)*((((sj5*x5002))+((sj5*x5001))+(((-1.0)*cj5*r02))))), (((x5001*x5003))+((x5002*x5003))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5005=IKcos(j0);
IkReal x5006=IKsin(j0);
IkReal x5007=((1.0)*cj5);
IkReal x5008=(cj6*sj4);
IkReal x5009=((0.37429)*sj5);
IkReal x5010=(r10*sj6);
IkReal x5011=((0.37429)*cj5);
IkReal x5012=((0.069)*sj2);
IkReal x5013=(cj6*r01);
IkReal x5014=(r00*sj6);
IkReal x5015=(cj6*r11);
IkReal x5016=((0.01)*cj5);
IkReal x5017=(r12*sj5);
IkReal x5018=(cj4*cj6);
IkReal x5019=((1.0)*cj4);
IkReal x5020=(r01*sj6);
IkReal x5021=(r02*sj5);
IkReal x5022=(r11*sj6);
IkReal x5023=((1.0)*sj4*sj5);
IkReal x5024=((1.0)*x5006);
evalcond[0]=(((sj5*x5015))+((sj5*x5010))+(((-1.0)*r12*x5007))+((sj2*x5005)));
evalcond[1]=(((sj5*x5013))+((sj5*x5014))+(((-1.0)*sj2*x5024))+(((-1.0)*r02*x5007)));
evalcond[2]=((((-1.0)*x5019*x5021))+(((-1.0)*r00*x5008))+((sj4*x5020))+x5005+(((-1.0)*cj4*x5007*x5014))+(((-1.0)*cj4*x5007*x5013)));
evalcond[3]=(((sj4*x5022))+(((-1.0)*x5017*x5019))+x5006+(((-1.0)*r10*x5008))+(((-1.0)*cj4*x5007*x5015))+(((-1.0)*cj4*x5007*x5010)));
evalcond[4]=((((-1.0)*x5019*x5022))+(((-1.0)*r11*x5007*x5008))+(((-1.0)*sj4*x5017))+((cj2*x5005))+((r10*x5018))+(((-1.0)*sj4*x5007*x5010)));
evalcond[5]=((((-1.0)*x5019*x5020))+(((-1.0)*r01*x5007*x5008))+(((-1.0)*cj2*x5024))+(((-1.0)*sj4*x5021))+((r00*x5018))+(((-1.0)*sj4*x5007*x5014)));
evalcond[6]=(((x5014*x5016))+(((0.01)*x5021))+(((-1.0)*x5009*x5014))+(((-1.0)*x5009*x5013))+((r02*x5011))+(((-1.0)*px))+((x5013*x5016))+(((-1.0)*x5006*x5012))+(((-0.29542)*x5005)));
evalcond[7]=((((-1.0)*x5009*x5010))+(((-1.0)*x5009*x5015))+((x5010*x5016))+(((0.01)*x5017))+(((-1.0)*py))+(((-0.29542)*x5006))+((r12*x5011))+((x5005*x5012))+((x5015*x5016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5025=(cj6*sj5);
IkReal x5026=(sj5*sj6);
CheckValue<IkReal> x5027=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x5027.valid){
continue;
}
CheckValue<IkReal> x5028 = IKatan2WithCheck(IkReal((((r00*x5026))+((r01*x5025))+(((-1.0)*cj5*r02)))),IkReal(((((-1.0)*r11*x5025))+((cj5*r12))+(((-1.0)*r10*x5026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5028.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5027.value)))+(x5028.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5029=IKcos(j0);
IkReal x5030=IKsin(j0);
IkReal x5031=((1.0)*cj5);
IkReal x5032=(cj6*sj4);
IkReal x5033=((0.37429)*sj5);
IkReal x5034=(r10*sj6);
IkReal x5035=((0.37429)*cj5);
IkReal x5036=((0.069)*sj2);
IkReal x5037=(cj6*r01);
IkReal x5038=(r00*sj6);
IkReal x5039=(cj6*r11);
IkReal x5040=((0.01)*cj5);
IkReal x5041=(r12*sj5);
IkReal x5042=(cj4*cj6);
IkReal x5043=((1.0)*cj4);
IkReal x5044=(r01*sj6);
IkReal x5045=(r02*sj5);
IkReal x5046=(r11*sj6);
IkReal x5047=((1.0)*sj4*sj5);
IkReal x5048=((1.0)*x5030);
evalcond[0]=((((-1.0)*r12*x5031))+((sj5*x5039))+((sj5*x5034))+((sj2*x5029)));
evalcond[1]=(((sj5*x5038))+((sj5*x5037))+(((-1.0)*sj2*x5048))+(((-1.0)*r02*x5031)));
evalcond[2]=((((-1.0)*x5043*x5045))+(((-1.0)*r00*x5032))+(((-1.0)*cj4*x5031*x5037))+(((-1.0)*cj4*x5031*x5038))+x5029+((sj4*x5044)));
evalcond[3]=((((-1.0)*x5041*x5043))+(((-1.0)*cj4*x5031*x5034))+(((-1.0)*cj4*x5031*x5039))+x5030+((sj4*x5046))+(((-1.0)*r10*x5032)));
evalcond[4]=((((-1.0)*x5043*x5046))+((r10*x5042))+((cj2*x5029))+(((-1.0)*sj4*x5041))+(((-1.0)*r11*x5031*x5032))+(((-1.0)*sj4*x5031*x5034)));
evalcond[5]=((((-1.0)*x5043*x5044))+(((-1.0)*r01*x5031*x5032))+(((-1.0)*cj2*x5048))+(((-1.0)*sj4*x5045))+((r00*x5042))+(((-1.0)*sj4*x5031*x5038)));
evalcond[6]=(((x5037*x5040))+(((-1.0)*x5030*x5036))+((r02*x5035))+((x5038*x5040))+(((-1.0)*x5033*x5038))+(((-1.0)*x5033*x5037))+(((-1.0)*px))+(((0.01)*x5045))+(((-0.29542)*x5029)));
evalcond[7]=(((r12*x5035))+((x5034*x5040))+((x5039*x5040))+(((-1.0)*x5033*x5039))+(((-1.0)*x5033*x5034))+(((-1.0)*py))+(((0.01)*x5041))+(((-0.29542)*x5030))+((x5029*x5036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x5049=(cj6*sj5);
IkReal x5050=(sj5*sj6);
IkReal x5051=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs((((r10*x5050))+(((-1.0)*r12*x5051))+((r11*x5049)))))+(IKabs((((r00*x5050))+(((-1.0)*r02*x5051))+((r01*x5049))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5052=(cj6*sj5);
IkReal x5053=(sj5*sj6);
IkReal x5054=((1.0)*cj5);
if( IKabs((((r10*x5053))+(((-1.0)*r12*x5054))+((r11*x5052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x5053))+((r01*x5052))+(((-1.0)*r02*x5054)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x5053))+(((-1.0)*r12*x5054))+((r11*x5052))))+IKsqr((((r00*x5053))+((r01*x5052))+(((-1.0)*r02*x5054))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x5053))+(((-1.0)*r12*x5054))+((r11*x5052))), (((r00*x5053))+((r01*x5052))+(((-1.0)*r02*x5054))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5055=IKcos(j0);
IkReal x5056=(cj6*sj5);
IkReal x5057=((1.0)*sj6);
IkReal x5058=(sj5*sj6);
IkReal x5059=(cj4*cj6);
IkReal x5060=(cj5*sj4);
IkReal x5061=((1.0)*r02);
IkReal x5062=(sj4*sj5);
IkReal x5063=((1.0)*r12);
IkReal x5064=((1.0)*cj6);
IkReal x5065=((1.0)*(IKsin(j0)));
evalcond[0]=((((-1.0)*x5065))+((r10*x5058))+((r11*x5056))+(((-1.0)*cj5*x5063)));
evalcond[1]=(((r00*x5058))+((r01*x5056))+(((-1.0)*cj5*x5061))+(((-1.0)*x5055)));
evalcond[2]=(((r10*x5059))+(((-1.0)*r11*x5060*x5064))+x5055+(((-1.0)*cj4*r11*x5057))+(((-1.0)*r10*x5057*x5060))+(((-1.0)*x5062*x5063)));
evalcond[3]=((((-1.0)*x5065))+(((-1.0)*x5061*x5062))+(((-1.0)*cj4*r01*x5057))+((r00*x5059))+(((-1.0)*r01*x5060*x5064))+(((-1.0)*r00*x5057*x5060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5066=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x5066))+(((-1.0)*cj6*r11*x5066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x5066))+(((-1.0)*r00*sj6*x5066))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x5066))+(((-1.0)*cj6*r11*x5066))))+IKsqr(((((-1.0)*cj6*r01*x5066))+(((-1.0)*r00*sj6*x5066))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x5066))+(((-1.0)*cj6*r11*x5066))), ((((-1.0)*cj6*r01*x5066))+(((-1.0)*r00*sj6*x5066))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x5067=IKcos(j0);
IkReal x5068=IKsin(j0);
IkReal x5069=((1.0)*sj4);
IkReal x5070=(sj5*sj6);
IkReal x5071=(cj5*r12);
IkReal x5072=(r12*sj5);
IkReal x5073=(cj6*sj5);
IkReal x5074=(r02*sj5);
IkReal x5075=(cj4*cj6);
IkReal x5076=(cj5*r02);
IkReal x5077=(cj5*sj6);
IkReal x5078=(cj5*cj6*r11);
IkReal x5079=(cj5*cj6*r01);
IkReal x5080=((0.01)*x5077);
IkReal x5081=((1.0)*cj4*sj6);
evalcond[0]=(x5068+(((-1.0)*x5071))+((r10*x5070))+((r11*x5073)));
evalcond[1]=(x5067+(((-1.0)*x5076))+((r01*x5073))+((r00*x5070)));
evalcond[2]=((((-1.0)*r11*x5081))+(((-1.0)*x5069*x5072))+(((-1.0)*x5069*x5078))+x5067+(((-1.0)*r10*x5069*x5077))+((r10*x5075)));
evalcond[3]=((((-1.0)*r01*x5081))+(((-1.0)*x5069*x5074))+(((-1.0)*x5069*x5079))+(((-1.0)*r00*x5069*x5077))+((r00*x5075))+(((-1.0)*x5068)));
evalcond[4]=((((0.37429)*x5076))+(((-0.37429)*r00*x5070))+(((-0.37429)*r01*x5073))+(((0.138)*x5067))+((r00*x5080))+(((-1.0)*px))+(((0.01)*x5074))+(((0.01)*x5079)));
evalcond[5]=((((0.37429)*x5071))+(((-0.37429)*r11*x5073))+(((0.138)*x5068))+((r10*x5080))+(((-0.37429)*r10*x5070))+(((-1.0)*py))+(((0.01)*x5078))+(((0.01)*x5072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5082=((1.0)*cj6);
IkReal x5083=(cj4*cj5);
CheckValue<IkReal> x5084=IKPowWithIntegerCheck(sj1,-1);
if(!x5084.valid){
continue;
}
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(cj1,-1);
if(!x5085.valid){
continue;
}
if( IKabs(((x5084.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5085.value)*(((((-1.0)*r00*sj4*x5082))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r00*sj6*x5083))+(((-1.0)*r01*x5082*x5083)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5084.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))+IKsqr(((x5085.value)*(((((-1.0)*r00*sj4*x5082))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r00*sj6*x5083))+(((-1.0)*r01*x5082*x5083))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5084.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))), ((x5085.value)*(((((-1.0)*r00*sj4*x5082))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r00*sj6*x5083))+(((-1.0)*r01*x5082*x5083))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5086=IKcos(j0);
IkReal x5087=IKsin(j0);
IkReal x5088=((1.0)*cj5);
IkReal x5089=(r11*sj4);
IkReal x5090=(r00*sj6);
IkReal x5091=((0.37429)*sj5);
IkReal x5092=(r10*sj6);
IkReal x5093=(cj6*sj4);
IkReal x5094=((0.36442)*cj1);
IkReal x5095=(cj6*r01);
IkReal x5096=(cj6*r11);
IkReal x5097=((0.01)*cj5);
IkReal x5098=(cj4*cj6);
IkReal x5099=((0.37429)*cj5);
IkReal x5100=((1.0)*cj4);
IkReal x5101=(r12*sj5);
IkReal x5102=(r01*sj6);
IkReal x5103=(r02*sj5);
IkReal x5104=((1.0)*sj4*sj5);
IkReal x5105=((0.069)*x5087);
IkReal x5106=((1.0)*x5087);
IkReal x5107=((1.0)*x5086);
IkReal x5108=((0.069)*x5086);
evalcond[0]=((((-1.0)*r12*x5088))+(((-1.0)*sj1*x5106))+((sj5*x5092))+((sj5*x5096)));
evalcond[1]=((((-1.0)*sj1*x5107))+(((-1.0)*r02*x5088))+((sj5*x5090))+((sj5*x5095)));
evalcond[2]=((((-1.0)*r11*sj6*x5100))+(((-1.0)*cj6*x5088*x5089))+((r10*x5098))+(((-1.0)*sj4*x5088*x5092))+x5086+(((-1.0)*sj4*x5101)));
evalcond[3]=((((-1.0)*x5106))+(((-1.0)*r01*x5088*x5093))+(((-1.0)*sj4*x5088*x5090))+(((-1.0)*x5100*x5102))+((r00*x5098))+(((-1.0)*sj4*x5103)));
evalcond[4]=((((-1.0)*r00*x5093))+(((-1.0)*x5100*x5103))+((sj4*x5102))+(((-1.0)*cj1*x5107))+(((-1.0)*cj4*x5088*x5090))+(((-1.0)*cj4*x5088*x5095)));
evalcond[5]=((((-1.0)*r10*x5093))+((sj6*x5089))+(((-1.0)*x5100*x5101))+(((-1.0)*cj1*x5106))+(((-1.0)*cj4*x5088*x5092))+(((-1.0)*cj4*x5088*x5096)));
evalcond[6]=((((-1.0)*sj1*x5108))+(((-1.0)*x5091*x5095))+((x5086*x5094))+(((-1.0)*x5090*x5091))+x5108+((x5095*x5097))+(((-1.0)*px))+((x5090*x5097))+(((0.01)*x5103))+((r02*x5099)));
evalcond[7]=((((-1.0)*sj1*x5105))+((x5087*x5094))+(((-1.0)*x5091*x5096))+(((-1.0)*x5091*x5092))+x5105+(((-1.0)*py))+((r12*x5099))+((x5096*x5097))+(((0.01)*x5101))+((x5092*x5097)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5109=(cj6*r11);
IkReal x5110=(cj5*sj4);
IkReal x5111=(r10*sj6);
CheckValue<IkReal> x5112=IKPowWithIntegerCheck(sj1,-1);
if(!x5112.valid){
continue;
}
if( IKabs(((x5112.value)*((((sj5*x5111))+(((-1.0)*cj5*r12))+((sj5*x5109)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x5109*x5110))+(((-1.0)*cj4*cj6*r10))+((x5110*x5111))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5112.value)*((((sj5*x5111))+(((-1.0)*cj5*r12))+((sj5*x5109))))))+IKsqr((((x5109*x5110))+(((-1.0)*cj4*cj6*r10))+((x5110*x5111))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5112.value)*((((sj5*x5111))+(((-1.0)*cj5*r12))+((sj5*x5109))))), (((x5109*x5110))+(((-1.0)*cj4*cj6*r10))+((x5110*x5111))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5113=IKcos(j0);
IkReal x5114=IKsin(j0);
IkReal x5115=((1.0)*cj5);
IkReal x5116=(r11*sj4);
IkReal x5117=(r00*sj6);
IkReal x5118=((0.37429)*sj5);
IkReal x5119=(r10*sj6);
IkReal x5120=(cj6*sj4);
IkReal x5121=((0.36442)*cj1);
IkReal x5122=(cj6*r01);
IkReal x5123=(cj6*r11);
IkReal x5124=((0.01)*cj5);
IkReal x5125=(cj4*cj6);
IkReal x5126=((0.37429)*cj5);
IkReal x5127=((1.0)*cj4);
IkReal x5128=(r12*sj5);
IkReal x5129=(r01*sj6);
IkReal x5130=(r02*sj5);
IkReal x5131=((1.0)*sj4*sj5);
IkReal x5132=((0.069)*x5114);
IkReal x5133=((1.0)*x5114);
IkReal x5134=((1.0)*x5113);
IkReal x5135=((0.069)*x5113);
evalcond[0]=(((sj5*x5119))+((sj5*x5123))+(((-1.0)*sj1*x5133))+(((-1.0)*r12*x5115)));
evalcond[1]=(((sj5*x5117))+(((-1.0)*r02*x5115))+((sj5*x5122))+(((-1.0)*sj1*x5134)));
evalcond[2]=((((-1.0)*sj4*x5115*x5119))+((r10*x5125))+x5113+(((-1.0)*r11*sj6*x5127))+(((-1.0)*sj4*x5128))+(((-1.0)*cj6*x5115*x5116)));
evalcond[3]=((((-1.0)*sj4*x5115*x5117))+((r00*x5125))+(((-1.0)*sj4*x5130))+(((-1.0)*x5133))+(((-1.0)*x5127*x5129))+(((-1.0)*r01*x5115*x5120)));
evalcond[4]=((((-1.0)*cj4*x5115*x5122))+(((-1.0)*r00*x5120))+(((-1.0)*cj4*x5115*x5117))+(((-1.0)*cj1*x5134))+(((-1.0)*x5127*x5130))+((sj4*x5129)));
evalcond[5]=((((-1.0)*cj4*x5115*x5123))+((sj6*x5116))+(((-1.0)*cj4*x5115*x5119))+(((-1.0)*cj1*x5133))+(((-1.0)*x5127*x5128))+(((-1.0)*r10*x5120)));
evalcond[6]=(((x5122*x5124))+(((-1.0)*x5117*x5118))+x5135+(((-1.0)*x5118*x5122))+(((0.01)*x5130))+(((-1.0)*px))+((x5113*x5121))+(((-1.0)*sj1*x5135))+((x5117*x5124))+((r02*x5126)));
evalcond[7]=(((x5119*x5124))+((r12*x5126))+x5132+(((-1.0)*x5118*x5123))+(((0.01)*x5128))+(((-1.0)*py))+((x5123*x5124))+(((-1.0)*sj1*x5132))+((x5114*x5121))+(((-1.0)*x5118*x5119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5136=(cj6*sj5);
IkReal x5137=(sj5*sj6);
IkReal x5138=((1.0)*cj5);
CheckValue<IkReal> x5139 = IKatan2WithCheck(IkReal((((r10*x5137))+((r11*x5136))+(((-1.0)*r12*x5138)))),IkReal((((r01*x5136))+((r00*x5137))+(((-1.0)*r02*x5138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5139.valid){
continue;
}
CheckValue<IkReal> x5140=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x5140.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5139.value)+(((1.5707963267949)*(x5140.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5141=IKcos(j0);
IkReal x5142=IKsin(j0);
IkReal x5143=((1.0)*cj5);
IkReal x5144=(r11*sj4);
IkReal x5145=(r00*sj6);
IkReal x5146=((0.37429)*sj5);
IkReal x5147=(r10*sj6);
IkReal x5148=(cj6*sj4);
IkReal x5149=((0.36442)*cj1);
IkReal x5150=(cj6*r01);
IkReal x5151=(cj6*r11);
IkReal x5152=((0.01)*cj5);
IkReal x5153=(cj4*cj6);
IkReal x5154=((0.37429)*cj5);
IkReal x5155=((1.0)*cj4);
IkReal x5156=(r12*sj5);
IkReal x5157=(r01*sj6);
IkReal x5158=(r02*sj5);
IkReal x5159=((1.0)*sj4*sj5);
IkReal x5160=((0.069)*x5142);
IkReal x5161=((1.0)*x5142);
IkReal x5162=((1.0)*x5141);
IkReal x5163=((0.069)*x5141);
evalcond[0]=(((sj5*x5147))+((sj5*x5151))+(((-1.0)*r12*x5143))+(((-1.0)*sj1*x5161)));
evalcond[1]=(((sj5*x5145))+((sj5*x5150))+(((-1.0)*r02*x5143))+(((-1.0)*sj1*x5162)));
evalcond[2]=((((-1.0)*r11*sj6*x5155))+(((-1.0)*cj6*x5143*x5144))+x5141+(((-1.0)*sj4*x5156))+(((-1.0)*sj4*x5143*x5147))+((r10*x5153)));
evalcond[3]=(((r00*x5153))+(((-1.0)*r01*x5143*x5148))+(((-1.0)*sj4*x5158))+(((-1.0)*x5161))+(((-1.0)*sj4*x5143*x5145))+(((-1.0)*x5155*x5157)));
evalcond[4]=((((-1.0)*r00*x5148))+(((-1.0)*cj4*x5143*x5145))+((sj4*x5157))+(((-1.0)*cj1*x5162))+(((-1.0)*cj4*x5143*x5150))+(((-1.0)*x5155*x5158)));
evalcond[5]=((((-1.0)*r10*x5148))+((sj6*x5144))+(((-1.0)*cj4*x5143*x5147))+(((-1.0)*cj1*x5161))+(((-1.0)*cj4*x5143*x5151))+(((-1.0)*x5155*x5156)));
evalcond[6]=((((0.01)*x5158))+x5163+((r02*x5154))+(((-1.0)*px))+((x5141*x5149))+(((-1.0)*x5146*x5150))+(((-1.0)*sj1*x5163))+((x5145*x5152))+(((-1.0)*x5145*x5146))+((x5150*x5152)));
evalcond[7]=(((x5142*x5149))+((r12*x5154))+(((0.01)*x5156))+x5160+(((-1.0)*py))+(((-1.0)*x5146*x5151))+(((-1.0)*sj1*x5160))+((x5151*x5152))+(((-1.0)*x5146*x5147))+((x5147*x5152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x5164=((1.0)*cj6*sj5);
IkReal x5165=((1.0)*sj5*sj6);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x5164))+(((-1.0)*r10*x5165)))))+(IKabs(((((-1.0)*r00*x5165))+(((-1.0)*r01*x5164))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5166=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x5166))+(((-1.0)*cj6*r11*x5166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x5166))+(((-1.0)*cj6*r01*x5166))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x5166))+(((-1.0)*cj6*r11*x5166))))+IKsqr(((((-1.0)*r00*sj6*x5166))+(((-1.0)*cj6*r01*x5166))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x5166))+(((-1.0)*cj6*r11*x5166))), ((((-1.0)*r00*sj6*x5166))+(((-1.0)*cj6*r01*x5166))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x5167=IKsin(j0);
IkReal x5168=IKcos(j0);
IkReal x5169=((1.0)*sj4);
IkReal x5170=(sj5*sj6);
IkReal x5171=(cj5*r12);
IkReal x5172=(r12*sj5);
IkReal x5173=(cj6*sj5);
IkReal x5174=(r02*sj5);
IkReal x5175=(cj4*cj6);
IkReal x5176=(cj5*r02);
IkReal x5177=(cj5*sj6);
IkReal x5178=(cj5*cj6*r11);
IkReal x5179=(cj5*cj6*r01);
IkReal x5180=((0.01)*x5177);
IkReal x5181=((1.0)*cj4*sj6);
evalcond[0]=(((r10*x5170))+x5167+(((-1.0)*x5171))+((r11*x5173)));
evalcond[1]=(((r01*x5173))+((r00*x5170))+x5168+(((-1.0)*x5176)));
evalcond[2]=(((r00*x5175))+(((-1.0)*x5169*x5179))+(((-1.0)*x5169*x5174))+x5167+(((-1.0)*r00*x5169*x5177))+(((-1.0)*r01*x5181)));
evalcond[3]=(((r10*x5175))+(((-1.0)*x5169*x5178))+(((-1.0)*x5169*x5172))+(((-1.0)*x5168))+(((-1.0)*r11*x5181))+(((-1.0)*r10*x5169*x5177)));
evalcond[4]=(((r00*x5180))+(((-0.37429)*r00*x5170))+(((0.01)*x5179))+(((0.01)*x5174))+(((-0.37429)*r01*x5173))+(((0.138)*x5168))+(((-1.0)*px))+(((0.37429)*x5176)));
evalcond[5]=((((-0.37429)*r11*x5173))+(((0.01)*x5178))+(((0.01)*x5172))+(((0.138)*x5167))+(((-0.37429)*r10*x5170))+(((-1.0)*py))+(((0.37429)*x5171))+((r10*x5180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5182=(cj6*sj5);
IkReal x5183=(sj5*sj6);
IkReal x5184=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x5184))+((r10*x5183))+((r11*x5182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x5183))+(((-1.0)*r02*x5184))+((r01*x5182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x5184))+((r10*x5183))+((r11*x5182))))+IKsqr((((r00*x5183))+(((-1.0)*r02*x5184))+((r01*x5182))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x5184))+((r10*x5183))+((r11*x5182))), (((r00*x5183))+(((-1.0)*r02*x5184))+((r01*x5182))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5185=IKsin(j0);
IkReal x5186=(cj6*sj5);
IkReal x5187=((1.0)*sj6);
IkReal x5188=(sj5*sj6);
IkReal x5189=(cj5*sj4);
IkReal x5190=((1.0)*r02);
IkReal x5191=(sj4*sj5);
IkReal x5192=(cj4*cj6);
IkReal x5193=((1.0)*r12);
IkReal x5194=((1.0)*cj6);
IkReal x5195=((1.0)*(IKcos(j0)));
evalcond[0]=((((-1.0)*cj5*x5193))+((r10*x5188))+((r11*x5186))+(((-1.0)*x5185)));
evalcond[1]=((((-1.0)*cj5*x5190))+((r00*x5188))+((r01*x5186))+(((-1.0)*x5195)));
evalcond[2]=((((-1.0)*r01*x5189*x5194))+x5185+(((-1.0)*x5190*x5191))+((r00*x5192))+(((-1.0)*r00*x5187*x5189))+(((-1.0)*cj4*r01*x5187)));
evalcond[3]=((((-1.0)*r11*x5189*x5194))+((r10*x5192))+(((-1.0)*x5195))+(((-1.0)*x5191*x5193))+(((-1.0)*cj4*r11*x5187))+(((-1.0)*r10*x5187*x5189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5196=((1.0)*cj6);
IkReal x5197=(cj4*cj5);
IkReal x5198=((1.0)*sj6);
CheckValue<IkReal> x5199=IKPowWithIntegerCheck(sj1,-1);
if(!x5199.valid){
continue;
}
CheckValue<IkReal> x5200=IKPowWithIntegerCheck(cj1,-1);
if(!x5200.valid){
continue;
}
if( IKabs(((x5199.value)*((((cj5*r12))+(((-1.0)*r11*sj5*x5196))+(((-1.0)*r10*sj5*x5198)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5200.value)*(((((-1.0)*r00*sj4*x5196))+(((-1.0)*r00*x5197*x5198))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x5196*x5197)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5199.value)*((((cj5*r12))+(((-1.0)*r11*sj5*x5196))+(((-1.0)*r10*sj5*x5198))))))+IKsqr(((x5200.value)*(((((-1.0)*r00*sj4*x5196))+(((-1.0)*r00*x5197*x5198))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x5196*x5197))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5199.value)*((((cj5*r12))+(((-1.0)*r11*sj5*x5196))+(((-1.0)*r10*sj5*x5198))))), ((x5200.value)*(((((-1.0)*r00*sj4*x5196))+(((-1.0)*r00*x5197*x5198))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x5196*x5197))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5201=IKsin(j0);
IkReal x5202=IKcos(j0);
IkReal x5203=((1.0)*cj5);
IkReal x5204=(r11*sj4);
IkReal x5205=(r00*sj6);
IkReal x5206=((0.37429)*sj5);
IkReal x5207=(r10*sj6);
IkReal x5208=(cj6*sj4);
IkReal x5209=((0.36442)*cj1);
IkReal x5210=(cj6*r01);
IkReal x5211=(cj6*r11);
IkReal x5212=((0.01)*cj5);
IkReal x5213=(cj4*cj6);
IkReal x5214=((0.37429)*cj5);
IkReal x5215=((1.0)*cj4);
IkReal x5216=(r12*sj5);
IkReal x5217=(r01*sj6);
IkReal x5218=(r02*sj5);
IkReal x5219=((1.0)*sj4*sj5);
IkReal x5220=((0.069)*x5201);
IkReal x5221=((1.0)*x5202);
IkReal x5222=((0.069)*x5202);
evalcond[0]=(((sj1*x5201))+((sj5*x5211))+(((-1.0)*r12*x5203))+((sj5*x5207)));
evalcond[1]=((((-1.0)*r02*x5203))+((sj1*x5202))+((sj5*x5210))+((sj5*x5205)));
evalcond[2]=((((-1.0)*x5215*x5217))+(((-1.0)*sj4*x5203*x5205))+x5201+(((-1.0)*r01*x5203*x5208))+(((-1.0)*sj4*x5218))+((r00*x5213)));
evalcond[3]=((((-1.0)*cj6*x5203*x5204))+(((-1.0)*sj4*x5203*x5207))+(((-1.0)*r11*sj6*x5215))+(((-1.0)*sj4*x5216))+(((-1.0)*x5221))+((r10*x5213)));
evalcond[4]=((((-1.0)*x5215*x5218))+(((-1.0)*r00*x5208))+(((-1.0)*cj4*x5203*x5210))+((sj4*x5217))+(((-1.0)*cj4*x5203*x5205))+(((-1.0)*cj1*x5221)));
evalcond[5]=((((-1.0)*x5215*x5216))+(((-1.0)*cj4*x5203*x5211))+(((-1.0)*cj4*x5203*x5207))+(((-1.0)*r10*x5208))+(((-1.0)*cj1*x5201))+((sj6*x5204)));
evalcond[6]=((((0.01)*x5218))+((x5202*x5209))+(((-1.0)*x5206*x5210))+x5222+(((-1.0)*px))+((x5210*x5212))+(((-1.0)*x5205*x5206))+((r02*x5214))+((x5205*x5212))+((sj1*x5222)));
evalcond[7]=(((x5207*x5212))+(((0.01)*x5216))+(((-1.0)*x5206*x5207))+((x5201*x5209))+(((-1.0)*x5206*x5211))+x5220+((r12*x5214))+(((-1.0)*py))+((x5211*x5212))+((sj1*x5220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5223=((1.0)*r00);
IkReal x5224=(cj6*r01);
IkReal x5225=(cj5*sj4);
CheckValue<IkReal> x5226=IKPowWithIntegerCheck(sj1,-1);
if(!x5226.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj6*x5223))+((r00*sj6*x5225))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x5224*x5225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5226.value)*(((((-1.0)*sj5*sj6*x5223))+(((-1.0)*sj5*x5224))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj6*x5223))+((r00*sj6*x5225))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x5224*x5225))))+IKsqr(((x5226.value)*(((((-1.0)*sj5*sj6*x5223))+(((-1.0)*sj5*x5224))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj6*x5223))+((r00*sj6*x5225))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x5224*x5225))), ((x5226.value)*(((((-1.0)*sj5*sj6*x5223))+(((-1.0)*sj5*x5224))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5227=IKsin(j0);
IkReal x5228=IKcos(j0);
IkReal x5229=((1.0)*cj5);
IkReal x5230=(r11*sj4);
IkReal x5231=(r00*sj6);
IkReal x5232=((0.37429)*sj5);
IkReal x5233=(r10*sj6);
IkReal x5234=(cj6*sj4);
IkReal x5235=((0.36442)*cj1);
IkReal x5236=(cj6*r01);
IkReal x5237=(cj6*r11);
IkReal x5238=((0.01)*cj5);
IkReal x5239=(cj4*cj6);
IkReal x5240=((0.37429)*cj5);
IkReal x5241=((1.0)*cj4);
IkReal x5242=(r12*sj5);
IkReal x5243=(r01*sj6);
IkReal x5244=(r02*sj5);
IkReal x5245=((1.0)*sj4*sj5);
IkReal x5246=((0.069)*x5227);
IkReal x5247=((1.0)*x5228);
IkReal x5248=((0.069)*x5228);
evalcond[0]=(((sj5*x5237))+((sj5*x5233))+(((-1.0)*r12*x5229))+((sj1*x5227)));
evalcond[1]=(((sj5*x5236))+((sj5*x5231))+(((-1.0)*r02*x5229))+((sj1*x5228)));
evalcond[2]=((((-1.0)*sj4*x5244))+x5227+((r00*x5239))+(((-1.0)*x5241*x5243))+(((-1.0)*sj4*x5229*x5231))+(((-1.0)*r01*x5229*x5234)));
evalcond[3]=(((r10*x5239))+(((-1.0)*x5247))+(((-1.0)*sj4*x5242))+(((-1.0)*cj6*x5229*x5230))+(((-1.0)*r11*sj6*x5241))+(((-1.0)*sj4*x5229*x5233)));
evalcond[4]=((((-1.0)*r00*x5234))+(((-1.0)*cj4*x5229*x5236))+(((-1.0)*cj4*x5229*x5231))+((sj4*x5243))+(((-1.0)*x5241*x5244))+(((-1.0)*cj1*x5247)));
evalcond[5]=((((-1.0)*cj4*x5229*x5237))+(((-1.0)*cj4*x5229*x5233))+(((-1.0)*cj1*x5227))+(((-1.0)*x5241*x5242))+((sj6*x5230))+(((-1.0)*r10*x5234)));
evalcond[6]=(((x5236*x5238))+(((0.01)*x5244))+(((-1.0)*x5232*x5236))+x5248+((sj1*x5248))+((x5228*x5235))+((x5231*x5238))+(((-1.0)*px))+(((-1.0)*x5231*x5232))+((r02*x5240)));
evalcond[7]=(((x5227*x5235))+((x5237*x5238))+(((0.01)*x5242))+(((-1.0)*x5232*x5237))+(((-1.0)*x5232*x5233))+((r12*x5240))+((x5233*x5238))+x5246+((sj1*x5246))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5249=((1.0)*sj5);
CheckValue<IkReal> x5250 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*sj6*x5249))+(((-1.0)*cj6*r11*x5249)))),IkReal(((((-1.0)*r00*sj6*x5249))+(((-1.0)*cj6*r01*x5249))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5250.valid){
continue;
}
CheckValue<IkReal> x5251=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x5251.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5250.value)+(((1.5707963267949)*(x5251.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5252=IKsin(j0);
IkReal x5253=IKcos(j0);
IkReal x5254=((1.0)*cj5);
IkReal x5255=(r11*sj4);
IkReal x5256=(r00*sj6);
IkReal x5257=((0.37429)*sj5);
IkReal x5258=(r10*sj6);
IkReal x5259=(cj6*sj4);
IkReal x5260=((0.36442)*cj1);
IkReal x5261=(cj6*r01);
IkReal x5262=(cj6*r11);
IkReal x5263=((0.01)*cj5);
IkReal x5264=(cj4*cj6);
IkReal x5265=((0.37429)*cj5);
IkReal x5266=((1.0)*cj4);
IkReal x5267=(r12*sj5);
IkReal x5268=(r01*sj6);
IkReal x5269=(r02*sj5);
IkReal x5270=((1.0)*sj4*sj5);
IkReal x5271=((0.069)*x5252);
IkReal x5272=((1.0)*x5253);
IkReal x5273=((0.069)*x5253);
evalcond[0]=(((sj5*x5262))+((sj1*x5252))+(((-1.0)*r12*x5254))+((sj5*x5258)));
evalcond[1]=(((sj5*x5261))+(((-1.0)*r02*x5254))+((sj1*x5253))+((sj5*x5256)));
evalcond[2]=((((-1.0)*r01*x5254*x5259))+((r00*x5264))+x5252+(((-1.0)*sj4*x5269))+(((-1.0)*x5266*x5268))+(((-1.0)*sj4*x5254*x5256)));
evalcond[3]=((((-1.0)*cj6*x5254*x5255))+(((-1.0)*sj4*x5267))+(((-1.0)*x5272))+(((-1.0)*r11*sj6*x5266))+(((-1.0)*sj4*x5254*x5258))+((r10*x5264)));
evalcond[4]=((((-1.0)*r00*x5259))+(((-1.0)*cj1*x5272))+((sj4*x5268))+(((-1.0)*cj4*x5254*x5261))+(((-1.0)*cj4*x5254*x5256))+(((-1.0)*x5266*x5269)));
evalcond[5]=((((-1.0)*cj1*x5252))+(((-1.0)*r10*x5259))+(((-1.0)*cj4*x5254*x5262))+((sj6*x5255))+(((-1.0)*cj4*x5254*x5258))+(((-1.0)*x5266*x5267)));
evalcond[6]=(((r02*x5265))+((sj1*x5273))+((x5261*x5263))+x5273+(((0.01)*x5269))+((x5256*x5263))+(((-1.0)*px))+(((-1.0)*x5256*x5257))+(((-1.0)*x5257*x5261))+((x5253*x5260)));
evalcond[7]=(((x5262*x5263))+((r12*x5265))+((sj1*x5271))+x5271+(((0.01)*x5267))+(((-1.0)*py))+(((-1.0)*x5257*x5258))+(((-1.0)*x5257*x5262))+((x5258*x5263))+((x5252*x5260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5282=IKPowWithIntegerCheck(cj1,-1);
if(!x5282.valid){
continue;
}
IkReal x5274=x5282.value;
IkReal x5275=(cj1*sj5);
IkReal x5276=((1.0)*cj6);
IkReal x5277=(r00*sj2);
IkReal x5278=(cj4*cj5);
IkReal x5279=((1.0)*sj6);
IkReal x5280=(r01*sj4*sj6);
IkReal x5281=((1.0)*cj4*r02*sj5);
CheckValue<IkReal> x5283=IKPowWithIntegerCheck(cj2,-1);
if(!x5283.valid){
continue;
}
CheckValue<IkReal> x5284=IKPowWithIntegerCheck(sj1,-1);
if(!x5284.valid){
continue;
}
if( IKabs((x5274*(x5283.value)*(x5284.value)*(((((-1.0)*sj4*x5276*x5277))+((sj2*x5280))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*sj2*x5281))+((r10*sj6*x5275))+((cj6*r11*x5275))+(((-1.0)*r01*sj2*x5276*x5278))+(((-1.0)*x5277*x5278*x5279)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5274*((x5280+(((-1.0)*x5281))+(((-1.0)*r01*x5276*x5278))+(((-1.0)*r00*sj4*x5276))+(((-1.0)*r00*x5278*x5279)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5274*(x5283.value)*(x5284.value)*(((((-1.0)*sj4*x5276*x5277))+((sj2*x5280))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*sj2*x5281))+((r10*sj6*x5275))+((cj6*r11*x5275))+(((-1.0)*r01*sj2*x5276*x5278))+(((-1.0)*x5277*x5278*x5279))))))+IKsqr((x5274*((x5280+(((-1.0)*x5281))+(((-1.0)*r01*x5276*x5278))+(((-1.0)*r00*sj4*x5276))+(((-1.0)*r00*x5278*x5279))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x5274*(x5283.value)*(x5284.value)*(((((-1.0)*sj4*x5276*x5277))+((sj2*x5280))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*sj2*x5281))+((r10*sj6*x5275))+((cj6*r11*x5275))+(((-1.0)*r01*sj2*x5276*x5278))+(((-1.0)*x5277*x5278*x5279))))), (x5274*((x5280+(((-1.0)*x5281))+(((-1.0)*r01*x5276*x5278))+(((-1.0)*r00*sj4*x5276))+(((-1.0)*r00*x5278*x5279))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5285=IKsin(j0);
IkReal x5286=IKcos(j0);
IkReal x5287=((1.0)*cj5);
IkReal x5288=(cj6*sj4);
IkReal x5289=((0.37429)*sj5);
IkReal x5290=(r10*sj6);
IkReal x5291=((0.36442)*cj1);
IkReal x5292=((0.069)*sj2);
IkReal x5293=(cj6*r01);
IkReal x5294=(r00*sj6);
IkReal x5295=(cj6*r11);
IkReal x5296=((1.0)*sj1);
IkReal x5297=((0.01)*cj5);
IkReal x5298=((1.0)*cj1);
IkReal x5299=(r12*sj5);
IkReal x5300=(cj4*cj6);
IkReal x5301=((0.37429)*cj5);
IkReal x5302=((1.0)*cj4);
IkReal x5303=(r02*sj5);
IkReal x5304=(r01*sj6);
IkReal x5305=(r11*sj6);
IkReal x5306=(cj2*x5286);
IkReal x5307=((0.069)*x5285);
IkReal x5308=((1.0)*sj4*sj5);
IkReal x5309=(sj2*x5286);
IkReal x5310=((1.0)*x5285);
evalcond[0]=(x5309+(((-1.0)*cj2*x5285*x5296))+(((-1.0)*r12*x5287))+((sj5*x5290))+((sj5*x5295)));
evalcond[1]=((((-1.0)*x5296*x5306))+((sj5*x5294))+((sj5*x5293))+(((-1.0)*r02*x5287))+(((-1.0)*sj2*x5310)));
evalcond[2]=((((-1.0)*x5286*x5298))+(((-1.0)*x5302*x5303))+(((-1.0)*r00*x5288))+((sj4*x5304))+(((-1.0)*cj4*x5287*x5294))+(((-1.0)*cj4*x5287*x5293)));
evalcond[3]=((((-1.0)*x5285*x5298))+(((-1.0)*r10*x5288))+((sj4*x5305))+(((-1.0)*cj4*x5287*x5290))+(((-1.0)*cj4*x5287*x5295))+(((-1.0)*x5299*x5302)));
evalcond[4]=((((-1.0)*sj4*x5287*x5290))+x5306+((sj1*sj2*x5285))+(((-1.0)*x5302*x5305))+((r10*x5300))+(((-1.0)*sj4*x5299))+(((-1.0)*r11*x5287*x5288)));
evalcond[5]=((((-1.0)*sj4*x5287*x5294))+(((-1.0)*r01*x5287*x5288))+((sj1*x5309))+(((-1.0)*x5302*x5304))+(((-1.0)*cj2*x5310))+(((-1.0)*sj4*x5303))+((r00*x5300)));
evalcond[6]=((((-1.0)*x5289*x5294))+(((-1.0)*x5289*x5293))+(((-1.0)*x5285*x5292))+((x5294*x5297))+(((-0.069)*sj1*x5306))+((x5286*x5291))+(((0.069)*x5286))+((r02*x5301))+(((-1.0)*px))+(((0.01)*x5303))+((x5293*x5297)));
evalcond[7]=((((-1.0)*x5289*x5295))+(((-1.0)*x5289*x5290))+((x5295*x5297))+x5307+((x5286*x5292))+((x5290*x5297))+(((0.01)*x5299))+(((-1.0)*py))+((r12*x5301))+(((-1.0)*cj2*sj1*x5307))+((x5285*x5291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x5322=IKPowWithIntegerCheck(cj1,-1);
if(!x5322.valid){
continue;
}
IkReal x5311=x5322.value;
IkReal x5312=(r02*sj5);
IkReal x5313=((1.0)*sj4);
IkReal x5314=(cj2*sj1);
IkReal x5315=(r01*sj6);
IkReal x5316=((1.0)*cj4);
IkReal x5317=(r00*sj6);
IkReal x5318=(cj1*sj5);
IkReal x5319=(cj6*r00);
IkReal x5320=(cj4*x5314);
IkReal x5321=(cj5*cj6*r01);
CheckValue<IkReal> x5323=IKPowWithIntegerCheck(sj2,-1);
if(!x5323.valid){
continue;
}
if( IKabs((x5311*(x5323.value)*(((((-1.0)*x5313*x5314*x5315))+((x5312*x5320))+((sj4*x5314*x5319))+((cj5*x5317*x5320))+(((-1.0)*cj1*cj5*r02))+((x5317*x5318))+((x5320*x5321))+((cj6*r01*x5318)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x5311*(((((-1.0)*x5312*x5316))+(((-1.0)*x5316*x5321))+(((-1.0)*x5313*x5319))+((sj4*x5315))+(((-1.0)*cj5*x5316*x5317)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x5311*(x5323.value)*(((((-1.0)*x5313*x5314*x5315))+((x5312*x5320))+((sj4*x5314*x5319))+((cj5*x5317*x5320))+(((-1.0)*cj1*cj5*r02))+((x5317*x5318))+((x5320*x5321))+((cj6*r01*x5318))))))+IKsqr((x5311*(((((-1.0)*x5312*x5316))+(((-1.0)*x5316*x5321))+(((-1.0)*x5313*x5319))+((sj4*x5315))+(((-1.0)*cj5*x5316*x5317))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x5311*(x5323.value)*(((((-1.0)*x5313*x5314*x5315))+((x5312*x5320))+((sj4*x5314*x5319))+((cj5*x5317*x5320))+(((-1.0)*cj1*cj5*r02))+((x5317*x5318))+((x5320*x5321))+((cj6*r01*x5318))))), (x5311*(((((-1.0)*x5312*x5316))+(((-1.0)*x5316*x5321))+(((-1.0)*x5313*x5319))+((sj4*x5315))+(((-1.0)*cj5*x5316*x5317))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5324=IKsin(j0);
IkReal x5325=IKcos(j0);
IkReal x5326=((1.0)*cj5);
IkReal x5327=(cj6*sj4);
IkReal x5328=((0.37429)*sj5);
IkReal x5329=(r10*sj6);
IkReal x5330=((0.36442)*cj1);
IkReal x5331=((0.069)*sj2);
IkReal x5332=(cj6*r01);
IkReal x5333=(r00*sj6);
IkReal x5334=(cj6*r11);
IkReal x5335=((1.0)*sj1);
IkReal x5336=((0.01)*cj5);
IkReal x5337=((1.0)*cj1);
IkReal x5338=(r12*sj5);
IkReal x5339=(cj4*cj6);
IkReal x5340=((0.37429)*cj5);
IkReal x5341=((1.0)*cj4);
IkReal x5342=(r02*sj5);
IkReal x5343=(r01*sj6);
IkReal x5344=(r11*sj6);
IkReal x5345=(cj2*x5325);
IkReal x5346=((0.069)*x5324);
IkReal x5347=((1.0)*sj4*sj5);
IkReal x5348=(sj2*x5325);
IkReal x5349=((1.0)*x5324);
evalcond[0]=(x5348+(((-1.0)*r12*x5326))+(((-1.0)*cj2*x5324*x5335))+((sj5*x5334))+((sj5*x5329)));
evalcond[1]=((((-1.0)*sj2*x5349))+(((-1.0)*r02*x5326))+(((-1.0)*x5335*x5345))+((sj5*x5333))+((sj5*x5332)));
evalcond[2]=((((-1.0)*r00*x5327))+(((-1.0)*x5341*x5342))+(((-1.0)*cj4*x5326*x5332))+(((-1.0)*cj4*x5326*x5333))+((sj4*x5343))+(((-1.0)*x5325*x5337)));
evalcond[3]=((((-1.0)*x5338*x5341))+(((-1.0)*r10*x5327))+(((-1.0)*cj4*x5326*x5329))+(((-1.0)*cj4*x5326*x5334))+(((-1.0)*x5324*x5337))+((sj4*x5344)));
evalcond[4]=(x5345+(((-1.0)*sj4*x5338))+((r10*x5339))+((sj1*sj2*x5324))+(((-1.0)*x5341*x5344))+(((-1.0)*sj4*x5326*x5329))+(((-1.0)*r11*x5326*x5327)));
evalcond[5]=(((sj1*x5348))+(((-1.0)*cj2*x5349))+(((-1.0)*sj4*x5342))+(((-1.0)*r01*x5326*x5327))+((r00*x5339))+(((-1.0)*x5341*x5343))+(((-1.0)*sj4*x5326*x5333)));
evalcond[6]=(((x5325*x5330))+(((-0.069)*sj1*x5345))+(((-1.0)*x5328*x5332))+(((-1.0)*x5328*x5333))+(((-1.0)*px))+(((0.069)*x5325))+((r02*x5340))+(((-1.0)*x5324*x5331))+(((0.01)*x5342))+((x5332*x5336))+((x5333*x5336)));
evalcond[7]=(((x5325*x5331))+((x5324*x5330))+((x5334*x5336))+x5346+((r12*x5340))+(((-1.0)*x5328*x5329))+(((-1.0)*cj2*sj1*x5346))+(((-1.0)*x5328*x5334))+(((-1.0)*py))+(((0.01)*x5338))+((x5329*x5336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5350=(r10*sj6);
IkReal x5351=(cj6*r11);
IkReal x5352=(sj2*sj5);
IkReal x5353=(cj6*r01);
IkReal x5354=(r00*sj6);
IkReal x5355=(cj5*sj2);
IkReal x5356=(cj2*sj1*sj5);
IkReal x5357=((1.0)*cj2*cj5*sj1);
CheckValue<IkReal> x5358 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x5355))+((x5351*x5356))+(((-1.0)*r12*x5357))+((x5352*x5354))+((x5352*x5353))+((x5350*x5356)))),IkReal(((((-1.0)*x5351*x5352))+(((-1.0)*r02*x5357))+((x5353*x5356))+(((-1.0)*x5350*x5352))+((r12*x5355))+((x5354*x5356)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5358.valid){
continue;
}
CheckValue<IkReal> x5359=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x5359.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x5358.value)+(((1.5707963267949)*(x5359.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x5360=IKsin(j0);
IkReal x5361=IKcos(j0);
IkReal x5362=((1.0)*cj5);
IkReal x5363=(cj6*sj4);
IkReal x5364=((0.37429)*sj5);
IkReal x5365=(r10*sj6);
IkReal x5366=((0.36442)*cj1);
IkReal x5367=((0.069)*sj2);
IkReal x5368=(cj6*r01);
IkReal x5369=(r00*sj6);
IkReal x5370=(cj6*r11);
IkReal x5371=((1.0)*sj1);
IkReal x5372=((0.01)*cj5);
IkReal x5373=((1.0)*cj1);
IkReal x5374=(r12*sj5);
IkReal x5375=(cj4*cj6);
IkReal x5376=((0.37429)*cj5);
IkReal x5377=((1.0)*cj4);
IkReal x5378=(r02*sj5);
IkReal x5379=(r01*sj6);
IkReal x5380=(r11*sj6);
IkReal x5381=(cj2*x5361);
IkReal x5382=((0.069)*x5360);
IkReal x5383=((1.0)*sj4*sj5);
IkReal x5384=(sj2*x5361);
IkReal x5385=((1.0)*x5360);
evalcond[0]=(((sj5*x5370))+x5384+(((-1.0)*cj2*x5360*x5371))+(((-1.0)*r12*x5362))+((sj5*x5365)));
evalcond[1]=((((-1.0)*r02*x5362))+(((-1.0)*x5371*x5381))+(((-1.0)*sj2*x5385))+((sj5*x5369))+((sj5*x5368)));
evalcond[2]=((((-1.0)*cj4*x5362*x5369))+(((-1.0)*cj4*x5362*x5368))+(((-1.0)*r00*x5363))+(((-1.0)*x5361*x5373))+((sj4*x5379))+(((-1.0)*x5377*x5378)));
evalcond[3]=(((sj4*x5380))+(((-1.0)*cj4*x5362*x5365))+(((-1.0)*cj4*x5362*x5370))+(((-1.0)*x5374*x5377))+(((-1.0)*x5360*x5373))+(((-1.0)*r10*x5363)));
evalcond[4]=(((sj1*sj2*x5360))+(((-1.0)*r11*x5362*x5363))+x5381+((r10*x5375))+(((-1.0)*x5377*x5380))+(((-1.0)*sj4*x5374))+(((-1.0)*sj4*x5362*x5365)));
evalcond[5]=(((sj1*x5384))+(((-1.0)*cj2*x5385))+(((-1.0)*x5377*x5379))+(((-1.0)*sj4*x5378))+(((-1.0)*r01*x5362*x5363))+(((-1.0)*sj4*x5362*x5369))+((r00*x5375)));
evalcond[6]=(((x5368*x5372))+((x5369*x5372))+(((-1.0)*x5360*x5367))+(((0.069)*x5361))+(((-1.0)*x5364*x5369))+(((-1.0)*x5364*x5368))+(((0.01)*x5378))+(((-1.0)*px))+((r02*x5376))+(((-0.069)*sj1*x5381))+((x5361*x5366)));
evalcond[7]=(x5382+((x5360*x5366))+(((-1.0)*x5364*x5365))+(((0.01)*x5374))+((x5365*x5372))+(((-1.0)*py))+((x5370*x5372))+((r12*x5376))+(((-1.0)*x5364*x5370))+((x5361*x5367))+(((-1.0)*cj2*sj1*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5386=(r10*sj6);
IkReal x5387=(cj6*r11);
IkReal x5388=(sj2*sj5);
IkReal x5389=(cj6*r01);
IkReal x5390=(r00*sj6);
IkReal x5391=(cj5*sj2);
IkReal x5392=(cj2*sj1*sj5);
IkReal x5393=((1.0)*cj2*cj5*sj1);
CheckValue<IkReal> x5394=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x5394.valid){
continue;
}
CheckValue<IkReal> x5395 = IKatan2WithCheck(IkReal((((x5386*x5392))+((x5388*x5389))+((x5388*x5390))+(((-1.0)*r12*x5393))+(((-1.0)*r02*x5391))+((x5387*x5392)))),IkReal((((x5389*x5392))+(((-1.0)*r02*x5393))+(((-1.0)*x5387*x5388))+((r12*x5391))+(((-1.0)*x5386*x5388))+((x5390*x5392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5395.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5394.value)))+(x5395.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5396=IKsin(j0);
IkReal x5397=IKcos(j0);
IkReal x5398=(cj6*r11);
IkReal x5399=((0.01)*cj5);
IkReal x5400=(sj5*sj6);
IkReal x5401=((0.36442)*cj1);
IkReal x5402=(cj2*sj1);
IkReal x5403=(cj6*r01);
IkReal x5404=((0.37429)*sj5);
IkReal x5405=(cj5*r02);
IkReal x5406=((0.01)*sj5);
IkReal x5407=(cj5*r12);
IkReal x5408=((0.069)*x5396);
IkReal x5409=((0.069)*x5397);
IkReal x5410=((1.0)*x5396);
evalcond[0]=((((-1.0)*x5407))+((r10*x5400))+((sj2*x5397))+(((-1.0)*x5402*x5410))+((sj5*x5398)));
evalcond[1]=(((sj5*x5403))+(((-1.0)*x5405))+(((-1.0)*sj2*x5410))+((r00*x5400))+(((-1.0)*x5397*x5402)));
evalcond[2]=((((-0.37429)*r00*x5400))+x5409+(((-1.0)*x5403*x5404))+(((-1.0)*sj2*x5408))+((r00*sj6*x5399))+((r02*x5406))+(((-1.0)*px))+(((-1.0)*x5402*x5409))+((x5399*x5403))+(((0.37429)*x5405))+((x5397*x5401)));
evalcond[3]=(((r12*x5406))+(((-0.37429)*r10*x5400))+x5408+((r10*sj6*x5399))+(((-1.0)*x5398*x5404))+(((-1.0)*py))+((x5398*x5399))+(((-1.0)*x5402*x5408))+(((0.37429)*x5407))+((sj2*x5409))+((x5396*x5401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5411=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5411;
j4eval[1]=IKsign(x5411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5412=((1.0)*sj5);
IkReal x5413=((((-1.0)*r00*sj6*x5412))+(((-1.0)*cj6*r01*x5412))+((cj5*r02)));
j4eval[0]=x5413;
j4eval[1]=IKsign(x5413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x5414=cj5*cj5;
IkReal x5415=cj6*cj6;
IkReal x5416=r20*r20;
IkReal x5417=r21*r21;
IkReal x5418=r22*r22;
IkReal x5419=(r22*sj5);
IkReal x5420=(cj6*r20);
IkReal x5421=(cj1*sj2);
IkReal x5422=(cj6*r21);
IkReal x5423=(cj5*sj1);
IkReal x5424=(r20*sj6);
IkReal x5425=(r21*sj6);
IkReal x5426=((2.0)*x5424);
IkReal x5427=((1.0)*x5414);
IkReal x5428=(x5415*x5416);
IkReal x5429=(x5415*x5417);
IkReal x5430=(x5428+x5417+x5418+(((2.0)*x5414*x5420*x5425))+((x5414*x5416))+((cj5*x5419*x5426))+(((2.0)*cj5*x5419*x5422))+(((-1.0)*x5427*x5428))+(((-2.0)*x5420*x5425))+((x5414*x5429))+(((-1.0)*x5429))+(((-1.0)*x5418*x5427)));
j4eval[0]=x5430;
j4eval[1]=((IKabs((((x5419*x5421))+((cj5*x5421*x5422))+((cj5*x5421*x5424))+((sj1*x5420))+(((-1.0)*sj1*x5425)))))+(IKabs((((sj1*x5419))+((x5422*x5423))+((x5421*x5425))+((x5423*x5424))+(((-1.0)*x5420*x5421))))));
j4eval[2]=IKsign(x5430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5431=(cj0*sj6);
IkReal x5432=(cj0*cj6);
IkReal x5433=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5433;
j4eval[1]=((IKabs((((cj5*r21*x5432))+((cj5*r20*x5431))+((cj0*r22*sj5)))))+(IKabs(((((-1.0)*r21*x5431))+((r20*x5432))))));
j4eval[2]=IKsign(x5433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5434=(r21*sj0);
IkReal x5435=(r20*sj0);
IkReal x5436=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5436;
j4eval[1]=((IKabs((((cj5*cj6*x5434))+((r22*sj0*sj5))+((cj5*sj6*x5435)))))+(IKabs((((cj6*x5435))+(((-1.0)*sj6*x5434))))));
j4eval[2]=IKsign(x5436);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5437=cj6*cj6;
IkReal x5438=cj5*cj5;
IkReal x5439=(r02*r22);
IkReal x5440=(r22*sj5);
IkReal x5441=(r00*r20);
IkReal x5442=((1.0)*r21);
IkReal x5443=(r20*sj6);
IkReal x5444=(cj6*r01);
IkReal x5445=(cj0*cj5);
IkReal x5446=(r00*sj6);
IkReal x5447=((1.0)*cj5);
IkReal x5448=(cj6*r21);
IkReal x5449=(cj5*r02*sj5);
IkReal x5450=((1.0)*x5438);
IkReal x5451=(x5437*x5438);
IkReal x5452=(((r01*r21*x5437))+(((-1.0)*cj6*x5442*x5449))+(((-1.0)*x5439))+(((-1.0)*x5443*x5444*x5450))+((x5441*x5451))+(((-1.0)*x5441*x5450))+(((-1.0)*r02*sj5*x5443*x5447))+(((-1.0)*r01*x5442))+(((-1.0)*r01*x5442*x5451))+(((-1.0)*x5440*x5446*x5447))+(((-1.0)*x5437*x5441))+((x5446*x5448))+((x5438*x5439))+(((-1.0)*cj6*x5438*x5442*x5446))+(((-1.0)*x5440*x5444*x5447))+((x5443*x5444)));
j4eval[0]=x5452;
j4eval[1]=((IKabs((((x5445*x5448))+((cj0*x5440))+((x5443*x5445)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x5442))))));
j4eval[2]=IKsign(x5452);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5453=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5453;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5454=((1.0)*sj5);
IkReal x5455=(((cj5*r22))+(((-1.0)*cj6*r21*x5454))+(((-1.0)*r20*sj6*x5454)));
j4eval[0]=x5455;
j4eval[1]=IKsign(x5455);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5456=cj6*cj6;
IkReal x5457=cj5*cj5;
IkReal x5458=r10*r10;
IkReal x5459=r11*r11;
IkReal x5460=r12*r12;
IkReal x5461=(r10*sj6);
IkReal x5462=(r12*sj5);
IkReal x5463=((2.0)*cj6*r11);
IkReal x5464=((1.0)*x5458);
IkReal x5465=(x5456*x5459);
IkReal x5466=((((-1.0)*x5457*x5465))+x5465+(((-2.0)*cj5*x5461*x5462))+(((-1.0)*x5457*x5461*x5463))+((x5461*x5463))+((x5456*x5457*x5458))+(((-1.0)*x5457*x5464))+(((-1.0)*x5460))+(((-1.0)*x5456*x5464))+((x5457*x5460))+(((-1.0)*cj5*x5462*x5463))+(((-1.0)*x5459)));
j4eval[0]=x5466;
j4eval[1]=((IKabs((x5462+((cj5*x5461))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5467=cj6*cj6;
IkReal x5468=cj5*cj5;
IkReal x5469=r10*r10;
IkReal x5470=r11*r11;
IkReal x5471=r12*r12;
IkReal x5472=(r10*sj6);
IkReal x5473=(r12*sj5);
IkReal x5474=((2.0)*cj6*r11);
IkReal x5475=(x5467*x5470);
IkReal x5476=(x5468*x5469);
CheckValue<IkReal> x5477 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x5472))+x5473+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5477.valid){
continue;
}
CheckValue<IkReal> x5478=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5468*x5475))+(((-1.0)*x5476))+(((-1.0)*x5470))+(((-1.0)*x5471))+x5475+((x5472*x5474))+(((-1.0)*cj5*x5473*x5474))+(((-1.0)*x5467*x5469))+((x5467*x5476))+(((-1.0)*x5468*x5472*x5474))+((x5468*x5471))+(((-2.0)*cj5*x5472*x5473)))),-1);
if(!x5478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5477.value)+(((1.5707963267949)*(x5478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5479=IKsin(j4);
IkReal x5480=IKcos(j4);
IkReal x5481=(cj5*cj6);
IkReal x5482=(r11*sj6);
IkReal x5483=(cj6*r20);
IkReal x5484=(cj6*r10);
IkReal x5485=(cj5*sj6);
IkReal x5486=(r01*sj6);
IkReal x5487=(r21*sj6);
IkReal x5488=(cj6*r00);
IkReal x5489=((1.0)*x5480);
IkReal x5490=((1.0)*x5479);
IkReal x5491=(sj5*x5490);
evalcond[0]=(((x5480*x5483))+(((-1.0)*r20*x5485*x5490))+(((-1.0)*x5487*x5489))+(((-1.0)*r22*x5491))+(((-1.0)*r21*x5481*x5490)));
evalcond[1]=(((x5480*x5484))+(((-1.0)*r12*x5491))+(((-1.0)*r11*x5481*x5490))+(((-1.0)*r10*x5485*x5490))+(((-1.0)*x5482*x5489)));
evalcond[2]=((((-1.0)*r22*sj5*x5489))+(((-1.0)*r20*x5485*x5489))+((x5479*x5487))+(((-1.0)*r21*x5481*x5489))+(((-1.0)*x5483*x5490)));
evalcond[3]=((((-1.0)*x5488*x5490))+((x5479*x5486))+(((-1.0)*r00*x5485*x5489))+(((-1.0)*r01*x5481*x5489))+(((-1.0)*r02*sj5*x5489)));
evalcond[4]=((-1.0)+((x5480*x5488))+(((-1.0)*x5486*x5489))+(((-1.0)*r01*x5481*x5490))+(((-1.0)*r02*x5491))+(((-1.0)*r00*x5485*x5490)));
evalcond[5]=((-1.0)+(((-1.0)*x5484*x5490))+((x5479*x5482))+(((-1.0)*r11*x5481*x5489))+(((-1.0)*r10*x5485*x5489))+(((-1.0)*r12*sj5*x5489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5492=((1.0)*sj5);
CheckValue<IkReal> x5493 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5493.valid){
continue;
}
CheckValue<IkReal> x5494=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5492))+(((-1.0)*cj6*r21*x5492)))),-1);
if(!x5494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5493.value)+(((1.5707963267949)*(x5494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5495=IKsin(j4);
IkReal x5496=IKcos(j4);
IkReal x5497=(cj5*cj6);
IkReal x5498=(r11*sj6);
IkReal x5499=(cj6*r20);
IkReal x5500=(cj6*r10);
IkReal x5501=(cj5*sj6);
IkReal x5502=(r01*sj6);
IkReal x5503=(r21*sj6);
IkReal x5504=(cj6*r00);
IkReal x5505=((1.0)*x5496);
IkReal x5506=((1.0)*x5495);
IkReal x5507=(sj5*x5506);
evalcond[0]=((((-1.0)*x5503*x5505))+(((-1.0)*r22*x5507))+(((-1.0)*r21*x5497*x5506))+(((-1.0)*r20*x5501*x5506))+((x5496*x5499)));
evalcond[1]=((((-1.0)*x5498*x5505))+(((-1.0)*r12*x5507))+(((-1.0)*r10*x5501*x5506))+((x5496*x5500))+(((-1.0)*r11*x5497*x5506)));
evalcond[2]=((((-1.0)*r22*sj5*x5505))+((x5495*x5503))+(((-1.0)*r21*x5497*x5505))+(((-1.0)*r20*x5501*x5505))+(((-1.0)*x5499*x5506)));
evalcond[3]=(((x5495*x5502))+(((-1.0)*r02*sj5*x5505))+(((-1.0)*x5504*x5506))+(((-1.0)*r00*x5501*x5505))+(((-1.0)*r01*x5497*x5505)));
evalcond[4]=((-1.0)+(((-1.0)*x5502*x5505))+(((-1.0)*r02*x5507))+(((-1.0)*r00*x5501*x5506))+(((-1.0)*r01*x5497*x5506))+((x5496*x5504)));
evalcond[5]=((-1.0)+((x5495*x5498))+(((-1.0)*x5500*x5506))+(((-1.0)*r10*x5501*x5505))+(((-1.0)*r12*sj5*x5505))+(((-1.0)*r11*x5497*x5505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5508 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5508.valid){
continue;
}
CheckValue<IkReal> x5509=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5508.value)+(((1.5707963267949)*(x5509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5510=IKsin(j4);
IkReal x5511=IKcos(j4);
IkReal x5512=(cj5*cj6);
IkReal x5513=(r11*sj6);
IkReal x5514=(cj6*r20);
IkReal x5515=(cj6*r10);
IkReal x5516=(cj5*sj6);
IkReal x5517=(r01*sj6);
IkReal x5518=(r21*sj6);
IkReal x5519=(cj6*r00);
IkReal x5520=((1.0)*x5511);
IkReal x5521=((1.0)*x5510);
IkReal x5522=(sj5*x5521);
evalcond[0]=((((-1.0)*r22*x5522))+(((-1.0)*r20*x5516*x5521))+(((-1.0)*r21*x5512*x5521))+((x5511*x5514))+(((-1.0)*x5518*x5520)));
evalcond[1]=((((-1.0)*r10*x5516*x5521))+((x5511*x5515))+(((-1.0)*x5513*x5520))+(((-1.0)*r11*x5512*x5521))+(((-1.0)*r12*x5522)));
evalcond[2]=((((-1.0)*r20*x5516*x5520))+(((-1.0)*r21*x5512*x5520))+(((-1.0)*x5514*x5521))+(((-1.0)*r22*sj5*x5520))+((x5510*x5518)));
evalcond[3]=((((-1.0)*r02*sj5*x5520))+(((-1.0)*r00*x5516*x5520))+(((-1.0)*r01*x5512*x5520))+(((-1.0)*x5519*x5521))+((x5510*x5517)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5522))+(((-1.0)*x5517*x5520))+((x5511*x5519))+(((-1.0)*r00*x5516*x5521))+(((-1.0)*r01*x5512*x5521)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x5520))+(((-1.0)*r10*x5516*x5520))+(((-1.0)*x5515*x5521))+(((-1.0)*r11*x5512*x5520))+((x5510*x5513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5523=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5523;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5523);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5524=((1.0)*sj6);
IkReal x5525=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x5524)));
j4eval[0]=x5525;
j4eval[1]=IKsign(x5525);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5524))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5526=r11*r11;
IkReal x5527=cj5*cj5;
IkReal x5528=cj6*cj6;
IkReal x5529=r10*r10;
IkReal x5530=r12*r12;
IkReal x5531=(r12*sj5);
IkReal x5532=(cj6*r10);
IkReal x5533=((1.0)*x5528);
IkReal x5534=(cj5*cj6*r11);
IkReal x5535=(cj5*r10*sj6);
IkReal x5536=((2.0)*r11*sj6);
IkReal x5537=(x5527*x5529);
IkReal x5538=(x5526+x5530+x5537+((x5528*x5529))+(((-1.0)*x5526*x5533))+((x5526*x5527*x5528))+(((-1.0)*x5527*x5530))+((x5527*x5532*x5536))+(((-1.0)*x5532*x5536))+(((-1.0)*x5533*x5537))+(((2.0)*x5531*x5534))+(((2.0)*x5531*x5535)));
j4eval[0]=x5538;
j4eval[1]=IKsign(x5538);
j4eval[2]=((IKabs((x5532+(((-1.0)*r11*sj6)))))+(IKabs((x5531+x5535+x5534))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5539=r11*r11;
IkReal x5540=cj5*cj5;
IkReal x5541=cj6*cj6;
IkReal x5542=r10*r10;
IkReal x5543=r12*r12;
IkReal x5544=(r10*sj6);
IkReal x5545=(r12*sj5);
IkReal x5546=((1.0)*x5541);
IkReal x5547=(cj5*cj6*r11);
IkReal x5548=((2.0)*cj6*r11);
IkReal x5549=(x5540*x5542);
CheckValue<IkReal> x5550=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5539*x5546))+((x5539*x5540*x5541))+x5539+x5549+x5543+((x5540*x5544*x5548))+((x5541*x5542))+(((-1.0)*x5544*x5548))+(((2.0)*cj5*x5544*x5545))+(((-1.0)*x5540*x5543))+(((-1.0)*x5546*x5549))+(((2.0)*x5545*x5547)))),-1);
if(!x5550.valid){
continue;
}
CheckValue<IkReal> x5551 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x5547+x5545+((cj5*x5544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5550.value)))+(x5551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5552=IKsin(j4);
IkReal x5553=IKcos(j4);
IkReal x5554=(cj5*cj6);
IkReal x5555=(r11*sj6);
IkReal x5556=(cj6*r20);
IkReal x5557=(cj6*r10);
IkReal x5558=(cj5*sj6);
IkReal x5559=(r01*sj6);
IkReal x5560=(r21*sj6);
IkReal x5561=(cj6*r00);
IkReal x5562=((1.0)*x5553);
IkReal x5563=((1.0)*x5552);
IkReal x5564=(sj5*x5563);
evalcond[0]=((((-1.0)*r22*x5564))+(((-1.0)*r20*x5558*x5563))+((x5553*x5556))+(((-1.0)*x5560*x5562))+(((-1.0)*r21*x5554*x5563)));
evalcond[1]=((((-1.0)*r12*x5564))+(((-1.0)*x5555*x5562))+(((-1.0)*r11*x5554*x5563))+((x5553*x5557))+(((-1.0)*r10*x5558*x5563)));
evalcond[2]=((((-1.0)*x5556*x5563))+(((-1.0)*r22*sj5*x5562))+((x5552*x5560))+(((-1.0)*r20*x5558*x5562))+(((-1.0)*r21*x5554*x5562)));
evalcond[3]=((((-1.0)*r02*sj5*x5562))+(((-1.0)*r01*x5554*x5562))+((x5552*x5559))+(((-1.0)*x5561*x5563))+(((-1.0)*r00*x5558*x5562)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5554*x5563))+((x5553*x5561))+(((-1.0)*r02*x5564))+(((-1.0)*x5559*x5562))+(((-1.0)*r00*x5558*x5563)));
evalcond[5]=((1.0)+(((-1.0)*x5557*x5563))+(((-1.0)*r11*x5554*x5562))+((x5552*x5555))+(((-1.0)*r12*sj5*x5562))+(((-1.0)*r10*x5558*x5562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5565=((1.0)*sj6);
CheckValue<IkReal> x5566=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x5565)))),-1);
if(!x5566.valid){
continue;
}
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x5565)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5566.value)))+(x5567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5568=IKsin(j4);
IkReal x5569=IKcos(j4);
IkReal x5570=(cj5*cj6);
IkReal x5571=(r11*sj6);
IkReal x5572=(cj6*r20);
IkReal x5573=(cj6*r10);
IkReal x5574=(cj5*sj6);
IkReal x5575=(r01*sj6);
IkReal x5576=(r21*sj6);
IkReal x5577=(cj6*r00);
IkReal x5578=((1.0)*x5569);
IkReal x5579=((1.0)*x5568);
IkReal x5580=(sj5*x5579);
evalcond[0]=(((x5569*x5572))+(((-1.0)*r20*x5574*x5579))+(((-1.0)*r21*x5570*x5579))+(((-1.0)*x5576*x5578))+(((-1.0)*r22*x5580)));
evalcond[1]=((((-1.0)*r12*x5580))+(((-1.0)*r11*x5570*x5579))+((x5569*x5573))+(((-1.0)*x5571*x5578))+(((-1.0)*r10*x5574*x5579)));
evalcond[2]=((((-1.0)*r22*sj5*x5578))+(((-1.0)*r20*x5574*x5578))+(((-1.0)*x5572*x5579))+((x5568*x5576))+(((-1.0)*r21*x5570*x5578)));
evalcond[3]=((((-1.0)*r01*x5570*x5578))+(((-1.0)*r00*x5574*x5578))+((x5568*x5575))+(((-1.0)*r02*sj5*x5578))+(((-1.0)*x5577*x5579)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5570*x5579))+((x5569*x5577))+(((-1.0)*r02*x5580))+(((-1.0)*r00*x5574*x5579))+(((-1.0)*x5575*x5578)));
evalcond[5]=((1.0)+(((-1.0)*r11*x5570*x5578))+(((-1.0)*r12*sj5*x5578))+(((-1.0)*x5573*x5579))+((x5568*x5571))+(((-1.0)*r10*x5574*x5578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5581=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5581.valid){
continue;
}
CheckValue<IkReal> x5582 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5581.value)))+(x5582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5583=IKsin(j4);
IkReal x5584=IKcos(j4);
IkReal x5585=(cj5*cj6);
IkReal x5586=(r11*sj6);
IkReal x5587=(cj6*r20);
IkReal x5588=(cj6*r10);
IkReal x5589=(cj5*sj6);
IkReal x5590=(r01*sj6);
IkReal x5591=(r21*sj6);
IkReal x5592=(cj6*r00);
IkReal x5593=((1.0)*x5584);
IkReal x5594=((1.0)*x5583);
IkReal x5595=(sj5*x5594);
evalcond[0]=(((x5584*x5587))+(((-1.0)*r21*x5585*x5594))+(((-1.0)*r20*x5589*x5594))+(((-1.0)*x5591*x5593))+(((-1.0)*r22*x5595)));
evalcond[1]=((((-1.0)*x5586*x5593))+(((-1.0)*r12*x5595))+(((-1.0)*r11*x5585*x5594))+((x5584*x5588))+(((-1.0)*r10*x5589*x5594)));
evalcond[2]=((((-1.0)*r21*x5585*x5593))+(((-1.0)*r22*sj5*x5593))+(((-1.0)*r20*x5589*x5593))+(((-1.0)*x5587*x5594))+((x5583*x5591)));
evalcond[3]=((((-1.0)*r01*x5585*x5593))+(((-1.0)*x5592*x5594))+(((-1.0)*r02*sj5*x5593))+(((-1.0)*r00*x5589*x5593))+((x5583*x5590)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5585*x5594))+(((-1.0)*x5590*x5593))+(((-1.0)*r02*x5595))+((x5584*x5592))+(((-1.0)*r00*x5589*x5594)));
evalcond[5]=((1.0)+(((-1.0)*x5588*x5594))+(((-1.0)*r12*sj5*x5593))+(((-1.0)*r11*x5585*x5593))+((x5583*x5586))+(((-1.0)*r10*x5589*x5593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5596=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5596;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5597=((1.0)*sj5);
IkReal x5598=(((cj5*r22))+(((-1.0)*r20*sj6*x5597))+(((-1.0)*cj6*r21*x5597)));
j4eval[0]=x5598;
j4eval[1]=IKsign(x5598);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5599=cj6*cj6;
IkReal x5600=cj5*cj5;
IkReal x5601=r00*r00;
IkReal x5602=r01*r01;
IkReal x5603=r02*r02;
IkReal x5604=(cj6*r00);
IkReal x5605=(cj5*cj6*r01);
IkReal x5606=((2.0)*r02*sj5);
IkReal x5607=((1.0)*x5599);
IkReal x5608=((2.0)*r01*sj6);
IkReal x5609=(cj5*r00*sj6);
IkReal x5610=(x5600*x5601);
IkReal x5611=(((x5600*x5603))+(((-1.0)*x5610))+(((-1.0)*x5603))+(((-1.0)*x5602))+((x5604*x5608))+(((-1.0)*x5600*x5602*x5607))+(((-1.0)*x5601*x5607))+(((-1.0)*x5606*x5609))+((x5599*x5602))+(((-1.0)*x5605*x5606))+((x5599*x5610))+(((-1.0)*x5600*x5604*x5608)));
j4eval[0]=x5611;
j4eval[1]=((IKabs((x5604+(((-1.0)*r01*sj6)))))+(IKabs((x5605+x5609+((r02*sj5))))));
j4eval[2]=IKsign(x5611);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5612=cj6*cj6;
IkReal x5613=cj5*cj5;
IkReal x5614=r00*r00;
IkReal x5615=r01*r01;
IkReal x5616=r02*r02;
IkReal x5617=(cj6*r00);
IkReal x5618=(cj5*cj6*r01);
IkReal x5619=((2.0)*r02*sj5);
IkReal x5620=((1.0)*x5612);
IkReal x5621=((2.0)*r01*sj6);
IkReal x5622=(cj5*r00*sj6);
IkReal x5623=(x5613*x5614);
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal((x5617+(((-1.0)*r01*sj6)))),IkReal((x5622+x5618+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
CheckValue<IkReal> x5625=IKPowWithIntegerCheck(IKsign((((x5613*x5616))+(((-1.0)*x5615))+(((-1.0)*x5616))+(((-1.0)*x5613*x5615*x5620))+(((-1.0)*x5613*x5617*x5621))+((x5617*x5621))+(((-1.0)*x5619*x5622))+(((-1.0)*x5618*x5619))+(((-1.0)*x5614*x5620))+((x5612*x5615))+((x5612*x5623))+(((-1.0)*x5623)))),-1);
if(!x5625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5624.value)+(((1.5707963267949)*(x5625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5626=IKsin(j4);
IkReal x5627=IKcos(j4);
IkReal x5628=(cj5*cj6);
IkReal x5629=(r11*sj6);
IkReal x5630=(cj6*r20);
IkReal x5631=(cj6*r10);
IkReal x5632=(cj5*sj6);
IkReal x5633=(r21*sj6);
IkReal x5634=(cj6*r00);
IkReal x5635=(r01*sj6);
IkReal x5636=((1.0)*x5627);
IkReal x5637=((1.0)*x5626);
IkReal x5638=(sj5*x5637);
evalcond[0]=((((-1.0)*x5633*x5636))+((x5627*x5630))+(((-1.0)*r20*x5632*x5637))+(((-1.0)*r21*x5628*x5637))+(((-1.0)*r22*x5638)));
evalcond[1]=((((-1.0)*x5635*x5636))+((x5627*x5634))+(((-1.0)*r02*x5638))+(((-1.0)*r00*x5632*x5637))+(((-1.0)*r01*x5628*x5637)));
evalcond[2]=(((x5626*x5633))+(((-1.0)*r22*sj5*x5636))+(((-1.0)*r20*x5632*x5636))+(((-1.0)*r21*x5628*x5636))+(((-1.0)*x5630*x5637)));
evalcond[3]=((((-1.0)*r10*x5632*x5636))+(((-1.0)*r12*sj5*x5636))+(((-1.0)*r11*x5628*x5636))+((x5626*x5629))+(((-1.0)*x5631*x5637)));
evalcond[4]=((1.0)+(((-1.0)*r10*x5632*x5637))+(((-1.0)*r12*x5638))+(((-1.0)*x5629*x5636))+((x5627*x5631))+(((-1.0)*r11*x5628*x5637)));
evalcond[5]=((-1.0)+((x5626*x5635))+(((-1.0)*r00*x5632*x5636))+(((-1.0)*r01*x5628*x5636))+(((-1.0)*r02*sj5*x5636))+(((-1.0)*x5634*x5637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5639=((1.0)*sj5);
CheckValue<IkReal> x5640 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5640.valid){
continue;
}
CheckValue<IkReal> x5641=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x5639))+((cj5*r22))+(((-1.0)*cj6*r21*x5639)))),-1);
if(!x5641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5640.value)+(((1.5707963267949)*(x5641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5642=IKsin(j4);
IkReal x5643=IKcos(j4);
IkReal x5644=(cj5*cj6);
IkReal x5645=(r11*sj6);
IkReal x5646=(cj6*r20);
IkReal x5647=(cj6*r10);
IkReal x5648=(cj5*sj6);
IkReal x5649=(r21*sj6);
IkReal x5650=(cj6*r00);
IkReal x5651=(r01*sj6);
IkReal x5652=((1.0)*x5643);
IkReal x5653=((1.0)*x5642);
IkReal x5654=(sj5*x5653);
evalcond[0]=((((-1.0)*r21*x5644*x5653))+(((-1.0)*r22*x5654))+(((-1.0)*x5649*x5652))+((x5643*x5646))+(((-1.0)*r20*x5648*x5653)));
evalcond[1]=((((-1.0)*x5651*x5652))+(((-1.0)*r02*x5654))+(((-1.0)*r00*x5648*x5653))+((x5643*x5650))+(((-1.0)*r01*x5644*x5653)));
evalcond[2]=((((-1.0)*r21*x5644*x5652))+(((-1.0)*x5646*x5653))+((x5642*x5649))+(((-1.0)*r22*sj5*x5652))+(((-1.0)*r20*x5648*x5652)));
evalcond[3]=((((-1.0)*x5647*x5653))+(((-1.0)*r10*x5648*x5652))+((x5642*x5645))+(((-1.0)*r11*x5644*x5652))+(((-1.0)*r12*sj5*x5652)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5654))+(((-1.0)*x5645*x5652))+(((-1.0)*r10*x5648*x5653))+((x5643*x5647))+(((-1.0)*r11*x5644*x5653)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x5648*x5652))+(((-1.0)*x5650*x5653))+((x5642*x5651))+(((-1.0)*r02*sj5*x5652))+(((-1.0)*r01*x5644*x5652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5655 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5655.valid){
continue;
}
CheckValue<IkReal> x5656=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5655.value)+(((1.5707963267949)*(x5656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5657=IKsin(j4);
IkReal x5658=IKcos(j4);
IkReal x5659=(cj5*cj6);
IkReal x5660=(r11*sj6);
IkReal x5661=(cj6*r20);
IkReal x5662=(cj6*r10);
IkReal x5663=(cj5*sj6);
IkReal x5664=(r21*sj6);
IkReal x5665=(cj6*r00);
IkReal x5666=(r01*sj6);
IkReal x5667=((1.0)*x5658);
IkReal x5668=((1.0)*x5657);
IkReal x5669=(sj5*x5668);
evalcond[0]=((((-1.0)*r22*x5669))+(((-1.0)*r20*x5663*x5668))+(((-1.0)*r21*x5659*x5668))+(((-1.0)*x5664*x5667))+((x5658*x5661)));
evalcond[1]=((((-1.0)*r00*x5663*x5668))+(((-1.0)*x5666*x5667))+(((-1.0)*r02*x5669))+(((-1.0)*r01*x5659*x5668))+((x5658*x5665)));
evalcond[2]=((((-1.0)*r22*sj5*x5667))+(((-1.0)*r20*x5663*x5667))+(((-1.0)*r21*x5659*x5667))+(((-1.0)*x5661*x5668))+((x5657*x5664)));
evalcond[3]=((((-1.0)*r11*x5659*x5667))+(((-1.0)*r10*x5663*x5667))+(((-1.0)*x5662*x5668))+(((-1.0)*r12*sj5*x5667))+((x5657*x5660)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5659*x5668))+(((-1.0)*r10*x5663*x5668))+(((-1.0)*x5660*x5667))+(((-1.0)*r12*x5669))+((x5658*x5662)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x5663*x5667))+(((-1.0)*x5665*x5668))+(((-1.0)*r02*sj5*x5667))+((x5657*x5666))+(((-1.0)*r01*x5659*x5667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5670=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5670;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5670);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5671=((1.0)*sj6);
IkReal x5672=((((-1.0)*r00*sj5*x5671))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x5672;
j4eval[1]=IKsign(x5672);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x5671))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5673=cj6*cj6;
IkReal x5674=r01*r01;
IkReal x5675=cj5*cj5;
IkReal x5676=r00*r00;
IkReal x5677=r02*r02;
IkReal x5678=(cj6*r00);
IkReal x5679=(r02*sj5);
IkReal x5680=(cj5*cj6*r01);
IkReal x5681=((2.0)*r01*sj6);
IkReal x5682=(cj5*r00*sj6);
IkReal x5683=((1.0)*x5675);
IkReal x5684=(x5673*x5676);
IkReal x5685=(x5673*x5674);
IkReal x5686=(x5684+x5674+x5677+((x5675*x5676))+(((-1.0)*x5678*x5681))+(((-1.0)*x5683*x5684))+(((2.0)*x5679*x5680))+(((2.0)*x5679*x5682))+(((-1.0)*x5685))+((x5675*x5678*x5681))+(((-1.0)*x5677*x5683))+((x5675*x5685)));
j4eval[0]=x5686;
j4eval[1]=((IKabs((x5680+x5682+x5679)))+(IKabs((x5678+(((-1.0)*r01*sj6))))));
j4eval[2]=IKsign(x5686);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5687=cj6*cj6;
IkReal x5688=r01*r01;
IkReal x5689=cj5*cj5;
IkReal x5690=r00*r00;
IkReal x5691=r02*r02;
IkReal x5692=(cj6*r00);
IkReal x5693=((2.0)*r01);
IkReal x5694=(cj5*cj6);
IkReal x5695=(r02*sj5);
IkReal x5696=(cj5*r00*sj6);
IkReal x5697=(x5689*x5690);
IkReal x5698=(x5687*x5688);
CheckValue<IkReal> x5699 = IKatan2WithCheck(IkReal((x5692+(((-1.0)*r01*sj6)))),IkReal((x5696+x5695+((r01*x5694)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5699.valid){
continue;
}
CheckValue<IkReal> x5700=IKPowWithIntegerCheck(IKsign((((x5687*x5690))+x5691+x5697+x5688+(((-1.0)*x5689*x5691))+((sj6*x5689*x5692*x5693))+(((-1.0)*x5698))+((x5689*x5698))+(((-1.0)*x5687*x5697))+(((2.0)*x5695*x5696))+((x5693*x5694*x5695))+(((-1.0)*sj6*x5692*x5693)))),-1);
if(!x5700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5699.value)+(((1.5707963267949)*(x5700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5701=IKsin(j4);
IkReal x5702=IKcos(j4);
IkReal x5703=(cj5*cj6);
IkReal x5704=(r11*sj6);
IkReal x5705=(cj6*r20);
IkReal x5706=(cj6*r10);
IkReal x5707=(cj5*sj6);
IkReal x5708=(r21*sj6);
IkReal x5709=(cj6*r00);
IkReal x5710=(r01*sj6);
IkReal x5711=((1.0)*x5702);
IkReal x5712=((1.0)*x5701);
IkReal x5713=(sj5*x5712);
evalcond[0]=((((-1.0)*r21*x5703*x5712))+(((-1.0)*x5708*x5711))+(((-1.0)*r20*x5707*x5712))+(((-1.0)*r22*x5713))+((x5702*x5705)));
evalcond[1]=((((-1.0)*r00*x5707*x5712))+(((-1.0)*x5710*x5711))+((x5702*x5709))+(((-1.0)*r01*x5703*x5712))+(((-1.0)*r02*x5713)));
evalcond[2]=((((-1.0)*r21*x5703*x5711))+(((-1.0)*r20*x5707*x5711))+((x5701*x5708))+(((-1.0)*r22*sj5*x5711))+(((-1.0)*x5705*x5712)));
evalcond[3]=((((-1.0)*r11*x5703*x5711))+((x5701*x5704))+(((-1.0)*x5706*x5712))+(((-1.0)*r10*x5707*x5711))+(((-1.0)*r12*sj5*x5711)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5703*x5712))+(((-1.0)*r10*x5707*x5712))+(((-1.0)*r12*x5713))+(((-1.0)*x5704*x5711))+((x5702*x5706)));
evalcond[5]=((1.0)+((x5701*x5710))+(((-1.0)*r02*sj5*x5711))+(((-1.0)*x5709*x5712))+(((-1.0)*r00*x5707*x5711))+(((-1.0)*r01*x5703*x5711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5714=((1.0)*sj6);
CheckValue<IkReal> x5715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x5714))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x5714)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5715.value)))+(x5716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5717=IKsin(j4);
IkReal x5718=IKcos(j4);
IkReal x5719=(cj5*cj6);
IkReal x5720=(r11*sj6);
IkReal x5721=(cj6*r20);
IkReal x5722=(cj6*r10);
IkReal x5723=(cj5*sj6);
IkReal x5724=(r21*sj6);
IkReal x5725=(cj6*r00);
IkReal x5726=(r01*sj6);
IkReal x5727=((1.0)*x5718);
IkReal x5728=((1.0)*x5717);
IkReal x5729=(sj5*x5728);
evalcond[0]=((((-1.0)*r20*x5723*x5728))+(((-1.0)*r21*x5719*x5728))+(((-1.0)*x5724*x5727))+((x5718*x5721))+(((-1.0)*r22*x5729)));
evalcond[1]=((((-1.0)*r00*x5723*x5728))+((x5718*x5725))+(((-1.0)*r02*x5729))+(((-1.0)*x5726*x5727))+(((-1.0)*r01*x5719*x5728)));
evalcond[2]=((((-1.0)*r20*x5723*x5727))+(((-1.0)*r21*x5719*x5727))+((x5717*x5724))+(((-1.0)*r22*sj5*x5727))+(((-1.0)*x5721*x5728)));
evalcond[3]=(((x5717*x5720))+(((-1.0)*r12*sj5*x5727))+(((-1.0)*x5722*x5728))+(((-1.0)*r11*x5719*x5727))+(((-1.0)*r10*x5723*x5727)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x5729))+((x5718*x5722))+(((-1.0)*r11*x5719*x5728))+(((-1.0)*x5720*x5727))+(((-1.0)*r10*x5723*x5728)));
evalcond[5]=((1.0)+(((-1.0)*x5725*x5728))+(((-1.0)*r00*x5723*x5727))+((x5717*x5726))+(((-1.0)*r01*x5719*x5727))+(((-1.0)*r02*sj5*x5727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5730=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5730.valid){
continue;
}
CheckValue<IkReal> x5731 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5730.value)))+(x5731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5732=IKsin(j4);
IkReal x5733=IKcos(j4);
IkReal x5734=(cj5*cj6);
IkReal x5735=(r11*sj6);
IkReal x5736=(cj6*r20);
IkReal x5737=(cj6*r10);
IkReal x5738=(cj5*sj6);
IkReal x5739=(r21*sj6);
IkReal x5740=(cj6*r00);
IkReal x5741=(r01*sj6);
IkReal x5742=((1.0)*x5733);
IkReal x5743=((1.0)*x5732);
IkReal x5744=(sj5*x5743);
evalcond[0]=(((x5733*x5736))+(((-1.0)*r20*x5738*x5743))+(((-1.0)*r21*x5734*x5743))+(((-1.0)*r22*x5744))+(((-1.0)*x5739*x5742)));
evalcond[1]=((((-1.0)*r00*x5738*x5743))+(((-1.0)*r01*x5734*x5743))+((x5733*x5740))+(((-1.0)*r02*x5744))+(((-1.0)*x5741*x5742)));
evalcond[2]=(((x5732*x5739))+(((-1.0)*r20*x5738*x5742))+(((-1.0)*r21*x5734*x5742))+(((-1.0)*r22*sj5*x5742))+(((-1.0)*x5736*x5743)));
evalcond[3]=(((x5732*x5735))+(((-1.0)*x5737*x5743))+(((-1.0)*r12*sj5*x5742))+(((-1.0)*r11*x5734*x5742))+(((-1.0)*r10*x5738*x5742)));
evalcond[4]=((-1.0)+(((-1.0)*x5735*x5742))+((x5733*x5737))+(((-1.0)*r11*x5734*x5743))+(((-1.0)*r12*x5744))+(((-1.0)*r10*x5738*x5743)));
evalcond[5]=((1.0)+(((-1.0)*r00*x5738*x5742))+(((-1.0)*r01*x5734*x5742))+(((-1.0)*x5740*x5743))+(((-1.0)*r02*sj5*x5742))+((x5732*x5741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5745=cj6*cj6;
IkReal x5746=cj5*cj5;
IkReal x5747=(r22*sj5);
IkReal x5748=(cj0*r20);
IkReal x5749=((1.0)*r21);
IkReal x5750=(cj5*sj6);
IkReal x5751=(r02*r22);
IkReal x5752=(cj5*cj6);
IkReal x5753=(r02*sj5);
IkReal x5754=(cj6*sj6);
IkReal x5755=((1.0)*r20);
IkReal x5756=(r01*x5749);
IkReal x5757=(r00*r20*x5746);
CheckValue<IkReal> x5758 = IKatan2WithCheck(IkReal((((cj6*x5748))+(((-1.0)*cj0*sj6*x5749)))),IkReal((((cj0*r21*x5752))+((x5748*x5750))+((cj0*x5747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5758.valid){
continue;
}
CheckValue<IkReal> x5759=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5745*x5746*x5756))+(((-1.0)*x5750*x5753*x5755))+(((-1.0)*r01*x5746*x5754*x5755))+(((-1.0)*r00*x5747*x5750))+(((-1.0)*r01*x5747*x5752))+(((-1.0)*x5756))+(((-1.0)*r00*x5746*x5749*x5754))+((r01*r20*x5754))+((r01*r21*x5745))+((x5746*x5751))+((r00*r21*x5754))+(((-1.0)*r00*x5746*x5755))+(((-1.0)*x5749*x5752*x5753))+(((-1.0)*x5751))+(((-1.0)*r00*x5745*x5755))+((x5745*x5757)))),-1);
if(!x5759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5758.value)+(((1.5707963267949)*(x5759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5760=IKsin(j4);
IkReal x5761=IKcos(j4);
IkReal x5762=((1.0)*sj0);
IkReal x5763=((1.0)*cj6);
IkReal x5764=((1.0)*sj6);
IkReal x5765=(cj5*x5761);
IkReal x5766=(r20*x5760);
IkReal x5767=(cj6*x5761);
IkReal x5768=(r11*x5760);
IkReal x5769=(r21*x5760);
IkReal x5770=(r01*x5760);
IkReal x5771=((1.0)*sj5*x5760);
IkReal x5772=((1.0)*sj5*x5761);
IkReal x5773=(cj5*x5760*x5764);
evalcond[0]=((((-1.0)*r21*x5761*x5764))+(((-1.0)*cj5*x5764*x5766))+(((-1.0)*cj5*x5763*x5769))+(((-1.0)*r22*x5771))+((r20*x5767)));
evalcond[1]=((((-1.0)*r21*x5763*x5765))+((sj6*x5769))+(((-1.0)*r22*x5772))+(((-1.0)*x5763*x5766))+(((-1.0)*r20*x5764*x5765)));
evalcond[2]=(cj0+(((-1.0)*r12*x5771))+(((-1.0)*r10*x5773))+(((-1.0)*cj5*x5763*x5768))+((r10*x5767))+(((-1.0)*r11*x5761*x5764)));
evalcond[3]=((((-1.0)*r00*x5773))+((r00*x5767))+(((-1.0)*cj5*x5763*x5770))+(((-1.0)*r02*x5771))+(((-1.0)*x5762))+(((-1.0)*r01*x5761*x5764)));
evalcond[4]=((((-1.0)*r01*x5763*x5765))+((sj6*x5770))+(((-1.0)*r00*x5760*x5763))+(((-1.0)*r02*x5772))+(((-1.0)*r00*x5764*x5765))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x5772))+(((-1.0)*r10*x5760*x5763))+((sj6*x5768))+(((-1.0)*x5762))+(((-1.0)*r11*x5763*x5765))+(((-1.0)*r10*x5764*x5765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5774=(cj5*sj0);
CheckValue<IkReal> x5775 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((r22*sj0*sj5))+((cj6*r21*x5774))+((r20*sj6*x5774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5775.valid){
continue;
}
CheckValue<IkReal> x5776=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5775.value)+(((1.5707963267949)*(x5776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5777=IKsin(j4);
IkReal x5778=IKcos(j4);
IkReal x5779=((1.0)*sj0);
IkReal x5780=((1.0)*cj6);
IkReal x5781=((1.0)*sj6);
IkReal x5782=(cj5*x5778);
IkReal x5783=(r20*x5777);
IkReal x5784=(cj6*x5778);
IkReal x5785=(r11*x5777);
IkReal x5786=(r21*x5777);
IkReal x5787=(r01*x5777);
IkReal x5788=((1.0)*sj5*x5777);
IkReal x5789=((1.0)*sj5*x5778);
IkReal x5790=(cj5*x5777*x5781);
evalcond[0]=(((r20*x5784))+(((-1.0)*cj5*x5781*x5783))+(((-1.0)*cj5*x5780*x5786))+(((-1.0)*r21*x5778*x5781))+(((-1.0)*r22*x5788)));
evalcond[1]=(((sj6*x5786))+(((-1.0)*x5780*x5783))+(((-1.0)*r22*x5789))+(((-1.0)*r21*x5780*x5782))+(((-1.0)*r20*x5781*x5782)));
evalcond[2]=(cj0+(((-1.0)*r10*x5790))+(((-1.0)*cj5*x5780*x5785))+(((-1.0)*r11*x5778*x5781))+(((-1.0)*r12*x5788))+((r10*x5784)));
evalcond[3]=((((-1.0)*r01*x5778*x5781))+((r00*x5784))+(((-1.0)*r00*x5790))+(((-1.0)*cj5*x5780*x5787))+(((-1.0)*x5779))+(((-1.0)*r02*x5788)));
evalcond[4]=((((-1.0)*r00*x5781*x5782))+((sj6*x5787))+(((-1.0)*r01*x5780*x5782))+(((-1.0)*r00*x5777*x5780))+(((-1.0)*r02*x5789))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*x5777*x5780))+(((-1.0)*r11*x5780*x5782))+((sj6*x5785))+(((-1.0)*r12*x5789))+(((-1.0)*r10*x5781*x5782))+(((-1.0)*x5779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5791=(cj0*sj6);
IkReal x5792=(cj0*cj6);
CheckValue<IkReal> x5793 = IKatan2WithCheck(IkReal((((r20*x5792))+(((-1.0)*r21*x5791)))),IkReal((((cj5*r21*x5792))+((cj5*r20*x5791))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5793.valid){
continue;
}
CheckValue<IkReal> x5794=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5794.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5793.value)+(((1.5707963267949)*(x5794.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5795=IKsin(j4);
IkReal x5796=IKcos(j4);
IkReal x5797=((1.0)*sj0);
IkReal x5798=((1.0)*cj6);
IkReal x5799=((1.0)*sj6);
IkReal x5800=(cj5*x5796);
IkReal x5801=(r20*x5795);
IkReal x5802=(cj6*x5796);
IkReal x5803=(r11*x5795);
IkReal x5804=(r21*x5795);
IkReal x5805=(r01*x5795);
IkReal x5806=((1.0)*sj5*x5795);
IkReal x5807=((1.0)*sj5*x5796);
IkReal x5808=(cj5*x5795*x5799);
evalcond[0]=((((-1.0)*cj5*x5799*x5801))+(((-1.0)*r22*x5806))+(((-1.0)*cj5*x5798*x5804))+(((-1.0)*r21*x5796*x5799))+((r20*x5802)));
evalcond[1]=((((-1.0)*r20*x5799*x5800))+(((-1.0)*r22*x5807))+(((-1.0)*x5798*x5801))+(((-1.0)*r21*x5798*x5800))+((sj6*x5804)));
evalcond[2]=(cj0+(((-1.0)*r10*x5808))+(((-1.0)*cj5*x5798*x5803))+(((-1.0)*r12*x5806))+((r10*x5802))+(((-1.0)*r11*x5796*x5799)));
evalcond[3]=((((-1.0)*x5797))+((r00*x5802))+(((-1.0)*cj5*x5798*x5805))+(((-1.0)*r01*x5796*x5799))+(((-1.0)*r00*x5808))+(((-1.0)*r02*x5806)));
evalcond[4]=((((-1.0)*r00*x5795*x5798))+((sj6*x5805))+(((-1.0)*r01*x5798*x5800))+(((-1.0)*r02*x5807))+(((-1.0)*r00*x5799*x5800))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x5797))+(((-1.0)*r11*x5798*x5800))+(((-1.0)*r12*x5807))+(((-1.0)*r10*x5799*x5800))+(((-1.0)*r10*x5795*x5798))+((sj6*x5803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5809=(r20*sj0);
IkReal x5810=((1.0)*sj5);
IkReal x5811=(r21*sj0);
IkReal x5812=(((cj5*r12))+(((-1.0)*r10*sj6*x5810))+(((-1.0)*cj6*r11*x5810)));
j4eval[0]=x5812;
j4eval[1]=IKsign(x5812);
j4eval[2]=((IKabs((((cj5*cj6*x5811))+((r22*sj0*sj5))+((cj5*sj6*x5809)))))+(IKabs(((((-1.0)*sj6*x5811))+((cj6*x5809))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5813=(cj0*sj6);
IkReal x5814=((1.0)*sj5);
IkReal x5815=(cj0*cj6);
IkReal x5816=((((-1.0)*cj6*r01*x5814))+(((-1.0)*r00*sj6*x5814))+((cj5*r02)));
j4eval[0]=x5816;
j4eval[1]=IKsign(x5816);
j4eval[2]=((IKabs(((((-1.0)*r21*x5813))+((r20*x5815)))))+(IKabs((((cj5*r21*x5815))+((cj5*r20*x5813))+((cj0*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5817=cj6*cj6;
IkReal x5818=cj5*cj5;
IkReal x5819=(r02*r22);
IkReal x5820=(r22*sj5);
IkReal x5821=(r00*r20);
IkReal x5822=((1.0)*r21);
IkReal x5823=(r20*sj6);
IkReal x5824=(cj6*r01);
IkReal x5825=(cj0*cj5);
IkReal x5826=(r00*sj6);
IkReal x5827=((1.0)*cj5);
IkReal x5828=(cj6*r21);
IkReal x5829=(cj5*r02*sj5);
IkReal x5830=((1.0)*x5818);
IkReal x5831=(x5817*x5818);
IkReal x5832=(((x5821*x5831))+((r01*r21*x5817))+(((-1.0)*r01*x5822))+(((-1.0)*x5819))+((x5818*x5819))+(((-1.0)*x5821*x5830))+(((-1.0)*x5820*x5824*x5827))+(((-1.0)*r01*x5822*x5831))+(((-1.0)*x5820*x5826*x5827))+(((-1.0)*x5817*x5821))+(((-1.0)*cj6*x5822*x5829))+(((-1.0)*x5823*x5824*x5830))+(((-1.0)*r02*sj5*x5823*x5827))+((x5826*x5828))+((x5823*x5824))+(((-1.0)*cj6*x5818*x5822*x5826)));
j4eval[0]=x5832;
j4eval[1]=((IKabs((((x5825*x5828))+((cj0*x5820))+((x5823*x5825)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x5822))))));
j4eval[2]=IKsign(x5832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5833=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5833;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5833);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5834=((1.0)*sj6);
IkReal x5835=(((cj5*r12))+(((-1.0)*r10*sj5*x5834))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x5835;
j4eval[1]=IKsign(x5835);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5834))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5836=cj6*cj6;
IkReal x5837=cj5*cj5;
IkReal x5838=r10*r10;
IkReal x5839=r11*r11;
IkReal x5840=r12*r12;
IkReal x5841=(r10*sj6);
IkReal x5842=(r12*sj5);
IkReal x5843=((2.0)*cj6*r11);
IkReal x5844=((1.0)*x5838);
IkReal x5845=(x5836*x5839);
IkReal x5846=((((-1.0)*x5837*x5844))+(((-1.0)*x5840))+((x5837*x5840))+(((-2.0)*cj5*x5841*x5842))+(((-1.0)*x5837*x5845))+((x5841*x5843))+(((-1.0)*x5837*x5841*x5843))+(((-1.0)*cj5*x5842*x5843))+(((-1.0)*x5836*x5844))+((x5836*x5837*x5838))+(((-1.0)*x5839))+x5845);
j4eval[0]=x5846;
j4eval[1]=((IKabs((((cj5*cj6*r11))+((cj5*x5841))+x5842)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5846);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5847=cj6*cj6;
IkReal x5848=cj5*cj5;
IkReal x5849=r10*r10;
IkReal x5850=r11*r11;
IkReal x5851=r12*r12;
IkReal x5852=(r10*sj6);
IkReal x5853=(r12*sj5);
IkReal x5854=((2.0)*cj6*r11);
IkReal x5855=(x5847*x5850);
IkReal x5856=(x5848*x5849);
CheckValue<IkReal> x5857=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*x5852*x5853))+((x5852*x5854))+(((-1.0)*x5848*x5855))+((x5848*x5851))+(((-1.0)*x5850))+(((-1.0)*x5851))+(((-1.0)*x5856))+(((-1.0)*x5847*x5849))+(((-1.0)*x5848*x5852*x5854))+((x5847*x5856))+(((-1.0)*cj5*x5853*x5854))+x5855)),-1);
if(!x5857.valid){
continue;
}
CheckValue<IkReal> x5858 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x5852))+((cj5*cj6*r11))+x5853)),IKFAST_ATAN2_MAGTHRESH);
if(!x5858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5857.value)))+(x5858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5859=IKsin(j4);
IkReal x5860=IKcos(j4);
IkReal x5861=(cj5*cj6);
IkReal x5862=(r11*sj6);
IkReal x5863=(cj6*r20);
IkReal x5864=(cj6*r10);
IkReal x5865=(cj5*sj6);
IkReal x5866=(r01*sj6);
IkReal x5867=(r21*sj6);
IkReal x5868=(cj6*r00);
IkReal x5869=((1.0)*x5860);
IkReal x5870=((1.0)*x5859);
IkReal x5871=(sj5*x5870);
evalcond[0]=(((x5860*x5863))+(((-1.0)*r20*x5865*x5870))+(((-1.0)*r22*x5871))+(((-1.0)*r21*x5861*x5870))+(((-1.0)*x5867*x5869)));
evalcond[1]=(((x5860*x5864))+(((-1.0)*r12*x5871))+(((-1.0)*x5862*x5869))+(((-1.0)*r10*x5865*x5870))+(((-1.0)*r11*x5861*x5870)));
evalcond[2]=((((-1.0)*r22*sj5*x5869))+(((-1.0)*r20*x5865*x5869))+(((-1.0)*x5863*x5870))+(((-1.0)*r21*x5861*x5869))+((x5859*x5867)));
evalcond[3]=((((-1.0)*r00*x5865*x5869))+(((-1.0)*r01*x5861*x5869))+(((-1.0)*r02*sj5*x5869))+((x5859*x5866))+(((-1.0)*x5868*x5870)));
evalcond[4]=((1.0)+((x5860*x5868))+(((-1.0)*r01*x5861*x5870))+(((-1.0)*x5866*x5869))+(((-1.0)*r02*x5871))+(((-1.0)*r00*x5865*x5870)));
evalcond[5]=((-1.0)+((x5859*x5862))+(((-1.0)*r10*x5865*x5869))+(((-1.0)*r11*x5861*x5869))+(((-1.0)*x5864*x5870))+(((-1.0)*r12*sj5*x5869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5872=((1.0)*sj6);
CheckValue<IkReal> x5873=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x5872))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x5873.valid){
continue;
}
CheckValue<IkReal> x5874 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x5872)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5873.value)))+(x5874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5875=IKsin(j4);
IkReal x5876=IKcos(j4);
IkReal x5877=(cj5*cj6);
IkReal x5878=(r11*sj6);
IkReal x5879=(cj6*r20);
IkReal x5880=(cj6*r10);
IkReal x5881=(cj5*sj6);
IkReal x5882=(r01*sj6);
IkReal x5883=(r21*sj6);
IkReal x5884=(cj6*r00);
IkReal x5885=((1.0)*x5876);
IkReal x5886=((1.0)*x5875);
IkReal x5887=(sj5*x5886);
evalcond[0]=((((-1.0)*x5883*x5885))+(((-1.0)*r20*x5881*x5886))+(((-1.0)*r22*x5887))+(((-1.0)*r21*x5877*x5886))+((x5876*x5879)));
evalcond[1]=((((-1.0)*r10*x5881*x5886))+(((-1.0)*r11*x5877*x5886))+(((-1.0)*r12*x5887))+((x5876*x5880))+(((-1.0)*x5878*x5885)));
evalcond[2]=(((x5875*x5883))+(((-1.0)*r20*x5881*x5885))+(((-1.0)*x5879*x5886))+(((-1.0)*r22*sj5*x5885))+(((-1.0)*r21*x5877*x5885)));
evalcond[3]=(((x5875*x5882))+(((-1.0)*r02*sj5*x5885))+(((-1.0)*r01*x5877*x5885))+(((-1.0)*x5884*x5886))+(((-1.0)*r00*x5881*x5885)));
evalcond[4]=((1.0)+(((-1.0)*x5882*x5885))+(((-1.0)*r02*x5887))+(((-1.0)*r01*x5877*x5886))+((x5876*x5884))+(((-1.0)*r00*x5881*x5886)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x5885))+(((-1.0)*r10*x5881*x5885))+(((-1.0)*r11*x5877*x5885))+(((-1.0)*x5880*x5886))+((x5875*x5878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5888=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5888.valid){
continue;
}
CheckValue<IkReal> x5889 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5888.value)))+(x5889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5890=IKsin(j4);
IkReal x5891=IKcos(j4);
IkReal x5892=(cj5*cj6);
IkReal x5893=(r11*sj6);
IkReal x5894=(cj6*r20);
IkReal x5895=(cj6*r10);
IkReal x5896=(cj5*sj6);
IkReal x5897=(r01*sj6);
IkReal x5898=(r21*sj6);
IkReal x5899=(cj6*r00);
IkReal x5900=((1.0)*x5891);
IkReal x5901=((1.0)*x5890);
IkReal x5902=(sj5*x5901);
evalcond[0]=((((-1.0)*x5898*x5900))+(((-1.0)*r22*x5902))+(((-1.0)*r20*x5896*x5901))+(((-1.0)*r21*x5892*x5901))+((x5891*x5894)));
evalcond[1]=((((-1.0)*r12*x5902))+(((-1.0)*r11*x5892*x5901))+(((-1.0)*x5893*x5900))+((x5891*x5895))+(((-1.0)*r10*x5896*x5901)));
evalcond[2]=((((-1.0)*x5894*x5901))+(((-1.0)*r20*x5896*x5900))+(((-1.0)*r21*x5892*x5900))+(((-1.0)*r22*sj5*x5900))+((x5890*x5898)));
evalcond[3]=((((-1.0)*r01*x5892*x5900))+(((-1.0)*r02*sj5*x5900))+((x5890*x5897))+(((-1.0)*r00*x5896*x5900))+(((-1.0)*x5899*x5901)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5892*x5901))+(((-1.0)*x5897*x5900))+(((-1.0)*r02*x5902))+(((-1.0)*r00*x5896*x5901))+((x5891*x5899)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x5900))+(((-1.0)*x5895*x5901))+(((-1.0)*r11*x5892*x5900))+((x5890*x5893))+(((-1.0)*r10*x5896*x5900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5903=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5903;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5903);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5904=((1.0)*sj5);
IkReal x5905=(((cj5*r22))+(((-1.0)*r20*sj6*x5904))+(((-1.0)*cj6*r21*x5904)));
j4eval[0]=x5905;
j4eval[1]=IKsign(x5905);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5906=r11*r11;
IkReal x5907=cj5*cj5;
IkReal x5908=cj6*cj6;
IkReal x5909=r10*r10;
IkReal x5910=r12*r12;
IkReal x5911=(r12*sj5);
IkReal x5912=(cj6*r10);
IkReal x5913=((1.0)*x5908);
IkReal x5914=(cj5*cj6*r11);
IkReal x5915=(cj5*r10*sj6);
IkReal x5916=((2.0)*r11*sj6);
IkReal x5917=(x5907*x5909);
IkReal x5918=((((-1.0)*x5907*x5910))+((x5907*x5912*x5916))+((x5908*x5909))+(((-1.0)*x5912*x5916))+(((-1.0)*x5913*x5917))+(((-1.0)*x5906*x5913))+((x5906*x5907*x5908))+x5906+x5917+x5910+(((2.0)*x5911*x5914))+(((2.0)*x5911*x5915)));
j4eval[0]=x5918;
j4eval[1]=IKsign(x5918);
j4eval[2]=((IKabs(((((-1.0)*r11*sj6))+x5912)))+(IKabs((x5915+x5914+x5911))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5919=r11*r11;
IkReal x5920=cj5*cj5;
IkReal x5921=cj6*cj6;
IkReal x5922=r10*r10;
IkReal x5923=r12*r12;
IkReal x5924=(r10*sj6);
IkReal x5925=(r12*sj5);
IkReal x5926=((1.0)*x5921);
IkReal x5927=(cj5*cj6*r11);
IkReal x5928=((2.0)*cj6*r11);
IkReal x5929=(x5920*x5922);
CheckValue<IkReal> x5930=IKPowWithIntegerCheck(IKsign((((x5919*x5920*x5921))+((x5921*x5922))+(((2.0)*x5925*x5927))+(((2.0)*cj5*x5924*x5925))+((x5920*x5924*x5928))+(((-1.0)*x5924*x5928))+(((-1.0)*x5919*x5926))+x5919+x5923+x5929+(((-1.0)*x5920*x5923))+(((-1.0)*x5926*x5929)))),-1);
if(!x5930.valid){
continue;
}
CheckValue<IkReal> x5931 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x5924))+x5925+x5927)),IKFAST_ATAN2_MAGTHRESH);
if(!x5931.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5930.value)))+(x5931.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5932=IKsin(j4);
IkReal x5933=IKcos(j4);
IkReal x5934=(cj5*cj6);
IkReal x5935=(r11*sj6);
IkReal x5936=(cj6*r20);
IkReal x5937=(cj6*r10);
IkReal x5938=(cj5*sj6);
IkReal x5939=(r01*sj6);
IkReal x5940=(r21*sj6);
IkReal x5941=(cj6*r00);
IkReal x5942=((1.0)*x5933);
IkReal x5943=((1.0)*x5932);
IkReal x5944=(sj5*x5943);
evalcond[0]=((((-1.0)*r22*x5944))+((x5933*x5936))+(((-1.0)*r20*x5938*x5943))+(((-1.0)*x5940*x5942))+(((-1.0)*r21*x5934*x5943)));
evalcond[1]=((((-1.0)*r10*x5938*x5943))+(((-1.0)*x5935*x5942))+((x5933*x5937))+(((-1.0)*r12*x5944))+(((-1.0)*r11*x5934*x5943)));
evalcond[2]=(((x5932*x5940))+(((-1.0)*x5936*x5943))+(((-1.0)*r22*sj5*x5942))+(((-1.0)*r20*x5938*x5942))+(((-1.0)*r21*x5934*x5942)));
evalcond[3]=(((x5932*x5939))+(((-1.0)*x5941*x5943))+(((-1.0)*r01*x5934*x5942))+(((-1.0)*r00*x5938*x5942))+(((-1.0)*r02*sj5*x5942)));
evalcond[4]=((-1.0)+((x5933*x5941))+(((-1.0)*r01*x5934*x5943))+(((-1.0)*x5939*x5942))+(((-1.0)*r00*x5938*x5943))+(((-1.0)*r02*x5944)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5938*x5942))+((x5932*x5935))+(((-1.0)*x5937*x5943))+(((-1.0)*r12*sj5*x5942))+(((-1.0)*r11*x5934*x5942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5945=((1.0)*sj5);
CheckValue<IkReal> x5946 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5946.valid){
continue;
}
CheckValue<IkReal> x5947=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x5945))+(((-1.0)*r20*sj6*x5945)))),-1);
if(!x5947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5946.value)+(((1.5707963267949)*(x5947.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5948=IKsin(j4);
IkReal x5949=IKcos(j4);
IkReal x5950=(cj5*cj6);
IkReal x5951=(r11*sj6);
IkReal x5952=(cj6*r20);
IkReal x5953=(cj6*r10);
IkReal x5954=(cj5*sj6);
IkReal x5955=(r01*sj6);
IkReal x5956=(r21*sj6);
IkReal x5957=(cj6*r00);
IkReal x5958=((1.0)*x5949);
IkReal x5959=((1.0)*x5948);
IkReal x5960=(sj5*x5959);
evalcond[0]=((((-1.0)*r20*x5954*x5959))+(((-1.0)*r22*x5960))+((x5949*x5952))+(((-1.0)*x5956*x5958))+(((-1.0)*r21*x5950*x5959)));
evalcond[1]=((((-1.0)*r10*x5954*x5959))+((x5949*x5953))+(((-1.0)*r12*x5960))+(((-1.0)*x5951*x5958))+(((-1.0)*r11*x5950*x5959)));
evalcond[2]=((((-1.0)*r20*x5954*x5958))+((x5948*x5956))+(((-1.0)*x5952*x5959))+(((-1.0)*r22*sj5*x5958))+(((-1.0)*r21*x5950*x5958)));
evalcond[3]=((((-1.0)*r00*x5954*x5958))+((x5948*x5955))+(((-1.0)*r02*sj5*x5958))+(((-1.0)*x5957*x5959))+(((-1.0)*r01*x5950*x5958)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x5954*x5959))+((x5949*x5957))+(((-1.0)*r01*x5950*x5959))+(((-1.0)*x5955*x5958))+(((-1.0)*r02*x5960)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5954*x5958))+((x5948*x5951))+(((-1.0)*r12*sj5*x5958))+(((-1.0)*x5953*x5959))+(((-1.0)*r11*x5950*x5958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5961 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5961.valid){
continue;
}
CheckValue<IkReal> x5962=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5961.value)+(((1.5707963267949)*(x5962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5963=IKsin(j4);
IkReal x5964=IKcos(j4);
IkReal x5965=(cj5*cj6);
IkReal x5966=(r11*sj6);
IkReal x5967=(cj6*r20);
IkReal x5968=(cj6*r10);
IkReal x5969=(cj5*sj6);
IkReal x5970=(r01*sj6);
IkReal x5971=(r21*sj6);
IkReal x5972=(cj6*r00);
IkReal x5973=((1.0)*x5964);
IkReal x5974=((1.0)*x5963);
IkReal x5975=(sj5*x5974);
evalcond[0]=((((-1.0)*r21*x5965*x5974))+(((-1.0)*r20*x5969*x5974))+(((-1.0)*r22*x5975))+((x5964*x5967))+(((-1.0)*x5971*x5973)));
evalcond[1]=((((-1.0)*r10*x5969*x5974))+(((-1.0)*r12*x5975))+((x5964*x5968))+(((-1.0)*r11*x5965*x5974))+(((-1.0)*x5966*x5973)));
evalcond[2]=((((-1.0)*r21*x5965*x5973))+(((-1.0)*r20*x5969*x5973))+(((-1.0)*r22*sj5*x5973))+((x5963*x5971))+(((-1.0)*x5967*x5974)));
evalcond[3]=((((-1.0)*r02*sj5*x5973))+(((-1.0)*r01*x5965*x5973))+(((-1.0)*r00*x5969*x5973))+((x5963*x5970))+(((-1.0)*x5972*x5974)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5975))+(((-1.0)*r01*x5965*x5974))+(((-1.0)*r00*x5969*x5974))+((x5964*x5972))+(((-1.0)*x5970*x5973)));
evalcond[5]=((1.0)+(((-1.0)*r10*x5969*x5973))+((x5963*x5966))+(((-1.0)*r12*sj5*x5973))+(((-1.0)*r11*x5965*x5973))+(((-1.0)*x5968*x5974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5976=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5976;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5977=((1.0)*sj6);
IkReal x5978=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x5977))+((cj5*r02)));
j4eval[0]=x5978;
j4eval[1]=IKsign(x5978);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5977))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5979=cj6*cj6;
IkReal x5980=cj5*cj5;
IkReal x5981=r00*r00;
IkReal x5982=r01*r01;
IkReal x5983=r02*r02;
IkReal x5984=(cj6*r00);
IkReal x5985=(cj5*cj6*r01);
IkReal x5986=((2.0)*r02*sj5);
IkReal x5987=((1.0)*x5979);
IkReal x5988=((2.0)*r01*sj6);
IkReal x5989=(cj5*r00*sj6);
IkReal x5990=(x5980*x5981);
IkReal x5991=(((x5979*x5990))+((x5979*x5982))+(((-1.0)*x5986*x5989))+(((-1.0)*x5982))+(((-1.0)*x5983))+(((-1.0)*x5985*x5986))+(((-1.0)*x5990))+(((-1.0)*x5980*x5984*x5988))+(((-1.0)*x5980*x5982*x5987))+(((-1.0)*x5981*x5987))+((x5980*x5983))+((x5984*x5988)));
j4eval[0]=x5991;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x5984)))+(IKabs((((r02*sj5))+x5989+x5985))));
j4eval[2]=IKsign(x5991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5992=cj6*cj6;
IkReal x5993=cj5*cj5;
IkReal x5994=r00*r00;
IkReal x5995=r01*r01;
IkReal x5996=r02*r02;
IkReal x5997=(cj6*r00);
IkReal x5998=(cj5*cj6*r01);
IkReal x5999=((2.0)*r02*sj5);
IkReal x6000=((1.0)*x5992);
IkReal x6001=((2.0)*r01*sj6);
IkReal x6002=(cj5*r00*sj6);
IkReal x6003=(x5993*x5994);
CheckValue<IkReal> x6004 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x5997)),IkReal((x6002+((r02*sj5))+x5998)),IKFAST_ATAN2_MAGTHRESH);
if(!x6004.valid){
continue;
}
CheckValue<IkReal> x6005=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5993*x5997*x6001))+((x5992*x5995))+(((-1.0)*x5996))+(((-1.0)*x5995))+(((-1.0)*x5998*x5999))+((x5993*x5996))+((x5992*x6003))+(((-1.0)*x5999*x6002))+(((-1.0)*x5993*x5995*x6000))+(((-1.0)*x5994*x6000))+((x5997*x6001))+(((-1.0)*x6003)))),-1);
if(!x6005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6004.value)+(((1.5707963267949)*(x6005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6006=IKsin(j4);
IkReal x6007=IKcos(j4);
IkReal x6008=(cj5*cj6);
IkReal x6009=(r11*sj6);
IkReal x6010=(cj6*r20);
IkReal x6011=(cj6*r10);
IkReal x6012=(cj5*sj6);
IkReal x6013=(r21*sj6);
IkReal x6014=(cj6*r00);
IkReal x6015=(r01*sj6);
IkReal x6016=((1.0)*x6007);
IkReal x6017=((1.0)*x6006);
IkReal x6018=(sj5*x6017);
evalcond[0]=((((-1.0)*r21*x6008*x6017))+(((-1.0)*r22*x6018))+(((-1.0)*x6013*x6016))+(((-1.0)*r20*x6012*x6017))+((x6007*x6010)));
evalcond[1]=((((-1.0)*r02*x6018))+(((-1.0)*r01*x6008*x6017))+(((-1.0)*r00*x6012*x6017))+(((-1.0)*x6015*x6016))+((x6007*x6014)));
evalcond[2]=((((-1.0)*r22*sj5*x6016))+(((-1.0)*r21*x6008*x6016))+((x6006*x6013))+(((-1.0)*x6010*x6017))+(((-1.0)*r20*x6012*x6016)));
evalcond[3]=(((x6006*x6009))+(((-1.0)*r10*x6012*x6016))+(((-1.0)*x6011*x6017))+(((-1.0)*r11*x6008*x6016))+(((-1.0)*r12*sj5*x6016)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x6018))+(((-1.0)*r10*x6012*x6017))+(((-1.0)*r11*x6008*x6017))+(((-1.0)*x6009*x6016))+((x6007*x6011)));
evalcond[5]=((-1.0)+((x6006*x6015))+(((-1.0)*r02*sj5*x6016))+(((-1.0)*r01*x6008*x6016))+(((-1.0)*r00*x6012*x6016))+(((-1.0)*x6014*x6017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6019=((1.0)*sj6);
CheckValue<IkReal> x6020 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6019))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6020.valid){
continue;
}
CheckValue<IkReal> x6021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x6019))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x6021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6020.value)+(((1.5707963267949)*(x6021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6022=IKsin(j4);
IkReal x6023=IKcos(j4);
IkReal x6024=(cj5*cj6);
IkReal x6025=(r11*sj6);
IkReal x6026=(cj6*r20);
IkReal x6027=(cj6*r10);
IkReal x6028=(cj5*sj6);
IkReal x6029=(r21*sj6);
IkReal x6030=(cj6*r00);
IkReal x6031=(r01*sj6);
IkReal x6032=((1.0)*x6023);
IkReal x6033=((1.0)*x6022);
IkReal x6034=(sj5*x6033);
evalcond[0]=((((-1.0)*x6029*x6032))+(((-1.0)*r21*x6024*x6033))+(((-1.0)*r20*x6028*x6033))+((x6023*x6026))+(((-1.0)*r22*x6034)));
evalcond[1]=((((-1.0)*r01*x6024*x6033))+(((-1.0)*x6031*x6032))+((x6023*x6030))+(((-1.0)*r02*x6034))+(((-1.0)*r00*x6028*x6033)));
evalcond[2]=((((-1.0)*r21*x6024*x6032))+(((-1.0)*r20*x6028*x6032))+(((-1.0)*x6026*x6033))+(((-1.0)*r22*sj5*x6032))+((x6022*x6029)));
evalcond[3]=((((-1.0)*r11*x6024*x6032))+(((-1.0)*r12*sj5*x6032))+(((-1.0)*x6027*x6033))+((x6022*x6025))+(((-1.0)*r10*x6028*x6032)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x6034))+((x6023*x6027))+(((-1.0)*r11*x6024*x6033))+(((-1.0)*x6025*x6032))+(((-1.0)*r10*x6028*x6033)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x6024*x6032))+((x6022*x6031))+(((-1.0)*r02*sj5*x6032))+(((-1.0)*x6030*x6033))+(((-1.0)*r00*x6028*x6032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6035=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6035.valid){
continue;
}
CheckValue<IkReal> x6036 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6035.value)))+(x6036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6037=IKsin(j4);
IkReal x6038=IKcos(j4);
IkReal x6039=(cj5*cj6);
IkReal x6040=(r11*sj6);
IkReal x6041=(cj6*r20);
IkReal x6042=(cj6*r10);
IkReal x6043=(cj5*sj6);
IkReal x6044=(r21*sj6);
IkReal x6045=(cj6*r00);
IkReal x6046=(r01*sj6);
IkReal x6047=((1.0)*x6038);
IkReal x6048=((1.0)*x6037);
IkReal x6049=(sj5*x6048);
evalcond[0]=((((-1.0)*r20*x6043*x6048))+(((-1.0)*r21*x6039*x6048))+((x6038*x6041))+(((-1.0)*r22*x6049))+(((-1.0)*x6044*x6047)));
evalcond[1]=((((-1.0)*x6046*x6047))+(((-1.0)*r02*x6049))+(((-1.0)*r00*x6043*x6048))+((x6038*x6045))+(((-1.0)*r01*x6039*x6048)));
evalcond[2]=((((-1.0)*r20*x6043*x6047))+((x6037*x6044))+(((-1.0)*r21*x6039*x6047))+(((-1.0)*r22*sj5*x6047))+(((-1.0)*x6041*x6048)));
evalcond[3]=((((-1.0)*r11*x6039*x6047))+((x6037*x6040))+(((-1.0)*x6042*x6048))+(((-1.0)*r10*x6043*x6047))+(((-1.0)*r12*sj5*x6047)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x6039*x6048))+((x6038*x6042))+(((-1.0)*r10*x6043*x6048))+(((-1.0)*x6040*x6047))+(((-1.0)*r12*x6049)));
evalcond[5]=((-1.0)+((x6037*x6046))+(((-1.0)*r02*sj5*x6047))+(((-1.0)*r00*x6043*x6047))+(((-1.0)*x6045*x6048))+(((-1.0)*r01*x6039*x6047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6050=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6050;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6051=((1.0)*sj5);
IkReal x6052=((((-1.0)*r20*sj6*x6051))+((cj5*r22))+(((-1.0)*cj6*r21*x6051)));
j4eval[0]=x6052;
j4eval[1]=IKsign(x6052);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6053=cj6*cj6;
IkReal x6054=r01*r01;
IkReal x6055=cj5*cj5;
IkReal x6056=r00*r00;
IkReal x6057=r02*r02;
IkReal x6058=(cj6*r00);
IkReal x6059=(r02*sj5);
IkReal x6060=(cj5*cj6*r01);
IkReal x6061=((2.0)*r01*sj6);
IkReal x6062=(cj5*r00*sj6);
IkReal x6063=((1.0)*x6055);
IkReal x6064=(x6053*x6056);
IkReal x6065=(x6053*x6054);
IkReal x6066=((((-1.0)*x6057*x6063))+((x6055*x6056))+x6054+x6057+x6064+((x6055*x6065))+(((2.0)*x6059*x6060))+(((2.0)*x6059*x6062))+(((-1.0)*x6065))+((x6055*x6058*x6061))+(((-1.0)*x6063*x6064))+(((-1.0)*x6058*x6061)));
j4eval[0]=x6066;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x6058)))+(IKabs((x6059+x6060+x6062))));
j4eval[2]=IKsign(x6066);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6067=cj6*cj6;
IkReal x6068=r01*r01;
IkReal x6069=cj5*cj5;
IkReal x6070=r00*r00;
IkReal x6071=r02*r02;
IkReal x6072=(cj6*r00);
IkReal x6073=((2.0)*r01);
IkReal x6074=(cj5*cj6);
IkReal x6075=(r02*sj5);
IkReal x6076=(cj5*r00*sj6);
IkReal x6077=(x6069*x6070);
IkReal x6078=(x6067*x6068);
CheckValue<IkReal> x6079=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6078))+x6077+x6071+x6068+(((-1.0)*x6067*x6077))+(((2.0)*x6075*x6076))+(((-1.0)*x6069*x6071))+((x6073*x6074*x6075))+((sj6*x6069*x6072*x6073))+(((-1.0)*sj6*x6072*x6073))+((x6067*x6070))+((x6069*x6078)))),-1);
if(!x6079.valid){
continue;
}
CheckValue<IkReal> x6080 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6072)),IkReal((((r01*x6074))+x6076+x6075)),IKFAST_ATAN2_MAGTHRESH);
if(!x6080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6079.value)))+(x6080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6081=IKsin(j4);
IkReal x6082=IKcos(j4);
IkReal x6083=(cj5*cj6);
IkReal x6084=(r11*sj6);
IkReal x6085=(cj6*r20);
IkReal x6086=(cj6*r10);
IkReal x6087=(cj5*sj6);
IkReal x6088=(r21*sj6);
IkReal x6089=(cj6*r00);
IkReal x6090=(r01*sj6);
IkReal x6091=((1.0)*x6082);
IkReal x6092=((1.0)*x6081);
IkReal x6093=(sj5*x6092);
evalcond[0]=((((-1.0)*r20*x6087*x6092))+(((-1.0)*r22*x6093))+(((-1.0)*r21*x6083*x6092))+((x6082*x6085))+(((-1.0)*x6088*x6091)));
evalcond[1]=((((-1.0)*x6090*x6091))+(((-1.0)*r01*x6083*x6092))+(((-1.0)*r00*x6087*x6092))+(((-1.0)*r02*x6093))+((x6082*x6089)));
evalcond[2]=((((-1.0)*r20*x6087*x6091))+(((-1.0)*r21*x6083*x6091))+(((-1.0)*r22*sj5*x6091))+((x6081*x6088))+(((-1.0)*x6085*x6092)));
evalcond[3]=((((-1.0)*r12*sj5*x6091))+(((-1.0)*r10*x6087*x6091))+(((-1.0)*r11*x6083*x6091))+((x6081*x6084))+(((-1.0)*x6086*x6092)));
evalcond[4]=((1.0)+(((-1.0)*r10*x6087*x6092))+(((-1.0)*r11*x6083*x6092))+((x6082*x6086))+(((-1.0)*r12*x6093))+(((-1.0)*x6084*x6091)));
evalcond[5]=((1.0)+(((-1.0)*x6089*x6092))+(((-1.0)*r01*x6083*x6091))+(((-1.0)*r00*x6087*x6091))+((x6081*x6090))+(((-1.0)*r02*sj5*x6091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6094=((1.0)*sj5);
CheckValue<IkReal> x6095 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6095.valid){
continue;
}
CheckValue<IkReal> x6096=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x6094))+(((-1.0)*r20*sj6*x6094)))),-1);
if(!x6096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6095.value)+(((1.5707963267949)*(x6096.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6097=IKsin(j4);
IkReal x6098=IKcos(j4);
IkReal x6099=(cj5*cj6);
IkReal x6100=(r11*sj6);
IkReal x6101=(cj6*r20);
IkReal x6102=(cj6*r10);
IkReal x6103=(cj5*sj6);
IkReal x6104=(r21*sj6);
IkReal x6105=(cj6*r00);
IkReal x6106=(r01*sj6);
IkReal x6107=((1.0)*x6098);
IkReal x6108=((1.0)*x6097);
IkReal x6109=(sj5*x6108);
evalcond[0]=((((-1.0)*x6104*x6107))+(((-1.0)*r20*x6103*x6108))+(((-1.0)*r21*x6099*x6108))+(((-1.0)*r22*x6109))+((x6098*x6101)));
evalcond[1]=((((-1.0)*r02*x6109))+(((-1.0)*r01*x6099*x6108))+((x6098*x6105))+(((-1.0)*x6106*x6107))+(((-1.0)*r00*x6103*x6108)));
evalcond[2]=((((-1.0)*r20*x6103*x6107))+(((-1.0)*r21*x6099*x6107))+(((-1.0)*x6101*x6108))+(((-1.0)*r22*sj5*x6107))+((x6097*x6104)));
evalcond[3]=((((-1.0)*r11*x6099*x6107))+(((-1.0)*x6102*x6108))+(((-1.0)*r10*x6103*x6107))+(((-1.0)*r12*sj5*x6107))+((x6097*x6100)));
evalcond[4]=((1.0)+(((-1.0)*r11*x6099*x6108))+(((-1.0)*r10*x6103*x6108))+((x6098*x6102))+(((-1.0)*r12*x6109))+(((-1.0)*x6100*x6107)));
evalcond[5]=((1.0)+(((-1.0)*x6105*x6108))+(((-1.0)*r01*x6099*x6107))+(((-1.0)*r00*x6103*x6107))+(((-1.0)*r02*sj5*x6107))+((x6097*x6106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6110 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6110.valid){
continue;
}
CheckValue<IkReal> x6111=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6110.value)+(((1.5707963267949)*(x6111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6112=IKsin(j4);
IkReal x6113=IKcos(j4);
IkReal x6114=(cj5*cj6);
IkReal x6115=(r11*sj6);
IkReal x6116=(cj6*r20);
IkReal x6117=(cj6*r10);
IkReal x6118=(cj5*sj6);
IkReal x6119=(r21*sj6);
IkReal x6120=(cj6*r00);
IkReal x6121=(r01*sj6);
IkReal x6122=((1.0)*x6113);
IkReal x6123=((1.0)*x6112);
IkReal x6124=(sj5*x6123);
evalcond[0]=(((x6113*x6116))+(((-1.0)*r22*x6124))+(((-1.0)*x6119*x6122))+(((-1.0)*r20*x6118*x6123))+(((-1.0)*r21*x6114*x6123)));
evalcond[1]=((((-1.0)*r02*x6124))+(((-1.0)*x6121*x6122))+(((-1.0)*r00*x6118*x6123))+((x6113*x6120))+(((-1.0)*r01*x6114*x6123)));
evalcond[2]=((((-1.0)*r22*sj5*x6122))+(((-1.0)*r20*x6118*x6122))+((x6112*x6119))+(((-1.0)*x6116*x6123))+(((-1.0)*r21*x6114*x6122)));
evalcond[3]=((((-1.0)*x6117*x6123))+(((-1.0)*r11*x6114*x6122))+((x6112*x6115))+(((-1.0)*r10*x6118*x6122))+(((-1.0)*r12*sj5*x6122)));
evalcond[4]=((1.0)+((x6113*x6117))+(((-1.0)*r11*x6114*x6123))+(((-1.0)*r12*x6124))+(((-1.0)*x6115*x6122))+(((-1.0)*r10*x6118*x6123)));
evalcond[5]=((1.0)+((x6112*x6121))+(((-1.0)*r00*x6118*x6122))+(((-1.0)*r02*sj5*x6122))+(((-1.0)*x6120*x6123))+(((-1.0)*r01*x6114*x6122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6125=cj6*cj6;
IkReal x6126=cj5*cj5;
IkReal x6127=(r22*sj5);
IkReal x6128=(cj0*r20);
IkReal x6129=((1.0)*r21);
IkReal x6130=(cj5*sj6);
IkReal x6131=(r02*r22);
IkReal x6132=(cj5*cj6);
IkReal x6133=(r02*sj5);
IkReal x6134=(cj6*sj6);
IkReal x6135=((1.0)*r20);
IkReal x6136=(r01*x6129);
IkReal x6137=(r00*r20*x6126);
CheckValue<IkReal> x6138 = IKatan2WithCheck(IkReal((((cj6*x6128))+(((-1.0)*cj0*sj6*x6129)))),IkReal((((cj0*r21*x6132))+((x6128*x6130))+((cj0*x6127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6138.valid){
continue;
}
CheckValue<IkReal> x6139=IKPowWithIntegerCheck(IKsign((((x6126*x6131))+(((-1.0)*x6125*x6126*x6136))+(((-1.0)*r01*x6127*x6132))+(((-1.0)*x6129*x6132*x6133))+(((-1.0)*r00*x6126*x6129*x6134))+(((-1.0)*r01*x6126*x6134*x6135))+(((-1.0)*x6136))+(((-1.0)*r00*x6125*x6135))+(((-1.0)*r00*x6127*x6130))+((r00*r21*x6134))+(((-1.0)*x6131))+((r01*r21*x6125))+(((-1.0)*r00*x6126*x6135))+(((-1.0)*x6130*x6133*x6135))+((r01*r20*x6134))+((x6125*x6137)))),-1);
if(!x6139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6138.value)+(((1.5707963267949)*(x6139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6140=IKsin(j4);
IkReal x6141=IKcos(j4);
IkReal x6142=((1.0)*cj0);
IkReal x6143=(cj6*r20);
IkReal x6144=(cj5*sj6);
IkReal x6145=((1.0)*sj6);
IkReal x6146=(r21*sj6);
IkReal x6147=(cj6*r00);
IkReal x6148=((1.0)*cj5*cj6);
IkReal x6149=(r01*x6141);
IkReal x6150=(r11*x6140);
IkReal x6151=((1.0)*x6140);
IkReal x6152=(r11*x6141);
IkReal x6153=(r10*x6141);
IkReal x6154=((1.0)*x6141);
IkReal x6155=(r01*x6140);
IkReal x6156=(sj5*x6151);
evalcond[0]=((((-1.0)*r22*x6156))+(((-1.0)*r21*x6140*x6148))+(((-1.0)*r21*x6141*x6145))+(((-1.0)*r20*x6144*x6151))+((x6141*x6143)));
evalcond[1]=((((-1.0)*r21*x6141*x6148))+((x6140*x6146))+(((-1.0)*r20*x6144*x6154))+(((-1.0)*x6143*x6151))+(((-1.0)*r22*sj5*x6154)));
evalcond[2]=((((-1.0)*r02*x6156))+(((-1.0)*x6145*x6149))+sj0+(((-1.0)*r00*x6144*x6151))+(((-1.0)*x6148*x6155))+((x6141*x6147)));
evalcond[3]=((((-1.0)*x6142))+(((-1.0)*r10*x6144*x6151))+(((-1.0)*r12*x6156))+(((-1.0)*x6145*x6152))+(((-1.0)*x6148*x6150))+((cj6*x6153)));
evalcond[4]=((((-1.0)*x6142))+(((-1.0)*r00*x6144*x6154))+(((-1.0)*x6147*x6151))+(((-1.0)*x6148*x6149))+((sj6*x6155))+(((-1.0)*r02*sj5*x6154)));
evalcond[5]=((((-1.0)*sj0))+((sj6*x6150))+(((-1.0)*r12*sj5*x6154))+(((-1.0)*x6144*x6153))+(((-1.0)*cj6*r10*x6151))+(((-1.0)*x6148*x6152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6157=(cj0*sj6);
IkReal x6158=((1.0)*sj5);
IkReal x6159=(cj0*cj6);
CheckValue<IkReal> x6160 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6157))+((r20*x6159)))),IkReal((((cj5*r20*x6157))+((cj5*r21*x6159))+((cj0*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6160.valid){
continue;
}
CheckValue<IkReal> x6161=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x6158))+(((-1.0)*r00*sj6*x6158))+((cj5*r02)))),-1);
if(!x6161.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6160.value)+(((1.5707963267949)*(x6161.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6162=IKsin(j4);
IkReal x6163=IKcos(j4);
IkReal x6164=((1.0)*cj0);
IkReal x6165=(cj6*r20);
IkReal x6166=(cj5*sj6);
IkReal x6167=((1.0)*sj6);
IkReal x6168=(r21*sj6);
IkReal x6169=(cj6*r00);
IkReal x6170=((1.0)*cj5*cj6);
IkReal x6171=(r01*x6163);
IkReal x6172=(r11*x6162);
IkReal x6173=((1.0)*x6162);
IkReal x6174=(r11*x6163);
IkReal x6175=(r10*x6163);
IkReal x6176=((1.0)*x6163);
IkReal x6177=(r01*x6162);
IkReal x6178=(sj5*x6173);
evalcond[0]=((((-1.0)*r21*x6162*x6170))+(((-1.0)*r20*x6166*x6173))+(((-1.0)*r21*x6163*x6167))+((x6163*x6165))+(((-1.0)*r22*x6178)));
evalcond[1]=((((-1.0)*r20*x6166*x6176))+(((-1.0)*r22*sj5*x6176))+((x6162*x6168))+(((-1.0)*r21*x6163*x6170))+(((-1.0)*x6165*x6173)));
evalcond[2]=(sj0+(((-1.0)*x6167*x6171))+(((-1.0)*r00*x6166*x6173))+(((-1.0)*x6170*x6177))+((x6163*x6169))+(((-1.0)*r02*x6178)));
evalcond[3]=(((cj6*x6175))+(((-1.0)*x6167*x6174))+(((-1.0)*x6164))+(((-1.0)*r12*x6178))+(((-1.0)*x6170*x6172))+(((-1.0)*r10*x6166*x6173)));
evalcond[4]=((((-1.0)*r02*sj5*x6176))+(((-1.0)*r00*x6166*x6176))+(((-1.0)*x6164))+(((-1.0)*x6170*x6171))+((sj6*x6177))+(((-1.0)*x6169*x6173)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r12*sj5*x6176))+(((-1.0)*cj6*r10*x6173))+(((-1.0)*x6170*x6174))+((sj6*x6172))+(((-1.0)*x6166*x6175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6179=(cj5*sj0);
IkReal x6180=((1.0)*sj5);
CheckValue<IkReal> x6181=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x6180))+(((-1.0)*r10*sj6*x6180)))),-1);
if(!x6181.valid){
continue;
}
CheckValue<IkReal> x6182 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((cj6*r21*x6179))+((r22*sj0*sj5))+((r20*sj6*x6179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6181.value)))+(x6182.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6183=IKsin(j4);
IkReal x6184=IKcos(j4);
IkReal x6185=((1.0)*cj0);
IkReal x6186=(cj6*r20);
IkReal x6187=(cj5*sj6);
IkReal x6188=((1.0)*sj6);
IkReal x6189=(r21*sj6);
IkReal x6190=(cj6*r00);
IkReal x6191=((1.0)*cj5*cj6);
IkReal x6192=(r01*x6184);
IkReal x6193=(r11*x6183);
IkReal x6194=((1.0)*x6183);
IkReal x6195=(r11*x6184);
IkReal x6196=(r10*x6184);
IkReal x6197=((1.0)*x6184);
IkReal x6198=(r01*x6183);
IkReal x6199=(sj5*x6194);
evalcond[0]=(((x6184*x6186))+(((-1.0)*r21*x6183*x6191))+(((-1.0)*r20*x6187*x6194))+(((-1.0)*r21*x6184*x6188))+(((-1.0)*r22*x6199)));
evalcond[1]=((((-1.0)*x6186*x6194))+(((-1.0)*r20*x6187*x6197))+(((-1.0)*r22*sj5*x6197))+((x6183*x6189))+(((-1.0)*r21*x6184*x6191)));
evalcond[2]=(sj0+(((-1.0)*x6191*x6198))+((x6184*x6190))+(((-1.0)*x6188*x6192))+(((-1.0)*r02*x6199))+(((-1.0)*r00*x6187*x6194)));
evalcond[3]=(((cj6*x6196))+(((-1.0)*r12*x6199))+(((-1.0)*x6191*x6193))+(((-1.0)*r10*x6187*x6194))+(((-1.0)*x6185))+(((-1.0)*x6188*x6195)));
evalcond[4]=((((-1.0)*x6191*x6192))+(((-1.0)*x6190*x6194))+((sj6*x6198))+(((-1.0)*x6185))+(((-1.0)*r02*sj5*x6197))+(((-1.0)*r00*x6187*x6197)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x6194))+(((-1.0)*x6191*x6195))+(((-1.0)*r12*sj5*x6197))+((sj6*x6193))+(((-1.0)*x6187*x6196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6200=(cj0*sj6);
IkReal x6201=(cj0*cj6);
IkReal x6202=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6202;
j4eval[1]=((IKabs((((cj5*r20*x6200))+((cj0*r22*sj5))+((cj5*r21*x6201)))))+(IKabs(((((-1.0)*r21*x6200))+((r20*x6201))))));
j4eval[2]=IKsign(x6202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6203=cj5*cj5;
IkReal x6204=cj6*cj6;
IkReal x6205=(r00*r20);
IkReal x6206=(r02*r22);
IkReal x6207=(r22*sj5);
IkReal x6208=(cj6*r21);
IkReal x6209=(r00*sj6);
IkReal x6210=(r20*sj6);
IkReal x6211=(cj6*r01);
IkReal x6212=(cj0*cj5);
IkReal x6213=((1.0)*x6203);
IkReal x6214=(cj5*r02*sj5);
IkReal x6215=(r01*r21*x6204);
IkReal x6216=(x6206+(((-1.0)*x6206*x6213))+(((-1.0)*x6210*x6211))+(((-1.0)*x6204*x6205*x6213))+((x6210*x6214))+((x6203*x6210*x6211))+((r01*r21))+((x6203*x6208*x6209))+(((-1.0)*x6215))+((x6208*x6214))+((x6203*x6205))+(((-1.0)*x6208*x6209))+((x6204*x6205))+((cj5*x6207*x6209))+((x6203*x6215))+((cj5*x6207*x6211)));
j4eval[0]=x6216;
j4eval[1]=IKsign(x6216);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x6210*x6212))+((x6208*x6212))+((cj0*x6207))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6217=cj6*cj6;
IkReal x6218=cj5*cj5;
IkReal x6219=(r12*sj5);
IkReal x6220=(r22*sj5);
IkReal x6221=((1.0)*r11);
IkReal x6222=(r20*sj0);
IkReal x6223=(r10*r20);
IkReal x6224=(cj5*sj6);
IkReal x6225=(cj6*r10);
IkReal x6226=(r12*r22);
IkReal x6227=(cj5*cj6*r21);
IkReal x6228=(r21*x6217);
IkReal x6229=(cj6*r20*sj6);
IkReal x6230=(r11*x6218);
IkReal x6231=((1.0)*r21*sj6);
IkReal x6232=((1.0)*x6218);
IkReal x6233=(x6226+(((-1.0)*x6225*x6231))+(((-1.0)*x6217*x6223*x6232))+(((-1.0)*x6226*x6232))+((r11*r21))+((x6219*x6227))+((x6228*x6230))+((x6229*x6230))+((x6217*x6223))+((cj5*cj6*r11*x6220))+((r20*x6219*x6224))+((r10*x6220*x6224))+((x6218*x6223))+(((-1.0)*x6221*x6229))+(((-1.0)*x6221*x6228))+((r21*sj6*x6218*x6225)));
j4eval[0]=x6233;
j4eval[1]=IKsign(x6233);
j4eval[2]=((IKabs((((x6222*x6224))+((sj0*x6220))+((sj0*x6227)))))+(IKabs((((cj6*x6222))+(((-1.0)*sj0*x6231))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6234=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6234;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6235=((1.0)*sj5);
IkReal x6236=((((-1.0)*r20*sj6*x6235))+(((-1.0)*cj6*r21*x6235))+((cj5*r22)));
j4eval[0]=x6236;
j4eval[1]=IKsign(x6236);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6237=cj6*cj6;
IkReal x6238=r01*r01;
IkReal x6239=cj5*cj5;
IkReal x6240=r00*r00;
IkReal x6241=r02*r02;
IkReal x6242=(cj6*r00);
IkReal x6243=(r02*sj5);
IkReal x6244=(cj5*cj6*r01);
IkReal x6245=((2.0)*r01*sj6);
IkReal x6246=(cj5*r00*sj6);
IkReal x6247=((1.0)*x6239);
IkReal x6248=(x6237*x6240);
IkReal x6249=(x6237*x6238);
IkReal x6250=((((-1.0)*x6242*x6245))+x6248+x6241+x6238+(((2.0)*x6243*x6246))+(((2.0)*x6243*x6244))+(((-1.0)*x6249))+((x6239*x6242*x6245))+((x6239*x6240))+((x6239*x6249))+(((-1.0)*x6241*x6247))+(((-1.0)*x6247*x6248)));
j4eval[0]=x6250;
j4eval[1]=((IKabs((x6242+(((-1.0)*r01*sj6)))))+(IKabs((x6243+x6244+x6246))));
j4eval[2]=IKsign(x6250);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6251=cj6*cj6;
IkReal x6252=r01*r01;
IkReal x6253=cj5*cj5;
IkReal x6254=r00*r00;
IkReal x6255=r02*r02;
IkReal x6256=(cj6*r00);
IkReal x6257=((2.0)*r01);
IkReal x6258=(cj5*cj6);
IkReal x6259=(r02*sj5);
IkReal x6260=(cj5*r00*sj6);
IkReal x6261=(x6253*x6254);
IkReal x6262=(x6251*x6252);
CheckValue<IkReal> x6263=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6251*x6261))+x6252+x6255+x6261+(((2.0)*x6259*x6260))+((x6253*x6262))+((x6251*x6254))+(((-1.0)*x6262))+(((-1.0)*sj6*x6256*x6257))+((x6257*x6258*x6259))+(((-1.0)*x6253*x6255))+((sj6*x6253*x6256*x6257)))),-1);
if(!x6263.valid){
continue;
}
CheckValue<IkReal> x6264 = IKatan2WithCheck(IkReal((x6256+(((-1.0)*r01*sj6)))),IkReal((x6259+x6260+((r01*x6258)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6263.value)))+(x6264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6265=IKsin(j4);
IkReal x6266=IKcos(j4);
IkReal x6267=(cj5*cj6);
IkReal x6268=(r11*sj6);
IkReal x6269=(cj6*r20);
IkReal x6270=(cj6*r10);
IkReal x6271=(cj5*sj6);
IkReal x6272=(r21*sj6);
IkReal x6273=(cj6*r00);
IkReal x6274=(r01*sj6);
IkReal x6275=((1.0)*x6266);
IkReal x6276=((1.0)*x6265);
IkReal x6277=(sj5*x6276);
evalcond[0]=((((-1.0)*r20*x6271*x6276))+(((-1.0)*x6272*x6275))+(((-1.0)*r21*x6267*x6276))+((x6266*x6269))+(((-1.0)*r22*x6277)));
evalcond[1]=((((-1.0)*r00*x6271*x6276))+(((-1.0)*x6274*x6275))+((x6266*x6273))+(((-1.0)*r02*x6277))+(((-1.0)*r01*x6267*x6276)));
evalcond[2]=((((-1.0)*r20*x6271*x6275))+(((-1.0)*r22*sj5*x6275))+(((-1.0)*r21*x6267*x6275))+(((-1.0)*x6269*x6276))+((x6265*x6272)));
evalcond[3]=((((-1.0)*r10*x6271*x6275))+(((-1.0)*x6270*x6276))+(((-1.0)*r12*sj5*x6275))+((x6265*x6268))+(((-1.0)*r11*x6267*x6275)));
evalcond[4]=((1.0)+(((-1.0)*r10*x6271*x6276))+((x6266*x6270))+(((-1.0)*x6268*x6275))+(((-1.0)*r12*x6277))+(((-1.0)*r11*x6267*x6276)));
evalcond[5]=((1.0)+(((-1.0)*r00*x6271*x6275))+(((-1.0)*x6273*x6276))+(((-1.0)*r02*sj5*x6275))+((x6265*x6274))+(((-1.0)*r01*x6267*x6275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6278=((1.0)*sj5);
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
CheckValue<IkReal> x6280=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x6278))+(((-1.0)*cj6*r21*x6278)))),-1);
if(!x6280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6279.value)+(((1.5707963267949)*(x6280.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6281=IKsin(j4);
IkReal x6282=IKcos(j4);
IkReal x6283=(cj5*cj6);
IkReal x6284=(r11*sj6);
IkReal x6285=(cj6*r20);
IkReal x6286=(cj6*r10);
IkReal x6287=(cj5*sj6);
IkReal x6288=(r21*sj6);
IkReal x6289=(cj6*r00);
IkReal x6290=(r01*sj6);
IkReal x6291=((1.0)*x6282);
IkReal x6292=((1.0)*x6281);
IkReal x6293=(sj5*x6292);
evalcond[0]=((((-1.0)*r22*x6293))+(((-1.0)*x6288*x6291))+((x6282*x6285))+(((-1.0)*r20*x6287*x6292))+(((-1.0)*r21*x6283*x6292)));
evalcond[1]=((((-1.0)*r02*x6293))+(((-1.0)*r00*x6287*x6292))+((x6282*x6289))+(((-1.0)*x6290*x6291))+(((-1.0)*r01*x6283*x6292)));
evalcond[2]=((((-1.0)*r22*sj5*x6291))+(((-1.0)*r20*x6287*x6291))+((x6281*x6288))+(((-1.0)*r21*x6283*x6291))+(((-1.0)*x6285*x6292)));
evalcond[3]=((((-1.0)*r10*x6287*x6291))+(((-1.0)*r12*sj5*x6291))+(((-1.0)*r11*x6283*x6291))+(((-1.0)*x6286*x6292))+((x6281*x6284)));
evalcond[4]=((1.0)+(((-1.0)*x6284*x6291))+(((-1.0)*r10*x6287*x6292))+(((-1.0)*r11*x6283*x6292))+(((-1.0)*r12*x6293))+((x6282*x6286)));
evalcond[5]=((1.0)+(((-1.0)*r00*x6287*x6291))+(((-1.0)*x6289*x6292))+(((-1.0)*r02*sj5*x6291))+((x6281*x6290))+(((-1.0)*r01*x6283*x6291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6294 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6294.valid){
continue;
}
CheckValue<IkReal> x6295=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6294.value)+(((1.5707963267949)*(x6295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6296=IKsin(j4);
IkReal x6297=IKcos(j4);
IkReal x6298=(cj5*cj6);
IkReal x6299=(r11*sj6);
IkReal x6300=(cj6*r20);
IkReal x6301=(cj6*r10);
IkReal x6302=(cj5*sj6);
IkReal x6303=(r21*sj6);
IkReal x6304=(cj6*r00);
IkReal x6305=(r01*sj6);
IkReal x6306=((1.0)*x6297);
IkReal x6307=((1.0)*x6296);
IkReal x6308=(sj5*x6307);
evalcond[0]=((((-1.0)*r20*x6302*x6307))+(((-1.0)*r21*x6298*x6307))+(((-1.0)*x6303*x6306))+((x6297*x6300))+(((-1.0)*r22*x6308)));
evalcond[1]=((((-1.0)*x6305*x6306))+(((-1.0)*r00*x6302*x6307))+(((-1.0)*r02*x6308))+(((-1.0)*r01*x6298*x6307))+((x6297*x6304)));
evalcond[2]=((((-1.0)*x6300*x6307))+(((-1.0)*r20*x6302*x6306))+(((-1.0)*r21*x6298*x6306))+((x6296*x6303))+(((-1.0)*r22*sj5*x6306)));
evalcond[3]=((((-1.0)*r11*x6298*x6306))+(((-1.0)*r12*sj5*x6306))+((x6296*x6299))+(((-1.0)*x6301*x6307))+(((-1.0)*r10*x6302*x6306)));
evalcond[4]=((1.0)+(((-1.0)*r11*x6298*x6307))+(((-1.0)*r12*x6308))+(((-1.0)*x6299*x6306))+((x6297*x6301))+(((-1.0)*r10*x6302*x6307)));
evalcond[5]=((1.0)+(((-1.0)*r00*x6302*x6306))+(((-1.0)*r01*x6298*x6306))+(((-1.0)*x6304*x6307))+(((-1.0)*r02*sj5*x6306))+((x6296*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6309=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6309;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x6309);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6310=((1.0)*sj6);
IkReal x6311=((((-1.0)*r00*sj5*x6310))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x6311;
j4eval[1]=IKsign(x6311);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x6310))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6312=cj6*cj6;
IkReal x6313=cj5*cj5;
IkReal x6314=r00*r00;
IkReal x6315=r01*r01;
IkReal x6316=r02*r02;
IkReal x6317=(cj6*r00);
IkReal x6318=(cj5*cj6*r01);
IkReal x6319=((2.0)*r02*sj5);
IkReal x6320=((1.0)*x6312);
IkReal x6321=((2.0)*r01*sj6);
IkReal x6322=(cj5*r00*sj6);
IkReal x6323=(x6313*x6314);
IkReal x6324=((((-1.0)*x6323))+((x6313*x6316))+(((-1.0)*x6313*x6317*x6321))+((x6312*x6315))+((x6317*x6321))+(((-1.0)*x6315))+(((-1.0)*x6316))+(((-1.0)*x6314*x6320))+((x6312*x6323))+(((-1.0)*x6313*x6315*x6320))+(((-1.0)*x6318*x6319))+(((-1.0)*x6319*x6322)));
j4eval[0]=x6324;
j4eval[1]=((IKabs((x6318+x6322+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x6317))));
j4eval[2]=IKsign(x6324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6325=cj6*cj6;
IkReal x6326=cj5*cj5;
IkReal x6327=r00*r00;
IkReal x6328=r01*r01;
IkReal x6329=r02*r02;
IkReal x6330=(cj6*r00);
IkReal x6331=(cj5*cj6*r01);
IkReal x6332=((2.0)*r02*sj5);
IkReal x6333=((1.0)*x6325);
IkReal x6334=((2.0)*r01*sj6);
IkReal x6335=(cj5*r00*sj6);
IkReal x6336=(x6326*x6327);
CheckValue<IkReal> x6337 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6330)),IkReal((x6335+x6331+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6337.valid){
continue;
}
CheckValue<IkReal> x6338=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6329))+(((-1.0)*x6328))+(((-1.0)*x6327*x6333))+((x6326*x6329))+((x6325*x6328))+((x6330*x6334))+((x6325*x6336))+(((-1.0)*x6326*x6328*x6333))+(((-1.0)*x6331*x6332))+(((-1.0)*x6326*x6330*x6334))+(((-1.0)*x6336))+(((-1.0)*x6332*x6335)))),-1);
if(!x6338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6337.value)+(((1.5707963267949)*(x6338.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6339=IKsin(j4);
IkReal x6340=IKcos(j4);
IkReal x6341=(cj5*cj6);
IkReal x6342=(r11*sj6);
IkReal x6343=(cj6*r20);
IkReal x6344=(cj6*r10);
IkReal x6345=(cj5*sj6);
IkReal x6346=(r21*sj6);
IkReal x6347=(cj6*r00);
IkReal x6348=(r01*sj6);
IkReal x6349=((1.0)*x6340);
IkReal x6350=((1.0)*x6339);
IkReal x6351=(sj5*x6350);
evalcond[0]=((((-1.0)*r20*x6345*x6350))+(((-1.0)*x6346*x6349))+(((-1.0)*r21*x6341*x6350))+(((-1.0)*r22*x6351))+((x6340*x6343)));
evalcond[1]=((((-1.0)*r01*x6341*x6350))+(((-1.0)*r00*x6345*x6350))+(((-1.0)*r02*x6351))+((x6340*x6347))+(((-1.0)*x6348*x6349)));
evalcond[2]=((((-1.0)*x6343*x6350))+(((-1.0)*r22*sj5*x6349))+((x6339*x6346))+(((-1.0)*r21*x6341*x6349))+(((-1.0)*r20*x6345*x6349)));
evalcond[3]=((((-1.0)*r11*x6341*x6349))+(((-1.0)*x6344*x6350))+(((-1.0)*r12*sj5*x6349))+((x6339*x6342))+(((-1.0)*r10*x6345*x6349)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x6341*x6350))+(((-1.0)*x6342*x6349))+(((-1.0)*r12*x6351))+(((-1.0)*r10*x6345*x6350))+((x6340*x6344)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x6341*x6349))+(((-1.0)*x6347*x6350))+((x6339*x6348))+(((-1.0)*r00*x6345*x6349))+(((-1.0)*r02*sj5*x6349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6352=((1.0)*sj6);
CheckValue<IkReal> x6353=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x6352))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x6353.valid){
continue;
}
CheckValue<IkReal> x6354 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6352))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6353.value)))+(x6354.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6355=IKsin(j4);
IkReal x6356=IKcos(j4);
IkReal x6357=(cj5*cj6);
IkReal x6358=(r11*sj6);
IkReal x6359=(cj6*r20);
IkReal x6360=(cj6*r10);
IkReal x6361=(cj5*sj6);
IkReal x6362=(r21*sj6);
IkReal x6363=(cj6*r00);
IkReal x6364=(r01*sj6);
IkReal x6365=((1.0)*x6356);
IkReal x6366=((1.0)*x6355);
IkReal x6367=(sj5*x6366);
evalcond[0]=((((-1.0)*x6362*x6365))+(((-1.0)*r20*x6361*x6366))+((x6356*x6359))+(((-1.0)*r22*x6367))+(((-1.0)*r21*x6357*x6366)));
evalcond[1]=((((-1.0)*r02*x6367))+(((-1.0)*r01*x6357*x6366))+((x6356*x6363))+(((-1.0)*x6364*x6365))+(((-1.0)*r00*x6361*x6366)));
evalcond[2]=((((-1.0)*r20*x6361*x6365))+(((-1.0)*r22*sj5*x6365))+(((-1.0)*x6359*x6366))+((x6355*x6362))+(((-1.0)*r21*x6357*x6365)));
evalcond[3]=((((-1.0)*r10*x6361*x6365))+(((-1.0)*x6360*x6366))+(((-1.0)*r11*x6357*x6365))+((x6355*x6358))+(((-1.0)*r12*sj5*x6365)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x6361*x6366))+(((-1.0)*r11*x6357*x6366))+((x6356*x6360))+(((-1.0)*r12*x6367))+(((-1.0)*x6358*x6365)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x6365))+(((-1.0)*r01*x6357*x6365))+(((-1.0)*x6363*x6366))+(((-1.0)*r00*x6361*x6365))+((x6355*x6364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6368=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6368.valid){
continue;
}
CheckValue<IkReal> x6369 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6369.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6368.value)))+(x6369.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6370=IKsin(j4);
IkReal x6371=IKcos(j4);
IkReal x6372=(cj5*cj6);
IkReal x6373=(r11*sj6);
IkReal x6374=(cj6*r20);
IkReal x6375=(cj6*r10);
IkReal x6376=(cj5*sj6);
IkReal x6377=(r21*sj6);
IkReal x6378=(cj6*r00);
IkReal x6379=(r01*sj6);
IkReal x6380=((1.0)*x6371);
IkReal x6381=((1.0)*x6370);
IkReal x6382=(sj5*x6381);
evalcond[0]=((((-1.0)*x6377*x6380))+(((-1.0)*r22*x6382))+(((-1.0)*r21*x6372*x6381))+((x6371*x6374))+(((-1.0)*r20*x6376*x6381)));
evalcond[1]=((((-1.0)*x6379*x6380))+(((-1.0)*r01*x6372*x6381))+(((-1.0)*r00*x6376*x6381))+((x6371*x6378))+(((-1.0)*r02*x6382)));
evalcond[2]=((((-1.0)*r22*sj5*x6380))+(((-1.0)*x6374*x6381))+((x6370*x6377))+(((-1.0)*r21*x6372*x6380))+(((-1.0)*r20*x6376*x6380)));
evalcond[3]=((((-1.0)*x6375*x6381))+((x6370*x6373))+(((-1.0)*r12*sj5*x6380))+(((-1.0)*r11*x6372*x6380))+(((-1.0)*r10*x6376*x6380)));
evalcond[4]=((-1.0)+(((-1.0)*x6373*x6380))+(((-1.0)*r12*x6382))+((x6371*x6375))+(((-1.0)*r11*x6372*x6381))+(((-1.0)*r10*x6376*x6381)));
evalcond[5]=((-1.0)+(((-1.0)*x6378*x6381))+(((-1.0)*r01*x6372*x6380))+((x6370*x6379))+(((-1.0)*r00*x6376*x6380))+(((-1.0)*r02*sj5*x6380)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6383=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x6383;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6384=((1.0)*sj5);
IkReal x6385=(((cj5*r22))+(((-1.0)*r20*sj6*x6384))+(((-1.0)*cj6*r21*x6384)));
j4eval[0]=x6385;
j4eval[1]=IKsign(x6385);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6386=r11*r11;
IkReal x6387=cj5*cj5;
IkReal x6388=cj6*cj6;
IkReal x6389=r10*r10;
IkReal x6390=r12*r12;
IkReal x6391=(r12*sj5);
IkReal x6392=(cj6*r10);
IkReal x6393=((1.0)*x6388);
IkReal x6394=(cj5*cj6*r11);
IkReal x6395=(cj5*r10*sj6);
IkReal x6396=((2.0)*r11*sj6);
IkReal x6397=(x6387*x6389);
IkReal x6398=(x6390+x6397+x6386+(((2.0)*x6391*x6395))+(((2.0)*x6391*x6394))+(((-1.0)*x6386*x6393))+((x6388*x6389))+(((-1.0)*x6392*x6396))+(((-1.0)*x6387*x6390))+((x6387*x6392*x6396))+(((-1.0)*x6393*x6397))+((x6386*x6387*x6388)));
j4eval[0]=x6398;
j4eval[1]=IKsign(x6398);
j4eval[2]=((IKabs((x6391+x6394+x6395)))+(IKabs((x6392+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6399=r11*r11;
IkReal x6400=cj5*cj5;
IkReal x6401=cj6*cj6;
IkReal x6402=r10*r10;
IkReal x6403=r12*r12;
IkReal x6404=(r10*sj6);
IkReal x6405=(r12*sj5);
IkReal x6406=((1.0)*x6401);
IkReal x6407=(cj5*cj6*r11);
IkReal x6408=((2.0)*cj6*r11);
IkReal x6409=(x6400*x6402);
CheckValue<IkReal> x6410 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((x6407+x6405+((cj5*x6404)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6410.valid){
continue;
}
CheckValue<IkReal> x6411=IKPowWithIntegerCheck(IKsign((x6399+(((2.0)*cj5*x6404*x6405))+(((-1.0)*x6406*x6409))+(((-1.0)*x6400*x6403))+x6403+x6409+((x6400*x6404*x6408))+((x6399*x6400*x6401))+(((2.0)*x6405*x6407))+((x6401*x6402))+(((-1.0)*x6404*x6408))+(((-1.0)*x6399*x6406)))),-1);
if(!x6411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6410.value)+(((1.5707963267949)*(x6411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6412=IKsin(j4);
IkReal x6413=IKcos(j4);
IkReal x6414=(cj5*cj6);
IkReal x6415=(r11*sj6);
IkReal x6416=(cj6*r20);
IkReal x6417=(cj6*r10);
IkReal x6418=(cj5*sj6);
IkReal x6419=(r01*sj6);
IkReal x6420=(r21*sj6);
IkReal x6421=(cj6*r00);
IkReal x6422=((1.0)*x6413);
IkReal x6423=((1.0)*x6412);
IkReal x6424=(sj5*x6423);
evalcond[0]=((((-1.0)*r22*x6424))+(((-1.0)*r20*x6418*x6423))+((x6413*x6416))+(((-1.0)*r21*x6414*x6423))+(((-1.0)*x6420*x6422)));
evalcond[1]=((((-1.0)*r11*x6414*x6423))+(((-1.0)*x6415*x6422))+((x6413*x6417))+(((-1.0)*r10*x6418*x6423))+(((-1.0)*r12*x6424)));
evalcond[2]=((((-1.0)*r22*sj5*x6422))+(((-1.0)*r20*x6418*x6422))+((x6412*x6420))+(((-1.0)*x6416*x6423))+(((-1.0)*r21*x6414*x6422)));
evalcond[3]=((((-1.0)*x6421*x6423))+(((-1.0)*r01*x6414*x6422))+(((-1.0)*r02*sj5*x6422))+((x6412*x6419))+(((-1.0)*r00*x6418*x6422)));
evalcond[4]=((-1.0)+(((-1.0)*x6419*x6422))+(((-1.0)*r01*x6414*x6423))+((x6413*x6421))+(((-1.0)*r02*x6424))+(((-1.0)*r00*x6418*x6423)));
evalcond[5]=((1.0)+(((-1.0)*x6417*x6423))+(((-1.0)*r11*x6414*x6422))+(((-1.0)*r10*x6418*x6422))+(((-1.0)*r12*sj5*x6422))+((x6412*x6415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6425=((1.0)*sj5);
CheckValue<IkReal> x6426 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6426.valid){
continue;
}
CheckValue<IkReal> x6427=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x6425))+(((-1.0)*cj6*r21*x6425)))),-1);
if(!x6427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6426.value)+(((1.5707963267949)*(x6427.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6428=IKsin(j4);
IkReal x6429=IKcos(j4);
IkReal x6430=(cj5*cj6);
IkReal x6431=(r11*sj6);
IkReal x6432=(cj6*r20);
IkReal x6433=(cj6*r10);
IkReal x6434=(cj5*sj6);
IkReal x6435=(r01*sj6);
IkReal x6436=(r21*sj6);
IkReal x6437=(cj6*r00);
IkReal x6438=((1.0)*x6429);
IkReal x6439=((1.0)*x6428);
IkReal x6440=(sj5*x6439);
evalcond[0]=(((x6429*x6432))+(((-1.0)*r20*x6434*x6439))+(((-1.0)*r21*x6430*x6439))+(((-1.0)*x6436*x6438))+(((-1.0)*r22*x6440)));
evalcond[1]=(((x6429*x6433))+(((-1.0)*x6431*x6438))+(((-1.0)*r11*x6430*x6439))+(((-1.0)*r12*x6440))+(((-1.0)*r10*x6434*x6439)));
evalcond[2]=((((-1.0)*r20*x6434*x6438))+(((-1.0)*r21*x6430*x6438))+(((-1.0)*x6432*x6439))+(((-1.0)*r22*sj5*x6438))+((x6428*x6436)));
evalcond[3]=((((-1.0)*r01*x6430*x6438))+(((-1.0)*r00*x6434*x6438))+(((-1.0)*x6437*x6439))+(((-1.0)*r02*sj5*x6438))+((x6428*x6435)));
evalcond[4]=((-1.0)+((x6429*x6437))+(((-1.0)*r01*x6430*x6439))+(((-1.0)*x6435*x6438))+(((-1.0)*r02*x6440))+(((-1.0)*r00*x6434*x6439)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x6438))+(((-1.0)*x6433*x6439))+(((-1.0)*r11*x6430*x6438))+(((-1.0)*r10*x6434*x6438))+((x6428*x6431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6441 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6441.valid){
continue;
}
CheckValue<IkReal> x6442=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x6442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6441.value)+(((1.5707963267949)*(x6442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6443=IKsin(j4);
IkReal x6444=IKcos(j4);
IkReal x6445=(cj5*cj6);
IkReal x6446=(r11*sj6);
IkReal x6447=(cj6*r20);
IkReal x6448=(cj6*r10);
IkReal x6449=(cj5*sj6);
IkReal x6450=(r01*sj6);
IkReal x6451=(r21*sj6);
IkReal x6452=(cj6*r00);
IkReal x6453=((1.0)*x6444);
IkReal x6454=((1.0)*x6443);
IkReal x6455=(sj5*x6454);
evalcond[0]=((((-1.0)*r20*x6449*x6454))+(((-1.0)*x6451*x6453))+(((-1.0)*r21*x6445*x6454))+((x6444*x6447))+(((-1.0)*r22*x6455)));
evalcond[1]=((((-1.0)*x6446*x6453))+((x6444*x6448))+(((-1.0)*r12*x6455))+(((-1.0)*r11*x6445*x6454))+(((-1.0)*r10*x6449*x6454)));
evalcond[2]=((((-1.0)*r20*x6449*x6453))+(((-1.0)*r21*x6445*x6453))+((x6443*x6451))+(((-1.0)*x6447*x6454))+(((-1.0)*r22*sj5*x6453)));
evalcond[3]=((((-1.0)*r01*x6445*x6453))+((x6443*x6450))+(((-1.0)*x6452*x6454))+(((-1.0)*r02*sj5*x6453))+(((-1.0)*r00*x6449*x6453)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x6445*x6454))+(((-1.0)*r02*x6455))+((x6444*x6452))+(((-1.0)*r00*x6449*x6454))+(((-1.0)*x6450*x6453)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x6453))+((x6443*x6446))+(((-1.0)*x6448*x6454))+(((-1.0)*r11*x6445*x6453))+(((-1.0)*r10*x6449*x6453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6456=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6456;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6456);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6457=((1.0)*sj6);
IkReal x6458=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x6457)));
j4eval[0]=x6458;
j4eval[1]=IKsign(x6458);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x6457))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6459=cj6*cj6;
IkReal x6460=cj5*cj5;
IkReal x6461=r10*r10;
IkReal x6462=r11*r11;
IkReal x6463=r12*r12;
IkReal x6464=(r10*sj6);
IkReal x6465=(r12*sj5);
IkReal x6466=((2.0)*cj6*r11);
IkReal x6467=((1.0)*x6461);
IkReal x6468=(x6459*x6462);
IkReal x6469=(((x6464*x6466))+(((-2.0)*cj5*x6464*x6465))+((x6460*x6463))+(((-1.0)*x6460*x6468))+x6468+(((-1.0)*cj5*x6465*x6466))+(((-1.0)*x6460*x6464*x6466))+(((-1.0)*x6462))+(((-1.0)*x6463))+(((-1.0)*x6460*x6467))+(((-1.0)*x6459*x6467))+((x6459*x6460*x6461)));
j4eval[0]=x6469;
j4eval[1]=((IKabs((x6465+((cj5*x6464))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6469);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6470=cj6*cj6;
IkReal x6471=cj5*cj5;
IkReal x6472=r10*r10;
IkReal x6473=r11*r11;
IkReal x6474=r12*r12;
IkReal x6475=(r10*sj6);
IkReal x6476=(r12*sj5);
IkReal x6477=((2.0)*cj6*r11);
IkReal x6478=(x6470*x6473);
IkReal x6479=(x6471*x6472);
CheckValue<IkReal> x6480 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x6475))+x6476+((cj5*cj6*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6480.valid){
continue;
}
CheckValue<IkReal> x6481=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6471*x6475*x6477))+(((-1.0)*x6471*x6478))+(((-1.0)*x6470*x6472))+(((-2.0)*cj5*x6475*x6476))+((x6471*x6474))+x6478+((x6470*x6479))+((x6475*x6477))+(((-1.0)*x6479))+(((-1.0)*x6474))+(((-1.0)*x6473))+(((-1.0)*cj5*x6476*x6477)))),-1);
if(!x6481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6480.value)+(((1.5707963267949)*(x6481.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6482=IKsin(j4);
IkReal x6483=IKcos(j4);
IkReal x6484=(cj5*cj6);
IkReal x6485=(r11*sj6);
IkReal x6486=(cj6*r20);
IkReal x6487=(cj6*r10);
IkReal x6488=(cj5*sj6);
IkReal x6489=(r01*sj6);
IkReal x6490=(r21*sj6);
IkReal x6491=(cj6*r00);
IkReal x6492=((1.0)*x6483);
IkReal x6493=((1.0)*x6482);
IkReal x6494=(sj5*x6493);
evalcond[0]=((((-1.0)*r22*x6494))+(((-1.0)*r21*x6484*x6493))+(((-1.0)*x6490*x6492))+((x6483*x6486))+(((-1.0)*r20*x6488*x6493)));
evalcond[1]=((((-1.0)*r12*x6494))+(((-1.0)*r11*x6484*x6493))+((x6483*x6487))+(((-1.0)*r10*x6488*x6493))+(((-1.0)*x6485*x6492)));
evalcond[2]=(((x6482*x6490))+(((-1.0)*r21*x6484*x6492))+(((-1.0)*x6486*x6493))+(((-1.0)*r22*sj5*x6492))+(((-1.0)*r20*x6488*x6492)));
evalcond[3]=(((x6482*x6489))+(((-1.0)*r01*x6484*x6492))+(((-1.0)*r00*x6488*x6492))+(((-1.0)*r02*sj5*x6492))+(((-1.0)*x6491*x6493)));
evalcond[4]=((1.0)+(((-1.0)*r02*x6494))+(((-1.0)*x6489*x6492))+(((-1.0)*r01*x6484*x6493))+(((-1.0)*r00*x6488*x6493))+((x6483*x6491)));
evalcond[5]=((-1.0)+(((-1.0)*x6487*x6493))+(((-1.0)*r12*sj5*x6492))+((x6482*x6485))+(((-1.0)*r11*x6484*x6492))+(((-1.0)*r10*x6488*x6492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6495=((1.0)*sj6);
CheckValue<IkReal> x6496=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x6495)))),-1);
if(!x6496.valid){
continue;
}
CheckValue<IkReal> x6497 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x6495)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6496.value)))+(x6497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6498=IKsin(j4);
IkReal x6499=IKcos(j4);
IkReal x6500=(cj5*cj6);
IkReal x6501=(r11*sj6);
IkReal x6502=(cj6*r20);
IkReal x6503=(cj6*r10);
IkReal x6504=(cj5*sj6);
IkReal x6505=(r01*sj6);
IkReal x6506=(r21*sj6);
IkReal x6507=(cj6*r00);
IkReal x6508=((1.0)*x6499);
IkReal x6509=((1.0)*x6498);
IkReal x6510=(sj5*x6509);
evalcond[0]=((((-1.0)*r22*x6510))+(((-1.0)*x6506*x6508))+((x6499*x6502))+(((-1.0)*r21*x6500*x6509))+(((-1.0)*r20*x6504*x6509)));
evalcond[1]=((((-1.0)*x6501*x6508))+(((-1.0)*r10*x6504*x6509))+((x6499*x6503))+(((-1.0)*r12*x6510))+(((-1.0)*r11*x6500*x6509)));
evalcond[2]=(((x6498*x6506))+(((-1.0)*x6502*x6509))+(((-1.0)*r22*sj5*x6508))+(((-1.0)*r21*x6500*x6508))+(((-1.0)*r20*x6504*x6508)));
evalcond[3]=(((x6498*x6505))+(((-1.0)*x6507*x6509))+(((-1.0)*r00*x6504*x6508))+(((-1.0)*r02*sj5*x6508))+(((-1.0)*r01*x6500*x6508)));
evalcond[4]=((1.0)+(((-1.0)*r02*x6510))+(((-1.0)*r00*x6504*x6509))+((x6499*x6507))+(((-1.0)*x6505*x6508))+(((-1.0)*r01*x6500*x6509)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x6508))+((x6498*x6501))+(((-1.0)*r10*x6504*x6508))+(((-1.0)*x6503*x6509))+(((-1.0)*r11*x6500*x6508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6511=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6511.valid){
continue;
}
CheckValue<IkReal> x6512 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6511.value)))+(x6512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6513=IKsin(j4);
IkReal x6514=IKcos(j4);
IkReal x6515=(cj5*cj6);
IkReal x6516=(r11*sj6);
IkReal x6517=(cj6*r20);
IkReal x6518=(cj6*r10);
IkReal x6519=(cj5*sj6);
IkReal x6520=(r01*sj6);
IkReal x6521=(r21*sj6);
IkReal x6522=(cj6*r00);
IkReal x6523=((1.0)*x6514);
IkReal x6524=((1.0)*x6513);
IkReal x6525=(sj5*x6524);
evalcond[0]=(((x6514*x6517))+(((-1.0)*x6521*x6523))+(((-1.0)*r22*x6525))+(((-1.0)*r21*x6515*x6524))+(((-1.0)*r20*x6519*x6524)));
evalcond[1]=(((x6514*x6518))+(((-1.0)*r10*x6519*x6524))+(((-1.0)*r12*x6525))+(((-1.0)*x6516*x6523))+(((-1.0)*r11*x6515*x6524)));
evalcond[2]=((((-1.0)*r22*sj5*x6523))+(((-1.0)*r21*x6515*x6523))+(((-1.0)*r20*x6519*x6523))+((x6513*x6521))+(((-1.0)*x6517*x6524)));
evalcond[3]=((((-1.0)*x6522*x6524))+(((-1.0)*r01*x6515*x6523))+(((-1.0)*r00*x6519*x6523))+((x6513*x6520))+(((-1.0)*r02*sj5*x6523)));
evalcond[4]=((1.0)+(((-1.0)*r01*x6515*x6524))+(((-1.0)*r00*x6519*x6524))+(((-1.0)*r02*x6525))+(((-1.0)*x6520*x6523))+((x6514*x6522)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x6519*x6523))+((x6513*x6516))+(((-1.0)*r12*sj5*x6523))+(((-1.0)*x6518*x6524))+(((-1.0)*r11*x6515*x6523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6526=cj6*cj6;
IkReal x6527=cj5*cj5;
IkReal x6528=((1.0)*r11);
IkReal x6529=(cj5*sj0);
IkReal x6530=(cj6*r21);
IkReal x6531=(r22*sj5);
IkReal x6532=(r20*sj6);
IkReal x6533=(r12*r22);
IkReal x6534=((1.0)*sj6);
IkReal x6535=(r21*x6526);
IkReal x6536=(r10*x6527);
IkReal x6537=(r11*x6527);
IkReal x6538=(r20*x6526);
IkReal x6539=(cj5*r12*sj5);
CheckValue<IkReal> x6540 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6534))+((cj6*r20*sj0)))),IkReal((((sj0*x6531))+((x6529*x6530))+((x6529*x6532)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6540.valid){
continue;
}
CheckValue<IkReal> x6541=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x6530*x6534))+((cj6*x6532*x6537))+((r11*r21))+(((-1.0)*x6527*x6533))+((sj6*x6530*x6536))+((r10*x6538))+x6533+((cj5*cj6*r11*x6531))+((x6530*x6539))+(((-1.0)*x6528*x6535))+(((-1.0)*x6536*x6538))+((r20*x6536))+((x6532*x6539))+((cj5*r10*sj6*x6531))+((x6535*x6537))+(((-1.0)*cj6*x6528*x6532)))),-1);
if(!x6541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6540.value)+(((1.5707963267949)*(x6541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6542=IKsin(j4);
IkReal x6543=IKcos(j4);
IkReal x6544=(cj5*cj6);
IkReal x6545=(r11*sj6);
IkReal x6546=(cj6*r20);
IkReal x6547=(cj5*sj6);
IkReal x6548=(cj6*r10);
IkReal x6549=(r01*sj6);
IkReal x6550=(r21*sj6);
IkReal x6551=(cj6*r00);
IkReal x6552=((1.0)*x6543);
IkReal x6553=((1.0)*x6542);
IkReal x6554=(sj5*x6553);
evalcond[0]=((((-1.0)*r21*x6544*x6553))+((x6543*x6546))+(((-1.0)*r22*x6554))+(((-1.0)*x6550*x6552))+(((-1.0)*r20*x6547*x6553)));
evalcond[1]=((((-1.0)*r21*x6544*x6552))+(((-1.0)*r22*sj5*x6552))+(((-1.0)*r20*x6547*x6552))+((x6542*x6550))+(((-1.0)*x6546*x6553)));
evalcond[2]=((((-1.0)*x6545*x6552))+cj0+((x6543*x6548))+(((-1.0)*r12*x6554))+(((-1.0)*r11*x6544*x6553))+(((-1.0)*r10*x6547*x6553)));
evalcond[3]=((((-1.0)*x6551*x6553))+cj0+((x6542*x6549))+(((-1.0)*r02*sj5*x6552))+(((-1.0)*r01*x6544*x6552))+(((-1.0)*r00*x6547*x6552)));
evalcond[4]=(sj0+(((-1.0)*r12*sj5*x6552))+(((-1.0)*x6548*x6553))+((x6542*x6545))+(((-1.0)*r11*x6544*x6552))+(((-1.0)*r10*x6547*x6552)));
evalcond[5]=((((-1.0)*sj0))+((x6543*x6551))+(((-1.0)*r02*x6554))+(((-1.0)*r01*x6544*x6553))+(((-1.0)*x6549*x6552))+(((-1.0)*r00*x6547*x6553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6555=cj5*cj5;
IkReal x6556=cj6*cj6;
IkReal x6557=(r22*sj5);
IkReal x6558=(cj6*r21);
IkReal x6559=(r20*sj6);
IkReal x6560=((1.0)*sj6);
IkReal x6561=(cj0*cj5);
IkReal x6562=(r02*r22);
IkReal x6563=(cj6*r01);
IkReal x6564=(r00*sj6);
IkReal x6565=(cj5*r02*sj5);
IkReal x6566=(r01*x6555);
IkReal x6567=(r21*x6556);
IkReal x6568=(r00*r20*x6555);
CheckValue<IkReal> x6569=IKPowWithIntegerCheck(IKsign((((x6555*x6558*x6564))+(((-1.0)*x6555*x6562))+((r00*r20*x6556))+(((-1.0)*x6556*x6568))+(((-1.0)*x6559*x6563))+(((-1.0)*r01*x6567))+((x6555*x6559*x6563))+((r01*r21))+x6568+x6562+((x6566*x6567))+(((-1.0)*r00*x6558*x6560))+((cj5*x6557*x6564))+((cj5*x6557*x6563))+((x6558*x6565))+((x6559*x6565)))),-1);
if(!x6569.valid){
continue;
}
CheckValue<IkReal> x6570 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x6560)))),IkReal((((x6558*x6561))+((cj0*x6557))+((x6559*x6561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6569.value)))+(x6570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6571=IKsin(j4);
IkReal x6572=IKcos(j4);
IkReal x6573=(cj5*cj6);
IkReal x6574=(r11*sj6);
IkReal x6575=(cj6*r20);
IkReal x6576=(cj5*sj6);
IkReal x6577=(cj6*r10);
IkReal x6578=(r01*sj6);
IkReal x6579=(r21*sj6);
IkReal x6580=(cj6*r00);
IkReal x6581=((1.0)*x6572);
IkReal x6582=((1.0)*x6571);
IkReal x6583=(sj5*x6582);
evalcond[0]=((((-1.0)*r21*x6573*x6582))+((x6572*x6575))+(((-1.0)*r20*x6576*x6582))+(((-1.0)*r22*x6583))+(((-1.0)*x6579*x6581)));
evalcond[1]=((((-1.0)*x6575*x6582))+(((-1.0)*r22*sj5*x6581))+(((-1.0)*r21*x6573*x6581))+(((-1.0)*r20*x6576*x6581))+((x6571*x6579)));
evalcond[2]=((((-1.0)*r11*x6573*x6582))+cj0+(((-1.0)*r10*x6576*x6582))+((x6572*x6577))+(((-1.0)*r12*x6583))+(((-1.0)*x6574*x6581)));
evalcond[3]=((((-1.0)*r00*x6576*x6581))+cj0+(((-1.0)*r01*x6573*x6581))+(((-1.0)*r02*sj5*x6581))+((x6571*x6578))+(((-1.0)*x6580*x6582)));
evalcond[4]=((((-1.0)*r12*sj5*x6581))+sj0+(((-1.0)*r11*x6573*x6581))+(((-1.0)*r10*x6576*x6581))+(((-1.0)*x6577*x6582))+((x6571*x6574)));
evalcond[5]=((((-1.0)*r00*x6576*x6582))+(((-1.0)*sj0))+(((-1.0)*r02*x6583))+(((-1.0)*r01*x6573*x6582))+(((-1.0)*x6578*x6581))+((x6572*x6580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6584=(cj0*sj6);
IkReal x6585=(cj0*cj6);
CheckValue<IkReal> x6586=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6586.valid){
continue;
}
CheckValue<IkReal> x6587 = IKatan2WithCheck(IkReal((((r20*x6585))+(((-1.0)*r21*x6584)))),IkReal((((cj5*r20*x6584))+((cj0*r22*sj5))+((cj5*r21*x6585)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6586.value)))+(x6587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6588=IKsin(j4);
IkReal x6589=IKcos(j4);
IkReal x6590=(cj5*cj6);
IkReal x6591=(r11*sj6);
IkReal x6592=(cj6*r20);
IkReal x6593=(cj5*sj6);
IkReal x6594=(cj6*r10);
IkReal x6595=(r01*sj6);
IkReal x6596=(r21*sj6);
IkReal x6597=(cj6*r00);
IkReal x6598=((1.0)*x6589);
IkReal x6599=((1.0)*x6588);
IkReal x6600=(sj5*x6599);
evalcond[0]=((((-1.0)*r20*x6593*x6599))+(((-1.0)*r22*x6600))+(((-1.0)*x6596*x6598))+((x6589*x6592))+(((-1.0)*r21*x6590*x6599)));
evalcond[1]=((((-1.0)*r20*x6593*x6598))+((x6588*x6596))+(((-1.0)*r22*sj5*x6598))+(((-1.0)*x6592*x6599))+(((-1.0)*r21*x6590*x6598)));
evalcond[2]=(cj0+(((-1.0)*x6591*x6598))+(((-1.0)*r10*x6593*x6599))+(((-1.0)*r11*x6590*x6599))+((x6589*x6594))+(((-1.0)*r12*x6600)));
evalcond[3]=(((x6588*x6595))+cj0+(((-1.0)*r00*x6593*x6598))+(((-1.0)*r02*sj5*x6598))+(((-1.0)*r01*x6590*x6598))+(((-1.0)*x6597*x6599)));
evalcond[4]=(sj0+((x6588*x6591))+(((-1.0)*r12*sj5*x6598))+(((-1.0)*r10*x6593*x6598))+(((-1.0)*r11*x6590*x6598))+(((-1.0)*x6594*x6599)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x6600))+(((-1.0)*r00*x6593*x6599))+((x6589*x6597))+(((-1.0)*x6595*x6598))+(((-1.0)*r01*x6590*x6599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6601=(r20*sj0);
IkReal x6602=((1.0)*sj5);
IkReal x6603=(r21*sj0);
IkReal x6604=(((cj5*r12))+(((-1.0)*cj6*r11*x6602))+(((-1.0)*r10*sj6*x6602)));
j4eval[0]=x6604;
j4eval[1]=IKsign(x6604);
j4eval[2]=((IKabs((((cj6*x6601))+(((-1.0)*sj6*x6603)))))+(IKabs((((cj5*sj6*x6601))+((r22*sj0*sj5))+((cj5*cj6*x6603))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6605=cj5*cj5;
IkReal x6606=cj6*cj6;
IkReal x6607=(r00*r20);
IkReal x6608=(r02*r22);
IkReal x6609=(r22*sj5);
IkReal x6610=(cj6*r21);
IkReal x6611=(r00*sj6);
IkReal x6612=(r20*sj6);
IkReal x6613=(cj6*r01);
IkReal x6614=(cj0*cj5);
IkReal x6615=((1.0)*x6605);
IkReal x6616=(cj5*r02*sj5);
IkReal x6617=(r01*r21*x6606);
IkReal x6618=((((-1.0)*x6612*x6613))+((x6605*x6607))+(((-1.0)*x6617))+((x6612*x6616))+(((-1.0)*x6608*x6615))+x6608+((x6605*x6617))+((r01*r21))+(((-1.0)*x6606*x6607*x6615))+(((-1.0)*x6610*x6611))+((x6605*x6612*x6613))+((x6610*x6616))+((cj5*x6609*x6611))+((cj5*x6609*x6613))+((x6606*x6607))+((x6605*x6610*x6611)));
j4eval[0]=x6618;
j4eval[1]=IKsign(x6618);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x6612*x6614))+((cj0*x6609))+((x6610*x6614))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6619=cj6*cj6;
IkReal x6620=cj5*cj5;
IkReal x6621=(r12*sj5);
IkReal x6622=(r22*sj5);
IkReal x6623=((1.0)*r11);
IkReal x6624=(r20*sj0);
IkReal x6625=(r10*r20);
IkReal x6626=(cj5*sj6);
IkReal x6627=(cj6*r10);
IkReal x6628=(r12*r22);
IkReal x6629=(cj5*cj6*r21);
IkReal x6630=(r21*x6619);
IkReal x6631=(cj6*r20*sj6);
IkReal x6632=(r11*x6620);
IkReal x6633=((1.0)*r21*sj6);
IkReal x6634=((1.0)*x6620);
IkReal x6635=((((-1.0)*x6628*x6634))+(((-1.0)*x6619*x6625*x6634))+((r20*x6621*x6626))+((r11*r21))+x6628+((cj5*cj6*r11*x6622))+((x6619*x6625))+((x6620*x6625))+((r10*x6622*x6626))+((x6621*x6629))+((x6630*x6632))+((r21*sj6*x6620*x6627))+((x6631*x6632))+(((-1.0)*x6627*x6633))+(((-1.0)*x6623*x6630))+(((-1.0)*x6623*x6631)));
j4eval[0]=x6635;
j4eval[1]=IKsign(x6635);
j4eval[2]=((IKabs((((x6624*x6626))+((sj0*x6622))+((sj0*x6629)))))+(IKabs(((((-1.0)*sj0*x6633))+((cj6*x6624))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6636=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6636;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x6636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6637=((1.0)*sj6);
IkReal x6638=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x6637))+((cj5*r02)));
j4eval[0]=x6638;
j4eval[1]=IKsign(x6638);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x6637))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6639=cj6*cj6;
IkReal x6640=r01*r01;
IkReal x6641=cj5*cj5;
IkReal x6642=r00*r00;
IkReal x6643=r02*r02;
IkReal x6644=(cj6*r00);
IkReal x6645=(r02*sj5);
IkReal x6646=(cj5*cj6*r01);
IkReal x6647=((2.0)*r01*sj6);
IkReal x6648=(cj5*r00*sj6);
IkReal x6649=((1.0)*x6641);
IkReal x6650=(x6639*x6642);
IkReal x6651=(x6639*x6640);
IkReal x6652=((((-1.0)*x6649*x6650))+x6640+x6643+x6650+(((-1.0)*x6651))+((x6641*x6644*x6647))+((x6641*x6642))+(((-1.0)*x6643*x6649))+((x6641*x6651))+(((-1.0)*x6644*x6647))+(((2.0)*x6645*x6648))+(((2.0)*x6645*x6646)));
j4eval[0]=x6652;
j4eval[1]=((IKabs((x6648+x6645+x6646)))+(IKabs(((((-1.0)*r01*sj6))+x6644))));
j4eval[2]=IKsign(x6652);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6653=cj6*cj6;
IkReal x6654=r01*r01;
IkReal x6655=cj5*cj5;
IkReal x6656=r00*r00;
IkReal x6657=r02*r02;
IkReal x6658=(cj6*r00);
IkReal x6659=((2.0)*r01);
IkReal x6660=(cj5*cj6);
IkReal x6661=(r02*sj5);
IkReal x6662=(cj5*r00*sj6);
IkReal x6663=(x6655*x6656);
IkReal x6664=(x6653*x6654);
CheckValue<IkReal> x6665 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6658)),IkReal((x6662+x6661+((r01*x6660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6665.valid){
continue;
}
CheckValue<IkReal> x6666=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6653*x6663))+(((-1.0)*x6655*x6657))+x6657+x6654+x6663+((x6653*x6656))+(((-1.0)*x6664))+(((2.0)*x6661*x6662))+((sj6*x6655*x6658*x6659))+((x6659*x6660*x6661))+(((-1.0)*sj6*x6658*x6659))+((x6655*x6664)))),-1);
if(!x6666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6665.value)+(((1.5707963267949)*(x6666.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6667=IKsin(j4);
IkReal x6668=IKcos(j4);
IkReal x6669=(cj5*cj6);
IkReal x6670=(r11*sj6);
IkReal x6671=(cj6*r20);
IkReal x6672=(cj6*r10);
IkReal x6673=(cj5*sj6);
IkReal x6674=(r21*sj6);
IkReal x6675=(cj6*r00);
IkReal x6676=(r01*sj6);
IkReal x6677=((1.0)*x6668);
IkReal x6678=((1.0)*x6667);
IkReal x6679=(sj5*x6678);
evalcond[0]=(((x6668*x6671))+(((-1.0)*r20*x6673*x6678))+(((-1.0)*x6674*x6677))+(((-1.0)*r21*x6669*x6678))+(((-1.0)*r22*x6679)));
evalcond[1]=((((-1.0)*r02*x6679))+(((-1.0)*r00*x6673*x6678))+(((-1.0)*r01*x6669*x6678))+((x6668*x6675))+(((-1.0)*x6676*x6677)));
evalcond[2]=(((x6667*x6674))+(((-1.0)*x6671*x6678))+(((-1.0)*r22*sj5*x6677))+(((-1.0)*r20*x6673*x6677))+(((-1.0)*r21*x6669*x6677)));
evalcond[3]=((((-1.0)*r12*sj5*x6677))+(((-1.0)*x6672*x6678))+((x6667*x6670))+(((-1.0)*r10*x6673*x6677))+(((-1.0)*r11*x6669*x6677)));
evalcond[4]=((-1.0)+(((-1.0)*x6670*x6677))+(((-1.0)*r12*x6679))+(((-1.0)*r10*x6673*x6678))+((x6668*x6672))+(((-1.0)*r11*x6669*x6678)));
evalcond[5]=((1.0)+((x6667*x6676))+(((-1.0)*r02*sj5*x6677))+(((-1.0)*r00*x6673*x6677))+(((-1.0)*r01*x6669*x6677))+(((-1.0)*x6675*x6678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6680=((1.0)*sj6);
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6680))+((cj6*r20)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
CheckValue<IkReal> x6682=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x6680))+((cj5*r02)))),-1);
if(!x6682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6681.value)+(((1.5707963267949)*(x6682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6683=IKsin(j4);
IkReal x6684=IKcos(j4);
IkReal x6685=(cj5*cj6);
IkReal x6686=(r11*sj6);
IkReal x6687=(cj6*r20);
IkReal x6688=(cj6*r10);
IkReal x6689=(cj5*sj6);
IkReal x6690=(r21*sj6);
IkReal x6691=(cj6*r00);
IkReal x6692=(r01*sj6);
IkReal x6693=((1.0)*x6684);
IkReal x6694=((1.0)*x6683);
IkReal x6695=(sj5*x6694);
evalcond[0]=(((x6684*x6687))+(((-1.0)*r21*x6685*x6694))+(((-1.0)*r20*x6689*x6694))+(((-1.0)*x6690*x6693))+(((-1.0)*r22*x6695)));
evalcond[1]=(((x6684*x6691))+(((-1.0)*r02*x6695))+(((-1.0)*r01*x6685*x6694))+(((-1.0)*r00*x6689*x6694))+(((-1.0)*x6692*x6693)));
evalcond[2]=((((-1.0)*r21*x6685*x6693))+(((-1.0)*r20*x6689*x6693))+(((-1.0)*x6687*x6694))+(((-1.0)*r22*sj5*x6693))+((x6683*x6690)));
evalcond[3]=(((x6683*x6686))+(((-1.0)*r12*sj5*x6693))+(((-1.0)*x6688*x6694))+(((-1.0)*r10*x6689*x6693))+(((-1.0)*r11*x6685*x6693)));
evalcond[4]=((-1.0)+((x6684*x6688))+(((-1.0)*x6686*x6693))+(((-1.0)*r10*x6689*x6694))+(((-1.0)*r12*x6695))+(((-1.0)*r11*x6685*x6694)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x6693))+(((-1.0)*r01*x6685*x6693))+(((-1.0)*r00*x6689*x6693))+(((-1.0)*x6691*x6694))+((x6683*x6692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6696=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6696.valid){
continue;
}
CheckValue<IkReal> x6697 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6696.value)))+(x6697.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6698=IKsin(j4);
IkReal x6699=IKcos(j4);
IkReal x6700=(cj5*cj6);
IkReal x6701=(r11*sj6);
IkReal x6702=(cj6*r20);
IkReal x6703=(cj6*r10);
IkReal x6704=(cj5*sj6);
IkReal x6705=(r21*sj6);
IkReal x6706=(cj6*r00);
IkReal x6707=(r01*sj6);
IkReal x6708=((1.0)*x6699);
IkReal x6709=((1.0)*x6698);
IkReal x6710=(sj5*x6709);
evalcond[0]=((((-1.0)*x6705*x6708))+((x6699*x6702))+(((-1.0)*r20*x6704*x6709))+(((-1.0)*r21*x6700*x6709))+(((-1.0)*r22*x6710)));
evalcond[1]=((((-1.0)*r01*x6700*x6709))+(((-1.0)*r00*x6704*x6709))+((x6699*x6706))+(((-1.0)*r02*x6710))+(((-1.0)*x6707*x6708)));
evalcond[2]=((((-1.0)*r22*sj5*x6708))+(((-1.0)*x6702*x6709))+((x6698*x6705))+(((-1.0)*r20*x6704*x6708))+(((-1.0)*r21*x6700*x6708)));
evalcond[3]=((((-1.0)*r11*x6700*x6708))+(((-1.0)*r12*sj5*x6708))+((x6698*x6701))+(((-1.0)*x6703*x6709))+(((-1.0)*r10*x6704*x6708)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x6700*x6709))+((x6699*x6703))+(((-1.0)*r12*x6710))+(((-1.0)*x6701*x6708))+(((-1.0)*r10*x6704*x6709)));
evalcond[5]=((1.0)+(((-1.0)*r01*x6700*x6708))+(((-1.0)*r00*x6704*x6708))+(((-1.0)*r02*sj5*x6708))+(((-1.0)*x6706*x6709))+((x6698*x6707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6711=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6711;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6712=((1.0)*sj5);
IkReal x6713=(((cj5*r22))+(((-1.0)*r20*sj6*x6712))+(((-1.0)*cj6*r21*x6712)));
j4eval[0]=x6713;
j4eval[1]=IKsign(x6713);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6714=cj6*cj6;
IkReal x6715=cj5*cj5;
IkReal x6716=r00*r00;
IkReal x6717=r01*r01;
IkReal x6718=r02*r02;
IkReal x6719=(cj6*r00);
IkReal x6720=(cj5*cj6*r01);
IkReal x6721=((2.0)*r02*sj5);
IkReal x6722=((1.0)*x6714);
IkReal x6723=((2.0)*r01*sj6);
IkReal x6724=(cj5*r00*sj6);
IkReal x6725=(x6715*x6716);
IkReal x6726=((((-1.0)*x6725))+((x6715*x6718))+(((-1.0)*x6717))+(((-1.0)*x6718))+(((-1.0)*x6715*x6717*x6722))+((x6714*x6717))+(((-1.0)*x6715*x6719*x6723))+((x6714*x6725))+(((-1.0)*x6721*x6724))+(((-1.0)*x6720*x6721))+(((-1.0)*x6716*x6722))+((x6719*x6723)));
j4eval[0]=x6726;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x6719)))+(IKabs((x6720+x6724+((r02*sj5))))));
j4eval[2]=IKsign(x6726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6727=cj6*cj6;
IkReal x6728=cj5*cj5;
IkReal x6729=r00*r00;
IkReal x6730=r01*r01;
IkReal x6731=r02*r02;
IkReal x6732=(cj6*r00);
IkReal x6733=(cj5*cj6*r01);
IkReal x6734=((2.0)*r02*sj5);
IkReal x6735=((1.0)*x6727);
IkReal x6736=((2.0)*r01*sj6);
IkReal x6737=(cj5*r00*sj6);
IkReal x6738=(x6728*x6729);
CheckValue<IkReal> x6739=IKPowWithIntegerCheck(IKsign((((x6732*x6736))+(((-1.0)*x6738))+(((-1.0)*x6730))+(((-1.0)*x6731))+(((-1.0)*x6733*x6734))+(((-1.0)*x6728*x6732*x6736))+((x6727*x6738))+((x6727*x6730))+(((-1.0)*x6728*x6730*x6735))+(((-1.0)*x6729*x6735))+(((-1.0)*x6734*x6737))+((x6728*x6731)))),-1);
if(!x6739.valid){
continue;
}
CheckValue<IkReal> x6740 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6732)),IkReal((x6733+x6737+((r02*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6739.value)))+(x6740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6741=IKsin(j4);
IkReal x6742=IKcos(j4);
IkReal x6743=(cj5*cj6);
IkReal x6744=(r11*sj6);
IkReal x6745=(cj6*r20);
IkReal x6746=(cj6*r10);
IkReal x6747=(cj5*sj6);
IkReal x6748=(r21*sj6);
IkReal x6749=(cj6*r00);
IkReal x6750=(r01*sj6);
IkReal x6751=((1.0)*x6742);
IkReal x6752=((1.0)*x6741);
IkReal x6753=(sj5*x6752);
evalcond[0]=(((x6742*x6745))+(((-1.0)*r21*x6743*x6752))+(((-1.0)*x6748*x6751))+(((-1.0)*r22*x6753))+(((-1.0)*r20*x6747*x6752)));
evalcond[1]=((((-1.0)*x6750*x6751))+((x6742*x6749))+(((-1.0)*r01*x6743*x6752))+(((-1.0)*r02*x6753))+(((-1.0)*r00*x6747*x6752)));
evalcond[2]=((((-1.0)*r22*sj5*x6751))+((x6741*x6748))+(((-1.0)*r21*x6743*x6751))+(((-1.0)*x6745*x6752))+(((-1.0)*r20*x6747*x6751)));
evalcond[3]=(((x6741*x6744))+(((-1.0)*x6746*x6752))+(((-1.0)*r11*x6743*x6751))+(((-1.0)*r10*x6747*x6751))+(((-1.0)*r12*sj5*x6751)));
evalcond[4]=((1.0)+((x6742*x6746))+(((-1.0)*r11*x6743*x6752))+(((-1.0)*r10*x6747*x6752))+(((-1.0)*r12*x6753))+(((-1.0)*x6744*x6751)));
evalcond[5]=((-1.0)+((x6741*x6750))+(((-1.0)*r01*x6743*x6751))+(((-1.0)*x6749*x6752))+(((-1.0)*r00*x6747*x6751))+(((-1.0)*r02*sj5*x6751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6754=((1.0)*sj5);
CheckValue<IkReal> x6755 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6755.valid){
continue;
}
CheckValue<IkReal> x6756=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x6754))+(((-1.0)*cj6*r21*x6754)))),-1);
if(!x6756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6755.value)+(((1.5707963267949)*(x6756.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6757=IKsin(j4);
IkReal x6758=IKcos(j4);
IkReal x6759=(cj5*cj6);
IkReal x6760=(r11*sj6);
IkReal x6761=(cj6*r20);
IkReal x6762=(cj6*r10);
IkReal x6763=(cj5*sj6);
IkReal x6764=(r21*sj6);
IkReal x6765=(cj6*r00);
IkReal x6766=(r01*sj6);
IkReal x6767=((1.0)*x6758);
IkReal x6768=((1.0)*x6757);
IkReal x6769=(sj5*x6768);
evalcond[0]=(((x6758*x6761))+(((-1.0)*r21*x6759*x6768))+(((-1.0)*r22*x6769))+(((-1.0)*x6764*x6767))+(((-1.0)*r20*x6763*x6768)));
evalcond[1]=(((x6758*x6765))+(((-1.0)*x6766*x6767))+(((-1.0)*r01*x6759*x6768))+(((-1.0)*r02*x6769))+(((-1.0)*r00*x6763*x6768)));
evalcond[2]=((((-1.0)*r22*sj5*x6767))+((x6757*x6764))+(((-1.0)*r21*x6759*x6767))+(((-1.0)*x6761*x6768))+(((-1.0)*r20*x6763*x6767)));
evalcond[3]=((((-1.0)*x6762*x6768))+((x6757*x6760))+(((-1.0)*r12*sj5*x6767))+(((-1.0)*r10*x6763*x6767))+(((-1.0)*r11*x6759*x6767)));
evalcond[4]=((1.0)+(((-1.0)*x6760*x6767))+((x6758*x6762))+(((-1.0)*r10*x6763*x6768))+(((-1.0)*r12*x6769))+(((-1.0)*r11*x6759*x6768)));
evalcond[5]=((-1.0)+((x6757*x6766))+(((-1.0)*x6765*x6768))+(((-1.0)*r01*x6759*x6767))+(((-1.0)*r00*x6763*x6767))+(((-1.0)*r02*sj5*x6767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6770 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6770.valid){
continue;
}
CheckValue<IkReal> x6771=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6770.value)+(((1.5707963267949)*(x6771.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6772=IKsin(j4);
IkReal x6773=IKcos(j4);
IkReal x6774=(cj5*cj6);
IkReal x6775=(r11*sj6);
IkReal x6776=(cj6*r20);
IkReal x6777=(cj6*r10);
IkReal x6778=(cj5*sj6);
IkReal x6779=(r21*sj6);
IkReal x6780=(cj6*r00);
IkReal x6781=(r01*sj6);
IkReal x6782=((1.0)*x6773);
IkReal x6783=((1.0)*x6772);
IkReal x6784=(sj5*x6783);
evalcond[0]=((((-1.0)*r21*x6774*x6783))+((x6773*x6776))+(((-1.0)*x6779*x6782))+(((-1.0)*r20*x6778*x6783))+(((-1.0)*r22*x6784)));
evalcond[1]=((((-1.0)*r00*x6778*x6783))+((x6773*x6780))+(((-1.0)*r02*x6784))+(((-1.0)*r01*x6774*x6783))+(((-1.0)*x6781*x6782)));
evalcond[2]=((((-1.0)*r21*x6774*x6782))+((x6772*x6779))+(((-1.0)*r22*sj5*x6782))+(((-1.0)*r20*x6778*x6782))+(((-1.0)*x6776*x6783)));
evalcond[3]=((((-1.0)*r11*x6774*x6782))+(((-1.0)*r12*sj5*x6782))+((x6772*x6775))+(((-1.0)*r10*x6778*x6782))+(((-1.0)*x6777*x6783)));
evalcond[4]=((1.0)+(((-1.0)*r11*x6774*x6783))+(((-1.0)*r12*x6784))+((x6773*x6777))+(((-1.0)*r10*x6778*x6783))+(((-1.0)*x6775*x6782)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x6782))+(((-1.0)*r00*x6778*x6782))+((x6772*x6781))+(((-1.0)*r01*x6774*x6782))+(((-1.0)*x6780*x6783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6785=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6785;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6786=((1.0)*sj6);
IkReal x6787=((((-1.0)*r10*sj5*x6786))+((cj5*r12))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x6787;
j4eval[1]=IKsign(x6787);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x6786))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6788=r11*r11;
IkReal x6789=cj5*cj5;
IkReal x6790=cj6*cj6;
IkReal x6791=r10*r10;
IkReal x6792=r12*r12;
IkReal x6793=(r12*sj5);
IkReal x6794=(cj6*r10);
IkReal x6795=((1.0)*x6790);
IkReal x6796=(cj5*cj6*r11);
IkReal x6797=(cj5*r10*sj6);
IkReal x6798=((2.0)*r11*sj6);
IkReal x6799=(x6789*x6791);
IkReal x6800=((((-1.0)*x6795*x6799))+((x6788*x6789*x6790))+(((-1.0)*x6788*x6795))+x6788+x6792+x6799+(((2.0)*x6793*x6796))+(((2.0)*x6793*x6797))+((x6789*x6794*x6798))+(((-1.0)*x6789*x6792))+(((-1.0)*x6794*x6798))+((x6790*x6791)));
j4eval[0]=x6800;
j4eval[1]=IKsign(x6800);
j4eval[2]=((IKabs((x6794+(((-1.0)*r11*sj6)))))+(IKabs((x6796+x6797+x6793))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6801=r11*r11;
IkReal x6802=cj5*cj5;
IkReal x6803=cj6*cj6;
IkReal x6804=r10*r10;
IkReal x6805=r12*r12;
IkReal x6806=(r10*sj6);
IkReal x6807=(r12*sj5);
IkReal x6808=((1.0)*x6803);
IkReal x6809=(cj5*cj6*r11);
IkReal x6810=((2.0)*cj6*r11);
IkReal x6811=(x6802*x6804);
CheckValue<IkReal> x6812 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*x6806))+x6809+x6807)),IKFAST_ATAN2_MAGTHRESH);
if(!x6812.valid){
continue;
}
CheckValue<IkReal> x6813=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6808*x6811))+(((2.0)*x6807*x6809))+(((2.0)*cj5*x6806*x6807))+(((-1.0)*x6802*x6805))+(((-1.0)*x6806*x6810))+((x6801*x6802*x6803))+x6811+x6805+x6801+((x6803*x6804))+((x6802*x6806*x6810))+(((-1.0)*x6801*x6808)))),-1);
if(!x6813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6812.value)+(((1.5707963267949)*(x6813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6814=IKsin(j4);
IkReal x6815=IKcos(j4);
IkReal x6816=(cj5*cj6);
IkReal x6817=(r11*sj6);
IkReal x6818=(cj6*r20);
IkReal x6819=(cj6*r10);
IkReal x6820=(cj5*sj6);
IkReal x6821=(r01*sj6);
IkReal x6822=(r21*sj6);
IkReal x6823=(cj6*r00);
IkReal x6824=((1.0)*x6815);
IkReal x6825=((1.0)*x6814);
IkReal x6826=(sj5*x6825);
evalcond[0]=(((x6815*x6818))+(((-1.0)*r20*x6820*x6825))+(((-1.0)*r21*x6816*x6825))+(((-1.0)*r22*x6826))+(((-1.0)*x6822*x6824)));
evalcond[1]=((((-1.0)*x6817*x6824))+(((-1.0)*r11*x6816*x6825))+(((-1.0)*r12*x6826))+((x6815*x6819))+(((-1.0)*r10*x6820*x6825)));
evalcond[2]=((((-1.0)*r22*sj5*x6824))+((x6814*x6822))+(((-1.0)*x6818*x6825))+(((-1.0)*r20*x6820*x6824))+(((-1.0)*r21*x6816*x6824)));
evalcond[3]=((((-1.0)*r00*x6820*x6824))+((x6814*x6821))+(((-1.0)*x6823*x6825))+(((-1.0)*r01*x6816*x6824))+(((-1.0)*r02*sj5*x6824)));
evalcond[4]=((1.0)+(((-1.0)*r00*x6820*x6825))+((x6815*x6823))+(((-1.0)*r02*x6826))+(((-1.0)*r01*x6816*x6825))+(((-1.0)*x6821*x6824)));
evalcond[5]=((1.0)+(((-1.0)*r11*x6816*x6824))+((x6814*x6817))+(((-1.0)*r10*x6820*x6824))+(((-1.0)*x6819*x6825))+(((-1.0)*r12*sj5*x6824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6827=((1.0)*sj6);
CheckValue<IkReal> x6828=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x6827)))),-1);
if(!x6828.valid){
continue;
}
CheckValue<IkReal> x6829 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x6827)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6828.value)))+(x6829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6830=IKsin(j4);
IkReal x6831=IKcos(j4);
IkReal x6832=(cj5*cj6);
IkReal x6833=(r11*sj6);
IkReal x6834=(cj6*r20);
IkReal x6835=(cj6*r10);
IkReal x6836=(cj5*sj6);
IkReal x6837=(r01*sj6);
IkReal x6838=(r21*sj6);
IkReal x6839=(cj6*r00);
IkReal x6840=((1.0)*x6831);
IkReal x6841=((1.0)*x6830);
IkReal x6842=(sj5*x6841);
evalcond[0]=((((-1.0)*r21*x6832*x6841))+((x6831*x6834))+(((-1.0)*r22*x6842))+(((-1.0)*r20*x6836*x6841))+(((-1.0)*x6838*x6840)));
evalcond[1]=(((x6831*x6835))+(((-1.0)*r12*x6842))+(((-1.0)*r11*x6832*x6841))+(((-1.0)*r10*x6836*x6841))+(((-1.0)*x6833*x6840)));
evalcond[2]=((((-1.0)*r21*x6832*x6840))+((x6830*x6838))+(((-1.0)*x6834*x6841))+(((-1.0)*r22*sj5*x6840))+(((-1.0)*r20*x6836*x6840)));
evalcond[3]=((((-1.0)*x6839*x6841))+((x6830*x6837))+(((-1.0)*r01*x6832*x6840))+(((-1.0)*r00*x6836*x6840))+(((-1.0)*r02*sj5*x6840)));
evalcond[4]=((1.0)+((x6831*x6839))+(((-1.0)*r02*x6842))+(((-1.0)*x6837*x6840))+(((-1.0)*r01*x6832*x6841))+(((-1.0)*r00*x6836*x6841)));
evalcond[5]=((1.0)+((x6830*x6833))+(((-1.0)*r12*sj5*x6840))+(((-1.0)*x6835*x6841))+(((-1.0)*r11*x6832*x6840))+(((-1.0)*r10*x6836*x6840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6843=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6843.valid){
continue;
}
CheckValue<IkReal> x6844 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6843.value)))+(x6844.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6845=IKsin(j4);
IkReal x6846=IKcos(j4);
IkReal x6847=(cj5*cj6);
IkReal x6848=(r11*sj6);
IkReal x6849=(cj6*r20);
IkReal x6850=(cj6*r10);
IkReal x6851=(cj5*sj6);
IkReal x6852=(r01*sj6);
IkReal x6853=(r21*sj6);
IkReal x6854=(cj6*r00);
IkReal x6855=((1.0)*x6846);
IkReal x6856=((1.0)*x6845);
IkReal x6857=(sj5*x6856);
evalcond[0]=(((x6846*x6849))+(((-1.0)*r22*x6857))+(((-1.0)*r21*x6847*x6856))+(((-1.0)*r20*x6851*x6856))+(((-1.0)*x6853*x6855)));
evalcond[1]=((((-1.0)*r11*x6847*x6856))+(((-1.0)*r12*x6857))+(((-1.0)*x6848*x6855))+((x6846*x6850))+(((-1.0)*r10*x6851*x6856)));
evalcond[2]=(((x6845*x6853))+(((-1.0)*r21*x6847*x6855))+(((-1.0)*x6849*x6856))+(((-1.0)*r20*x6851*x6855))+(((-1.0)*r22*sj5*x6855)));
evalcond[3]=(((x6845*x6852))+(((-1.0)*r01*x6847*x6855))+(((-1.0)*r02*sj5*x6855))+(((-1.0)*x6854*x6856))+(((-1.0)*r00*x6851*x6855)));
evalcond[4]=((1.0)+(((-1.0)*r02*x6857))+(((-1.0)*r01*x6847*x6856))+(((-1.0)*x6852*x6855))+(((-1.0)*r00*x6851*x6856))+((x6846*x6854)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x6855))+(((-1.0)*r11*x6847*x6855))+(((-1.0)*x6850*x6856))+((x6845*x6848))+(((-1.0)*r10*x6851*x6855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6858=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x6858;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6858);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6859=((1.0)*sj5);
IkReal x6860=(((cj5*r22))+(((-1.0)*cj6*r21*x6859))+(((-1.0)*r20*sj6*x6859)));
j4eval[0]=x6860;
j4eval[1]=IKsign(x6860);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6861=cj6*cj6;
IkReal x6862=cj5*cj5;
IkReal x6863=r10*r10;
IkReal x6864=r11*r11;
IkReal x6865=r12*r12;
IkReal x6866=(r10*sj6);
IkReal x6867=(r12*sj5);
IkReal x6868=((2.0)*cj6*r11);
IkReal x6869=((1.0)*x6863);
IkReal x6870=(x6861*x6864);
IkReal x6871=(((x6866*x6868))+(((-1.0)*cj5*x6867*x6868))+(((-1.0)*x6862*x6866*x6868))+(((-1.0)*x6862*x6869))+(((-1.0)*x6861*x6869))+(((-1.0)*x6862*x6870))+(((-1.0)*x6864))+(((-1.0)*x6865))+((x6862*x6865))+x6870+((x6861*x6862*x6863))+(((-2.0)*cj5*x6866*x6867)));
j4eval[0]=x6871;
j4eval[1]=((IKabs((((cj5*cj6*r11))+x6867+((cj5*x6866)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6871);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6872=cj6*cj6;
IkReal x6873=cj5*cj5;
IkReal x6874=r10*r10;
IkReal x6875=r11*r11;
IkReal x6876=r12*r12;
IkReal x6877=(r10*sj6);
IkReal x6878=(r12*sj5);
IkReal x6879=((2.0)*cj6*r11);
IkReal x6880=(x6872*x6875);
IkReal x6881=(x6873*x6874);
CheckValue<IkReal> x6882 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*cj6*r11))+x6878+((cj5*x6877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6882.valid){
continue;
}
CheckValue<IkReal> x6883=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6872*x6874))+(((-1.0)*x6873*x6880))+(((-1.0)*cj5*x6878*x6879))+((x6873*x6876))+(((-2.0)*cj5*x6877*x6878))+(((-1.0)*x6873*x6877*x6879))+(((-1.0)*x6876))+(((-1.0)*x6875))+x6880+((x6872*x6881))+((x6877*x6879))+(((-1.0)*x6881)))),-1);
if(!x6883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6882.value)+(((1.5707963267949)*(x6883.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6884=IKsin(j4);
IkReal x6885=IKcos(j4);
IkReal x6886=(cj5*cj6);
IkReal x6887=(r11*sj6);
IkReal x6888=(cj6*r20);
IkReal x6889=(cj6*r10);
IkReal x6890=(cj5*sj6);
IkReal x6891=(r01*sj6);
IkReal x6892=(r21*sj6);
IkReal x6893=(cj6*r00);
IkReal x6894=((1.0)*x6885);
IkReal x6895=((1.0)*x6884);
IkReal x6896=(sj5*x6895);
evalcond[0]=((((-1.0)*r21*x6886*x6895))+(((-1.0)*x6892*x6894))+(((-1.0)*r20*x6890*x6895))+((x6885*x6888))+(((-1.0)*r22*x6896)));
evalcond[1]=((((-1.0)*r11*x6886*x6895))+(((-1.0)*r10*x6890*x6895))+(((-1.0)*r12*x6896))+((x6885*x6889))+(((-1.0)*x6887*x6894)));
evalcond[2]=((((-1.0)*x6888*x6895))+(((-1.0)*r21*x6886*x6894))+(((-1.0)*r20*x6890*x6894))+(((-1.0)*r22*sj5*x6894))+((x6884*x6892)));
evalcond[3]=((((-1.0)*r01*x6886*x6894))+(((-1.0)*r00*x6890*x6894))+(((-1.0)*x6893*x6895))+(((-1.0)*r02*sj5*x6894))+((x6884*x6891)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x6886*x6895))+(((-1.0)*r00*x6890*x6895))+(((-1.0)*x6891*x6894))+(((-1.0)*r02*x6896))+((x6885*x6893)));
evalcond[5]=((-1.0)+((x6884*x6887))+(((-1.0)*x6889*x6895))+(((-1.0)*r11*x6886*x6894))+(((-1.0)*r10*x6890*x6894))+(((-1.0)*r12*sj5*x6894)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6897=((1.0)*sj5);
CheckValue<IkReal> x6898 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6898.valid){
continue;
}
CheckValue<IkReal> x6899=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x6897))+(((-1.0)*r20*sj6*x6897)))),-1);
if(!x6899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6898.value)+(((1.5707963267949)*(x6899.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6900=IKsin(j4);
IkReal x6901=IKcos(j4);
IkReal x6902=(cj5*cj6);
IkReal x6903=(r11*sj6);
IkReal x6904=(cj6*r20);
IkReal x6905=(cj6*r10);
IkReal x6906=(cj5*sj6);
IkReal x6907=(r01*sj6);
IkReal x6908=(r21*sj6);
IkReal x6909=(cj6*r00);
IkReal x6910=((1.0)*x6901);
IkReal x6911=((1.0)*x6900);
IkReal x6912=(sj5*x6911);
evalcond[0]=((((-1.0)*x6908*x6910))+(((-1.0)*r22*x6912))+(((-1.0)*r20*x6906*x6911))+((x6901*x6904))+(((-1.0)*r21*x6902*x6911)));
evalcond[1]=((((-1.0)*x6903*x6910))+(((-1.0)*r12*x6912))+(((-1.0)*r10*x6906*x6911))+((x6901*x6905))+(((-1.0)*r11*x6902*x6911)));
evalcond[2]=((((-1.0)*x6904*x6911))+(((-1.0)*r22*sj5*x6910))+(((-1.0)*r20*x6906*x6910))+((x6900*x6908))+(((-1.0)*r21*x6902*x6910)));
evalcond[3]=((((-1.0)*r02*sj5*x6910))+((x6900*x6907))+(((-1.0)*r01*x6902*x6910))+(((-1.0)*x6909*x6911))+(((-1.0)*r00*x6906*x6910)));
evalcond[4]=((-1.0)+(((-1.0)*x6907*x6910))+(((-1.0)*r01*x6902*x6911))+((x6901*x6909))+(((-1.0)*r02*x6912))+(((-1.0)*r00*x6906*x6911)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x6910))+((x6900*x6903))+(((-1.0)*r10*x6906*x6910))+(((-1.0)*x6905*x6911))+(((-1.0)*r11*x6902*x6910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6913 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6913.valid){
continue;
}
CheckValue<IkReal> x6914=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x6914.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6913.value)+(((1.5707963267949)*(x6914.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6915=IKsin(j4);
IkReal x6916=IKcos(j4);
IkReal x6917=(cj5*cj6);
IkReal x6918=(r11*sj6);
IkReal x6919=(cj6*r20);
IkReal x6920=(cj6*r10);
IkReal x6921=(cj5*sj6);
IkReal x6922=(r01*sj6);
IkReal x6923=(r21*sj6);
IkReal x6924=(cj6*r00);
IkReal x6925=((1.0)*x6916);
IkReal x6926=((1.0)*x6915);
IkReal x6927=(sj5*x6926);
evalcond[0]=(((x6916*x6919))+(((-1.0)*r22*x6927))+(((-1.0)*r21*x6917*x6926))+(((-1.0)*x6923*x6925))+(((-1.0)*r20*x6921*x6926)));
evalcond[1]=((((-1.0)*r11*x6917*x6926))+(((-1.0)*r10*x6921*x6926))+((x6916*x6920))+(((-1.0)*r12*x6927))+(((-1.0)*x6918*x6925)));
evalcond[2]=(((x6915*x6923))+(((-1.0)*r21*x6917*x6925))+(((-1.0)*r22*sj5*x6925))+(((-1.0)*x6919*x6926))+(((-1.0)*r20*x6921*x6925)));
evalcond[3]=((((-1.0)*r00*x6921*x6925))+((x6915*x6922))+(((-1.0)*x6924*x6926))+(((-1.0)*r01*x6917*x6925))+(((-1.0)*r02*sj5*x6925)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x6921*x6926))+(((-1.0)*r02*x6927))+(((-1.0)*r01*x6917*x6926))+((x6916*x6924))+(((-1.0)*x6922*x6925)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x6917*x6925))+(((-1.0)*r10*x6921*x6925))+((x6915*x6918))+(((-1.0)*x6920*x6926))+(((-1.0)*r12*sj5*x6925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6928=cj6*cj6;
IkReal x6929=cj5*cj5;
IkReal x6930=((1.0)*r11);
IkReal x6931=(cj5*sj0);
IkReal x6932=(cj6*r21);
IkReal x6933=(r22*sj5);
IkReal x6934=(r20*sj6);
IkReal x6935=(r12*r22);
IkReal x6936=((1.0)*sj6);
IkReal x6937=(r21*x6928);
IkReal x6938=(r10*x6929);
IkReal x6939=(r11*x6929);
IkReal x6940=(r20*x6928);
IkReal x6941=(cj5*r12*sj5);
CheckValue<IkReal> x6942 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x6936))+((cj6*r20*sj0)))),IkReal((((sj0*x6933))+((x6931*x6934))+((x6931*x6932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6942.valid){
continue;
}
CheckValue<IkReal> x6943=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6938*x6940))+((r20*x6938))+((r10*x6940))+((r11*r21))+(((-1.0)*x6930*x6937))+((x6932*x6941))+((sj6*x6932*x6938))+(((-1.0)*r10*x6932*x6936))+(((-1.0)*cj6*x6930*x6934))+((x6934*x6941))+((cj5*r10*sj6*x6933))+((cj6*x6934*x6939))+x6935+((cj5*cj6*r11*x6933))+((x6937*x6939))+(((-1.0)*x6929*x6935)))),-1);
if(!x6943.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6942.value)+(((1.5707963267949)*(x6943.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6944=IKsin(j4);
IkReal x6945=IKcos(j4);
IkReal x6946=(cj5*cj6);
IkReal x6947=(r11*sj6);
IkReal x6948=(cj6*r20);
IkReal x6949=(cj6*r10);
IkReal x6950=(cj5*sj6);
IkReal x6951=(r01*sj6);
IkReal x6952=(r21*sj6);
IkReal x6953=(cj6*r00);
IkReal x6954=((1.0)*x6945);
IkReal x6955=((1.0)*x6944);
IkReal x6956=(sj5*x6955);
evalcond[0]=((((-1.0)*r20*x6950*x6955))+(((-1.0)*x6952*x6954))+(((-1.0)*r22*x6956))+(((-1.0)*r21*x6946*x6955))+((x6945*x6948)));
evalcond[1]=(((x6944*x6952))+(((-1.0)*r20*x6950*x6954))+(((-1.0)*x6948*x6955))+(((-1.0)*r22*sj5*x6954))+(((-1.0)*r21*x6946*x6954)));
evalcond[2]=((((-1.0)*x6951*x6954))+sj0+(((-1.0)*r00*x6950*x6955))+(((-1.0)*r02*x6956))+((x6945*x6953))+(((-1.0)*r01*x6946*x6955)));
evalcond[3]=(((x6944*x6951))+cj0+(((-1.0)*r00*x6950*x6954))+(((-1.0)*r02*sj5*x6954))+(((-1.0)*x6953*x6955))+(((-1.0)*r01*x6946*x6954)));
evalcond[4]=(((x6944*x6947))+sj0+(((-1.0)*r10*x6950*x6954))+(((-1.0)*x6949*x6955))+(((-1.0)*r11*x6946*x6954))+(((-1.0)*r12*sj5*x6954)));
evalcond[5]=((((-1.0)*r10*x6950*x6955))+(((-1.0)*r12*x6956))+(((-1.0)*x6947*x6954))+(((-1.0)*r11*x6946*x6955))+(((-1.0)*cj0))+((x6945*x6949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6957=cj5*cj5;
IkReal x6958=cj6*cj6;
IkReal x6959=(r22*sj5);
IkReal x6960=(cj6*r21);
IkReal x6961=(r20*sj6);
IkReal x6962=((1.0)*sj6);
IkReal x6963=(cj0*cj5);
IkReal x6964=(r02*r22);
IkReal x6965=(cj6*r01);
IkReal x6966=(r00*sj6);
IkReal x6967=(cj5*r02*sj5);
IkReal x6968=(r01*x6957);
IkReal x6969=(r21*x6958);
IkReal x6970=(r00*r20*x6957);
CheckValue<IkReal> x6971 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x6962)))),IkReal((((x6961*x6963))+((cj0*x6959))+((x6960*x6963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6971.valid){
continue;
}
CheckValue<IkReal> x6972=IKPowWithIntegerCheck(IKsign((((x6968*x6969))+((cj5*x6959*x6966))+((cj5*x6959*x6965))+((x6957*x6960*x6966))+((x6961*x6967))+((r00*r20*x6958))+((r01*r21))+(((-1.0)*r01*x6969))+(((-1.0)*x6961*x6965))+(((-1.0)*x6957*x6964))+(((-1.0)*x6958*x6970))+x6970+x6964+(((-1.0)*r00*x6960*x6962))+((x6960*x6967))+((x6957*x6961*x6965)))),-1);
if(!x6972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6971.value)+(((1.5707963267949)*(x6972.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6973=IKsin(j4);
IkReal x6974=IKcos(j4);
IkReal x6975=(cj5*cj6);
IkReal x6976=(r11*sj6);
IkReal x6977=(cj6*r20);
IkReal x6978=(cj6*r10);
IkReal x6979=(cj5*sj6);
IkReal x6980=(r01*sj6);
IkReal x6981=(r21*sj6);
IkReal x6982=(cj6*r00);
IkReal x6983=((1.0)*x6974);
IkReal x6984=((1.0)*x6973);
IkReal x6985=(sj5*x6984);
evalcond[0]=(((x6974*x6977))+(((-1.0)*r22*x6985))+(((-1.0)*r20*x6979*x6984))+(((-1.0)*x6981*x6983))+(((-1.0)*r21*x6975*x6984)));
evalcond[1]=((((-1.0)*r22*sj5*x6983))+(((-1.0)*r20*x6979*x6983))+((x6973*x6981))+(((-1.0)*x6977*x6984))+(((-1.0)*r21*x6975*x6983)));
evalcond[2]=(sj0+(((-1.0)*r00*x6979*x6984))+(((-1.0)*r01*x6975*x6984))+((x6974*x6982))+(((-1.0)*x6980*x6983))+(((-1.0)*r02*x6985)));
evalcond[3]=((((-1.0)*r00*x6979*x6983))+cj0+(((-1.0)*r02*sj5*x6983))+((x6973*x6980))+(((-1.0)*r01*x6975*x6983))+(((-1.0)*x6982*x6984)));
evalcond[4]=((((-1.0)*r10*x6979*x6983))+(((-1.0)*x6978*x6984))+sj0+(((-1.0)*r11*x6975*x6983))+(((-1.0)*r12*sj5*x6983))+((x6973*x6976)));
evalcond[5]=((((-1.0)*r10*x6979*x6984))+((x6974*x6978))+(((-1.0)*r11*x6975*x6984))+(((-1.0)*r12*x6985))+(((-1.0)*x6976*x6983))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6986=(cj5*sj0);
IkReal x6987=((1.0)*sj5);
CheckValue<IkReal> x6988 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),IkReal((((cj6*r21*x6986))+((r22*sj0*sj5))+((r20*sj6*x6986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6988.valid){
continue;
}
CheckValue<IkReal> x6989=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x6987))+(((-1.0)*r10*sj6*x6987)))),-1);
if(!x6989.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6988.value)+(((1.5707963267949)*(x6989.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6990=IKsin(j4);
IkReal x6991=IKcos(j4);
IkReal x6992=(cj5*cj6);
IkReal x6993=(r11*sj6);
IkReal x6994=(cj6*r20);
IkReal x6995=(cj6*r10);
IkReal x6996=(cj5*sj6);
IkReal x6997=(r01*sj6);
IkReal x6998=(r21*sj6);
IkReal x6999=(cj6*r00);
IkReal x7000=((1.0)*x6991);
IkReal x7001=((1.0)*x6990);
IkReal x7002=(sj5*x7001);
evalcond[0]=((((-1.0)*r22*x7002))+(((-1.0)*x6998*x7000))+((x6991*x6994))+(((-1.0)*r20*x6996*x7001))+(((-1.0)*r21*x6992*x7001)));
evalcond[1]=((((-1.0)*r22*sj5*x7000))+((x6990*x6998))+(((-1.0)*r20*x6996*x7000))+(((-1.0)*x6994*x7001))+(((-1.0)*r21*x6992*x7000)));
evalcond[2]=((((-1.0)*r02*x7002))+sj0+(((-1.0)*r00*x6996*x7001))+((x6991*x6999))+(((-1.0)*r01*x6992*x7001))+(((-1.0)*x6997*x7000)));
evalcond[3]=(cj0+(((-1.0)*r00*x6996*x7000))+(((-1.0)*x6999*x7001))+(((-1.0)*r01*x6992*x7000))+((x6990*x6997))+(((-1.0)*r02*sj5*x7000)));
evalcond[4]=(sj0+((x6990*x6993))+(((-1.0)*r10*x6996*x7000))+(((-1.0)*x6995*x7001))+(((-1.0)*r11*x6992*x7000))+(((-1.0)*r12*sj5*x7000)));
evalcond[5]=((((-1.0)*r12*x7002))+(((-1.0)*x6993*x7000))+((x6991*x6995))+(((-1.0)*r10*x6996*x7001))+(((-1.0)*r11*x6992*x7001))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7003=cj5*cj5;
IkReal x7004=cj6*cj6;
IkReal x7005=r20*r20;
IkReal x7006=r21*r21;
IkReal x7007=r22*r22;
IkReal x7008=(r22*sj5);
IkReal x7009=(cj6*r20);
IkReal x7010=(cj1*sj2);
IkReal x7011=(r21*sj6);
IkReal x7012=(cj5*r20*sj6);
IkReal x7013=(cj5*cj6*r21);
IkReal x7014=((1.0)*x7003);
IkReal x7015=(x7004*x7005);
IkReal x7016=(x7004*x7006);
CheckValue<IkReal> x7017=IKPowWithIntegerCheck(IKsign((x7015+x7007+x7006+(((2.0)*x7008*x7013))+(((2.0)*x7008*x7012))+(((-2.0)*x7009*x7011))+((x7003*x7005))+(((2.0)*x7003*x7009*x7011))+((x7003*x7016))+(((-1.0)*x7007*x7014))+(((-1.0)*x7014*x7015))+(((-1.0)*x7016)))),-1);
if(!x7017.valid){
continue;
}
CheckValue<IkReal> x7018 = IKatan2WithCheck(IkReal((((x7010*x7013))+((x7010*x7012))+((sj1*x7009))+((x7008*x7010))+(((-1.0)*sj1*x7011)))),IkReal((((x7010*x7011))+((sj1*x7008))+(((-1.0)*x7009*x7010))+((sj1*x7013))+((sj1*x7012)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7017.value)))+(x7018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7019=IKsin(j4);
IkReal x7020=IKcos(j4);
IkReal x7021=(cj5*cj6);
IkReal x7022=((1.0)*cj1);
IkReal x7023=(sj1*sj2);
IkReal x7024=(r11*sj6);
IkReal x7025=(cj6*r20);
IkReal x7026=(cj6*r10);
IkReal x7027=(cj5*sj6);
IkReal x7028=(r01*sj6);
IkReal x7029=(r21*sj6);
IkReal x7030=(cj6*r00);
IkReal x7031=((1.0)*x7020);
IkReal x7032=((1.0)*x7019);
IkReal x7033=(sj5*x7032);
evalcond[0]=((((-1.0)*r22*sj5*x7031))+sj1+(((-1.0)*r21*x7021*x7031))+((x7019*x7029))+(((-1.0)*r20*x7027*x7031))+(((-1.0)*x7025*x7032)));
evalcond[1]=((((-1.0)*r21*x7021*x7032))+((x7020*x7025))+(((-1.0)*r22*x7033))+((cj1*sj2))+(((-1.0)*r20*x7027*x7032))+(((-1.0)*x7029*x7031)));
evalcond[2]=((((-1.0)*cj0*x7022))+((x7019*x7028))+(((-1.0)*r01*x7021*x7031))+(((-1.0)*x7030*x7032))+(((-1.0)*r00*x7027*x7031))+(((-1.0)*r02*sj5*x7031)));
evalcond[3]=(((x7019*x7024))+(((-1.0)*x7026*x7032))+(((-1.0)*r10*x7027*x7031))+(((-1.0)*sj0*x7022))+(((-1.0)*r12*sj5*x7031))+(((-1.0)*r11*x7021*x7031)));
evalcond[4]=(((x7020*x7026))+(((-1.0)*r12*x7033))+((sj0*x7023))+((cj0*cj2))+(((-1.0)*r10*x7027*x7032))+(((-1.0)*x7024*x7031))+(((-1.0)*r11*x7021*x7032)));
evalcond[5]=(((x7020*x7030))+(((-1.0)*r02*x7033))+(((-1.0)*r01*x7021*x7032))+(((-1.0)*cj2*sj0))+(((-1.0)*r00*x7027*x7032))+(((-1.0)*x7028*x7031))+((cj0*x7023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7034=(cj6*sj1);
IkReal x7035=((1.0)*cj5);
IkReal x7036=((1.0)*sj5);
IkReal x7037=(cj1*sj0);
IkReal x7038=((1.0)*sj6);
CheckValue<IkReal> x7039=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x7036))+(((-1.0)*cj6*r01*x7036))+((cj5*r02)))),-1);
if(!x7039.valid){
continue;
}
CheckValue<IkReal> x7040 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x7036*x7037))+(((-1.0)*r10*sj1*sj6*x7035))+(((-1.0)*r12*sj1*x7036))+(((-1.0)*r20*sj6*x7035*x7037))+(((-1.0)*cj6*r21*x7035*x7037))+(((-1.0)*r11*x7034*x7035)))),IkReal((((cj6*r20*x7037))+((r10*x7034))+(((-1.0)*r21*x7037*x7038))+(((-1.0)*r11*sj1*x7038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7039.value)))+(x7040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7041=IKsin(j4);
IkReal x7042=IKcos(j4);
IkReal x7043=(cj5*cj6);
IkReal x7044=((1.0)*cj1);
IkReal x7045=(sj1*sj2);
IkReal x7046=(r11*sj6);
IkReal x7047=(cj6*r20);
IkReal x7048=(cj6*r10);
IkReal x7049=(cj5*sj6);
IkReal x7050=(r01*sj6);
IkReal x7051=(r21*sj6);
IkReal x7052=(cj6*r00);
IkReal x7053=((1.0)*x7042);
IkReal x7054=((1.0)*x7041);
IkReal x7055=(sj5*x7054);
evalcond[0]=((((-1.0)*r21*x7043*x7053))+(((-1.0)*r20*x7049*x7053))+(((-1.0)*x7047*x7054))+sj1+((x7041*x7051))+(((-1.0)*r22*sj5*x7053)));
evalcond[1]=((((-1.0)*r21*x7043*x7054))+(((-1.0)*r20*x7049*x7054))+(((-1.0)*r22*x7055))+((cj1*sj2))+(((-1.0)*x7051*x7053))+((x7042*x7047)));
evalcond[2]=((((-1.0)*r02*sj5*x7053))+(((-1.0)*r00*x7049*x7053))+((x7041*x7050))+(((-1.0)*x7052*x7054))+(((-1.0)*r01*x7043*x7053))+(((-1.0)*cj0*x7044)));
evalcond[3]=((((-1.0)*r10*x7049*x7053))+((x7041*x7046))+(((-1.0)*x7048*x7054))+(((-1.0)*sj0*x7044))+(((-1.0)*r12*sj5*x7053))+(((-1.0)*r11*x7043*x7053)));
evalcond[4]=((((-1.0)*r10*x7049*x7054))+(((-1.0)*x7046*x7053))+((sj0*x7045))+((cj0*cj2))+(((-1.0)*r12*x7055))+(((-1.0)*r11*x7043*x7054))+((x7042*x7048)));
evalcond[5]=((((-1.0)*r00*x7049*x7054))+(((-1.0)*cj2*sj0))+(((-1.0)*r01*x7043*x7054))+((cj0*x7045))+((x7042*x7052))+(((-1.0)*x7050*x7053))+(((-1.0)*r02*x7055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7056=(cj0*cj1);
IkReal x7057=((1.0)*sj1);
IkReal x7058=((1.0)*cj5);
IkReal x7059=(cj5*x7057);
CheckValue<IkReal> x7060=IKPowWithIntegerCheck(IKsign((((cj6*r11*sj5))+(((-1.0)*r12*x7058))+((r10*sj5*sj6)))),-1);
if(!x7060.valid){
continue;
}
CheckValue<IkReal> x7061 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r21*x7056*x7058))+(((-1.0)*r02*sj5*x7057))+(((-1.0)*r20*sj6*x7056*x7058))+(((-1.0)*r22*sj5*x7056))+(((-1.0)*r00*sj6*x7059))+(((-1.0)*cj6*r01*x7059)))),IkReal((((cj6*r20*x7056))+((cj6*r00*sj1))+(((-1.0)*r21*sj6*x7056))+(((-1.0)*r01*sj6*x7057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7060.value)))+(x7061.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7062=IKsin(j4);
IkReal x7063=IKcos(j4);
IkReal x7064=(cj5*cj6);
IkReal x7065=((1.0)*cj1);
IkReal x7066=(sj1*sj2);
IkReal x7067=(r11*sj6);
IkReal x7068=(cj6*r20);
IkReal x7069=(cj6*r10);
IkReal x7070=(cj5*sj6);
IkReal x7071=(r01*sj6);
IkReal x7072=(r21*sj6);
IkReal x7073=(cj6*r00);
IkReal x7074=((1.0)*x7063);
IkReal x7075=((1.0)*x7062);
IkReal x7076=(sj5*x7075);
evalcond[0]=(sj1+(((-1.0)*r20*x7070*x7074))+((x7062*x7072))+(((-1.0)*x7068*x7075))+(((-1.0)*r21*x7064*x7074))+(((-1.0)*r22*sj5*x7074)));
evalcond[1]=((((-1.0)*r20*x7070*x7075))+((x7063*x7068))+((cj1*sj2))+(((-1.0)*r21*x7064*x7075))+(((-1.0)*x7072*x7074))+(((-1.0)*r22*x7076)));
evalcond[2]=(((x7062*x7071))+(((-1.0)*cj0*x7065))+(((-1.0)*r01*x7064*x7074))+(((-1.0)*r00*x7070*x7074))+(((-1.0)*x7073*x7075))+(((-1.0)*r02*sj5*x7074)));
evalcond[3]=(((x7062*x7067))+(((-1.0)*x7069*x7075))+(((-1.0)*r12*sj5*x7074))+(((-1.0)*sj0*x7065))+(((-1.0)*r10*x7070*x7074))+(((-1.0)*r11*x7064*x7074)));
evalcond[4]=(((x7063*x7069))+(((-1.0)*x7067*x7074))+((cj0*cj2))+(((-1.0)*r10*x7070*x7075))+(((-1.0)*r12*x7076))+((sj0*x7066))+(((-1.0)*r11*x7064*x7075)));
evalcond[5]=(((cj0*x7066))+(((-1.0)*cj2*sj0))+((x7063*x7073))+(((-1.0)*r02*x7076))+(((-1.0)*r01*x7064*x7075))+(((-1.0)*r00*x7070*x7075))+(((-1.0)*x7071*x7074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7077=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x7077;
j0eval[1]=IKsign(x7077);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7078=cj5*cj5;
IkReal x7079=cj6*cj6;
IkReal x7080=r22*r22;
IkReal x7081=r21*r21;
IkReal x7082=r20*r20;
IkReal x7083=(cj6*r21);
IkReal x7084=((2.0)*r20*sj6);
IkReal x7085=(cj5*r22*sj5);
IkReal x7086=((1.0)*x7078);
IkReal x7087=(x7079*x7081);
IkReal x7088=(x7079*x7082);
IkReal x7089=((((-1.0)*x7088))+(((-1.0)*x7080))+(((-1.0)*x7081))+x7087+(((-1.0)*x7084*x7085))+(((-1.0)*x7078*x7083*x7084))+(((-1.0)*x7086*x7087))+(((-1.0)*x7082*x7086))+(((-2.0)*x7083*x7085))+((x7078*x7080))+((x7078*x7088))+((x7083*x7084)));
j4eval[0]=x7089;
j4eval[1]=IKsign(x7089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x7090=cj1*cj1;
IkReal x7091=cj2*cj2;
IkReal x7092=(cj2*sj1);
IkReal x7093=(x7090*x7091);
j0eval[0]=((-1.0)+x7092+x7093+(((5.28144927536232)*cj1*x7092)));
j0eval[1]=IKsign(((-69.0)+(((69.0)*x7092))+(((69.0)*x7093))+(((364.42)*cj1*x7092))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7094=(r10*sj6);
IkReal x7095=((0.863573439158322)*sj5);
IkReal x7096=((0.0230723086152)*cj5);
IkReal x7097=(cj6*r11);
IkReal x7098=(r00*sj6);
IkReal x7099=((0.0230723086152)*sj5);
IkReal x7100=((0.863573439158322)*cj5);
IkReal x7101=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*x7094*x7096))+((x7095*x7097))+(((-1.0)*r12*x7100))+(((-1.0)*x7096*x7097))+(((-1.0)*r12*x7099))+((x7094*x7095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+((x7095*x7098))+((x7095*x7101))+(((-1.0)*x7096*x7098))+(((-1.0)*r02*x7100))+(((-1.0)*r02*x7099))+(((-1.0)*x7096*x7101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*x7094*x7096))+((x7095*x7097))+(((-1.0)*r12*x7100))+(((-1.0)*x7096*x7097))+(((-1.0)*r12*x7099))+((x7094*x7095))))+IKsqr(((((2.30723086152)*px))+((x7095*x7098))+((x7095*x7101))+(((-1.0)*x7096*x7098))+(((-1.0)*r02*x7100))+(((-1.0)*r02*x7099))+(((-1.0)*x7096*x7101))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*x7094*x7096))+((x7095*x7097))+(((-1.0)*r12*x7100))+(((-1.0)*x7096*x7097))+(((-1.0)*r12*x7099))+((x7094*x7095))), ((((2.30723086152)*px))+((x7095*x7098))+((x7095*x7101))+(((-1.0)*x7096*x7098))+(((-1.0)*r02*x7100))+(((-1.0)*r02*x7099))+(((-1.0)*x7096*x7101))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7102=((0.01)*cj5);
IkReal x7103=(cj6*r01);
IkReal x7104=((0.37429)*sj5);
IkReal x7105=(cj6*r11);
IkReal x7106=((0.01)*sj5);
IkReal x7107=(r00*sj6);
IkReal x7108=((0.37429)*cj5);
IkReal x7109=(r10*sj6);
evalcond[0]=(((x7102*x7103))+((x7102*x7107))+(((-1.0)*x7103*x7104))+((r02*x7106))+((r02*x7108))+(((-1.0)*px))+(((0.43342)*(IKcos(j0))))+(((-1.0)*x7104*x7107)));
evalcond[1]=(((x7102*x7105))+((x7102*x7109))+(((0.43342)*(IKsin(j0))))+((r12*x7108))+((r12*x7106))+(((-1.0)*py))+(((-1.0)*x7104*x7109))+(((-1.0)*x7104*x7105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7110=(cj0*r20);
IkReal x7111=(cj0*r21);
IkReal x7112=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7112;
j4eval[1]=((IKabs((((cj5*sj6*x7110))+((cj0*r22*sj5))+((cj5*cj6*x7111)))))+(IKabs((((sj6*x7111))+(((-1.0)*cj6*x7110))))));
j4eval[2]=IKsign(x7112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7113=(sj0*sj6);
IkReal x7114=((1.0)*cj6);
IkReal x7115=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x7114))+((cj5*r02)));
j4eval[0]=x7115;
j4eval[1]=IKsign(x7115);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x7114))+((r21*x7113)))))+(IKabs((((cj5*r20*x7113))+((r22*sj0*sj5))+((cj5*cj6*r21*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7116=cj6*cj6;
IkReal x7117=cj5*cj5;
IkReal x7118=(r12*sj5);
IkReal x7119=(r22*sj5);
IkReal x7120=((1.0)*r11);
IkReal x7121=(cj0*sj6);
IkReal x7122=(cj5*r20);
IkReal x7123=((1.0)*cj6);
IkReal x7124=(r10*r20);
IkReal x7125=(r10*sj6);
IkReal x7126=(r12*r22);
IkReal x7127=(cj5*cj6*r21);
IkReal x7128=(r21*x7116);
IkReal x7129=(cj6*r20*sj6);
IkReal x7130=(r11*x7117);
IkReal x7131=((1.0)*x7117);
IkReal x7132=(x7126+((cj5*cj6*r11*x7119))+(((-1.0)*x7120*x7128))+(((-1.0)*x7120*x7129))+((r11*r21))+((cj6*r21*x7117*x7125))+((x7118*x7127))+((x7117*x7124))+((sj6*x7118*x7122))+((x7116*x7124))+(((-1.0)*x7116*x7124*x7131))+((cj5*x7119*x7125))+((x7129*x7130))+(((-1.0)*x7126*x7131))+((x7128*x7130))+(((-1.0)*r21*x7123*x7125)));
j4eval[0]=x7132;
j4eval[1]=IKsign(x7132);
j4eval[2]=((IKabs((((cj0*x7119))+((cj0*x7127))+((x7121*x7122)))))+(IKabs(((((-1.0)*cj0*r20*x7123))+((r21*x7121))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7133=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7133;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x7133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7134=((1.0)*sj5);
IkReal x7135=((((-1.0)*r00*sj6*x7134))+(((-1.0)*cj6*r01*x7134))+((cj5*r02)));
j4eval[0]=x7135;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x7135);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7136=cj6*cj6;
IkReal x7137=cj5*cj5;
IkReal x7138=r00*r00;
IkReal x7139=r01*r01;
IkReal x7140=r02*r02;
IkReal x7141=(r00*sj6);
IkReal x7142=((2.0)*cj6*r01);
IkReal x7143=(cj5*r02*sj5);
IkReal x7144=((1.0)*x7136);
IkReal x7145=(x7137*x7138);
IkReal x7146=((((-1.0)*x7142*x7143))+((x7141*x7142))+(((-1.0)*x7137*x7139*x7144))+(((-2.0)*x7141*x7143))+(((-1.0)*x7140))+(((-1.0)*x7145))+(((-1.0)*x7138*x7144))+((x7136*x7145))+((x7137*x7140))+((x7136*x7139))+(((-1.0)*x7137*x7141*x7142))+(((-1.0)*x7139)));
j4eval[0]=x7146;
j4eval[1]=((IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x7141)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x7146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7147=cj6*cj6;
IkReal x7148=cj5*cj5;
IkReal x7149=r00*r00;
IkReal x7150=r01*r01;
IkReal x7151=r02*r02;
IkReal x7152=(r01*sj6);
IkReal x7153=(cj6*r00);
IkReal x7154=(cj5*cj6*r01);
IkReal x7155=((2.0)*r02*sj5);
IkReal x7156=((1.0)*x7147);
IkReal x7157=(cj5*r00*sj6);
IkReal x7158=(x7148*x7149);
CheckValue<IkReal> x7159 = IKatan2WithCheck(IkReal((x7157+x7154+((r02*sj5)))),IkReal((x7152+(((-1.0)*x7153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7159.valid){
continue;
}
CheckValue<IkReal> x7160=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7155*x7157))+(((2.0)*x7152*x7153))+(((-1.0)*x7148*x7150*x7156))+(((-1.0)*x7154*x7155))+((x7147*x7150))+((x7147*x7158))+(((-1.0)*x7150))+(((-1.0)*x7151))+(((-1.0)*x7158))+(((-1.0)*x7149*x7156))+((x7148*x7151))+(((-2.0)*x7148*x7152*x7153)))),-1);
if(!x7160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7159.value)+(((1.5707963267949)*(x7160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7161=IKcos(j4);
IkReal x7162=IKsin(j4);
IkReal x7163=(cj5*sj6);
IkReal x7164=(cj5*r21);
IkReal x7165=(cj5*r01);
IkReal x7166=(cj5*cj6*r11);
IkReal x7167=((1.0)*x7162);
IkReal x7168=(cj6*x7161);
IkReal x7169=(sj5*x7161);
IkReal x7170=(cj6*x7162);
IkReal x7171=(sj5*x7167);
IkReal x7172=((1.0)*sj6*x7161);
evalcond[0]=(((x7164*x7168))+((r20*x7161*x7163))+(((-1.0)*r21*sj6*x7167))+((r20*x7170))+((r22*x7169)));
evalcond[1]=(((x7165*x7168))+((r00*x7161*x7163))+((r00*x7170))+((r02*x7169))+(((-1.0)*r01*sj6*x7167)));
evalcond[2]=((-1.0)+((r10*x7170))+((x7161*x7166))+((r12*x7169))+((r10*x7161*x7163))+(((-1.0)*r11*sj6*x7167)));
evalcond[3]=((((-1.0)*cj6*x7164*x7167))+(((-1.0)*r21*x7172))+((r20*x7168))+(((-1.0)*r22*x7171))+(((-1.0)*r20*x7163*x7167)));
evalcond[4]=((((-1.0)*r11*x7172))+(((-1.0)*r12*x7171))+(((-1.0)*x7166*x7167))+(((-1.0)*r10*x7163*x7167))+((r10*x7168)));
evalcond[5]=((-1.0)+((r00*x7168))+(((-1.0)*r02*x7171))+(((-1.0)*r00*x7163*x7167))+(((-1.0)*r01*x7172))+(((-1.0)*cj6*x7165*x7167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7173=((1.0)*sj5);
CheckValue<IkReal> x7174 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7174.valid){
continue;
}
CheckValue<IkReal> x7175=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x7173))+(((-1.0)*r00*sj6*x7173))+((cj5*r02)))),-1);
if(!x7175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7174.value)+(((1.5707963267949)*(x7175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7176=IKcos(j4);
IkReal x7177=IKsin(j4);
IkReal x7178=(cj5*sj6);
IkReal x7179=(cj5*r21);
IkReal x7180=(cj5*r01);
IkReal x7181=(cj5*cj6*r11);
IkReal x7182=((1.0)*x7177);
IkReal x7183=(cj6*x7176);
IkReal x7184=(sj5*x7176);
IkReal x7185=(cj6*x7177);
IkReal x7186=(sj5*x7182);
IkReal x7187=((1.0)*sj6*x7176);
evalcond[0]=(((x7179*x7183))+((r20*x7185))+((r20*x7176*x7178))+(((-1.0)*r21*sj6*x7182))+((r22*x7184)));
evalcond[1]=(((r00*x7185))+((x7180*x7183))+(((-1.0)*r01*sj6*x7182))+((r02*x7184))+((r00*x7176*x7178)));
evalcond[2]=((-1.0)+((r12*x7184))+(((-1.0)*r11*sj6*x7182))+((r10*x7176*x7178))+((x7176*x7181))+((r10*x7185)));
evalcond[3]=(((r20*x7183))+(((-1.0)*r21*x7187))+(((-1.0)*cj6*x7179*x7182))+(((-1.0)*r20*x7178*x7182))+(((-1.0)*r22*x7186)));
evalcond[4]=(((r10*x7183))+(((-1.0)*x7181*x7182))+(((-1.0)*r11*x7187))+(((-1.0)*r12*x7186))+(((-1.0)*r10*x7178*x7182)));
evalcond[5]=((-1.0)+((r00*x7183))+(((-1.0)*r00*x7178*x7182))+(((-1.0)*r01*x7187))+(((-1.0)*cj6*x7180*x7182))+(((-1.0)*r02*x7186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7188 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7188.valid){
continue;
}
CheckValue<IkReal> x7189=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x7189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7188.value)+(((1.5707963267949)*(x7189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7190=IKcos(j4);
IkReal x7191=IKsin(j4);
IkReal x7192=(cj5*sj6);
IkReal x7193=(cj5*r21);
IkReal x7194=(cj5*r01);
IkReal x7195=(cj5*cj6*r11);
IkReal x7196=((1.0)*x7191);
IkReal x7197=(cj6*x7190);
IkReal x7198=(sj5*x7190);
IkReal x7199=(cj6*x7191);
IkReal x7200=(sj5*x7196);
IkReal x7201=((1.0)*sj6*x7190);
evalcond[0]=(((r20*x7199))+(((-1.0)*r21*sj6*x7196))+((r20*x7190*x7192))+((r22*x7198))+((x7193*x7197)));
evalcond[1]=(((r00*x7190*x7192))+((r00*x7199))+((r02*x7198))+(((-1.0)*r01*sj6*x7196))+((x7194*x7197)));
evalcond[2]=((-1.0)+((x7190*x7195))+((r12*x7198))+(((-1.0)*r11*sj6*x7196))+((r10*x7199))+((r10*x7190*x7192)));
evalcond[3]=((((-1.0)*r21*x7201))+((r20*x7197))+(((-1.0)*cj6*x7193*x7196))+(((-1.0)*r20*x7192*x7196))+(((-1.0)*r22*x7200)));
evalcond[4]=((((-1.0)*r10*x7192*x7196))+((r10*x7197))+(((-1.0)*x7195*x7196))+(((-1.0)*r12*x7200))+(((-1.0)*r11*x7201)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x7192*x7196))+((r00*x7197))+(((-1.0)*cj6*x7194*x7196))+(((-1.0)*r01*x7201))+(((-1.0)*r02*x7200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7202=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x7202;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x7202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7203=((1.0)*cj6);
IkReal x7204=(((cj5*r22))+(((-1.0)*r21*sj5*x7203))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x7204;
j4eval[1]=IKsign(x7204);
j4eval[2]=((IKabs((((r01*sj6))+(((-1.0)*r00*x7203)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7205=cj6*cj6;
IkReal x7206=r01*r01;
IkReal x7207=cj5*cj5;
IkReal x7208=r00*r00;
IkReal x7209=r02*r02;
IkReal x7210=(r02*sj5);
IkReal x7211=(r01*sj6);
IkReal x7212=(cj6*r00);
IkReal x7213=(cj5*cj6*r01);
IkReal x7214=(cj5*r00*sj6);
IkReal x7215=((1.0)*x7207);
IkReal x7216=(x7205*x7208);
IkReal x7217=(x7205*x7206);
IkReal x7218=((((2.0)*x7207*x7211*x7212))+(((-1.0)*x7215*x7216))+x7216+x7209+x7206+(((-2.0)*x7211*x7212))+((x7207*x7208))+(((2.0)*x7210*x7214))+(((2.0)*x7210*x7213))+((x7207*x7217))+(((-1.0)*x7209*x7215))+(((-1.0)*x7217)));
j4eval[0]=x7218;
j4eval[1]=((IKabs((x7210+x7213+x7214)))+(IKabs((x7211+(((-1.0)*x7212))))));
j4eval[2]=IKsign(x7218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7219=cj6*cj6;
IkReal x7220=r01*r01;
IkReal x7221=cj5*cj5;
IkReal x7222=r00*r00;
IkReal x7223=r02*r02;
IkReal x7224=(r00*sj6);
IkReal x7225=(r02*sj5);
IkReal x7226=((2.0)*cj6*r01);
IkReal x7227=((1.0)*x7221);
IkReal x7228=(x7219*x7222);
IkReal x7229=(x7219*x7220);
CheckValue<IkReal> x7230 = IKatan2WithCheck(IkReal((x7225+((cj5*cj6*r01))+((cj5*x7224)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7230.valid){
continue;
}
CheckValue<IkReal> x7231=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7224*x7226))+x7220+x7223+x7228+((x7221*x7229))+((x7221*x7222))+(((2.0)*cj5*x7224*x7225))+((x7221*x7224*x7226))+((cj5*x7225*x7226))+(((-1.0)*x7223*x7227))+(((-1.0)*x7229))+(((-1.0)*x7227*x7228)))),-1);
if(!x7231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7230.value)+(((1.5707963267949)*(x7231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7232=IKcos(j4);
IkReal x7233=IKsin(j4);
IkReal x7234=(cj5*sj6);
IkReal x7235=(cj5*r21);
IkReal x7236=(cj5*r01);
IkReal x7237=(cj5*cj6*r11);
IkReal x7238=((1.0)*x7233);
IkReal x7239=(cj6*x7232);
IkReal x7240=(sj5*x7232);
IkReal x7241=(cj6*x7233);
IkReal x7242=(sj5*x7238);
IkReal x7243=((1.0)*sj6*x7232);
evalcond[0]=(((x7235*x7239))+((r20*x7241))+((r20*x7232*x7234))+((r22*x7240))+(((-1.0)*r21*sj6*x7238)));
evalcond[1]=(((r02*x7240))+((x7236*x7239))+((r00*x7241))+((r00*x7232*x7234))+(((-1.0)*r01*sj6*x7238)));
evalcond[2]=((1.0)+((x7232*x7237))+((r10*x7241))+((r10*x7232*x7234))+((r12*x7240))+(((-1.0)*r11*sj6*x7238)));
evalcond[3]=((((-1.0)*r21*x7243))+(((-1.0)*cj6*x7235*x7238))+(((-1.0)*r22*x7242))+((r20*x7239))+(((-1.0)*r20*x7234*x7238)));
evalcond[4]=((((-1.0)*r12*x7242))+((r10*x7239))+(((-1.0)*r10*x7234*x7238))+(((-1.0)*r11*x7243))+(((-1.0)*x7237*x7238)));
evalcond[5]=((1.0)+((r00*x7239))+(((-1.0)*r02*x7242))+(((-1.0)*r00*x7234*x7238))+(((-1.0)*r01*x7243))+(((-1.0)*cj6*x7236*x7238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7244=((1.0)*cj6);
CheckValue<IkReal> x7245 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x7244)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7245.valid){
continue;
}
CheckValue<IkReal> x7246=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x7244))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x7246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7245.value)+(((1.5707963267949)*(x7246.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7247=IKcos(j4);
IkReal x7248=IKsin(j4);
IkReal x7249=(cj5*sj6);
IkReal x7250=(cj5*r21);
IkReal x7251=(cj5*r01);
IkReal x7252=(cj5*cj6*r11);
IkReal x7253=((1.0)*x7248);
IkReal x7254=(cj6*x7247);
IkReal x7255=(sj5*x7247);
IkReal x7256=(cj6*x7248);
IkReal x7257=(sj5*x7253);
IkReal x7258=((1.0)*sj6*x7247);
evalcond[0]=(((r22*x7255))+((x7250*x7254))+((r20*x7247*x7249))+((r20*x7256))+(((-1.0)*r21*sj6*x7253)));
evalcond[1]=(((r02*x7255))+(((-1.0)*r01*sj6*x7253))+((x7251*x7254))+((r00*x7256))+((r00*x7247*x7249)));
evalcond[2]=((1.0)+((r10*x7247*x7249))+((r10*x7256))+((r12*x7255))+(((-1.0)*r11*sj6*x7253))+((x7247*x7252)));
evalcond[3]=((((-1.0)*r21*x7258))+(((-1.0)*cj6*x7250*x7253))+(((-1.0)*r22*x7257))+((r20*x7254))+(((-1.0)*r20*x7249*x7253)));
evalcond[4]=((((-1.0)*x7252*x7253))+((r10*x7254))+(((-1.0)*r12*x7257))+(((-1.0)*r11*x7258))+(((-1.0)*r10*x7249*x7253)));
evalcond[5]=((1.0)+((r00*x7254))+(((-1.0)*r02*x7257))+(((-1.0)*r01*x7258))+(((-1.0)*cj6*x7251*x7253))+(((-1.0)*r00*x7249*x7253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7259=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x7259.valid){
continue;
}
CheckValue<IkReal> x7260 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7259.value)))+(x7260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7261=IKcos(j4);
IkReal x7262=IKsin(j4);
IkReal x7263=(cj5*sj6);
IkReal x7264=(cj5*r21);
IkReal x7265=(cj5*r01);
IkReal x7266=(cj5*cj6*r11);
IkReal x7267=((1.0)*x7262);
IkReal x7268=(cj6*x7261);
IkReal x7269=(sj5*x7261);
IkReal x7270=(cj6*x7262);
IkReal x7271=(sj5*x7267);
IkReal x7272=((1.0)*sj6*x7261);
evalcond[0]=(((r22*x7269))+((r20*x7270))+((x7264*x7268))+((r20*x7261*x7263))+(((-1.0)*r21*sj6*x7267)));
evalcond[1]=(((x7265*x7268))+((r02*x7269))+((r00*x7261*x7263))+((r00*x7270))+(((-1.0)*r01*sj6*x7267)));
evalcond[2]=((1.0)+((r10*x7261*x7263))+((r12*x7269))+((r10*x7270))+((x7261*x7266))+(((-1.0)*r11*sj6*x7267)));
evalcond[3]=((((-1.0)*r21*x7272))+(((-1.0)*r22*x7271))+(((-1.0)*cj6*x7264*x7267))+(((-1.0)*r20*x7263*x7267))+((r20*x7268)));
evalcond[4]=((((-1.0)*r11*x7272))+(((-1.0)*r12*x7271))+(((-1.0)*x7266*x7267))+(((-1.0)*r10*x7263*x7267))+((r10*x7268)));
evalcond[5]=((1.0)+(((-1.0)*cj6*x7265*x7267))+(((-1.0)*r02*x7271))+(((-1.0)*r01*x7272))+((r00*x7268))+(((-1.0)*r00*x7263*x7267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7273=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7273;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x7273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7274=((1.0)*cj6);
IkReal x7275=(((cj5*r22))+(((-1.0)*r21*sj5*x7274))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x7275;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r10*x7274))+((r11*sj6))))));
j4eval[2]=IKsign(x7275);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7276=r11*r11;
IkReal x7277=cj5*cj5;
IkReal x7278=cj6*cj6;
IkReal x7279=r10*r10;
IkReal x7280=r12*r12;
IkReal x7281=(r12*sj5);
IkReal x7282=(r11*sj6);
IkReal x7283=((1.0)*x7278);
IkReal x7284=(cj5*cj6*r11);
IkReal x7285=(cj5*r10*sj6);
IkReal x7286=((2.0)*cj6*r10);
IkReal x7287=(x7277*x7279);
IkReal x7288=((((-1.0)*x7282*x7286))+(((-1.0)*x7277*x7280))+((x7276*x7277*x7278))+x7276+x7280+x7287+(((2.0)*x7281*x7285))+(((2.0)*x7281*x7284))+(((-1.0)*x7276*x7283))+((x7277*x7282*x7286))+(((-1.0)*x7283*x7287))+((x7278*x7279)));
j4eval[0]=x7288;
j4eval[1]=((IKabs((x7282+(((-1.0)*cj6*r10)))))+(IKabs((x7281+x7285+x7284))));
j4eval[2]=IKsign(x7288);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7289=r11*r11;
IkReal x7290=cj5*cj5;
IkReal x7291=cj6*cj6;
IkReal x7292=r10*r10;
IkReal x7293=r12*r12;
IkReal x7294=(r10*sj6);
IkReal x7295=(r12*sj5);
IkReal x7296=((1.0)*x7291);
IkReal x7297=(cj5*cj6*r11);
IkReal x7298=((2.0)*cj6*r11);
IkReal x7299=(x7290*x7292);
CheckValue<IkReal> x7300=IKPowWithIntegerCheck(IKsign((((x7290*x7294*x7298))+x7293+x7299+x7289+(((2.0)*x7295*x7297))+((x7289*x7290*x7291))+(((-1.0)*x7296*x7299))+(((-1.0)*x7289*x7296))+(((-1.0)*x7294*x7298))+(((2.0)*cj5*x7294*x7295))+(((-1.0)*x7290*x7293))+((x7291*x7292)))),-1);
if(!x7300.valid){
continue;
}
CheckValue<IkReal> x7301 = IKatan2WithCheck(IkReal((x7295+x7297+((cj5*x7294)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7300.value)))+(x7301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7302=IKcos(j4);
IkReal x7303=IKsin(j4);
IkReal x7304=(cj5*sj6);
IkReal x7305=(cj5*r01);
IkReal x7306=(cj5*r21);
IkReal x7307=(cj5*cj6*r11);
IkReal x7308=((1.0)*x7303);
IkReal x7309=(cj6*x7302);
IkReal x7310=(sj5*x7302);
IkReal x7311=(cj6*x7303);
IkReal x7312=(sj5*x7308);
IkReal x7313=((1.0)*sj6*x7302);
evalcond[0]=(((r22*x7310))+(((-1.0)*r21*sj6*x7308))+((r20*x7302*x7304))+((r20*x7311))+((x7306*x7309)));
evalcond[1]=(((r12*x7310))+((x7302*x7307))+((r10*x7302*x7304))+((r10*x7311))+(((-1.0)*r11*sj6*x7308)));
evalcond[2]=((-1.0)+((r02*x7310))+(((-1.0)*r01*sj6*x7308))+((x7305*x7309))+((r00*x7302*x7304))+((r00*x7311)));
evalcond[3]=((((-1.0)*r21*x7313))+(((-1.0)*cj6*x7306*x7308))+((r20*x7309))+(((-1.0)*r22*x7312))+(((-1.0)*r20*x7304*x7308)));
evalcond[4]=((((-1.0)*cj6*x7305*x7308))+(((-1.0)*r00*x7304*x7308))+((r00*x7309))+(((-1.0)*r01*x7313))+(((-1.0)*r02*x7312)));
evalcond[5]=((1.0)+(((-1.0)*r10*x7304*x7308))+((r10*x7309))+(((-1.0)*r11*x7313))+(((-1.0)*r12*x7312))+(((-1.0)*x7307*x7308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7314=((1.0)*cj6);
CheckValue<IkReal> x7315=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r21*sj5*x7314)))),-1);
if(!x7315.valid){
continue;
}
CheckValue<IkReal> x7316 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal((((r11*sj6))+(((-1.0)*r10*x7314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7315.value)))+(x7316.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7317=IKcos(j4);
IkReal x7318=IKsin(j4);
IkReal x7319=(cj5*sj6);
IkReal x7320=(cj5*r01);
IkReal x7321=(cj5*r21);
IkReal x7322=(cj5*cj6*r11);
IkReal x7323=((1.0)*x7318);
IkReal x7324=(cj6*x7317);
IkReal x7325=(sj5*x7317);
IkReal x7326=(cj6*x7318);
IkReal x7327=(sj5*x7323);
IkReal x7328=((1.0)*sj6*x7317);
evalcond[0]=(((r22*x7325))+(((-1.0)*r21*sj6*x7323))+((r20*x7326))+((r20*x7317*x7319))+((x7321*x7324)));
evalcond[1]=(((r10*x7326))+((r12*x7325))+(((-1.0)*r11*sj6*x7323))+((r10*x7317*x7319))+((x7317*x7322)));
evalcond[2]=((-1.0)+((x7320*x7324))+((r00*x7326))+(((-1.0)*r01*sj6*x7323))+((r00*x7317*x7319))+((r02*x7325)));
evalcond[3]=((((-1.0)*r22*x7327))+(((-1.0)*r21*x7328))+((r20*x7324))+(((-1.0)*cj6*x7321*x7323))+(((-1.0)*r20*x7319*x7323)));
evalcond[4]=((((-1.0)*cj6*x7320*x7323))+(((-1.0)*r01*x7328))+((r00*x7324))+(((-1.0)*r00*x7319*x7323))+(((-1.0)*r02*x7327)));
evalcond[5]=((1.0)+((r10*x7324))+(((-1.0)*r10*x7319*x7323))+(((-1.0)*x7322*x7323))+(((-1.0)*r11*x7328))+(((-1.0)*r12*x7327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7329=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7329.valid){
continue;
}
CheckValue<IkReal> x7330 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7329.value)))+(x7330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7331=IKcos(j4);
IkReal x7332=IKsin(j4);
IkReal x7333=(cj5*sj6);
IkReal x7334=(cj5*r01);
IkReal x7335=(cj5*r21);
IkReal x7336=(cj5*cj6*r11);
IkReal x7337=((1.0)*x7332);
IkReal x7338=(cj6*x7331);
IkReal x7339=(sj5*x7331);
IkReal x7340=(cj6*x7332);
IkReal x7341=(sj5*x7337);
IkReal x7342=((1.0)*sj6*x7331);
evalcond[0]=(((r20*x7331*x7333))+((r22*x7339))+((x7335*x7338))+(((-1.0)*r21*sj6*x7337))+((r20*x7340)));
evalcond[1]=(((r12*x7339))+((r10*x7331*x7333))+(((-1.0)*r11*sj6*x7337))+((x7331*x7336))+((r10*x7340)));
evalcond[2]=((-1.0)+((r02*x7339))+(((-1.0)*r01*sj6*x7337))+((r00*x7340))+((x7334*x7338))+((r00*x7331*x7333)));
evalcond[3]=((((-1.0)*r22*x7341))+(((-1.0)*r20*x7333*x7337))+(((-1.0)*cj6*x7335*x7337))+((r20*x7338))+(((-1.0)*r21*x7342)));
evalcond[4]=((((-1.0)*cj6*x7334*x7337))+(((-1.0)*r01*x7342))+(((-1.0)*r00*x7333*x7337))+(((-1.0)*r02*x7341))+((r00*x7338)));
evalcond[5]=((1.0)+(((-1.0)*r10*x7333*x7337))+(((-1.0)*r12*x7341))+(((-1.0)*x7336*x7337))+((r10*x7338))+(((-1.0)*r11*x7342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7343=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7343;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x7343);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7344=((1.0)*sj5);
IkReal x7345=(((cj5*r12))+(((-1.0)*cj6*r11*x7344))+(((-1.0)*r10*sj6*x7344)));
j4eval[0]=x7345;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x7345);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7346=cj6*cj6;
IkReal x7347=cj5*cj5;
IkReal x7348=r10*r10;
IkReal x7349=r11*r11;
IkReal x7350=r12*r12;
IkReal x7351=(r10*sj6);
IkReal x7352=(r12*sj5);
IkReal x7353=((2.0)*cj6*r11);
IkReal x7354=((1.0)*x7348);
IkReal x7355=(x7346*x7349);
IkReal x7356=(x7355+(((-1.0)*x7347*x7355))+(((-1.0)*cj5*x7352*x7353))+((x7347*x7350))+(((-2.0)*cj5*x7351*x7352))+(((-1.0)*x7347*x7351*x7353))+((x7346*x7347*x7348))+(((-1.0)*x7349))+(((-1.0)*x7347*x7354))+(((-1.0)*x7346*x7354))+(((-1.0)*x7350))+((x7351*x7353)));
j4eval[0]=x7356;
j4eval[1]=((IKabs((x7352+((cj5*x7351))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x7356);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7357=cj6*cj6;
IkReal x7358=cj5*cj5;
IkReal x7359=r10*r10;
IkReal x7360=r11*r11;
IkReal x7361=r12*r12;
IkReal x7362=(r10*sj6);
IkReal x7363=(r12*sj5);
IkReal x7364=((2.0)*cj6*r11);
IkReal x7365=(x7357*x7360);
IkReal x7366=(x7358*x7359);
CheckValue<IkReal> x7367=IKPowWithIntegerCheck(IKsign((x7365+(((-1.0)*x7358*x7365))+((x7358*x7361))+(((-1.0)*x7358*x7362*x7364))+(((-2.0)*cj5*x7362*x7363))+(((-1.0)*cj5*x7363*x7364))+(((-1.0)*x7357*x7359))+((x7357*x7366))+((x7362*x7364))+(((-1.0)*x7366))+(((-1.0)*x7360))+(((-1.0)*x7361)))),-1);
if(!x7367.valid){
continue;
}
CheckValue<IkReal> x7368 = IKatan2WithCheck(IkReal((x7363+((cj5*x7362))+((cj5*cj6*r11)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7367.value)))+(x7368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7369=IKcos(j4);
IkReal x7370=IKsin(j4);
IkReal x7371=(cj5*sj6);
IkReal x7372=(cj5*r01);
IkReal x7373=(cj5*r21);
IkReal x7374=(cj5*cj6*r11);
IkReal x7375=((1.0)*x7370);
IkReal x7376=(cj6*x7369);
IkReal x7377=(sj5*x7369);
IkReal x7378=(cj6*x7370);
IkReal x7379=(sj5*x7375);
IkReal x7380=((1.0)*sj6*x7369);
evalcond[0]=(((x7373*x7376))+((r20*x7378))+((r20*x7369*x7371))+(((-1.0)*r21*sj6*x7375))+((r22*x7377)));
evalcond[1]=((((-1.0)*r11*sj6*x7375))+((r12*x7377))+((r10*x7369*x7371))+((x7369*x7374))+((r10*x7378)));
evalcond[2]=((1.0)+((r02*x7377))+((r00*x7369*x7371))+(((-1.0)*r01*sj6*x7375))+((r00*x7378))+((x7372*x7376)));
evalcond[3]=((((-1.0)*r20*x7371*x7375))+(((-1.0)*r22*x7379))+((r20*x7376))+(((-1.0)*r21*x7380))+(((-1.0)*cj6*x7373*x7375)));
evalcond[4]=(((r00*x7376))+(((-1.0)*r01*x7380))+(((-1.0)*r00*x7371*x7375))+(((-1.0)*r02*x7379))+(((-1.0)*cj6*x7372*x7375)));
evalcond[5]=((-1.0)+(((-1.0)*x7374*x7375))+(((-1.0)*r10*x7371*x7375))+(((-1.0)*r12*x7379))+(((-1.0)*r11*x7380))+((r10*x7376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7381=((1.0)*sj5);
CheckValue<IkReal> x7382=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x7381))+(((-1.0)*cj6*r11*x7381)))),-1);
if(!x7382.valid){
continue;
}
CheckValue<IkReal> x7383 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7382.value)))+(x7383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7384=IKcos(j4);
IkReal x7385=IKsin(j4);
IkReal x7386=(cj5*sj6);
IkReal x7387=(cj5*r01);
IkReal x7388=(cj5*r21);
IkReal x7389=(cj5*cj6*r11);
IkReal x7390=((1.0)*x7385);
IkReal x7391=(cj6*x7384);
IkReal x7392=(sj5*x7384);
IkReal x7393=(cj6*x7385);
IkReal x7394=(sj5*x7390);
IkReal x7395=((1.0)*sj6*x7384);
evalcond[0]=(((x7388*x7391))+((r22*x7392))+((r20*x7384*x7386))+((r20*x7393))+(((-1.0)*r21*sj6*x7390)));
evalcond[1]=((((-1.0)*r11*sj6*x7390))+((r10*x7393))+((r12*x7392))+((x7384*x7389))+((r10*x7384*x7386)));
evalcond[2]=((1.0)+((r02*x7392))+(((-1.0)*r01*sj6*x7390))+((r00*x7393))+((x7387*x7391))+((r00*x7384*x7386)));
evalcond[3]=((((-1.0)*r22*x7394))+(((-1.0)*r20*x7386*x7390))+(((-1.0)*cj6*x7388*x7390))+((r20*x7391))+(((-1.0)*r21*x7395)));
evalcond[4]=((((-1.0)*r02*x7394))+(((-1.0)*r01*x7395))+((r00*x7391))+(((-1.0)*cj6*x7387*x7390))+(((-1.0)*r00*x7386*x7390)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x7394))+(((-1.0)*r11*x7395))+((r10*x7391))+(((-1.0)*x7389*x7390))+(((-1.0)*r10*x7386*x7390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7396=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x7396.valid){
continue;
}
CheckValue<IkReal> x7397 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7396.value)))+(x7397.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7398=IKcos(j4);
IkReal x7399=IKsin(j4);
IkReal x7400=(cj5*sj6);
IkReal x7401=(cj5*r01);
IkReal x7402=(cj5*r21);
IkReal x7403=(cj5*cj6*r11);
IkReal x7404=((1.0)*x7399);
IkReal x7405=(cj6*x7398);
IkReal x7406=(sj5*x7398);
IkReal x7407=(cj6*x7399);
IkReal x7408=(sj5*x7404);
IkReal x7409=((1.0)*sj6*x7398);
evalcond[0]=(((x7402*x7405))+((r20*x7398*x7400))+((r20*x7407))+(((-1.0)*r21*sj6*x7404))+((r22*x7406)));
evalcond[1]=(((r10*x7398*x7400))+((x7398*x7403))+(((-1.0)*r11*sj6*x7404))+((r12*x7406))+((r10*x7407)));
evalcond[2]=((1.0)+((r02*x7406))+((r00*x7398*x7400))+((x7401*x7405))+((r00*x7407))+(((-1.0)*r01*sj6*x7404)));
evalcond[3]=((((-1.0)*r20*x7400*x7404))+(((-1.0)*r21*x7409))+((r20*x7405))+(((-1.0)*r22*x7408))+(((-1.0)*cj6*x7402*x7404)));
evalcond[4]=((((-1.0)*r01*x7409))+((r00*x7405))+(((-1.0)*cj6*x7401*x7404))+(((-1.0)*r02*x7408))+(((-1.0)*r00*x7400*x7404)));
evalcond[5]=((-1.0)+(((-1.0)*x7403*x7404))+(((-1.0)*r11*x7409))+(((-1.0)*r12*x7408))+(((-1.0)*r10*x7400*x7404))+((r10*x7405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7410=cj6*cj6;
IkReal x7411=cj5*cj5;
IkReal x7412=(r22*sj5);
IkReal x7413=((1.0)*r11);
IkReal x7414=(r20*sj6);
IkReal x7415=(cj0*cj5);
IkReal x7416=(cj6*r21);
IkReal x7417=((1.0)*r20);
IkReal x7418=(r12*r22);
IkReal x7419=(r10*sj6);
IkReal x7420=(r21*x7410);
IkReal x7421=(r10*x7411);
IkReal x7422=(r11*x7411);
IkReal x7423=(cj5*r12*sj5);
CheckValue<IkReal> x7424=IKPowWithIntegerCheck(IKsign((((r10*r20*x7410))+(((-1.0)*x7416*x7419))+(((-1.0)*x7410*x7417*x7421))+((r11*r21))+(((-1.0)*x7411*x7418))+((r20*x7421))+((x7411*x7416*x7419))+((x7420*x7422))+((cj5*cj6*r11*x7412))+(((-1.0)*cj6*x7413*x7414))+(((-1.0)*x7413*x7420))+((cj6*x7414*x7422))+x7418+((cj5*x7412*x7419))+((x7416*x7423))+((x7414*x7423)))),-1);
if(!x7424.valid){
continue;
}
CheckValue<IkReal> x7425 = IKatan2WithCheck(IkReal((((cj0*x7412))+((x7415*x7416))+((x7414*x7415)))),IkReal((((cj0*r21*sj6))+(((-1.0)*cj0*cj6*x7417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7424.value)))+(x7425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7426=IKcos(j4);
IkReal x7427=IKsin(j4);
IkReal x7428=((1.0)*sj0);
IkReal x7429=(cj5*r11);
IkReal x7430=((1.0)*sj6);
IkReal x7431=(cj5*r01);
IkReal x7432=(cj6*x7426);
IkReal x7433=(sj5*x7426);
IkReal x7434=(r21*x7427);
IkReal x7435=(cj6*x7427);
IkReal x7436=((1.0)*sj5*x7427);
IkReal x7437=(cj5*sj6*x7426);
IkReal x7438=(cj5*x7427*x7430);
evalcond[0]=((((-1.0)*x7430*x7434))+((cj5*r21*x7432))+((r20*x7435))+((r20*x7437))+((r22*x7433)));
evalcond[1]=((((-1.0)*r22*x7436))+((r20*x7432))+(((-1.0)*r21*x7426*x7430))+(((-1.0)*r20*x7438))+(((-1.0)*cj5*cj6*x7434)));
evalcond[2]=((((-1.0)*r01*x7427*x7430))+((r00*x7437))+((r00*x7435))+((r02*x7433))+((x7431*x7432))+(((-1.0)*cj0)));
evalcond[3]=(((x7429*x7432))+(((-1.0)*r11*x7427*x7430))+((r10*x7435))+((r10*x7437))+(((-1.0)*x7428))+((r12*x7433)));
evalcond[4]=(cj0+((r10*x7432))+(((-1.0)*r12*x7436))+(((-1.0)*r11*x7426*x7430))+(((-1.0)*r10*x7438))+(((-1.0)*x7429*x7435)));
evalcond[5]=(((r00*x7432))+(((-1.0)*r00*x7438))+(((-1.0)*x7431*x7435))+(((-1.0)*r01*x7426*x7430))+(((-1.0)*r02*x7436))+(((-1.0)*x7428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7439=(sj0*sj6);
IkReal x7440=((1.0)*cj6);
CheckValue<IkReal> x7441 = IKatan2WithCheck(IkReal((((r22*sj0*sj5))+((cj5*cj6*r21*sj0))+((cj5*r20*x7439)))),IkReal((((r21*x7439))+(((-1.0)*r20*sj0*x7440)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7441.valid){
continue;
}
CheckValue<IkReal> x7442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x7440))+((cj5*r02)))),-1);
if(!x7442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7441.value)+(((1.5707963267949)*(x7442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7443=IKcos(j4);
IkReal x7444=IKsin(j4);
IkReal x7445=((1.0)*sj0);
IkReal x7446=(cj5*r11);
IkReal x7447=((1.0)*sj6);
IkReal x7448=(cj5*r01);
IkReal x7449=(cj6*x7443);
IkReal x7450=(sj5*x7443);
IkReal x7451=(r21*x7444);
IkReal x7452=(cj6*x7444);
IkReal x7453=((1.0)*sj5*x7444);
IkReal x7454=(cj5*sj6*x7443);
IkReal x7455=(cj5*x7444*x7447);
evalcond[0]=(((r20*x7454))+((r20*x7452))+((r22*x7450))+(((-1.0)*x7447*x7451))+((cj5*r21*x7449)));
evalcond[1]=(((r20*x7449))+(((-1.0)*r21*x7443*x7447))+(((-1.0)*cj5*cj6*x7451))+(((-1.0)*r22*x7453))+(((-1.0)*r20*x7455)));
evalcond[2]=(((r02*x7450))+(((-1.0)*r01*x7444*x7447))+((r00*x7452))+((r00*x7454))+((x7448*x7449))+(((-1.0)*cj0)));
evalcond[3]=(((r12*x7450))+(((-1.0)*x7445))+(((-1.0)*r11*x7444*x7447))+((x7446*x7449))+((r10*x7454))+((r10*x7452)));
evalcond[4]=((((-1.0)*r10*x7455))+cj0+(((-1.0)*x7446*x7452))+((r10*x7449))+(((-1.0)*r12*x7453))+(((-1.0)*r11*x7443*x7447)));
evalcond[5]=((((-1.0)*x7448*x7452))+(((-1.0)*x7445))+(((-1.0)*r00*x7455))+((r00*x7449))+(((-1.0)*r02*x7453))+(((-1.0)*r01*x7443*x7447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7456=(cj0*r20);
IkReal x7457=(cj0*r21);
CheckValue<IkReal> x7458=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7458.valid){
continue;
}
CheckValue<IkReal> x7459 = IKatan2WithCheck(IkReal((((cj5*cj6*x7457))+((cj0*r22*sj5))+((cj5*sj6*x7456)))),IkReal(((((-1.0)*cj6*x7456))+((sj6*x7457)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7458.value)))+(x7459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7460=IKcos(j4);
IkReal x7461=IKsin(j4);
IkReal x7462=((1.0)*sj0);
IkReal x7463=(cj5*r11);
IkReal x7464=((1.0)*sj6);
IkReal x7465=(cj5*r01);
IkReal x7466=(cj6*x7460);
IkReal x7467=(sj5*x7460);
IkReal x7468=(r21*x7461);
IkReal x7469=(cj6*x7461);
IkReal x7470=((1.0)*sj5*x7461);
IkReal x7471=(cj5*sj6*x7460);
IkReal x7472=(cj5*x7461*x7464);
evalcond[0]=(((r20*x7471))+(((-1.0)*x7464*x7468))+((cj5*r21*x7466))+((r20*x7469))+((r22*x7467)));
evalcond[1]=((((-1.0)*r20*x7472))+(((-1.0)*r22*x7470))+((r20*x7466))+(((-1.0)*cj5*cj6*x7468))+(((-1.0)*r21*x7460*x7464)));
evalcond[2]=(((r02*x7467))+((r00*x7471))+((x7465*x7466))+((r00*x7469))+(((-1.0)*cj0))+(((-1.0)*r01*x7461*x7464)));
evalcond[3]=(((r10*x7471))+((r10*x7469))+((x7463*x7466))+(((-1.0)*r11*x7461*x7464))+((r12*x7467))+(((-1.0)*x7462)));
evalcond[4]=(((r10*x7466))+cj0+(((-1.0)*x7463*x7469))+(((-1.0)*r11*x7460*x7464))+(((-1.0)*r10*x7472))+(((-1.0)*r12*x7470)));
evalcond[5]=((((-1.0)*r02*x7470))+(((-1.0)*r00*x7472))+(((-1.0)*r01*x7460*x7464))+(((-1.0)*x7462))+(((-1.0)*x7465*x7469))+((r00*x7466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7473=(r10*sj6);
IkReal x7474=((0.863573439158322)*sj5);
IkReal x7475=((0.0230723086152)*cj5);
IkReal x7476=(cj6*r11);
IkReal x7477=(r00*sj6);
IkReal x7478=((0.0230723086152)*sj5);
IkReal x7479=((0.863573439158322)*cj5);
IkReal x7480=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+((x7474*x7476))+(((-1.0)*x7475*x7476))+(((-1.0)*x7473*x7475))+((x7473*x7474))+(((-1.0)*r12*x7479))+(((-1.0)*r12*x7478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+((x7474*x7477))+(((-1.0)*r02*x7479))+(((-1.0)*r02*x7478))+(((-1.0)*x7475*x7480))+((x7474*x7480))+(((-1.0)*x7475*x7477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+((x7474*x7476))+(((-1.0)*x7475*x7476))+(((-1.0)*x7473*x7475))+((x7473*x7474))+(((-1.0)*r12*x7479))+(((-1.0)*r12*x7478))))+IKsqr(((((2.30723086152)*px))+((x7474*x7477))+(((-1.0)*r02*x7479))+(((-1.0)*r02*x7478))+(((-1.0)*x7475*x7480))+((x7474*x7480))+(((-1.0)*x7475*x7477))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+((x7474*x7476))+(((-1.0)*x7475*x7476))+(((-1.0)*x7473*x7475))+((x7473*x7474))+(((-1.0)*r12*x7479))+(((-1.0)*r12*x7478))), ((((2.30723086152)*px))+((x7474*x7477))+(((-1.0)*r02*x7479))+(((-1.0)*r02*x7478))+(((-1.0)*x7475*x7480))+((x7474*x7480))+(((-1.0)*x7475*x7477))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7481=((0.01)*cj5);
IkReal x7482=(cj6*r01);
IkReal x7483=((0.37429)*sj5);
IkReal x7484=(cj6*r11);
IkReal x7485=((0.01)*sj5);
IkReal x7486=(r00*sj6);
IkReal x7487=((0.37429)*cj5);
IkReal x7488=(r10*sj6);
evalcond[0]=((((-1.0)*x7482*x7483))+(((-1.0)*px))+((r02*x7485))+((r02*x7487))+((x7481*x7482))+((x7481*x7486))+(((0.43342)*(IKcos(j0))))+(((-1.0)*x7483*x7486)));
evalcond[1]=((((0.43342)*(IKsin(j0))))+((r12*x7487))+((r12*x7485))+(((-1.0)*py))+((x7481*x7484))+((x7481*x7488))+(((-1.0)*x7483*x7484))+(((-1.0)*x7483*x7488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7489=(cj0*r20);
IkReal x7490=(cj0*r21);
IkReal x7491=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7491;
j4eval[1]=((IKabs((((sj6*x7490))+(((-1.0)*cj6*x7489)))))+(IKabs((((cj5*sj6*x7489))+((cj5*cj6*x7490))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x7491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7492=(sj0*sj6);
IkReal x7493=((1.0)*cj6);
IkReal x7494=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x7493))+((cj5*r02)));
j4eval[0]=x7494;
j4eval[1]=IKsign(x7494);
j4eval[2]=((IKabs((((cj5*r20*x7492))+((r22*sj0*sj5))+((cj5*cj6*r21*sj0)))))+(IKabs((((r21*x7492))+(((-1.0)*r20*sj0*x7493))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7495=cj5*cj5;
IkReal x7496=cj6*cj6;
IkReal x7497=(r00*r20);
IkReal x7498=(r02*r22);
IkReal x7499=(cj5*sj5);
IkReal x7500=(cj6*r21);
IkReal x7501=(r00*sj6);
IkReal x7502=(r20*sj6);
IkReal x7503=(cj6*r01);
IkReal x7504=(cj5*sj0);
IkReal x7505=((1.0)*x7495);
IkReal x7506=(r01*r21*x7496);
IkReal x7507=(((r02*x7499*x7500))+((r02*x7499*x7502))+(((-1.0)*x7500*x7501))+((x7496*x7497))+(((-1.0)*x7498*x7505))+((x7495*x7502*x7503))+((x7495*x7506))+((r01*r21))+(((-1.0)*x7502*x7503))+((x7495*x7500*x7501))+(((-1.0)*x7506))+((r22*x7499*x7501))+((r22*x7499*x7503))+x7498+((x7495*x7497))+(((-1.0)*x7496*x7497*x7505)));
j4eval[0]=x7507;
j4eval[1]=IKsign(x7507);
j4eval[2]=((IKabs((((r21*sj0*sj6))+(((-1.0)*cj6*r20*sj0)))))+(IKabs((((r22*sj0*sj5))+((x7502*x7504))+((x7500*x7504))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7508=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7508;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x7508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7509=((1.0)*cj6);
IkReal x7510=(((cj5*r22))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r21*sj5*x7509)));
j4eval[0]=x7510;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x7509)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x7510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7511=cj6*cj6;
IkReal x7512=cj5*cj5;
IkReal x7513=r10*r10;
IkReal x7514=r11*r11;
IkReal x7515=r12*r12;
IkReal x7516=(r10*sj6);
IkReal x7517=(r12*sj5);
IkReal x7518=((2.0)*cj6*r11);
IkReal x7519=((1.0)*x7513);
IkReal x7520=(x7511*x7514);
IkReal x7521=((((-1.0)*x7512*x7520))+((x7511*x7512*x7513))+(((-1.0)*x7512*x7516*x7518))+(((-1.0)*x7512*x7519))+(((-1.0)*x7511*x7519))+(((-1.0)*cj5*x7517*x7518))+(((-2.0)*cj5*x7516*x7517))+((x7512*x7515))+x7520+(((-1.0)*x7515))+(((-1.0)*x7514))+((x7516*x7518)));
j4eval[0]=x7521;
j4eval[1]=((IKabs((((cj5*cj6*r11))+((cj5*x7516))+x7517)))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x7521);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7522=cj6*cj6;
IkReal x7523=cj5*cj5;
IkReal x7524=r10*r10;
IkReal x7525=r11*r11;
IkReal x7526=r12*r12;
IkReal x7527=(r10*sj6);
IkReal x7528=(r12*sj5);
IkReal x7529=((2.0)*cj6*r11);
IkReal x7530=(x7522*x7525);
IkReal x7531=(x7523*x7524);
CheckValue<IkReal> x7532=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7523*x7530))+(((-1.0)*x7523*x7527*x7529))+((x7527*x7529))+(((-1.0)*x7531))+((x7522*x7531))+x7530+(((-1.0)*x7522*x7524))+((x7523*x7526))+(((-1.0)*x7525))+(((-1.0)*x7526))+(((-2.0)*cj5*x7527*x7528))+(((-1.0)*cj5*x7528*x7529)))),-1);
if(!x7532.valid){
continue;
}
CheckValue<IkReal> x7533 = IKatan2WithCheck(IkReal((((cj5*cj6*r11))+((cj5*x7527))+x7528)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7532.value)))+(x7533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7534=IKcos(j4);
IkReal x7535=IKsin(j4);
IkReal x7536=(cj5*sj6);
IkReal x7537=(cj5*r01);
IkReal x7538=(cj5*r21);
IkReal x7539=(cj5*cj6*r11);
IkReal x7540=((1.0)*x7535);
IkReal x7541=(cj6*x7534);
IkReal x7542=(sj5*x7534);
IkReal x7543=(cj6*x7535);
IkReal x7544=(sj5*x7540);
IkReal x7545=((1.0)*sj6*x7534);
evalcond[0]=(((r20*x7543))+((r20*x7534*x7536))+(((-1.0)*r21*sj6*x7540))+((r22*x7542))+((x7538*x7541)));
evalcond[1]=(((r10*x7543))+((r12*x7542))+((x7534*x7539))+((r10*x7534*x7536))+(((-1.0)*r11*sj6*x7540)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x7540))+((r02*x7542))+((x7537*x7541))+((r00*x7543))+((r00*x7534*x7536)));
evalcond[3]=(((r20*x7541))+(((-1.0)*r20*x7536*x7540))+(((-1.0)*cj6*x7538*x7540))+(((-1.0)*r22*x7544))+(((-1.0)*r21*x7545)));
evalcond[4]=((((-1.0)*r00*x7536*x7540))+(((-1.0)*r01*x7545))+(((-1.0)*cj6*x7537*x7540))+((r00*x7541))+(((-1.0)*r02*x7544)));
evalcond[5]=((-1.0)+((r10*x7541))+(((-1.0)*x7539*x7540))+(((-1.0)*r11*x7545))+(((-1.0)*r12*x7544))+(((-1.0)*r10*x7536*x7540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7546=((1.0)*cj6);
CheckValue<IkReal> x7547=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x7546))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x7547.valid){
continue;
}
CheckValue<IkReal> x7548 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*r10*x7546))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7548.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7547.value)))+(x7548.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7549=IKcos(j4);
IkReal x7550=IKsin(j4);
IkReal x7551=(cj5*sj6);
IkReal x7552=(cj5*r01);
IkReal x7553=(cj5*r21);
IkReal x7554=(cj5*cj6*r11);
IkReal x7555=((1.0)*x7550);
IkReal x7556=(cj6*x7549);
IkReal x7557=(sj5*x7549);
IkReal x7558=(cj6*x7550);
IkReal x7559=(sj5*x7555);
IkReal x7560=((1.0)*sj6*x7549);
evalcond[0]=((((-1.0)*r21*sj6*x7555))+((r22*x7557))+((x7553*x7556))+((r20*x7549*x7551))+((r20*x7558)));
evalcond[1]=(((r10*x7558))+((x7549*x7554))+((r12*x7557))+((r10*x7549*x7551))+(((-1.0)*r11*sj6*x7555)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x7555))+((r02*x7557))+((x7552*x7556))+((r00*x7549*x7551))+((r00*x7558)));
evalcond[3]=((((-1.0)*r21*x7560))+(((-1.0)*r22*x7559))+(((-1.0)*cj6*x7553*x7555))+(((-1.0)*r20*x7551*x7555))+((r20*x7556)));
evalcond[4]=((((-1.0)*r00*x7551*x7555))+(((-1.0)*r01*x7560))+((r00*x7556))+(((-1.0)*cj6*x7552*x7555))+(((-1.0)*r02*x7559)));
evalcond[5]=((-1.0)+((r10*x7556))+(((-1.0)*x7554*x7555))+(((-1.0)*r10*x7551*x7555))+(((-1.0)*r11*x7560))+(((-1.0)*r12*x7559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7561=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7561.valid){
continue;
}
CheckValue<IkReal> x7562 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7562.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7561.value)))+(x7562.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7563=IKcos(j4);
IkReal x7564=IKsin(j4);
IkReal x7565=(cj5*sj6);
IkReal x7566=(cj5*r01);
IkReal x7567=(cj5*r21);
IkReal x7568=(cj5*cj6*r11);
IkReal x7569=((1.0)*x7564);
IkReal x7570=(cj6*x7563);
IkReal x7571=(sj5*x7563);
IkReal x7572=(cj6*x7564);
IkReal x7573=(sj5*x7569);
IkReal x7574=((1.0)*sj6*x7563);
evalcond[0]=(((r20*x7572))+((x7567*x7570))+((r22*x7571))+(((-1.0)*r21*sj6*x7569))+((r20*x7563*x7565)));
evalcond[1]=((((-1.0)*r11*sj6*x7569))+((r12*x7571))+((r10*x7572))+((x7563*x7568))+((r10*x7563*x7565)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x7569))+((r00*x7572))+((x7566*x7570))+((r02*x7571))+((r00*x7563*x7565)));
evalcond[3]=(((r20*x7570))+(((-1.0)*cj6*x7567*x7569))+(((-1.0)*r21*x7574))+(((-1.0)*r22*x7573))+(((-1.0)*r20*x7565*x7569)));
evalcond[4]=((((-1.0)*r01*x7574))+((r00*x7570))+(((-1.0)*r00*x7565*x7569))+(((-1.0)*cj6*x7566*x7569))+(((-1.0)*r02*x7573)));
evalcond[5]=((-1.0)+(((-1.0)*x7568*x7569))+(((-1.0)*r10*x7565*x7569))+((r10*x7570))+(((-1.0)*r12*x7573))+(((-1.0)*r11*x7574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7575=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7575;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x7575);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7576=((1.0)*sj5);
IkReal x7577=(((cj5*r12))+(((-1.0)*r10*sj6*x7576))+(((-1.0)*cj6*r11*x7576)));
j4eval[0]=x7577;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x7577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7578=r11*r11;
IkReal x7579=cj5*cj5;
IkReal x7580=cj6*cj6;
IkReal x7581=r10*r10;
IkReal x7582=r12*r12;
IkReal x7583=(r12*sj5);
IkReal x7584=(r11*sj6);
IkReal x7585=((1.0)*x7580);
IkReal x7586=(cj5*cj6*r11);
IkReal x7587=(cj5*r10*sj6);
IkReal x7588=((2.0)*cj6*r10);
IkReal x7589=(x7579*x7581);
IkReal x7590=((((-1.0)*x7585*x7589))+(((-1.0)*x7584*x7588))+(((-1.0)*x7579*x7582))+(((2.0)*x7583*x7587))+(((2.0)*x7583*x7586))+x7578+x7589+x7582+((x7578*x7579*x7580))+((x7579*x7584*x7588))+(((-1.0)*x7578*x7585))+((x7580*x7581)));
j4eval[0]=x7590;
j4eval[1]=((IKabs((x7586+x7587+x7583)))+(IKabs(((((-1.0)*cj6*r10))+x7584))));
j4eval[2]=IKsign(x7590);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7591=r11*r11;
IkReal x7592=cj5*cj5;
IkReal x7593=cj6*cj6;
IkReal x7594=r10*r10;
IkReal x7595=r12*r12;
IkReal x7596=(r10*sj6);
IkReal x7597=(r12*sj5);
IkReal x7598=((1.0)*x7593);
IkReal x7599=(cj5*cj6*r11);
IkReal x7600=((2.0)*cj6*r11);
IkReal x7601=(x7592*x7594);
CheckValue<IkReal> x7602=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7592*x7595))+(((-1.0)*x7591*x7598))+((x7592*x7596*x7600))+(((-1.0)*x7596*x7600))+((x7591*x7592*x7593))+(((2.0)*cj5*x7596*x7597))+x7595+x7591+(((-1.0)*x7598*x7601))+((x7593*x7594))+x7601+(((2.0)*x7597*x7599)))),-1);
if(!x7602.valid){
continue;
}
CheckValue<IkReal> x7603 = IKatan2WithCheck(IkReal((((cj5*x7596))+x7599+x7597)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7602.value)))+(x7603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7604=IKcos(j4);
IkReal x7605=IKsin(j4);
IkReal x7606=(cj5*sj6);
IkReal x7607=(cj5*r01);
IkReal x7608=(cj5*r21);
IkReal x7609=(cj5*cj6*r11);
IkReal x7610=((1.0)*x7605);
IkReal x7611=(cj6*x7604);
IkReal x7612=(sj5*x7604);
IkReal x7613=(cj6*x7605);
IkReal x7614=(sj5*x7610);
IkReal x7615=((1.0)*sj6*x7604);
evalcond[0]=(((r20*x7613))+((x7608*x7611))+(((-1.0)*r21*sj6*x7610))+((r22*x7612))+((r20*x7604*x7606)));
evalcond[1]=(((r12*x7612))+((r10*x7604*x7606))+((x7604*x7609))+(((-1.0)*r11*sj6*x7610))+((r10*x7613)));
evalcond[2]=((1.0)+((r00*x7613))+(((-1.0)*r01*sj6*x7610))+((x7607*x7611))+((r02*x7612))+((r00*x7604*x7606)));
evalcond[3]=((((-1.0)*r20*x7606*x7610))+((r20*x7611))+(((-1.0)*cj6*x7608*x7610))+(((-1.0)*r22*x7614))+(((-1.0)*r21*x7615)));
evalcond[4]=(((r00*x7611))+(((-1.0)*cj6*x7607*x7610))+(((-1.0)*r00*x7606*x7610))+(((-1.0)*r01*x7615))+(((-1.0)*r02*x7614)));
evalcond[5]=((1.0)+(((-1.0)*r11*x7615))+(((-1.0)*r12*x7614))+(((-1.0)*r10*x7606*x7610))+((r10*x7611))+(((-1.0)*x7609*x7610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7616=((1.0)*sj5);
CheckValue<IkReal> x7617=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x7616))+(((-1.0)*cj6*r11*x7616)))),-1);
if(!x7617.valid){
continue;
}
CheckValue<IkReal> x7618 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7617.value)))+(x7618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7619=IKcos(j4);
IkReal x7620=IKsin(j4);
IkReal x7621=(cj5*sj6);
IkReal x7622=(cj5*r01);
IkReal x7623=(cj5*r21);
IkReal x7624=(cj5*cj6*r11);
IkReal x7625=((1.0)*x7620);
IkReal x7626=(cj6*x7619);
IkReal x7627=(sj5*x7619);
IkReal x7628=(cj6*x7620);
IkReal x7629=(sj5*x7625);
IkReal x7630=((1.0)*sj6*x7619);
evalcond[0]=((((-1.0)*r21*sj6*x7625))+((r20*x7628))+((r22*x7627))+((r20*x7619*x7621))+((x7623*x7626)));
evalcond[1]=(((r10*x7619*x7621))+((r10*x7628))+(((-1.0)*r11*sj6*x7625))+((r12*x7627))+((x7619*x7624)));
evalcond[2]=((1.0)+((r02*x7627))+((r00*x7628))+((r00*x7619*x7621))+((x7622*x7626))+(((-1.0)*r01*sj6*x7625)));
evalcond[3]=((((-1.0)*cj6*x7623*x7625))+((r20*x7626))+(((-1.0)*r20*x7621*x7625))+(((-1.0)*r21*x7630))+(((-1.0)*r22*x7629)));
evalcond[4]=(((r00*x7626))+(((-1.0)*r01*x7630))+(((-1.0)*cj6*x7622*x7625))+(((-1.0)*r00*x7621*x7625))+(((-1.0)*r02*x7629)));
evalcond[5]=((1.0)+(((-1.0)*r12*x7629))+(((-1.0)*x7624*x7625))+(((-1.0)*r10*x7621*x7625))+((r10*x7626))+(((-1.0)*r11*x7630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7631=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x7631.valid){
continue;
}
CheckValue<IkReal> x7632 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7631.value)))+(x7632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7633=IKcos(j4);
IkReal x7634=IKsin(j4);
IkReal x7635=(cj5*sj6);
IkReal x7636=(cj5*r01);
IkReal x7637=(cj5*r21);
IkReal x7638=(cj5*cj6*r11);
IkReal x7639=((1.0)*x7634);
IkReal x7640=(cj6*x7633);
IkReal x7641=(sj5*x7633);
IkReal x7642=(cj6*x7634);
IkReal x7643=(sj5*x7639);
IkReal x7644=((1.0)*sj6*x7633);
evalcond[0]=(((r22*x7641))+((x7637*x7640))+((r20*x7642))+(((-1.0)*r21*sj6*x7639))+((r20*x7633*x7635)));
evalcond[1]=(((x7633*x7638))+((r12*x7641))+((r10*x7642))+(((-1.0)*r11*sj6*x7639))+((r10*x7633*x7635)));
evalcond[2]=((1.0)+((r02*x7641))+((x7636*x7640))+(((-1.0)*r01*sj6*x7639))+((r00*x7633*x7635))+((r00*x7642)));
evalcond[3]=((((-1.0)*r22*x7643))+(((-1.0)*r21*x7644))+((r20*x7640))+(((-1.0)*r20*x7635*x7639))+(((-1.0)*cj6*x7637*x7639)));
evalcond[4]=((((-1.0)*r01*x7644))+(((-1.0)*r00*x7635*x7639))+(((-1.0)*r02*x7643))+((r00*x7640))+(((-1.0)*cj6*x7636*x7639)));
evalcond[5]=((1.0)+(((-1.0)*r10*x7635*x7639))+(((-1.0)*x7638*x7639))+(((-1.0)*r12*x7643))+((r10*x7640))+(((-1.0)*r11*x7644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7645=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7645;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x7645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7646=((1.0)*sj5);
IkReal x7647=((((-1.0)*r00*sj6*x7646))+(((-1.0)*cj6*r01*x7646))+((cj5*r02)));
j4eval[0]=x7647;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x7647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7648=cj6*cj6;
IkReal x7649=r01*r01;
IkReal x7650=cj5*cj5;
IkReal x7651=r00*r00;
IkReal x7652=r02*r02;
IkReal x7653=(r02*sj5);
IkReal x7654=(r01*sj6);
IkReal x7655=(cj6*r00);
IkReal x7656=(cj5*cj6*r01);
IkReal x7657=(cj5*r00*sj6);
IkReal x7658=((1.0)*x7650);
IkReal x7659=(x7648*x7651);
IkReal x7660=(x7648*x7649);
IkReal x7661=((((2.0)*x7653*x7657))+(((2.0)*x7653*x7656))+((x7650*x7660))+(((-2.0)*x7654*x7655))+(((2.0)*x7650*x7654*x7655))+((x7650*x7651))+(((-1.0)*x7660))+(((-1.0)*x7658*x7659))+(((-1.0)*x7652*x7658))+x7652+x7659+x7649);
j4eval[0]=x7661;
j4eval[1]=((IKabs(((((-1.0)*x7655))+x7654)))+(IKabs((x7653+x7656+x7657))));
j4eval[2]=IKsign(x7661);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7662=cj6*cj6;
IkReal x7663=r01*r01;
IkReal x7664=cj5*cj5;
IkReal x7665=r00*r00;
IkReal x7666=r02*r02;
IkReal x7667=(r00*sj6);
IkReal x7668=(r02*sj5);
IkReal x7669=((2.0)*cj6*r01);
IkReal x7670=((1.0)*x7664);
IkReal x7671=(x7662*x7665);
IkReal x7672=(x7662*x7663);
CheckValue<IkReal> x7673=IKPowWithIntegerCheck(IKsign((((cj5*x7668*x7669))+(((-1.0)*x7666*x7670))+((x7664*x7665))+(((-1.0)*x7670*x7671))+((x7664*x7672))+(((-1.0)*x7672))+(((2.0)*cj5*x7667*x7668))+((x7664*x7667*x7669))+x7671+x7663+x7666+(((-1.0)*x7667*x7669)))),-1);
if(!x7673.valid){
continue;
}
CheckValue<IkReal> x7674 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+((cj5*x7667))+x7668)),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7673.value)))+(x7674.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7675=IKcos(j4);
IkReal x7676=IKsin(j4);
IkReal x7677=(cj5*sj6);
IkReal x7678=(cj5*r21);
IkReal x7679=(cj5*r01);
IkReal x7680=(cj5*cj6*r11);
IkReal x7681=((1.0)*x7676);
IkReal x7682=(cj6*x7675);
IkReal x7683=(sj5*x7675);
IkReal x7684=(cj6*x7676);
IkReal x7685=(sj5*x7681);
IkReal x7686=((1.0)*sj6*x7675);
evalcond[0]=((((-1.0)*r21*sj6*x7681))+((r20*x7675*x7677))+((r20*x7684))+((x7678*x7682))+((r22*x7683)));
evalcond[1]=(((x7679*x7682))+((r00*x7684))+(((-1.0)*r01*sj6*x7681))+((r00*x7675*x7677))+((r02*x7683)));
evalcond[2]=((-1.0)+((r12*x7683))+((r10*x7675*x7677))+((r10*x7684))+(((-1.0)*r11*sj6*x7681))+((x7675*x7680)));
evalcond[3]=((((-1.0)*r22*x7685))+((r20*x7682))+(((-1.0)*cj6*x7678*x7681))+(((-1.0)*r20*x7677*x7681))+(((-1.0)*r21*x7686)));
evalcond[4]=((((-1.0)*r10*x7677*x7681))+((r10*x7682))+(((-1.0)*r11*x7686))+(((-1.0)*x7680*x7681))+(((-1.0)*r12*x7685)));
evalcond[5]=((1.0)+(((-1.0)*r00*x7677*x7681))+(((-1.0)*r01*x7686))+((r00*x7682))+(((-1.0)*cj6*x7679*x7681))+(((-1.0)*r02*x7685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7687=((1.0)*sj5);
CheckValue<IkReal> x7688 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7688.valid){
continue;
}
CheckValue<IkReal> x7689=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x7687))+(((-1.0)*r00*sj6*x7687))+((cj5*r02)))),-1);
if(!x7689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7688.value)+(((1.5707963267949)*(x7689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7690=IKcos(j4);
IkReal x7691=IKsin(j4);
IkReal x7692=(cj5*sj6);
IkReal x7693=(cj5*r21);
IkReal x7694=(cj5*r01);
IkReal x7695=(cj5*cj6*r11);
IkReal x7696=((1.0)*x7691);
IkReal x7697=(cj6*x7690);
IkReal x7698=(sj5*x7690);
IkReal x7699=(cj6*x7691);
IkReal x7700=(sj5*x7696);
IkReal x7701=((1.0)*sj6*x7690);
evalcond[0]=((((-1.0)*r21*sj6*x7696))+((x7693*x7697))+((r20*x7699))+((r22*x7698))+((r20*x7690*x7692)));
evalcond[1]=(((r02*x7698))+((r00*x7690*x7692))+((r00*x7699))+((x7694*x7697))+(((-1.0)*r01*sj6*x7696)));
evalcond[2]=((-1.0)+((x7690*x7695))+((r12*x7698))+((r10*x7690*x7692))+((r10*x7699))+(((-1.0)*r11*sj6*x7696)));
evalcond[3]=((((-1.0)*r22*x7700))+(((-1.0)*r21*x7701))+((r20*x7697))+(((-1.0)*cj6*x7693*x7696))+(((-1.0)*r20*x7692*x7696)));
evalcond[4]=((((-1.0)*x7695*x7696))+(((-1.0)*r10*x7692*x7696))+((r10*x7697))+(((-1.0)*r11*x7701))+(((-1.0)*r12*x7700)));
evalcond[5]=((1.0)+(((-1.0)*r01*x7701))+((r00*x7697))+(((-1.0)*r00*x7692*x7696))+(((-1.0)*r02*x7700))+(((-1.0)*cj6*x7694*x7696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7702 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7702.valid){
continue;
}
CheckValue<IkReal> x7703=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x7703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7702.value)+(((1.5707963267949)*(x7703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7704=IKcos(j4);
IkReal x7705=IKsin(j4);
IkReal x7706=(cj5*sj6);
IkReal x7707=(cj5*r21);
IkReal x7708=(cj5*r01);
IkReal x7709=(cj5*cj6*r11);
IkReal x7710=((1.0)*x7705);
IkReal x7711=(cj6*x7704);
IkReal x7712=(sj5*x7704);
IkReal x7713=(cj6*x7705);
IkReal x7714=(sj5*x7710);
IkReal x7715=((1.0)*sj6*x7704);
evalcond[0]=((((-1.0)*r21*sj6*x7710))+((r20*x7713))+((x7707*x7711))+((r22*x7712))+((r20*x7704*x7706)));
evalcond[1]=(((r02*x7712))+(((-1.0)*r01*sj6*x7710))+((r00*x7704*x7706))+((x7708*x7711))+((r00*x7713)));
evalcond[2]=((-1.0)+((r12*x7712))+(((-1.0)*r11*sj6*x7710))+((r10*x7704*x7706))+((x7704*x7709))+((r10*x7713)));
evalcond[3]=((((-1.0)*r22*x7714))+((r20*x7711))+(((-1.0)*r21*x7715))+(((-1.0)*cj6*x7707*x7710))+(((-1.0)*r20*x7706*x7710)));
evalcond[4]=((((-1.0)*r11*x7715))+(((-1.0)*r12*x7714))+(((-1.0)*r10*x7706*x7710))+((r10*x7711))+(((-1.0)*x7709*x7710)));
evalcond[5]=((1.0)+(((-1.0)*r00*x7706*x7710))+(((-1.0)*r01*x7715))+(((-1.0)*cj6*x7708*x7710))+(((-1.0)*r02*x7714))+((r00*x7711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7716=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x7716;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x7716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7717=((1.0)*cj6);
IkReal x7718=(((cj5*r22))+(((-1.0)*r21*sj5*x7717))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x7718;
j4eval[1]=IKsign(x7718);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x7717))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7719=cj6*cj6;
IkReal x7720=cj5*cj5;
IkReal x7721=r00*r00;
IkReal x7722=r01*r01;
IkReal x7723=r02*r02;
IkReal x7724=(r00*sj6);
IkReal x7725=((2.0)*cj6*r01);
IkReal x7726=(cj5*r02*sj5);
IkReal x7727=((1.0)*x7719);
IkReal x7728=(x7720*x7721);
IkReal x7729=((((-1.0)*x7725*x7726))+((x7724*x7725))+(((-2.0)*x7724*x7726))+(((-1.0)*x7720*x7724*x7725))+((x7720*x7723))+((x7719*x7728))+((x7719*x7722))+(((-1.0)*x7720*x7722*x7727))+(((-1.0)*x7728))+(((-1.0)*x7722))+(((-1.0)*x7723))+(((-1.0)*x7721*x7727)));
j4eval[0]=x7729;
j4eval[1]=((IKabs((((cj5*x7724))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x7729);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7730=cj6*cj6;
IkReal x7731=cj5*cj5;
IkReal x7732=r00*r00;
IkReal x7733=r01*r01;
IkReal x7734=r02*r02;
IkReal x7735=(r01*sj6);
IkReal x7736=(cj6*r00);
IkReal x7737=(cj5*cj6*r01);
IkReal x7738=((2.0)*r02*sj5);
IkReal x7739=((1.0)*x7730);
IkReal x7740=(cj5*r00*sj6);
IkReal x7741=(x7731*x7732);
CheckValue<IkReal> x7742=IKPowWithIntegerCheck(IKsign((((x7730*x7741))+(((-2.0)*x7731*x7735*x7736))+(((-1.0)*x7732*x7739))+(((-1.0)*x7734))+(((-1.0)*x7733))+((x7731*x7734))+((x7730*x7733))+(((-1.0)*x7731*x7733*x7739))+(((-1.0)*x7738*x7740))+(((-1.0)*x7741))+(((2.0)*x7735*x7736))+(((-1.0)*x7737*x7738)))),-1);
if(!x7742.valid){
continue;
}
CheckValue<IkReal> x7743 = IKatan2WithCheck(IkReal((((r02*sj5))+x7737+x7740)),IkReal(((((-1.0)*x7736))+x7735)),IKFAST_ATAN2_MAGTHRESH);
if(!x7743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7742.value)))+(x7743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7744=IKcos(j4);
IkReal x7745=IKsin(j4);
IkReal x7746=(cj5*sj6);
IkReal x7747=(cj5*r21);
IkReal x7748=(cj5*r01);
IkReal x7749=(cj5*cj6*r11);
IkReal x7750=((1.0)*x7745);
IkReal x7751=(cj6*x7744);
IkReal x7752=(sj5*x7744);
IkReal x7753=(cj6*x7745);
IkReal x7754=(sj5*x7750);
IkReal x7755=((1.0)*sj6*x7744);
evalcond[0]=((((-1.0)*r21*sj6*x7750))+((r20*x7753))+((x7747*x7751))+((r20*x7744*x7746))+((r22*x7752)));
evalcond[1]=(((r00*x7753))+(((-1.0)*r01*sj6*x7750))+((r02*x7752))+((r00*x7744*x7746))+((x7748*x7751)));
evalcond[2]=((1.0)+((r10*x7753))+((r10*x7744*x7746))+(((-1.0)*r11*sj6*x7750))+((r12*x7752))+((x7744*x7749)));
evalcond[3]=((((-1.0)*r22*x7754))+((r20*x7751))+(((-1.0)*r20*x7746*x7750))+(((-1.0)*cj6*x7747*x7750))+(((-1.0)*r21*x7755)));
evalcond[4]=(((r10*x7751))+(((-1.0)*r10*x7746*x7750))+(((-1.0)*r11*x7755))+(((-1.0)*r12*x7754))+(((-1.0)*x7749*x7750)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x7748*x7750))+((r00*x7751))+(((-1.0)*r02*x7754))+(((-1.0)*r00*x7746*x7750))+(((-1.0)*r01*x7755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7756=((1.0)*cj6);
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x7756))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x7757.valid){
continue;
}
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x7756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7757.value)))+(x7758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7759=IKcos(j4);
IkReal x7760=IKsin(j4);
IkReal x7761=(cj5*sj6);
IkReal x7762=(cj5*r21);
IkReal x7763=(cj5*r01);
IkReal x7764=(cj5*cj6*r11);
IkReal x7765=((1.0)*x7760);
IkReal x7766=(cj6*x7759);
IkReal x7767=(sj5*x7759);
IkReal x7768=(cj6*x7760);
IkReal x7769=(sj5*x7765);
IkReal x7770=((1.0)*sj6*x7759);
evalcond[0]=(((r22*x7767))+(((-1.0)*r21*sj6*x7765))+((r20*x7759*x7761))+((x7762*x7766))+((r20*x7768)));
evalcond[1]=(((r00*x7759*x7761))+((r02*x7767))+((x7763*x7766))+(((-1.0)*r01*sj6*x7765))+((r00*x7768)));
evalcond[2]=((1.0)+((r10*x7759*x7761))+(((-1.0)*r11*sj6*x7765))+((r12*x7767))+((r10*x7768))+((x7759*x7764)));
evalcond[3]=((((-1.0)*r20*x7761*x7765))+(((-1.0)*r22*x7769))+(((-1.0)*cj6*x7762*x7765))+((r20*x7766))+(((-1.0)*r21*x7770)));
evalcond[4]=((((-1.0)*r10*x7761*x7765))+(((-1.0)*x7764*x7765))+(((-1.0)*r11*x7770))+(((-1.0)*r12*x7769))+((r10*x7766)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x7769))+(((-1.0)*r00*x7761*x7765))+(((-1.0)*r01*x7770))+(((-1.0)*cj6*x7763*x7765))+((r00*x7766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7771=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x7771.valid){
continue;
}
CheckValue<IkReal> x7772 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7771.value)))+(x7772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7773=IKcos(j4);
IkReal x7774=IKsin(j4);
IkReal x7775=(cj5*sj6);
IkReal x7776=(cj5*r21);
IkReal x7777=(cj5*r01);
IkReal x7778=(cj5*cj6*r11);
IkReal x7779=((1.0)*x7774);
IkReal x7780=(cj6*x7773);
IkReal x7781=(sj5*x7773);
IkReal x7782=(cj6*x7774);
IkReal x7783=(sj5*x7779);
IkReal x7784=((1.0)*sj6*x7773);
evalcond[0]=((((-1.0)*r21*sj6*x7779))+((r22*x7781))+((r20*x7773*x7775))+((x7776*x7780))+((r20*x7782)));
evalcond[1]=(((r00*x7773*x7775))+((r00*x7782))+((x7777*x7780))+((r02*x7781))+(((-1.0)*r01*sj6*x7779)));
evalcond[2]=((1.0)+((r10*x7782))+(((-1.0)*r11*sj6*x7779))+((r12*x7781))+((r10*x7773*x7775))+((x7773*x7778)));
evalcond[3]=((((-1.0)*r21*x7784))+(((-1.0)*r20*x7775*x7779))+(((-1.0)*r22*x7783))+((r20*x7780))+(((-1.0)*cj6*x7776*x7779)));
evalcond[4]=(((r10*x7780))+(((-1.0)*x7778*x7779))+(((-1.0)*r10*x7775*x7779))+(((-1.0)*r11*x7784))+(((-1.0)*r12*x7783)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x7784))+((r00*x7780))+(((-1.0)*r02*x7783))+(((-1.0)*r00*x7775*x7779))+(((-1.0)*cj6*x7777*x7779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7785=cj5*cj5;
IkReal x7786=cj6*cj6;
IkReal x7787=(cj6*r21);
IkReal x7788=(r20*sj6);
IkReal x7789=(r00*sj6);
IkReal x7790=(r22*sj5);
IkReal x7791=(r02*r22);
IkReal x7792=(cj6*r01);
IkReal x7793=(cj5*sj0);
IkReal x7794=(cj5*r02*sj5);
IkReal x7795=(r01*x7785);
IkReal x7796=(r21*x7786);
IkReal x7797=(r00*r20*x7785);
CheckValue<IkReal> x7798 = IKatan2WithCheck(IkReal((((x7788*x7793))+((x7787*x7793))+((sj0*x7790)))),IkReal((((r21*sj0*sj6))+(((-1.0)*cj6*r20*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7798.valid){
continue;
}
CheckValue<IkReal> x7799=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7786*x7797))+((r00*r20*x7786))+((x7788*x7794))+((cj5*x7790*x7792))+(((-1.0)*x7788*x7792))+(((-1.0)*x7785*x7791))+((x7785*x7787*x7789))+((r01*r21))+((x7795*x7796))+((cj5*x7789*x7790))+(((-1.0)*x7787*x7789))+((x7787*x7794))+((x7785*x7788*x7792))+x7791+x7797+(((-1.0)*r01*x7796)))),-1);
if(!x7799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7798.value)+(((1.5707963267949)*(x7799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7800=IKcos(j4);
IkReal x7801=IKsin(j4);
IkReal x7802=((1.0)*cj0);
IkReal x7803=(cj5*r11);
IkReal x7804=((1.0)*sj6);
IkReal x7805=(cj5*r01);
IkReal x7806=(cj6*x7800);
IkReal x7807=(sj5*x7800);
IkReal x7808=(r21*x7801);
IkReal x7809=(cj6*x7801);
IkReal x7810=((1.0)*sj5*x7801);
IkReal x7811=(cj5*sj6*x7800);
IkReal x7812=(cj5*x7801*x7804);
evalcond[0]=(((cj5*r21*x7806))+((r20*x7811))+((r22*x7807))+(((-1.0)*x7804*x7808))+((r20*x7809)));
evalcond[1]=((((-1.0)*r20*x7812))+(((-1.0)*r22*x7810))+(((-1.0)*r21*x7800*x7804))+(((-1.0)*cj5*cj6*x7808))+((r20*x7806)));
evalcond[2]=(((r00*x7809))+(((-1.0)*r01*x7801*x7804))+(((-1.0)*x7802))+((r02*x7807))+((r00*x7811))+((x7805*x7806)));
evalcond[3]=((((-1.0)*sj0))+((r10*x7811))+((x7803*x7806))+((r12*x7807))+(((-1.0)*r11*x7801*x7804))+((r10*x7809)));
evalcond[4]=(sj0+((r00*x7806))+(((-1.0)*r02*x7810))+(((-1.0)*x7805*x7809))+(((-1.0)*r00*x7812))+(((-1.0)*r01*x7800*x7804)));
evalcond[5]=((((-1.0)*x7803*x7809))+(((-1.0)*r12*x7810))+(((-1.0)*x7802))+(((-1.0)*r10*x7812))+(((-1.0)*r11*x7800*x7804))+((r10*x7806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7813=(sj0*sj6);
IkReal x7814=((1.0)*cj6);
CheckValue<IkReal> x7815 = IKatan2WithCheck(IkReal((((cj5*r20*x7813))+((r22*sj0*sj5))+((cj5*cj6*r21*sj0)))),IkReal((((r21*x7813))+(((-1.0)*r20*sj0*x7814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7815.valid){
continue;
}
CheckValue<IkReal> x7816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x7814))+((cj5*r02)))),-1);
if(!x7816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7815.value)+(((1.5707963267949)*(x7816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7817=IKcos(j4);
IkReal x7818=IKsin(j4);
IkReal x7819=((1.0)*cj0);
IkReal x7820=(cj5*r11);
IkReal x7821=((1.0)*sj6);
IkReal x7822=(cj5*r01);
IkReal x7823=(cj6*x7817);
IkReal x7824=(sj5*x7817);
IkReal x7825=(r21*x7818);
IkReal x7826=(cj6*x7818);
IkReal x7827=((1.0)*sj5*x7818);
IkReal x7828=(cj5*sj6*x7817);
IkReal x7829=(cj5*x7818*x7821);
evalcond[0]=(((r20*x7826))+((r20*x7828))+(((-1.0)*x7821*x7825))+((r22*x7824))+((cj5*r21*x7823)));
evalcond[1]=((((-1.0)*cj5*cj6*x7825))+(((-1.0)*r20*x7829))+(((-1.0)*r21*x7817*x7821))+((r20*x7823))+(((-1.0)*r22*x7827)));
evalcond[2]=(((r02*x7824))+(((-1.0)*r01*x7818*x7821))+(((-1.0)*x7819))+((r00*x7826))+((r00*x7828))+((x7822*x7823)));
evalcond[3]=(((r10*x7826))+((r10*x7828))+(((-1.0)*sj0))+((x7820*x7823))+((r12*x7824))+(((-1.0)*r11*x7818*x7821)));
evalcond[4]=(sj0+(((-1.0)*r00*x7829))+(((-1.0)*r02*x7827))+((r00*x7823))+(((-1.0)*x7822*x7826))+(((-1.0)*r01*x7817*x7821)));
evalcond[5]=(((r10*x7823))+(((-1.0)*r11*x7817*x7821))+(((-1.0)*x7820*x7826))+(((-1.0)*x7819))+(((-1.0)*r10*x7829))+(((-1.0)*r12*x7827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7830=(cj0*r20);
IkReal x7831=(cj0*r21);
CheckValue<IkReal> x7832 = IKatan2WithCheck(IkReal((((cj5*sj6*x7830))+((cj0*r22*sj5))+((cj5*cj6*x7831)))),IkReal((((sj6*x7831))+(((-1.0)*cj6*x7830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7832.valid){
continue;
}
CheckValue<IkReal> x7833=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7832.value)+(((1.5707963267949)*(x7833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7834=IKcos(j4);
IkReal x7835=IKsin(j4);
IkReal x7836=((1.0)*cj0);
IkReal x7837=(cj5*r11);
IkReal x7838=((1.0)*sj6);
IkReal x7839=(cj5*r01);
IkReal x7840=(cj6*x7834);
IkReal x7841=(sj5*x7834);
IkReal x7842=(r21*x7835);
IkReal x7843=(cj6*x7835);
IkReal x7844=((1.0)*sj5*x7835);
IkReal x7845=(cj5*sj6*x7834);
IkReal x7846=(cj5*x7835*x7838);
evalcond[0]=((((-1.0)*x7838*x7842))+((r20*x7843))+((r20*x7845))+((r22*x7841))+((cj5*r21*x7840)));
evalcond[1]=((((-1.0)*r21*x7834*x7838))+(((-1.0)*r22*x7844))+((r20*x7840))+(((-1.0)*cj5*cj6*x7842))+(((-1.0)*r20*x7846)));
evalcond[2]=(((x7839*x7840))+((r00*x7845))+((r00*x7843))+(((-1.0)*x7836))+((r02*x7841))+(((-1.0)*r01*x7835*x7838)));
evalcond[3]=((((-1.0)*sj0))+((r12*x7841))+((r10*x7843))+((r10*x7845))+(((-1.0)*r11*x7835*x7838))+((x7837*x7840)));
evalcond[4]=(sj0+(((-1.0)*r00*x7846))+((r00*x7840))+(((-1.0)*r02*x7844))+(((-1.0)*x7839*x7843))+(((-1.0)*r01*x7834*x7838)));
evalcond[5]=(((r10*x7840))+(((-1.0)*r11*x7834*x7838))+(((-1.0)*x7837*x7843))+(((-1.0)*r12*x7844))+(((-1.0)*r10*x7846))+(((-1.0)*x7836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7847=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x7847))+(((-1.0)*cj6*r11*x7847)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x7847))+(((-1.0)*r00*sj6*x7847))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x7847))+(((-1.0)*cj6*r11*x7847))))+IKsqr(((((-1.0)*cj6*r01*x7847))+(((-1.0)*r00*sj6*x7847))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x7847))+(((-1.0)*cj6*r11*x7847))), ((((-1.0)*cj6*r01*x7847))+(((-1.0)*r00*sj6*x7847))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7848=((1.0)*sj5);
evalcond[0]=(((cj5*r12))+(((-1.0)*r10*sj6*x7848))+(((-1.0)*cj6*r11*x7848))+(((-1.0)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*cj6*r01*x7848))+(((-1.0)*r00*sj6*x7848))+(((-1.0)*(IKcos(j0))))+((cj5*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7849=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7849;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x7849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7850=((1.0)*cj6);
IkReal x7851=((((-1.0)*r00*sj5*sj6))+((cj5*r02))+(((-1.0)*r01*sj5*x7850)));
j4eval[0]=x7851;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r10*x7850))+((r11*sj6))))));
j4eval[2]=IKsign(x7851);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7852=r11*r11;
IkReal x7853=cj5*cj5;
IkReal x7854=cj6*cj6;
IkReal x7855=r10*r10;
IkReal x7856=r12*r12;
IkReal x7857=(cj6*r10);
IkReal x7858=(r12*sj5);
IkReal x7859=((2.0)*r11);
IkReal x7860=(cj5*cj6);
IkReal x7861=(cj0*sj6);
IkReal x7862=(cj5*r10);
IkReal x7863=((1.0)*x7854);
IkReal x7864=(x7853*x7855);
IkReal x7865=((((-1.0)*x7863*x7864))+((sj6*x7853*x7857*x7859))+((x7858*x7859*x7860))+(((-1.0)*x7852*x7863))+(((2.0)*sj6*x7858*x7862))+x7864+x7852+x7856+(((-1.0)*sj6*x7857*x7859))+((x7852*x7853*x7854))+((x7854*x7855))+(((-1.0)*x7853*x7856)));
j4eval[0]=x7865;
j4eval[1]=IKsign(x7865);
j4eval[2]=((IKabs((((r11*x7861))+(((-1.0)*cj0*x7857)))))+(IKabs((((x7861*x7862))+((cj0*x7858))+((cj0*r11*x7860))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7866=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7866;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x7866);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7867=((1.0)*cj6);
IkReal x7868=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x7867))+((cj5*r02)));
j4eval[0]=x7868;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs((((r11*sj6))+(((-1.0)*r10*x7867))))));
j4eval[2]=IKsign(x7868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7869=cj6*cj6;
IkReal x7870=cj5*cj5;
IkReal x7871=r00*r00;
IkReal x7872=r01*r01;
IkReal x7873=r02*r02;
IkReal x7874=(r00*sj6);
IkReal x7875=((2.0)*cj6*r01);
IkReal x7876=(cj5*r02*sj5);
IkReal x7877=((1.0)*x7869);
IkReal x7878=(x7870*x7871);
IkReal x7879=((((-1.0)*x7875*x7876))+((x7874*x7875))+(((-1.0)*x7878))+(((-1.0)*x7872))+(((-1.0)*x7873))+(((-1.0)*x7871*x7877))+((x7869*x7872))+((x7869*x7878))+(((-2.0)*x7874*x7876))+(((-1.0)*x7870*x7874*x7875))+(((-1.0)*x7870*x7872*x7877))+((x7870*x7873)));
j4eval[0]=x7879;
j4eval[1]=((IKabs((((r01*sj6))+(((-1.0)*cj6*r00)))))+(IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x7874))))));
j4eval[2]=IKsign(x7879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7880=cj6*cj6;
IkReal x7881=cj5*cj5;
IkReal x7882=r00*r00;
IkReal x7883=r01*r01;
IkReal x7884=r02*r02;
IkReal x7885=(r01*sj6);
IkReal x7886=(cj6*r00);
IkReal x7887=(cj5*cj6*r01);
IkReal x7888=((2.0)*r02*sj5);
IkReal x7889=((1.0)*x7880);
IkReal x7890=(cj5*r00*sj6);
IkReal x7891=(x7881*x7882);
CheckValue<IkReal> x7892 = IKatan2WithCheck(IkReal((((r02*sj5))+x7887+x7890)),IkReal(((((-1.0)*x7886))+x7885)),IKFAST_ATAN2_MAGTHRESH);
if(!x7892.valid){
continue;
}
CheckValue<IkReal> x7893=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7882*x7889))+((x7880*x7891))+(((-1.0)*x7888*x7890))+(((-1.0)*x7881*x7883*x7889))+(((-1.0)*x7884))+(((-1.0)*x7883))+((x7881*x7884))+((x7880*x7883))+(((2.0)*x7885*x7886))+(((-1.0)*x7887*x7888))+(((-2.0)*x7881*x7885*x7886))+(((-1.0)*x7891)))),-1);
if(!x7893.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7892.value)+(((1.5707963267949)*(x7893.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7894=IKcos(j4);
IkReal x7895=IKsin(j4);
IkReal x7896=(cj5*r11);
IkReal x7897=(cj5*r10);
IkReal x7898=(cj5*r00);
IkReal x7899=(cj5*r01);
IkReal x7900=(cj5*r20);
IkReal x7901=(cj5*r21);
IkReal x7902=(cj6*x7894);
IkReal x7903=(sj5*x7894);
IkReal x7904=(cj6*x7895);
IkReal x7905=(sj6*x7894);
IkReal x7906=((1.0)*sj5*x7895);
IkReal x7907=((1.0)*sj6*x7895);
IkReal x7908=((1.0)*x7905);
evalcond[0]=(((r02*x7903))+((x7899*x7902))+((x7898*x7905))+(((-1.0)*r01*x7907))+((r00*x7904)));
evalcond[1]=(((x7897*x7905))+(((-1.0)*r11*x7907))+((r10*x7904))+((x7896*x7902))+((r12*x7903)));
evalcond[2]=((1.0)+(((-1.0)*r21*x7907))+((r22*x7903))+((x7901*x7902))+((x7900*x7905))+((r20*x7904)));
evalcond[3]=((((-1.0)*r21*x7908))+(((-1.0)*r22*x7906))+(((-1.0)*x7901*x7904))+(((-1.0)*x7900*x7907))+((r20*x7902)));
evalcond[4]=((((-1.0)*r11*x7908))+(((-1.0)*r12*x7906))+((r10*x7902))+(((-1.0)*x7896*x7904))+(((-1.0)*x7897*x7907)));
evalcond[5]=((-1.0)+(((-1.0)*x7898*x7907))+(((-1.0)*x7899*x7904))+(((-1.0)*r01*x7908))+((r00*x7902))+(((-1.0)*r02*x7906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7909=((1.0)*sj5);
CheckValue<IkReal> x7910 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7910.valid){
continue;
}
CheckValue<IkReal> x7911=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x7909))+(((-1.0)*r00*sj6*x7909))+((cj5*r02)))),-1);
if(!x7911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7910.value)+(((1.5707963267949)*(x7911.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7912=IKcos(j4);
IkReal x7913=IKsin(j4);
IkReal x7914=(cj5*r11);
IkReal x7915=(cj5*r10);
IkReal x7916=(cj5*r00);
IkReal x7917=(cj5*r01);
IkReal x7918=(cj5*r20);
IkReal x7919=(cj5*r21);
IkReal x7920=(cj6*x7912);
IkReal x7921=(sj5*x7912);
IkReal x7922=(cj6*x7913);
IkReal x7923=(sj6*x7912);
IkReal x7924=((1.0)*sj5*x7913);
IkReal x7925=((1.0)*sj6*x7913);
IkReal x7926=((1.0)*x7923);
evalcond[0]=(((r02*x7921))+((x7917*x7920))+((r00*x7922))+((x7916*x7923))+(((-1.0)*r01*x7925)));
evalcond[1]=(((r10*x7922))+((r12*x7921))+(((-1.0)*r11*x7925))+((x7914*x7920))+((x7915*x7923)));
evalcond[2]=((1.0)+((r22*x7921))+((r20*x7922))+(((-1.0)*r21*x7925))+((x7918*x7923))+((x7919*x7920)));
evalcond[3]=((((-1.0)*x7919*x7922))+(((-1.0)*r22*x7924))+((r20*x7920))+(((-1.0)*r21*x7926))+(((-1.0)*x7918*x7925)));
evalcond[4]=(((r10*x7920))+(((-1.0)*r11*x7926))+(((-1.0)*r12*x7924))+(((-1.0)*x7914*x7922))+(((-1.0)*x7915*x7925)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x7924))+(((-1.0)*x7917*x7922))+((r00*x7920))+(((-1.0)*r01*x7926))+(((-1.0)*x7916*x7925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7927 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7927.valid){
continue;
}
CheckValue<IkReal> x7928=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7927.value)+(((1.5707963267949)*(x7928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7929=IKcos(j4);
IkReal x7930=IKsin(j4);
IkReal x7931=(cj5*r11);
IkReal x7932=(cj5*r10);
IkReal x7933=(cj5*r00);
IkReal x7934=(cj5*r01);
IkReal x7935=(cj5*r20);
IkReal x7936=(cj5*r21);
IkReal x7937=(cj6*x7929);
IkReal x7938=(sj5*x7929);
IkReal x7939=(cj6*x7930);
IkReal x7940=(sj6*x7929);
IkReal x7941=((1.0)*sj5*x7930);
IkReal x7942=((1.0)*sj6*x7930);
IkReal x7943=((1.0)*x7940);
evalcond[0]=((((-1.0)*r01*x7942))+((x7933*x7940))+((r02*x7938))+((r00*x7939))+((x7934*x7937)));
evalcond[1]=(((x7932*x7940))+(((-1.0)*r11*x7942))+((r10*x7939))+((r12*x7938))+((x7931*x7937)));
evalcond[2]=((1.0)+((x7935*x7940))+((r20*x7939))+(((-1.0)*r21*x7942))+((x7936*x7937))+((r22*x7938)));
evalcond[3]=((((-1.0)*r22*x7941))+(((-1.0)*x7935*x7942))+((r20*x7937))+(((-1.0)*r21*x7943))+(((-1.0)*x7936*x7939)));
evalcond[4]=((((-1.0)*x7932*x7942))+(((-1.0)*r11*x7943))+((r10*x7937))+(((-1.0)*r12*x7941))+(((-1.0)*x7931*x7939)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x7943))+(((-1.0)*r02*x7941))+((r00*x7937))+(((-1.0)*x7934*x7939))+(((-1.0)*x7933*x7942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7944=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7944;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x7944);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7945=((1.0)*cj6);
IkReal x7946=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x7945))+((cj5*r02)));
j4eval[0]=x7946;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x7945)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x7946);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7947=cj6*cj6;
IkReal x7948=r01*r01;
IkReal x7949=cj5*cj5;
IkReal x7950=r00*r00;
IkReal x7951=r02*r02;
IkReal x7952=(r02*sj5);
IkReal x7953=(r01*sj6);
IkReal x7954=(cj6*r00);
IkReal x7955=(cj5*cj6*r01);
IkReal x7956=(cj5*r00*sj6);
IkReal x7957=((1.0)*x7949);
IkReal x7958=(x7947*x7950);
IkReal x7959=(x7947*x7948);
IkReal x7960=((((-1.0)*x7957*x7958))+(((2.0)*x7949*x7953*x7954))+(((-1.0)*x7959))+x7948+x7951+x7958+(((-1.0)*x7951*x7957))+((x7949*x7950))+((x7949*x7959))+(((2.0)*x7952*x7955))+(((2.0)*x7952*x7956))+(((-2.0)*x7953*x7954)));
j4eval[0]=x7960;
j4eval[1]=((IKabs((x7956+x7955+x7952)))+(IKabs(((((-1.0)*x7954))+x7953))));
j4eval[2]=IKsign(x7960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7961=cj6*cj6;
IkReal x7962=r01*r01;
IkReal x7963=cj5*cj5;
IkReal x7964=r00*r00;
IkReal x7965=r02*r02;
IkReal x7966=(r00*sj6);
IkReal x7967=(r02*sj5);
IkReal x7968=((2.0)*cj6*r01);
IkReal x7969=((1.0)*x7963);
IkReal x7970=(x7961*x7964);
IkReal x7971=(x7961*x7962);
CheckValue<IkReal> x7972=IKPowWithIntegerCheck(IKsign((((x7963*x7964))+((x7963*x7966*x7968))+(((-1.0)*x7966*x7968))+(((2.0)*cj5*x7966*x7967))+x7962+x7965+x7970+(((-1.0)*x7971))+(((-1.0)*x7965*x7969))+((cj5*x7967*x7968))+(((-1.0)*x7969*x7970))+((x7963*x7971)))),-1);
if(!x7972.valid){
continue;
}
CheckValue<IkReal> x7973 = IKatan2WithCheck(IkReal((x7967+((cj5*cj6*r01))+((cj5*x7966)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7973.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7972.value)))+(x7973.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7974=IKcos(j4);
IkReal x7975=IKsin(j4);
IkReal x7976=(cj5*r11);
IkReal x7977=(cj5*r10);
IkReal x7978=(cj5*r00);
IkReal x7979=(cj5*r01);
IkReal x7980=(cj5*r20);
IkReal x7981=(cj5*r21);
IkReal x7982=(cj6*x7974);
IkReal x7983=(sj5*x7974);
IkReal x7984=(cj6*x7975);
IkReal x7985=(sj6*x7974);
IkReal x7986=((1.0)*sj5*x7975);
IkReal x7987=((1.0)*sj6*x7975);
IkReal x7988=((1.0)*x7985);
evalcond[0]=((((-1.0)*r01*x7987))+((r00*x7984))+((x7979*x7982))+((r02*x7983))+((x7978*x7985)));
evalcond[1]=(((x7976*x7982))+((x7977*x7985))+(((-1.0)*r11*x7987))+((r12*x7983))+((r10*x7984)));
evalcond[2]=((1.0)+((r20*x7984))+(((-1.0)*r21*x7987))+((r22*x7983))+((x7980*x7985))+((x7981*x7982)));
evalcond[3]=((((-1.0)*r22*x7986))+(((-1.0)*x7981*x7984))+((r20*x7982))+(((-1.0)*r21*x7988))+(((-1.0)*x7980*x7987)));
evalcond[4]=((((-1.0)*r12*x7986))+(((-1.0)*x7976*x7984))+(((-1.0)*r11*x7988))+(((-1.0)*x7977*x7987))+((r10*x7982)));
evalcond[5]=((1.0)+(((-1.0)*x7978*x7987))+(((-1.0)*r01*x7988))+((r00*x7982))+(((-1.0)*x7979*x7984))+(((-1.0)*r02*x7986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7989=((1.0)*sj5);
CheckValue<IkReal> x7990 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7990.valid){
continue;
}
CheckValue<IkReal> x7991=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x7989))+(((-1.0)*cj6*r01*x7989))+((cj5*r02)))),-1);
if(!x7991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7990.value)+(((1.5707963267949)*(x7991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7992=IKcos(j4);
IkReal x7993=IKsin(j4);
IkReal x7994=(cj5*r11);
IkReal x7995=(cj5*r10);
IkReal x7996=(cj5*r00);
IkReal x7997=(cj5*r01);
IkReal x7998=(cj5*r20);
IkReal x7999=(cj5*r21);
IkReal x8000=(cj6*x7992);
IkReal x8001=(sj5*x7992);
IkReal x8002=(cj6*x7993);
IkReal x8003=(sj6*x7992);
IkReal x8004=((1.0)*sj5*x7993);
IkReal x8005=((1.0)*sj6*x7993);
IkReal x8006=((1.0)*x8003);
evalcond[0]=(((x7997*x8000))+((r00*x8002))+((r02*x8001))+(((-1.0)*r01*x8005))+((x7996*x8003)));
evalcond[1]=(((r12*x8001))+(((-1.0)*r11*x8005))+((x7994*x8000))+((x7995*x8003))+((r10*x8002)));
evalcond[2]=((1.0)+(((-1.0)*r21*x8005))+((r20*x8002))+((x7998*x8003))+((x7999*x8000))+((r22*x8001)));
evalcond[3]=((((-1.0)*r21*x8006))+(((-1.0)*x7998*x8005))+((r20*x8000))+(((-1.0)*x7999*x8002))+(((-1.0)*r22*x8004)));
evalcond[4]=((((-1.0)*x7995*x8005))+(((-1.0)*x7994*x8002))+(((-1.0)*r11*x8006))+(((-1.0)*r12*x8004))+((r10*x8000)));
evalcond[5]=((1.0)+(((-1.0)*x7996*x8005))+((r00*x8000))+(((-1.0)*r01*x8006))+(((-1.0)*x7997*x8002))+(((-1.0)*r02*x8004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8007 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8007.valid){
continue;
}
CheckValue<IkReal> x8008=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8007.value)+(((1.5707963267949)*(x8008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8009=IKcos(j4);
IkReal x8010=IKsin(j4);
IkReal x8011=(cj5*r11);
IkReal x8012=(cj5*r10);
IkReal x8013=(cj5*r00);
IkReal x8014=(cj5*r01);
IkReal x8015=(cj5*r20);
IkReal x8016=(cj5*r21);
IkReal x8017=(cj6*x8009);
IkReal x8018=(sj5*x8009);
IkReal x8019=(cj6*x8010);
IkReal x8020=(sj6*x8009);
IkReal x8021=((1.0)*sj5*x8010);
IkReal x8022=((1.0)*sj6*x8010);
IkReal x8023=((1.0)*x8020);
evalcond[0]=(((r02*x8018))+((x8014*x8017))+((r00*x8019))+(((-1.0)*r01*x8022))+((x8013*x8020)));
evalcond[1]=(((x8012*x8020))+(((-1.0)*r11*x8022))+((r12*x8018))+((x8011*x8017))+((r10*x8019)));
evalcond[2]=((1.0)+(((-1.0)*r21*x8022))+((x8015*x8020))+((r22*x8018))+((r20*x8019))+((x8016*x8017)));
evalcond[3]=((((-1.0)*r21*x8023))+(((-1.0)*x8016*x8019))+(((-1.0)*x8015*x8022))+((r20*x8017))+(((-1.0)*r22*x8021)));
evalcond[4]=((((-1.0)*r12*x8021))+(((-1.0)*r11*x8023))+(((-1.0)*x8012*x8022))+(((-1.0)*x8011*x8019))+((r10*x8017)));
evalcond[5]=((1.0)+(((-1.0)*x8013*x8022))+(((-1.0)*x8014*x8019))+((r00*x8017))+(((-1.0)*r02*x8021))+(((-1.0)*r01*x8023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8024=r11*r11;
IkReal x8025=cj5*cj5;
IkReal x8026=cj6*cj6;
IkReal x8027=r10*r10;
IkReal x8028=r12*r12;
IkReal x8029=(cj6*r10);
IkReal x8030=(r12*sj5);
IkReal x8031=((2.0)*r11);
IkReal x8032=(cj5*cj6);
IkReal x8033=(cj0*sj6);
IkReal x8034=(cj5*r10);
IkReal x8035=((1.0)*x8026);
IkReal x8036=(x8025*x8027);
CheckValue<IkReal> x8037 = IKatan2WithCheck(IkReal((((cj0*r11*x8032))+((cj0*x8030))+((x8033*x8034)))),IkReal(((((-1.0)*cj0*x8029))+((r11*x8033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8037.valid){
continue;
}
CheckValue<IkReal> x8038=IKPowWithIntegerCheck(IKsign((((x8026*x8027))+(((-1.0)*x8024*x8035))+((x8030*x8031*x8032))+(((-1.0)*x8025*x8028))+(((2.0)*sj6*x8030*x8034))+(((-1.0)*x8035*x8036))+((sj6*x8025*x8029*x8031))+x8028+x8024+x8036+((x8024*x8025*x8026))+(((-1.0)*sj6*x8029*x8031)))),-1);
if(!x8038.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8037.value)+(((1.5707963267949)*(x8038.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8039=IKcos(j4);
IkReal x8040=IKsin(j4);
IkReal x8041=(cj5*r11);
IkReal x8042=(cj5*r10);
IkReal x8043=(cj5*r00);
IkReal x8044=(cj5*r01);
IkReal x8045=(cj5*r20);
IkReal x8046=(cj5*r21);
IkReal x8047=(cj6*x8039);
IkReal x8048=(sj5*x8039);
IkReal x8049=(cj6*x8040);
IkReal x8050=(sj6*x8039);
IkReal x8051=((1.0)*sj5*x8040);
IkReal x8052=((1.0)*sj6*x8040);
IkReal x8053=((1.0)*x8050);
evalcond[0]=(((x8044*x8047))+((r02*x8048))+((x8043*x8050))+((r00*x8049))+(((-1.0)*r01*x8052)));
evalcond[1]=(((r10*x8049))+((x8041*x8047))+((x8042*x8050))+((r12*x8048))+(((-1.0)*r11*x8052)));
evalcond[2]=((1.0)+((x8045*x8050))+((r20*x8049))+(((-1.0)*r21*x8052))+((x8046*x8047))+((r22*x8048)));
evalcond[3]=((((-1.0)*x8045*x8052))+((r20*x8047))+(((-1.0)*r21*x8053))+(((-1.0)*x8046*x8049))+(((-1.0)*r22*x8051)));
evalcond[4]=((((-1.0)*r12*x8051))+cj0+((r10*x8047))+(((-1.0)*x8041*x8049))+(((-1.0)*x8042*x8052))+(((-1.0)*r11*x8053)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x8043*x8052))+(((-1.0)*x8044*x8049))+(((-1.0)*r02*x8051))+((r00*x8047))+(((-1.0)*r01*x8053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8054=((1.0)*sj5);
CheckValue<IkReal> x8055 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8055.valid){
continue;
}
CheckValue<IkReal> x8056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x8054))+(((-1.0)*cj6*r01*x8054))+((cj5*r02)))),-1);
if(!x8056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8055.value)+(((1.5707963267949)*(x8056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8057=IKcos(j4);
IkReal x8058=IKsin(j4);
IkReal x8059=(cj5*r11);
IkReal x8060=(cj5*r10);
IkReal x8061=(cj5*r00);
IkReal x8062=(cj5*r01);
IkReal x8063=(cj5*r20);
IkReal x8064=(cj5*r21);
IkReal x8065=(cj6*x8057);
IkReal x8066=(sj5*x8057);
IkReal x8067=(cj6*x8058);
IkReal x8068=(sj6*x8057);
IkReal x8069=((1.0)*sj5*x8058);
IkReal x8070=((1.0)*sj6*x8058);
IkReal x8071=((1.0)*x8068);
evalcond[0]=(((x8061*x8068))+((r00*x8067))+(((-1.0)*r01*x8070))+((x8062*x8065))+((r02*x8066)));
evalcond[1]=(((r10*x8067))+((x8060*x8068))+((x8059*x8065))+(((-1.0)*r11*x8070))+((r12*x8066)));
evalcond[2]=((1.0)+((r22*x8066))+((x8064*x8065))+((x8063*x8068))+((r20*x8067))+(((-1.0)*r21*x8070)));
evalcond[3]=(((r20*x8065))+(((-1.0)*x8064*x8067))+(((-1.0)*x8063*x8070))+(((-1.0)*r22*x8069))+(((-1.0)*r21*x8071)));
evalcond[4]=(((r10*x8065))+cj0+(((-1.0)*r12*x8069))+(((-1.0)*x8060*x8070))+(((-1.0)*r11*x8071))+(((-1.0)*x8059*x8067)));
evalcond[5]=((((-1.0)*sj0))+((r00*x8065))+(((-1.0)*r01*x8071))+(((-1.0)*x8061*x8070))+(((-1.0)*x8062*x8067))+(((-1.0)*r02*x8069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8072 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8072.valid){
continue;
}
CheckValue<IkReal> x8073=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8072.value)+(((1.5707963267949)*(x8073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8074=IKcos(j4);
IkReal x8075=IKsin(j4);
IkReal x8076=(cj5*r11);
IkReal x8077=(cj5*r10);
IkReal x8078=(cj5*r00);
IkReal x8079=(cj5*r01);
IkReal x8080=(cj5*r20);
IkReal x8081=(cj5*r21);
IkReal x8082=(cj6*x8074);
IkReal x8083=(sj5*x8074);
IkReal x8084=(cj6*x8075);
IkReal x8085=(sj6*x8074);
IkReal x8086=((1.0)*sj5*x8075);
IkReal x8087=((1.0)*sj6*x8075);
IkReal x8088=((1.0)*x8085);
evalcond[0]=((((-1.0)*r01*x8087))+((x8078*x8085))+((r00*x8084))+((x8079*x8082))+((r02*x8083)));
evalcond[1]=(((r10*x8084))+((x8076*x8082))+((r12*x8083))+((x8077*x8085))+(((-1.0)*r11*x8087)));
evalcond[2]=((1.0)+((r22*x8083))+((x8081*x8082))+(((-1.0)*r21*x8087))+((x8080*x8085))+((r20*x8084)));
evalcond[3]=((((-1.0)*x8081*x8084))+(((-1.0)*x8080*x8087))+(((-1.0)*r22*x8086))+(((-1.0)*r21*x8088))+((r20*x8082)));
evalcond[4]=(((r10*x8082))+cj0+(((-1.0)*x8077*x8087))+(((-1.0)*r11*x8088))+(((-1.0)*r12*x8086))+(((-1.0)*x8076*x8084)));
evalcond[5]=((((-1.0)*r02*x8086))+(((-1.0)*sj0))+(((-1.0)*r01*x8088))+(((-1.0)*x8079*x8084))+((r00*x8082))+(((-1.0)*x8078*x8087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8089=((1.26697583102024)*cj5);
IkReal x8090=((0.0338501117053686)*cj5);
IkReal x8091=(r00*sj6);
IkReal x8092=(r10*sj6);
IkReal x8093=((1.26697583102024)*sj5);
IkReal x8094=(cj6*r11);
IkReal x8095=((0.0338501117053686)*sj5);
IkReal x8096=(cj6*r01);
if( IKabs(((((-1.0)*x8093*x8094))+(((-1.0)*x8092*x8093))+(((-3.38501117053686)*py))+((x8090*x8094))+((x8090*x8092))+((r12*x8089))+((r12*x8095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x8093*x8096))+(((-3.38501117053686)*px))+((x8090*x8096))+((x8090*x8091))+(((-1.0)*x8091*x8093))+((r02*x8095))+((r02*x8089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x8093*x8094))+(((-1.0)*x8092*x8093))+(((-3.38501117053686)*py))+((x8090*x8094))+((x8090*x8092))+((r12*x8089))+((r12*x8095))))+IKsqr(((((-1.0)*x8093*x8096))+(((-3.38501117053686)*px))+((x8090*x8096))+((x8090*x8091))+(((-1.0)*x8091*x8093))+((r02*x8095))+((r02*x8089))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x8093*x8094))+(((-1.0)*x8092*x8093))+(((-3.38501117053686)*py))+((x8090*x8094))+((x8090*x8092))+((r12*x8089))+((r12*x8095))), ((((-1.0)*x8093*x8096))+(((-3.38501117053686)*px))+((x8090*x8096))+((x8090*x8091))+(((-1.0)*x8091*x8093))+((r02*x8095))+((r02*x8089))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8097=((0.01)*cj5);
IkReal x8098=(cj6*r01);
IkReal x8099=(r00*sj6);
IkReal x8100=((0.01)*sj5);
IkReal x8101=((0.37429)*sj5);
IkReal x8102=((0.37429)*cj5);
IkReal x8103=(r10*sj6);
IkReal x8104=(cj6*r11);
evalcond[0]=(((x8097*x8099))+((x8097*x8098))+(((-1.0)*x8099*x8101))+((r02*x8100))+((r02*x8102))+(((-1.0)*x8098*x8101))+(((-1.0)*px))+(((-0.29542)*(IKcos(j0)))));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+(((-1.0)*py))+((r12*x8102))+((r12*x8100))+(((-1.0)*x8101*x8104))+(((-1.0)*x8101*x8103))+((x8097*x8103))+((x8097*x8104)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8105=(r21*sj0);
IkReal x8106=(r20*sj0);
IkReal x8107=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8107;
j4eval[1]=((IKabs(((((-1.0)*cj6*x8106))+((sj6*x8105)))))+(IKabs((((r22*sj0*sj5))+((cj5*cj6*x8105))+((cj5*sj6*x8106))))));
j4eval[2]=IKsign(x8107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8108=(cj0*r20);
IkReal x8109=((1.0)*cj6);
IkReal x8110=(cj0*r21);
IkReal x8111=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8109)));
j4eval[0]=x8111;
j4eval[1]=((IKabs((((cj0*r22*sj5))+((cj5*sj6*x8108))+((cj5*cj6*x8110)))))+(IKabs((((sj6*x8110))+(((-1.0)*x8108*x8109))))));
j4eval[2]=IKsign(x8111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8112=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8112;
j4eval[1]=IKsign(x8112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8113=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8113;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x8113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8114=((1.0)*cj6);
IkReal x8115=(((cj5*r22))+(((-1.0)*r21*sj5*x8114))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x8115;
j4eval[1]=IKsign(x8115);
j4eval[2]=((IKabs((((r01*sj6))+(((-1.0)*r00*x8114)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8116=cj6*cj6;
IkReal x8117=cj5*cj5;
IkReal x8118=r00*r00;
IkReal x8119=r01*r01;
IkReal x8120=r02*r02;
IkReal x8121=(r00*sj6);
IkReal x8122=((2.0)*cj6*r01);
IkReal x8123=(cj5*r02*sj5);
IkReal x8124=((1.0)*x8116);
IkReal x8125=(x8117*x8118);
IkReal x8126=((((-1.0)*x8122*x8123))+(((-1.0)*x8117*x8119*x8124))+((x8121*x8122))+((x8116*x8119))+((x8116*x8125))+((x8117*x8120))+(((-2.0)*x8121*x8123))+(((-1.0)*x8118*x8124))+(((-1.0)*x8117*x8121*x8122))+(((-1.0)*x8120))+(((-1.0)*x8125))+(((-1.0)*x8119)));
j4eval[0]=x8126;
j4eval[1]=((IKabs((((r01*sj6))+(((-1.0)*cj6*r00)))))+(IKabs((((cj5*x8121))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8127=cj6*cj6;
IkReal x8128=cj5*cj5;
IkReal x8129=r00*r00;
IkReal x8130=r01*r01;
IkReal x8131=r02*r02;
IkReal x8132=(r01*sj6);
IkReal x8133=(cj6*r00);
IkReal x8134=(cj5*cj6*r01);
IkReal x8135=((2.0)*r02*sj5);
IkReal x8136=((1.0)*x8127);
IkReal x8137=(cj5*r00*sj6);
IkReal x8138=(x8128*x8129);
CheckValue<IkReal> x8139=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8128*x8130*x8136))+(((2.0)*x8132*x8133))+(((-1.0)*x8134*x8135))+(((-1.0)*x8130))+(((-1.0)*x8131))+(((-1.0)*x8138))+(((-2.0)*x8128*x8132*x8133))+((x8127*x8130))+((x8127*x8138))+((x8128*x8131))+(((-1.0)*x8129*x8136))+(((-1.0)*x8135*x8137)))),-1);
if(!x8139.valid){
continue;
}
CheckValue<IkReal> x8140 = IKatan2WithCheck(IkReal((((r02*sj5))+x8134+x8137)),IkReal(((((-1.0)*x8133))+x8132)),IKFAST_ATAN2_MAGTHRESH);
if(!x8140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8139.value)))+(x8140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8141=IKcos(j4);
IkReal x8142=IKsin(j4);
IkReal x8143=(cj5*sj6);
IkReal x8144=(cj5*r21);
IkReal x8145=(cj5*r01);
IkReal x8146=(cj5*cj6*r11);
IkReal x8147=((1.0)*x8142);
IkReal x8148=(cj6*x8141);
IkReal x8149=(sj5*x8141);
IkReal x8150=(cj6*x8142);
IkReal x8151=(sj5*x8147);
IkReal x8152=((1.0)*sj6*x8141);
evalcond[0]=(((r20*x8150))+((r22*x8149))+((r20*x8141*x8143))+((x8144*x8148))+(((-1.0)*r21*sj6*x8147)));
evalcond[1]=((((-1.0)*r01*sj6*x8147))+((r00*x8141*x8143))+((r00*x8150))+((x8145*x8148))+((r02*x8149)));
evalcond[2]=((1.0)+((x8141*x8146))+((r10*x8150))+(((-1.0)*r11*sj6*x8147))+((r10*x8141*x8143))+((r12*x8149)));
evalcond[3]=(((r20*x8148))+(((-1.0)*cj6*x8144*x8147))+(((-1.0)*r20*x8143*x8147))+(((-1.0)*r22*x8151))+(((-1.0)*r21*x8152)));
evalcond[4]=((((-1.0)*r10*x8143*x8147))+((r10*x8148))+(((-1.0)*x8146*x8147))+(((-1.0)*r12*x8151))+(((-1.0)*r11*x8152)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x8151))+((r00*x8148))+(((-1.0)*r00*x8143*x8147))+(((-1.0)*cj6*x8145*x8147))+(((-1.0)*r01*x8152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8153=((1.0)*cj6);
CheckValue<IkReal> x8154=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x8153))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x8154.valid){
continue;
}
CheckValue<IkReal> x8155 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x8153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8154.value)))+(x8155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8156=IKcos(j4);
IkReal x8157=IKsin(j4);
IkReal x8158=(cj5*sj6);
IkReal x8159=(cj5*r21);
IkReal x8160=(cj5*r01);
IkReal x8161=(cj5*cj6*r11);
IkReal x8162=((1.0)*x8157);
IkReal x8163=(cj6*x8156);
IkReal x8164=(sj5*x8156);
IkReal x8165=(cj6*x8157);
IkReal x8166=(sj5*x8162);
IkReal x8167=((1.0)*sj6*x8156);
evalcond[0]=(((r20*x8156*x8158))+((r22*x8164))+(((-1.0)*r21*sj6*x8162))+((x8159*x8163))+((r20*x8165)));
evalcond[1]=(((x8160*x8163))+((r00*x8156*x8158))+((r00*x8165))+(((-1.0)*r01*sj6*x8162))+((r02*x8164)));
evalcond[2]=((1.0)+((r12*x8164))+((r10*x8165))+((x8156*x8161))+(((-1.0)*r11*sj6*x8162))+((r10*x8156*x8158)));
evalcond[3]=((((-1.0)*r20*x8158*x8162))+(((-1.0)*cj6*x8159*x8162))+(((-1.0)*r21*x8167))+((r20*x8163))+(((-1.0)*r22*x8166)));
evalcond[4]=(((r10*x8163))+(((-1.0)*x8161*x8162))+(((-1.0)*r11*x8167))+(((-1.0)*r10*x8158*x8162))+(((-1.0)*r12*x8166)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x8166))+((r00*x8163))+(((-1.0)*r01*x8167))+(((-1.0)*cj6*x8160*x8162))+(((-1.0)*r00*x8158*x8162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8168=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8168.valid){
continue;
}
CheckValue<IkReal> x8169 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8168.value)))+(x8169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8170=IKcos(j4);
IkReal x8171=IKsin(j4);
IkReal x8172=(cj5*sj6);
IkReal x8173=(cj5*r21);
IkReal x8174=(cj5*r01);
IkReal x8175=(cj5*cj6*r11);
IkReal x8176=((1.0)*x8171);
IkReal x8177=(cj6*x8170);
IkReal x8178=(sj5*x8170);
IkReal x8179=(cj6*x8171);
IkReal x8180=(sj5*x8176);
IkReal x8181=((1.0)*sj6*x8170);
evalcond[0]=((((-1.0)*r21*sj6*x8176))+((x8173*x8177))+((r20*x8179))+((r22*x8178))+((r20*x8170*x8172)));
evalcond[1]=(((r02*x8178))+((x8174*x8177))+(((-1.0)*r01*sj6*x8176))+((r00*x8170*x8172))+((r00*x8179)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x8176))+((r12*x8178))+((r10*x8179))+((x8170*x8175))+((r10*x8170*x8172)));
evalcond[3]=((((-1.0)*r22*x8180))+((r20*x8177))+(((-1.0)*cj6*x8173*x8176))+(((-1.0)*r20*x8172*x8176))+(((-1.0)*r21*x8181)));
evalcond[4]=((((-1.0)*x8175*x8176))+(((-1.0)*r10*x8172*x8176))+(((-1.0)*r12*x8180))+(((-1.0)*r11*x8181))+((r10*x8177)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x8180))+(((-1.0)*r01*x8181))+(((-1.0)*cj6*x8174*x8176))+(((-1.0)*r00*x8172*x8176))+((r00*x8177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8182=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8182;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x8182);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8183=((1.0)*sj5);
IkReal x8184=((((-1.0)*r00*sj6*x8183))+(((-1.0)*cj6*r01*x8183))+((cj5*r02)));
j4eval[0]=x8184;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x8184);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8185=cj6*cj6;
IkReal x8186=r01*r01;
IkReal x8187=cj5*cj5;
IkReal x8188=r00*r00;
IkReal x8189=r02*r02;
IkReal x8190=(r02*sj5);
IkReal x8191=(r01*sj6);
IkReal x8192=(cj6*r00);
IkReal x8193=(cj5*cj6*r01);
IkReal x8194=(cj5*r00*sj6);
IkReal x8195=((1.0)*x8187);
IkReal x8196=(x8185*x8188);
IkReal x8197=(x8185*x8186);
IkReal x8198=(((x8187*x8197))+(((2.0)*x8190*x8193))+(((2.0)*x8190*x8194))+(((-1.0)*x8197))+((x8187*x8188))+(((2.0)*x8187*x8191*x8192))+(((-1.0)*x8195*x8196))+(((-2.0)*x8191*x8192))+(((-1.0)*x8189*x8195))+x8196+x8189+x8186);
j4eval[0]=x8198;
j4eval[1]=((IKabs(((((-1.0)*x8192))+x8191)))+(IKabs((x8193+x8190+x8194))));
j4eval[2]=IKsign(x8198);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8199=cj6*cj6;
IkReal x8200=r01*r01;
IkReal x8201=cj5*cj5;
IkReal x8202=r00*r00;
IkReal x8203=r02*r02;
IkReal x8204=(r00*sj6);
IkReal x8205=(r02*sj5);
IkReal x8206=((2.0)*cj6*r01);
IkReal x8207=((1.0)*x8201);
IkReal x8208=(x8199*x8202);
IkReal x8209=(x8199*x8200);
CheckValue<IkReal> x8210 = IKatan2WithCheck(IkReal((((cj5*x8204))+((cj5*cj6*r01))+x8205)),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8210.valid){
continue;
}
CheckValue<IkReal> x8211=IKPowWithIntegerCheck(IKsign((((cj5*x8205*x8206))+(((-1.0)*x8204*x8206))+(((2.0)*cj5*x8204*x8205))+((x8201*x8204*x8206))+((x8201*x8202))+((x8201*x8209))+(((-1.0)*x8209))+(((-1.0)*x8207*x8208))+(((-1.0)*x8203*x8207))+x8208+x8203+x8200)),-1);
if(!x8211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8210.value)+(((1.5707963267949)*(x8211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8212=IKcos(j4);
IkReal x8213=IKsin(j4);
IkReal x8214=(cj5*sj6);
IkReal x8215=(cj5*r21);
IkReal x8216=(cj5*r01);
IkReal x8217=(cj5*cj6*r11);
IkReal x8218=((1.0)*x8213);
IkReal x8219=(cj6*x8212);
IkReal x8220=(sj5*x8212);
IkReal x8221=(cj6*x8213);
IkReal x8222=(sj5*x8218);
IkReal x8223=((1.0)*sj6*x8212);
evalcond[0]=(((r20*x8221))+((r22*x8220))+(((-1.0)*r21*sj6*x8218))+((r20*x8212*x8214))+((x8215*x8219)));
evalcond[1]=(((x8216*x8219))+((r02*x8220))+(((-1.0)*r01*sj6*x8218))+((r00*x8212*x8214))+((r00*x8221)));
evalcond[2]=((-1.0)+((r12*x8220))+(((-1.0)*r11*sj6*x8218))+((r10*x8221))+((r10*x8212*x8214))+((x8212*x8217)));
evalcond[3]=((((-1.0)*cj6*x8215*x8218))+(((-1.0)*r22*x8222))+(((-1.0)*r20*x8214*x8218))+(((-1.0)*r21*x8223))+((r20*x8219)));
evalcond[4]=((((-1.0)*r10*x8214*x8218))+(((-1.0)*r12*x8222))+(((-1.0)*r11*x8223))+(((-1.0)*x8217*x8218))+((r10*x8219)));
evalcond[5]=((1.0)+(((-1.0)*r02*x8222))+(((-1.0)*r00*x8214*x8218))+(((-1.0)*cj6*x8216*x8218))+((r00*x8219))+(((-1.0)*r01*x8223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8224=((1.0)*sj5);
CheckValue<IkReal> x8225=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x8224))+(((-1.0)*r00*sj6*x8224))+((cj5*r02)))),-1);
if(!x8225.valid){
continue;
}
CheckValue<IkReal> x8226 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8225.value)))+(x8226.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8227=IKcos(j4);
IkReal x8228=IKsin(j4);
IkReal x8229=(cj5*sj6);
IkReal x8230=(cj5*r21);
IkReal x8231=(cj5*r01);
IkReal x8232=(cj5*cj6*r11);
IkReal x8233=((1.0)*x8228);
IkReal x8234=(cj6*x8227);
IkReal x8235=(sj5*x8227);
IkReal x8236=(cj6*x8228);
IkReal x8237=(sj5*x8233);
IkReal x8238=((1.0)*sj6*x8227);
evalcond[0]=(((r20*x8236))+((r20*x8227*x8229))+((r22*x8235))+(((-1.0)*r21*sj6*x8233))+((x8230*x8234)));
evalcond[1]=(((r00*x8227*x8229))+((x8231*x8234))+((r02*x8235))+(((-1.0)*r01*sj6*x8233))+((r00*x8236)));
evalcond[2]=((-1.0)+((r12*x8235))+(((-1.0)*r11*sj6*x8233))+((r10*x8227*x8229))+((r10*x8236))+((x8227*x8232)));
evalcond[3]=(((r20*x8234))+(((-1.0)*cj6*x8230*x8233))+(((-1.0)*r20*x8229*x8233))+(((-1.0)*r22*x8237))+(((-1.0)*r21*x8238)));
evalcond[4]=((((-1.0)*r11*x8238))+(((-1.0)*r10*x8229*x8233))+(((-1.0)*r12*x8237))+((r10*x8234))+(((-1.0)*x8232*x8233)));
evalcond[5]=((1.0)+(((-1.0)*r02*x8237))+((r00*x8234))+(((-1.0)*cj6*x8231*x8233))+(((-1.0)*r01*x8238))+(((-1.0)*r00*x8229*x8233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8239 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8239.valid){
continue;
}
CheckValue<IkReal> x8240=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8239.value)+(((1.5707963267949)*(x8240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8241=IKcos(j4);
IkReal x8242=IKsin(j4);
IkReal x8243=(cj5*sj6);
IkReal x8244=(cj5*r21);
IkReal x8245=(cj5*r01);
IkReal x8246=(cj5*cj6*r11);
IkReal x8247=((1.0)*x8242);
IkReal x8248=(cj6*x8241);
IkReal x8249=(sj5*x8241);
IkReal x8250=(cj6*x8242);
IkReal x8251=(sj5*x8247);
IkReal x8252=((1.0)*sj6*x8241);
evalcond[0]=(((r20*x8241*x8243))+((r20*x8250))+((r22*x8249))+((x8244*x8248))+(((-1.0)*r21*sj6*x8247)));
evalcond[1]=(((r00*x8250))+((r02*x8249))+(((-1.0)*r01*sj6*x8247))+((r00*x8241*x8243))+((x8245*x8248)));
evalcond[2]=((-1.0)+((x8241*x8246))+((r10*x8250))+((r10*x8241*x8243))+((r12*x8249))+(((-1.0)*r11*sj6*x8247)));
evalcond[3]=(((r20*x8248))+(((-1.0)*r22*x8251))+(((-1.0)*r21*x8252))+(((-1.0)*cj6*x8244*x8247))+(((-1.0)*r20*x8243*x8247)));
evalcond[4]=(((r10*x8248))+(((-1.0)*r10*x8243*x8247))+(((-1.0)*r12*x8251))+(((-1.0)*r11*x8252))+(((-1.0)*x8246*x8247)));
evalcond[5]=((1.0)+(((-1.0)*r00*x8243*x8247))+(((-1.0)*r01*x8252))+(((-1.0)*r02*x8251))+(((-1.0)*cj6*x8245*x8247))+((r00*x8248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8253=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8253;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x8253);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8254=((1.0)*sj5);
IkReal x8255=(((cj5*r12))+(((-1.0)*r10*sj6*x8254))+(((-1.0)*cj6*r11*x8254)));
j4eval[0]=x8255;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x8255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8256=r11*r11;
IkReal x8257=cj5*cj5;
IkReal x8258=cj6*cj6;
IkReal x8259=r10*r10;
IkReal x8260=r12*r12;
IkReal x8261=(r12*sj5);
IkReal x8262=(r11*sj6);
IkReal x8263=((1.0)*x8258);
IkReal x8264=(cj5*cj6*r11);
IkReal x8265=(cj5*r10*sj6);
IkReal x8266=((2.0)*cj6*r10);
IkReal x8267=(x8257*x8259);
IkReal x8268=((((-1.0)*x8263*x8267))+((x8256*x8257*x8258))+((x8258*x8259))+(((-1.0)*x8262*x8266))+(((-1.0)*x8256*x8263))+((x8257*x8262*x8266))+(((2.0)*x8261*x8265))+(((2.0)*x8261*x8264))+(((-1.0)*x8257*x8260))+x8267+x8260+x8256);
j4eval[0]=x8268;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+x8262)))+(IKabs((x8264+x8265+x8261))));
j4eval[2]=IKsign(x8268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8269=r11*r11;
IkReal x8270=cj5*cj5;
IkReal x8271=cj6*cj6;
IkReal x8272=r10*r10;
IkReal x8273=r12*r12;
IkReal x8274=(r10*sj6);
IkReal x8275=(r12*sj5);
IkReal x8276=((1.0)*x8271);
IkReal x8277=(cj5*cj6*r11);
IkReal x8278=((2.0)*cj6*r11);
IkReal x8279=(x8270*x8272);
CheckValue<IkReal> x8280=IKPowWithIntegerCheck(IKsign(((((2.0)*x8275*x8277))+(((-1.0)*x8274*x8278))+(((-1.0)*x8269*x8276))+(((-1.0)*x8276*x8279))+((x8270*x8274*x8278))+((x8271*x8272))+((x8269*x8270*x8271))+(((2.0)*cj5*x8274*x8275))+(((-1.0)*x8270*x8273))+x8269+x8279+x8273)),-1);
if(!x8280.valid){
continue;
}
CheckValue<IkReal> x8281 = IKatan2WithCheck(IkReal((((cj5*x8274))+x8277+x8275)),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8280.value)))+(x8281.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8282=IKcos(j4);
IkReal x8283=IKsin(j4);
IkReal x8284=(cj5*sj6);
IkReal x8285=(cj5*r01);
IkReal x8286=(cj5*r21);
IkReal x8287=(cj5*cj6*r11);
IkReal x8288=((1.0)*x8283);
IkReal x8289=(cj6*x8282);
IkReal x8290=(sj5*x8282);
IkReal x8291=(cj6*x8283);
IkReal x8292=(sj5*x8288);
IkReal x8293=((1.0)*sj6*x8282);
evalcond[0]=(((r20*x8282*x8284))+((r20*x8291))+(((-1.0)*r21*sj6*x8288))+((x8286*x8289))+((r22*x8290)));
evalcond[1]=(((r10*x8282*x8284))+((r10*x8291))+((x8282*x8287))+((r12*x8290))+(((-1.0)*r11*sj6*x8288)));
evalcond[2]=((1.0)+((r00*x8291))+((r02*x8290))+((r00*x8282*x8284))+((x8285*x8289))+(((-1.0)*r01*sj6*x8288)));
evalcond[3]=((((-1.0)*r21*x8293))+(((-1.0)*r20*x8284*x8288))+((r20*x8289))+(((-1.0)*r22*x8292))+(((-1.0)*cj6*x8286*x8288)));
evalcond[4]=((((-1.0)*cj6*x8285*x8288))+((r00*x8289))+(((-1.0)*r01*x8293))+(((-1.0)*r00*x8284*x8288))+(((-1.0)*r02*x8292)));
evalcond[5]=((1.0)+(((-1.0)*r11*x8293))+(((-1.0)*r12*x8292))+((r10*x8289))+(((-1.0)*x8287*x8288))+(((-1.0)*r10*x8284*x8288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8294=((1.0)*sj5);
CheckValue<IkReal> x8295=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x8294))+(((-1.0)*r10*sj6*x8294)))),-1);
if(!x8295.valid){
continue;
}
CheckValue<IkReal> x8296 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8295.value)))+(x8296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8297=IKcos(j4);
IkReal x8298=IKsin(j4);
IkReal x8299=(cj5*sj6);
IkReal x8300=(cj5*r01);
IkReal x8301=(cj5*r21);
IkReal x8302=(cj5*cj6*r11);
IkReal x8303=((1.0)*x8298);
IkReal x8304=(cj6*x8297);
IkReal x8305=(sj5*x8297);
IkReal x8306=(cj6*x8298);
IkReal x8307=(sj5*x8303);
IkReal x8308=((1.0)*sj6*x8297);
evalcond[0]=(((r22*x8305))+((x8301*x8304))+(((-1.0)*r21*sj6*x8303))+((r20*x8306))+((r20*x8297*x8299)));
evalcond[1]=(((x8297*x8302))+((r10*x8297*x8299))+(((-1.0)*r11*sj6*x8303))+((r10*x8306))+((r12*x8305)));
evalcond[2]=((1.0)+((x8300*x8304))+((r02*x8305))+(((-1.0)*r01*sj6*x8303))+((r00*x8306))+((r00*x8297*x8299)));
evalcond[3]=((((-1.0)*r22*x8307))+(((-1.0)*cj6*x8301*x8303))+(((-1.0)*r21*x8308))+((r20*x8304))+(((-1.0)*r20*x8299*x8303)));
evalcond[4]=((((-1.0)*cj6*x8300*x8303))+((r00*x8304))+(((-1.0)*r01*x8308))+(((-1.0)*r02*x8307))+(((-1.0)*r00*x8299*x8303)));
evalcond[5]=((1.0)+(((-1.0)*r10*x8299*x8303))+(((-1.0)*r12*x8307))+(((-1.0)*r11*x8308))+((r10*x8304))+(((-1.0)*x8302*x8303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8309=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8309.valid){
continue;
}
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8309.value)))+(x8310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8311=IKcos(j4);
IkReal x8312=IKsin(j4);
IkReal x8313=(cj5*sj6);
IkReal x8314=(cj5*r01);
IkReal x8315=(cj5*r21);
IkReal x8316=(cj5*cj6*r11);
IkReal x8317=((1.0)*x8312);
IkReal x8318=(cj6*x8311);
IkReal x8319=(sj5*x8311);
IkReal x8320=(cj6*x8312);
IkReal x8321=(sj5*x8317);
IkReal x8322=((1.0)*sj6*x8311);
evalcond[0]=((((-1.0)*r21*sj6*x8317))+((x8315*x8318))+((r22*x8319))+((r20*x8311*x8313))+((r20*x8320)));
evalcond[1]=(((r10*x8320))+(((-1.0)*r11*sj6*x8317))+((x8311*x8316))+((r10*x8311*x8313))+((r12*x8319)));
evalcond[2]=((1.0)+((x8314*x8318))+((r02*x8319))+((r00*x8320))+(((-1.0)*r01*sj6*x8317))+((r00*x8311*x8313)));
evalcond[3]=((((-1.0)*r20*x8313*x8317))+((r20*x8318))+(((-1.0)*r22*x8321))+(((-1.0)*cj6*x8315*x8317))+(((-1.0)*r21*x8322)));
evalcond[4]=((((-1.0)*cj6*x8314*x8317))+(((-1.0)*r01*x8322))+((r00*x8318))+(((-1.0)*r00*x8313*x8317))+(((-1.0)*r02*x8321)));
evalcond[5]=((1.0)+((r10*x8318))+(((-1.0)*x8316*x8317))+(((-1.0)*r11*x8322))+(((-1.0)*r12*x8321))+(((-1.0)*r10*x8313*x8317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8323=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x8323;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x8323);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8324=((1.0)*cj6);
IkReal x8325=(((cj5*r22))+(((-1.0)*r21*sj5*x8324))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x8325;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs((((r11*sj6))+(((-1.0)*r10*x8324))))));
j4eval[2]=IKsign(x8325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8326=cj6*cj6;
IkReal x8327=cj5*cj5;
IkReal x8328=r10*r10;
IkReal x8329=r11*r11;
IkReal x8330=r12*r12;
IkReal x8331=(r10*sj6);
IkReal x8332=(r12*sj5);
IkReal x8333=((2.0)*cj6*r11);
IkReal x8334=((1.0)*x8328);
IkReal x8335=(x8326*x8329);
IkReal x8336=(x8335+(((-1.0)*x8327*x8334))+(((-1.0)*x8326*x8334))+(((-1.0)*x8327*x8331*x8333))+((x8331*x8333))+(((-2.0)*cj5*x8331*x8332))+(((-1.0)*cj5*x8332*x8333))+(((-1.0)*x8329))+((x8327*x8330))+(((-1.0)*x8327*x8335))+((x8326*x8327*x8328))+(((-1.0)*x8330)));
j4eval[0]=x8336;
j4eval[1]=((IKabs((x8332+((cj5*cj6*r11))+((cj5*x8331)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x8336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8337=cj6*cj6;
IkReal x8338=cj5*cj5;
IkReal x8339=r10*r10;
IkReal x8340=r11*r11;
IkReal x8341=r12*r12;
IkReal x8342=(r10*sj6);
IkReal x8343=(r12*sj5);
IkReal x8344=((2.0)*cj6*r11);
IkReal x8345=(x8337*x8340);
IkReal x8346=(x8338*x8339);
CheckValue<IkReal> x8347 = IKatan2WithCheck(IkReal((x8343+((cj5*x8342))+((cj5*cj6*r11)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8347.valid){
continue;
}
CheckValue<IkReal> x8348=IKPowWithIntegerCheck(IKsign((x8345+(((-1.0)*cj5*x8343*x8344))+((x8337*x8346))+(((-2.0)*cj5*x8342*x8343))+((x8342*x8344))+(((-1.0)*x8338*x8345))+(((-1.0)*x8346))+(((-1.0)*x8341))+(((-1.0)*x8340))+(((-1.0)*x8338*x8342*x8344))+((x8338*x8341))+(((-1.0)*x8337*x8339)))),-1);
if(!x8348.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8347.value)+(((1.5707963267949)*(x8348.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8349=IKcos(j4);
IkReal x8350=IKsin(j4);
IkReal x8351=(cj5*sj6);
IkReal x8352=(cj5*r01);
IkReal x8353=(cj5*r21);
IkReal x8354=(cj5*cj6*r11);
IkReal x8355=((1.0)*x8350);
IkReal x8356=(cj6*x8349);
IkReal x8357=(sj5*x8349);
IkReal x8358=(cj6*x8350);
IkReal x8359=(sj5*x8355);
IkReal x8360=((1.0)*sj6*x8349);
evalcond[0]=(((x8353*x8356))+(((-1.0)*r21*sj6*x8355))+((r22*x8357))+((r20*x8358))+((r20*x8349*x8351)));
evalcond[1]=(((r10*x8358))+(((-1.0)*r11*sj6*x8355))+((r12*x8357))+((r10*x8349*x8351))+((x8349*x8354)));
evalcond[2]=((-1.0)+((r02*x8357))+(((-1.0)*r01*sj6*x8355))+((r00*x8358))+((r00*x8349*x8351))+((x8352*x8356)));
evalcond[3]=((((-1.0)*r21*x8360))+(((-1.0)*r22*x8359))+(((-1.0)*r20*x8351*x8355))+((r20*x8356))+(((-1.0)*cj6*x8353*x8355)));
evalcond[4]=((((-1.0)*r02*x8359))+(((-1.0)*r01*x8360))+(((-1.0)*r00*x8351*x8355))+((r00*x8356))+(((-1.0)*cj6*x8352*x8355)));
evalcond[5]=((-1.0)+(((-1.0)*x8354*x8355))+((r10*x8356))+(((-1.0)*r10*x8351*x8355))+(((-1.0)*r11*x8360))+(((-1.0)*r12*x8359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8361=((1.0)*cj6);
CheckValue<IkReal> x8362 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal((((r11*sj6))+(((-1.0)*r10*x8361)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8362.valid){
continue;
}
CheckValue<IkReal> x8363=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x8361))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x8363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8362.value)+(((1.5707963267949)*(x8363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8364=IKcos(j4);
IkReal x8365=IKsin(j4);
IkReal x8366=(cj5*sj6);
IkReal x8367=(cj5*r01);
IkReal x8368=(cj5*r21);
IkReal x8369=(cj5*cj6*r11);
IkReal x8370=((1.0)*x8365);
IkReal x8371=(cj6*x8364);
IkReal x8372=(sj5*x8364);
IkReal x8373=(cj6*x8365);
IkReal x8374=(sj5*x8370);
IkReal x8375=((1.0)*sj6*x8364);
evalcond[0]=(((r20*x8364*x8366))+((r20*x8373))+((x8368*x8371))+((r22*x8372))+(((-1.0)*r21*sj6*x8370)));
evalcond[1]=((((-1.0)*r11*sj6*x8370))+((r10*x8373))+((r12*x8372))+((x8364*x8369))+((r10*x8364*x8366)));
evalcond[2]=((-1.0)+((r00*x8373))+(((-1.0)*r01*sj6*x8370))+((r02*x8372))+((r00*x8364*x8366))+((x8367*x8371)));
evalcond[3]=((((-1.0)*r20*x8366*x8370))+((r20*x8371))+(((-1.0)*r22*x8374))+(((-1.0)*cj6*x8368*x8370))+(((-1.0)*r21*x8375)));
evalcond[4]=(((r00*x8371))+(((-1.0)*cj6*x8367*x8370))+(((-1.0)*r02*x8374))+(((-1.0)*r01*x8375))+(((-1.0)*r00*x8366*x8370)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x8374))+((r10*x8371))+(((-1.0)*x8369*x8370))+(((-1.0)*r10*x8366*x8370))+(((-1.0)*r11*x8375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8376=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8376.valid){
continue;
}
CheckValue<IkReal> x8377 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8376.value)))+(x8377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8378=IKcos(j4);
IkReal x8379=IKsin(j4);
IkReal x8380=(cj5*sj6);
IkReal x8381=(cj5*r01);
IkReal x8382=(cj5*r21);
IkReal x8383=(cj5*cj6*r11);
IkReal x8384=((1.0)*x8379);
IkReal x8385=(cj6*x8378);
IkReal x8386=(sj5*x8378);
IkReal x8387=(cj6*x8379);
IkReal x8388=(sj5*x8384);
IkReal x8389=((1.0)*sj6*x8378);
evalcond[0]=(((r20*x8378*x8380))+((r22*x8386))+((x8382*x8385))+((r20*x8387))+(((-1.0)*r21*sj6*x8384)));
evalcond[1]=(((r10*x8378*x8380))+((x8378*x8383))+((r12*x8386))+((r10*x8387))+(((-1.0)*r11*sj6*x8384)));
evalcond[2]=((-1.0)+((x8381*x8385))+((r00*x8378*x8380))+((r02*x8386))+((r00*x8387))+(((-1.0)*r01*sj6*x8384)));
evalcond[3]=((((-1.0)*r20*x8380*x8384))+(((-1.0)*cj6*x8382*x8384))+(((-1.0)*r22*x8388))+(((-1.0)*r21*x8389))+((r20*x8385)));
evalcond[4]=((((-1.0)*cj6*x8381*x8384))+(((-1.0)*r02*x8388))+(((-1.0)*r00*x8380*x8384))+((r00*x8385))+(((-1.0)*r01*x8389)));
evalcond[5]=((-1.0)+(((-1.0)*x8383*x8384))+((r10*x8385))+(((-1.0)*r11*x8389))+(((-1.0)*r10*x8380*x8384))+(((-1.0)*r12*x8388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8390=(cj0*cj6);
IkReal x8391=((1.0)*sj0);
IkReal x8392=(cj0*sj6);
IkReal x8393=(sj6*x8391);
CheckValue<IkReal> x8394=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8394.valid){
continue;
}
CheckValue<IkReal> x8395 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*cj6*r01*x8391))+((cj5*r10*x8392))+(((-1.0)*r02*sj5*x8391))+(((-1.0)*cj5*r00*x8393))+((cj5*r11*x8390))+((cj0*r12*sj5)))),IkReal((((cj6*r00*sj0))+(((-1.0)*r10*x8390))+((r11*x8392))+(((-1.0)*r01*x8393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8394.value)))+(x8395.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8396=IKcos(j4);
IkReal x8397=IKsin(j4);
IkReal x8398=(cj5*sj6);
IkReal x8399=(cj5*r21);
IkReal x8400=(cj5*r01);
IkReal x8401=(cj5*cj6*r11);
IkReal x8402=((1.0)*x8397);
IkReal x8403=(cj6*x8396);
IkReal x8404=(sj5*x8396);
IkReal x8405=(cj6*x8397);
IkReal x8406=(sj5*x8402);
IkReal x8407=((1.0)*sj6*x8396);
evalcond[0]=(((r22*x8404))+((x8399*x8403))+((r20*x8396*x8398))+(((-1.0)*r21*sj6*x8402))+((r20*x8405)));
evalcond[1]=((((-1.0)*r01*sj6*x8402))+cj0+((r00*x8405))+((r02*x8404))+((x8400*x8403))+((r00*x8396*x8398)));
evalcond[2]=(sj0+((x8396*x8401))+((r12*x8404))+((r10*x8396*x8398))+(((-1.0)*r11*sj6*x8402))+((r10*x8405)));
evalcond[3]=((((-1.0)*r21*x8407))+(((-1.0)*cj6*x8399*x8402))+(((-1.0)*r22*x8406))+((r20*x8403))+(((-1.0)*r20*x8398*x8402)));
evalcond[4]=(cj0+(((-1.0)*r12*x8406))+(((-1.0)*r10*x8398*x8402))+(((-1.0)*r11*x8407))+(((-1.0)*x8401*x8402))+((r10*x8403)));
evalcond[5]=((((-1.0)*r01*x8407))+(((-1.0)*sj0))+((r00*x8403))+(((-1.0)*r02*x8406))+(((-1.0)*cj6*x8400*x8402))+(((-1.0)*r00*x8398*x8402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8408=(cj0*r20);
IkReal x8409=((1.0)*cj6);
IkReal x8410=(cj0*r21);
CheckValue<IkReal> x8411 = IKatan2WithCheck(IkReal((((cj5*cj6*x8410))+((cj5*sj6*x8408))+((cj0*r22*sj5)))),IkReal(((((-1.0)*x8408*x8409))+((sj6*x8410)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8411.valid){
continue;
}
CheckValue<IkReal> x8412=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8409)))),-1);
if(!x8412.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8411.value)+(((1.5707963267949)*(x8412.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8413=IKcos(j4);
IkReal x8414=IKsin(j4);
IkReal x8415=(cj5*sj6);
IkReal x8416=(cj5*r21);
IkReal x8417=(cj5*r01);
IkReal x8418=(cj5*cj6*r11);
IkReal x8419=((1.0)*x8414);
IkReal x8420=(cj6*x8413);
IkReal x8421=(sj5*x8413);
IkReal x8422=(cj6*x8414);
IkReal x8423=(sj5*x8419);
IkReal x8424=((1.0)*sj6*x8413);
evalcond[0]=(((x8416*x8420))+((r20*x8422))+(((-1.0)*r21*sj6*x8419))+((r22*x8421))+((r20*x8413*x8415)));
evalcond[1]=(((r02*x8421))+cj0+((x8417*x8420))+((r00*x8413*x8415))+((r00*x8422))+(((-1.0)*r01*sj6*x8419)));
evalcond[2]=(((x8413*x8418))+sj0+((r10*x8422))+(((-1.0)*r11*sj6*x8419))+((r10*x8413*x8415))+((r12*x8421)));
evalcond[3]=(((r20*x8420))+(((-1.0)*r22*x8423))+(((-1.0)*cj6*x8416*x8419))+(((-1.0)*r21*x8424))+(((-1.0)*r20*x8415*x8419)));
evalcond[4]=(((r10*x8420))+cj0+(((-1.0)*x8418*x8419))+(((-1.0)*r10*x8415*x8419))+(((-1.0)*r11*x8424))+(((-1.0)*r12*x8423)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*x8417*x8419))+(((-1.0)*r02*x8423))+(((-1.0)*r01*x8424))+((r00*x8420))+(((-1.0)*r00*x8415*x8419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8425=(r21*sj0);
IkReal x8426=(r20*sj0);
CheckValue<IkReal> x8427 = IKatan2WithCheck(IkReal((((cj5*sj6*x8426))+((r22*sj0*sj5))+((cj5*cj6*x8425)))),IkReal((((sj6*x8425))+(((-1.0)*cj6*x8426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8427.valid){
continue;
}
CheckValue<IkReal> x8428=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8427.value)+(((1.5707963267949)*(x8428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8429=IKcos(j4);
IkReal x8430=IKsin(j4);
IkReal x8431=(cj5*sj6);
IkReal x8432=(cj5*r21);
IkReal x8433=(cj5*r01);
IkReal x8434=(cj5*cj6*r11);
IkReal x8435=((1.0)*x8430);
IkReal x8436=(cj6*x8429);
IkReal x8437=(sj5*x8429);
IkReal x8438=(cj6*x8430);
IkReal x8439=(sj5*x8435);
IkReal x8440=((1.0)*sj6*x8429);
evalcond[0]=(((r22*x8437))+(((-1.0)*r21*sj6*x8435))+((x8432*x8436))+((r20*x8429*x8431))+((r20*x8438)));
evalcond[1]=(cj0+((r02*x8437))+(((-1.0)*r01*sj6*x8435))+((r00*x8429*x8431))+((x8433*x8436))+((r00*x8438)));
evalcond[2]=(sj0+((x8429*x8434))+(((-1.0)*r11*sj6*x8435))+((r12*x8437))+((r10*x8438))+((r10*x8429*x8431)));
evalcond[3]=((((-1.0)*r20*x8431*x8435))+(((-1.0)*r22*x8439))+(((-1.0)*r21*x8440))+((r20*x8436))+(((-1.0)*cj6*x8432*x8435)));
evalcond[4]=((((-1.0)*r10*x8431*x8435))+cj0+(((-1.0)*r12*x8439))+(((-1.0)*r11*x8440))+(((-1.0)*x8434*x8435))+((r10*x8436)));
evalcond[5]=((((-1.0)*cj6*x8433*x8435))+(((-1.0)*sj0))+(((-1.0)*r01*x8440))+(((-1.0)*r00*x8431*x8435))+(((-1.0)*r02*x8439))+((r00*x8436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8441=((1.26697583102024)*cj5);
IkReal x8442=((0.0338501117053686)*cj5);
IkReal x8443=(r00*sj6);
IkReal x8444=(r10*sj6);
IkReal x8445=((1.26697583102024)*sj5);
IkReal x8446=(cj6*r11);
IkReal x8447=((0.0338501117053686)*sj5);
IkReal x8448=(cj6*r01);
if( IKabs((((r12*x8447))+((r12*x8441))+(((-3.38501117053686)*py))+(((-1.0)*x8444*x8445))+((x8442*x8446))+((x8442*x8444))+(((-1.0)*x8445*x8446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38501117053686)*px))+(((-1.0)*x8443*x8445))+((r02*x8447))+((r02*x8441))+((x8442*x8443))+((x8442*x8448))+(((-1.0)*x8445*x8448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x8447))+((r12*x8441))+(((-3.38501117053686)*py))+(((-1.0)*x8444*x8445))+((x8442*x8446))+((x8442*x8444))+(((-1.0)*x8445*x8446))))+IKsqr(((((-3.38501117053686)*px))+(((-1.0)*x8443*x8445))+((r02*x8447))+((r02*x8441))+((x8442*x8443))+((x8442*x8448))+(((-1.0)*x8445*x8448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r12*x8447))+((r12*x8441))+(((-3.38501117053686)*py))+(((-1.0)*x8444*x8445))+((x8442*x8446))+((x8442*x8444))+(((-1.0)*x8445*x8446))), ((((-3.38501117053686)*px))+(((-1.0)*x8443*x8445))+((r02*x8447))+((r02*x8441))+((x8442*x8443))+((x8442*x8448))+(((-1.0)*x8445*x8448))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8449=((0.01)*cj5);
IkReal x8450=(cj6*r01);
IkReal x8451=(r00*sj6);
IkReal x8452=((0.01)*sj5);
IkReal x8453=((0.37429)*sj5);
IkReal x8454=((0.37429)*cj5);
IkReal x8455=(r10*sj6);
IkReal x8456=(cj6*r11);
evalcond[0]=(((x8449*x8451))+((x8449*x8450))+(((-1.0)*x8450*x8453))+(((-1.0)*x8451*x8453))+((r02*x8454))+((r02*x8452))+(((-1.0)*px))+(((-0.29542)*(IKcos(j0)))));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+(((-1.0)*x8453*x8455))+(((-1.0)*x8453*x8456))+((x8449*x8456))+((x8449*x8455))+(((-1.0)*py))+((r12*x8454))+((r12*x8452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8457=(r21*sj0);
IkReal x8458=(r20*sj0);
IkReal x8459=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8459;
j4eval[1]=((IKabs((((cj5*sj6*x8458))+((r22*sj0*sj5))+((cj5*cj6*x8457)))))+(IKabs((((sj6*x8457))+(((-1.0)*cj6*x8458))))));
j4eval[2]=IKsign(x8459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8460=(cj0*r20);
IkReal x8461=((1.0)*cj6);
IkReal x8462=(cj0*r21);
IkReal x8463=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8461)));
j4eval[0]=x8463;
j4eval[1]=((IKabs((((sj6*x8462))+(((-1.0)*x8460*x8461)))))+(IKabs((((cj5*sj6*x8460))+((cj5*cj6*x8462))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x8463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8464=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8464;
j4eval[1]=IKsign(x8464);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8465=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8465;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x8465);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8466=((1.0)*cj6);
IkReal x8467=(((cj5*r22))+(((-1.0)*r21*sj5*x8466))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x8467;
j4eval[1]=IKsign(x8467);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x8466))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8468=cj6*cj6;
IkReal x8469=r01*r01;
IkReal x8470=cj5*cj5;
IkReal x8471=r00*r00;
IkReal x8472=r02*r02;
IkReal x8473=(r02*sj5);
IkReal x8474=(r01*sj6);
IkReal x8475=(cj6*r00);
IkReal x8476=(cj5*cj6*r01);
IkReal x8477=(cj5*r00*sj6);
IkReal x8478=((1.0)*x8470);
IkReal x8479=(x8468*x8471);
IkReal x8480=(x8468*x8469);
IkReal x8481=(x8469+x8479+x8472+((x8470*x8471))+((x8470*x8480))+(((2.0)*x8473*x8476))+(((2.0)*x8473*x8477))+(((-1.0)*x8480))+(((-2.0)*x8474*x8475))+(((-1.0)*x8472*x8478))+(((2.0)*x8470*x8474*x8475))+(((-1.0)*x8478*x8479)));
j4eval[0]=x8481;
j4eval[1]=((IKabs((x8474+(((-1.0)*x8475)))))+(IKabs((x8477+x8476+x8473))));
j4eval[2]=IKsign(x8481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8482=cj6*cj6;
IkReal x8483=r01*r01;
IkReal x8484=cj5*cj5;
IkReal x8485=r00*r00;
IkReal x8486=r02*r02;
IkReal x8487=(r00*sj6);
IkReal x8488=(r02*sj5);
IkReal x8489=((2.0)*cj6*r01);
IkReal x8490=((1.0)*x8484);
IkReal x8491=(x8482*x8485);
IkReal x8492=(x8482*x8483);
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal((((cj5*x8487))+x8488+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
CheckValue<IkReal> x8494=IKPowWithIntegerCheck(IKsign((((x8484*x8492))+x8483+x8486+x8491+(((-1.0)*x8487*x8489))+((x8484*x8485))+((x8484*x8487*x8489))+(((2.0)*cj5*x8487*x8488))+(((-1.0)*x8486*x8490))+(((-1.0)*x8492))+(((-1.0)*x8490*x8491))+((cj5*x8488*x8489)))),-1);
if(!x8494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8493.value)+(((1.5707963267949)*(x8494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8495=IKcos(j4);
IkReal x8496=IKsin(j4);
IkReal x8497=(cj5*sj6);
IkReal x8498=(cj5*r21);
IkReal x8499=(cj5*r01);
IkReal x8500=(cj5*cj6*r11);
IkReal x8501=((1.0)*x8496);
IkReal x8502=(cj6*x8495);
IkReal x8503=(sj5*x8495);
IkReal x8504=(cj6*x8496);
IkReal x8505=(sj5*x8501);
IkReal x8506=((1.0)*sj6*x8495);
evalcond[0]=((((-1.0)*r21*sj6*x8501))+((r22*x8503))+((x8498*x8502))+((r20*x8495*x8497))+((r20*x8504)));
evalcond[1]=(((r02*x8503))+((x8499*x8502))+((r00*x8495*x8497))+(((-1.0)*r01*sj6*x8501))+((r00*x8504)));
evalcond[2]=((1.0)+((r10*x8504))+((r10*x8495*x8497))+((r12*x8503))+(((-1.0)*r11*sj6*x8501))+((x8495*x8500)));
evalcond[3]=((((-1.0)*r20*x8497*x8501))+(((-1.0)*r21*x8506))+(((-1.0)*cj6*x8498*x8501))+(((-1.0)*r22*x8505))+((r20*x8502)));
evalcond[4]=(((r10*x8502))+(((-1.0)*r12*x8505))+(((-1.0)*r11*x8506))+(((-1.0)*x8500*x8501))+(((-1.0)*r10*x8497*x8501)));
evalcond[5]=((1.0)+(((-1.0)*r00*x8497*x8501))+(((-1.0)*cj6*x8499*x8501))+(((-1.0)*r01*x8506))+(((-1.0)*r02*x8505))+((r00*x8502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8507=((1.0)*cj6);
CheckValue<IkReal> x8508 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x8507)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8508.valid){
continue;
}
CheckValue<IkReal> x8509=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r21*sj5*x8507)))),-1);
if(!x8509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8508.value)+(((1.5707963267949)*(x8509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8510=IKcos(j4);
IkReal x8511=IKsin(j4);
IkReal x8512=(cj5*sj6);
IkReal x8513=(cj5*r21);
IkReal x8514=(cj5*r01);
IkReal x8515=(cj5*cj6*r11);
IkReal x8516=((1.0)*x8511);
IkReal x8517=(cj6*x8510);
IkReal x8518=(sj5*x8510);
IkReal x8519=(cj6*x8511);
IkReal x8520=(sj5*x8516);
IkReal x8521=((1.0)*sj6*x8510);
evalcond[0]=((((-1.0)*r21*sj6*x8516))+((r22*x8518))+((x8513*x8517))+((r20*x8510*x8512))+((r20*x8519)));
evalcond[1]=(((r02*x8518))+((x8514*x8517))+(((-1.0)*r01*sj6*x8516))+((r00*x8519))+((r00*x8510*x8512)));
evalcond[2]=((1.0)+((r10*x8510*x8512))+((r12*x8518))+((x8510*x8515))+(((-1.0)*r11*sj6*x8516))+((r10*x8519)));
evalcond[3]=((((-1.0)*cj6*x8513*x8516))+(((-1.0)*r21*x8521))+(((-1.0)*r20*x8512*x8516))+(((-1.0)*r22*x8520))+((r20*x8517)));
evalcond[4]=((((-1.0)*x8515*x8516))+(((-1.0)*r10*x8512*x8516))+(((-1.0)*r11*x8521))+(((-1.0)*r12*x8520))+((r10*x8517)));
evalcond[5]=((1.0)+(((-1.0)*r00*x8512*x8516))+(((-1.0)*r01*x8521))+(((-1.0)*r02*x8520))+(((-1.0)*cj6*x8514*x8516))+((r00*x8517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8522=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8522.valid){
continue;
}
CheckValue<IkReal> x8523 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8522.value)))+(x8523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8524=IKcos(j4);
IkReal x8525=IKsin(j4);
IkReal x8526=(cj5*sj6);
IkReal x8527=(cj5*r21);
IkReal x8528=(cj5*r01);
IkReal x8529=(cj5*cj6*r11);
IkReal x8530=((1.0)*x8525);
IkReal x8531=(cj6*x8524);
IkReal x8532=(sj5*x8524);
IkReal x8533=(cj6*x8525);
IkReal x8534=(sj5*x8530);
IkReal x8535=((1.0)*sj6*x8524);
evalcond[0]=(((r22*x8532))+((x8527*x8531))+(((-1.0)*r21*sj6*x8530))+((r20*x8533))+((r20*x8524*x8526)));
evalcond[1]=(((r00*x8533))+(((-1.0)*r01*sj6*x8530))+((x8528*x8531))+((r00*x8524*x8526))+((r02*x8532)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x8530))+((r10*x8533))+((x8524*x8529))+((r12*x8532))+((r10*x8524*x8526)));
evalcond[3]=((((-1.0)*r22*x8534))+(((-1.0)*cj6*x8527*x8530))+((r20*x8531))+(((-1.0)*r20*x8526*x8530))+(((-1.0)*r21*x8535)));
evalcond[4]=((((-1.0)*r10*x8526*x8530))+((r10*x8531))+(((-1.0)*r11*x8535))+(((-1.0)*r12*x8534))+(((-1.0)*x8529*x8530)));
evalcond[5]=((1.0)+(((-1.0)*r02*x8534))+(((-1.0)*r01*x8535))+((r00*x8531))+(((-1.0)*r00*x8526*x8530))+(((-1.0)*cj6*x8528*x8530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8536=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8536;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x8536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8537=((1.0)*sj5);
IkReal x8538=((((-1.0)*cj6*r01*x8537))+(((-1.0)*r00*sj6*x8537))+((cj5*r02)));
j4eval[0]=x8538;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x8538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8539=cj6*cj6;
IkReal x8540=cj5*cj5;
IkReal x8541=r00*r00;
IkReal x8542=r01*r01;
IkReal x8543=r02*r02;
IkReal x8544=(r00*sj6);
IkReal x8545=((2.0)*cj6*r01);
IkReal x8546=(cj5*r02*sj5);
IkReal x8547=((1.0)*x8539);
IkReal x8548=(x8540*x8541);
IkReal x8549=(((x8540*x8543))+((x8539*x8548))+((x8539*x8542))+((x8544*x8545))+(((-1.0)*x8540*x8544*x8545))+(((-1.0)*x8541*x8547))+(((-2.0)*x8544*x8546))+(((-1.0)*x8540*x8542*x8547))+(((-1.0)*x8545*x8546))+(((-1.0)*x8543))+(((-1.0)*x8542))+(((-1.0)*x8548)));
j4eval[0]=x8549;
j4eval[1]=((IKabs((((cj5*x8544))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x8549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8550=cj6*cj6;
IkReal x8551=cj5*cj5;
IkReal x8552=r00*r00;
IkReal x8553=r01*r01;
IkReal x8554=r02*r02;
IkReal x8555=(r01*sj6);
IkReal x8556=(cj6*r00);
IkReal x8557=(cj5*cj6*r01);
IkReal x8558=((2.0)*r02*sj5);
IkReal x8559=((1.0)*x8550);
IkReal x8560=(cj5*r00*sj6);
IkReal x8561=(x8551*x8552);
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign((((x8551*x8554))+((x8550*x8553))+(((-1.0)*x8558*x8560))+(((-1.0)*x8551*x8553*x8559))+(((-2.0)*x8551*x8555*x8556))+(((-1.0)*x8557*x8558))+(((-1.0)*x8552*x8559))+(((-1.0)*x8561))+(((2.0)*x8555*x8556))+(((-1.0)*x8554))+(((-1.0)*x8553))+((x8550*x8561)))),-1);
if(!x8562.valid){
continue;
}
CheckValue<IkReal> x8563 = IKatan2WithCheck(IkReal((x8560+x8557+((r02*sj5)))),IkReal((x8555+(((-1.0)*x8556)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8562.value)))+(x8563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8564=IKcos(j4);
IkReal x8565=IKsin(j4);
IkReal x8566=(cj5*sj6);
IkReal x8567=(cj5*r21);
IkReal x8568=(cj5*r01);
IkReal x8569=(cj5*cj6*r11);
IkReal x8570=((1.0)*x8565);
IkReal x8571=(cj6*x8564);
IkReal x8572=(sj5*x8564);
IkReal x8573=(cj6*x8565);
IkReal x8574=(sj5*x8570);
IkReal x8575=((1.0)*sj6*x8564);
evalcond[0]=(((r22*x8572))+((r20*x8564*x8566))+((x8567*x8571))+((r20*x8573))+(((-1.0)*r21*sj6*x8570)));
evalcond[1]=(((r02*x8572))+((r00*x8564*x8566))+((r00*x8573))+((x8568*x8571))+(((-1.0)*r01*sj6*x8570)));
evalcond[2]=((-1.0)+((r10*x8564*x8566))+((r12*x8572))+((x8564*x8569))+(((-1.0)*r11*sj6*x8570))+((r10*x8573)));
evalcond[3]=((((-1.0)*r21*x8575))+(((-1.0)*cj6*x8567*x8570))+((r20*x8571))+(((-1.0)*r20*x8566*x8570))+(((-1.0)*r22*x8574)));
evalcond[4]=((((-1.0)*r10*x8566*x8570))+(((-1.0)*x8569*x8570))+((r10*x8571))+(((-1.0)*r11*x8575))+(((-1.0)*r12*x8574)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x8574))+(((-1.0)*r00*x8566*x8570))+(((-1.0)*cj6*x8568*x8570))+((r00*x8571))+(((-1.0)*r01*x8575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8576=((1.0)*sj5);
CheckValue<IkReal> x8577=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x8576))+(((-1.0)*r00*sj6*x8576))+((cj5*r02)))),-1);
if(!x8577.valid){
continue;
}
CheckValue<IkReal> x8578 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8577.value)))+(x8578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8579=IKcos(j4);
IkReal x8580=IKsin(j4);
IkReal x8581=(cj5*sj6);
IkReal x8582=(cj5*r21);
IkReal x8583=(cj5*r01);
IkReal x8584=(cj5*cj6*r11);
IkReal x8585=((1.0)*x8580);
IkReal x8586=(cj6*x8579);
IkReal x8587=(sj5*x8579);
IkReal x8588=(cj6*x8580);
IkReal x8589=(sj5*x8585);
IkReal x8590=((1.0)*sj6*x8579);
evalcond[0]=(((r22*x8587))+((r20*x8579*x8581))+((x8582*x8586))+((r20*x8588))+(((-1.0)*r21*sj6*x8585)));
evalcond[1]=(((r02*x8587))+((r00*x8579*x8581))+((r00*x8588))+((x8583*x8586))+(((-1.0)*r01*sj6*x8585)));
evalcond[2]=((-1.0)+((r12*x8587))+(((-1.0)*r11*sj6*x8585))+((r10*x8588))+((r10*x8579*x8581))+((x8579*x8584)));
evalcond[3]=((((-1.0)*r22*x8589))+(((-1.0)*r20*x8581*x8585))+(((-1.0)*cj6*x8582*x8585))+((r20*x8586))+(((-1.0)*r21*x8590)));
evalcond[4]=((((-1.0)*x8584*x8585))+(((-1.0)*r11*x8590))+((r10*x8586))+(((-1.0)*r10*x8581*x8585))+(((-1.0)*r12*x8589)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x8583*x8585))+(((-1.0)*r01*x8590))+(((-1.0)*r02*x8589))+((r00*x8586))+(((-1.0)*r00*x8581*x8585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8591 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*cj6*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8591.valid){
continue;
}
CheckValue<IkReal> x8592=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8591.value)+(((1.5707963267949)*(x8592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8593=IKcos(j4);
IkReal x8594=IKsin(j4);
IkReal x8595=(cj5*sj6);
IkReal x8596=(cj5*r21);
IkReal x8597=(cj5*r01);
IkReal x8598=(cj5*cj6*r11);
IkReal x8599=((1.0)*x8594);
IkReal x8600=(cj6*x8593);
IkReal x8601=(sj5*x8593);
IkReal x8602=(cj6*x8594);
IkReal x8603=(sj5*x8599);
IkReal x8604=((1.0)*sj6*x8593);
evalcond[0]=(((r20*x8593*x8595))+((x8596*x8600))+((r20*x8602))+((r22*x8601))+(((-1.0)*r21*sj6*x8599)));
evalcond[1]=(((x8597*x8600))+((r00*x8602))+(((-1.0)*r01*sj6*x8599))+((r00*x8593*x8595))+((r02*x8601)));
evalcond[2]=((-1.0)+((r12*x8601))+((r10*x8602))+(((-1.0)*r11*sj6*x8599))+((x8593*x8598))+((r10*x8593*x8595)));
evalcond[3]=((((-1.0)*cj6*x8596*x8599))+((r20*x8600))+(((-1.0)*r22*x8603))+(((-1.0)*r21*x8604))+(((-1.0)*r20*x8595*x8599)));
evalcond[4]=((((-1.0)*r10*x8595*x8599))+(((-1.0)*x8598*x8599))+(((-1.0)*r12*x8603))+((r10*x8600))+(((-1.0)*r11*x8604)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x8604))+(((-1.0)*r02*x8603))+((r00*x8600))+(((-1.0)*cj6*x8597*x8599))+(((-1.0)*r00*x8595*x8599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8605=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8605;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x8605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8606=((1.0)*sj5);
IkReal x8607=((((-1.0)*r10*sj6*x8606))+((cj5*r12))+(((-1.0)*cj6*r11*x8606)));
j4eval[0]=x8607;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x8607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8608=cj6*cj6;
IkReal x8609=cj5*cj5;
IkReal x8610=r10*r10;
IkReal x8611=r11*r11;
IkReal x8612=r12*r12;
IkReal x8613=(r10*sj6);
IkReal x8614=(r12*sj5);
IkReal x8615=((2.0)*cj6*r11);
IkReal x8616=((1.0)*x8610);
IkReal x8617=(x8608*x8611);
IkReal x8618=(x8617+(((-1.0)*x8608*x8616))+((x8608*x8609*x8610))+((x8609*x8612))+(((-1.0)*cj5*x8614*x8615))+((x8613*x8615))+(((-1.0)*x8612))+(((-1.0)*x8611))+(((-2.0)*cj5*x8613*x8614))+(((-1.0)*x8609*x8616))+(((-1.0)*x8609*x8613*x8615))+(((-1.0)*x8609*x8617)));
j4eval[0]=x8618;
j4eval[1]=((IKabs((x8614+((cj5*x8613))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x8618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8619=cj6*cj6;
IkReal x8620=cj5*cj5;
IkReal x8621=r10*r10;
IkReal x8622=r11*r11;
IkReal x8623=r12*r12;
IkReal x8624=(r10*sj6);
IkReal x8625=(r12*sj5);
IkReal x8626=((2.0)*cj6*r11);
IkReal x8627=(x8619*x8622);
IkReal x8628=(x8620*x8621);
CheckValue<IkReal> x8629 = IKatan2WithCheck(IkReal((x8625+((cj5*x8624))+((cj5*cj6*r11)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8629.valid){
continue;
}
CheckValue<IkReal> x8630=IKPowWithIntegerCheck(IKsign((((x8620*x8623))+(((-1.0)*x8623))+(((-1.0)*x8622))+(((-1.0)*x8628))+x8627+(((-1.0)*cj5*x8625*x8626))+(((-1.0)*x8619*x8621))+(((-2.0)*cj5*x8624*x8625))+((x8619*x8628))+(((-1.0)*x8620*x8627))+((x8624*x8626))+(((-1.0)*x8620*x8624*x8626)))),-1);
if(!x8630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8629.value)+(((1.5707963267949)*(x8630.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8631=IKcos(j4);
IkReal x8632=IKsin(j4);
IkReal x8633=(cj5*sj6);
IkReal x8634=(cj5*r01);
IkReal x8635=(cj5*r21);
IkReal x8636=(cj5*cj6*r11);
IkReal x8637=((1.0)*x8632);
IkReal x8638=(cj6*x8631);
IkReal x8639=(sj5*x8631);
IkReal x8640=(cj6*x8632);
IkReal x8641=(sj5*x8637);
IkReal x8642=((1.0)*sj6*x8631);
evalcond[0]=((((-1.0)*r21*sj6*x8637))+((r20*x8631*x8633))+((r20*x8640))+((x8635*x8638))+((r22*x8639)));
evalcond[1]=(((r10*x8631*x8633))+(((-1.0)*r11*sj6*x8637))+((r10*x8640))+((r12*x8639))+((x8631*x8636)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj6*x8637))+((r02*x8639))+((r00*x8640))+((r00*x8631*x8633))+((x8634*x8638)));
evalcond[3]=((((-1.0)*cj6*x8635*x8637))+(((-1.0)*r22*x8641))+((r20*x8638))+(((-1.0)*r20*x8633*x8637))+(((-1.0)*r21*x8642)));
evalcond[4]=((((-1.0)*r01*x8642))+(((-1.0)*cj6*x8634*x8637))+(((-1.0)*r00*x8633*x8637))+(((-1.0)*r02*x8641))+((r00*x8638)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x8641))+(((-1.0)*r11*x8642))+(((-1.0)*x8636*x8637))+((r10*x8638))+(((-1.0)*r10*x8633*x8637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8643=((1.0)*sj5);
CheckValue<IkReal> x8644 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8644.valid){
continue;
}
CheckValue<IkReal> x8645=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x8643))+(((-1.0)*cj6*r11*x8643)))),-1);
if(!x8645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8644.value)+(((1.5707963267949)*(x8645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8646=IKcos(j4);
IkReal x8647=IKsin(j4);
IkReal x8648=(cj5*sj6);
IkReal x8649=(cj5*r01);
IkReal x8650=(cj5*r21);
IkReal x8651=(cj5*cj6*r11);
IkReal x8652=((1.0)*x8647);
IkReal x8653=(cj6*x8646);
IkReal x8654=(sj5*x8646);
IkReal x8655=(cj6*x8647);
IkReal x8656=(sj5*x8652);
IkReal x8657=((1.0)*sj6*x8646);
evalcond[0]=((((-1.0)*r21*sj6*x8652))+((r22*x8654))+((r20*x8646*x8648))+((x8650*x8653))+((r20*x8655)));
evalcond[1]=(((r10*x8655))+((x8646*x8651))+((r12*x8654))+(((-1.0)*r11*sj6*x8652))+((r10*x8646*x8648)));
evalcond[2]=((1.0)+((r00*x8655))+((x8649*x8653))+(((-1.0)*r01*sj6*x8652))+((r02*x8654))+((r00*x8646*x8648)));
evalcond[3]=((((-1.0)*r21*x8657))+(((-1.0)*r20*x8648*x8652))+(((-1.0)*cj6*x8650*x8652))+(((-1.0)*r22*x8656))+((r20*x8653)));
evalcond[4]=(((r00*x8653))+(((-1.0)*r01*x8657))+(((-1.0)*cj6*x8649*x8652))+(((-1.0)*r00*x8648*x8652))+(((-1.0)*r02*x8656)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x8656))+(((-1.0)*r11*x8657))+((r10*x8653))+(((-1.0)*x8651*x8652))+(((-1.0)*r10*x8648*x8652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8658=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8658.valid){
continue;
}
CheckValue<IkReal> x8659 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8659.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8658.value)))+(x8659.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8660=IKcos(j4);
IkReal x8661=IKsin(j4);
IkReal x8662=(cj5*sj6);
IkReal x8663=(cj5*r01);
IkReal x8664=(cj5*r21);
IkReal x8665=(cj5*cj6*r11);
IkReal x8666=((1.0)*x8661);
IkReal x8667=(cj6*x8660);
IkReal x8668=(sj5*x8660);
IkReal x8669=(cj6*x8661);
IkReal x8670=(sj5*x8666);
IkReal x8671=((1.0)*sj6*x8660);
evalcond[0]=(((r20*x8669))+((r22*x8668))+((r20*x8660*x8662))+((x8664*x8667))+(((-1.0)*r21*sj6*x8666)));
evalcond[1]=((((-1.0)*r11*sj6*x8666))+((r12*x8668))+((r10*x8669))+((x8660*x8665))+((r10*x8660*x8662)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj6*x8666))+((r00*x8669))+((r00*x8660*x8662))+((r02*x8668))+((x8663*x8667)));
evalcond[3]=((((-1.0)*cj6*x8664*x8666))+((r20*x8667))+(((-1.0)*r20*x8662*x8666))+(((-1.0)*r22*x8670))+(((-1.0)*r21*x8671)));
evalcond[4]=((((-1.0)*r01*x8671))+(((-1.0)*r02*x8670))+((r00*x8667))+(((-1.0)*r00*x8662*x8666))+(((-1.0)*cj6*x8663*x8666)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x8671))+(((-1.0)*r12*x8670))+((r10*x8667))+(((-1.0)*r10*x8662*x8666))+(((-1.0)*x8665*x8666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8672=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x8672;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x8672);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8673=((1.0)*cj6);
IkReal x8674=(((cj5*r22))+(((-1.0)*r21*sj5*x8673))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x8674;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x8673)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x8674);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8675=r11*r11;
IkReal x8676=cj5*cj5;
IkReal x8677=cj6*cj6;
IkReal x8678=r10*r10;
IkReal x8679=r12*r12;
IkReal x8680=(r12*sj5);
IkReal x8681=(r11*sj6);
IkReal x8682=((1.0)*x8677);
IkReal x8683=(cj5*cj6*r11);
IkReal x8684=(cj5*r10*sj6);
IkReal x8685=((2.0)*cj6*r10);
IkReal x8686=(x8676*x8678);
IkReal x8687=((((-1.0)*x8682*x8686))+x8686+x8675+x8679+(((-1.0)*x8681*x8685))+(((2.0)*x8680*x8683))+(((2.0)*x8680*x8684))+((x8675*x8676*x8677))+(((-1.0)*x8675*x8682))+((x8677*x8678))+(((-1.0)*x8676*x8679))+((x8676*x8681*x8685)));
j4eval[0]=x8687;
j4eval[1]=((IKabs((x8683+x8680+x8684)))+(IKabs((x8681+(((-1.0)*cj6*r10))))));
j4eval[2]=IKsign(x8687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8688=r11*r11;
IkReal x8689=cj5*cj5;
IkReal x8690=cj6*cj6;
IkReal x8691=r10*r10;
IkReal x8692=r12*r12;
IkReal x8693=(r10*sj6);
IkReal x8694=(r12*sj5);
IkReal x8695=((1.0)*x8690);
IkReal x8696=(cj5*cj6*r11);
IkReal x8697=((2.0)*cj6*r11);
IkReal x8698=(x8689*x8691);
CheckValue<IkReal> x8699 = IKatan2WithCheck(IkReal((x8694+x8696+((cj5*x8693)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8699.valid){
continue;
}
CheckValue<IkReal> x8700=IKPowWithIntegerCheck(IKsign((((x8689*x8693*x8697))+(((2.0)*cj5*x8693*x8694))+x8698+x8692+x8688+((x8690*x8691))+((x8688*x8689*x8690))+(((-1.0)*x8688*x8695))+(((-1.0)*x8689*x8692))+(((-1.0)*x8695*x8698))+(((2.0)*x8694*x8696))+(((-1.0)*x8693*x8697)))),-1);
if(!x8700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8699.value)+(((1.5707963267949)*(x8700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8701=IKcos(j4);
IkReal x8702=IKsin(j4);
IkReal x8703=(cj5*sj6);
IkReal x8704=(cj5*r01);
IkReal x8705=(cj5*r21);
IkReal x8706=(cj5*cj6*r11);
IkReal x8707=((1.0)*x8702);
IkReal x8708=(cj6*x8701);
IkReal x8709=(sj5*x8701);
IkReal x8710=(cj6*x8702);
IkReal x8711=(sj5*x8707);
IkReal x8712=((1.0)*sj6*x8701);
evalcond[0]=((((-1.0)*r21*sj6*x8707))+((r20*x8701*x8703))+((r22*x8709))+((r20*x8710))+((x8705*x8708)));
evalcond[1]=(((r10*x8701*x8703))+((r12*x8709))+((x8701*x8706))+((r10*x8710))+(((-1.0)*r11*sj6*x8707)));
evalcond[2]=((-1.0)+((x8704*x8708))+(((-1.0)*r01*sj6*x8707))+((r02*x8709))+((r00*x8710))+((r00*x8701*x8703)));
evalcond[3]=((((-1.0)*r21*x8712))+(((-1.0)*r20*x8703*x8707))+(((-1.0)*r22*x8711))+(((-1.0)*cj6*x8705*x8707))+((r20*x8708)));
evalcond[4]=((((-1.0)*r01*x8712))+(((-1.0)*r02*x8711))+(((-1.0)*r00*x8703*x8707))+((r00*x8708))+(((-1.0)*cj6*x8704*x8707)));
evalcond[5]=((1.0)+((r10*x8708))+(((-1.0)*r10*x8703*x8707))+(((-1.0)*x8706*x8707))+(((-1.0)*r12*x8711))+(((-1.0)*r11*x8712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8713=((1.0)*cj6);
CheckValue<IkReal> x8714=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x8713))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x8714.valid){
continue;
}
CheckValue<IkReal> x8715 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal((((r11*sj6))+(((-1.0)*r10*x8713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8714.value)))+(x8715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8716=IKcos(j4);
IkReal x8717=IKsin(j4);
IkReal x8718=(cj5*sj6);
IkReal x8719=(cj5*r01);
IkReal x8720=(cj5*r21);
IkReal x8721=(cj5*cj6*r11);
IkReal x8722=((1.0)*x8717);
IkReal x8723=(cj6*x8716);
IkReal x8724=(sj5*x8716);
IkReal x8725=(cj6*x8717);
IkReal x8726=(sj5*x8722);
IkReal x8727=((1.0)*sj6*x8716);
evalcond[0]=(((r20*x8716*x8718))+((r22*x8724))+((x8720*x8723))+((r20*x8725))+(((-1.0)*r21*sj6*x8722)));
evalcond[1]=(((x8716*x8721))+((r10*x8725))+((r12*x8724))+((r10*x8716*x8718))+(((-1.0)*r11*sj6*x8722)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x8722))+((r02*x8724))+((x8719*x8723))+((r00*x8725))+((r00*x8716*x8718)));
evalcond[3]=((((-1.0)*r20*x8718*x8722))+(((-1.0)*cj6*x8720*x8722))+(((-1.0)*r21*x8727))+((r20*x8723))+(((-1.0)*r22*x8726)));
evalcond[4]=((((-1.0)*r00*x8718*x8722))+(((-1.0)*cj6*x8719*x8722))+(((-1.0)*r02*x8726))+(((-1.0)*r01*x8727))+((r00*x8723)));
evalcond[5]=((1.0)+((r10*x8723))+(((-1.0)*x8721*x8722))+(((-1.0)*r10*x8718*x8722))+(((-1.0)*r11*x8727))+(((-1.0)*r12*x8726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8728=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8728.valid){
continue;
}
CheckValue<IkReal> x8729 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8728.value)))+(x8729.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8730=IKcos(j4);
IkReal x8731=IKsin(j4);
IkReal x8732=(cj5*sj6);
IkReal x8733=(cj5*r01);
IkReal x8734=(cj5*r21);
IkReal x8735=(cj5*cj6*r11);
IkReal x8736=((1.0)*x8731);
IkReal x8737=(cj6*x8730);
IkReal x8738=(sj5*x8730);
IkReal x8739=(cj6*x8731);
IkReal x8740=(sj5*x8736);
IkReal x8741=((1.0)*sj6*x8730);
evalcond[0]=((((-1.0)*r21*sj6*x8736))+((r20*x8730*x8732))+((x8734*x8737))+((r22*x8738))+((r20*x8739)));
evalcond[1]=(((r10*x8739))+((r12*x8738))+((r10*x8730*x8732))+(((-1.0)*r11*sj6*x8736))+((x8730*x8735)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x8736))+((r02*x8738))+((x8733*x8737))+((r00*x8730*x8732))+((r00*x8739)));
evalcond[3]=((((-1.0)*cj6*x8734*x8736))+(((-1.0)*r20*x8732*x8736))+(((-1.0)*r22*x8740))+((r20*x8737))+(((-1.0)*r21*x8741)));
evalcond[4]=((((-1.0)*r00*x8732*x8736))+(((-1.0)*r01*x8741))+((r00*x8737))+(((-1.0)*cj6*x8733*x8736))+(((-1.0)*r02*x8740)));
evalcond[5]=((1.0)+((r10*x8737))+(((-1.0)*r11*x8741))+(((-1.0)*r12*x8740))+(((-1.0)*r10*x8732*x8736))+(((-1.0)*x8735*x8736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8742=(cj0*cj6);
IkReal x8743=((1.0)*sj0);
IkReal x8744=(cj0*sj6);
IkReal x8745=(sj6*x8743);
CheckValue<IkReal> x8746 = IKatan2WithCheck(IkReal((((cj5*r10*x8744))+(((-1.0)*r02*sj5*x8743))+(((-1.0)*cj5*r00*x8745))+((cj0*r12*sj5))+((cj5*r11*x8742))+(((-1.0)*cj5*cj6*r01*x8743)))),IkReal(((((-1.0)*r10*x8742))+((cj6*r00*sj0))+(((-1.0)*r01*x8745))+((r11*x8744)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8746.valid){
continue;
}
CheckValue<IkReal> x8747=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8746.value)+(((1.5707963267949)*(x8747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8748=IKcos(j4);
IkReal x8749=IKsin(j4);
IkReal x8750=(cj5*sj6);
IkReal x8751=(cj5*r21);
IkReal x8752=(cj5*r01);
IkReal x8753=(cj5*cj6*r11);
IkReal x8754=((1.0)*x8749);
IkReal x8755=(cj6*x8748);
IkReal x8756=(sj5*x8748);
IkReal x8757=(cj6*x8749);
IkReal x8758=(sj5*x8754);
IkReal x8759=((1.0)*sj6*x8748);
evalcond[0]=(((r22*x8756))+((x8751*x8755))+((r20*x8757))+((r20*x8748*x8750))+(((-1.0)*r21*sj6*x8754)));
evalcond[1]=(((r02*x8756))+cj0+((x8752*x8755))+(((-1.0)*r01*sj6*x8754))+((r00*x8757))+((r00*x8748*x8750)));
evalcond[2]=(((r10*x8757))+((r10*x8748*x8750))+sj0+(((-1.0)*r11*sj6*x8754))+((r12*x8756))+((x8748*x8753)));
evalcond[3]=((((-1.0)*r20*x8750*x8754))+(((-1.0)*r22*x8758))+(((-1.0)*cj6*x8751*x8754))+(((-1.0)*r21*x8759))+((r20*x8755)));
evalcond[4]=((((-1.0)*cj6*x8752*x8754))+(((-1.0)*r00*x8750*x8754))+sj0+(((-1.0)*r02*x8758))+((r00*x8755))+(((-1.0)*r01*x8759)));
evalcond[5]=(((r10*x8755))+(((-1.0)*r10*x8750*x8754))+(((-1.0)*x8753*x8754))+(((-1.0)*r12*x8758))+(((-1.0)*r11*x8759))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8760=(cj0*r20);
IkReal x8761=((1.0)*cj6);
IkReal x8762=(cj0*r21);
CheckValue<IkReal> x8763 = IKatan2WithCheck(IkReal((((cj5*sj6*x8760))+((cj5*cj6*x8762))+((cj0*r22*sj5)))),IkReal(((((-1.0)*x8760*x8761))+((sj6*x8762)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8761)))),-1);
if(!x8764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8763.value)+(((1.5707963267949)*(x8764.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8765=IKcos(j4);
IkReal x8766=IKsin(j4);
IkReal x8767=(cj5*sj6);
IkReal x8768=(cj5*r21);
IkReal x8769=(cj5*r01);
IkReal x8770=(cj5*cj6*r11);
IkReal x8771=((1.0)*x8766);
IkReal x8772=(cj6*x8765);
IkReal x8773=(sj5*x8765);
IkReal x8774=(cj6*x8766);
IkReal x8775=(sj5*x8771);
IkReal x8776=((1.0)*sj6*x8765);
evalcond[0]=(((r20*x8765*x8767))+(((-1.0)*r21*sj6*x8771))+((r20*x8774))+((x8768*x8772))+((r22*x8773)));
evalcond[1]=(((r00*x8765*x8767))+cj0+((r00*x8774))+(((-1.0)*r01*sj6*x8771))+((r02*x8773))+((x8769*x8772)));
evalcond[2]=(sj0+((x8765*x8770))+((r10*x8765*x8767))+((r10*x8774))+(((-1.0)*r11*sj6*x8771))+((r12*x8773)));
evalcond[3]=((((-1.0)*r21*x8776))+(((-1.0)*cj6*x8768*x8771))+(((-1.0)*r20*x8767*x8771))+(((-1.0)*r22*x8775))+((r20*x8772)));
evalcond[4]=(sj0+(((-1.0)*r00*x8767*x8771))+(((-1.0)*r02*x8775))+((r00*x8772))+(((-1.0)*cj6*x8769*x8771))+(((-1.0)*r01*x8776)));
evalcond[5]=((((-1.0)*r12*x8775))+(((-1.0)*r10*x8767*x8771))+((r10*x8772))+(((-1.0)*r11*x8776))+(((-1.0)*x8770*x8771))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8777=(r21*sj0);
IkReal x8778=(r20*sj0);
CheckValue<IkReal> x8779 = IKatan2WithCheck(IkReal((((cj5*sj6*x8778))+((cj5*cj6*x8777))+((r22*sj0*sj5)))),IkReal(((((-1.0)*cj6*x8778))+((sj6*x8777)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8779.valid){
continue;
}
CheckValue<IkReal> x8780=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8780.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8779.value)+(((1.5707963267949)*(x8780.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8781=IKcos(j4);
IkReal x8782=IKsin(j4);
IkReal x8783=(cj5*sj6);
IkReal x8784=(cj5*r21);
IkReal x8785=(cj5*r01);
IkReal x8786=(cj5*cj6*r11);
IkReal x8787=((1.0)*x8782);
IkReal x8788=(cj6*x8781);
IkReal x8789=(sj5*x8781);
IkReal x8790=(cj6*x8782);
IkReal x8791=(sj5*x8787);
IkReal x8792=((1.0)*sj6*x8781);
evalcond[0]=(((x8784*x8788))+((r22*x8789))+((r20*x8781*x8783))+((r20*x8790))+(((-1.0)*r21*sj6*x8787)));
evalcond[1]=(cj0+(((-1.0)*r01*sj6*x8787))+((r02*x8789))+((x8785*x8788))+((r00*x8790))+((r00*x8781*x8783)));
evalcond[2]=(((r10*x8790))+sj0+((r12*x8789))+((r10*x8781*x8783))+((x8781*x8786))+(((-1.0)*r11*sj6*x8787)));
evalcond[3]=((((-1.0)*cj6*x8784*x8787))+(((-1.0)*r21*x8792))+(((-1.0)*r20*x8783*x8787))+((r20*x8788))+(((-1.0)*r22*x8791)));
evalcond[4]=(sj0+(((-1.0)*r02*x8791))+(((-1.0)*r01*x8792))+(((-1.0)*r00*x8783*x8787))+((r00*x8788))+(((-1.0)*cj6*x8785*x8787)));
evalcond[5]=((((-1.0)*r12*x8791))+(((-1.0)*r11*x8792))+((r10*x8788))+(((-1.0)*x8786*x8787))+(((-1.0)*r10*x8783*x8787))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8793=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x8793))+(((-1.0)*cj6*r11*x8793)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x8793))+(((-1.0)*r00*sj6*x8793))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x8793))+(((-1.0)*cj6*r11*x8793))))+IKsqr(((((-1.0)*cj6*r01*x8793))+(((-1.0)*r00*sj6*x8793))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x8793))+(((-1.0)*cj6*r11*x8793))), ((((-1.0)*cj6*r01*x8793))+(((-1.0)*r00*sj6*x8793))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8794=((1.0)*sj5);
evalcond[0]=(((cj5*r12))+(((-1.0)*r10*sj6*x8794))+(((-1.0)*(IKsin(j0))))+(((-1.0)*cj6*r11*x8794)));
evalcond[1]=((((-1.0)*cj6*r01*x8794))+(((-1.0)*r00*sj6*x8794))+(((-1.0)*(IKcos(j0))))+((cj5*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8795=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8795;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x8795);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8796=((1.0)*cj6);
IkReal x8797=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8796)));
j4eval[0]=x8797;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x8796))))));
j4eval[2]=IKsign(x8797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8798=cj6*cj6;
IkReal x8799=r01*r01;
IkReal x8800=cj5*cj5;
IkReal x8801=r00*r00;
IkReal x8802=r02*r02;
IkReal x8803=(r02*sj5);
IkReal x8804=(r01*sj6);
IkReal x8805=(cj5*cj6*r01);
IkReal x8806=((2.0)*cj6*r00);
IkReal x8807=((1.0)*x8800);
IkReal x8808=(cj5*r00*sj6);
IkReal x8809=(x8798*x8801);
IkReal x8810=(x8798*x8799);
IkReal x8811=(((x8800*x8801))+((x8800*x8810))+(((-1.0)*x8807*x8809))+x8799+(((-1.0)*x8810))+x8802+x8809+((x8800*x8804*x8806))+(((2.0)*x8803*x8805))+(((2.0)*x8803*x8808))+(((-1.0)*x8802*x8807))+(((-1.0)*x8804*x8806)));
j4eval[0]=x8811;
j4eval[1]=((IKabs((((sj0*x8803))+((sj0*x8808))+((sj0*x8805)))))+(IKabs((((sj0*x8804))+(((-1.0)*cj6*r00*sj0))))));
j4eval[2]=IKsign(x8811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8812=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8812;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x8812);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8813=((1.0)*cj6);
IkReal x8814=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8813)));
j4eval[0]=x8814;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x8813))))));
j4eval[2]=IKsign(x8814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8815=cj6*cj6;
IkReal x8816=cj5*cj5;
IkReal x8817=r10*r10;
IkReal x8818=r11*r11;
IkReal x8819=r12*r12;
IkReal x8820=(r10*sj6);
IkReal x8821=(r12*sj5);
IkReal x8822=((2.0)*cj6*r11);
IkReal x8823=((1.0)*x8817);
IkReal x8824=(x8815*x8818);
IkReal x8825=((((-1.0)*x8816*x8824))+(((-1.0)*x8819))+(((-1.0)*x8818))+(((-1.0)*x8816*x8823))+x8824+(((-1.0)*x8815*x8823))+(((-1.0)*cj5*x8821*x8822))+(((-1.0)*x8816*x8820*x8822))+(((-2.0)*cj5*x8820*x8821))+((x8820*x8822))+((x8815*x8816*x8817))+((x8816*x8819)));
j4eval[0]=x8825;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+((r11*sj6)))))+(IKabs((x8821+((cj5*x8820))+((cj5*cj6*r11))))));
j4eval[2]=IKsign(x8825);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8826=cj6*cj6;
IkReal x8827=cj5*cj5;
IkReal x8828=r10*r10;
IkReal x8829=r11*r11;
IkReal x8830=r12*r12;
IkReal x8831=(r10*sj6);
IkReal x8832=(r12*sj5);
IkReal x8833=((2.0)*cj6*r11);
IkReal x8834=(x8826*x8829);
IkReal x8835=(x8827*x8828);
CheckValue<IkReal> x8836=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8827*x8831*x8833))+((x8827*x8830))+(((-2.0)*cj5*x8831*x8832))+((x8831*x8833))+((x8826*x8835))+x8834+(((-1.0)*x8829))+(((-1.0)*x8830))+(((-1.0)*x8835))+(((-1.0)*x8827*x8834))+(((-1.0)*x8826*x8828))+(((-1.0)*cj5*x8832*x8833)))),-1);
if(!x8836.valid){
continue;
}
CheckValue<IkReal> x8837 = IKatan2WithCheck(IkReal((x8832+((cj5*x8831))+((cj5*cj6*r11)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8836.value)))+(x8837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8838=IKcos(j4);
IkReal x8839=IKsin(j4);
IkReal x8840=(cj5*sj6);
IkReal x8841=(cj5*r01);
IkReal x8842=(cj5*r21);
IkReal x8843=(cj5*cj6*r11);
IkReal x8844=((1.0)*x8839);
IkReal x8845=(cj6*x8838);
IkReal x8846=(sj5*x8838);
IkReal x8847=(cj6*x8839);
IkReal x8848=(sj5*x8844);
IkReal x8849=((1.0)*sj6*x8838);
evalcond[0]=(((r02*x8846))+(((-1.0)*r01*sj6*x8844))+((x8841*x8845))+((r00*x8838*x8840))+((r00*x8847)));
evalcond[1]=((((-1.0)*r11*sj6*x8844))+((r12*x8846))+((r10*x8847))+((x8838*x8843))+((r10*x8838*x8840)));
evalcond[2]=((-1.0)+((r22*x8846))+((r20*x8838*x8840))+((x8842*x8845))+((r20*x8847))+(((-1.0)*r21*sj6*x8844)));
evalcond[3]=((((-1.0)*cj6*x8842*x8844))+(((-1.0)*r20*x8840*x8844))+((r20*x8845))+(((-1.0)*r21*x8849))+(((-1.0)*r22*x8848)));
evalcond[4]=((((-1.0)*cj6*x8841*x8844))+(((-1.0)*r02*x8848))+(((-1.0)*r01*x8849))+((r00*x8845))+(((-1.0)*r00*x8840*x8844)));
evalcond[5]=((-1.0)+((r10*x8845))+(((-1.0)*x8843*x8844))+(((-1.0)*r10*x8840*x8844))+(((-1.0)*r11*x8849))+(((-1.0)*r12*x8848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8850=((1.0)*cj6);
CheckValue<IkReal> x8851 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x8850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8851.valid){
continue;
}
CheckValue<IkReal> x8852=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8850)))),-1);
if(!x8852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8851.value)+(((1.5707963267949)*(x8852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8853=IKcos(j4);
IkReal x8854=IKsin(j4);
IkReal x8855=(cj5*sj6);
IkReal x8856=(cj5*r01);
IkReal x8857=(cj5*r21);
IkReal x8858=(cj5*cj6*r11);
IkReal x8859=((1.0)*x8854);
IkReal x8860=(cj6*x8853);
IkReal x8861=(sj5*x8853);
IkReal x8862=(cj6*x8854);
IkReal x8863=(sj5*x8859);
IkReal x8864=((1.0)*sj6*x8853);
evalcond[0]=(((r02*x8861))+((r00*x8853*x8855))+((r00*x8862))+(((-1.0)*r01*sj6*x8859))+((x8856*x8860)));
evalcond[1]=(((r12*x8861))+(((-1.0)*r11*sj6*x8859))+((x8853*x8858))+((r10*x8853*x8855))+((r10*x8862)));
evalcond[2]=((-1.0)+(((-1.0)*r21*sj6*x8859))+((r20*x8862))+((r20*x8853*x8855))+((x8857*x8860))+((r22*x8861)));
evalcond[3]=(((r20*x8860))+(((-1.0)*r20*x8855*x8859))+(((-1.0)*r22*x8863))+(((-1.0)*r21*x8864))+(((-1.0)*cj6*x8857*x8859)));
evalcond[4]=(((r00*x8860))+(((-1.0)*r00*x8855*x8859))+(((-1.0)*cj6*x8856*x8859))+(((-1.0)*r01*x8864))+(((-1.0)*r02*x8863)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x8855*x8859))+(((-1.0)*x8858*x8859))+(((-1.0)*r11*x8864))+(((-1.0)*r12*x8863))+((r10*x8860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8865 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8865.valid){
continue;
}
CheckValue<IkReal> x8866=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8865.value)+(((1.5707963267949)*(x8866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8867=IKcos(j4);
IkReal x8868=IKsin(j4);
IkReal x8869=(cj5*sj6);
IkReal x8870=(cj5*r01);
IkReal x8871=(cj5*r21);
IkReal x8872=(cj5*cj6*r11);
IkReal x8873=((1.0)*x8868);
IkReal x8874=(cj6*x8867);
IkReal x8875=(sj5*x8867);
IkReal x8876=(cj6*x8868);
IkReal x8877=(sj5*x8873);
IkReal x8878=((1.0)*sj6*x8867);
evalcond[0]=(((r02*x8875))+((r00*x8876))+((r00*x8867*x8869))+(((-1.0)*r01*sj6*x8873))+((x8870*x8874)));
evalcond[1]=(((r10*x8876))+((r10*x8867*x8869))+((r12*x8875))+(((-1.0)*r11*sj6*x8873))+((x8867*x8872)));
evalcond[2]=((-1.0)+((r20*x8876))+((r20*x8867*x8869))+(((-1.0)*r21*sj6*x8873))+((x8871*x8874))+((r22*x8875)));
evalcond[3]=((((-1.0)*r21*x8878))+((r20*x8874))+(((-1.0)*cj6*x8871*x8873))+(((-1.0)*r22*x8877))+(((-1.0)*r20*x8869*x8873)));
evalcond[4]=((((-1.0)*r01*x8878))+(((-1.0)*r02*x8877))+((r00*x8874))+(((-1.0)*r00*x8869*x8873))+(((-1.0)*cj6*x8870*x8873)));
evalcond[5]=((-1.0)+((r10*x8874))+(((-1.0)*x8872*x8873))+(((-1.0)*r10*x8869*x8873))+(((-1.0)*r12*x8877))+(((-1.0)*r11*x8878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8879=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8879;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x8879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8880=((1.0)*cj6);
IkReal x8881=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8880)));
j4eval[0]=x8881;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x8880))))));
j4eval[2]=IKsign(x8881);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8882=r11*r11;
IkReal x8883=cj5*cj5;
IkReal x8884=cj6*cj6;
IkReal x8885=r10*r10;
IkReal x8886=r12*r12;
IkReal x8887=(r12*sj5);
IkReal x8888=(r11*sj6);
IkReal x8889=((1.0)*x8884);
IkReal x8890=(cj5*cj6*r11);
IkReal x8891=(cj5*r10*sj6);
IkReal x8892=((2.0)*cj6*r10);
IkReal x8893=(x8883*x8885);
IkReal x8894=(((x8883*x8888*x8892))+(((-1.0)*x8889*x8893))+(((-1.0)*x8882*x8889))+(((-1.0)*x8883*x8886))+x8886+x8882+x8893+((x8884*x8885))+(((2.0)*x8887*x8890))+(((2.0)*x8887*x8891))+((x8882*x8883*x8884))+(((-1.0)*x8888*x8892)));
j4eval[0]=x8894;
j4eval[1]=((IKabs((x8888+(((-1.0)*cj6*r10)))))+(IKabs((x8887+x8891+x8890))));
j4eval[2]=IKsign(x8894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8895=r11*r11;
IkReal x8896=cj5*cj5;
IkReal x8897=cj6*cj6;
IkReal x8898=r10*r10;
IkReal x8899=r12*r12;
IkReal x8900=(r10*sj6);
IkReal x8901=(r12*sj5);
IkReal x8902=((1.0)*x8897);
IkReal x8903=(cj5*cj6*r11);
IkReal x8904=((2.0)*cj6*r11);
IkReal x8905=(x8896*x8898);
CheckValue<IkReal> x8906 = IKatan2WithCheck(IkReal((x8901+x8903+((cj5*x8900)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8906.valid){
continue;
}
CheckValue<IkReal> x8907=IKPowWithIntegerCheck(IKsign((((x8896*x8900*x8904))+(((-1.0)*x8902*x8905))+(((-1.0)*x8900*x8904))+x8899+x8895+x8905+((x8897*x8898))+(((2.0)*cj5*x8900*x8901))+(((-1.0)*x8895*x8902))+(((-1.0)*x8896*x8899))+((x8895*x8896*x8897))+(((2.0)*x8901*x8903)))),-1);
if(!x8907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8906.value)+(((1.5707963267949)*(x8907.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8908=IKcos(j4);
IkReal x8909=IKsin(j4);
IkReal x8910=(cj5*sj6);
IkReal x8911=(cj5*r01);
IkReal x8912=(cj5*r21);
IkReal x8913=(cj5*cj6*r11);
IkReal x8914=((1.0)*x8909);
IkReal x8915=(cj6*x8908);
IkReal x8916=(sj5*x8908);
IkReal x8917=(cj6*x8909);
IkReal x8918=(sj5*x8914);
IkReal x8919=((1.0)*sj6*x8908);
evalcond[0]=(((r00*x8917))+((x8911*x8915))+((r02*x8916))+((r00*x8908*x8910))+(((-1.0)*r01*sj6*x8914)));
evalcond[1]=(((r10*x8908*x8910))+(((-1.0)*r11*sj6*x8914))+((r12*x8916))+((r10*x8917))+((x8908*x8913)));
evalcond[2]=((-1.0)+((r20*x8908*x8910))+((r22*x8916))+(((-1.0)*r21*sj6*x8914))+((x8912*x8915))+((r20*x8917)));
evalcond[3]=((((-1.0)*r20*x8910*x8914))+(((-1.0)*r21*x8919))+(((-1.0)*cj6*x8912*x8914))+(((-1.0)*r22*x8918))+((r20*x8915)));
evalcond[4]=(((r00*x8915))+(((-1.0)*r01*x8919))+(((-1.0)*r02*x8918))+(((-1.0)*r00*x8910*x8914))+(((-1.0)*cj6*x8911*x8914)));
evalcond[5]=((1.0)+(((-1.0)*r10*x8910*x8914))+(((-1.0)*r12*x8918))+(((-1.0)*r11*x8919))+(((-1.0)*x8913*x8914))+((r10*x8915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8920=((1.0)*cj6);
CheckValue<IkReal> x8921=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8920)))),-1);
if(!x8921.valid){
continue;
}
CheckValue<IkReal> x8922 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x8920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8921.value)))+(x8922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8923=IKcos(j4);
IkReal x8924=IKsin(j4);
IkReal x8925=(cj5*sj6);
IkReal x8926=(cj5*r01);
IkReal x8927=(cj5*r21);
IkReal x8928=(cj5*cj6*r11);
IkReal x8929=((1.0)*x8924);
IkReal x8930=(cj6*x8923);
IkReal x8931=(sj5*x8923);
IkReal x8932=(cj6*x8924);
IkReal x8933=(sj5*x8929);
IkReal x8934=((1.0)*sj6*x8923);
evalcond[0]=(((x8926*x8930))+((r00*x8923*x8925))+(((-1.0)*r01*sj6*x8929))+((r00*x8932))+((r02*x8931)));
evalcond[1]=(((r12*x8931))+((x8923*x8928))+((r10*x8923*x8925))+(((-1.0)*r11*sj6*x8929))+((r10*x8932)));
evalcond[2]=((-1.0)+((x8927*x8930))+((r20*x8932))+(((-1.0)*r21*sj6*x8929))+((r20*x8923*x8925))+((r22*x8931)));
evalcond[3]=((((-1.0)*r22*x8933))+((r20*x8930))+(((-1.0)*cj6*x8927*x8929))+(((-1.0)*r20*x8925*x8929))+(((-1.0)*r21*x8934)));
evalcond[4]=((((-1.0)*r01*x8934))+(((-1.0)*cj6*x8926*x8929))+(((-1.0)*r02*x8933))+((r00*x8930))+(((-1.0)*r00*x8925*x8929)));
evalcond[5]=((1.0)+(((-1.0)*r11*x8934))+(((-1.0)*r12*x8933))+(((-1.0)*r10*x8925*x8929))+((r10*x8930))+(((-1.0)*x8928*x8929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8935 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8935.valid){
continue;
}
CheckValue<IkReal> x8936=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8935.value)+(((1.5707963267949)*(x8936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8937=IKcos(j4);
IkReal x8938=IKsin(j4);
IkReal x8939=(cj5*sj6);
IkReal x8940=(cj5*r01);
IkReal x8941=(cj5*r21);
IkReal x8942=(cj5*cj6*r11);
IkReal x8943=((1.0)*x8938);
IkReal x8944=(cj6*x8937);
IkReal x8945=(sj5*x8937);
IkReal x8946=(cj6*x8938);
IkReal x8947=(sj5*x8943);
IkReal x8948=((1.0)*sj6*x8937);
evalcond[0]=(((r02*x8945))+((r00*x8937*x8939))+(((-1.0)*r01*sj6*x8943))+((x8940*x8944))+((r00*x8946)));
evalcond[1]=((((-1.0)*r11*sj6*x8943))+((r10*x8937*x8939))+((r10*x8946))+((x8937*x8942))+((r12*x8945)));
evalcond[2]=((-1.0)+((r22*x8945))+(((-1.0)*r21*sj6*x8943))+((r20*x8937*x8939))+((r20*x8946))+((x8941*x8944)));
evalcond[3]=((((-1.0)*r22*x8947))+(((-1.0)*r20*x8939*x8943))+((r20*x8944))+(((-1.0)*cj6*x8941*x8943))+(((-1.0)*r21*x8948)));
evalcond[4]=((((-1.0)*r01*x8948))+(((-1.0)*r00*x8939*x8943))+(((-1.0)*cj6*x8940*x8943))+(((-1.0)*r02*x8947))+((r00*x8944)));
evalcond[5]=((1.0)+(((-1.0)*r11*x8948))+(((-1.0)*r12*x8947))+(((-1.0)*x8942*x8943))+((r10*x8944))+(((-1.0)*r10*x8939*x8943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8949=cj6*cj6;
IkReal x8950=r01*r01;
IkReal x8951=cj5*cj5;
IkReal x8952=r00*r00;
IkReal x8953=r02*r02;
IkReal x8954=(r00*sj6);
IkReal x8955=(r02*sj5);
IkReal x8956=(r01*sj0);
IkReal x8957=((2.0)*cj6*r01);
IkReal x8958=((1.0)*x8951);
IkReal x8959=(x8949*x8952);
IkReal x8960=(x8949*x8950);
CheckValue<IkReal> x8961 = IKatan2WithCheck(IkReal((((cj5*cj6*x8956))+((cj5*sj0*x8954))+((sj0*x8955)))),IkReal((((sj6*x8956))+(((-1.0)*cj6*r00*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8961.valid){
continue;
}
CheckValue<IkReal> x8962=IKPowWithIntegerCheck(IKsign((x8953+x8950+x8959+((x8951*x8954*x8957))+(((-1.0)*x8958*x8959))+((x8951*x8952))+((x8951*x8960))+(((-1.0)*x8960))+(((-1.0)*x8953*x8958))+(((-1.0)*x8954*x8957))+(((2.0)*cj5*x8954*x8955))+((cj5*x8955*x8957)))),-1);
if(!x8962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8961.value)+(((1.5707963267949)*(x8962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8963=IKcos(j4);
IkReal x8964=IKsin(j4);
IkReal x8965=(cj5*sj6);
IkReal x8966=(cj5*r01);
IkReal x8967=(cj5*r21);
IkReal x8968=(cj5*cj6*r11);
IkReal x8969=((1.0)*x8964);
IkReal x8970=(cj6*x8963);
IkReal x8971=(sj5*x8963);
IkReal x8972=(cj6*x8964);
IkReal x8973=(sj5*x8969);
IkReal x8974=((1.0)*sj6*x8963);
evalcond[0]=((((-1.0)*r01*sj6*x8969))+((r00*x8972))+((r00*x8963*x8965))+((x8966*x8970))+((r02*x8971)));
evalcond[1]=((((-1.0)*r11*sj6*x8969))+((r10*x8972))+((r12*x8971))+((r10*x8963*x8965))+((x8963*x8968)));
evalcond[2]=((-1.0)+((r20*x8972))+(((-1.0)*r21*sj6*x8969))+((x8967*x8970))+((r20*x8963*x8965))+((r22*x8971)));
evalcond[3]=(((r20*x8970))+(((-1.0)*r20*x8965*x8969))+(((-1.0)*r22*x8973))+(((-1.0)*cj6*x8967*x8969))+(((-1.0)*r21*x8974)));
evalcond[4]=(sj0+((r00*x8970))+(((-1.0)*r02*x8973))+(((-1.0)*cj6*x8966*x8969))+(((-1.0)*r01*x8974))+(((-1.0)*r00*x8965*x8969)));
evalcond[5]=((((-1.0)*x8968*x8969))+((r10*x8970))+(((-1.0)*r11*x8974))+(((-1.0)*r10*x8965*x8969))+(((-1.0)*r12*x8973))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8975=((1.0)*cj6);
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),IkReal((((r01*sj6))+(((-1.0)*r00*x8975)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
CheckValue<IkReal> x8977=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x8975)))),-1);
if(!x8977.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8976.value)+(((1.5707963267949)*(x8977.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8978=IKcos(j4);
IkReal x8979=IKsin(j4);
IkReal x8980=(cj5*sj6);
IkReal x8981=(cj5*r01);
IkReal x8982=(cj5*r21);
IkReal x8983=(cj5*cj6*r11);
IkReal x8984=((1.0)*x8979);
IkReal x8985=(cj6*x8978);
IkReal x8986=(sj5*x8978);
IkReal x8987=(cj6*x8979);
IkReal x8988=(sj5*x8984);
IkReal x8989=((1.0)*sj6*x8978);
evalcond[0]=(((r00*x8987))+((r02*x8986))+((r00*x8978*x8980))+((x8981*x8985))+(((-1.0)*r01*sj6*x8984)));
evalcond[1]=(((x8978*x8983))+(((-1.0)*r11*sj6*x8984))+((r12*x8986))+((r10*x8987))+((r10*x8978*x8980)));
evalcond[2]=((-1.0)+((r22*x8986))+((r20*x8978*x8980))+(((-1.0)*r21*sj6*x8984))+((r20*x8987))+((x8982*x8985)));
evalcond[3]=((((-1.0)*r21*x8989))+(((-1.0)*r20*x8980*x8984))+(((-1.0)*cj6*x8982*x8984))+(((-1.0)*r22*x8988))+((r20*x8985)));
evalcond[4]=((((-1.0)*cj6*x8981*x8984))+((r00*x8985))+(((-1.0)*r01*x8989))+(((-1.0)*r00*x8980*x8984))+sj0+(((-1.0)*r02*x8988)));
evalcond[5]=((((-1.0)*r12*x8988))+(((-1.0)*r10*x8980*x8984))+(((-1.0)*r11*x8989))+((r10*x8985))+(((-1.0)*cj0))+(((-1.0)*x8983*x8984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8990 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),IkReal(((((-1.0)*cj6*r10))+((r11*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8990.valid){
continue;
}
CheckValue<IkReal> x8991=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8990.value)+(((1.5707963267949)*(x8991.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8992=IKcos(j4);
IkReal x8993=IKsin(j4);
IkReal x8994=(cj5*sj6);
IkReal x8995=(cj5*r01);
IkReal x8996=(cj5*r21);
IkReal x8997=(cj5*cj6*r11);
IkReal x8998=((1.0)*x8993);
IkReal x8999=(cj6*x8992);
IkReal x9000=(sj5*x8992);
IkReal x9001=(cj6*x8993);
IkReal x9002=(sj5*x8998);
IkReal x9003=((1.0)*sj6*x8992);
evalcond[0]=(((x8995*x8999))+((r02*x9000))+(((-1.0)*r01*sj6*x8998))+((r00*x8992*x8994))+((r00*x9001)));
evalcond[1]=((((-1.0)*r11*sj6*x8998))+((x8992*x8997))+((r10*x9001))+((r10*x8992*x8994))+((r12*x9000)));
evalcond[2]=((-1.0)+((r22*x9000))+((r20*x8992*x8994))+(((-1.0)*r21*sj6*x8998))+((x8996*x8999))+((r20*x9001)));
evalcond[3]=((((-1.0)*cj6*x8996*x8998))+(((-1.0)*r21*x9003))+(((-1.0)*r22*x9002))+((r20*x8999))+(((-1.0)*r20*x8994*x8998)));
evalcond[4]=((((-1.0)*r02*x9002))+sj0+((r00*x8999))+(((-1.0)*r01*x9003))+(((-1.0)*r00*x8994*x8998))+(((-1.0)*cj6*x8995*x8998)));
evalcond[5]=((((-1.0)*r12*x9002))+(((-1.0)*r11*x9003))+(((-1.0)*x8997*x8998))+((r10*x8999))+(((-1.0)*r10*x8994*x8998))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9004=(cj2*sj1);
IkReal x9005=((364.42)*cj1);
IkReal x9006=((1000.0)*px);
IkReal x9007=(cj5*sj2);
IkReal x9008=(cj6*r01);
IkReal x9009=((69.0)*r12);
IkReal x9010=(sj5*sj6);
IkReal x9011=((69.0)*r10);
IkReal x9012=((374.29)*r00);
IkReal x9013=((374.29)*sj5);
IkReal x9014=((374.29)*r02);
IkReal x9015=((10.0)*r02*sj5);
IkReal x9016=((10.0)*r00*sj6);
IkReal x9017=(cj6*r11*sj5);
CheckValue<IkReal> x9018 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x9015))+((sj2*x9008*x9013))+((x9004*x9010*x9011))+((sj2*x9006))+(((-1.0)*r10*x9005*x9010))+((sj2*x9010*x9012))+((cj5*r12*x9005))+((cj5*x9009))+(((-1.0)*x9007*x9016))+(((-1.0)*x9007*x9014))+(((-1.0)*cj5*x9004*x9009))+(((69.0)*x9004*x9017))+(((-10.0)*x9007*x9008))+(((-1.0)*x9010*x9011))+(((-1.0)*x9005*x9017))+(((-69.0)*x9017)))),IkReal((((x9004*x9010*x9012))+(((-1.0)*x9004*x9015))+(((-1.0)*sj2*x9010*x9011))+((x9007*x9009))+((x9004*x9008*x9013))+(((-69.0)*sj2*x9017))+(((-10.0)*cj5*x9004*x9008))+(((-1.0)*cj5*x9004*x9014))+(((-1.0)*cj5*x9004*x9016))+((x9004*x9006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9018.valid){
continue;
}
CheckValue<IkReal> x9019=IKPowWithIntegerCheck(IKsign(((-69.0)+(((69.0)*x9004))+(((69.0)*(cj1*cj1)*(cj2*cj2)))+((x9004*x9005)))),-1);
if(!x9019.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x9018.value)+(((1.5707963267949)*(x9019.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9020=IKsin(j0);
IkReal x9021=IKcos(j0);
IkReal x9022=((0.01)*cj5);
IkReal x9023=(cj6*r11);
IkReal x9024=(cj5*r12);
IkReal x9025=(r10*sj6);
IkReal x9026=((0.37429)*sj5);
IkReal x9027=((0.36442)*cj1);
IkReal x9028=((1.0)*sj5);
IkReal x9029=(r00*sj6);
IkReal x9030=(cj6*r01);
IkReal x9031=(cj2*sj1);
IkReal x9032=(cj5*r02);
IkReal x9033=((0.01)*sj5);
IkReal x9034=((0.069)*x9020);
IkReal x9035=((0.069)*x9021);
IkReal x9036=((1.0)*x9020);
evalcond[0]=((((-1.0)*x9031*x9036))+(((-1.0)*x9023*x9028))+x9024+((sj2*x9021))+(((-1.0)*x9025*x9028)));
evalcond[1]=((((-1.0)*sj2*x9036))+(((-1.0)*x9021*x9031))+x9032+(((-1.0)*x9028*x9030))+(((-1.0)*x9028*x9029)));
evalcond[2]=((((-1.0)*sj2*x9034))+(((-1.0)*x9031*x9035))+x9035+(((-1.0)*x9026*x9029))+(((-1.0)*px))+(((-1.0)*x9026*x9030))+((r02*x9033))+(((0.37429)*x9032))+((x9022*x9029))+((x9022*x9030))+((x9021*x9027)));
evalcond[3]=((((-1.0)*x9031*x9034))+(((-1.0)*x9023*x9026))+x9034+((sj2*x9035))+(((-1.0)*py))+(((0.37429)*x9024))+((x9022*x9025))+((x9022*x9023))+(((-1.0)*x9025*x9026))+((r12*x9033))+((x9020*x9027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9037=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9037;
j4eval[1]=IKsign(x9037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9038=((1.0)*sj5);
IkReal x9039=((((-1.0)*r00*sj6*x9038))+(((-1.0)*cj6*r01*x9038))+((cj5*r02)));
j4eval[0]=x9039;
j4eval[1]=IKsign(x9039);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9040=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9040;
j4eval[1]=IKsign(x9040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9041=(cj1*sj0);
IkReal x9042=(cj0*cj1);
IkReal x9043=(cj5*cj6);
IkReal x9044=((1.0)*sj6);
CheckValue<IkReal> x9045 = IKatan2WithCheck(IkReal((((r01*x9041*x9043))+(((-1.0)*r11*x9042*x9043))+(((-1.0)*r12*sj5*x9042))+((cj5*r00*sj6*x9041))+(((-1.0)*cj5*r10*x9042*x9044))+((r02*sj5*x9041)))),IkReal((((r01*sj6*x9041))+((cj6*r10*x9042))+(((-1.0)*r11*x9042*x9044))+(((-1.0)*cj6*r00*x9041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9045.valid){
continue;
}
CheckValue<IkReal> x9046=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9045.value)+(((1.5707963267949)*(x9046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9047=IKcos(j4);
IkReal x9048=IKsin(j4);
IkReal x9049=((1.0)*cj1);
IkReal x9050=(sj1*sj2);
IkReal x9051=(r10*sj6);
IkReal x9052=(r00*sj6);
IkReal x9053=((1.0)*sj6);
IkReal x9054=(r20*sj6);
IkReal x9055=(cj6*x9047);
IkReal x9056=(sj5*x9047);
IkReal x9057=(cj6*x9048);
IkReal x9058=(cj5*x9047);
IkReal x9059=(cj5*x9055);
IkReal x9060=((1.0)*sj5*x9048);
IkReal x9061=((1.0)*cj5*x9048);
evalcond[0]=(sj1+(((-1.0)*r21*x9048*x9053))+((r20*x9057))+((x9054*x9058))+((r22*x9056))+((r21*x9059)));
evalcond[1]=((((-1.0)*cj0*x9049))+((x9052*x9058))+((r00*x9057))+((r01*x9059))+(((-1.0)*r01*x9048*x9053))+((r02*x9056)));
evalcond[2]=((((-1.0)*sj0*x9049))+((x9051*x9058))+((r12*x9056))+(((-1.0)*r11*x9048*x9053))+((r11*x9059))+((r10*x9057)));
evalcond[3]=((((-1.0)*r21*x9047*x9053))+((cj1*sj2))+((r20*x9055))+(((-1.0)*cj5*r21*x9057))+(((-1.0)*cj5*r20*x9048*x9053))+(((-1.0)*r22*x9060)));
evalcond[4]=((((-1.0)*r11*x9047*x9053))+((cj0*cj2))+(((-1.0)*x9051*x9061))+((sj0*x9050))+(((-1.0)*cj5*r11*x9057))+((r10*x9055))+(((-1.0)*r12*x9060)));
evalcond[5]=((((-1.0)*cj5*r01*x9057))+(((-1.0)*x9052*x9061))+(((-1.0)*cj2*sj0))+((r00*x9055))+(((-1.0)*r02*x9060))+((cj0*x9050))+(((-1.0)*r01*x9047*x9053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9062=(sj1*sj6);
IkReal x9063=((1.0)*cj6);
IkReal x9064=(cj1*sj0);
IkReal x9065=(cj5*cj6);
IkReal x9066=(r20*x9064);
CheckValue<IkReal> x9067 = IKatan2WithCheck(IkReal((((r21*x9064*x9065))+((cj5*r10*x9062))+((cj5*sj6*x9066))+((r12*sj1*sj5))+((r11*sj1*x9065))+((r22*sj5*x9064)))),IkReal((((r11*x9062))+((r21*sj6*x9064))+(((-1.0)*r10*sj1*x9063))+(((-1.0)*x9063*x9066)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9067.valid){
continue;
}
CheckValue<IkReal> x9068=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9063))+((cj5*r02)))),-1);
if(!x9068.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9067.value)+(((1.5707963267949)*(x9068.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9069=IKcos(j4);
IkReal x9070=IKsin(j4);
IkReal x9071=((1.0)*cj1);
IkReal x9072=(sj1*sj2);
IkReal x9073=(r10*sj6);
IkReal x9074=(r00*sj6);
IkReal x9075=((1.0)*sj6);
IkReal x9076=(r20*sj6);
IkReal x9077=(cj6*x9069);
IkReal x9078=(sj5*x9069);
IkReal x9079=(cj6*x9070);
IkReal x9080=(cj5*x9069);
IkReal x9081=(cj5*x9077);
IkReal x9082=((1.0)*sj5*x9070);
IkReal x9083=((1.0)*cj5*x9070);
evalcond[0]=(sj1+((r20*x9079))+((r21*x9081))+((r22*x9078))+(((-1.0)*r21*x9070*x9075))+((x9076*x9080)));
evalcond[1]=(((r01*x9081))+((r00*x9079))+(((-1.0)*cj0*x9071))+(((-1.0)*r01*x9070*x9075))+((r02*x9078))+((x9074*x9080)));
evalcond[2]=(((r11*x9081))+((x9073*x9080))+(((-1.0)*sj0*x9071))+((r12*x9078))+((r10*x9079))+(((-1.0)*r11*x9070*x9075)));
evalcond[3]=(((r20*x9077))+((cj1*sj2))+(((-1.0)*cj5*r21*x9079))+(((-1.0)*r21*x9069*x9075))+(((-1.0)*r22*x9082))+(((-1.0)*cj5*r20*x9070*x9075)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*r11*x9069*x9075))+((sj0*x9072))+((r10*x9077))+(((-1.0)*cj5*r11*x9079))+(((-1.0)*x9073*x9083))+(((-1.0)*r12*x9082)));
evalcond[5]=((((-1.0)*x9074*x9083))+(((-1.0)*cj5*r01*x9079))+(((-1.0)*r01*x9069*x9075))+(((-1.0)*cj2*sj0))+((r00*x9077))+(((-1.0)*r02*x9082))+((cj0*x9072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9084=(cj0*cj1);
IkReal x9085=(cj5*cj6);
IkReal x9086=(cj5*sj6);
IkReal x9087=(r00*sj1);
IkReal x9088=((1.0)*cj6);
IkReal x9089=(r01*sj1);
CheckValue<IkReal> x9090 = IKatan2WithCheck(IkReal((((r22*sj5*x9084))+((x9085*x9089))+((x9086*x9087))+((r20*x9084*x9086))+((r21*x9084*x9085))+((r02*sj1*sj5)))),IkReal((((sj6*x9089))+((r21*sj6*x9084))+(((-1.0)*r20*x9084*x9088))+(((-1.0)*x9087*x9088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9090.valid){
continue;
}
CheckValue<IkReal> x9091=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9090.value)+(((1.5707963267949)*(x9091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9092=IKcos(j4);
IkReal x9093=IKsin(j4);
IkReal x9094=((1.0)*cj1);
IkReal x9095=(sj1*sj2);
IkReal x9096=(r10*sj6);
IkReal x9097=(r00*sj6);
IkReal x9098=((1.0)*sj6);
IkReal x9099=(r20*sj6);
IkReal x9100=(cj6*x9092);
IkReal x9101=(sj5*x9092);
IkReal x9102=(cj6*x9093);
IkReal x9103=(cj5*x9092);
IkReal x9104=(cj5*x9100);
IkReal x9105=((1.0)*sj5*x9093);
IkReal x9106=((1.0)*cj5*x9093);
evalcond[0]=(sj1+((r22*x9101))+((r21*x9104))+((x9099*x9103))+(((-1.0)*r21*x9093*x9098))+((r20*x9102)));
evalcond[1]=((((-1.0)*r01*x9093*x9098))+((r02*x9101))+(((-1.0)*cj0*x9094))+((r01*x9104))+((x9097*x9103))+((r00*x9102)));
evalcond[2]=((((-1.0)*r11*x9093*x9098))+((r10*x9102))+((r12*x9101))+((r11*x9104))+(((-1.0)*sj0*x9094))+((x9096*x9103)));
evalcond[3]=((((-1.0)*cj5*r21*x9102))+(((-1.0)*cj5*r20*x9093*x9098))+((cj1*sj2))+(((-1.0)*r22*x9105))+((r20*x9100))+(((-1.0)*r21*x9092*x9098)));
evalcond[4]=(((sj0*x9095))+((r10*x9100))+(((-1.0)*r11*x9092*x9098))+((cj0*cj2))+(((-1.0)*r12*x9105))+(((-1.0)*x9096*x9106))+(((-1.0)*cj5*r11*x9102)));
evalcond[5]=((((-1.0)*cj5*r01*x9102))+((cj0*x9095))+(((-1.0)*r02*x9105))+(((-1.0)*cj2*sj0))+(((-1.0)*r01*x9092*x9098))+(((-1.0)*x9097*x9106))+((r00*x9100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9107=cj5*cj5;
IkReal x9108=cj6*cj6;
IkReal x9109=r22*r22;
IkReal x9110=r21*r21;
IkReal x9111=r20*r20;
IkReal x9112=(r21*sj1);
IkReal x9113=(cj5*cj6);
IkReal x9114=((1.0)*sj6);
IkReal x9115=(r22*sj5);
IkReal x9116=(cj1*sj2);
IkReal x9117=(cj5*r20);
IkReal x9118=(cj6*r20);
IkReal x9119=((1.0)*x9110);
IkReal x9120=(x9108*x9111);
IkReal x9121=((2.0)*r21*sj6*x9118);
CheckValue<IkReal> x9122 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9113*x9116))+(((-1.0)*x9112*x9114))+(((-1.0)*x9114*x9116*x9117))+(((-1.0)*x9115*x9116))+((sj1*x9118)))),IkReal((((x9112*x9113))+((x9116*x9118))+(((-1.0)*r21*x9114*x9116))+((sj1*sj6*x9117))+((sj1*x9115)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9122.valid){
continue;
}
CheckValue<IkReal> x9123=IKPowWithIntegerCheck(IKsign(((((-2.0)*sj6*x9115*x9117))+(((-1.0)*x9109))+(((-1.0)*x9107*x9111))+(((-2.0)*r21*x9113*x9115))+x9121+((x9107*x9109))+(((-1.0)*x9119))+((x9107*x9120))+((x9108*x9110))+(((-1.0)*x9107*x9108*x9119))+(((-1.0)*x9107*x9121))+(((-1.0)*x9120)))),-1);
if(!x9123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9122.value)+(((1.5707963267949)*(x9123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x9124=IKcos(j4);
IkReal x9125=IKsin(j4);
IkReal x9126=(r22*sj5);
IkReal x9127=(cj6*r20);
IkReal x9128=((1.0)*r21*sj6);
IkReal x9129=((1.0)*x9125);
IkReal x9130=(cj5*cj6*r21);
IkReal x9131=(cj5*r20*sj6);
evalcond[0]=(sj1+((x9125*x9127))+((x9124*x9126))+((x9124*x9131))+((x9124*x9130))+(((-1.0)*x9125*x9128)));
evalcond[1]=((((-1.0)*x9124*x9128))+((cj1*sj2))+((x9124*x9127))+(((-1.0)*x9129*x9131))+(((-1.0)*x9129*x9130))+(((-1.0)*x9126*x9129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9132=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x9132;
j0eval[1]=IKsign(x9132);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9133=(sj2*sj5);
IkReal x9134=(r10*sj6);
IkReal x9135=(cj6*r11);
IkReal x9136=(cj5*r02);
IkReal x9137=(cj6*r01);
IkReal x9138=(r00*sj6);
IkReal x9139=(cj5*r12);
IkReal x9140=((1.0)*cj2*sj5);
if( IKabs(((((-1.0)*x9133*x9137))+(((-1.0)*x9133*x9138))+((cj2*x9139))+(((-1.0)*x9135*x9140))+((sj2*x9136))+(((-1.0)*x9134*x9140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x9139))+((cj2*x9136))+((x9133*x9135))+((x9133*x9134))+(((-1.0)*x9138*x9140))+(((-1.0)*x9137*x9140)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x9133*x9137))+(((-1.0)*x9133*x9138))+((cj2*x9139))+(((-1.0)*x9135*x9140))+((sj2*x9136))+(((-1.0)*x9134*x9140))))+IKsqr(((((-1.0)*sj2*x9139))+((cj2*x9136))+((x9133*x9135))+((x9133*x9134))+(((-1.0)*x9138*x9140))+(((-1.0)*x9137*x9140))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x9133*x9137))+(((-1.0)*x9133*x9138))+((cj2*x9139))+(((-1.0)*x9135*x9140))+((sj2*x9136))+(((-1.0)*x9134*x9140))), ((((-1.0)*sj2*x9139))+((cj2*x9136))+((x9133*x9135))+((x9133*x9134))+(((-1.0)*x9138*x9140))+(((-1.0)*x9137*x9140))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9141=IKcos(j0);
IkReal x9142=IKsin(j0);
IkReal x9143=((1.0)*sj4);
IkReal x9144=(cj5*r12);
IkReal x9145=((0.37429)*sj5);
IkReal x9146=(r10*sj6);
IkReal x9147=((0.069)*sj2);
IkReal x9148=(cj6*r01);
IkReal x9149=((0.01)*cj5);
IkReal x9150=(r12*sj5);
IkReal x9151=(r00*sj6);
IkReal x9152=((1.0)*sj5);
IkReal x9153=(r02*sj5);
IkReal x9154=(cj6*r11);
IkReal x9155=(cj4*cj6);
IkReal x9156=(cj5*r02);
IkReal x9157=(sj2*x9141);
IkReal x9158=(cj5*x9154);
IkReal x9159=(cj2*x9141);
IkReal x9160=((0.069)*x9142);
IkReal x9161=(sj2*x9142);
IkReal x9162=((1.0)*cj4*sj6);
IkReal x9163=((1.0)*cj2*x9142);
evalcond[0]=((((-1.0)*x9152*x9154))+x9157+x9144+(((-1.0)*x9146*x9152))+(((-1.0)*x9163)));
evalcond[1]=((((-1.0)*x9161))+x9156+(((-1.0)*x9151*x9152))+(((-1.0)*x9148*x9152))+(((-1.0)*x9159)));
evalcond[2]=(x9159+x9161+(((-1.0)*r11*x9162))+(((-1.0)*x9143*x9150))+(((-1.0)*x9143*x9158))+(((-1.0)*cj5*x9143*x9146))+((r10*x9155)));
evalcond[3]=(x9157+(((-1.0)*cj5*x9143*x9151))+(((-1.0)*r01*x9162))+((r00*x9155))+(((-1.0)*x9163))+(((-1.0)*x9143*x9153))+(((-1.0)*cj5*x9143*x9148)));
evalcond[4]=((((0.01)*x9153))+(((-1.0)*x9142*x9147))+(((0.37429)*x9156))+(((-1.0)*x9145*x9151))+((x9149*x9151))+(((-1.0)*px))+(((-0.069)*x9159))+(((0.069)*x9141))+((x9148*x9149))+(((-1.0)*x9145*x9148)));
evalcond[5]=((((0.01)*x9150))+(((-1.0)*x9145*x9154))+(((-1.0)*cj2*x9160))+x9160+((x9149*x9154))+(((-1.0)*py))+((x9141*x9147))+((x9146*x9149))+(((0.37429)*x9144))+(((-1.0)*x9145*x9146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9164=((1.0)*sj2);
IkReal x9165=((1.0)*cj2*cj5);
IkReal x9166=(cj6*r11*sj5);
IkReal x9167=(cj6*r01*sj5);
IkReal x9168=(r00*sj5*sj6);
IkReal x9169=(r10*sj5*sj6);
if( IKabs((((cj2*x9166))+((cj2*x9169))+(((-1.0)*r12*x9165))+(((-1.0)*x9164*x9168))+(((-1.0)*x9164*x9167))+((cj5*r02*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12*x9164))+((cj2*x9167))+((cj2*x9168))+(((-1.0)*r02*x9165))+((sj2*x9166))+((sj2*x9169)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x9166))+((cj2*x9169))+(((-1.0)*r12*x9165))+(((-1.0)*x9164*x9168))+(((-1.0)*x9164*x9167))+((cj5*r02*sj2))))+IKsqr(((((-1.0)*cj5*r12*x9164))+((cj2*x9167))+((cj2*x9168))+(((-1.0)*r02*x9165))+((sj2*x9166))+((sj2*x9169))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj2*x9166))+((cj2*x9169))+(((-1.0)*r12*x9165))+(((-1.0)*x9164*x9168))+(((-1.0)*x9164*x9167))+((cj5*r02*sj2))), ((((-1.0)*cj5*r12*x9164))+((cj2*x9167))+((cj2*x9168))+(((-1.0)*r02*x9165))+((sj2*x9166))+((sj2*x9169))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9170=IKcos(j0);
IkReal x9171=IKsin(j0);
IkReal x9172=((1.0)*sj4);
IkReal x9173=(cj5*r12);
IkReal x9174=((0.37429)*sj5);
IkReal x9175=(r10*sj6);
IkReal x9176=((0.069)*sj2);
IkReal x9177=(cj6*r01);
IkReal x9178=((0.01)*cj5);
IkReal x9179=(r12*sj5);
IkReal x9180=(r00*sj6);
IkReal x9181=((1.0)*sj5);
IkReal x9182=(r02*sj5);
IkReal x9183=(cj6*r11);
IkReal x9184=(cj4*cj6);
IkReal x9185=(cj5*r02);
IkReal x9186=(cj2*x9170);
IkReal x9187=(cj5*x9183);
IkReal x9188=((0.069)*x9171);
IkReal x9189=(sj2*x9170);
IkReal x9190=(cj2*x9171);
IkReal x9191=((1.0)*cj4*sj6);
IkReal x9192=((1.0)*sj2*x9171);
evalcond[0]=((((-1.0)*x9175*x9181))+x9189+x9190+x9173+(((-1.0)*x9181*x9183)));
evalcond[1]=(x9186+x9185+(((-1.0)*x9177*x9181))+(((-1.0)*x9192))+(((-1.0)*x9180*x9181)));
evalcond[2]=(x9186+((r10*x9184))+(((-1.0)*r11*x9191))+(((-1.0)*x9172*x9179))+(((-1.0)*cj5*x9172*x9175))+(((-1.0)*x9172*x9187))+(((-1.0)*x9192)));
evalcond[3]=(((r00*x9184))+(((-1.0)*r01*x9191))+(((-1.0)*cj5*x9172*x9177))+(((-1.0)*x9189))+(((-1.0)*cj5*x9172*x9180))+(((-1.0)*x9172*x9182))+(((-1.0)*x9190)));
evalcond[4]=(((x9177*x9178))+(((-1.0)*x9174*x9180))+((x9178*x9180))+(((0.069)*x9186))+(((-1.0)*px))+(((-1.0)*x9171*x9176))+(((0.01)*x9182))+(((0.069)*x9170))+(((0.37429)*x9185))+(((-1.0)*x9174*x9177)));
evalcond[5]=((((-1.0)*x9174*x9183))+((x9170*x9176))+((x9178*x9183))+x9188+(((0.01)*x9179))+(((-1.0)*py))+((x9175*x9178))+((cj2*x9188))+(((0.37429)*x9173))+(((-1.0)*x9174*x9175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9193=(sj5*sj6);
IkReal x9194=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x9193))+(((-1.0)*r01*x9194))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x9193))+((r11*x9194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x9193))+(((-1.0)*r01*x9194))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x9193))+((r11*x9194))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x9193))+(((-1.0)*r01*x9194))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x9193))+((r11*x9194))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9195=IKcos(j0);
IkReal x9196=IKsin(j0);
IkReal x9197=((1.0)*sj4);
IkReal x9198=(cj5*r12);
IkReal x9199=((0.37429)*sj5);
IkReal x9200=(r10*sj6);
IkReal x9201=(r01*sj6);
IkReal x9202=((0.36442)*cj1);
IkReal x9203=(cj6*r01);
IkReal x9204=((0.01)*cj5);
IkReal x9205=(cj6*r10);
IkReal x9206=(r00*sj6);
IkReal x9207=((1.0)*sj5);
IkReal x9208=(r02*sj5);
IkReal x9209=(cj6*r11);
IkReal x9210=(r12*sj5);
IkReal x9211=(cj5*r02);
IkReal x9212=(cj4*cj5);
IkReal x9213=(cj6*r00);
IkReal x9214=((1.0)*cj4);
IkReal x9215=(r11*sj6);
IkReal x9216=((0.069)*x9196);
IkReal x9217=((0.069)*x9195);
IkReal x9218=(cj5*x9209);
IkReal x9219=((1.0)*x9196);
evalcond[0]=(x9195+x9198+(((-1.0)*x9200*x9207))+(((-1.0)*x9207*x9209)));
evalcond[1]=(x9211+(((-1.0)*x9206*x9207))+(((-1.0)*x9219))+(((-1.0)*x9203*x9207)));
evalcond[2]=(((x9203*x9212))+(((-1.0)*x9197*x9201))+((x9206*x9212))+((cj4*x9208))+(((-1.0)*cj1*x9195))+((sj4*x9213)));
evalcond[3]=(((x9209*x9212))+((x9200*x9212))+((cj4*x9210))+((sj4*x9205))+(((-1.0)*x9197*x9215))+(((-1.0)*cj1*x9219)));
evalcond[4]=(((sj1*x9196))+((cj4*x9205))+(((-1.0)*cj5*x9197*x9200))+(((-1.0)*x9197*x9210))+(((-1.0)*x9197*x9218))+(((-1.0)*x9214*x9215)));
evalcond[5]=((((-1.0)*x9197*x9208))+(((-1.0)*x9201*x9214))+((sj1*x9195))+((cj4*x9213))+(((-1.0)*cj5*x9197*x9206))+(((-1.0)*cj5*x9197*x9203)));
evalcond[6]=((((0.01)*x9208))+((x9204*x9206))+(((0.37429)*x9211))+x9217+(((-1.0)*px))+(((-1.0)*x9199*x9206))+(((-1.0)*x9199*x9203))+((x9195*x9202))+(((-1.0)*x9216))+((x9203*x9204)));
evalcond[7]=(((x9204*x9209))+(((0.37429)*x9198))+x9216+x9217+(((0.01)*x9210))+((x9200*x9204))+(((-1.0)*py))+(((-1.0)*x9199*x9200))+(((-1.0)*x9199*x9209))+((x9196*x9202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9220=(cj6*sj5);
IkReal x9221=(sj5*sj6);
if( IKabs((((r00*x9221))+((r01*x9220))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x9220))+(((-1.0)*r10*x9221)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x9221))+((r01*x9220))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x9220))+(((-1.0)*r10*x9221))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x9221))+((r01*x9220))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x9220))+(((-1.0)*r10*x9221))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9222=IKcos(j0);
IkReal x9223=IKsin(j0);
IkReal x9224=((1.0)*sj4);
IkReal x9225=(cj5*r12);
IkReal x9226=((0.37429)*sj5);
IkReal x9227=(r10*sj6);
IkReal x9228=(r01*sj6);
IkReal x9229=((0.36442)*cj1);
IkReal x9230=(cj6*r01);
IkReal x9231=((0.01)*cj5);
IkReal x9232=(r12*sj5);
IkReal x9233=(cj6*r10);
IkReal x9234=(r00*sj6);
IkReal x9235=((1.0)*sj5);
IkReal x9236=(r02*sj5);
IkReal x9237=(cj6*r11);
IkReal x9238=(cj5*r02);
IkReal x9239=(cj4*cj5);
IkReal x9240=(cj6*r00);
IkReal x9241=((1.0)*cj4);
IkReal x9242=(r11*sj6);
IkReal x9243=((0.069)*x9223);
IkReal x9244=((0.069)*x9222);
IkReal x9245=(cj5*x9237);
IkReal x9246=((1.0)*x9222);
IkReal x9247=((1.0)*x9223);
evalcond[0]=(x9238+x9223+(((-1.0)*x9234*x9235))+(((-1.0)*x9230*x9235)));
evalcond[1]=((((-1.0)*x9227*x9235))+x9225+(((-1.0)*x9235*x9237))+(((-1.0)*x9246)));
evalcond[2]=(((x9234*x9239))+(((-1.0)*cj1*x9246))+((cj4*x9236))+((sj4*x9240))+(((-1.0)*x9224*x9228))+((x9230*x9239)));
evalcond[3]=((((-1.0)*x9224*x9242))+((x9237*x9239))+(((-1.0)*cj1*x9247))+((sj4*x9233))+((cj4*x9232))+((x9227*x9239)));
evalcond[4]=((((-1.0)*x9241*x9242))+(((-1.0)*x9224*x9245))+(((-1.0)*cj5*x9224*x9227))+(((-1.0)*sj1*x9247))+((cj4*x9233))+(((-1.0)*x9224*x9232)));
evalcond[5]=((((-1.0)*x9228*x9241))+(((-1.0)*sj1*x9246))+((cj4*x9240))+(((-1.0)*cj5*x9224*x9234))+(((-1.0)*cj5*x9224*x9230))+(((-1.0)*x9224*x9236)));
evalcond[6]=((((0.01)*x9236))+(((-1.0)*x9226*x9234))+(((-1.0)*x9226*x9230))+x9243+x9244+(((-1.0)*px))+((x9222*x9229))+((x9231*x9234))+((x9230*x9231))+(((0.37429)*x9238)));
evalcond[7]=((((0.01)*x9232))+(((-1.0)*x9226*x9237))+x9243+(((0.37429)*x9225))+(((-1.0)*py))+(((-1.0)*x9244))+((x9231*x9237))+((x9223*x9229))+((x9227*x9231))+(((-1.0)*x9226*x9227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x9248=(sj5*sj6);
IkReal x9249=(cj6*sj5);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*r00*x9248))+(((-1.0)*r01*x9249))+((cj5*r02)))))+(IKabs(((((-1.0)*cj5*r12))+((r10*x9248))+((r11*x9249))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9250=(sj5*sj6);
IkReal x9251=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x9250))+(((-1.0)*r01*x9251))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x9250))+((r11*x9251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x9250))+(((-1.0)*r01*x9251))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x9250))+((r11*x9251))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x9250))+(((-1.0)*r01*x9251))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x9250))+((r11*x9251))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9252=IKcos(j0);
IkReal x9253=IKsin(j0);
IkReal x9254=((0.01)*cj5);
IkReal x9255=(cj6*r11);
IkReal x9256=(cj5*r12);
IkReal x9257=(r10*sj6);
IkReal x9258=((0.37429)*sj5);
IkReal x9259=((1.0)*r01);
IkReal x9260=(sj4*sj6);
IkReal x9261=(cj6*sj4);
IkReal x9262=(r00*sj6);
IkReal x9263=((1.0)*sj5);
IkReal x9264=(cj4*sj5);
IkReal x9265=(cj6*r01);
IkReal x9266=(cj5*r02);
IkReal x9267=(cj4*cj5);
IkReal x9268=((0.01)*sj5);
IkReal x9269=((1.0)*x9253);
evalcond[0]=((((-1.0)*x9257*x9263))+(((-1.0)*x9255*x9263))+x9256+x9252);
evalcond[1]=((((-1.0)*x9269))+x9266+(((-1.0)*x9262*x9263))+(((-1.0)*cj6*sj5*x9259)));
evalcond[2]=(((x9262*x9267))+(((-1.0)*x9259*x9260))+((r00*x9261))+(((-1.0)*x9252))+((x9265*x9267))+((r02*x9264)));
evalcond[3]=(((r12*x9264))+(((-1.0)*x9269))+((x9257*x9267))+((r10*x9261))+(((-1.0)*r11*x9260))+((x9255*x9267)));
evalcond[4]=((((-1.0)*x9258*x9262))+(((-1.0)*x9258*x9265))+(((0.43342)*x9252))+(((-1.0)*px))+(((0.37429)*x9266))+((x9254*x9265))+((x9254*x9262))+(((-0.069)*x9253))+((r02*x9268)));
evalcond[5]=(((r12*x9268))+((x9254*x9255))+((x9254*x9257))+(((0.37429)*x9256))+(((0.43342)*x9253))+(((0.069)*x9252))+(((-1.0)*x9255*x9258))+(((-1.0)*py))+(((-1.0)*x9257*x9258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9270=(cj6*sj5);
IkReal x9271=(sj5*sj6);
if( IKabs((((r00*x9271))+((r01*x9270))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x9271))+(((-1.0)*r11*x9270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x9271))+((r01*x9270))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x9271))+(((-1.0)*r11*x9270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x9271))+((r01*x9270))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x9271))+(((-1.0)*r11*x9270))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9272=IKsin(j0);
IkReal x9273=IKcos(j0);
IkReal x9274=((0.01)*cj5);
IkReal x9275=(cj6*r11);
IkReal x9276=(cj5*r12);
IkReal x9277=(r10*sj6);
IkReal x9278=((0.37429)*sj5);
IkReal x9279=((1.0)*r01);
IkReal x9280=(sj4*sj6);
IkReal x9281=(cj6*sj4);
IkReal x9282=(r00*sj6);
IkReal x9283=((1.0)*sj5);
IkReal x9284=(cj4*sj5);
IkReal x9285=(cj6*r01);
IkReal x9286=(cj5*r02);
IkReal x9287=(cj4*cj5);
IkReal x9288=((0.01)*sj5);
IkReal x9289=((1.0)*x9273);
evalcond[0]=((((-1.0)*x9282*x9283))+x9286+x9272+(((-1.0)*cj6*sj5*x9279)));
evalcond[1]=((((-1.0)*x9275*x9283))+(((-1.0)*x9289))+x9276+(((-1.0)*x9277*x9283)));
evalcond[2]=(((r02*x9284))+(((-1.0)*x9289))+((r00*x9281))+((x9282*x9287))+((x9285*x9287))+(((-1.0)*x9279*x9280)));
evalcond[3]=((((-1.0)*r11*x9280))+((r10*x9281))+((x9275*x9287))+(((-1.0)*x9272))+((x9277*x9287))+((r12*x9284)));
evalcond[4]=(((r02*x9288))+(((-1.0)*x9278*x9282))+(((-1.0)*x9278*x9285))+(((-1.0)*px))+(((0.069)*x9272))+(((0.37429)*x9286))+(((0.43342)*x9273))+((x9274*x9285))+((x9274*x9282)));
evalcond[5]=((((-1.0)*x9277*x9278))+(((-1.0)*x9275*x9278))+(((-1.0)*py))+(((-0.069)*x9273))+(((0.37429)*x9276))+((x9274*x9277))+((x9274*x9275))+((r12*x9288))+(((0.43342)*x9272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9290=(cj6*sj4);
IkReal x9291=(cj4*sj5);
IkReal x9292=(cj4*cj5*cj6);
IkReal x9293=((1.0)*sj4*sj6);
IkReal x9294=(cj4*cj5*sj6);
if( IKabs((((r11*x9292))+(((-1.0)*r11*x9293))+((r10*x9290))+((r10*x9294))+((r12*x9291)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x9291))+((r00*x9290))+((r00*x9294))+((r01*x9292))+(((-1.0)*r01*x9293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x9292))+(((-1.0)*r11*x9293))+((r10*x9290))+((r10*x9294))+((r12*x9291))))+IKsqr((((r02*x9291))+((r00*x9290))+((r00*x9294))+((r01*x9292))+(((-1.0)*r01*x9293))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x9292))+(((-1.0)*r11*x9293))+((r10*x9290))+((r10*x9294))+((r12*x9291))), (((r02*x9291))+((r00*x9290))+((r00*x9294))+((r01*x9292))+(((-1.0)*r01*x9293))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9295=IKcos(j0);
IkReal x9296=IKsin(j0);
IkReal x9297=((1.0)*sj4);
IkReal x9298=(cj6*sj4);
IkReal x9299=(r10*sj6);
IkReal x9300=((0.37429)*sj5);
IkReal x9301=(r01*sj6);
IkReal x9302=((0.37429)*cj5);
IkReal x9303=((0.01)*cj5);
IkReal x9304=(r12*sj5);
IkReal x9305=(r00*sj6);
IkReal x9306=(r02*sj5);
IkReal x9307=(cj4*cj6);
IkReal x9308=(cj4*cj5);
IkReal x9309=((1.0)*cj4);
IkReal x9310=(r11*sj6);
IkReal x9311=((1.0)*x9296);
IkReal x9312=(cj5*cj6*r11);
IkReal x9313=(cj5*cj6*r01);
evalcond[0]=(((x9305*x9308))+(((-1.0)*x9297*x9301))+((r00*x9298))+(((-1.0)*x9295))+((cj4*x9306))+((cj5*r01*x9307)));
evalcond[1]=((((-1.0)*x9297*x9310))+((r10*x9298))+((cj4*x9304))+(((-1.0)*x9311))+((cj5*r11*x9307))+((x9299*x9308)));
evalcond[2]=((((-1.0)*x9297*x9312))+(((-1.0)*x9297*x9304))+(((-1.0)*cj5*x9297*x9299))+x9295+(((-1.0)*x9309*x9310))+((r10*x9307)));
evalcond[3]=((((-1.0)*x9297*x9313))+(((-1.0)*x9297*x9306))+(((-1.0)*x9301*x9309))+(((-1.0)*cj5*x9297*x9305))+(((-1.0)*x9311))+((r00*x9307)));
evalcond[4]=((((-1.0)*x9300*x9305))+(((0.43342)*x9295))+((r02*x9302))+(((-1.0)*cj6*r01*x9300))+(((-1.0)*px))+((cj6*r01*x9303))+((x9303*x9305))+(((0.01)*x9306)));
evalcond[5]=((((0.43342)*x9296))+(((-1.0)*py))+(((-1.0)*x9299*x9300))+((r12*x9302))+(((0.01)*x9304))+((x9299*x9303))+((cj6*r11*x9303))+(((-1.0)*cj6*r11*x9300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9314=(cj6*sj4);
IkReal x9315=(cj4*sj5);
IkReal x9316=(cj4*cj5*cj6);
IkReal x9317=((1.0)*sj4*sj6);
IkReal x9318=(cj4*cj5*sj6);
if( IKabs((((r12*x9315))+(((-1.0)*r11*x9317))+((r11*x9316))+((r10*x9314))+((r10*x9318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x9315))+(((-1.0)*r01*x9317))+((r01*x9316))+((r00*x9314))+((r00*x9318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x9315))+(((-1.0)*r11*x9317))+((r11*x9316))+((r10*x9314))+((r10*x9318))))+IKsqr((((r02*x9315))+(((-1.0)*r01*x9317))+((r01*x9316))+((r00*x9314))+((r00*x9318))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r12*x9315))+(((-1.0)*r11*x9317))+((r11*x9316))+((r10*x9314))+((r10*x9318))), (((r02*x9315))+(((-1.0)*r01*x9317))+((r01*x9316))+((r00*x9314))+((r00*x9318))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9319=IKsin(j0);
IkReal x9320=IKcos(j0);
IkReal x9321=((1.0)*sj4);
IkReal x9322=(cj6*sj4);
IkReal x9323=(r10*sj6);
IkReal x9324=((0.37429)*sj5);
IkReal x9325=(r01*sj6);
IkReal x9326=((0.37429)*cj5);
IkReal x9327=((0.01)*cj5);
IkReal x9328=(r12*sj5);
IkReal x9329=(r00*sj6);
IkReal x9330=(r02*sj5);
IkReal x9331=(cj4*cj6);
IkReal x9332=(cj4*cj5);
IkReal x9333=((1.0)*cj4);
IkReal x9334=(r11*sj6);
IkReal x9335=((1.0)*x9320);
IkReal x9336=(cj5*cj6*r11);
IkReal x9337=(cj5*cj6*r01);
evalcond[0]=(((x9329*x9332))+((r00*x9322))+((cj5*r01*x9331))+(((-1.0)*x9321*x9325))+((cj4*x9330))+(((-1.0)*x9335)));
evalcond[1]=(((cj4*x9328))+((cj5*r11*x9331))+((r10*x9322))+(((-1.0)*x9319))+(((-1.0)*x9321*x9334))+((x9323*x9332)));
evalcond[2]=(x9319+(((-1.0)*x9325*x9333))+((r00*x9331))+(((-1.0)*x9321*x9330))+(((-1.0)*x9321*x9337))+(((-1.0)*cj5*x9321*x9329)));
evalcond[3]=((((-1.0)*x9333*x9334))+((r10*x9331))+(((-1.0)*x9321*x9336))+(((-1.0)*x9321*x9328))+(((-1.0)*cj5*x9321*x9323))+(((-1.0)*x9335)));
evalcond[4]=(((x9327*x9329))+(((0.01)*x9330))+(((-1.0)*x9324*x9329))+(((0.43342)*x9320))+(((-1.0)*cj6*r01*x9324))+(((-1.0)*px))+((r02*x9326))+((cj6*r01*x9327)));
evalcond[5]=((((0.01)*x9328))+(((0.43342)*x9319))+((cj6*r11*x9327))+((r12*x9326))+(((-1.0)*cj6*r11*x9324))+(((-1.0)*py))+(((-1.0)*x9323*x9324))+((x9323*x9327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9338=((1.0)*sj6);
IkReal x9339=(cj5*sj4);
CheckValue<IkReal> x9340=IKPowWithIntegerCheck(cj2,-1);
if(!x9340.valid){
continue;
}
CheckValue<IkReal> x9341=IKPowWithIntegerCheck(sj2,-1);
if(!x9341.valid){
continue;
}
if( IKabs(((x9340.value)*(((((-1.0)*cj4*r01*x9338))+((cj4*cj6*r00))+(((-1.0)*r00*x9338*x9339))+(((-1.0)*cj6*r01*x9339))+(((-1.0)*r02*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9341.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9340.value)*(((((-1.0)*cj4*r01*x9338))+((cj4*cj6*r00))+(((-1.0)*r00*x9338*x9339))+(((-1.0)*cj6*r01*x9339))+(((-1.0)*r02*sj4*sj5))))))+IKsqr(((x9341.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x9340.value)*(((((-1.0)*cj4*r01*x9338))+((cj4*cj6*r00))+(((-1.0)*r00*x9338*x9339))+(((-1.0)*cj6*r01*x9339))+(((-1.0)*r02*sj4*sj5))))), ((x9341.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9342=IKcos(j0);
IkReal x9343=IKsin(j0);
IkReal x9344=((1.0)*sj4);
IkReal x9345=(cj5*r12);
IkReal x9346=((0.37429)*sj5);
IkReal x9347=(r10*sj6);
IkReal x9348=(r01*sj6);
IkReal x9349=((0.069)*sj2);
IkReal x9350=(cj6*r01);
IkReal x9351=((0.01)*cj5);
IkReal x9352=(r12*sj5);
IkReal x9353=(cj6*r10);
IkReal x9354=(r00*sj6);
IkReal x9355=((1.0)*sj5);
IkReal x9356=(r02*sj5);
IkReal x9357=(cj6*r11);
IkReal x9358=(cj5*r02);
IkReal x9359=(cj4*cj5);
IkReal x9360=(cj6*r00);
IkReal x9361=((1.0)*cj4);
IkReal x9362=(r11*sj6);
IkReal x9363=(cj5*x9357);
IkReal x9364=((1.0)*x9343);
evalcond[0]=(x9345+((sj2*x9342))+(((-1.0)*x9347*x9355))+(((-1.0)*x9355*x9357)));
evalcond[1]=(x9358+(((-1.0)*x9350*x9355))+(((-1.0)*sj2*x9364))+(((-1.0)*x9354*x9355)));
evalcond[2]=(((x9354*x9359))+(((-1.0)*x9344*x9348))+(((-1.0)*x9342))+((sj4*x9360))+((x9350*x9359))+((cj4*x9356)));
evalcond[3]=(((sj4*x9353))+((x9347*x9359))+(((-1.0)*x9364))+((cj4*x9352))+(((-1.0)*x9344*x9362))+((x9357*x9359)));
evalcond[4]=((((-1.0)*x9344*x9352))+(((-1.0)*cj5*x9344*x9347))+((cj2*x9342))+(((-1.0)*x9361*x9362))+((cj4*x9353))+(((-1.0)*x9344*x9363)));
evalcond[5]=((((-1.0)*cj2*x9364))+(((-1.0)*x9344*x9356))+(((-1.0)*cj5*x9344*x9350))+(((-1.0)*cj5*x9344*x9354))+(((-1.0)*x9348*x9361))+((cj4*x9360)));
evalcond[6]=((((-1.0)*x9343*x9349))+((x9351*x9354))+(((0.37429)*x9358))+(((-1.0)*px))+(((0.01)*x9356))+(((-1.0)*x9346*x9354))+(((-1.0)*x9346*x9350))+((x9350*x9351))+(((0.43342)*x9342)));
evalcond[7]=(((x9351*x9357))+((x9347*x9351))+(((0.37429)*x9345))+((x9342*x9349))+(((-1.0)*py))+(((0.01)*x9352))+(((-1.0)*x9346*x9347))+(((-1.0)*x9346*x9357))+(((0.43342)*x9343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9365=(cj6*r11);
IkReal x9366=(cj4*cj5);
IkReal x9367=(r10*sj6);
CheckValue<IkReal> x9368=IKPowWithIntegerCheck(sj2,-1);
if(!x9368.valid){
continue;
}
if( IKabs((((cj6*r10*sj4))+((x9365*x9366))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))+((x9366*x9367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9368.value)*(((((-1.0)*cj5*r12))+((sj5*x9367))+((sj5*x9365)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r10*sj4))+((x9365*x9366))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))+((x9366*x9367))))+IKsqr(((x9368.value)*(((((-1.0)*cj5*r12))+((sj5*x9367))+((sj5*x9365))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj6*r10*sj4))+((x9365*x9366))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))+((x9366*x9367))), ((x9368.value)*(((((-1.0)*cj5*r12))+((sj5*x9367))+((sj5*x9365))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9369=IKcos(j0);
IkReal x9370=IKsin(j0);
IkReal x9371=((1.0)*sj4);
IkReal x9372=(cj5*r12);
IkReal x9373=((0.37429)*sj5);
IkReal x9374=(r10*sj6);
IkReal x9375=(r01*sj6);
IkReal x9376=((0.069)*sj2);
IkReal x9377=(cj6*r01);
IkReal x9378=((0.01)*cj5);
IkReal x9379=(r12*sj5);
IkReal x9380=(cj6*r10);
IkReal x9381=(r00*sj6);
IkReal x9382=((1.0)*sj5);
IkReal x9383=(r02*sj5);
IkReal x9384=(cj6*r11);
IkReal x9385=(cj5*r02);
IkReal x9386=(cj4*cj5);
IkReal x9387=(cj6*r00);
IkReal x9388=((1.0)*cj4);
IkReal x9389=(r11*sj6);
IkReal x9390=(cj5*x9384);
IkReal x9391=((1.0)*x9370);
evalcond[0]=(((sj2*x9369))+x9372+(((-1.0)*x9374*x9382))+(((-1.0)*x9382*x9384)));
evalcond[1]=(x9385+(((-1.0)*x9381*x9382))+(((-1.0)*x9377*x9382))+(((-1.0)*sj2*x9391)));
evalcond[2]=(((x9381*x9386))+(((-1.0)*x9369))+(((-1.0)*x9371*x9375))+((cj4*x9383))+((sj4*x9387))+((x9377*x9386)));
evalcond[3]=((((-1.0)*x9371*x9389))+((sj4*x9380))+((cj4*x9379))+(((-1.0)*x9391))+((x9384*x9386))+((x9374*x9386)));
evalcond[4]=((((-1.0)*x9371*x9390))+(((-1.0)*cj5*x9371*x9374))+((cj2*x9369))+(((-1.0)*x9371*x9379))+((cj4*x9380))+(((-1.0)*x9388*x9389)));
evalcond[5]=((((-1.0)*cj5*x9371*x9377))+(((-1.0)*cj5*x9371*x9381))+(((-1.0)*x9371*x9383))+((cj4*x9387))+(((-1.0)*cj2*x9391))+(((-1.0)*x9375*x9388)));
evalcond[6]=((((0.43342)*x9369))+((x9378*x9381))+(((-1.0)*x9373*x9381))+(((-1.0)*x9370*x9376))+(((-1.0)*x9373*x9377))+(((0.37429)*x9385))+(((-1.0)*px))+(((0.01)*x9383))+((x9377*x9378)));
evalcond[7]=(((x9374*x9378))+((x9378*x9384))+(((-1.0)*x9373*x9384))+(((-1.0)*x9373*x9374))+(((-1.0)*py))+(((0.37429)*x9372))+(((0.01)*x9379))+((x9369*x9376))+(((0.43342)*x9370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9392=(sj5*sj6);
IkReal x9393=(cj6*sj5);
CheckValue<IkReal> x9394=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x9394.valid){
continue;
}
CheckValue<IkReal> x9395 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x9392))+(((-1.0)*r01*x9393))+((cj5*r02)))),IkReal(((((-1.0)*cj5*r12))+((r10*x9392))+((r11*x9393)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9395.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9394.value)))+(x9395.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9396=IKcos(j0);
IkReal x9397=IKsin(j0);
IkReal x9398=((1.0)*sj4);
IkReal x9399=(cj5*r12);
IkReal x9400=((0.37429)*sj5);
IkReal x9401=(r10*sj6);
IkReal x9402=(r01*sj6);
IkReal x9403=((0.069)*sj2);
IkReal x9404=(cj6*r01);
IkReal x9405=((0.01)*cj5);
IkReal x9406=(r12*sj5);
IkReal x9407=(cj6*r10);
IkReal x9408=(r00*sj6);
IkReal x9409=((1.0)*sj5);
IkReal x9410=(r02*sj5);
IkReal x9411=(cj6*r11);
IkReal x9412=(cj5*r02);
IkReal x9413=(cj4*cj5);
IkReal x9414=(cj6*r00);
IkReal x9415=((1.0)*cj4);
IkReal x9416=(r11*sj6);
IkReal x9417=(cj5*x9411);
IkReal x9418=((1.0)*x9397);
evalcond[0]=(x9399+((sj2*x9396))+(((-1.0)*x9401*x9409))+(((-1.0)*x9409*x9411)));
evalcond[1]=((((-1.0)*x9404*x9409))+(((-1.0)*x9408*x9409))+(((-1.0)*sj2*x9418))+x9412);
evalcond[2]=(((x9408*x9413))+((sj4*x9414))+((x9404*x9413))+(((-1.0)*x9396))+((cj4*x9410))+(((-1.0)*x9398*x9402)));
evalcond[3]=(((cj4*x9406))+(((-1.0)*x9418))+(((-1.0)*x9398*x9416))+((x9401*x9413))+((sj4*x9407))+((x9411*x9413)));
evalcond[4]=(((cj2*x9396))+((cj4*x9407))+(((-1.0)*x9415*x9416))+(((-1.0)*x9398*x9417))+(((-1.0)*cj5*x9398*x9401))+(((-1.0)*x9398*x9406)));
evalcond[5]=((((-1.0)*cj2*x9418))+(((-1.0)*x9402*x9415))+(((-1.0)*x9398*x9410))+((cj4*x9414))+(((-1.0)*cj5*x9398*x9408))+(((-1.0)*cj5*x9398*x9404)));
evalcond[6]=(((x9405*x9408))+((x9404*x9405))+(((-1.0)*x9397*x9403))+(((0.43342)*x9396))+(((0.01)*x9410))+(((-1.0)*px))+(((0.37429)*x9412))+(((-1.0)*x9400*x9404))+(((-1.0)*x9400*x9408)));
evalcond[7]=((((-1.0)*x9400*x9411))+(((0.43342)*x9397))+((x9401*x9405))+(((-1.0)*py))+((x9405*x9411))+((x9396*x9403))+(((-1.0)*x9400*x9401))+(((0.01)*x9406))+(((0.37429)*x9399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x9419=(sj5*sj6);
IkReal x9420=(cj6*sj5);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*cj5*r12))+((r10*x9419))+((r11*x9420)))))+(IKabs(((((-1.0)*r01*x9420))+(((-1.0)*r00*x9419))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9421=(sj5*sj6);
IkReal x9422=(cj6*sj5);
if( IKabs(((((-1.0)*r01*x9422))+(((-1.0)*r00*x9421))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x9421))+((r11*x9422)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x9422))+(((-1.0)*r00*x9421))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x9421))+((r11*x9422))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x9422))+(((-1.0)*r00*x9421))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x9421))+((r11*x9422))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9423=IKcos(j0);
IkReal x9424=IKsin(j0);
IkReal x9425=((0.01)*cj5);
IkReal x9426=(cj6*r11);
IkReal x9427=(cj5*r12);
IkReal x9428=(r10*sj6);
IkReal x9429=((0.37429)*sj5);
IkReal x9430=((1.0)*r01);
IkReal x9431=(sj4*sj6);
IkReal x9432=(cj6*sj4);
IkReal x9433=(r00*sj6);
IkReal x9434=((1.0)*sj5);
IkReal x9435=(cj4*sj5);
IkReal x9436=(cj6*r01);
IkReal x9437=(cj5*r02);
IkReal x9438=(cj4*cj5);
IkReal x9439=((0.01)*sj5);
evalcond[0]=((((-1.0)*x9428*x9434))+(((-1.0)*x9426*x9434))+x9423+x9427);
evalcond[1]=((((-1.0)*cj6*sj5*x9430))+(((-1.0)*x9424))+(((-1.0)*x9433*x9434))+x9437);
evalcond[2]=(((x9436*x9438))+((r02*x9435))+x9423+((x9433*x9438))+(((-1.0)*x9430*x9431))+((r00*x9432)));
evalcond[3]=(((x9426*x9438))+((x9428*x9438))+(((-1.0)*r11*x9431))+x9424+((r10*x9432))+((r12*x9435)));
evalcond[4]=(((x9425*x9436))+((x9425*x9433))+(((-1.0)*px))+(((-0.069)*x9424))+((r02*x9439))+(((-0.29542)*x9423))+(((0.37429)*x9437))+(((-1.0)*x9429*x9433))+(((-1.0)*x9429*x9436)));
evalcond[5]=((((-1.0)*x9428*x9429))+((x9425*x9428))+((x9425*x9426))+(((-1.0)*py))+(((-1.0)*x9426*x9429))+(((-0.29542)*x9424))+(((0.069)*x9423))+(((0.37429)*x9427))+((r12*x9439)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9440=(cj6*sj5);
IkReal x9441=(sj5*sj6);
if( IKabs((((r00*x9441))+((r01*x9440))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x9440))+(((-1.0)*r10*x9441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x9441))+((r01*x9440))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x9440))+(((-1.0)*r10*x9441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x9441))+((r01*x9440))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x9440))+(((-1.0)*r10*x9441))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9442=IKcos(j0);
IkReal x9443=IKsin(j0);
IkReal x9444=((0.01)*cj5);
IkReal x9445=(cj6*r11);
IkReal x9446=(cj5*r12);
IkReal x9447=(r10*sj6);
IkReal x9448=((0.37429)*sj5);
IkReal x9449=((1.0)*r01);
IkReal x9450=(sj4*sj6);
IkReal x9451=(cj6*sj4);
IkReal x9452=(r00*sj6);
IkReal x9453=((1.0)*sj5);
IkReal x9454=(cj4*sj5);
IkReal x9455=(cj6*r01);
IkReal x9456=(cj5*r02);
IkReal x9457=(cj4*cj5);
IkReal x9458=((0.01)*sj5);
evalcond[0]=((((-1.0)*x9452*x9453))+(((-1.0)*cj6*sj5*x9449))+x9456+x9443);
evalcond[1]=((((-1.0)*x9445*x9453))+(((-1.0)*x9442))+x9446+(((-1.0)*x9447*x9453)));
evalcond[2]=(((r00*x9451))+((x9452*x9457))+((x9455*x9457))+x9442+(((-1.0)*x9449*x9450))+((r02*x9454)));
evalcond[3]=((((-1.0)*r11*x9450))+((r10*x9451))+((x9445*x9457))+((r12*x9454))+x9443+((x9447*x9457)));
evalcond[4]=(((x9444*x9455))+((x9444*x9452))+(((0.37429)*x9456))+(((-0.29542)*x9442))+(((-1.0)*px))+(((0.069)*x9443))+((r02*x9458))+(((-1.0)*x9448*x9455))+(((-1.0)*x9448*x9452)));
evalcond[5]=((((-0.069)*x9442))+(((-1.0)*x9445*x9448))+((x9444*x9445))+((x9444*x9447))+(((0.37429)*x9446))+(((-0.29542)*x9443))+(((-1.0)*py))+((r12*x9458))+(((-1.0)*x9447*x9448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9459=(cj6*sj4);
IkReal x9460=(cj5*r11);
IkReal x9461=(r11*sj6);
IkReal x9462=(r12*sj5);
IkReal x9463=((1.0)*r10);
IkReal x9464=(cj4*cj6);
IkReal x9465=(cj5*sj6);
if( IKabs((((sj4*x9461))+(((-1.0)*x9459*x9463))+(((-1.0)*cj4*x9462))+(((-1.0)*cj4*x9463*x9465))+(((-1.0)*x9460*x9464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x9462))+((r10*sj4*x9465))+((x9459*x9460))+((cj4*x9461))+(((-1.0)*x9463*x9464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x9461))+(((-1.0)*x9459*x9463))+(((-1.0)*cj4*x9462))+(((-1.0)*cj4*x9463*x9465))+(((-1.0)*x9460*x9464))))+IKsqr((((sj4*x9462))+((r10*sj4*x9465))+((x9459*x9460))+((cj4*x9461))+(((-1.0)*x9463*x9464))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x9461))+(((-1.0)*x9459*x9463))+(((-1.0)*cj4*x9462))+(((-1.0)*cj4*x9463*x9465))+(((-1.0)*x9460*x9464))), (((sj4*x9462))+((r10*sj4*x9465))+((x9459*x9460))+((cj4*x9461))+(((-1.0)*x9463*x9464))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9466=IKcos(j0);
IkReal x9467=IKsin(j0);
IkReal x9468=((1.0)*sj4);
IkReal x9469=(cj6*sj4);
IkReal x9470=(r10*sj6);
IkReal x9471=((0.37429)*sj5);
IkReal x9472=(r01*sj6);
IkReal x9473=((0.01)*cj5);
IkReal x9474=(r12*sj5);
IkReal x9475=(r00*sj6);
IkReal x9476=(r02*sj5);
IkReal x9477=((0.37429)*cj5);
IkReal x9478=(cj4*cj6);
IkReal x9479=(cj4*cj5);
IkReal x9480=((1.0)*cj4);
IkReal x9481=(r11*sj6);
IkReal x9482=(cj5*cj6*r11);
IkReal x9483=(cj5*cj6*r01);
evalcond[0]=(((x9475*x9479))+((cj5*r01*x9478))+((r00*x9469))+(((-1.0)*x9468*x9472))+x9466+((cj4*x9476)));
evalcond[1]=(((x9470*x9479))+((r10*x9469))+((cj5*r11*x9478))+x9467+((cj4*x9474))+(((-1.0)*x9468*x9481)));
evalcond[2]=(((r10*x9478))+(((-1.0)*cj5*x9468*x9470))+(((-1.0)*x9480*x9481))+(((-1.0)*x9468*x9474))+x9466+(((-1.0)*x9468*x9482)));
evalcond[3]=((((-1.0)*cj5*x9468*x9475))+((r00*x9478))+(((-1.0)*x9468*x9476))+(((-1.0)*x9472*x9480))+(((-1.0)*x9467))+(((-1.0)*x9468*x9483)));
evalcond[4]=((((0.01)*x9476))+(((-1.0)*x9471*x9475))+(((-1.0)*cj6*r01*x9471))+(((-0.29542)*x9466))+(((-1.0)*px))+((cj6*r01*x9473))+((x9473*x9475))+((r02*x9477)));
evalcond[5]=(((x9470*x9473))+(((0.01)*x9474))+(((-1.0)*x9470*x9471))+(((-0.29542)*x9467))+(((-1.0)*py))+((cj6*r11*x9473))+((r12*x9477))+(((-1.0)*cj6*r11*x9471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9484=(cj5*r01);
IkReal x9485=(cj4*sj6);
IkReal x9486=((1.0)*r00);
IkReal x9487=(cj6*sj4);
IkReal x9488=(r02*sj5);
IkReal x9489=(sj4*sj6);
IkReal x9490=((1.0)*cj4*cj6);
if( IKabs((((r01*x9485))+((cj5*r00*x9489))+(((-1.0)*cj4*cj6*x9486))+((sj4*x9488))+((x9484*x9487)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x9489))+(((-1.0)*cj4*x9488))+(((-1.0)*x9486*x9487))+(((-1.0)*cj5*x9485*x9486))+(((-1.0)*x9484*x9490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x9485))+((cj5*r00*x9489))+(((-1.0)*cj4*cj6*x9486))+((sj4*x9488))+((x9484*x9487))))+IKsqr((((r01*x9489))+(((-1.0)*cj4*x9488))+(((-1.0)*x9486*x9487))+(((-1.0)*cj5*x9485*x9486))+(((-1.0)*x9484*x9490))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x9485))+((cj5*r00*x9489))+(((-1.0)*cj4*cj6*x9486))+((sj4*x9488))+((x9484*x9487))), (((r01*x9489))+(((-1.0)*cj4*x9488))+(((-1.0)*x9486*x9487))+(((-1.0)*cj5*x9485*x9486))+(((-1.0)*x9484*x9490))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9491=IKsin(j0);
IkReal x9492=IKcos(j0);
IkReal x9493=((1.0)*sj4);
IkReal x9494=(cj6*sj4);
IkReal x9495=(r10*sj6);
IkReal x9496=((0.37429)*sj5);
IkReal x9497=(r01*sj6);
IkReal x9498=((0.01)*cj5);
IkReal x9499=(r12*sj5);
IkReal x9500=(r00*sj6);
IkReal x9501=(r02*sj5);
IkReal x9502=((0.37429)*cj5);
IkReal x9503=(cj4*cj6);
IkReal x9504=(cj4*cj5);
IkReal x9505=((1.0)*cj4);
IkReal x9506=(r11*sj6);
IkReal x9507=(cj5*cj6*r11);
IkReal x9508=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x9493*x9497))+((cj5*r01*x9503))+((x9500*x9504))+((cj4*x9501))+((r00*x9494))+x9492);
evalcond[1]=(((cj4*x9499))+((r10*x9494))+((x9495*x9504))+(((-1.0)*x9493*x9506))+((cj5*r11*x9503))+x9491);
evalcond[2]=((((-1.0)*x9493*x9501))+(((-1.0)*x9493*x9508))+x9491+(((-1.0)*cj5*x9493*x9500))+((r00*x9503))+(((-1.0)*x9497*x9505)));
evalcond[3]=((((-1.0)*x9493*x9499))+(((-1.0)*x9505*x9506))+((r10*x9503))+(((-1.0)*x9493*x9507))+(((-1.0)*cj5*x9493*x9495))+(((-1.0)*x9492)));
evalcond[4]=(((x9498*x9500))+(((-1.0)*cj6*r01*x9496))+(((0.01)*x9501))+((r02*x9502))+(((-1.0)*px))+(((-1.0)*x9496*x9500))+((cj6*r01*x9498))+(((-0.29542)*x9492)));
evalcond[5]=((((0.01)*x9499))+((cj6*r11*x9498))+(((-1.0)*cj6*r11*x9496))+((r12*x9502))+(((-1.0)*py))+(((-1.0)*x9495*x9496))+((x9495*x9498))+(((-0.29542)*x9491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9509=((1.0)*sj6);
IkReal x9510=(cj5*sj4);
CheckValue<IkReal> x9511=IKPowWithIntegerCheck(cj2,-1);
if(!x9511.valid){
continue;
}
CheckValue<IkReal> x9512=IKPowWithIntegerCheck(sj2,-1);
if(!x9512.valid){
continue;
}
if( IKabs(((x9511.value)*(((((-1.0)*cj4*r01*x9509))+(((-1.0)*cj6*r01*x9510))+((cj4*cj6*r00))+(((-1.0)*r00*x9509*x9510))+(((-1.0)*r02*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9512.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9511.value)*(((((-1.0)*cj4*r01*x9509))+(((-1.0)*cj6*r01*x9510))+((cj4*cj6*r00))+(((-1.0)*r00*x9509*x9510))+(((-1.0)*r02*sj4*sj5))))))+IKsqr(((x9512.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x9511.value)*(((((-1.0)*cj4*r01*x9509))+(((-1.0)*cj6*r01*x9510))+((cj4*cj6*r00))+(((-1.0)*r00*x9509*x9510))+(((-1.0)*r02*sj4*sj5))))), ((x9512.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9513=IKcos(j0);
IkReal x9514=IKsin(j0);
IkReal x9515=((1.0)*sj4);
IkReal x9516=(cj5*r12);
IkReal x9517=((0.37429)*sj5);
IkReal x9518=(r10*sj6);
IkReal x9519=(r01*sj6);
IkReal x9520=((0.069)*sj2);
IkReal x9521=(cj6*r01);
IkReal x9522=((0.01)*cj5);
IkReal x9523=(r12*sj5);
IkReal x9524=(cj6*r10);
IkReal x9525=(r00*sj6);
IkReal x9526=((1.0)*sj5);
IkReal x9527=(r02*sj5);
IkReal x9528=(cj6*r11);
IkReal x9529=(cj5*r02);
IkReal x9530=(cj4*cj5);
IkReal x9531=(cj6*r00);
IkReal x9532=((1.0)*cj4);
IkReal x9533=(r11*sj6);
IkReal x9534=(cj5*x9528);
IkReal x9535=((1.0)*x9514);
evalcond[0]=(((sj2*x9513))+(((-1.0)*x9526*x9528))+(((-1.0)*x9518*x9526))+x9516);
evalcond[1]=((((-1.0)*x9521*x9526))+(((-1.0)*x9525*x9526))+x9529+(((-1.0)*sj2*x9535)));
evalcond[2]=(((x9521*x9530))+(((-1.0)*x9515*x9519))+x9513+((x9525*x9530))+((cj4*x9527))+((sj4*x9531)));
evalcond[3]=(((sj4*x9524))+((x9518*x9530))+(((-1.0)*x9515*x9533))+((x9528*x9530))+x9514+((cj4*x9523)));
evalcond[4]=((((-1.0)*x9532*x9533))+(((-1.0)*cj5*x9515*x9518))+(((-1.0)*x9515*x9523))+(((-1.0)*x9515*x9534))+((cj2*x9513))+((cj4*x9524)));
evalcond[5]=((((-1.0)*x9515*x9527))+(((-1.0)*cj5*x9515*x9525))+(((-1.0)*cj5*x9515*x9521))+(((-1.0)*x9519*x9532))+((cj4*x9531))+(((-1.0)*cj2*x9535)));
evalcond[6]=(((x9521*x9522))+(((0.37429)*x9529))+(((-1.0)*px))+(((0.01)*x9527))+(((-0.29542)*x9513))+(((-1.0)*x9517*x9525))+(((-1.0)*x9517*x9521))+((x9522*x9525))+(((-1.0)*x9514*x9520)));
evalcond[7]=((((-1.0)*x9517*x9518))+((x9518*x9522))+(((0.37429)*x9516))+(((-1.0)*py))+((x9513*x9520))+(((0.01)*x9523))+(((-0.29542)*x9514))+(((-1.0)*x9517*x9528))+((x9522*x9528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9536=(r10*sj6);
IkReal x9537=(cj6*r11);
IkReal x9538=((1.0)*r12);
IkReal x9539=((1.0)*cj4*cj5);
CheckValue<IkReal> x9540=IKPowWithIntegerCheck(sj2,-1);
if(!x9540.valid){
continue;
}
if( IKabs(((((-1.0)*x9536*x9539))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*cj4*sj5*x9538))+((r11*sj4*sj6))+(((-1.0)*x9537*x9539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9540.value)*(((((-1.0)*cj5*x9538))+((sj5*x9536))+((sj5*x9537)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x9536*x9539))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*cj4*sj5*x9538))+((r11*sj4*sj6))+(((-1.0)*x9537*x9539))))+IKsqr(((x9540.value)*(((((-1.0)*cj5*x9538))+((sj5*x9536))+((sj5*x9537))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x9536*x9539))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*cj4*sj5*x9538))+((r11*sj4*sj6))+(((-1.0)*x9537*x9539))), ((x9540.value)*(((((-1.0)*cj5*x9538))+((sj5*x9536))+((sj5*x9537))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9541=IKcos(j0);
IkReal x9542=IKsin(j0);
IkReal x9543=((1.0)*sj4);
IkReal x9544=(cj5*r12);
IkReal x9545=((0.37429)*sj5);
IkReal x9546=(r10*sj6);
IkReal x9547=(r01*sj6);
IkReal x9548=((0.069)*sj2);
IkReal x9549=(cj6*r01);
IkReal x9550=((0.01)*cj5);
IkReal x9551=(r12*sj5);
IkReal x9552=(cj6*r10);
IkReal x9553=(r00*sj6);
IkReal x9554=((1.0)*sj5);
IkReal x9555=(r02*sj5);
IkReal x9556=(cj6*r11);
IkReal x9557=(cj5*r02);
IkReal x9558=(cj4*cj5);
IkReal x9559=(cj6*r00);
IkReal x9560=((1.0)*cj4);
IkReal x9561=(r11*sj6);
IkReal x9562=(cj5*x9556);
IkReal x9563=((1.0)*x9542);
evalcond[0]=((((-1.0)*x9554*x9556))+(((-1.0)*x9546*x9554))+x9544+((sj2*x9541)));
evalcond[1]=((((-1.0)*x9553*x9554))+x9557+(((-1.0)*x9549*x9554))+(((-1.0)*sj2*x9563)));
evalcond[2]=((((-1.0)*x9543*x9547))+((sj4*x9559))+((x9549*x9558))+((cj4*x9555))+((x9553*x9558))+x9541);
evalcond[3]=(((sj4*x9552))+(((-1.0)*x9543*x9561))+((cj4*x9551))+((x9556*x9558))+x9542+((x9546*x9558)));
evalcond[4]=(((cj2*x9541))+(((-1.0)*x9543*x9551))+(((-1.0)*cj5*x9543*x9546))+(((-1.0)*x9543*x9562))+((cj4*x9552))+(((-1.0)*x9560*x9561)));
evalcond[5]=((((-1.0)*cj2*x9563))+(((-1.0)*x9543*x9555))+(((-1.0)*cj5*x9543*x9549))+((cj4*x9559))+(((-1.0)*cj5*x9543*x9553))+(((-1.0)*x9547*x9560)));
evalcond[6]=((((-0.29542)*x9541))+(((-1.0)*x9542*x9548))+((x9549*x9550))+(((-1.0)*px))+(((0.01)*x9555))+(((0.37429)*x9557))+((x9550*x9553))+(((-1.0)*x9545*x9553))+(((-1.0)*x9545*x9549)));
evalcond[7]=((((-0.29542)*x9542))+(((-1.0)*py))+(((0.01)*x9551))+(((0.37429)*x9544))+((x9546*x9550))+((x9550*x9556))+(((-1.0)*x9545*x9556))+((x9541*x9548))+(((-1.0)*x9545*x9546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9564=(sj5*sj6);
IkReal x9565=(cj6*sj5);
CheckValue<IkReal> x9566=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x9566.valid){
continue;
}
CheckValue<IkReal> x9567 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x9565))+(((-1.0)*r00*x9564))+((cj5*r02)))),IkReal(((((-1.0)*cj5*r12))+((r11*x9565))+((r10*x9564)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9567.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9566.value)))+(x9567.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9568=IKcos(j0);
IkReal x9569=IKsin(j0);
IkReal x9570=((1.0)*sj4);
IkReal x9571=(cj5*r12);
IkReal x9572=((0.37429)*sj5);
IkReal x9573=(r10*sj6);
IkReal x9574=(r01*sj6);
IkReal x9575=((0.069)*sj2);
IkReal x9576=(cj6*r01);
IkReal x9577=((0.01)*cj5);
IkReal x9578=(r12*sj5);
IkReal x9579=(cj6*r10);
IkReal x9580=(r00*sj6);
IkReal x9581=((1.0)*sj5);
IkReal x9582=(r02*sj5);
IkReal x9583=(cj6*r11);
IkReal x9584=(cj5*r02);
IkReal x9585=(cj4*cj5);
IkReal x9586=(cj6*r00);
IkReal x9587=((1.0)*cj4);
IkReal x9588=(r11*sj6);
IkReal x9589=(cj5*x9583);
IkReal x9590=((1.0)*x9569);
evalcond[0]=((((-1.0)*x9573*x9581))+(((-1.0)*x9581*x9583))+((sj2*x9568))+x9571);
evalcond[1]=((((-1.0)*sj2*x9590))+(((-1.0)*x9576*x9581))+(((-1.0)*x9580*x9581))+x9584);
evalcond[2]=(((x9576*x9585))+((cj4*x9582))+((x9580*x9585))+x9568+(((-1.0)*x9570*x9574))+((sj4*x9586)));
evalcond[3]=(((cj4*x9578))+((x9583*x9585))+x9569+(((-1.0)*x9570*x9588))+((sj4*x9579))+((x9573*x9585)));
evalcond[4]=(((cj4*x9579))+(((-1.0)*x9587*x9588))+((cj2*x9568))+(((-1.0)*x9570*x9589))+(((-1.0)*x9570*x9578))+(((-1.0)*cj5*x9570*x9573)));
evalcond[5]=(((cj4*x9586))+(((-1.0)*x9574*x9587))+(((-1.0)*cj5*x9570*x9580))+(((-1.0)*cj2*x9590))+(((-1.0)*x9570*x9582))+(((-1.0)*cj5*x9570*x9576)));
evalcond[6]=((((-1.0)*x9572*x9580))+(((0.37429)*x9584))+((x9576*x9577))+(((-1.0)*x9572*x9576))+(((-1.0)*px))+(((-0.29542)*x9568))+(((0.01)*x9582))+(((-1.0)*x9569*x9575))+((x9577*x9580)));
evalcond[7]=((((-1.0)*x9572*x9583))+(((0.01)*x9578))+(((0.37429)*x9571))+((x9573*x9577))+(((-1.0)*x9572*x9573))+(((-1.0)*py))+(((-0.29542)*x9569))+((x9568*x9575))+((x9577*x9583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x9591=((1.0)*cj6*sj5);
IkReal x9592=((1.0)*sj5*sj6);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x9592))+(((-1.0)*r11*x9591)))))+(IKabs(((((-1.0)*r01*x9591))+(((-1.0)*r00*x9592))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9593=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x9593))+(((-1.0)*r10*sj6*x9593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x9593))+(((-1.0)*cj6*r01*x9593))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x9593))+(((-1.0)*r10*sj6*x9593))))+IKsqr(((((-1.0)*r00*sj6*x9593))+(((-1.0)*cj6*r01*x9593))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x9593))+(((-1.0)*r10*sj6*x9593))), ((((-1.0)*r00*sj6*x9593))+(((-1.0)*cj6*r01*x9593))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9594=IKcos(j0);
IkReal x9595=(cj4*cj6);
IkReal x9596=(r00*sj6);
IkReal x9597=(cj6*r01);
IkReal x9598=((1.0)*sj5);
IkReal x9599=(cj6*r11);
IkReal x9600=(r10*sj6);
IkReal x9601=((1.0)*(IKsin(j0)));
IkReal x9602=((1.0)*cj4*sj6);
IkReal x9603=((1.0)*cj5*sj4);
evalcond[0]=(((cj5*r12))+(((-1.0)*x9598*x9599))+(((-1.0)*x9601))+(((-1.0)*x9598*x9600)));
evalcond[1]=((((-1.0)*x9596*x9598))+(((-1.0)*x9597*x9598))+(((-1.0)*x9594))+((cj5*r02)));
evalcond[2]=(((r10*x9595))+(((-1.0)*x9600*x9603))+x9594+(((-1.0)*r12*sj4*x9598))+(((-1.0)*r11*x9602))+(((-1.0)*x9599*x9603)));
evalcond[3]=((((-1.0)*r01*x9602))+(((-1.0)*x9597*x9603))+(((-1.0)*x9596*x9603))+(((-1.0)*x9601))+((r00*x9595))+(((-1.0)*r02*sj4*x9598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9604=(cj6*sj5);
IkReal x9605=(sj5*sj6);
IkReal x9606=((1.0)*cj5);
if( IKabs((((r10*x9605))+((r11*x9604))+(((-1.0)*r12*x9606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x9605))+((r01*x9604))+(((-1.0)*r02*x9606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x9605))+((r11*x9604))+(((-1.0)*r12*x9606))))+IKsqr((((r00*x9605))+((r01*x9604))+(((-1.0)*r02*x9606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x9605))+((r11*x9604))+(((-1.0)*r12*x9606))), (((r00*x9605))+((r01*x9604))+(((-1.0)*r02*x9606))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9607=IKcos(j0);
IkReal x9608=IKsin(j0);
IkReal x9609=((1.0)*sj4);
IkReal x9610=(cj5*r12);
IkReal x9611=(r10*sj6);
IkReal x9612=((0.37429)*sj5);
IkReal x9613=(cj6*r01);
IkReal x9614=((0.01)*cj5);
IkReal x9615=(r12*sj5);
IkReal x9616=(r00*sj6);
IkReal x9617=((1.0)*sj5);
IkReal x9618=(r02*sj5);
IkReal x9619=(cj6*r11);
IkReal x9620=(cj4*cj6);
IkReal x9621=(cj5*r02);
IkReal x9622=(cj5*x9619);
IkReal x9623=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x9617*x9619))+(((-1.0)*x9611*x9617))+x9610+x9608);
evalcond[1]=((((-1.0)*x9613*x9617))+x9621+x9607+(((-1.0)*x9616*x9617)));
evalcond[2]=((((-1.0)*x9609*x9615))+((r10*x9620))+(((-1.0)*r11*x9623))+(((-1.0)*cj5*x9609*x9611))+x9607+(((-1.0)*x9609*x9622)));
evalcond[3]=((((-1.0)*x9609*x9618))+((r00*x9620))+(((-1.0)*r01*x9623))+(((-1.0)*cj5*x9609*x9616))+(((-1.0)*cj5*x9609*x9613))+(((-1.0)*x9608)));
evalcond[4]=((((-1.0)*x9612*x9616))+(((-1.0)*x9612*x9613))+(((0.37429)*x9621))+(((0.01)*x9618))+(((-1.0)*px))+(((0.138)*x9607))+((x9614*x9616))+((x9613*x9614)));
evalcond[5]=(((x9611*x9614))+(((0.37429)*x9610))+(((-1.0)*x9612*x9619))+(((-1.0)*x9611*x9612))+(((0.01)*x9615))+(((-1.0)*py))+(((0.138)*x9608))+((x9614*x9619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9624=(cj4*cj5);
IkReal x9625=((1.0)*sj6);
CheckValue<IkReal> x9626=IKPowWithIntegerCheck(sj1,-1);
if(!x9626.valid){
continue;
}
CheckValue<IkReal> x9627=IKPowWithIntegerCheck(cj1,-1);
if(!x9627.valid){
continue;
}
if( IKabs(((x9626.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x9625)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9627.value)*((((cj6*r01*x9624))+((cj6*r00*sj4))+(((-1.0)*r01*sj4*x9625))+((cj4*r02*sj5))+((r00*sj6*x9624)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9626.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x9625))))))+IKsqr(((x9627.value)*((((cj6*r01*x9624))+((cj6*r00*sj4))+(((-1.0)*r01*sj4*x9625))+((cj4*r02*sj5))+((r00*sj6*x9624))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x9626.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x9625))))), ((x9627.value)*((((cj6*r01*x9624))+((cj6*r00*sj4))+(((-1.0)*r01*sj4*x9625))+((cj4*r02*sj5))+((r00*sj6*x9624))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9628=IKcos(j0);
IkReal x9629=IKsin(j0);
IkReal x9630=(r02*sj5);
IkReal x9631=((1.0)*sj4);
IkReal x9632=(cj5*r12);
IkReal x9633=((0.37429)*sj5);
IkReal x9634=(r10*sj6);
IkReal x9635=(r01*sj6);
IkReal x9636=((0.36442)*cj1);
IkReal x9637=(cj6*r01);
IkReal x9638=((0.01)*cj5);
IkReal x9639=(r12*sj5);
IkReal x9640=(cj6*sj4);
IkReal x9641=(r00*sj6);
IkReal x9642=((1.0)*sj5);
IkReal x9643=(cj6*r11);
IkReal x9644=(cj4*cj6);
IkReal x9645=(cj5*r02);
IkReal x9646=(cj4*cj5);
IkReal x9647=((1.0)*cj4);
IkReal x9648=(r11*sj6);
IkReal x9649=(cj5*x9643);
IkReal x9650=((0.069)*x9628);
IkReal x9651=((0.069)*x9629);
IkReal x9652=((1.0)*x9629);
IkReal x9653=((1.0)*x9628);
evalcond[0]=(x9632+(((-1.0)*x9642*x9643))+(((-1.0)*x9634*x9642))+(((-1.0)*sj1*x9652)));
evalcond[1]=((((-1.0)*x9641*x9642))+(((-1.0)*x9637*x9642))+x9645+(((-1.0)*sj1*x9653)));
evalcond[2]=((((-1.0)*x9647*x9648))+(((-1.0)*x9631*x9649))+x9628+((r10*x9644))+(((-1.0)*x9631*x9639))+(((-1.0)*cj5*x9631*x9634)));
evalcond[3]=(((x9637*x9646))+((x9641*x9646))+(((-1.0)*cj1*x9653))+((r00*x9640))+(((-1.0)*x9631*x9635))+((cj4*x9630)));
evalcond[4]=(((x9643*x9646))+(((-1.0)*x9631*x9648))+(((-1.0)*cj1*x9652))+((x9634*x9646))+((r10*x9640))+((cj4*x9639)));
evalcond[5]=((((-1.0)*cj5*x9631*x9641))+(((-1.0)*x9630*x9631))+((r00*x9644))+(((-1.0)*cj5*x9631*x9637))+(((-1.0)*x9635*x9647))+(((-1.0)*x9652)));
evalcond[6]=(((x9638*x9641))+(((-1.0)*x9633*x9637))+((x9628*x9636))+(((-1.0)*px))+x9650+(((0.01)*x9630))+((x9637*x9638))+(((-1.0)*x9633*x9641))+(((0.37429)*x9645))+(((-1.0)*sj1*x9650)));
evalcond[7]=(((x9634*x9638))+((x9638*x9643))+((x9629*x9636))+(((0.37429)*x9632))+(((-1.0)*x9633*x9634))+(((-1.0)*py))+x9651+(((0.01)*x9639))+(((-1.0)*x9633*x9643))+(((-1.0)*sj1*x9651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9654=(cj5*sj4);
IkReal x9655=(cj6*r11);
IkReal x9656=(r10*sj6);
IkReal x9657=((1.0)*sj5);
CheckValue<IkReal> x9658=IKPowWithIntegerCheck(sj1,-1);
if(!x9658.valid){
continue;
}
if( IKabs(((x9658.value)*((((cj5*r12))+(((-1.0)*x9655*x9657))+(((-1.0)*x9656*x9657)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x9654*x9656))+((x9654*x9655))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9658.value)*((((cj5*r12))+(((-1.0)*x9655*x9657))+(((-1.0)*x9656*x9657))))))+IKsqr((((x9654*x9656))+((x9654*x9655))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x9658.value)*((((cj5*r12))+(((-1.0)*x9655*x9657))+(((-1.0)*x9656*x9657))))), (((x9654*x9656))+((x9654*x9655))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9659=IKcos(j0);
IkReal x9660=IKsin(j0);
IkReal x9661=(r02*sj5);
IkReal x9662=((1.0)*sj4);
IkReal x9663=(cj5*r12);
IkReal x9664=((0.37429)*sj5);
IkReal x9665=(r10*sj6);
IkReal x9666=(r01*sj6);
IkReal x9667=((0.36442)*cj1);
IkReal x9668=(cj6*r01);
IkReal x9669=((0.01)*cj5);
IkReal x9670=(r12*sj5);
IkReal x9671=(cj6*sj4);
IkReal x9672=(r00*sj6);
IkReal x9673=((1.0)*sj5);
IkReal x9674=(cj6*r11);
IkReal x9675=(cj4*cj6);
IkReal x9676=(cj5*r02);
IkReal x9677=(cj4*cj5);
IkReal x9678=((1.0)*cj4);
IkReal x9679=(r11*sj6);
IkReal x9680=(cj5*x9674);
IkReal x9681=((0.069)*x9659);
IkReal x9682=((0.069)*x9660);
IkReal x9683=((1.0)*x9660);
IkReal x9684=((1.0)*x9659);
evalcond[0]=((((-1.0)*x9665*x9673))+(((-1.0)*sj1*x9683))+x9663+(((-1.0)*x9673*x9674)));
evalcond[1]=((((-1.0)*sj1*x9684))+x9676+(((-1.0)*x9668*x9673))+(((-1.0)*x9672*x9673)));
evalcond[2]=((((-1.0)*x9678*x9679))+(((-1.0)*x9662*x9670))+((r10*x9675))+x9659+(((-1.0)*x9662*x9680))+(((-1.0)*cj5*x9662*x9665)));
evalcond[3]=((((-1.0)*x9662*x9666))+((r00*x9671))+(((-1.0)*cj1*x9684))+((cj4*x9661))+((x9668*x9677))+((x9672*x9677)));
evalcond[4]=(((x9665*x9677))+(((-1.0)*x9662*x9679))+(((-1.0)*cj1*x9683))+((r10*x9671))+((cj4*x9670))+((x9674*x9677)));
evalcond[5]=((((-1.0)*x9661*x9662))+(((-1.0)*x9666*x9678))+((r00*x9675))+(((-1.0)*x9683))+(((-1.0)*cj5*x9662*x9672))+(((-1.0)*cj5*x9662*x9668)));
evalcond[6]=((((-1.0)*x9664*x9672))+(((-1.0)*x9664*x9668))+(((0.37429)*x9676))+(((-1.0)*sj1*x9681))+(((-1.0)*px))+x9681+((x9668*x9669))+(((0.01)*x9661))+((x9669*x9672))+((x9659*x9667)));
evalcond[7]=(((x9665*x9669))+(((-1.0)*x9664*x9674))+((x9660*x9667))+(((-1.0)*x9664*x9665))+(((0.37429)*x9663))+(((-1.0)*sj1*x9682))+(((-1.0)*py))+x9682+((x9669*x9674))+(((0.01)*x9670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9685=((1.0)*sj5);
CheckValue<IkReal> x9686=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x9686.valid){
continue;
}
CheckValue<IkReal> x9687 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*sj6*x9685))+(((-1.0)*cj6*r11*x9685)))),IkReal(((((-1.0)*r00*sj6*x9685))+(((-1.0)*cj6*r01*x9685))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9687.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9686.value)))+(x9687.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9688=IKcos(j0);
IkReal x9689=IKsin(j0);
IkReal x9690=(r02*sj5);
IkReal x9691=((1.0)*sj4);
IkReal x9692=(cj5*r12);
IkReal x9693=((0.37429)*sj5);
IkReal x9694=(r10*sj6);
IkReal x9695=(r01*sj6);
IkReal x9696=((0.36442)*cj1);
IkReal x9697=(cj6*r01);
IkReal x9698=((0.01)*cj5);
IkReal x9699=(r12*sj5);
IkReal x9700=(cj6*sj4);
IkReal x9701=(r00*sj6);
IkReal x9702=((1.0)*sj5);
IkReal x9703=(cj6*r11);
IkReal x9704=(cj4*cj6);
IkReal x9705=(cj5*r02);
IkReal x9706=(cj4*cj5);
IkReal x9707=((1.0)*cj4);
IkReal x9708=(r11*sj6);
IkReal x9709=(cj5*x9703);
IkReal x9710=((0.069)*x9688);
IkReal x9711=((0.069)*x9689);
IkReal x9712=((1.0)*x9689);
IkReal x9713=((1.0)*x9688);
evalcond[0]=((((-1.0)*sj1*x9712))+x9692+(((-1.0)*x9702*x9703))+(((-1.0)*x9694*x9702)));
evalcond[1]=(x9705+(((-1.0)*sj1*x9713))+(((-1.0)*x9701*x9702))+(((-1.0)*x9697*x9702)));
evalcond[2]=((((-1.0)*cj5*x9691*x9694))+((r10*x9704))+(((-1.0)*x9707*x9708))+x9688+(((-1.0)*x9691*x9709))+(((-1.0)*x9691*x9699)));
evalcond[3]=(((cj4*x9690))+(((-1.0)*cj1*x9713))+((x9701*x9706))+((r00*x9700))+((x9697*x9706))+(((-1.0)*x9691*x9695)));
evalcond[4]=(((r10*x9700))+((x9703*x9706))+((cj4*x9699))+(((-1.0)*cj1*x9712))+(((-1.0)*x9691*x9708))+((x9694*x9706)));
evalcond[5]=((((-1.0)*cj5*x9691*x9697))+(((-1.0)*x9690*x9691))+((r00*x9704))+(((-1.0)*x9695*x9707))+(((-1.0)*cj5*x9691*x9701))+(((-1.0)*x9712)));
evalcond[6]=(((x9698*x9701))+(((-1.0)*x9693*x9697))+(((0.01)*x9690))+((x9697*x9698))+(((-1.0)*px))+x9710+(((0.37429)*x9705))+(((-1.0)*sj1*x9710))+((x9688*x9696))+(((-1.0)*x9693*x9701)));
evalcond[7]=(((x9689*x9696))+(((0.37429)*x9692))+((x9698*x9703))+((x9694*x9698))+(((-1.0)*x9693*x9694))+(((0.01)*x9699))+(((-1.0)*py))+x9711+(((-1.0)*sj1*x9711))+(((-1.0)*x9693*x9703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x9714=(cj6*sj5);
IkReal x9715=(sj5*sj6);
IkReal x9716=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs(((((-1.0)*r02*x9716))+((r01*x9714))+((r00*x9715)))))+(IKabs((((r11*x9714))+(((-1.0)*r12*x9716))+((r10*x9715))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9717=(cj6*sj5);
IkReal x9718=(sj5*sj6);
IkReal x9719=((1.0)*cj5);
if( IKabs((((r11*x9717))+(((-1.0)*r12*x9719))+((r10*x9718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x9719))+((r01*x9717))+((r00*x9718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x9717))+(((-1.0)*r12*x9719))+((r10*x9718))))+IKsqr(((((-1.0)*r02*x9719))+((r01*x9717))+((r00*x9718))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x9717))+(((-1.0)*r12*x9719))+((r10*x9718))), ((((-1.0)*r02*x9719))+((r01*x9717))+((r00*x9718))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x9720=IKsin(j0);
IkReal x9721=IKcos(j0);
IkReal x9722=((1.0)*sj4);
IkReal x9723=(cj5*r12);
IkReal x9724=(r10*sj6);
IkReal x9725=((0.37429)*sj5);
IkReal x9726=(cj6*r01);
IkReal x9727=((0.01)*cj5);
IkReal x9728=(r12*sj5);
IkReal x9729=(r00*sj6);
IkReal x9730=((1.0)*sj5);
IkReal x9731=(r02*sj5);
IkReal x9732=(cj6*r11);
IkReal x9733=(cj4*cj6);
IkReal x9734=(cj5*r02);
IkReal x9735=(cj5*x9732);
IkReal x9736=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x9724*x9730))+(((-1.0)*x9730*x9732))+x9723+x9720);
evalcond[1]=((((-1.0)*x9729*x9730))+(((-1.0)*x9726*x9730))+x9721+x9734);
evalcond[2]=((((-1.0)*x9722*x9731))+(((-1.0)*r01*x9736))+x9720+(((-1.0)*cj5*x9722*x9726))+(((-1.0)*cj5*x9722*x9729))+((r00*x9733)));
evalcond[3]=((((-1.0)*x9722*x9728))+(((-1.0)*x9722*x9735))+(((-1.0)*r11*x9736))+(((-1.0)*cj5*x9722*x9724))+(((-1.0)*x9721))+((r10*x9733)));
evalcond[4]=((((0.01)*x9731))+((x9726*x9727))+(((-1.0)*x9725*x9726))+(((-1.0)*x9725*x9729))+(((0.138)*x9721))+(((-1.0)*px))+(((0.37429)*x9734))+((x9727*x9729)));
evalcond[5]=((((0.01)*x9728))+(((-1.0)*x9724*x9725))+(((-1.0)*x9725*x9732))+(((0.138)*x9720))+(((-1.0)*py))+(((0.37429)*x9723))+((x9724*x9727))+((x9727*x9732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9737=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x9737))+(((-1.0)*cj6*r11*x9737)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x9737))+(((-1.0)*r00*sj6*x9737))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x9737))+(((-1.0)*cj6*r11*x9737))))+IKsqr(((((-1.0)*cj6*r01*x9737))+(((-1.0)*r00*sj6*x9737))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x9737))+(((-1.0)*cj6*r11*x9737))), ((((-1.0)*cj6*r01*x9737))+(((-1.0)*r00*sj6*x9737))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9738=IKsin(j0);
IkReal x9739=(cj4*cj6);
IkReal x9740=((1.0)*sj5);
IkReal x9741=(cj6*r11);
IkReal x9742=(cj6*r01);
IkReal x9743=((1.0)*(IKcos(j0)));
IkReal x9744=((1.0)*cj4*sj6);
IkReal x9745=((1.0)*cj5*sj4);
IkReal x9746=(sj6*x9745);
evalcond[0]=(((cj5*r12))+(((-1.0)*r10*sj6*x9740))+(((-1.0)*x9740*x9741))+(((-1.0)*x9738)));
evalcond[1]=((((-1.0)*r00*sj6*x9740))+(((-1.0)*x9743))+(((-1.0)*x9740*x9742))+((cj5*r02)));
evalcond[2]=((((-1.0)*x9742*x9745))+(((-1.0)*r02*sj4*x9740))+(((-1.0)*r01*x9744))+x9738+(((-1.0)*r00*x9746))+((r00*x9739)));
evalcond[3]=((((-1.0)*x9741*x9745))+(((-1.0)*r10*x9746))+(((-1.0)*x9743))+(((-1.0)*r11*x9744))+(((-1.0)*r12*sj4*x9740))+((r10*x9739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9747=(cj4*cj5);
CheckValue<IkReal> x9748=IKPowWithIntegerCheck(sj1,-1);
if(!x9748.valid){
continue;
}
CheckValue<IkReal> x9749=IKPowWithIntegerCheck(cj1,-1);
if(!x9749.valid){
continue;
}
if( IKabs(((x9748.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9749.value)*((((cj6*r00*sj4))+((r00*sj6*x9747))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((cj6*r01*x9747)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x9748.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))+IKsqr(((x9749.value)*((((cj6*r00*sj4))+((r00*sj6*x9747))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((cj6*r01*x9747))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x9748.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))), ((x9749.value)*((((cj6*r00*sj4))+((r00*sj6*x9747))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((cj6*r01*x9747))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9750=IKsin(j0);
IkReal x9751=IKcos(j0);
IkReal x9752=((1.0)*sj4);
IkReal x9753=(cj5*r12);
IkReal x9754=((0.37429)*sj5);
IkReal x9755=(r10*sj6);
IkReal x9756=(r01*sj6);
IkReal x9757=((0.36442)*cj1);
IkReal x9758=(cj6*r01);
IkReal x9759=((0.01)*cj5);
IkReal x9760=(cj6*sj4);
IkReal x9761=(r00*sj6);
IkReal x9762=((1.0)*sj5);
IkReal x9763=(r02*sj5);
IkReal x9764=(cj6*r11);
IkReal x9765=(r12*sj5);
IkReal x9766=(cj4*cj6);
IkReal x9767=(cj5*r02);
IkReal x9768=(cj4*cj5);
IkReal x9769=((1.0)*cj4);
IkReal x9770=(r11*sj6);
IkReal x9771=(cj5*x9764);
IkReal x9772=(sj1*x9750);
IkReal x9773=((1.0)*x9751);
IkReal x9774=((0.069)*x9751);
evalcond[0]=(x9753+x9772+(((-1.0)*x9755*x9762))+(((-1.0)*x9762*x9764)));
evalcond[1]=(((sj1*x9751))+x9767+(((-1.0)*x9758*x9762))+(((-1.0)*x9761*x9762)));
evalcond[2]=(((r00*x9766))+(((-1.0)*cj5*x9752*x9761))+(((-1.0)*cj5*x9752*x9758))+x9750+(((-1.0)*x9752*x9763))+(((-1.0)*x9756*x9769)));
evalcond[3]=(((x9761*x9768))+((cj4*x9763))+((r00*x9760))+((x9758*x9768))+(((-1.0)*cj1*x9773))+(((-1.0)*x9752*x9756)));
evalcond[4]=(((cj4*x9765))+(((-1.0)*cj1*x9750))+((r10*x9760))+((x9764*x9768))+((x9755*x9768))+(((-1.0)*x9752*x9770)));
evalcond[5]=(((r10*x9766))+(((-1.0)*x9769*x9770))+(((-1.0)*cj5*x9752*x9755))+(((-1.0)*x9752*x9765))+(((-1.0)*x9752*x9771))+(((-1.0)*x9773)));
evalcond[6]=(((x9751*x9757))+(((0.01)*x9763))+((x9758*x9759))+(((-1.0)*px))+x9774+(((-1.0)*x9754*x9761))+((sj1*x9774))+(((-1.0)*x9754*x9758))+((x9759*x9761))+(((0.37429)*x9767)));
evalcond[7]=((((0.37429)*x9753))+((x9750*x9757))+(((0.01)*x9765))+(((-1.0)*py))+(((-1.0)*x9754*x9764))+(((-1.0)*x9754*x9755))+((x9759*x9764))+(((0.069)*x9772))+((x9755*x9759))+(((0.069)*x9750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9775=(cj6*r01);
IkReal x9776=(cj5*sj4);
IkReal x9777=(r00*sj6);
CheckValue<IkReal> x9778=IKPowWithIntegerCheck(sj1,-1);
if(!x9778.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj6*r00))+((x9776*x9777))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x9775*x9776)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x9778.value)*((((sj5*x9775))+((sj5*x9777))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj6*r00))+((x9776*x9777))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x9775*x9776))))+IKsqr(((x9778.value)*((((sj5*x9775))+((sj5*x9777))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj6*r00))+((x9776*x9777))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x9775*x9776))), ((x9778.value)*((((sj5*x9775))+((sj5*x9777))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9779=IKsin(j0);
IkReal x9780=IKcos(j0);
IkReal x9781=((1.0)*sj4);
IkReal x9782=(cj5*r12);
IkReal x9783=((0.37429)*sj5);
IkReal x9784=(r10*sj6);
IkReal x9785=(r01*sj6);
IkReal x9786=((0.36442)*cj1);
IkReal x9787=(cj6*r01);
IkReal x9788=((0.01)*cj5);
IkReal x9789=(cj6*sj4);
IkReal x9790=(r00*sj6);
IkReal x9791=((1.0)*sj5);
IkReal x9792=(r02*sj5);
IkReal x9793=(cj6*r11);
IkReal x9794=(r12*sj5);
IkReal x9795=(cj4*cj6);
IkReal x9796=(cj5*r02);
IkReal x9797=(cj4*cj5);
IkReal x9798=((1.0)*cj4);
IkReal x9799=(r11*sj6);
IkReal x9800=(cj5*x9793);
IkReal x9801=(sj1*x9779);
IkReal x9802=((1.0)*x9780);
IkReal x9803=((0.069)*x9780);
evalcond[0]=((((-1.0)*x9791*x9793))+x9782+x9801+(((-1.0)*x9784*x9791)));
evalcond[1]=(((sj1*x9780))+(((-1.0)*x9790*x9791))+x9796+(((-1.0)*x9787*x9791)));
evalcond[2]=((((-1.0)*cj5*x9781*x9790))+(((-1.0)*cj5*x9781*x9787))+x9779+(((-1.0)*x9781*x9792))+((r00*x9795))+(((-1.0)*x9785*x9798)));
evalcond[3]=(((r00*x9789))+(((-1.0)*x9781*x9785))+(((-1.0)*cj1*x9802))+((x9787*x9797))+((x9790*x9797))+((cj4*x9792)));
evalcond[4]=(((x9793*x9797))+((x9784*x9797))+(((-1.0)*x9781*x9799))+((r10*x9789))+((cj4*x9794))+(((-1.0)*cj1*x9779)));
evalcond[5]=((((-1.0)*x9802))+((r10*x9795))+(((-1.0)*x9798*x9799))+(((-1.0)*x9781*x9800))+(((-1.0)*cj5*x9781*x9784))+(((-1.0)*x9781*x9794)));
evalcond[6]=(((x9788*x9790))+(((0.01)*x9792))+(((0.37429)*x9796))+((sj1*x9803))+(((-1.0)*px))+(((-1.0)*x9783*x9787))+((x9787*x9788))+x9803+(((-1.0)*x9783*x9790))+((x9780*x9786)));
evalcond[7]=(((x9788*x9793))+(((0.01)*x9794))+((x9779*x9786))+(((-1.0)*py))+(((-1.0)*x9783*x9784))+(((0.069)*x9801))+(((0.069)*x9779))+(((-1.0)*x9783*x9793))+((x9784*x9788))+(((0.37429)*x9782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9804=(cj6*sj5);
IkReal x9805=(sj5*sj6);
IkReal x9806=((1.0)*cj5);
CheckValue<IkReal> x9807=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x9807.valid){
continue;
}
CheckValue<IkReal> x9808 = IKatan2WithCheck(IkReal((((r10*x9805))+((r11*x9804))+(((-1.0)*r12*x9806)))),IkReal((((r00*x9805))+(((-1.0)*r02*x9806))+((r01*x9804)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9808.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9807.value)))+(x9808.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9809=IKsin(j0);
IkReal x9810=IKcos(j0);
IkReal x9811=((1.0)*sj4);
IkReal x9812=(cj5*r12);
IkReal x9813=((0.37429)*sj5);
IkReal x9814=(r10*sj6);
IkReal x9815=(r01*sj6);
IkReal x9816=((0.36442)*cj1);
IkReal x9817=(cj6*r01);
IkReal x9818=((0.01)*cj5);
IkReal x9819=(cj6*sj4);
IkReal x9820=(r00*sj6);
IkReal x9821=((1.0)*sj5);
IkReal x9822=(r02*sj5);
IkReal x9823=(cj6*r11);
IkReal x9824=(r12*sj5);
IkReal x9825=(cj4*cj6);
IkReal x9826=(cj5*r02);
IkReal x9827=(cj4*cj5);
IkReal x9828=((1.0)*cj4);
IkReal x9829=(r11*sj6);
IkReal x9830=(cj5*x9823);
IkReal x9831=(sj1*x9809);
IkReal x9832=((1.0)*x9810);
IkReal x9833=((0.069)*x9810);
evalcond[0]=((((-1.0)*x9821*x9823))+(((-1.0)*x9814*x9821))+x9812+x9831);
evalcond[1]=((((-1.0)*x9820*x9821))+((sj1*x9810))+x9826+(((-1.0)*x9817*x9821)));
evalcond[2]=((((-1.0)*cj5*x9811*x9817))+(((-1.0)*x9811*x9822))+((r00*x9825))+(((-1.0)*x9815*x9828))+(((-1.0)*cj5*x9811*x9820))+x9809);
evalcond[3]=((((-1.0)*cj1*x9832))+(((-1.0)*x9811*x9815))+((cj4*x9822))+((x9820*x9827))+((x9817*x9827))+((r00*x9819)));
evalcond[4]=(((x9814*x9827))+(((-1.0)*x9811*x9829))+((cj4*x9824))+(((-1.0)*cj1*x9809))+((x9823*x9827))+((r10*x9819)));
evalcond[5]=((((-1.0)*x9832))+(((-1.0)*cj5*x9811*x9814))+(((-1.0)*x9811*x9824))+(((-1.0)*x9828*x9829))+(((-1.0)*x9811*x9830))+((r10*x9825)));
evalcond[6]=(((x9818*x9820))+(((0.37429)*x9826))+(((-1.0)*x9813*x9820))+((x9817*x9818))+(((-1.0)*px))+((x9810*x9816))+((sj1*x9833))+(((-1.0)*x9813*x9817))+x9833+(((0.01)*x9822)));
evalcond[7]=(((x9809*x9816))+((x9818*x9823))+(((-1.0)*x9813*x9823))+(((-1.0)*py))+(((0.069)*x9831))+((x9814*x9818))+(((-1.0)*x9813*x9814))+(((0.069)*x9809))+(((0.37429)*x9812))+(((0.01)*x9824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x9843=IKPowWithIntegerCheck(cj1,-1);
if(!x9843.valid){
continue;
}
IkReal x9834=x9843.value;
IkReal x9835=(cj4*cj5);
IkReal x9836=(r00*sj2);
IkReal x9837=((1.0)*sj6);
IkReal x9838=(r01*sj4);
IkReal x9839=(cj1*sj5);
IkReal x9840=(cj6*r01);
IkReal x9841=(cj6*sj4);
IkReal x9842=(cj4*r02*sj5);
CheckValue<IkReal> x9844=IKPowWithIntegerCheck(cj2,-1);
if(!x9844.valid){
continue;
}
CheckValue<IkReal> x9845=IKPowWithIntegerCheck(sj1,-1);
if(!x9845.valid){
continue;
}
if( IKabs((x9834*(x9844.value)*(x9845.value)*((((cj1*cj5*r12))+(((-1.0)*sj2*x9837*x9838))+((x9836*x9841))+(((-1.0)*cj6*r11*x9839))+((sj6*x9835*x9836))+(((-1.0)*r10*x9837*x9839))+((sj2*x9842))+((sj2*x9835*x9840)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9834*(((((-1.0)*x9837*x9838))+((x9835*x9840))+((r00*x9841))+((r00*sj6*x9835))+x9842)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9834*(x9844.value)*(x9845.value)*((((cj1*cj5*r12))+(((-1.0)*sj2*x9837*x9838))+((x9836*x9841))+(((-1.0)*cj6*r11*x9839))+((sj6*x9835*x9836))+(((-1.0)*r10*x9837*x9839))+((sj2*x9842))+((sj2*x9835*x9840))))))+IKsqr((x9834*(((((-1.0)*x9837*x9838))+((x9835*x9840))+((r00*x9841))+((r00*sj6*x9835))+x9842))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x9834*(x9844.value)*(x9845.value)*((((cj1*cj5*r12))+(((-1.0)*sj2*x9837*x9838))+((x9836*x9841))+(((-1.0)*cj6*r11*x9839))+((sj6*x9835*x9836))+(((-1.0)*r10*x9837*x9839))+((sj2*x9842))+((sj2*x9835*x9840))))), (x9834*(((((-1.0)*x9837*x9838))+((x9835*x9840))+((r00*x9841))+((r00*sj6*x9835))+x9842))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9846=IKsin(j0);
IkReal x9847=IKcos(j0);
IkReal x9848=((1.0)*sj4);
IkReal x9849=(cj5*r12);
IkReal x9850=((0.37429)*sj5);
IkReal x9851=(r10*sj6);
IkReal x9852=((0.36442)*cj1);
IkReal x9853=(cj6*r11);
IkReal x9854=(r01*sj6);
IkReal x9855=(r00*sj6);
IkReal x9856=((0.069)*sj2);
IkReal x9857=(cj6*r01);
IkReal x9858=((0.01)*cj5);
IkReal x9859=(r12*sj5);
IkReal x9860=((1.0)*sj5);
IkReal x9861=(cj6*r10);
IkReal x9862=(r02*sj5);
IkReal x9863=((1.0)*sj1);
IkReal x9864=((1.0)*cj1);
IkReal x9865=(cj5*r02);
IkReal x9866=(cj4*cj5);
IkReal x9867=(cj6*r00);
IkReal x9868=((1.0)*cj4);
IkReal x9869=(r11*sj6);
IkReal x9870=(cj5*x9853);
IkReal x9871=(cj2*x9847);
IkReal x9872=((0.069)*x9846);
IkReal x9873=(sj2*x9847);
IkReal x9874=((1.0)*x9846);
evalcond[0]=((((-1.0)*cj2*x9846*x9863))+(((-1.0)*x9851*x9860))+x9849+x9873+(((-1.0)*x9853*x9860)));
evalcond[1]=((((-1.0)*x9863*x9871))+(((-1.0)*x9857*x9860))+(((-1.0)*sj2*x9874))+(((-1.0)*x9855*x9860))+x9865);
evalcond[2]=((((-1.0)*x9848*x9854))+(((-1.0)*x9847*x9864))+((x9855*x9866))+((cj4*x9862))+((sj4*x9867))+((x9857*x9866)));
evalcond[3]=((((-1.0)*x9846*x9864))+((x9851*x9866))+((cj4*x9859))+((x9853*x9866))+((sj4*x9861))+(((-1.0)*x9848*x9869)));
evalcond[4]=((((-1.0)*x9848*x9859))+(((-1.0)*x9848*x9870))+(((-1.0)*x9868*x9869))+(((-1.0)*cj5*x9848*x9851))+((sj1*sj2*x9846))+((cj4*x9861))+x9871);
evalcond[5]=((((-1.0)*cj5*x9848*x9855))+(((-1.0)*cj5*x9848*x9857))+((sj1*x9873))+((cj4*x9867))+(((-1.0)*cj2*x9874))+(((-1.0)*x9848*x9862))+(((-1.0)*x9854*x9868)));
evalcond[6]=(((x9847*x9852))+((x9855*x9858))+((x9857*x9858))+(((-1.0)*x9850*x9855))+(((-1.0)*x9850*x9857))+(((-1.0)*px))+(((-0.069)*sj1*x9871))+(((0.01)*x9862))+(((-1.0)*x9846*x9856))+(((0.37429)*x9865))+(((0.069)*x9847)));
evalcond[7]=(((x9847*x9856))+((x9846*x9852))+(((-1.0)*x9850*x9853))+(((-1.0)*x9850*x9851))+(((0.37429)*x9849))+(((0.01)*x9859))+(((-1.0)*py))+(((-1.0)*cj2*sj1*x9872))+((x9851*x9858))+x9872+((x9853*x9858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x9884=IKPowWithIntegerCheck(cj1,-1);
if(!x9884.valid){
continue;
}
IkReal x9875=x9884.value;
IkReal x9876=(cj4*cj5);
IkReal x9877=(cj6*r11);
IkReal x9878=(r10*sj6);
IkReal x9879=(cj1*sj5);
IkReal x9880=(cj2*sj1);
IkReal x9881=(cj6*r10*sj4);
IkReal x9882=(cj4*r12*sj5);
IkReal x9883=((1.0)*r11*sj4*sj6);
CheckValue<IkReal> x9885=IKPowWithIntegerCheck(sj2,-1);
if(!x9885.valid){
continue;
}
if( IKabs((x9875*((((x9876*x9877))+((x9876*x9878))+(((-1.0)*x9883))+x9882+x9881)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x9875*(x9885.value)*((((x9877*x9879))+((x9876*x9878*x9880))+((x9876*x9877*x9880))+(((-1.0)*cj1*cj5*r12))+((x9880*x9882))+((x9880*x9881))+((x9878*x9879))+(((-1.0)*x9880*x9883)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x9875*((((x9876*x9877))+((x9876*x9878))+(((-1.0)*x9883))+x9882+x9881))))+IKsqr((x9875*(x9885.value)*((((x9877*x9879))+((x9876*x9878*x9880))+((x9876*x9877*x9880))+(((-1.0)*cj1*cj5*r12))+((x9880*x9882))+((x9880*x9881))+((x9878*x9879))+(((-1.0)*x9880*x9883))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x9875*((((x9876*x9877))+((x9876*x9878))+(((-1.0)*x9883))+x9882+x9881))), (x9875*(x9885.value)*((((x9877*x9879))+((x9876*x9878*x9880))+((x9876*x9877*x9880))+(((-1.0)*cj1*cj5*r12))+((x9880*x9882))+((x9880*x9881))+((x9878*x9879))+(((-1.0)*x9880*x9883))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9886=IKsin(j0);
IkReal x9887=IKcos(j0);
IkReal x9888=((1.0)*sj4);
IkReal x9889=(cj5*r12);
IkReal x9890=((0.37429)*sj5);
IkReal x9891=(r10*sj6);
IkReal x9892=((0.36442)*cj1);
IkReal x9893=(cj6*r11);
IkReal x9894=(r01*sj6);
IkReal x9895=(r00*sj6);
IkReal x9896=((0.069)*sj2);
IkReal x9897=(cj6*r01);
IkReal x9898=((0.01)*cj5);
IkReal x9899=(r12*sj5);
IkReal x9900=((1.0)*sj5);
IkReal x9901=(cj6*r10);
IkReal x9902=(r02*sj5);
IkReal x9903=((1.0)*sj1);
IkReal x9904=((1.0)*cj1);
IkReal x9905=(cj5*r02);
IkReal x9906=(cj4*cj5);
IkReal x9907=(cj6*r00);
IkReal x9908=((1.0)*cj4);
IkReal x9909=(r11*sj6);
IkReal x9910=(cj5*x9893);
IkReal x9911=(cj2*x9887);
IkReal x9912=((0.069)*x9886);
IkReal x9913=(sj2*x9887);
IkReal x9914=((1.0)*x9886);
evalcond[0]=((((-1.0)*x9891*x9900))+(((-1.0)*x9893*x9900))+(((-1.0)*cj2*x9886*x9903))+x9913+x9889);
evalcond[1]=((((-1.0)*x9895*x9900))+x9905+(((-1.0)*sj2*x9914))+(((-1.0)*x9903*x9911))+(((-1.0)*x9897*x9900)));
evalcond[2]=((((-1.0)*x9888*x9894))+((x9895*x9906))+(((-1.0)*x9887*x9904))+((cj4*x9902))+((sj4*x9907))+((x9897*x9906)));
evalcond[3]=(((x9893*x9906))+(((-1.0)*x9888*x9909))+((sj4*x9901))+((cj4*x9899))+((x9891*x9906))+(((-1.0)*x9886*x9904)));
evalcond[4]=((((-1.0)*x9888*x9899))+(((-1.0)*x9888*x9910))+((cj4*x9901))+(((-1.0)*x9908*x9909))+(((-1.0)*cj5*x9888*x9891))+x9911+((sj1*sj2*x9886)));
evalcond[5]=(((cj4*x9907))+(((-1.0)*cj2*x9914))+(((-1.0)*x9888*x9902))+(((-1.0)*cj5*x9888*x9895))+(((-1.0)*cj5*x9888*x9897))+(((-1.0)*x9894*x9908))+((sj1*x9913)));
evalcond[6]=((((0.01)*x9902))+(((-0.069)*sj1*x9911))+(((0.069)*x9887))+(((0.37429)*x9905))+(((-1.0)*px))+((x9897*x9898))+(((-1.0)*x9890*x9897))+(((-1.0)*x9890*x9895))+(((-1.0)*x9886*x9896))+((x9887*x9892))+((x9895*x9898)));
evalcond[7]=((((-1.0)*cj2*sj1*x9912))+(((0.37429)*x9889))+(((-1.0)*py))+((x9886*x9892))+(((-1.0)*x9890*x9893))+(((-1.0)*x9890*x9891))+(((0.01)*x9899))+x9912+((x9887*x9896))+((x9893*x9898))+((x9891*x9898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9915=(cj2*sj1);
IkReal x9916=(cj5*r02);
IkReal x9917=(cj6*sj5);
IkReal x9918=((1.0)*r01);
IkReal x9919=(cj5*r12);
IkReal x9920=((1.0)*r00);
IkReal x9921=(sj5*sj6);
IkReal x9922=(sj2*x9921);
CheckValue<IkReal> x9923=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x9923.valid){
continue;
}
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal((((sj2*x9916))+(((-1.0)*r11*x9915*x9917))+(((-1.0)*x9920*x9922))+(((-1.0)*r10*x9915*x9921))+(((-1.0)*sj2*x9917*x9918))+((x9915*x9919)))),IkReal((((r10*x9922))+(((-1.0)*sj2*x9919))+(((-1.0)*x9915*x9920*x9921))+(((-1.0)*x9915*x9917*x9918))+((r11*sj2*x9917))+((x9915*x9916)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9923.value)))+(x9924.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x9925=IKsin(j0);
IkReal x9926=IKcos(j0);
IkReal x9927=((1.0)*sj4);
IkReal x9928=(cj5*r12);
IkReal x9929=((0.37429)*sj5);
IkReal x9930=(r10*sj6);
IkReal x9931=((0.36442)*cj1);
IkReal x9932=(cj6*r11);
IkReal x9933=(r01*sj6);
IkReal x9934=(r00*sj6);
IkReal x9935=((0.069)*sj2);
IkReal x9936=(cj6*r01);
IkReal x9937=((0.01)*cj5);
IkReal x9938=(r12*sj5);
IkReal x9939=((1.0)*sj5);
IkReal x9940=(cj6*r10);
IkReal x9941=(r02*sj5);
IkReal x9942=((1.0)*sj1);
IkReal x9943=((1.0)*cj1);
IkReal x9944=(cj5*r02);
IkReal x9945=(cj4*cj5);
IkReal x9946=(cj6*r00);
IkReal x9947=((1.0)*cj4);
IkReal x9948=(r11*sj6);
IkReal x9949=(cj5*x9932);
IkReal x9950=(cj2*x9926);
IkReal x9951=((0.069)*x9925);
IkReal x9952=(sj2*x9926);
IkReal x9953=((1.0)*x9925);
evalcond[0]=((((-1.0)*cj2*x9925*x9942))+(((-1.0)*x9930*x9939))+x9952+x9928+(((-1.0)*x9932*x9939)));
evalcond[1]=((((-1.0)*x9936*x9939))+(((-1.0)*sj2*x9953))+(((-1.0)*x9934*x9939))+(((-1.0)*x9942*x9950))+x9944);
evalcond[2]=(((x9936*x9945))+(((-1.0)*x9927*x9933))+((x9934*x9945))+(((-1.0)*x9926*x9943))+((sj4*x9946))+((cj4*x9941)));
evalcond[3]=(((x9932*x9945))+((cj4*x9938))+(((-1.0)*x9927*x9948))+((x9930*x9945))+(((-1.0)*x9925*x9943))+((sj4*x9940)));
evalcond[4]=((((-1.0)*x9947*x9948))+(((-1.0)*cj5*x9927*x9930))+(((-1.0)*x9927*x9938))+((sj1*sj2*x9925))+x9950+(((-1.0)*x9927*x9949))+((cj4*x9940)));
evalcond[5]=((((-1.0)*cj5*x9927*x9934))+(((-1.0)*cj5*x9927*x9936))+(((-1.0)*cj2*x9953))+(((-1.0)*x9933*x9947))+((sj1*x9952))+(((-1.0)*x9927*x9941))+((cj4*x9946)));
evalcond[6]=((((0.01)*x9941))+(((-1.0)*x9925*x9935))+((x9926*x9931))+((x9936*x9937))+(((0.069)*x9926))+(((-1.0)*px))+(((-0.069)*sj1*x9950))+(((-1.0)*x9929*x9936))+(((-1.0)*x9929*x9934))+(((0.37429)*x9944))+((x9934*x9937)));
evalcond[7]=(((x9925*x9931))+((x9926*x9935))+(((0.01)*x9938))+(((-1.0)*py))+((x9930*x9937))+(((-1.0)*cj2*sj1*x9951))+(((0.37429)*x9928))+(((-1.0)*x9929*x9932))+(((-1.0)*x9929*x9930))+x9951+((x9932*x9937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9954=(cj2*sj1);
IkReal x9955=(cj5*r02);
IkReal x9956=(cj6*sj5);
IkReal x9957=((1.0)*r01);
IkReal x9958=(cj5*r12);
IkReal x9959=((1.0)*r00);
IkReal x9960=(sj5*sj6);
IkReal x9961=(sj2*x9960);
CheckValue<IkReal> x9962=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x9962.valid){
continue;
}
CheckValue<IkReal> x9963 = IKatan2WithCheck(IkReal((((sj2*x9955))+((x9954*x9958))+(((-1.0)*r10*x9954*x9960))+(((-1.0)*sj2*x9956*x9957))+(((-1.0)*r11*x9954*x9956))+(((-1.0)*x9959*x9961)))),IkReal((((r10*x9961))+((x9954*x9955))+(((-1.0)*sj2*x9958))+(((-1.0)*x9954*x9956*x9957))+((r11*sj2*x9956))+(((-1.0)*x9954*x9959*x9960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9963.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9962.value)))+(x9963.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x9964=IKsin(j0);
IkReal x9965=IKcos(j0);
IkReal x9966=((0.01)*cj5);
IkReal x9967=(cj6*r11);
IkReal x9968=(cj5*r12);
IkReal x9969=(r10*sj6);
IkReal x9970=((0.37429)*sj5);
IkReal x9971=((0.36442)*cj1);
IkReal x9972=((1.0)*sj5);
IkReal x9973=(r00*sj6);
IkReal x9974=(cj6*r01);
IkReal x9975=(cj2*sj1);
IkReal x9976=(cj5*r02);
IkReal x9977=((0.01)*sj5);
IkReal x9978=((0.069)*x9964);
IkReal x9979=((0.069)*x9965);
IkReal x9980=((1.0)*x9964);
evalcond[0]=((((-1.0)*x9967*x9972))+(((-1.0)*x9969*x9972))+(((-1.0)*x9975*x9980))+x9968+((sj2*x9965)));
evalcond[1]=((((-1.0)*x9965*x9975))+x9976+(((-1.0)*sj2*x9980))+(((-1.0)*x9972*x9974))+(((-1.0)*x9972*x9973)));
evalcond[2]=((((-1.0)*x9975*x9979))+(((-1.0)*x9970*x9973))+(((-1.0)*x9970*x9974))+(((-1.0)*px))+((r02*x9977))+(((-1.0)*sj2*x9978))+((x9966*x9973))+((x9966*x9974))+((x9965*x9971))+x9979+(((0.37429)*x9976)));
evalcond[3]=((((-1.0)*x9975*x9978))+(((-1.0)*x9967*x9970))+((x9966*x9967))+((x9966*x9969))+(((-1.0)*x9969*x9970))+((sj2*x9979))+((r12*x9977))+(((0.37429)*x9968))+(((-1.0)*py))+((x9964*x9971))+x9978);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9981=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9981;
j4eval[1]=IKsign(x9981);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9982=((1.0)*sj5);
IkReal x9983=((((-1.0)*r00*sj6*x9982))+(((-1.0)*cj6*r01*x9982))+((cj5*r02)));
j4eval[0]=x9983;
j4eval[1]=IKsign(x9983);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9984=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9984;
j4eval[1]=IKsign(x9984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9985=(cj1*sj0);
IkReal x9986=(cj0*cj1);
IkReal x9987=(cj5*cj6);
IkReal x9988=((1.0)*sj6);
CheckValue<IkReal> x9989=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9989.valid){
continue;
}
CheckValue<IkReal> x9990 = IKatan2WithCheck(IkReal((((cj5*r00*sj6*x9985))+((r01*x9985*x9987))+(((-1.0)*r12*sj5*x9986))+(((-1.0)*cj5*r10*x9986*x9988))+((r02*sj5*x9985))+(((-1.0)*r11*x9986*x9987)))),IkReal(((((-1.0)*cj6*r00*x9985))+(((-1.0)*r11*x9986*x9988))+((r01*sj6*x9985))+((cj6*r10*x9986)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9989.value)))+(x9990.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9991=IKcos(j4);
IkReal x9992=IKsin(j4);
IkReal x9993=((1.0)*cj1);
IkReal x9994=(sj1*sj2);
IkReal x9995=(r10*sj6);
IkReal x9996=(r00*sj6);
IkReal x9997=((1.0)*sj6);
IkReal x9998=(r20*sj6);
IkReal x9999=(cj6*x9991);
IkReal x10000=(sj5*x9991);
IkReal x10001=(cj6*x9992);
IkReal x10002=(cj5*x9991);
IkReal x10003=(cj5*x9999);
IkReal x10004=((1.0)*sj5*x9992);
IkReal x10005=((1.0)*cj5*x9992);
evalcond[0]=(sj1+((r22*x10000))+((x10002*x9998))+(((-1.0)*r21*x9992*x9997))+((r20*x10001))+((r21*x10003)));
evalcond[1]=(((r02*x10000))+((x10002*x9996))+(((-1.0)*cj0*x9993))+((r01*x10003))+((r00*x10001))+(((-1.0)*r01*x9992*x9997)));
evalcond[2]=(((r12*x10000))+((x10002*x9995))+((r10*x10001))+((r11*x10003))+(((-1.0)*sj0*x9993))+(((-1.0)*r11*x9992*x9997)));
evalcond[3]=((((-1.0)*r21*x9991*x9997))+(((-1.0)*cj5*r21*x10001))+((cj1*sj2))+(((-1.0)*r22*x10004))+(((-1.0)*cj5*r20*x9992*x9997))+((r20*x9999)));
evalcond[4]=(((r10*x9999))+((sj0*x9994))+((cj0*cj2))+(((-1.0)*x10005*x9995))+(((-1.0)*r12*x10004))+(((-1.0)*r11*x9991*x9997))+(((-1.0)*cj5*r11*x10001)));
evalcond[5]=((((-1.0)*cj5*r01*x10001))+((r00*x9999))+(((-1.0)*r02*x10004))+(((-1.0)*cj2*sj0))+(((-1.0)*x10005*x9996))+((cj0*x9994))+(((-1.0)*r01*x9991*x9997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10006=(sj1*sj6);
IkReal x10007=((1.0)*cj6);
IkReal x10008=(cj1*sj0);
IkReal x10009=(cj5*cj6);
IkReal x10010=(r20*x10008);
CheckValue<IkReal> x10011 = IKatan2WithCheck(IkReal((((cj5*sj6*x10010))+((cj5*r10*x10006))+((r11*sj1*x10009))+((r12*sj1*sj5))+((r21*x10008*x10009))+((r22*sj5*x10008)))),IkReal((((r21*sj6*x10008))+(((-1.0)*x10007*x10010))+((r11*x10006))+(((-1.0)*r10*sj1*x10007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10011.valid){
continue;
}
CheckValue<IkReal> x10012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10007))+((cj5*r02)))),-1);
if(!x10012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10011.value)+(((1.5707963267949)*(x10012.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10013=IKcos(j4);
IkReal x10014=IKsin(j4);
IkReal x10015=((1.0)*cj1);
IkReal x10016=(sj1*sj2);
IkReal x10017=(r10*sj6);
IkReal x10018=(r00*sj6);
IkReal x10019=((1.0)*sj6);
IkReal x10020=(r20*sj6);
IkReal x10021=(cj6*x10013);
IkReal x10022=(sj5*x10013);
IkReal x10023=(cj6*x10014);
IkReal x10024=(cj5*x10013);
IkReal x10025=(cj5*x10021);
IkReal x10026=((1.0)*sj5*x10014);
IkReal x10027=((1.0)*cj5*x10014);
evalcond[0]=((((-1.0)*r21*x10014*x10019))+sj1+((x10020*x10024))+((r21*x10025))+((r20*x10023))+((r22*x10022)));
evalcond[1]=(((x10018*x10024))+((r01*x10025))+(((-1.0)*cj0*x10015))+((r00*x10023))+((r02*x10022))+(((-1.0)*r01*x10014*x10019)));
evalcond[2]=(((x10017*x10024))+(((-1.0)*sj0*x10015))+((r10*x10023))+((r11*x10025))+((r12*x10022))+(((-1.0)*r11*x10014*x10019)));
evalcond[3]=((((-1.0)*cj5*r21*x10023))+(((-1.0)*r21*x10013*x10019))+((cj1*sj2))+(((-1.0)*r22*x10026))+((r20*x10021))+(((-1.0)*cj5*r20*x10014*x10019)));
evalcond[4]=((((-1.0)*r12*x10026))+(((-1.0)*x10017*x10027))+((cj0*cj2))+((r10*x10021))+(((-1.0)*cj5*r11*x10023))+(((-1.0)*r11*x10013*x10019))+((sj0*x10016)));
evalcond[5]=(((cj0*x10016))+(((-1.0)*r02*x10026))+(((-1.0)*cj2*sj0))+(((-1.0)*x10018*x10027))+(((-1.0)*cj5*r01*x10023))+((r00*x10021))+(((-1.0)*r01*x10013*x10019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10028=(cj0*cj1);
IkReal x10029=(cj5*cj6);
IkReal x10030=(cj5*sj6);
IkReal x10031=(r00*sj1);
IkReal x10032=((1.0)*cj6);
IkReal x10033=(r01*sj1);
CheckValue<IkReal> x10034 = IKatan2WithCheck(IkReal((((r21*x10028*x10029))+((x10029*x10033))+((r20*x10028*x10030))+((x10030*x10031))+((r02*sj1*sj5))+((r22*sj5*x10028)))),IkReal((((sj6*x10033))+(((-1.0)*x10031*x10032))+((r21*sj6*x10028))+(((-1.0)*r20*x10028*x10032)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10034.valid){
continue;
}
CheckValue<IkReal> x10035=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10034.value)+(((1.5707963267949)*(x10035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10036=IKcos(j4);
IkReal x10037=IKsin(j4);
IkReal x10038=((1.0)*cj1);
IkReal x10039=(sj1*sj2);
IkReal x10040=(r10*sj6);
IkReal x10041=(r00*sj6);
IkReal x10042=((1.0)*sj6);
IkReal x10043=(r20*sj6);
IkReal x10044=(cj6*x10036);
IkReal x10045=(sj5*x10036);
IkReal x10046=(cj6*x10037);
IkReal x10047=(cj5*x10036);
IkReal x10048=(cj5*x10044);
IkReal x10049=((1.0)*sj5*x10037);
IkReal x10050=((1.0)*cj5*x10037);
evalcond[0]=(sj1+((r21*x10048))+(((-1.0)*r21*x10037*x10042))+((x10043*x10047))+((r20*x10046))+((r22*x10045)));
evalcond[1]=(((r00*x10046))+(((-1.0)*cj0*x10038))+((r01*x10048))+((x10041*x10047))+(((-1.0)*r01*x10037*x10042))+((r02*x10045)));
evalcond[2]=(((r10*x10046))+((r12*x10045))+((x10040*x10047))+((r11*x10048))+(((-1.0)*sj0*x10038))+(((-1.0)*r11*x10037*x10042)));
evalcond[3]=((((-1.0)*r21*x10036*x10042))+(((-1.0)*cj5*r20*x10037*x10042))+(((-1.0)*cj5*r21*x10046))+((cj1*sj2))+(((-1.0)*r22*x10049))+((r20*x10044)));
evalcond[4]=((((-1.0)*r12*x10049))+((r10*x10044))+((sj0*x10039))+((cj0*cj2))+(((-1.0)*cj5*r11*x10046))+(((-1.0)*x10040*x10050))+(((-1.0)*r11*x10036*x10042)));
evalcond[5]=((((-1.0)*r02*x10049))+(((-1.0)*r01*x10036*x10042))+((cj0*x10039))+(((-1.0)*cj2*sj0))+(((-1.0)*cj5*r01*x10046))+((r00*x10044))+(((-1.0)*x10041*x10050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x10051=((1.0)*cj6*sj5);
IkReal x10052=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x10051))+(((-1.0)*r10*x10052)))))+(IKabs(((((-1.0)*r01*x10051))+(((-1.0)*r00*x10052))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x10053=cj5*cj5;
IkReal x10054=cj6*cj6;
IkReal x10055=r22*r22;
IkReal x10056=r21*r21;
IkReal x10057=r20*r20;
IkReal x10058=(cj6*r21);
IkReal x10059=(r20*sj6);
IkReal x10060=(cj1*cj2);
IkReal x10061=(r22*sj5);
IkReal x10062=(cj6*r20);
IkReal x10063=((2.0)*cj5);
IkReal x10064=(cj1*sj2);
IkReal x10065=((1.0)*x10056);
IkReal x10066=((1.0)*x10057);
IkReal x10067=((1.0)*r21*sj6);
IkReal x10068=((1.0)*cj5*x10064);
IkReal x10069=(x10053*x10054);
IkReal x10070=((((-1.0)*x10055))+(((2.0)*x10058*x10059))+(((-1.0)*x10058*x10061*x10063))+(((-1.0)*x10065))+(((-1.0)*x10059*x10061*x10063))+(((-1.0)*x10053*x10066))+((x10054*x10056))+((x10057*x10069))+(((-2.0)*x10053*x10058*x10059))+((x10053*x10055))+(((-1.0)*x10054*x10066))+(((-1.0)*x10065*x10069)));
j4eval[0]=x10070;
j4eval[1]=((IKabs((((x10060*x10061))+(((-1.0)*x10064*x10067))+((cj5*x10058*x10060))+((x10062*x10064))+((cj5*x10059*x10060)))))+(IKabs((((x10060*x10062))+(((-1.0)*x10059*x10068))+(((-1.0)*x10060*x10067))+(((-1.0)*x10061*x10064))+(((-1.0)*x10058*x10068))))));
j4eval[2]=IKsign(x10070);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(cj1+(((-1.0)*cj1*cj2*sj1))+(((5.28144927536232)*(cj1*cj1))));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((9522.0)+(((-9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x10071=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*cj6*x10071)))))+(IKabs(((((-1.0)*sj6*x10071))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x10072=((1.0)*cj5);
j4eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x10072))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x10072))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x10073=((1.0)*cj5);
CheckValue<IkReal> x10075 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x10073))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x10073)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10075.valid){
continue;
}
IkReal x10074=x10075.value;
j4array[0]=((-1.0)*x10074);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x10074)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x10076=IKsin(j4);
IkReal x10077=IKcos(j4);
IkReal x10078=((1.0)*x10076);
evalcond[0]=((((-1.0)*r21*sj6*x10077))+(((-1.0)*cj5*cj6*r21*x10078))+(((-1.0)*r22*sj5*x10078))+((cj6*r20*x10077))+(((-1.0)*cj5*r20*sj6*x10078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10079=(cj6*r10);
IkReal x10080=(sj2*sj4);
IkReal x10081=(r12*sj5);
IkReal x10082=(r01*sj6);
IkReal x10083=(cj2*r11);
IkReal x10084=(cj4*sj6);
IkReal x10085=((1.0)*cj6);
IkReal x10086=(cj4*r00);
IkReal x10087=(cj5*sj6);
IkReal x10088=(cj5*cj6);
IkReal x10089=(cj2*sj4);
IkReal x10090=(r02*sj5);
IkReal x10091=(cj4*sj2);
IkReal x10092=((1.0)*cj2*cj4);
if( IKabs((((r10*x10080*x10087))+(((-1.0)*x10089*x10090))+(((-1.0)*x10079*x10091))+((r11*x10080*x10088))+((cj2*cj6*x10086))+(((-1.0)*r00*x10087*x10089))+((x10080*x10081))+(((-1.0)*x10082*x10092))+((r11*sj2*x10084))+(((-1.0)*cj5*r01*x10085*x10089)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x10080*x10088))+(((-1.0)*x10079*x10092))+(((-1.0)*sj2*x10085*x10086))+((r00*x10080*x10087))+((x10080*x10090))+((x10082*x10091))+((x10083*x10084))+((x10081*x10089))+((r10*x10087*x10089))+((sj4*x10083*x10088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x10080*x10087))+(((-1.0)*x10089*x10090))+(((-1.0)*x10079*x10091))+((r11*x10080*x10088))+((cj2*cj6*x10086))+(((-1.0)*r00*x10087*x10089))+((x10080*x10081))+(((-1.0)*x10082*x10092))+((r11*sj2*x10084))+(((-1.0)*cj5*r01*x10085*x10089))))+IKsqr((((r01*x10080*x10088))+(((-1.0)*x10079*x10092))+(((-1.0)*sj2*x10085*x10086))+((r00*x10080*x10087))+((x10080*x10090))+((x10082*x10091))+((x10083*x10084))+((x10081*x10089))+((r10*x10087*x10089))+((sj4*x10083*x10088))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x10080*x10087))+(((-1.0)*x10089*x10090))+(((-1.0)*x10079*x10091))+((r11*x10080*x10088))+((cj2*cj6*x10086))+(((-1.0)*r00*x10087*x10089))+((x10080*x10081))+(((-1.0)*x10082*x10092))+((r11*sj2*x10084))+(((-1.0)*cj5*r01*x10085*x10089))), (((r01*x10080*x10088))+(((-1.0)*x10079*x10092))+(((-1.0)*sj2*x10085*x10086))+((r00*x10080*x10087))+((x10080*x10090))+((x10082*x10091))+((x10083*x10084))+((x10081*x10089))+((r10*x10087*x10089))+((sj4*x10083*x10088))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x10093=IKcos(j0);
IkReal x10094=IKsin(j0);
IkReal x10095=((1.0)*sj4);
IkReal x10096=((0.37429)*sj5);
IkReal x10097=(r10*sj6);
IkReal x10098=(cj6*r00);
IkReal x10099=((0.37429)*cj5);
IkReal x10100=(cj6*r01);
IkReal x10101=((0.01)*cj5);
IkReal x10102=((1.0)*cj4);
IkReal x10103=(r00*sj6);
IkReal x10104=(r02*sj5);
IkReal x10105=(r12*sj5);
IkReal x10106=(cj6*r10);
IkReal x10107=(r01*sj6);
IkReal x10108=(r11*sj6);
IkReal x10109=(sj2*x10093);
IkReal x10110=(cj5*cj6*r11);
IkReal x10111=((0.069)*x10094);
IkReal x10112=(cj2*x10093);
IkReal x10113=((0.069)*x10093);
IkReal x10114=(sj2*x10094);
IkReal x10115=((1.0)*cj2*x10094);
evalcond[0]=((((-1.0)*cj5*x10095*x10097))+((cj4*x10106))+(((-1.0)*x10102*x10108))+x10114+x10112+(((-1.0)*x10095*x10105))+(((-1.0)*x10095*x10110)));
evalcond[1]=((((-1.0)*x10102*x10107))+x10109+(((-1.0)*x10095*x10104))+((cj4*x10098))+(((-1.0)*cj5*x10095*x10100))+(((-1.0)*cj5*x10095*x10103))+(((-1.0)*x10115)));
evalcond[2]=((((-1.0)*cj5*x10097*x10102))+((sj4*x10108))+(((-1.0)*x10102*x10105))+x10109+(((-1.0)*x10095*x10106))+(((-1.0)*x10102*x10110))+(((-1.0)*x10115)));
evalcond[3]=((((-1.0)*x10095*x10098))+(((-1.0)*x10112))+(((-1.0)*x10114))+(((-1.0)*cj5*x10102*x10103))+((sj4*x10107))+(((-1.0)*cj5*x10100*x10102))+(((-1.0)*x10102*x10104)));
evalcond[4]=(((x10101*x10103))+(((0.01)*x10104))+((r02*x10099))+x10113+(((-1.0)*px))+(((-0.069)*x10112))+(((-1.0)*sj2*x10111))+(((-1.0)*x10096*x10100))+(((-1.0)*x10096*x10103))+((x10100*x10101)));
evalcond[5]=((((-1.0)*cj6*r11*x10096))+((r12*x10099))+(((-1.0)*x10096*x10097))+(((0.01)*x10105))+x10111+(((-1.0)*py))+((x10097*x10101))+((cj6*r11*x10101))+(((-1.0)*cj2*x10111))+(((0.069)*x10109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x10116=((1.0)*cj5);
CheckValue<IkReal> x10118 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((((-1.0)*cj6*r21*x10116))+(((-1.0)*r22*sj5))+(((-1.0)*r20*sj6*x10116)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10118.valid){
continue;
}
IkReal x10117=x10118.value;
j4array[0]=((-1.0)*x10117);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x10117)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x10119=IKsin(j4);
IkReal x10120=IKcos(j4);
IkReal x10121=((1.0)*cj6);
IkReal x10122=(cj5*x10120);
evalcond[0]=((((-1.0)*r20*x10119*x10121))+(((-1.0)*r22*sj5*x10120))+(((-1.0)*r21*x10121*x10122))+(((-1.0)*r20*sj6*x10122))+((r21*sj6*x10119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10123=(cj6*r10);
IkReal x10124=(sj2*sj4);
IkReal x10125=(r12*sj5);
IkReal x10126=(r01*sj6);
IkReal x10127=(cj2*r11);
IkReal x10128=(cj4*sj6);
IkReal x10129=((1.0)*cj6);
IkReal x10130=(cj4*r00);
IkReal x10131=(cj5*sj6);
IkReal x10132=(cj5*cj6);
IkReal x10133=(cj2*sj4);
IkReal x10134=(r02*sj5);
IkReal x10135=(cj4*sj2);
IkReal x10136=((1.0)*cj2*cj4);
if( IKabs((((r11*sj2*x10128))+(((-1.0)*cj5*r01*x10129*x10133))+((r11*x10124*x10132))+(((-1.0)*r00*x10131*x10133))+((x10124*x10125))+(((-1.0)*x10123*x10135))+(((-1.0)*x10126*x10136))+((cj2*cj6*x10130))+(((-1.0)*x10133*x10134))+((r10*x10124*x10131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x10123*x10136))+((x10126*x10135))+((x10124*x10134))+((x10127*x10128))+((r00*x10124*x10131))+((x10125*x10133))+((r01*x10124*x10132))+((sj4*x10127*x10132))+(((-1.0)*sj2*x10129*x10130))+((r10*x10131*x10133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj2*x10128))+(((-1.0)*cj5*r01*x10129*x10133))+((r11*x10124*x10132))+(((-1.0)*r00*x10131*x10133))+((x10124*x10125))+(((-1.0)*x10123*x10135))+(((-1.0)*x10126*x10136))+((cj2*cj6*x10130))+(((-1.0)*x10133*x10134))+((r10*x10124*x10131))))+IKsqr(((((-1.0)*x10123*x10136))+((x10126*x10135))+((x10124*x10134))+((x10127*x10128))+((r00*x10124*x10131))+((x10125*x10133))+((r01*x10124*x10132))+((sj4*x10127*x10132))+(((-1.0)*sj2*x10129*x10130))+((r10*x10131*x10133))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*sj2*x10128))+(((-1.0)*cj5*r01*x10129*x10133))+((r11*x10124*x10132))+(((-1.0)*r00*x10131*x10133))+((x10124*x10125))+(((-1.0)*x10123*x10135))+(((-1.0)*x10126*x10136))+((cj2*cj6*x10130))+(((-1.0)*x10133*x10134))+((r10*x10124*x10131))), ((((-1.0)*x10123*x10136))+((x10126*x10135))+((x10124*x10134))+((x10127*x10128))+((r00*x10124*x10131))+((x10125*x10133))+((r01*x10124*x10132))+((sj4*x10127*x10132))+(((-1.0)*sj2*x10129*x10130))+((r10*x10131*x10133))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x10137=IKcos(j0);
IkReal x10138=IKsin(j0);
IkReal x10139=((1.0)*sj4);
IkReal x10140=((0.37429)*sj5);
IkReal x10141=(r10*sj6);
IkReal x10142=(cj6*r00);
IkReal x10143=((0.37429)*cj5);
IkReal x10144=(cj6*r01);
IkReal x10145=((0.01)*cj5);
IkReal x10146=((1.0)*cj4);
IkReal x10147=(r00*sj6);
IkReal x10148=(r02*sj5);
IkReal x10149=(r12*sj5);
IkReal x10150=(cj6*r10);
IkReal x10151=(r01*sj6);
IkReal x10152=(r11*sj6);
IkReal x10153=(sj2*x10137);
IkReal x10154=(cj5*cj6*r11);
IkReal x10155=((0.069)*x10138);
IkReal x10156=(cj2*x10137);
IkReal x10157=((0.069)*x10137);
IkReal x10158=(sj2*x10138);
IkReal x10159=((1.0)*cj2*x10138);
evalcond[0]=(x10156+x10158+((cj4*x10150))+(((-1.0)*x10146*x10152))+(((-1.0)*cj5*x10139*x10141))+(((-1.0)*x10139*x10154))+(((-1.0)*x10139*x10149)));
evalcond[1]=(x10153+(((-1.0)*x10159))+((cj4*x10142))+(((-1.0)*x10146*x10151))+(((-1.0)*cj5*x10139*x10144))+(((-1.0)*cj5*x10139*x10147))+(((-1.0)*x10139*x10148)));
evalcond[2]=(((sj4*x10152))+x10153+(((-1.0)*x10159))+(((-1.0)*cj5*x10141*x10146))+(((-1.0)*x10146*x10154))+(((-1.0)*x10146*x10149))+(((-1.0)*x10139*x10150)));
evalcond[3]=((((-1.0)*cj5*x10146*x10147))+((sj4*x10151))+(((-1.0)*cj5*x10144*x10146))+(((-1.0)*x10146*x10148))+(((-1.0)*x10158))+(((-1.0)*x10156))+(((-1.0)*x10139*x10142)));
evalcond[4]=(((r02*x10143))+(((-0.069)*x10156))+x10157+(((-1.0)*px))+(((-1.0)*sj2*x10155))+((x10145*x10147))+((x10144*x10145))+(((-1.0)*x10140*x10144))+(((-1.0)*x10140*x10147))+(((0.01)*x10148)));
evalcond[5]=((((-1.0)*cj2*x10155))+((r12*x10143))+(((0.069)*x10153))+(((-1.0)*cj6*r11*x10140))+x10155+(((-1.0)*py))+((x10141*x10145))+((cj6*r11*x10145))+(((-1.0)*x10140*x10141))+(((0.01)*x10149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10160=((690.0)*sj5);
IkReal x10161=(cj5*sj2);
IkReal x10162=((25826.01)*r02);
IkReal x10163=(cj6*r11);
IkReal x10164=((25826.01)*sj5);
IkReal x10165=(r00*sj6);
IkReal x10166=(r10*sj6);
IkReal x10167=((25826.01)*r12);
IkReal x10168=(cj6*r01);
IkReal x10169=((69000.0)*py);
IkReal x10170=((69000.0)*px);
IkReal x10171=((690.0)*cj5);
IkReal x10172=(cj2*cj5);
IkReal x10173=(cj2*x10171);
CheckValue<IkReal> x10174=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-9522.0)*cj2)))),-1);
if(!x10174.valid){
continue;
}
CheckValue<IkReal> x10175 = IKatan2WithCheck(IkReal((((x10161*x10162))+(((-1.0)*x10163*x10171))+(((-1.0)*cj5*x10167))+((x10167*x10172))+(((690.0)*x10161*x10165))+(((690.0)*x10161*x10168))+(((-1.0)*r12*x10160))+((x10166*x10173))+((x10164*x10166))+((x10163*x10173))+(((-1.0)*cj2*x10169))+(((-1.0)*sj2*x10170))+x10169+(((-1.0)*cj2*x10164*x10166))+(((-1.0)*x10166*x10171))+((cj2*r12*x10160))+(((-1.0)*sj2*x10164*x10168))+(((-1.0)*sj2*x10164*x10165))+(((-1.0)*cj2*x10163*x10164))+((r02*sj2*x10160))+((x10163*x10164)))),IkReal((((x10168*x10173))+(((-1.0)*cj5*x10162))+((x10165*x10173))+((cj2*r02*x10160))+(((-1.0)*x10161*x10167))+(((-1.0)*x10165*x10171))+((x10164*x10168))+((x10164*x10165))+(((-1.0)*cj2*x10170))+x10170+(((-1.0)*r12*sj2*x10160))+(((-1.0)*cj2*x10164*x10165))+(((-1.0)*cj2*x10164*x10168))+(((-1.0)*r02*x10160))+((sj2*x10163*x10164))+(((-690.0)*x10161*x10163))+(((-690.0)*x10161*x10166))+(((-1.0)*x10168*x10171))+((x10162*x10172))+((sj2*x10164*x10166))+((sj2*x10169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10175.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10174.value)))+(x10175.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10176=IKcos(j0);
IkReal x10177=IKsin(j0);
IkReal x10178=((0.01)*cj5);
IkReal x10179=(cj6*r01);
IkReal x10180=((0.37429)*sj5);
IkReal x10181=(cj6*r11);
IkReal x10182=(r00*sj6);
IkReal x10183=((0.01)*sj5);
IkReal x10184=((0.37429)*cj5);
IkReal x10185=(r10*sj6);
IkReal x10186=((0.069)*x10176);
IkReal x10187=((0.069)*x10177);
evalcond[0]=((((-1.0)*x10179*x10180))+((x10178*x10182))+((r02*x10184))+((r02*x10183))+(((-1.0)*cj2*x10186))+(((-1.0)*sj2*x10187))+x10186+(((-1.0)*px))+((x10178*x10179))+(((-1.0)*x10180*x10182)));
evalcond[1]=(((x10178*x10185))+((x10178*x10181))+(((-1.0)*cj2*x10187))+((sj2*x10186))+((r12*x10184))+((r12*x10183))+x10187+(((-1.0)*py))+(((-1.0)*x10180*x10181))+(((-1.0)*x10180*x10185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x10188=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10188;
j4eval[1]=IKsign(x10188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x10189=((1.0)*sj5);
IkReal x10190=(((cj5*r12))+(((-1.0)*cj6*r11*x10189))+(((-1.0)*r10*sj6*x10189)));
j4eval[0]=x10190;
j4eval[1]=IKsign(x10190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x10191=cj6*cj6;
IkReal x10192=cj5*cj5;
IkReal x10193=(cj5*sj5);
IkReal x10194=(cj6*r21);
IkReal x10195=((1.0)*r11);
IkReal x10196=(r10*r20);
IkReal x10197=(r10*sj6);
IkReal x10198=(r12*r22);
IkReal x10199=(r21*x10191);
IkReal x10200=(cj6*r20*sj6);
IkReal x10201=(r11*x10192);
IkReal x10202=((1.0)*x10192);
IkReal x10203=(((x10200*x10201))+(((-1.0)*x10195*x10199))+((cj6*r11*r22*x10193))+(((-1.0)*x10194*x10197))+((x10192*x10194*x10197))+(((-1.0)*x10195*x10200))+((r11*r21))+((x10199*x10201))+((r12*r20*sj6*x10193))+x10198+((r22*x10193*x10197))+((r12*x10193*x10194))+((x10192*x10196))+(((-1.0)*x10198*x10202))+((x10191*x10196))+(((-1.0)*x10191*x10196*x10202)));
j4eval[0]=x10203;
j4eval[1]=IKsign(x10203);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10204=cj6*cj6;
IkReal x10205=cj5*cj5;
IkReal x10206=(r22*sj5);
IkReal x10207=(cj0*sj2);
IkReal x10208=(r12*r22);
IkReal x10209=(cj5*sj6);
IkReal x10210=((1.0)*r11);
IkReal x10211=(cj6*r21);
IkReal x10212=(cj6*r20);
IkReal x10213=(r12*sj5);
IkReal x10214=((1.0)*sj6);
IkReal x10215=((1.0)*cj2*sj0);
IkReal x10216=((1.0)*x10205);
IkReal x10217=(r21*x10204);
IkReal x10218=(r10*x10205);
IkReal x10219=(r11*x10205);
IkReal x10220=(r10*r20*x10204);
CheckValue<IkReal> x10221=IKPowWithIntegerCheck(IKsign((((cj5*x10211*x10213))+(((-1.0)*x10210*x10217))+(((-1.0)*sj6*x10210*x10212))+(((-1.0)*x10216*x10220))+((cj5*cj6*r11*x10206))+((r20*x10218))+((r11*r21))+((x10217*x10219))+((r20*x10209*x10213))+((sj6*x10212*x10219))+(((-1.0)*r10*x10211*x10214))+((sj6*x10211*x10218))+x10220+x10208+((r10*x10206*x10209))+(((-1.0)*x10208*x10216)))),-1);
if(!x10221.valid){
continue;
}
CheckValue<IkReal> x10222 = IKatan2WithCheck(IkReal(((((-1.0)*x10212*x10215))+((cj2*r21*sj0*sj6))+((x10207*x10212))+(((-1.0)*r21*x10207*x10214)))),IkReal((((x10206*x10207))+((cj5*x10207*x10211))+((r20*x10207*x10209))+(((-1.0)*r20*x10209*x10215))+(((-1.0)*cj5*x10211*x10215))+(((-1.0)*x10206*x10215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10221.value)))+(x10222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10223=IKsin(j4);
IkReal x10224=IKcos(j4);
IkReal x10225=(cj0*sj2);
IkReal x10226=(cj5*cj6);
IkReal x10227=(cj0*cj2);
IkReal x10228=(r11*sj6);
IkReal x10229=(cj6*r20);
IkReal x10230=(cj5*sj6);
IkReal x10231=(cj6*r10);
IkReal x10232=(cj6*r00);
IkReal x10233=((1.0)*sj0);
IkReal x10234=(cj2*x10233);
IkReal x10235=((1.0)*x10224);
IkReal x10236=((1.0)*x10223);
IkReal x10237=(sj6*x10223);
IkReal x10238=(sj5*x10236);
evalcond[0]=((((-1.0)*r21*sj6*x10235))+(((-1.0)*r20*x10230*x10236))+(((-1.0)*r21*x10226*x10236))+((x10224*x10229))+(((-1.0)*r22*x10238)));
evalcond[1]=((((-1.0)*r20*x10230*x10235))+(((-1.0)*r22*sj5*x10235))+(((-1.0)*r21*x10226*x10235))+((r21*x10237))+(((-1.0)*x10229*x10236)));
evalcond[2]=((((-1.0)*r11*x10226*x10236))+((sj0*sj2))+(((-1.0)*r10*x10230*x10236))+x10227+(((-1.0)*r12*x10238))+((x10224*x10231))+(((-1.0)*x10228*x10235)));
evalcond[3]=((((-1.0)*r01*x10226*x10236))+(((-1.0)*r00*x10230*x10236))+x10225+(((-1.0)*r01*sj6*x10235))+(((-1.0)*x10234))+((x10224*x10232))+(((-1.0)*r02*x10238)));
evalcond[4]=(((x10223*x10228))+(((-1.0)*r12*sj5*x10235))+(((-1.0)*r11*x10226*x10235))+(((-1.0)*r10*x10230*x10235))+x10225+(((-1.0)*x10234))+(((-1.0)*x10231*x10236)));
evalcond[5]=((((-1.0)*r01*x10226*x10235))+(((-1.0)*x10232*x10236))+(((-1.0)*r02*sj5*x10235))+(((-1.0)*r00*x10230*x10235))+(((-1.0)*x10227))+((r01*x10237))+(((-1.0)*sj2*x10233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10239=(cj0*sj2);
IkReal x10240=(cj6*r20);
IkReal x10241=(r22*sj5);
IkReal x10242=((1.0)*sj5);
IkReal x10243=(r21*sj6);
IkReal x10244=((1.0)*cj2*sj0);
IkReal x10245=(cj5*cj6*r21);
IkReal x10246=(cj5*r20*sj6);
CheckValue<IkReal> x10247=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x10242))+(((-1.0)*r10*sj6*x10242)))),-1);
if(!x10247.valid){
continue;
}
CheckValue<IkReal> x10248 = IKatan2WithCheck(IkReal((((x10239*x10240))+(((-1.0)*x10240*x10244))+((cj2*sj0*x10243))+(((-1.0)*x10239*x10243)))),IkReal((((x10239*x10246))+((x10239*x10245))+((x10239*x10241))+(((-1.0)*x10241*x10244))+(((-1.0)*x10244*x10246))+(((-1.0)*x10244*x10245)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10247.value)))+(x10248.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10249=IKsin(j4);
IkReal x10250=IKcos(j4);
IkReal x10251=(cj0*sj2);
IkReal x10252=(cj5*cj6);
IkReal x10253=(cj0*cj2);
IkReal x10254=(r11*sj6);
IkReal x10255=(cj6*r20);
IkReal x10256=(cj5*sj6);
IkReal x10257=(cj6*r10);
IkReal x10258=(cj6*r00);
IkReal x10259=((1.0)*sj0);
IkReal x10260=(cj2*x10259);
IkReal x10261=((1.0)*x10250);
IkReal x10262=((1.0)*x10249);
IkReal x10263=(sj6*x10249);
IkReal x10264=(sj5*x10262);
evalcond[0]=((((-1.0)*r22*x10264))+(((-1.0)*r20*x10256*x10262))+(((-1.0)*r21*x10252*x10262))+(((-1.0)*r21*sj6*x10261))+((x10250*x10255)));
evalcond[1]=((((-1.0)*x10255*x10262))+(((-1.0)*r20*x10256*x10261))+(((-1.0)*r21*x10252*x10261))+(((-1.0)*r22*sj5*x10261))+((r21*x10263)));
evalcond[2]=((((-1.0)*x10254*x10261))+((sj0*sj2))+(((-1.0)*r12*x10264))+x10253+(((-1.0)*r11*x10252*x10262))+((x10250*x10257))+(((-1.0)*r10*x10256*x10262)));
evalcond[3]=((((-1.0)*r01*sj6*x10261))+(((-1.0)*r00*x10256*x10262))+(((-1.0)*x10260))+(((-1.0)*r02*x10264))+(((-1.0)*r01*x10252*x10262))+x10251+((x10250*x10258)));
evalcond[4]=((((-1.0)*x10257*x10262))+(((-1.0)*r12*sj5*x10261))+(((-1.0)*x10260))+x10251+(((-1.0)*r11*x10252*x10261))+(((-1.0)*r10*x10256*x10261))+((x10249*x10254)));
evalcond[5]=((((-1.0)*r00*x10256*x10261))+((r01*x10263))+(((-1.0)*r01*x10252*x10261))+(((-1.0)*r02*sj5*x10261))+(((-1.0)*x10253))+(((-1.0)*sj2*x10259))+(((-1.0)*x10258*x10262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10265=(sj0*sj2);
IkReal x10266=(cj0*cj2);
IkReal x10267=(cj6*r20);
IkReal x10268=(r22*sj5);
IkReal x10269=((1.0)*r21*sj6);
IkReal x10270=(cj5*cj6*r21);
IkReal x10271=(cj5*r20*sj6);
CheckValue<IkReal> x10272 = IKatan2WithCheck(IkReal(((((-1.0)*x10266*x10269))+((x10265*x10267))+((x10266*x10267))+(((-1.0)*x10265*x10269)))),IkReal((((x10265*x10270))+((x10265*x10271))+((x10266*x10270))+((x10266*x10271))+((x10265*x10268))+((x10266*x10268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10272.valid){
continue;
}
CheckValue<IkReal> x10273=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10272.value)+(((1.5707963267949)*(x10273.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10274=IKsin(j4);
IkReal x10275=IKcos(j4);
IkReal x10276=(cj0*sj2);
IkReal x10277=(cj5*cj6);
IkReal x10278=(cj0*cj2);
IkReal x10279=(r11*sj6);
IkReal x10280=(cj6*r20);
IkReal x10281=(cj5*sj6);
IkReal x10282=(cj6*r10);
IkReal x10283=(cj6*r00);
IkReal x10284=((1.0)*sj0);
IkReal x10285=(cj2*x10284);
IkReal x10286=((1.0)*x10275);
IkReal x10287=((1.0)*x10274);
IkReal x10288=(sj6*x10274);
IkReal x10289=(sj5*x10287);
evalcond[0]=((((-1.0)*r21*x10277*x10287))+((x10275*x10280))+(((-1.0)*r21*sj6*x10286))+(((-1.0)*r22*x10289))+(((-1.0)*r20*x10281*x10287)));
evalcond[1]=((((-1.0)*r21*x10277*x10286))+(((-1.0)*r22*sj5*x10286))+((r21*x10288))+(((-1.0)*r20*x10281*x10286))+(((-1.0)*x10280*x10287)));
evalcond[2]=(((x10275*x10282))+(((-1.0)*r12*x10289))+(((-1.0)*x10279*x10286))+((sj0*sj2))+(((-1.0)*r11*x10277*x10287))+x10278+(((-1.0)*r10*x10281*x10287)));
evalcond[3]=((((-1.0)*r00*x10281*x10287))+(((-1.0)*r01*sj6*x10286))+((x10275*x10283))+(((-1.0)*r01*x10277*x10287))+x10276+(((-1.0)*r02*x10289))+(((-1.0)*x10285)));
evalcond[4]=((((-1.0)*x10282*x10287))+(((-1.0)*r11*x10277*x10286))+((x10274*x10279))+x10276+(((-1.0)*x10285))+(((-1.0)*r10*x10281*x10286))+(((-1.0)*r12*sj5*x10286)));
evalcond[5]=(((r01*x10288))+(((-1.0)*r02*sj5*x10286))+(((-1.0)*r00*x10281*x10286))+(((-1.0)*x10283*x10287))+(((-1.0)*r01*x10277*x10286))+(((-1.0)*x10278))+(((-1.0)*sj2*x10284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((9522.0)+(((9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x10290=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*sj6*x10290))+((cj6*r20)))))+(IKabs(((((-1.0)*cj5*cj6*x10290))+(((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x10291=((1.0)*cj5);
j4eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x10291))+(((-1.0)*cj6*r21*x10291))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x10292=((1.0)*cj5);
CheckValue<IkReal> x10294 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x10292))+(((-1.0)*cj6*r21*x10292))+(((-1.0)*r22*sj5)))),IkReal(((((-1.0)*cj6*r20))+((r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10294.valid){
continue;
}
IkReal x10293=x10294.value;
j4array[0]=((-1.0)*x10293);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x10293)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x10295=IKsin(j4);
IkReal x10296=IKcos(j4);
IkReal x10297=((1.0)*x10295);
evalcond[0]=((((-1.0)*r21*sj6*x10296))+((cj6*r20*x10296))+(((-1.0)*cj5*r20*sj6*x10297))+(((-1.0)*cj5*cj6*r21*x10297))+(((-1.0)*r22*sj5*x10297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10298=(cj5*cj6);
IkReal x10299=((1.0)*sj2);
IkReal x10300=(cj2*cj4);
IkReal x10301=(r12*sj5);
IkReal x10302=(cj4*sj2);
IkReal x10303=(r10*sj4);
IkReal x10304=(cj5*sj6);
IkReal x10305=(cj6*r10);
IkReal x10306=(r11*sj6);
IkReal x10307=(sj4*x10301);
IkReal x10308=(cj2*r11*sj4);
IkReal x10309=(r11*sj4*x10299);
IkReal x10310=(cj2*r10*x10304);
if( IKabs(((((-1.0)*cj4*x10299*x10306))+(((-1.0)*x10299*x10303*x10304))+((r10*x10300*x10304))+((x10300*x10301))+(((-1.0)*cj2*sj4*x10306))+((r11*x10298*x10300))+(((-1.0)*x10298*x10309))+((cj2*cj6*x10303))+((x10302*x10305))+(((-1.0)*x10299*x10307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x10299*x10306))+((cj2*x10303*x10304))+(((-1.0)*x10300*x10305))+((x10300*x10306))+((r11*x10298*x10302))+((cj2*x10307))+((cj6*sj2*x10303))+((x10298*x10308))+((x10301*x10302))+((r10*x10302*x10304)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x10299*x10306))+(((-1.0)*x10299*x10303*x10304))+((r10*x10300*x10304))+((x10300*x10301))+(((-1.0)*cj2*sj4*x10306))+((r11*x10298*x10300))+(((-1.0)*x10298*x10309))+((cj2*cj6*x10303))+((x10302*x10305))+(((-1.0)*x10299*x10307))))+IKsqr(((((-1.0)*sj4*x10299*x10306))+((cj2*x10303*x10304))+(((-1.0)*x10300*x10305))+((x10300*x10306))+((r11*x10298*x10302))+((cj2*x10307))+((cj6*sj2*x10303))+((x10298*x10308))+((x10301*x10302))+((r10*x10302*x10304))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*x10299*x10306))+(((-1.0)*x10299*x10303*x10304))+((r10*x10300*x10304))+((x10300*x10301))+(((-1.0)*cj2*sj4*x10306))+((r11*x10298*x10300))+(((-1.0)*x10298*x10309))+((cj2*cj6*x10303))+((x10302*x10305))+(((-1.0)*x10299*x10307))), ((((-1.0)*sj4*x10299*x10306))+((cj2*x10303*x10304))+(((-1.0)*x10300*x10305))+((x10300*x10306))+((r11*x10298*x10302))+((cj2*x10307))+((cj6*sj2*x10303))+((x10298*x10308))+((x10301*x10302))+((r10*x10302*x10304))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x10311=IKcos(j0);
IkReal x10312=IKsin(j0);
IkReal x10313=((1.0)*sj4);
IkReal x10314=((0.37429)*sj5);
IkReal x10315=(r10*sj6);
IkReal x10316=(cj6*r00);
IkReal x10317=((0.37429)*cj5);
IkReal x10318=(cj6*r01);
IkReal x10319=((0.01)*cj5);
IkReal x10320=(r12*sj5);
IkReal x10321=(r00*sj6);
IkReal x10322=(r02*sj5);
IkReal x10323=((1.0)*cj4);
IkReal x10324=(cj6*r10);
IkReal x10325=(r01*sj6);
IkReal x10326=(r11*sj6);
IkReal x10327=(cj2*x10311);
IkReal x10328=(cj5*cj6*r11);
IkReal x10329=((0.069)*x10312);
IkReal x10330=(sj2*x10311);
IkReal x10331=(cj2*x10312);
IkReal x10332=((1.0)*sj2*x10312);
evalcond[0]=((((-1.0)*cj5*x10315*x10323))+x10330+x10331+((sj4*x10326))+(((-1.0)*x10320*x10323))+(((-1.0)*x10323*x10328))+(((-1.0)*x10313*x10324)));
evalcond[1]=(((cj4*x10324))+x10327+(((-1.0)*x10332))+(((-1.0)*x10323*x10326))+(((-1.0)*cj5*x10313*x10315))+(((-1.0)*x10313*x10328))+(((-1.0)*x10313*x10320)));
evalcond[2]=((((-1.0)*x10313*x10316))+(((-1.0)*cj5*x10318*x10323))+x10327+(((-1.0)*x10332))+((sj4*x10325))+(((-1.0)*x10322*x10323))+(((-1.0)*cj5*x10321*x10323)));
evalcond[3]=((((-1.0)*x10331))+(((-1.0)*x10330))+(((-1.0)*cj5*x10313*x10321))+((cj4*x10316))+(((-1.0)*x10323*x10325))+(((-1.0)*cj5*x10313*x10318))+(((-1.0)*x10313*x10322)));
evalcond[4]=((((-1.0)*x10314*x10321))+((x10319*x10321))+(((-1.0)*sj2*x10329))+((r02*x10317))+(((-1.0)*px))+(((-1.0)*x10314*x10318))+(((0.069)*x10327))+(((0.01)*x10322))+((x10318*x10319))+(((0.069)*x10311)));
evalcond[5]=(((r12*x10317))+((cj6*r11*x10319))+(((-1.0)*py))+(((-1.0)*cj6*r11*x10314))+((x10315*x10319))+(((-1.0)*x10314*x10315))+x10329+((cj2*x10329))+(((0.01)*x10320))+(((0.069)*x10330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x10333=((1.0)*cj5);
CheckValue<IkReal> x10335 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((((-1.0)*cj6*r21*x10333))+(((-1.0)*r22*sj5))+(((-1.0)*r20*sj6*x10333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10335.valid){
continue;
}
IkReal x10334=x10335.value;
j4array[0]=((-1.0)*x10334);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x10334)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x10336=IKsin(j4);
IkReal x10337=IKcos(j4);
IkReal x10338=((1.0)*cj6);
IkReal x10339=(cj5*x10337);
evalcond[0]=((((-1.0)*r20*sj6*x10339))+(((-1.0)*r21*x10338*x10339))+(((-1.0)*r20*x10336*x10338))+((r21*sj6*x10336))+(((-1.0)*r22*sj5*x10337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10340=(cj5*cj6);
IkReal x10341=((1.0)*sj2);
IkReal x10342=(cj2*cj4);
IkReal x10343=(r12*sj5);
IkReal x10344=(cj4*sj2);
IkReal x10345=(r10*sj4);
IkReal x10346=(cj5*sj6);
IkReal x10347=(cj6*r10);
IkReal x10348=(r11*sj6);
IkReal x10349=(sj4*x10343);
IkReal x10350=(cj2*r11*sj4);
IkReal x10351=(r11*sj4*x10341);
IkReal x10352=(cj2*r10*x10346);
if( IKabs(((((-1.0)*x10341*x10349))+(((-1.0)*x10340*x10351))+(((-1.0)*cj2*sj4*x10348))+(((-1.0)*cj4*x10341*x10348))+((x10342*x10343))+((r11*x10340*x10342))+((x10344*x10347))+((r10*x10342*x10346))+((cj2*cj6*x10345))+(((-1.0)*x10341*x10345*x10346)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x10340*x10350))+((cj2*x10345*x10346))+((x10343*x10344))+((x10342*x10348))+((r11*x10340*x10344))+(((-1.0)*x10342*x10347))+(((-1.0)*sj4*x10341*x10348))+((cj2*x10349))+((r10*x10344*x10346))+((cj6*sj2*x10345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x10341*x10349))+(((-1.0)*x10340*x10351))+(((-1.0)*cj2*sj4*x10348))+(((-1.0)*cj4*x10341*x10348))+((x10342*x10343))+((r11*x10340*x10342))+((x10344*x10347))+((r10*x10342*x10346))+((cj2*cj6*x10345))+(((-1.0)*x10341*x10345*x10346))))+IKsqr((((x10340*x10350))+((cj2*x10345*x10346))+((x10343*x10344))+((x10342*x10348))+((r11*x10340*x10344))+(((-1.0)*x10342*x10347))+(((-1.0)*sj4*x10341*x10348))+((cj2*x10349))+((r10*x10344*x10346))+((cj6*sj2*x10345))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x10341*x10349))+(((-1.0)*x10340*x10351))+(((-1.0)*cj2*sj4*x10348))+(((-1.0)*cj4*x10341*x10348))+((x10342*x10343))+((r11*x10340*x10342))+((x10344*x10347))+((r10*x10342*x10346))+((cj2*cj6*x10345))+(((-1.0)*x10341*x10345*x10346))), (((x10340*x10350))+((cj2*x10345*x10346))+((x10343*x10344))+((x10342*x10348))+((r11*x10340*x10344))+(((-1.0)*x10342*x10347))+(((-1.0)*sj4*x10341*x10348))+((cj2*x10349))+((r10*x10344*x10346))+((cj6*sj2*x10345))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x10353=IKcos(j0);
IkReal x10354=IKsin(j0);
IkReal x10355=((1.0)*sj4);
IkReal x10356=((0.37429)*sj5);
IkReal x10357=(r10*sj6);
IkReal x10358=(cj6*r00);
IkReal x10359=((0.37429)*cj5);
IkReal x10360=(cj6*r01);
IkReal x10361=((0.01)*cj5);
IkReal x10362=(r12*sj5);
IkReal x10363=(r00*sj6);
IkReal x10364=(r02*sj5);
IkReal x10365=((1.0)*cj4);
IkReal x10366=(cj6*r10);
IkReal x10367=(r01*sj6);
IkReal x10368=(r11*sj6);
IkReal x10369=(cj2*x10353);
IkReal x10370=(cj5*cj6*r11);
IkReal x10371=((0.069)*x10354);
IkReal x10372=(sj2*x10353);
IkReal x10373=(cj2*x10354);
IkReal x10374=((1.0)*sj2*x10354);
evalcond[0]=((((-1.0)*x10355*x10366))+((sj4*x10368))+x10372+x10373+(((-1.0)*x10362*x10365))+(((-1.0)*cj5*x10357*x10365))+(((-1.0)*x10365*x10370)));
evalcond[1]=((((-1.0)*x10355*x10370))+(((-1.0)*x10355*x10362))+((cj4*x10366))+x10369+(((-1.0)*cj5*x10355*x10357))+(((-1.0)*x10374))+(((-1.0)*x10365*x10368)));
evalcond[2]=((((-1.0)*cj5*x10360*x10365))+((sj4*x10367))+(((-1.0)*x10355*x10358))+x10369+(((-1.0)*cj5*x10363*x10365))+(((-1.0)*x10364*x10365))+(((-1.0)*x10374)));
evalcond[3]=((((-1.0)*x10355*x10364))+((cj4*x10358))+(((-1.0)*cj5*x10355*x10360))+(((-1.0)*cj5*x10355*x10363))+(((-1.0)*x10373))+(((-1.0)*x10372))+(((-1.0)*x10365*x10367)));
evalcond[4]=(((x10361*x10363))+(((-1.0)*x10356*x10363))+(((-1.0)*x10356*x10360))+(((0.01)*x10364))+(((0.069)*x10369))+(((-1.0)*px))+(((0.069)*x10353))+((r02*x10359))+((x10360*x10361))+(((-1.0)*sj2*x10371)));
evalcond[5]=((((-1.0)*x10356*x10357))+(((0.01)*x10362))+(((0.069)*x10372))+(((-1.0)*py))+x10371+((x10357*x10361))+((cj6*r11*x10361))+(((-1.0)*cj6*r11*x10356))+((cj2*x10371))+((r12*x10359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10375=((690.0)*sj5);
IkReal x10376=(cj5*sj2);
IkReal x10377=((25826.01)*r02);
IkReal x10378=(cj6*r11);
IkReal x10379=((25826.01)*sj5);
IkReal x10380=(r10*sj6);
IkReal x10381=((25826.01)*r12);
IkReal x10382=(cj6*r01);
IkReal x10383=((69000.0)*py);
IkReal x10384=((69000.0)*px);
IkReal x10385=((690.0)*cj5);
IkReal x10386=(cj2*cj5);
IkReal x10387=(r00*sj6);
IkReal x10388=(cj2*x10385);
IkReal x10389=((690.0)*x10387);
CheckValue<IkReal> x10390 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x10379*x10382))+(((-1.0)*sj2*x10379*x10387))+((cj2*x10378*x10379))+((x10376*x10389))+((cj2*x10383))+((x10379*x10380))+(((-1.0)*cj5*x10381))+(((-1.0)*cj2*r12*x10375))+(((-1.0)*x10381*x10386))+(((690.0)*x10376*x10382))+(((-1.0)*x10380*x10385))+(((-1.0)*x10380*x10388))+x10383+((x10378*x10379))+(((-1.0)*x10378*x10385))+(((-1.0)*x10378*x10388))+((x10376*x10377))+(((-1.0)*sj2*x10384))+(((-1.0)*r12*x10375))+((r02*sj2*x10375))+((cj2*x10379*x10380)))),IkReal(((((-1.0)*x10385*x10387))+((sj2*x10378*x10379))+((cj2*x10384))+(((-1.0)*x10376*x10381))+(((-1.0)*x10387*x10388))+(((-1.0)*x10377*x10386))+((sj2*x10379*x10380))+((x10379*x10387))+((x10379*x10382))+(((-1.0)*r12*sj2*x10375))+(((-1.0)*r02*x10375))+(((-1.0)*cj5*x10377))+x10384+(((-690.0)*x10376*x10378))+((sj2*x10383))+(((-1.0)*cj2*r02*x10375))+(((-1.0)*x10382*x10388))+(((-1.0)*x10382*x10385))+(((-690.0)*x10376*x10380))+((cj2*x10379*x10382))+((cj2*x10379*x10387)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10390.valid){
continue;
}
CheckValue<IkReal> x10391=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj2)))),-1);
if(!x10391.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x10390.value)+(((1.5707963267949)*(x10391.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10392=IKcos(j0);
IkReal x10393=IKsin(j0);
IkReal x10394=((0.01)*cj5);
IkReal x10395=(cj6*r01);
IkReal x10396=((0.37429)*sj5);
IkReal x10397=(cj6*r11);
IkReal x10398=(r00*sj6);
IkReal x10399=((0.01)*sj5);
IkReal x10400=((0.37429)*cj5);
IkReal x10401=(r10*sj6);
IkReal x10402=((0.069)*x10392);
IkReal x10403=((0.069)*x10393);
evalcond[0]=((((-1.0)*x10396*x10398))+((cj2*x10402))+(((-1.0)*x10395*x10396))+((x10394*x10395))+((x10394*x10398))+(((-1.0)*sj2*x10403))+((r02*x10400))+(((-1.0)*px))+((r02*x10399))+x10402);
evalcond[1]=((((-1.0)*x10396*x10397))+((r12*x10399))+((cj2*x10403))+((sj2*x10402))+((x10394*x10397))+(((-1.0)*x10396*x10401))+(((-1.0)*py))+((r12*x10400))+((x10394*x10401))+x10403);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x10404=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10404;
j4eval[1]=IKsign(x10404);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x10405=cj6*cj6;
IkReal x10406=cj5*cj5;
IkReal x10407=(cj5*sj5);
IkReal x10408=(cj6*r21);
IkReal x10409=((1.0)*r11);
IkReal x10410=(r10*r20);
IkReal x10411=(r10*sj6);
IkReal x10412=(r12*r22);
IkReal x10413=(r21*x10405);
IkReal x10414=(cj6*r20*sj6);
IkReal x10415=(r11*x10406);
IkReal x10416=((1.0)*x10406);
IkReal x10417=(((x10406*x10408*x10411))+((r22*x10407*x10411))+((x10405*x10410))+(((-1.0)*x10409*x10414))+(((-1.0)*x10409*x10413))+((x10406*x10410))+(((-1.0)*x10412*x10416))+((r11*r21))+((r12*r20*sj6*x10407))+((x10414*x10415))+((x10413*x10415))+x10412+(((-1.0)*x10405*x10410*x10416))+((cj6*r11*r22*x10407))+(((-1.0)*x10408*x10411))+((r12*x10407*x10408)));
j4eval[0]=x10417;
j4eval[1]=IKsign(x10417);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x10418=cj5*cj5;
IkReal x10419=cj6*cj6;
IkReal x10420=(r00*r20);
IkReal x10421=(r02*r22);
IkReal x10422=(cj5*sj5);
IkReal x10423=(cj6*r21);
IkReal x10424=(r00*sj6);
IkReal x10425=(r20*sj6);
IkReal x10426=(cj6*r01);
IkReal x10427=((1.0)*x10418);
IkReal x10428=(r01*r21*x10419);
IkReal x10429=((((-1.0)*x10423*x10424))+(((-1.0)*x10421*x10427))+((r01*r21))+(((-1.0)*x10425*x10426))+((r02*x10422*x10423))+((r02*x10422*x10425))+((x10419*x10420))+((x10418*x10425*x10426))+(((-1.0)*x10419*x10420*x10427))+x10421+(((-1.0)*x10428))+((x10418*x10423*x10424))+((x10418*x10420))+((x10418*x10428))+((r22*x10422*x10424))+((r22*x10422*x10426)));
j4eval[0]=x10429;
j4eval[1]=IKsign(x10429);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10430=cj5*cj5;
IkReal x10431=cj6*cj6;
IkReal x10432=(cj6*r21);
IkReal x10433=(cj6*r20);
IkReal x10434=(cj0*cj2);
IkReal x10435=(r20*sj6);
IkReal x10436=((1.0)*sj6);
IkReal x10437=(sj0*sj2);
IkReal x10438=((1.0)*cj5);
IkReal x10439=(r02*r22);
IkReal x10440=(r22*sj5);
IkReal x10441=(r00*sj6);
IkReal x10442=(cj5*r02*sj5);
IkReal x10443=(r01*x10430);
IkReal x10444=(r21*x10431);
IkReal x10445=(r00*r20*x10430);
CheckValue<IkReal> x10446=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x10433*x10436))+((cj5*x10440*x10441))+((x10430*x10432*x10441))+((r00*r20*x10431))+((x10443*x10444))+(((-1.0)*x10431*x10445))+((cj5*cj6*r01*x10440))+((r01*r21))+((sj6*x10433*x10443))+(((-1.0)*r00*x10432*x10436))+((x10432*x10442))+x10439+x10445+(((-1.0)*r01*x10444))+(((-1.0)*x10430*x10439))+((x10435*x10442)))),-1);
if(!x10446.valid){
continue;
}
CheckValue<IkReal> x10447 = IKatan2WithCheck(IkReal((((x10433*x10434))+(((-1.0)*r21*x10434*x10436))+(((-1.0)*x10433*x10437))+((r21*sj6*x10437)))),IkReal((((x10434*x10440))+(((-1.0)*x10437*x10440))+((cj5*x10434*x10435))+(((-1.0)*x10432*x10437*x10438))+(((-1.0)*x10435*x10437*x10438))+((cj5*x10432*x10434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10446.value)))+(x10447.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10448=IKsin(j4);
IkReal x10449=IKcos(j4);
IkReal x10450=(cj0*cj2);
IkReal x10451=(cj5*cj6);
IkReal x10452=(r11*sj6);
IkReal x10453=(cj6*r20);
IkReal x10454=(cj5*sj6);
IkReal x10455=(cj6*r10);
IkReal x10456=(r01*sj6);
IkReal x10457=(cj0*sj2);
IkReal x10458=(r21*sj6);
IkReal x10459=(cj6*r00);
IkReal x10460=((1.0)*sj0);
IkReal x10461=(sj2*x10460);
IkReal x10462=((1.0)*x10449);
IkReal x10463=((1.0)*x10448);
IkReal x10464=(sj5*x10463);
evalcond[0]=((((-1.0)*r21*x10451*x10463))+((x10449*x10453))+(((-1.0)*r20*x10454*x10463))+(((-1.0)*r22*x10464))+(((-1.0)*x10458*x10462)));
evalcond[1]=((((-1.0)*r22*sj5*x10462))+(((-1.0)*r21*x10451*x10462))+(((-1.0)*r20*x10454*x10462))+(((-1.0)*x10453*x10463))+((x10448*x10458)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r10*x10454*x10462))+(((-1.0)*r12*sj5*x10462))+(((-1.0)*r11*x10451*x10462))+x10457+((x10448*x10452))+(((-1.0)*x10455*x10463)));
evalcond[3]=(((x10449*x10455))+(((-1.0)*r10*x10454*x10463))+(((-1.0)*x10452*x10462))+(((-1.0)*r11*x10451*x10463))+x10450+(((-1.0)*r12*x10464))+(((-1.0)*x10461)));
evalcond[4]=((((-1.0)*r00*x10454*x10462))+(((-1.0)*x10459*x10463))+(((-1.0)*r02*sj5*x10462))+(((-1.0)*r01*x10451*x10462))+x10450+((x10448*x10456))+(((-1.0)*x10461)));
evalcond[5]=((((-1.0)*x10457))+(((-1.0)*r02*x10464))+(((-1.0)*r00*x10454*x10463))+((x10449*x10459))+(((-1.0)*r01*x10451*x10463))+(((-1.0)*x10456*x10462))+(((-1.0)*cj2*x10460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10465=cj6*cj6;
IkReal x10466=cj5*cj5;
IkReal x10467=((1.0)*r11);
IkReal x10468=(r22*sj5);
IkReal x10469=(cj0*sj2);
IkReal x10470=(cj5*sj6);
IkReal x10471=(cj6*r20);
IkReal x10472=(cj2*sj0);
IkReal x10473=(r21*sj6);
IkReal x10474=(cj6*r10);
IkReal x10475=(r12*r22);
IkReal x10476=(r12*sj5);
IkReal x10477=(r21*x10465);
IkReal x10478=(r20*x10472);
IkReal x10479=(cj5*cj6*r21);
IkReal x10480=(r11*x10466);
IkReal x10481=(r10*r20*x10466);
CheckValue<IkReal> x10482 = IKatan2WithCheck(IkReal((((x10471*x10472))+(((-1.0)*x10469*x10473))+(((-1.0)*x10472*x10473))+((x10469*x10471)))),IkReal((((x10470*x10478))+((x10472*x10479))+((x10468*x10472))+((x10468*x10469))+((r20*x10469*x10470))+((x10469*x10479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10482.valid){
continue;
}
CheckValue<IkReal> x10483=IKPowWithIntegerCheck(IKsign((((x10477*x10480))+(((-1.0)*x10466*x10475))+((r11*r21))+(((-1.0)*x10467*x10477))+((x10476*x10479))+(((-1.0)*x10465*x10481))+((r10*x10468*x10470))+((cj5*cj6*r11*x10468))+((r20*x10470*x10476))+((sj6*x10471*x10480))+((r10*r20*x10465))+x10475+x10481+(((-1.0)*x10473*x10474))+(((-1.0)*sj6*x10467*x10471))+((x10466*x10473*x10474)))),-1);
if(!x10483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10482.value)+(((1.5707963267949)*(x10483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10484=IKsin(j4);
IkReal x10485=IKcos(j4);
IkReal x10486=(cj0*cj2);
IkReal x10487=(cj5*cj6);
IkReal x10488=(r11*sj6);
IkReal x10489=(cj6*r20);
IkReal x10490=(cj5*sj6);
IkReal x10491=(cj6*r10);
IkReal x10492=(r01*sj6);
IkReal x10493=(cj0*sj2);
IkReal x10494=(r21*sj6);
IkReal x10495=(cj6*r00);
IkReal x10496=((1.0)*sj0);
IkReal x10497=(sj2*x10496);
IkReal x10498=((1.0)*x10485);
IkReal x10499=((1.0)*x10484);
IkReal x10500=(sj5*x10499);
evalcond[0]=((((-1.0)*r22*x10500))+(((-1.0)*x10494*x10498))+((x10485*x10489))+(((-1.0)*r21*x10487*x10499))+(((-1.0)*r20*x10490*x10499)));
evalcond[1]=((((-1.0)*r22*sj5*x10498))+(((-1.0)*x10489*x10499))+(((-1.0)*r21*x10487*x10498))+(((-1.0)*r20*x10490*x10498))+((x10484*x10494)));
evalcond[2]=((((-1.0)*r12*sj5*x10498))+((cj2*sj0))+(((-1.0)*r10*x10490*x10498))+(((-1.0)*x10491*x10499))+x10493+(((-1.0)*r11*x10487*x10498))+((x10484*x10488)));
evalcond[3]=((((-1.0)*x10488*x10498))+(((-1.0)*r10*x10490*x10499))+(((-1.0)*r12*x10500))+((x10485*x10491))+(((-1.0)*x10497))+x10486+(((-1.0)*r11*x10487*x10499)));
evalcond[4]=((((-1.0)*r02*sj5*x10498))+(((-1.0)*r00*x10490*x10498))+(((-1.0)*r01*x10487*x10498))+(((-1.0)*x10495*x10499))+(((-1.0)*x10497))+x10486+((x10484*x10492)));
evalcond[5]=((((-1.0)*r00*x10490*x10499))+(((-1.0)*r01*x10487*x10499))+(((-1.0)*x10493))+(((-1.0)*x10492*x10498))+((x10485*x10495))+(((-1.0)*cj2*x10496))+(((-1.0)*r02*x10500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10501=(cj0*cj2);
IkReal x10502=(cj6*r20);
IkReal x10503=(r21*sj6);
IkReal x10504=(sj0*sj2);
IkReal x10505=(r22*sj5);
IkReal x10506=(cj5*r20*sj6);
IkReal x10507=(cj5*cj6*r21);
CheckValue<IkReal> x10508=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10508.valid){
continue;
}
CheckValue<IkReal> x10509 = IKatan2WithCheck(IkReal((((x10501*x10502))+(((-1.0)*x10501*x10503))+(((-1.0)*x10502*x10504))+((x10503*x10504)))),IkReal((((x10501*x10505))+((x10501*x10507))+((x10501*x10506))+(((-1.0)*x10504*x10507))+(((-1.0)*x10504*x10506))+(((-1.0)*x10504*x10505)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10508.value)))+(x10509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10510=IKsin(j4);
IkReal x10511=IKcos(j4);
IkReal x10512=(cj0*cj2);
IkReal x10513=(cj5*cj6);
IkReal x10514=(r11*sj6);
IkReal x10515=(cj6*r20);
IkReal x10516=(cj5*sj6);
IkReal x10517=(cj6*r10);
IkReal x10518=(r01*sj6);
IkReal x10519=(cj0*sj2);
IkReal x10520=(r21*sj6);
IkReal x10521=(cj6*r00);
IkReal x10522=((1.0)*sj0);
IkReal x10523=(sj2*x10522);
IkReal x10524=((1.0)*x10511);
IkReal x10525=((1.0)*x10510);
IkReal x10526=(sj5*x10525);
evalcond[0]=((((-1.0)*x10520*x10524))+(((-1.0)*r22*x10526))+(((-1.0)*r20*x10516*x10525))+((x10511*x10515))+(((-1.0)*r21*x10513*x10525)));
evalcond[1]=(((x10510*x10520))+(((-1.0)*r22*sj5*x10524))+(((-1.0)*r20*x10516*x10524))+(((-1.0)*r21*x10513*x10524))+(((-1.0)*x10515*x10525)));
evalcond[2]=(((cj2*sj0))+((x10510*x10514))+(((-1.0)*r11*x10513*x10524))+(((-1.0)*r12*sj5*x10524))+(((-1.0)*x10517*x10525))+x10519+(((-1.0)*r10*x10516*x10524)));
evalcond[3]=((((-1.0)*x10523))+(((-1.0)*r12*x10526))+((x10511*x10517))+(((-1.0)*r11*x10513*x10525))+x10512+(((-1.0)*x10514*x10524))+(((-1.0)*r10*x10516*x10525)));
evalcond[4]=(((x10510*x10518))+(((-1.0)*x10521*x10525))+(((-1.0)*x10523))+(((-1.0)*r01*x10513*x10524))+(((-1.0)*r00*x10516*x10524))+x10512+(((-1.0)*r02*sj5*x10524)));
evalcond[5]=((((-1.0)*r01*x10513*x10525))+(((-1.0)*x10519))+(((-1.0)*x10518*x10524))+(((-1.0)*r02*x10526))+((x10511*x10521))+(((-1.0)*cj2*x10522))+(((-1.0)*r00*x10516*x10525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10527=(cj1*r12);
IkReal x10528=(r00*sj6);
IkReal x10529=((69.0)*cj1);
IkReal x10530=(cj6*r01);
IkReal x10531=((1.0)*sj5);
IkReal x10532=(cj5*r02);
IkReal x10533=(cj6*r11);
IkReal x10534=(r10*sj6);
IkReal x10535=((69.0)*sj2*sj5);
IkReal x10536=((374.29)*cj1*sj5);
IkReal x10537=((10.0)*cj1*cj5);
CheckValue<IkReal> x10538=IKPowWithIntegerCheck(((((364.42)*(cj1*cj1)))+(((-1.0)*cj2*sj1*x10529))+x10529),-1);
if(!x10538.valid){
continue;
}
CheckValue<IkReal> x10539=IKPowWithIntegerCheck(cj1,-1);
if(!x10539.valid){
continue;
}
if( IKabs(((x10538.value)*((((x10533*x10536))+(((1000.0)*cj1*py))+((x10528*x10535))+((x10530*x10535))+(((-374.29)*cj5*x10527))+(((-69.0)*sj2*x10532))+((x10534*x10536))+(((-1.0)*x10534*x10537))+(((-1.0)*x10533*x10537))+(((-10.0)*sj5*x10527)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10539.value)*(((((-1.0)*x10530*x10531))+x10532+(((-1.0)*x10528*x10531)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10538.value)*((((x10533*x10536))+(((1000.0)*cj1*py))+((x10528*x10535))+((x10530*x10535))+(((-374.29)*cj5*x10527))+(((-69.0)*sj2*x10532))+((x10534*x10536))+(((-1.0)*x10534*x10537))+(((-1.0)*x10533*x10537))+(((-10.0)*sj5*x10527))))))+IKsqr(((x10539.value)*(((((-1.0)*x10530*x10531))+x10532+(((-1.0)*x10528*x10531))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x10538.value)*((((x10533*x10536))+(((1000.0)*cj1*py))+((x10528*x10535))+((x10530*x10535))+(((-374.29)*cj5*x10527))+(((-69.0)*sj2*x10532))+((x10534*x10536))+(((-1.0)*x10534*x10537))+(((-1.0)*x10533*x10537))+(((-10.0)*sj5*x10527))))), ((x10539.value)*(((((-1.0)*x10530*x10531))+x10532+(((-1.0)*x10528*x10531))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x10540=IKcos(j0);
IkReal x10541=IKsin(j0);
IkReal x10542=((0.01)*cj5);
IkReal x10543=(cj6*r11);
IkReal x10544=(cj5*r12);
IkReal x10545=(r10*sj6);
IkReal x10546=((0.37429)*sj5);
IkReal x10547=(r00*sj6);
IkReal x10548=((1.0)*sj5);
IkReal x10549=(cj6*r01);
IkReal x10550=(cj5*r02);
IkReal x10551=(cj2*sj1);
IkReal x10552=((0.01)*sj5);
IkReal x10553=(cj1*x10541);
IkReal x10554=((0.069)*x10541);
IkReal x10555=((0.069)*x10540);
IkReal x10556=(cj1*x10540);
evalcond[0]=((((-1.0)*x10547*x10548))+(((-1.0)*x10556))+x10550+(((-1.0)*x10548*x10549)));
evalcond[1]=((((-1.0)*x10543*x10548))+(((-1.0)*x10545*x10548))+(((-1.0)*x10553))+x10544);
evalcond[2]=((((0.36442)*x10556))+((r02*x10552))+(((0.37429)*x10550))+(((-1.0)*x10551*x10555))+(((-1.0)*sj2*x10554))+(((-1.0)*x10546*x10547))+(((-1.0)*x10546*x10549))+(((-1.0)*px))+((x10542*x10549))+((x10542*x10547))+x10555);
evalcond[3]=((((0.36442)*x10553))+(((-1.0)*x10551*x10554))+(((-1.0)*x10543*x10546))+(((-1.0)*py))+(((-1.0)*x10545*x10546))+((sj2*x10555))+((x10542*x10543))+((x10542*x10545))+x10554+((r12*x10552))+(((0.37429)*x10544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x10557=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10557;
j4eval[1]=IKsign(x10557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x10558=((1.0)*sj5);
IkReal x10559=((((-1.0)*r00*sj6*x10558))+(((-1.0)*cj6*r01*x10558))+((cj5*r02)));
j4eval[0]=x10559;
j4eval[1]=IKsign(x10559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x10560=cj5*cj5;
IkReal x10561=cj6*cj6;
IkReal x10562=r22*r22;
IkReal x10563=r21*r21;
IkReal x10564=r20*r20;
IkReal x10565=(cj6*r21);
IkReal x10566=(r20*sj6);
IkReal x10567=(cj1*cj2);
IkReal x10568=(r22*sj5);
IkReal x10569=(cj6*r20);
IkReal x10570=((2.0)*cj5);
IkReal x10571=(cj1*sj2);
IkReal x10572=((1.0)*x10563);
IkReal x10573=((1.0)*x10564);
IkReal x10574=((1.0)*r21*sj6);
IkReal x10575=((1.0)*cj5*x10571);
IkReal x10576=(x10560*x10561);
IkReal x10577=(((x10564*x10576))+(((-1.0)*x10566*x10568*x10570))+(((-1.0)*x10560*x10573))+((x10561*x10563))+(((-1.0)*x10572))+(((-1.0)*x10562))+(((-1.0)*x10565*x10568*x10570))+(((-2.0)*x10560*x10565*x10566))+(((2.0)*x10565*x10566))+((x10560*x10562))+(((-1.0)*x10572*x10576))+(((-1.0)*x10561*x10573)));
j4eval[0]=x10577;
j4eval[1]=((IKabs(((((-1.0)*x10568*x10571))+(((-1.0)*x10566*x10575))+(((-1.0)*x10567*x10574))+(((-1.0)*x10565*x10575))+((x10567*x10569)))))+(IKabs(((((-1.0)*x10571*x10574))+((cj5*x10566*x10567))+((cj5*x10565*x10567))+((x10569*x10571))+((x10567*x10568))))));
j4eval[2]=IKsign(x10577);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x10578=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10578;
j4eval[1]=IKsign(x10578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x10579=((1.0)*sj5);
IkReal x10580=(((cj5*r12))+(((-1.0)*r10*sj6*x10579))+(((-1.0)*cj6*r11*x10579)));
j4eval[0]=x10580;
j4eval[1]=IKsign(x10580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x10581=cj6*cj6;
IkReal x10582=cj5*cj5;
IkReal x10583=(cj5*sj5);
IkReal x10584=(cj6*r21);
IkReal x10585=((1.0)*r11);
IkReal x10586=(r10*r20);
IkReal x10587=(r10*sj6);
IkReal x10588=(r12*r22);
IkReal x10589=(r21*x10581);
IkReal x10590=(cj6*r20*sj6);
IkReal x10591=(r11*x10582);
IkReal x10592=((1.0)*x10582);
IkReal x10593=((((-1.0)*x10585*x10590))+(((-1.0)*x10584*x10587))+((r11*r21))+(((-1.0)*x10581*x10586*x10592))+((cj6*r11*r22*x10583))+((r12*r20*sj6*x10583))+((x10581*x10586))+((r22*x10583*x10587))+((x10589*x10591))+(((-1.0)*x10588*x10592))+x10588+((x10590*x10591))+((x10582*x10584*x10587))+((r12*x10583*x10584))+(((-1.0)*x10585*x10589))+((x10582*x10586)));
j4eval[0]=x10593;
j4eval[1]=IKsign(x10593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10594=cj6*cj6;
IkReal x10595=cj5*cj5;
IkReal x10596=(r22*sj5);
IkReal x10597=(cj0*sj2);
IkReal x10598=(r12*r22);
IkReal x10599=(cj5*sj6);
IkReal x10600=((1.0)*r11);
IkReal x10601=(cj6*r21);
IkReal x10602=(cj6*r20);
IkReal x10603=(r12*sj5);
IkReal x10604=((1.0)*sj6);
IkReal x10605=((1.0)*cj2*sj0);
IkReal x10606=((1.0)*x10595);
IkReal x10607=(r21*x10594);
IkReal x10608=(r10*x10595);
IkReal x10609=(r11*x10595);
IkReal x10610=(r10*r20*x10594);
CheckValue<IkReal> x10611=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10598*x10606))+(((-1.0)*x10600*x10607))+((cj5*cj6*r11*x10596))+((sj6*x10601*x10608))+((r11*r21))+((cj5*x10601*x10603))+((x10607*x10609))+x10598+(((-1.0)*x10606*x10610))+((r20*x10608))+x10610+((sj6*x10602*x10609))+((r20*x10599*x10603))+((r10*x10596*x10599))+(((-1.0)*sj6*x10600*x10602))+(((-1.0)*r10*x10601*x10604)))),-1);
if(!x10611.valid){
continue;
}
CheckValue<IkReal> x10612 = IKatan2WithCheck(IkReal((((cj2*r21*sj0*sj6))+(((-1.0)*r21*x10597*x10604))+((x10597*x10602))+(((-1.0)*x10602*x10605)))),IkReal((((x10596*x10597))+(((-1.0)*r20*x10599*x10605))+(((-1.0)*cj5*x10601*x10605))+((cj5*x10597*x10601))+((r20*x10597*x10599))+(((-1.0)*x10596*x10605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10611.value)))+(x10612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10613=IKsin(j4);
IkReal x10614=IKcos(j4);
IkReal x10615=(cj0*sj2);
IkReal x10616=(cj5*cj6);
IkReal x10617=(cj0*cj2);
IkReal x10618=(r11*sj6);
IkReal x10619=(cj6*r20);
IkReal x10620=(cj5*sj6);
IkReal x10621=(cj6*r10);
IkReal x10622=(cj6*r00);
IkReal x10623=((1.0)*sj0);
IkReal x10624=(cj2*x10623);
IkReal x10625=((1.0)*x10614);
IkReal x10626=((1.0)*x10613);
IkReal x10627=(sj6*x10613);
IkReal x10628=(sj5*x10626);
evalcond[0]=(((x10614*x10619))+(((-1.0)*r21*sj6*x10625))+(((-1.0)*r22*x10628))+(((-1.0)*r20*x10620*x10626))+(((-1.0)*r21*x10616*x10626)));
evalcond[1]=(((r21*x10627))+(((-1.0)*x10619*x10626))+(((-1.0)*r20*x10620*x10625))+(((-1.0)*r21*x10616*x10625))+(((-1.0)*r22*sj5*x10625)));
evalcond[2]=((((-1.0)*r10*x10620*x10626))+(((-1.0)*x10618*x10625))+(((-1.0)*r12*x10628))+((sj0*sj2))+(((-1.0)*r11*x10616*x10626))+((x10614*x10621))+x10617);
evalcond[3]=((((-1.0)*r02*x10628))+(((-1.0)*x10624))+(((-1.0)*r00*x10620*x10626))+(((-1.0)*r01*x10616*x10626))+(((-1.0)*r01*sj6*x10625))+((x10614*x10622))+x10615);
evalcond[4]=((((-1.0)*r10*x10620*x10625))+((x10613*x10618))+(((-1.0)*x10624))+(((-1.0)*r11*x10616*x10625))+(((-1.0)*r12*sj5*x10625))+(((-1.0)*x10621*x10626))+x10615);
evalcond[5]=((((-1.0)*sj2*x10623))+((r01*x10627))+(((-1.0)*r00*x10620*x10625))+(((-1.0)*r02*sj5*x10625))+(((-1.0)*r01*x10616*x10625))+(((-1.0)*x10622*x10626))+(((-1.0)*x10617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10629=(cj0*sj2);
IkReal x10630=(cj6*r20);
IkReal x10631=(r22*sj5);
IkReal x10632=((1.0)*sj5);
IkReal x10633=(r21*sj6);
IkReal x10634=((1.0)*cj2*sj0);
IkReal x10635=(cj5*cj6*r21);
IkReal x10636=(cj5*r20*sj6);
CheckValue<IkReal> x10637 = IKatan2WithCheck(IkReal(((((-1.0)*x10629*x10633))+((x10629*x10630))+((cj2*sj0*x10633))+(((-1.0)*x10630*x10634)))),IkReal(((((-1.0)*x10634*x10636))+(((-1.0)*x10634*x10635))+(((-1.0)*x10631*x10634))+((x10629*x10631))+((x10629*x10636))+((x10629*x10635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10637.valid){
continue;
}
CheckValue<IkReal> x10638=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x10632))+(((-1.0)*r10*sj6*x10632)))),-1);
if(!x10638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10637.value)+(((1.5707963267949)*(x10638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10639=IKsin(j4);
IkReal x10640=IKcos(j4);
IkReal x10641=(cj0*sj2);
IkReal x10642=(cj5*cj6);
IkReal x10643=(cj0*cj2);
IkReal x10644=(r11*sj6);
IkReal x10645=(cj6*r20);
IkReal x10646=(cj5*sj6);
IkReal x10647=(cj6*r10);
IkReal x10648=(cj6*r00);
IkReal x10649=((1.0)*sj0);
IkReal x10650=(cj2*x10649);
IkReal x10651=((1.0)*x10640);
IkReal x10652=((1.0)*x10639);
IkReal x10653=(sj6*x10639);
IkReal x10654=(sj5*x10652);
evalcond[0]=(((x10640*x10645))+(((-1.0)*r22*x10654))+(((-1.0)*r20*x10646*x10652))+(((-1.0)*r21*x10642*x10652))+(((-1.0)*r21*sj6*x10651)));
evalcond[1]=((((-1.0)*r20*x10646*x10651))+(((-1.0)*r21*x10642*x10651))+((r21*x10653))+(((-1.0)*x10645*x10652))+(((-1.0)*r22*sj5*x10651)));
evalcond[2]=(((x10640*x10647))+(((-1.0)*r11*x10642*x10652))+(((-1.0)*r12*x10654))+((sj0*sj2))+(((-1.0)*r10*x10646*x10652))+(((-1.0)*x10644*x10651))+x10643);
evalcond[3]=(((x10640*x10648))+(((-1.0)*r01*x10642*x10652))+(((-1.0)*r00*x10646*x10652))+(((-1.0)*r01*sj6*x10651))+(((-1.0)*r02*x10654))+x10641+(((-1.0)*x10650)));
evalcond[4]=((((-1.0)*r11*x10642*x10651))+(((-1.0)*x10647*x10652))+(((-1.0)*r12*sj5*x10651))+((x10639*x10644))+(((-1.0)*r10*x10646*x10651))+x10641+(((-1.0)*x10650)));
evalcond[5]=((((-1.0)*sj2*x10649))+(((-1.0)*r01*x10642*x10651))+(((-1.0)*r00*x10646*x10651))+(((-1.0)*x10643))+(((-1.0)*r02*sj5*x10651))+(((-1.0)*x10648*x10652))+((r01*x10653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10655=(sj0*sj2);
IkReal x10656=(cj0*cj2);
IkReal x10657=(cj6*r20);
IkReal x10658=(r22*sj5);
IkReal x10659=((1.0)*r21*sj6);
IkReal x10660=(cj5*cj6*r21);
IkReal x10661=(cj5*r20*sj6);
CheckValue<IkReal> x10662 = IKatan2WithCheck(IkReal((((x10656*x10657))+(((-1.0)*x10656*x10659))+(((-1.0)*x10655*x10659))+((x10655*x10657)))),IkReal((((x10656*x10658))+((x10655*x10660))+((x10655*x10661))+((x10655*x10658))+((x10656*x10661))+((x10656*x10660)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10662.valid){
continue;
}
CheckValue<IkReal> x10663=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10662.value)+(((1.5707963267949)*(x10663.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10664=IKsin(j4);
IkReal x10665=IKcos(j4);
IkReal x10666=(cj0*sj2);
IkReal x10667=(cj5*cj6);
IkReal x10668=(cj0*cj2);
IkReal x10669=(r11*sj6);
IkReal x10670=(cj6*r20);
IkReal x10671=(cj5*sj6);
IkReal x10672=(cj6*r10);
IkReal x10673=(cj6*r00);
IkReal x10674=((1.0)*sj0);
IkReal x10675=(cj2*x10674);
IkReal x10676=((1.0)*x10665);
IkReal x10677=((1.0)*x10664);
IkReal x10678=(sj6*x10664);
IkReal x10679=(sj5*x10677);
evalcond[0]=((((-1.0)*r20*x10671*x10677))+(((-1.0)*r21*sj6*x10676))+(((-1.0)*r21*x10667*x10677))+(((-1.0)*r22*x10679))+((x10665*x10670)));
evalcond[1]=((((-1.0)*r22*sj5*x10676))+(((-1.0)*r20*x10671*x10676))+(((-1.0)*r21*x10667*x10676))+((r21*x10678))+(((-1.0)*x10670*x10677)));
evalcond[2]=((((-1.0)*r10*x10671*x10677))+(((-1.0)*x10669*x10676))+(((-1.0)*r11*x10667*x10677))+((sj0*sj2))+((x10665*x10672))+x10668+(((-1.0)*r12*x10679)));
evalcond[3]=((((-1.0)*r02*x10679))+(((-1.0)*r01*sj6*x10676))+(((-1.0)*r00*x10671*x10677))+((x10665*x10673))+(((-1.0)*x10675))+(((-1.0)*r01*x10667*x10677))+x10666);
evalcond[4]=((((-1.0)*r10*x10671*x10676))+((x10664*x10669))+(((-1.0)*r11*x10667*x10676))+(((-1.0)*x10672*x10677))+(((-1.0)*r12*sj5*x10676))+(((-1.0)*x10675))+x10666);
evalcond[5]=((((-1.0)*sj2*x10674))+(((-1.0)*r02*sj5*x10676))+(((-1.0)*x10673*x10677))+((r01*x10678))+(((-1.0)*r00*x10671*x10676))+(((-1.0)*x10668))+(((-1.0)*r01*x10667*x10676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x10680=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10680;
j4eval[1]=IKsign(x10680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x10681=cj6*cj6;
IkReal x10682=cj5*cj5;
IkReal x10683=(cj5*sj5);
IkReal x10684=(cj6*r21);
IkReal x10685=((1.0)*r11);
IkReal x10686=(r10*r20);
IkReal x10687=(r10*sj6);
IkReal x10688=(r12*r22);
IkReal x10689=(r21*x10681);
IkReal x10690=(cj6*r20*sj6);
IkReal x10691=(r11*x10682);
IkReal x10692=((1.0)*x10682);
IkReal x10693=(((x10681*x10686))+((x10689*x10691))+((r11*r21))+(((-1.0)*x10685*x10690))+(((-1.0)*x10681*x10686*x10692))+(((-1.0)*x10688*x10692))+((r12*x10683*x10684))+(((-1.0)*x10685*x10689))+(((-1.0)*x10684*x10687))+((x10690*x10691))+((x10682*x10684*x10687))+x10688+((x10682*x10686))+((cj6*r11*r22*x10683))+((r22*x10683*x10687))+((r12*r20*sj6*x10683)));
j4eval[0]=x10693;
j4eval[1]=IKsign(x10693);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x10694=cj5*cj5;
IkReal x10695=cj6*cj6;
IkReal x10696=(r00*r20);
IkReal x10697=(r02*r22);
IkReal x10698=(cj5*sj5);
IkReal x10699=(cj6*r21);
IkReal x10700=(r00*sj6);
IkReal x10701=(r20*sj6);
IkReal x10702=(cj6*r01);
IkReal x10703=((1.0)*x10694);
IkReal x10704=(r01*r21*x10695);
IkReal x10705=((((-1.0)*x10701*x10702))+((x10694*x10699*x10700))+(((-1.0)*x10699*x10700))+(((-1.0)*x10704))+((r01*r21))+(((-1.0)*x10697*x10703))+((r22*x10698*x10700))+((r22*x10698*x10702))+((r02*x10698*x10701))+((x10694*x10696))+(((-1.0)*x10695*x10696*x10703))+((r02*x10698*x10699))+((x10694*x10701*x10702))+((x10694*x10704))+x10697+((x10695*x10696)));
j4eval[0]=x10705;
j4eval[1]=IKsign(x10705);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10706=cj5*cj5;
IkReal x10707=cj6*cj6;
IkReal x10708=(cj6*r21);
IkReal x10709=(cj6*r20);
IkReal x10710=(cj0*cj2);
IkReal x10711=(r20*sj6);
IkReal x10712=((1.0)*sj6);
IkReal x10713=(sj0*sj2);
IkReal x10714=((1.0)*cj5);
IkReal x10715=(r02*r22);
IkReal x10716=(r22*sj5);
IkReal x10717=(r00*sj6);
IkReal x10718=(cj5*r02*sj5);
IkReal x10719=(r01*x10706);
IkReal x10720=(r21*x10707);
IkReal x10721=(r00*r20*x10706);
CheckValue<IkReal> x10722=IKPowWithIntegerCheck(IKsign((((r00*r20*x10707))+((x10719*x10720))+((cj5*x10716*x10717))+((x10706*x10708*x10717))+((r01*r21))+((sj6*x10709*x10719))+((x10708*x10718))+(((-1.0)*r01*x10720))+((cj5*cj6*r01*x10716))+(((-1.0)*x10706*x10715))+(((-1.0)*r00*x10708*x10712))+x10715+x10721+(((-1.0)*r01*x10709*x10712))+(((-1.0)*x10707*x10721))+((x10711*x10718)))),-1);
if(!x10722.valid){
continue;
}
CheckValue<IkReal> x10723 = IKatan2WithCheck(IkReal((((r21*sj6*x10713))+(((-1.0)*x10709*x10713))+(((-1.0)*r21*x10710*x10712))+((x10709*x10710)))),IkReal((((cj5*x10710*x10711))+((cj5*x10708*x10710))+(((-1.0)*x10713*x10716))+(((-1.0)*x10708*x10713*x10714))+(((-1.0)*x10711*x10713*x10714))+((x10710*x10716)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10722.value)))+(x10723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10724=IKsin(j4);
IkReal x10725=IKcos(j4);
IkReal x10726=(cj0*cj2);
IkReal x10727=(cj5*cj6);
IkReal x10728=(r11*sj6);
IkReal x10729=(cj6*r20);
IkReal x10730=(cj5*sj6);
IkReal x10731=(cj6*r10);
IkReal x10732=(r01*sj6);
IkReal x10733=(cj0*sj2);
IkReal x10734=(r21*sj6);
IkReal x10735=(cj6*r00);
IkReal x10736=((1.0)*sj0);
IkReal x10737=(sj2*x10736);
IkReal x10738=((1.0)*x10725);
IkReal x10739=((1.0)*x10724);
IkReal x10740=(sj5*x10739);
evalcond[0]=((((-1.0)*x10734*x10738))+(((-1.0)*r20*x10730*x10739))+((x10725*x10729))+(((-1.0)*r22*x10740))+(((-1.0)*r21*x10727*x10739)));
evalcond[1]=((((-1.0)*r20*x10730*x10738))+((x10724*x10734))+(((-1.0)*x10729*x10739))+(((-1.0)*r21*x10727*x10738))+(((-1.0)*r22*sj5*x10738)));
evalcond[2]=((((-1.0)*x10731*x10739))+((cj2*sj0))+((x10724*x10728))+(((-1.0)*r10*x10730*x10738))+(((-1.0)*r12*sj5*x10738))+x10733+(((-1.0)*r11*x10727*x10738)));
evalcond[3]=((((-1.0)*r10*x10730*x10739))+((x10725*x10731))+(((-1.0)*x10737))+(((-1.0)*x10728*x10738))+(((-1.0)*r12*x10740))+x10726+(((-1.0)*r11*x10727*x10739)));
evalcond[4]=((((-1.0)*r00*x10730*x10738))+(((-1.0)*x10735*x10739))+(((-1.0)*r02*sj5*x10738))+((x10724*x10732))+(((-1.0)*x10737))+(((-1.0)*r01*x10727*x10738))+x10726);
evalcond[5]=((((-1.0)*r00*x10730*x10739))+(((-1.0)*x10732*x10738))+((x10725*x10735))+(((-1.0)*r02*x10740))+(((-1.0)*cj2*x10736))+(((-1.0)*r01*x10727*x10739))+(((-1.0)*x10733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10741=cj6*cj6;
IkReal x10742=cj5*cj5;
IkReal x10743=((1.0)*r11);
IkReal x10744=(r22*sj5);
IkReal x10745=(cj0*sj2);
IkReal x10746=(cj5*sj6);
IkReal x10747=(cj6*r20);
IkReal x10748=(cj2*sj0);
IkReal x10749=(r21*sj6);
IkReal x10750=(cj6*r10);
IkReal x10751=(r12*r22);
IkReal x10752=(r12*sj5);
IkReal x10753=(r21*x10741);
IkReal x10754=(r20*x10748);
IkReal x10755=(cj5*cj6*r21);
IkReal x10756=(r11*x10742);
IkReal x10757=(r10*r20*x10742);
CheckValue<IkReal> x10758=IKPowWithIntegerCheck(IKsign((((r20*x10746*x10752))+(((-1.0)*x10742*x10751))+((r11*r21))+((r10*r20*x10741))+(((-1.0)*x10749*x10750))+((r10*x10744*x10746))+((x10753*x10756))+((sj6*x10747*x10756))+((x10752*x10755))+((x10742*x10749*x10750))+(((-1.0)*sj6*x10743*x10747))+x10751+x10757+(((-1.0)*x10743*x10753))+((cj5*cj6*r11*x10744))+(((-1.0)*x10741*x10757)))),-1);
if(!x10758.valid){
continue;
}
CheckValue<IkReal> x10759 = IKatan2WithCheck(IkReal((((x10745*x10747))+(((-1.0)*x10748*x10749))+((x10747*x10748))+(((-1.0)*x10745*x10749)))),IkReal((((x10746*x10754))+((x10745*x10755))+((x10748*x10755))+((r20*x10745*x10746))+((x10744*x10745))+((x10744*x10748)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10758.value)))+(x10759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10760=IKsin(j4);
IkReal x10761=IKcos(j4);
IkReal x10762=(cj0*cj2);
IkReal x10763=(cj5*cj6);
IkReal x10764=(r11*sj6);
IkReal x10765=(cj6*r20);
IkReal x10766=(cj5*sj6);
IkReal x10767=(cj6*r10);
IkReal x10768=(r01*sj6);
IkReal x10769=(cj0*sj2);
IkReal x10770=(r21*sj6);
IkReal x10771=(cj6*r00);
IkReal x10772=((1.0)*sj0);
IkReal x10773=(sj2*x10772);
IkReal x10774=((1.0)*x10761);
IkReal x10775=((1.0)*x10760);
IkReal x10776=(sj5*x10775);
evalcond[0]=((((-1.0)*x10770*x10774))+(((-1.0)*r22*x10776))+((x10761*x10765))+(((-1.0)*r20*x10766*x10775))+(((-1.0)*r21*x10763*x10775)));
evalcond[1]=((((-1.0)*r22*sj5*x10774))+((x10760*x10770))+(((-1.0)*x10765*x10775))+(((-1.0)*r20*x10766*x10774))+(((-1.0)*r21*x10763*x10774)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r12*sj5*x10774))+(((-1.0)*r11*x10763*x10774))+((x10760*x10764))+(((-1.0)*x10767*x10775))+(((-1.0)*r10*x10766*x10774))+x10769);
evalcond[3]=((((-1.0)*r11*x10763*x10775))+(((-1.0)*r12*x10776))+(((-1.0)*x10773))+((x10761*x10767))+(((-1.0)*x10764*x10774))+(((-1.0)*r10*x10766*x10775))+x10762);
evalcond[4]=((((-1.0)*x10773))+(((-1.0)*r01*x10763*x10774))+(((-1.0)*r00*x10766*x10774))+(((-1.0)*r02*sj5*x10774))+((x10760*x10768))+(((-1.0)*x10771*x10775))+x10762);
evalcond[5]=((((-1.0)*r02*x10776))+(((-1.0)*x10769))+((x10761*x10771))+(((-1.0)*r01*x10763*x10775))+(((-1.0)*r00*x10766*x10775))+(((-1.0)*x10768*x10774))+(((-1.0)*cj2*x10772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10777=(cj0*cj2);
IkReal x10778=(cj6*r20);
IkReal x10779=(r21*sj6);
IkReal x10780=(sj0*sj2);
IkReal x10781=(r22*sj5);
IkReal x10782=(cj5*r20*sj6);
IkReal x10783=(cj5*cj6*r21);
CheckValue<IkReal> x10784=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10784.valid){
continue;
}
CheckValue<IkReal> x10785 = IKatan2WithCheck(IkReal(((((-1.0)*x10777*x10779))+((x10779*x10780))+((x10777*x10778))+(((-1.0)*x10778*x10780)))),IkReal(((((-1.0)*x10780*x10783))+(((-1.0)*x10780*x10782))+(((-1.0)*x10780*x10781))+((x10777*x10781))+((x10777*x10783))+((x10777*x10782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10784.value)))+(x10785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10786=IKsin(j4);
IkReal x10787=IKcos(j4);
IkReal x10788=(cj0*cj2);
IkReal x10789=(cj5*cj6);
IkReal x10790=(r11*sj6);
IkReal x10791=(cj6*r20);
IkReal x10792=(cj5*sj6);
IkReal x10793=(cj6*r10);
IkReal x10794=(r01*sj6);
IkReal x10795=(cj0*sj2);
IkReal x10796=(r21*sj6);
IkReal x10797=(cj6*r00);
IkReal x10798=((1.0)*sj0);
IkReal x10799=(sj2*x10798);
IkReal x10800=((1.0)*x10787);
IkReal x10801=((1.0)*x10786);
IkReal x10802=(sj5*x10801);
evalcond[0]=((((-1.0)*r20*x10792*x10801))+(((-1.0)*r22*x10802))+((x10787*x10791))+(((-1.0)*x10796*x10800))+(((-1.0)*r21*x10789*x10801)));
evalcond[1]=((((-1.0)*x10791*x10801))+(((-1.0)*r22*sj5*x10800))+(((-1.0)*r20*x10792*x10800))+(((-1.0)*r21*x10789*x10800))+((x10786*x10796)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*x10793*x10801))+(((-1.0)*r11*x10789*x10800))+(((-1.0)*r12*sj5*x10800))+(((-1.0)*r10*x10792*x10800))+x10795+((x10786*x10790)));
evalcond[3]=((((-1.0)*x10790*x10800))+(((-1.0)*r11*x10789*x10801))+((x10787*x10793))+(((-1.0)*x10799))+(((-1.0)*r10*x10792*x10801))+x10788+(((-1.0)*r12*x10802)));
evalcond[4]=((((-1.0)*x10797*x10801))+(((-1.0)*r00*x10792*x10800))+(((-1.0)*x10799))+x10788+(((-1.0)*r01*x10789*x10800))+((x10786*x10794))+(((-1.0)*r02*sj5*x10800)));
evalcond[5]=((((-1.0)*x10794*x10800))+(((-1.0)*r00*x10792*x10801))+(((-1.0)*cj2*x10798))+((x10787*x10797))+(((-1.0)*r02*x10802))+(((-1.0)*x10795))+(((-1.0)*r01*x10789*x10801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10803=cj5*cj5;
IkReal x10804=cj6*cj6;
IkReal x10805=r22*r22;
IkReal x10806=r21*r21;
IkReal x10807=r20*r20;
IkReal x10808=(cj6*r21);
IkReal x10809=(r20*sj6);
IkReal x10810=(cj1*cj5);
IkReal x10811=((1.0)*sj2);
IkReal x10812=(cj1*cj2);
IkReal x10813=(cj6*r20);
IkReal x10814=(r22*sj5);
IkReal x10815=(r21*sj6);
IkReal x10816=((2.0)*cj5);
IkReal x10817=((1.0)*x10806);
IkReal x10818=((1.0)*x10807);
IkReal x10819=(x10803*x10804);
CheckValue<IkReal> x10820 = IKatan2WithCheck(IkReal((((x10812*x10813))+(((-1.0)*x10808*x10810*x10811))+(((-1.0)*x10812*x10815))+(((-1.0)*cj1*x10811*x10814))+(((-1.0)*x10809*x10810*x10811)))),IkReal((((cj2*x10809*x10810))+((cj1*sj2*x10813))+((x10812*x10814))+(((-1.0)*cj1*x10811*x10815))+((cj2*x10808*x10810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10820.valid){
continue;
}
CheckValue<IkReal> x10821=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10817*x10819))+(((-1.0)*x10809*x10814*x10816))+((x10803*x10805))+(((-2.0)*x10803*x10808*x10809))+((x10807*x10819))+(((-1.0)*x10808*x10814*x10816))+(((-1.0)*x10805))+((x10804*x10806))+(((-1.0)*x10804*x10818))+(((-1.0)*x10803*x10818))+(((-1.0)*x10817))+(((2.0)*x10808*x10809)))),-1);
if(!x10821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10820.value)+(((1.5707963267949)*(x10821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10822=IKsin(j4);
IkReal x10823=IKcos(j4);
IkReal x10824=(cj5*cj6);
IkReal x10825=(cj0*sj1);
IkReal x10826=(r11*sj6);
IkReal x10827=(cj6*r20);
IkReal x10828=(cj5*sj6);
IkReal x10829=(cj6*r10);
IkReal x10830=((1.0)*cj2);
IkReal x10831=(r21*sj6);
IkReal x10832=(cj6*r00);
IkReal x10833=(sj0*sj1);
IkReal x10834=(r01*sj6);
IkReal x10835=((1.0)*x10823);
IkReal x10836=((1.0)*x10822);
IkReal x10837=(sj5*x10836);
evalcond[0]=(((x10823*x10827))+((cj1*sj2))+(((-1.0)*r20*x10828*x10836))+(((-1.0)*x10831*x10835))+(((-1.0)*r21*x10824*x10836))+(((-1.0)*r22*x10837)));
evalcond[1]=((((-1.0)*r20*x10828*x10835))+(((-1.0)*r22*sj5*x10835))+(((-1.0)*x10827*x10836))+((x10822*x10831))+(((-1.0)*cj1*x10830))+(((-1.0)*r21*x10824*x10835)));
evalcond[2]=(((x10823*x10829))+(((-1.0)*r11*x10824*x10836))+((cj0*cj2))+(((-1.0)*x10826*x10835))+(((-1.0)*r10*x10828*x10836))+(((-1.0)*r12*x10837))+((sj2*x10833)));
evalcond[3]=(((x10823*x10832))+(((-1.0)*x10834*x10835))+((sj2*x10825))+(((-1.0)*r01*x10824*x10836))+(((-1.0)*r02*x10837))+(((-1.0)*sj0*x10830))+(((-1.0)*r00*x10828*x10836)));
evalcond[4]=((((-1.0)*r12*sj5*x10835))+(((-1.0)*r11*x10824*x10835))+(((-1.0)*r10*x10828*x10835))+(((-1.0)*x10829*x10836))+(((-1.0)*x10830*x10833))+((x10822*x10826))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r02*sj5*x10835))+(((-1.0)*x10825*x10830))+(((-1.0)*sj0*sj2))+(((-1.0)*x10832*x10836))+(((-1.0)*r01*x10824*x10835))+((x10822*x10834))+(((-1.0)*r00*x10828*x10835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10838=(cj6*r21);
IkReal x10839=(r20*sj6);
IkReal x10840=(cj1*sj2);
IkReal x10841=((1.0)*cj6);
IkReal x10842=((1.0)*sj5);
IkReal x10843=(cj0*cj2);
IkReal x10844=(r21*sj6);
IkReal x10845=(sj0*sj1*sj2);
IkReal x10846=((1.0)*cj5*x10843);
IkReal x10847=((1.0)*cj5*x10845);
CheckValue<IkReal> x10848 = IKatan2WithCheck(IkReal((((x10843*x10844))+((cj6*r10*x10840))+((x10844*x10845))+(((-1.0)*r11*sj6*x10840))+(((-1.0)*r20*x10841*x10845))+(((-1.0)*r20*x10841*x10843)))),IkReal(((((-1.0)*r22*x10842*x10843))+(((-1.0)*r22*x10842*x10845))+(((-1.0)*x10839*x10847))+(((-1.0)*x10839*x10846))+((r12*sj5*x10840))+((cj5*r10*sj6*x10840))+((cj5*cj6*r11*x10840))+(((-1.0)*x10838*x10846))+(((-1.0)*x10838*x10847)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10848.valid){
continue;
}
CheckValue<IkReal> x10849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x10842))+(((-1.0)*r01*sj5*x10841))+((cj5*r02)))),-1);
if(!x10849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10848.value)+(((1.5707963267949)*(x10849.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10850=IKsin(j4);
IkReal x10851=IKcos(j4);
IkReal x10852=(cj5*cj6);
IkReal x10853=(cj0*sj1);
IkReal x10854=(r11*sj6);
IkReal x10855=(cj6*r20);
IkReal x10856=(cj5*sj6);
IkReal x10857=(cj6*r10);
IkReal x10858=((1.0)*cj2);
IkReal x10859=(r21*sj6);
IkReal x10860=(cj6*r00);
IkReal x10861=(sj0*sj1);
IkReal x10862=(r01*sj6);
IkReal x10863=((1.0)*x10851);
IkReal x10864=((1.0)*x10850);
IkReal x10865=(sj5*x10864);
evalcond[0]=((((-1.0)*r22*x10865))+(((-1.0)*r20*x10856*x10864))+(((-1.0)*x10859*x10863))+((cj1*sj2))+(((-1.0)*r21*x10852*x10864))+((x10851*x10855)));
evalcond[1]=((((-1.0)*r20*x10856*x10863))+(((-1.0)*r21*x10852*x10863))+((x10850*x10859))+(((-1.0)*x10855*x10864))+(((-1.0)*r22*sj5*x10863))+(((-1.0)*cj1*x10858)));
evalcond[2]=((((-1.0)*r12*x10865))+(((-1.0)*r10*x10856*x10864))+((cj0*cj2))+((sj2*x10861))+(((-1.0)*r11*x10852*x10864))+(((-1.0)*x10854*x10863))+((x10851*x10857)));
evalcond[3]=((((-1.0)*r00*x10856*x10864))+(((-1.0)*x10862*x10863))+(((-1.0)*r01*x10852*x10864))+(((-1.0)*sj0*x10858))+((sj2*x10853))+((x10851*x10860))+(((-1.0)*r02*x10865)));
evalcond[4]=((((-1.0)*r12*sj5*x10863))+(((-1.0)*x10858*x10861))+(((-1.0)*r10*x10856*x10863))+(((-1.0)*r11*x10852*x10863))+(((-1.0)*x10857*x10864))+((x10850*x10854))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r00*x10856*x10863))+(((-1.0)*r01*x10852*x10863))+(((-1.0)*x10860*x10864))+(((-1.0)*x10853*x10858))+(((-1.0)*sj0*sj2))+((x10850*x10862))+(((-1.0)*r02*sj5*x10863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10866=(cj6*r20);
IkReal x10867=(cj2*sj0);
IkReal x10868=((1.0)*sj2);
IkReal x10869=(cj0*sj1);
IkReal x10870=(cj1*r01);
IkReal x10871=(r22*sj5);
IkReal x10872=(cj5*cj6);
IkReal x10873=(cj1*sj2);
IkReal x10874=(r21*sj6);
IkReal x10875=(cj5*r20*sj6);
CheckValue<IkReal> x10876=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10876.valid){
continue;
}
CheckValue<IkReal> x10877 = IKatan2WithCheck(IkReal((((cj6*r00*x10873))+((sj2*x10869*x10874))+(((-1.0)*sj6*x10868*x10870))+(((-1.0)*x10866*x10868*x10869))+(((-1.0)*x10867*x10874))+((x10866*x10867)))),IkReal((((cj5*r00*sj6*x10873))+((r21*x10867*x10872))+(((-1.0)*x10868*x10869*x10875))+(((-1.0)*x10868*x10869*x10871))+((sj2*x10870*x10872))+((x10867*x10875))+((x10867*x10871))+((r02*sj5*x10873))+(((-1.0)*r21*x10868*x10869*x10872)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10876.value)))+(x10877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10878=IKsin(j4);
IkReal x10879=IKcos(j4);
IkReal x10880=(cj5*cj6);
IkReal x10881=(cj0*sj1);
IkReal x10882=(r11*sj6);
IkReal x10883=(cj6*r20);
IkReal x10884=(cj5*sj6);
IkReal x10885=(cj6*r10);
IkReal x10886=((1.0)*cj2);
IkReal x10887=(r21*sj6);
IkReal x10888=(cj6*r00);
IkReal x10889=(sj0*sj1);
IkReal x10890=(r01*sj6);
IkReal x10891=((1.0)*x10879);
IkReal x10892=((1.0)*x10878);
IkReal x10893=(sj5*x10892);
evalcond[0]=((((-1.0)*r20*x10884*x10892))+((cj1*sj2))+(((-1.0)*x10887*x10891))+(((-1.0)*r21*x10880*x10892))+((x10879*x10883))+(((-1.0)*r22*x10893)));
evalcond[1]=((((-1.0)*cj1*x10886))+(((-1.0)*r20*x10884*x10891))+(((-1.0)*r22*sj5*x10891))+(((-1.0)*r21*x10880*x10891))+(((-1.0)*x10883*x10892))+((x10878*x10887)));
evalcond[2]=((((-1.0)*r11*x10880*x10892))+((sj2*x10889))+(((-1.0)*r10*x10884*x10892))+((cj0*cj2))+((x10879*x10885))+(((-1.0)*x10882*x10891))+(((-1.0)*r12*x10893)));
evalcond[3]=(((sj2*x10881))+(((-1.0)*x10890*x10891))+(((-1.0)*r02*x10893))+(((-1.0)*r00*x10884*x10892))+((x10879*x10888))+(((-1.0)*r01*x10880*x10892))+(((-1.0)*sj0*x10886)));
evalcond[4]=((((-1.0)*r11*x10880*x10891))+(((-1.0)*r10*x10884*x10891))+(((-1.0)*x10886*x10889))+(((-1.0)*r12*sj5*x10891))+(((-1.0)*x10885*x10892))+((cj0*sj2))+((x10878*x10882)));
evalcond[5]=((((-1.0)*x10888*x10892))+(((-1.0)*r02*sj5*x10891))+(((-1.0)*r00*x10884*x10891))+(((-1.0)*r01*x10880*x10891))+(((-1.0)*sj0*sj2))+(((-1.0)*x10881*x10886))+((x10878*x10890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10894=cj5*cj5;
IkReal x10895=cj6*cj6;
IkReal x10896=r22*r22;
IkReal x10897=r21*r21;
IkReal x10898=r20*r20;
IkReal x10899=(cj6*r21);
IkReal x10900=(r20*sj6);
IkReal x10901=(cj1*cj5);
IkReal x10902=((1.0)*sj2);
IkReal x10903=(cj1*cj2);
IkReal x10904=(cj6*r20);
IkReal x10905=(r22*sj5);
IkReal x10906=(r21*sj6);
IkReal x10907=((2.0)*cj5);
IkReal x10908=((1.0)*x10897);
IkReal x10909=((1.0)*x10898);
IkReal x10910=(x10894*x10895);
CheckValue<IkReal> x10911=IKPowWithIntegerCheck(IKsign(((((2.0)*x10899*x10900))+(((-1.0)*x10908*x10910))+(((-1.0)*x10900*x10905*x10907))+(((-1.0)*x10895*x10909))+(((-1.0)*x10896))+(((-1.0)*x10899*x10905*x10907))+(((-2.0)*x10894*x10899*x10900))+((x10898*x10910))+(((-1.0)*x10908))+((x10895*x10897))+((x10894*x10896))+(((-1.0)*x10894*x10909)))),-1);
if(!x10911.valid){
continue;
}
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x10902*x10905))+(((-1.0)*x10900*x10901*x10902))+((x10903*x10904))+(((-1.0)*x10899*x10901*x10902))+(((-1.0)*x10903*x10906)))),IkReal(((((-1.0)*cj1*x10902*x10906))+((x10903*x10905))+((cj2*x10900*x10901))+((cj1*sj2*x10904))+((cj2*x10899*x10901)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10911.value)))+(x10912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x10913=IKsin(j4);
IkReal x10914=IKcos(j4);
IkReal x10915=((1.0)*r21);
IkReal x10916=(r22*sj5);
IkReal x10917=(cj5*cj6);
IkReal x10918=(cj6*r20);
IkReal x10919=(cj5*r20);
IkReal x10920=(sj6*x10914);
IkReal x10921=((1.0)*x10913);
evalcond[0]=(((cj1*sj2))+(((-1.0)*sj6*x10919*x10921))+(((-1.0)*x10913*x10915*x10917))+(((-1.0)*x10915*x10920))+((x10914*x10918))+(((-1.0)*x10916*x10921)));
evalcond[1]=((((-1.0)*x10919*x10920))+(((-1.0)*x10914*x10915*x10917))+(((-1.0)*cj1*cj2))+(((-1.0)*x10918*x10921))+(((-1.0)*x10914*x10916))+((r21*sj6*x10913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x10922=((1.0)*cj6*sj5);
IkReal x10923=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x10923))+(((-1.0)*r11*x10922)))))+(IKabs(((((-1.0)*r01*x10922))+(((-1.0)*r00*x10923))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=sj1;
j0eval[2]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10924=(cj6*r10);
IkReal x10925=(sj2*sj4);
IkReal x10926=(r12*sj5);
IkReal x10927=(r01*sj6);
IkReal x10928=(cj2*r11);
IkReal x10929=(cj4*sj6);
IkReal x10930=((1.0)*cj6);
IkReal x10931=(cj4*r00);
IkReal x10932=(cj5*sj6);
IkReal x10933=(cj5*cj6);
IkReal x10934=(cj2*sj4);
IkReal x10935=(r02*sj5);
IkReal x10936=(cj4*sj2);
IkReal x10937=((1.0)*cj2*cj4);
if( IKabs((((r11*sj2*x10929))+(((-1.0)*x10934*x10935))+(((-1.0)*x10927*x10937))+(((-1.0)*x10924*x10936))+(((-1.0)*r00*x10932*x10934))+((x10925*x10926))+(((-1.0)*cj5*r01*x10930*x10934))+((cj2*cj6*x10931))+((r10*x10925*x10932))+((r11*x10925*x10933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x10932*x10934))+((sj4*x10928*x10933))+((x10926*x10934))+((x10927*x10936))+(((-1.0)*x10924*x10937))+((x10928*x10929))+((x10925*x10935))+(((-1.0)*sj2*x10930*x10931))+((r01*x10925*x10933))+((r00*x10925*x10932)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj2*x10929))+(((-1.0)*x10934*x10935))+(((-1.0)*x10927*x10937))+(((-1.0)*x10924*x10936))+(((-1.0)*r00*x10932*x10934))+((x10925*x10926))+(((-1.0)*cj5*r01*x10930*x10934))+((cj2*cj6*x10931))+((r10*x10925*x10932))+((r11*x10925*x10933))))+IKsqr((((r10*x10932*x10934))+((sj4*x10928*x10933))+((x10926*x10934))+((x10927*x10936))+(((-1.0)*x10924*x10937))+((x10928*x10929))+((x10925*x10935))+(((-1.0)*sj2*x10930*x10931))+((r01*x10925*x10933))+((r00*x10925*x10932))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*sj2*x10929))+(((-1.0)*x10934*x10935))+(((-1.0)*x10927*x10937))+(((-1.0)*x10924*x10936))+(((-1.0)*r00*x10932*x10934))+((x10925*x10926))+(((-1.0)*cj5*r01*x10930*x10934))+((cj2*cj6*x10931))+((r10*x10925*x10932))+((r11*x10925*x10933))), (((r10*x10932*x10934))+((sj4*x10928*x10933))+((x10926*x10934))+((x10927*x10936))+(((-1.0)*x10924*x10937))+((x10928*x10929))+((x10925*x10935))+(((-1.0)*sj2*x10930*x10931))+((r01*x10925*x10933))+((r00*x10925*x10932))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x10938=IKcos(j0);
IkReal x10939=IKsin(j0);
IkReal x10940=((1.0)*sj4);
IkReal x10941=((0.37429)*sj5);
IkReal x10942=(r10*sj6);
IkReal x10943=(cj6*r00);
IkReal x10944=((0.37429)*cj5);
IkReal x10945=(cj6*r01);
IkReal x10946=((0.01)*cj5);
IkReal x10947=((1.0)*cj4);
IkReal x10948=(r00*sj6);
IkReal x10949=(r02*sj5);
IkReal x10950=(r12*sj5);
IkReal x10951=(cj6*r10);
IkReal x10952=(r01*sj6);
IkReal x10953=(r11*sj6);
IkReal x10954=(sj2*x10938);
IkReal x10955=(cj5*cj6*r11);
IkReal x10956=((0.069)*x10939);
IkReal x10957=(cj2*x10938);
IkReal x10958=((0.069)*x10938);
IkReal x10959=(sj2*x10939);
IkReal x10960=((1.0)*cj2*x10939);
evalcond[0]=((((-1.0)*x10947*x10953))+(((-1.0)*cj5*x10940*x10942))+((cj4*x10951))+x10959+x10957+(((-1.0)*x10940*x10950))+(((-1.0)*x10940*x10955)));
evalcond[1]=((((-1.0)*x10947*x10952))+(((-1.0)*cj5*x10940*x10948))+(((-1.0)*cj5*x10940*x10945))+((cj4*x10943))+(((-1.0)*x10960))+(((-1.0)*x10940*x10949))+x10954);
evalcond[2]=((((-1.0)*x10947*x10950))+(((-1.0)*x10947*x10955))+((sj4*x10953))+(((-1.0)*cj5*x10942*x10947))+(((-1.0)*x10960))+x10954+(((-1.0)*x10940*x10951)));
evalcond[3]=((((-1.0)*cj5*x10945*x10947))+(((-1.0)*cj5*x10947*x10948))+((sj4*x10952))+(((-1.0)*x10957))+(((-1.0)*x10959))+(((-1.0)*x10947*x10949))+(((-1.0)*x10940*x10943)));
evalcond[4]=((((-1.0)*x10941*x10948))+(((-1.0)*x10941*x10945))+((x10946*x10948))+(((-1.0)*px))+((r02*x10944))+(((-1.0)*sj2*x10956))+(((-0.069)*x10957))+((x10945*x10946))+(((0.01)*x10949))+x10958);
evalcond[5]=((((-1.0)*cj2*x10956))+((x10942*x10946))+(((0.01)*x10950))+((cj6*r11*x10946))+((r12*x10944))+(((-1.0)*x10941*x10942))+(((0.069)*x10954))+(((-1.0)*py))+(((-1.0)*cj6*r11*x10941))+x10956);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10961=(cj5*cj6);
IkReal x10962=((1.0)*sj2);
IkReal x10963=(cj2*cj4);
IkReal x10964=(r12*sj5);
IkReal x10965=(cj4*sj2);
IkReal x10966=(r10*sj4);
IkReal x10967=(cj5*sj6);
IkReal x10968=(cj6*r10);
IkReal x10969=(r11*sj6);
IkReal x10970=(sj4*x10964);
IkReal x10971=(cj2*r11*sj4);
IkReal x10972=(r11*sj4*x10962);
IkReal x10973=(cj2*r10*x10967);
if( IKabs(((((-1.0)*x10961*x10972))+((x10965*x10968))+(((-1.0)*x10962*x10966*x10967))+((x10963*x10964))+(((-1.0)*x10962*x10970))+((r11*x10961*x10963))+((r10*x10963*x10967))+((cj2*cj6*x10966))+(((-1.0)*cj2*sj4*x10969))+(((-1.0)*cj4*x10962*x10969)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x10963*x10969))+(((-1.0)*x10963*x10968))+((x10964*x10965))+((cj2*x10966*x10967))+((r10*x10965*x10967))+((r11*x10961*x10965))+(((-1.0)*sj4*x10962*x10969))+((cj6*sj2*x10966))+((x10961*x10971))+((cj2*x10970)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x10961*x10972))+((x10965*x10968))+(((-1.0)*x10962*x10966*x10967))+((x10963*x10964))+(((-1.0)*x10962*x10970))+((r11*x10961*x10963))+((r10*x10963*x10967))+((cj2*cj6*x10966))+(((-1.0)*cj2*sj4*x10969))+(((-1.0)*cj4*x10962*x10969))))+IKsqr((((x10963*x10969))+(((-1.0)*x10963*x10968))+((x10964*x10965))+((cj2*x10966*x10967))+((r10*x10965*x10967))+((r11*x10961*x10965))+(((-1.0)*sj4*x10962*x10969))+((cj6*sj2*x10966))+((x10961*x10971))+((cj2*x10970))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x10961*x10972))+((x10965*x10968))+(((-1.0)*x10962*x10966*x10967))+((x10963*x10964))+(((-1.0)*x10962*x10970))+((r11*x10961*x10963))+((r10*x10963*x10967))+((cj2*cj6*x10966))+(((-1.0)*cj2*sj4*x10969))+(((-1.0)*cj4*x10962*x10969))), (((x10963*x10969))+(((-1.0)*x10963*x10968))+((x10964*x10965))+((cj2*x10966*x10967))+((r10*x10965*x10967))+((r11*x10961*x10965))+(((-1.0)*sj4*x10962*x10969))+((cj6*sj2*x10966))+((x10961*x10971))+((cj2*x10970))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x10974=IKcos(j0);
IkReal x10975=IKsin(j0);
IkReal x10976=((1.0)*sj4);
IkReal x10977=((0.37429)*sj5);
IkReal x10978=(r10*sj6);
IkReal x10979=(cj6*r00);
IkReal x10980=((0.37429)*cj5);
IkReal x10981=(cj6*r01);
IkReal x10982=((0.01)*cj5);
IkReal x10983=(r12*sj5);
IkReal x10984=(r00*sj6);
IkReal x10985=(r02*sj5);
IkReal x10986=((1.0)*cj4);
IkReal x10987=(cj6*r10);
IkReal x10988=(r01*sj6);
IkReal x10989=(r11*sj6);
IkReal x10990=(cj2*x10974);
IkReal x10991=(cj5*cj6*r11);
IkReal x10992=((0.069)*x10975);
IkReal x10993=(sj2*x10974);
IkReal x10994=(cj2*x10975);
IkReal x10995=((1.0)*sj2*x10975);
evalcond[0]=((((-1.0)*x10983*x10986))+(((-1.0)*x10986*x10991))+(((-1.0)*cj5*x10978*x10986))+((sj4*x10989))+x10994+x10993+(((-1.0)*x10976*x10987)));
evalcond[1]=((((-1.0)*cj5*x10976*x10978))+(((-1.0)*x10986*x10989))+(((-1.0)*x10995))+((cj4*x10987))+(((-1.0)*x10976*x10991))+x10990+(((-1.0)*x10976*x10983)));
evalcond[2]=((((-1.0)*x10976*x10979))+(((-1.0)*x10985*x10986))+((sj4*x10988))+(((-1.0)*x10995))+x10990+(((-1.0)*cj5*x10984*x10986))+(((-1.0)*cj5*x10981*x10986)));
evalcond[3]=((((-1.0)*cj5*x10976*x10984))+(((-1.0)*cj5*x10976*x10981))+(((-1.0)*x10986*x10988))+(((-1.0)*x10993))+(((-1.0)*x10994))+((cj4*x10979))+(((-1.0)*x10976*x10985)));
evalcond[4]=((((-1.0)*sj2*x10992))+(((0.069)*x10974))+(((-1.0)*px))+((x10982*x10984))+(((-1.0)*x10977*x10984))+(((-1.0)*x10977*x10981))+((x10981*x10982))+(((0.069)*x10990))+((r02*x10980))+(((0.01)*x10985)));
evalcond[5]=(((x10978*x10982))+((r12*x10980))+((cj2*x10992))+(((-1.0)*py))+(((0.069)*x10993))+(((-1.0)*x10977*x10978))+((cj6*r11*x10982))+(((-1.0)*cj6*r11*x10977))+(((0.01)*x10983))+x10992);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10996=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x10996))+(((-1.0)*r10*sj6*x10996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x10996))+(((-1.0)*cj6*r01*x10996))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x10996))+(((-1.0)*r10*sj6*x10996))))+IKsqr(((((-1.0)*r00*sj6*x10996))+(((-1.0)*cj6*r01*x10996))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x10996))+(((-1.0)*r10*sj6*x10996))), ((((-1.0)*r00*sj6*x10996))+(((-1.0)*cj6*r01*x10996))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x10997=IKcos(j0);
IkReal x10998=IKsin(j0);
IkReal x10999=((1.0)*cj5);
IkReal x11000=(cj6*sj4);
IkReal x11001=(cj4*sj6);
IkReal x11002=(cj5*r12);
IkReal x11003=((0.37429)*sj5);
IkReal x11004=(r10*sj6);
IkReal x11005=((1.0)*r00);
IkReal x11006=((0.069)*sj2);
IkReal x11007=(cj6*r01);
IkReal x11008=((0.01)*cj5);
IkReal x11009=(r00*sj6);
IkReal x11010=((1.0)*sj5);
IkReal x11011=(cj6*r11);
IkReal x11012=(cj4*cj6);
IkReal x11013=(cj5*r02);
IkReal x11014=((0.01)*sj5);
IkReal x11015=(sj4*sj6);
IkReal x11016=((1.0)*x10998);
evalcond[0]=((((-1.0)*sj5*sj6*x11005))+x11013+(((-1.0)*x10997))+(((-1.0)*x11007*x11010)));
evalcond[1]=((((-1.0)*x11016))+(((-1.0)*x11010*x11011))+(((-1.0)*x11004*x11010))+x11002);
evalcond[2]=((((-1.0)*r11*x11001))+((r10*x11012))+((cj2*x10997))+(((-1.0)*r11*x10999*x11000))+(((-1.0)*r12*sj4*x11010))+(((-1.0)*sj4*x10999*x11004)));
evalcond[3]=(((sj2*x10997))+(((-1.0)*r10*x11000))+(((-1.0)*cj4*r12*x11010))+((r11*x11015))+(((-1.0)*cj4*x10999*x11011))+(((-1.0)*r10*x10999*x11001)));
evalcond[4]=((((-1.0)*r02*sj4*x11010))+((r00*x11012))+(((-1.0)*sj4*x10999*x11009))+(((-1.0)*r01*x11001))+(((-1.0)*cj2*x11016))+(((-1.0)*r01*x10999*x11000)));
evalcond[5]=((((-1.0)*cj4*r02*x11010))+(((-1.0)*r00*x10999*x11001))+(((-1.0)*sj2*x11016))+(((-1.0)*x11000*x11005))+(((-1.0)*cj4*x10999*x11007))+((r01*x11015)));
evalcond[6]=(((x11008*x11009))+((x11007*x11008))+(((-1.0)*x10998*x11006))+(((0.37429)*x11013))+(((-1.0)*px))+(((-1.0)*x11003*x11009))+(((-1.0)*x11003*x11007))+(((0.43342)*x10997))+((r02*x11014)));
evalcond[7]=(((x11008*x11011))+((x11004*x11008))+(((-1.0)*x11003*x11011))+(((-1.0)*py))+(((0.37429)*x11002))+(((-1.0)*x11003*x11004))+((r12*x11014))+((x10997*x11006))+(((0.43342)*x10998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11017=(cj6*sj5);
IkReal x11018=(sj5*sj6);
IkReal x11019=((1.0)*cj5);
if( IKabs((((r10*x11018))+(((-1.0)*r12*x11019))+((r11*x11017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x11019))+((r00*x11018))+((r01*x11017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x11018))+(((-1.0)*r12*x11019))+((r11*x11017))))+IKsqr(((((-1.0)*r02*x11019))+((r00*x11018))+((r01*x11017))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x11018))+(((-1.0)*r12*x11019))+((r11*x11017))), ((((-1.0)*r02*x11019))+((r00*x11018))+((r01*x11017))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11020=IKcos(j0);
IkReal x11021=IKsin(j0);
IkReal x11022=((1.0)*cj5);
IkReal x11023=(cj6*sj4);
IkReal x11024=(cj4*sj6);
IkReal x11025=(cj5*r12);
IkReal x11026=((0.37429)*sj5);
IkReal x11027=(r10*sj6);
IkReal x11028=((1.0)*r00);
IkReal x11029=((0.069)*sj2);
IkReal x11030=(cj6*r01);
IkReal x11031=((0.01)*cj5);
IkReal x11032=(r00*sj6);
IkReal x11033=((1.0)*sj5);
IkReal x11034=(cj6*r11);
IkReal x11035=((0.01)*sj5);
IkReal x11036=(cj4*cj6);
IkReal x11037=(cj5*r02);
IkReal x11038=(sj4*sj6);
IkReal x11039=((1.0)*x11021);
evalcond[0]=(x11020+x11037+(((-1.0)*sj5*sj6*x11028))+(((-1.0)*x11030*x11033)));
evalcond[1]=(x11025+x11021+(((-1.0)*x11033*x11034))+(((-1.0)*x11027*x11033)));
evalcond[2]=(((cj2*x11020))+(((-1.0)*r11*x11024))+(((-1.0)*r11*x11022*x11023))+(((-1.0)*sj4*x11022*x11027))+((r10*x11036))+(((-1.0)*r12*sj4*x11033)));
evalcond[3]=((((-1.0)*r10*x11022*x11024))+(((-1.0)*cj4*r12*x11033))+((sj2*x11020))+(((-1.0)*cj4*x11022*x11034))+(((-1.0)*r10*x11023))+((r11*x11038)));
evalcond[4]=(((r00*x11036))+(((-1.0)*sj4*x11022*x11032))+(((-1.0)*r01*x11024))+(((-1.0)*cj2*x11039))+(((-1.0)*r01*x11022*x11023))+(((-1.0)*r02*sj4*x11033)));
evalcond[5]=(((r01*x11038))+(((-1.0)*sj2*x11039))+(((-1.0)*r00*x11022*x11024))+(((-1.0)*x11023*x11028))+(((-1.0)*cj4*x11022*x11030))+(((-1.0)*cj4*r02*x11033)));
evalcond[6]=((((-0.29542)*x11020))+(((0.37429)*x11037))+((x11030*x11031))+(((-1.0)*px))+(((-1.0)*x11021*x11029))+(((-1.0)*x11026*x11032))+(((-1.0)*x11026*x11030))+((x11031*x11032))+((r02*x11035)));
evalcond[7]=((((-0.29542)*x11021))+(((0.37429)*x11025))+((x11020*x11029))+(((-1.0)*py))+((x11027*x11031))+((r12*x11035))+(((-1.0)*x11026*x11027))+(((-1.0)*x11026*x11034))+((x11031*x11034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x11040=((1.0)*cj6*sj5);
IkReal x11041=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r01*x11040))+(((-1.0)*r00*x11041))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r11*x11040))+(((-1.0)*r10*x11041))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11042=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x11042))+(((-1.0)*r10*sj6*x11042)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x11042))+(((-1.0)*r00*sj6*x11042))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x11042))+(((-1.0)*r10*sj6*x11042))))+IKsqr(((((-1.0)*cj6*r01*x11042))+(((-1.0)*r00*sj6*x11042))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x11042))+(((-1.0)*r10*sj6*x11042))), ((((-1.0)*cj6*r01*x11042))+(((-1.0)*r00*sj6*x11042))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11043=IKcos(j0);
IkReal x11044=IKsin(j0);
IkReal x11045=((1.0)*sj4);
IkReal x11046=(cj5*r12);
IkReal x11047=(r10*sj6);
IkReal x11048=((0.37429)*sj5);
IkReal x11049=(cj6*r01);
IkReal x11050=((0.01)*cj5);
IkReal x11051=(r12*sj5);
IkReal x11052=(r00*sj6);
IkReal x11053=((1.0)*sj5);
IkReal x11054=(r02*sj5);
IkReal x11055=(cj6*r11);
IkReal x11056=(cj4*cj6);
IkReal x11057=(cj5*r02);
IkReal x11058=((1.0)*x11044);
IkReal x11059=(cj5*x11055);
IkReal x11060=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x11052*x11053))+(((-1.0)*x11049*x11053))+x11057+(((-1.0)*x11043)));
evalcond[1]=(x11046+(((-1.0)*x11053*x11055))+(((-1.0)*x11047*x11053))+(((-1.0)*x11058)));
evalcond[2]=(((r10*x11056))+(((-1.0)*x11045*x11059))+(((-1.0)*x11045*x11051))+x11043+(((-1.0)*r11*x11060))+(((-1.0)*cj5*x11045*x11047)));
evalcond[3]=((((-1.0)*r01*x11060))+(((-1.0)*x11045*x11054))+(((-1.0)*cj5*x11045*x11052))+((r00*x11056))+(((-1.0)*cj5*x11045*x11049))+(((-1.0)*x11058)));
evalcond[4]=((((0.37429)*x11057))+(((0.01)*x11054))+(((-1.0)*px))+((x11050*x11052))+(((0.43342)*x11043))+(((-1.0)*x11048*x11049))+((x11049*x11050))+(((-1.0)*x11048*x11052)));
evalcond[5]=(((x11047*x11050))+(((0.37429)*x11046))+(((0.01)*x11051))+(((-1.0)*py))+((x11050*x11055))+(((-1.0)*x11047*x11048))+(((0.43342)*x11044))+(((-1.0)*x11048*x11055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11061=(cj6*sj5);
IkReal x11062=(sj5*sj6);
IkReal x11063=((1.0)*cj5);
if( IKabs((((r10*x11062))+(((-1.0)*r12*x11063))+((r11*x11061)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x11063))+((r01*x11061))+((r00*x11062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x11062))+(((-1.0)*r12*x11063))+((r11*x11061))))+IKsqr(((((-1.0)*r02*x11063))+((r01*x11061))+((r00*x11062))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x11062))+(((-1.0)*r12*x11063))+((r11*x11061))), ((((-1.0)*r02*x11063))+((r01*x11061))+((r00*x11062))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11064=IKcos(j0);
IkReal x11065=IKsin(j0);
IkReal x11066=((1.0)*sj4);
IkReal x11067=(cj5*r12);
IkReal x11068=(r10*sj6);
IkReal x11069=((0.37429)*sj5);
IkReal x11070=(cj6*r01);
IkReal x11071=((0.01)*cj5);
IkReal x11072=(r12*sj5);
IkReal x11073=(r00*sj6);
IkReal x11074=((1.0)*sj5);
IkReal x11075=(r02*sj5);
IkReal x11076=(cj6*r11);
IkReal x11077=(cj4*cj6);
IkReal x11078=(cj5*r02);
IkReal x11079=(cj5*x11076);
IkReal x11080=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x11073*x11074))+(((-1.0)*x11070*x11074))+x11064+x11078);
evalcond[1]=(x11067+x11065+(((-1.0)*x11074*x11076))+(((-1.0)*x11068*x11074)));
evalcond[2]=(x11064+((r10*x11077))+(((-1.0)*r11*x11080))+(((-1.0)*x11066*x11079))+(((-1.0)*x11066*x11072))+(((-1.0)*cj5*x11066*x11068)));
evalcond[3]=((((-1.0)*cj5*x11066*x11070))+(((-1.0)*cj5*x11066*x11073))+(((-1.0)*x11066*x11075))+((r00*x11077))+(((-1.0)*r01*x11080))+(((-1.0)*x11065)));
evalcond[4]=((((0.01)*x11075))+(((-1.0)*px))+((x11071*x11073))+(((-0.29542)*x11064))+(((0.37429)*x11078))+((x11070*x11071))+(((-1.0)*x11069*x11070))+(((-1.0)*x11069*x11073)));
evalcond[5]=((((0.01)*x11072))+(((-1.0)*x11068*x11069))+(((0.37429)*x11067))+(((-1.0)*py))+((x11071*x11076))+((x11068*x11071))+(((-0.29542)*x11065))+(((-1.0)*x11069*x11076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11081=(cj4*sj6);
IkReal x11082=((1.0)*r01);
IkReal x11083=(cj5*sj4);
IkReal x11084=(sj4*sj5);
IkReal x11085=(cj4*cj6);
if( IKabs(((((-1.0)*x11081*x11082))+((r00*x11085))+(((-1.0)*cj6*x11082*x11083))+(((-1.0)*r00*sj6*x11083))+(((-1.0)*r02*x11084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r11*x11083))+((r10*sj6*x11083))+((r11*x11081))+((r12*x11084))+(((-1.0)*r10*x11085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11081*x11082))+((r00*x11085))+(((-1.0)*cj6*x11082*x11083))+(((-1.0)*r00*sj6*x11083))+(((-1.0)*r02*x11084))))+IKsqr((((cj6*r11*x11083))+((r10*sj6*x11083))+((r11*x11081))+((r12*x11084))+(((-1.0)*r10*x11085))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x11081*x11082))+((r00*x11085))+(((-1.0)*cj6*x11082*x11083))+(((-1.0)*r00*sj6*x11083))+(((-1.0)*r02*x11084))), (((cj6*r11*x11083))+((r10*sj6*x11083))+((r11*x11081))+((r12*x11084))+(((-1.0)*r10*x11085))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11086=IKcos(j0);
IkReal x11087=(cj5*r11);
IkReal x11088=(cj5*r01);
IkReal x11089=(cj4*cj6);
IkReal x11090=((1.0)*cj4);
IkReal x11091=(r01*sj6);
IkReal x11092=(r11*sj6);
IkReal x11093=((1.0)*(IKsin(j0)));
IkReal x11094=((1.0)*cj6*sj4);
IkReal x11095=((1.0)*sj4*sj5);
IkReal x11096=(cj5*r00*sj6);
IkReal x11097=((1.0)*cj5*r10*sj6);
evalcond[0]=((((-1.0)*r12*x11095))+(((-1.0)*sj4*x11097))+x11086+(((-1.0)*x11090*x11092))+((r10*x11089))+(((-1.0)*x11087*x11094)));
evalcond[1]=((((-1.0)*sj4*x11096))+(((-1.0)*x11093))+((r00*x11089))+(((-1.0)*r02*x11095))+(((-1.0)*x11090*x11091))+(((-1.0)*x11088*x11094)));
evalcond[2]=((((-1.0)*r10*x11094))+(((-1.0)*cj5*r10*sj6*x11090))+(((-1.0)*x11093))+(((-1.0)*x11087*x11089))+((sj4*x11092))+(((-1.0)*r12*sj5*x11090)));
evalcond[3]=((((-1.0)*x11086))+((sj4*x11091))+(((-1.0)*r00*x11094))+(((-1.0)*r02*sj5*x11090))+(((-1.0)*x11090*x11096))+(((-1.0)*x11088*x11089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11098=(r11*sj6);
IkReal x11099=(cj6*r10);
IkReal x11100=(r12*sj5);
IkReal x11101=(cj5*cj6*r11);
IkReal x11102=(cj5*r10*sj6);
if( IKabs(((((-1.0)*sj4*x11098))+((cj4*x11102))+((cj4*x11101))+((cj4*x11100))+((sj4*x11099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x11102))+((sj4*x11101))+((sj4*x11100))+(((-1.0)*cj4*x11099))+((cj4*x11098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x11098))+((cj4*x11102))+((cj4*x11101))+((cj4*x11100))+((sj4*x11099))))+IKsqr((((sj4*x11102))+((sj4*x11101))+((sj4*x11100))+(((-1.0)*cj4*x11099))+((cj4*x11098))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*sj4*x11098))+((cj4*x11102))+((cj4*x11101))+((cj4*x11100))+((sj4*x11099))), (((sj4*x11102))+((sj4*x11101))+((sj4*x11100))+(((-1.0)*cj4*x11099))+((cj4*x11098))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11103=IKcos(j0);
IkReal x11104=IKsin(j0);
IkReal x11105=((1.0)*sj4);
IkReal x11106=(r10*sj6);
IkReal x11107=((0.37429)*sj5);
IkReal x11108=(cj6*r00);
IkReal x11109=((0.01)*cj5);
IkReal x11110=((1.0)*cj4);
IkReal x11111=(r00*sj6);
IkReal x11112=(r02*sj5);
IkReal x11113=(sj4*sj6);
IkReal x11114=(r12*sj5);
IkReal x11115=((0.37429)*cj5);
IkReal x11116=(cj6*r10);
IkReal x11117=(cj5*cj6*r11);
IkReal x11118=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*cj5*x11105*x11106))+(((-1.0)*r11*sj6*x11110))+(((-1.0)*x11105*x11117))+(((-1.0)*x11105*x11114))+((cj4*x11116))+x11103);
evalcond[1]=((((-1.0)*x11105*x11116))+(((-1.0)*cj5*x11106*x11110))+x11104+(((-1.0)*x11110*x11114))+(((-1.0)*x11110*x11117))+((r11*x11113)));
evalcond[2]=((((-1.0)*x11105*x11108))+x11103+(((-1.0)*x11110*x11112))+(((-1.0)*x11110*x11118))+(((-1.0)*cj5*x11110*x11111))+((r01*x11113)));
evalcond[3]=((((-1.0)*x11104))+(((-1.0)*cj5*x11105*x11111))+(((-1.0)*x11105*x11112))+(((-1.0)*x11105*x11118))+((cj4*x11108))+(((-1.0)*r01*sj6*x11110)));
evalcond[4]=(((r02*x11115))+((cj6*r01*x11109))+(((0.01)*x11112))+(((-1.0)*cj6*r01*x11107))+(((-1.0)*x11107*x11111))+(((-1.0)*px))+((x11109*x11111))+(((0.138)*x11103)));
evalcond[5]=(((x11106*x11109))+(((-1.0)*cj6*r11*x11107))+(((0.01)*x11114))+(((-1.0)*py))+(((0.138)*x11104))+((r12*x11115))+((cj6*r11*x11109))+(((-1.0)*x11106*x11107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11119=((1.0)*cj6);
IkReal x11120=((1.0)*sj5);
IkReal x11121=(cj4*cj5);
CheckValue<IkReal> x11122=IKPowWithIntegerCheck(sj1,-1);
if(!x11122.valid){
continue;
}
CheckValue<IkReal> x11123=IKPowWithIntegerCheck(cj1,-1);
if(!x11123.valid){
continue;
}
if( IKabs(((x11122.value)*(((((-1.0)*r10*sj6*x11121))+(((-1.0)*r10*sj4*x11119))+(((-1.0)*cj4*r12*x11120))+((r11*sj4*sj6))+(((-1.0)*r11*x11119*x11121)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11123.value)*(((((-1.0)*r00*sj6*x11120))+(((-1.0)*r01*sj5*x11119))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11122.value)*(((((-1.0)*r10*sj6*x11121))+(((-1.0)*r10*sj4*x11119))+(((-1.0)*cj4*r12*x11120))+((r11*sj4*sj6))+(((-1.0)*r11*x11119*x11121))))))+IKsqr(((x11123.value)*(((((-1.0)*r00*sj6*x11120))+(((-1.0)*r01*sj5*x11119))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x11122.value)*(((((-1.0)*r10*sj6*x11121))+(((-1.0)*r10*sj4*x11119))+(((-1.0)*cj4*r12*x11120))+((r11*sj4*sj6))+(((-1.0)*r11*x11119*x11121))))), ((x11123.value)*(((((-1.0)*r00*sj6*x11120))+(((-1.0)*r01*sj5*x11119))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11124=IKcos(j0);
IkReal x11125=IKsin(j0);
IkReal x11126=((1.0)*cj5);
IkReal x11127=(cj6*sj4);
IkReal x11128=(r00*sj6);
IkReal x11129=(cj5*r12);
IkReal x11130=((0.37429)*sj5);
IkReal x11131=(r10*sj6);
IkReal x11132=((0.36442)*cj1);
IkReal x11133=(cj6*r01);
IkReal x11134=((0.01)*cj5);
IkReal x11135=((1.0)*sj5);
IkReal x11136=(cj6*r11);
IkReal x11137=(cj4*cj6);
IkReal x11138=(cj5*r02);
IkReal x11139=(r01*sj6);
IkReal x11140=((1.0)*cj4);
IkReal x11141=((0.01)*sj5);
IkReal x11142=(r11*sj6);
IkReal x11143=((0.069)*x11125);
IkReal x11144=((1.0)*x11125);
IkReal x11145=((1.0)*x11124);
IkReal x11146=((0.069)*x11124);
evalcond[0]=((((-1.0)*x11133*x11135))+(((-1.0)*cj1*x11145))+x11138+(((-1.0)*x11128*x11135)));
evalcond[1]=((((-1.0)*x11131*x11135))+(((-1.0)*x11135*x11136))+(((-1.0)*cj1*x11144))+x11129);
evalcond[2]=((((-1.0)*x11140*x11142))+(((-1.0)*sj4*x11126*x11131))+(((-1.0)*r12*sj4*x11135))+x11124+((r10*x11137))+(((-1.0)*r11*x11126*x11127)));
evalcond[3]=((((-1.0)*x11139*x11140))+(((-1.0)*r01*x11126*x11127))+(((-1.0)*r02*sj4*x11135))+(((-1.0)*x11144))+((r00*x11137))+(((-1.0)*sj4*x11126*x11128)));
evalcond[4]=(((sj4*x11142))+(((-1.0)*cj4*r12*x11135))+(((-1.0)*cj4*x11126*x11131))+(((-1.0)*cj4*x11126*x11136))+(((-1.0)*sj1*x11144))+(((-1.0)*r10*x11127)));
evalcond[5]=(((sj4*x11139))+(((-1.0)*cj4*x11126*x11128))+(((-1.0)*cj4*x11126*x11133))+(((-1.0)*r00*x11127))+(((-1.0)*sj1*x11145))+(((-1.0)*cj4*r02*x11135)));
evalcond[6]=(((x11124*x11132))+((r02*x11141))+((x11128*x11134))+x11146+(((-1.0)*px))+(((0.37429)*x11138))+(((-1.0)*x11128*x11130))+(((-1.0)*sj1*x11146))+((x11133*x11134))+(((-1.0)*x11130*x11133)));
evalcond[7]=((((0.37429)*x11129))+((x11134*x11136))+((x11131*x11134))+x11143+(((-1.0)*py))+((r12*x11141))+((x11125*x11132))+(((-1.0)*sj1*x11143))+(((-1.0)*x11130*x11131))+(((-1.0)*x11130*x11136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11147=(cj5*sj4);
IkReal x11148=(cj6*r11);
IkReal x11149=((1.0)*r10);
CheckValue<IkReal> x11150=IKPowWithIntegerCheck(cj1,-1);
if(!x11150.valid){
continue;
}
if( IKabs(((x11150.value)*(((((-1.0)*sj5*sj6*x11149))+((cj5*r12))+(((-1.0)*sj5*x11148)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x11147*x11148))+(((-1.0)*cj4*cj6*x11149))+((r10*sj6*x11147))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11150.value)*(((((-1.0)*sj5*sj6*x11149))+((cj5*r12))+(((-1.0)*sj5*x11148))))))+IKsqr((((x11147*x11148))+(((-1.0)*cj4*cj6*x11149))+((r10*sj6*x11147))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x11150.value)*(((((-1.0)*sj5*sj6*x11149))+((cj5*r12))+(((-1.0)*sj5*x11148))))), (((x11147*x11148))+(((-1.0)*cj4*cj6*x11149))+((r10*sj6*x11147))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11151=IKcos(j0);
IkReal x11152=IKsin(j0);
IkReal x11153=((1.0)*cj5);
IkReal x11154=(cj6*sj4);
IkReal x11155=(r00*sj6);
IkReal x11156=(cj5*r12);
IkReal x11157=((0.37429)*sj5);
IkReal x11158=(r10*sj6);
IkReal x11159=((0.36442)*cj1);
IkReal x11160=(cj6*r01);
IkReal x11161=((0.01)*cj5);
IkReal x11162=((1.0)*sj5);
IkReal x11163=(cj6*r11);
IkReal x11164=(cj4*cj6);
IkReal x11165=(cj5*r02);
IkReal x11166=(r01*sj6);
IkReal x11167=((1.0)*cj4);
IkReal x11168=((0.01)*sj5);
IkReal x11169=(r11*sj6);
IkReal x11170=((0.069)*x11152);
IkReal x11171=((1.0)*x11152);
IkReal x11172=((1.0)*x11151);
IkReal x11173=((0.069)*x11151);
evalcond[0]=((((-1.0)*x11155*x11162))+(((-1.0)*cj1*x11172))+x11165+(((-1.0)*x11160*x11162)));
evalcond[1]=((((-1.0)*x11158*x11162))+(((-1.0)*cj1*x11171))+x11156+(((-1.0)*x11162*x11163)));
evalcond[2]=((((-1.0)*x11167*x11169))+x11151+(((-1.0)*r11*x11153*x11154))+((r10*x11164))+(((-1.0)*sj4*x11153*x11158))+(((-1.0)*r12*sj4*x11162)));
evalcond[3]=(((r00*x11164))+(((-1.0)*r01*x11153*x11154))+(((-1.0)*x11171))+(((-1.0)*r02*sj4*x11162))+(((-1.0)*sj4*x11153*x11155))+(((-1.0)*x11166*x11167)));
evalcond[4]=((((-1.0)*cj4*r12*x11162))+(((-1.0)*sj1*x11171))+(((-1.0)*cj4*x11153*x11163))+(((-1.0)*cj4*x11153*x11158))+((sj4*x11169))+(((-1.0)*r10*x11154)));
evalcond[5]=((((-1.0)*sj1*x11172))+(((-1.0)*cj4*x11153*x11160))+(((-1.0)*cj4*x11153*x11155))+((sj4*x11166))+(((-1.0)*r00*x11154))+(((-1.0)*cj4*r02*x11162)));
evalcond[6]=((((-1.0)*x11157*x11160))+((x11160*x11161))+(((0.37429)*x11165))+(((-1.0)*sj1*x11173))+(((-1.0)*x11155*x11157))+x11173+(((-1.0)*px))+((r02*x11168))+((x11151*x11159))+((x11155*x11161)));
evalcond[7]=((((-1.0)*x11157*x11163))+((x11161*x11163))+((r12*x11168))+((x11158*x11161))+((x11152*x11159))+(((-1.0)*sj1*x11170))+x11170+(((-1.0)*py))+(((-1.0)*x11157*x11158))+(((0.37429)*x11156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11174=((1.0)*cj6*sj5);
IkReal x11175=((1.0)*sj5*sj6);
CheckValue<IkReal> x11176=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x11176.valid){
continue;
}
CheckValue<IkReal> x11177 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x11175))+(((-1.0)*r11*x11174)))),IkReal(((((-1.0)*r00*x11175))+(((-1.0)*r01*x11174))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11177.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11176.value)))+(x11177.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11178=IKcos(j0);
IkReal x11179=IKsin(j0);
IkReal x11180=((1.0)*cj5);
IkReal x11181=(cj6*sj4);
IkReal x11182=(r00*sj6);
IkReal x11183=(cj5*r12);
IkReal x11184=((0.37429)*sj5);
IkReal x11185=(r10*sj6);
IkReal x11186=((0.36442)*cj1);
IkReal x11187=(cj6*r01);
IkReal x11188=((0.01)*cj5);
IkReal x11189=((1.0)*sj5);
IkReal x11190=(cj6*r11);
IkReal x11191=(cj4*cj6);
IkReal x11192=(cj5*r02);
IkReal x11193=(r01*sj6);
IkReal x11194=((1.0)*cj4);
IkReal x11195=((0.01)*sj5);
IkReal x11196=(r11*sj6);
IkReal x11197=((0.069)*x11179);
IkReal x11198=((1.0)*x11179);
IkReal x11199=((1.0)*x11178);
IkReal x11200=((0.069)*x11178);
evalcond[0]=((((-1.0)*x11182*x11189))+x11192+(((-1.0)*cj1*x11199))+(((-1.0)*x11187*x11189)));
evalcond[1]=((((-1.0)*x11185*x11189))+(((-1.0)*x11189*x11190))+x11183+(((-1.0)*cj1*x11198)));
evalcond[2]=((((-1.0)*r12*sj4*x11189))+(((-1.0)*sj4*x11180*x11185))+(((-1.0)*r11*x11180*x11181))+x11178+(((-1.0)*x11194*x11196))+((r10*x11191)));
evalcond[3]=((((-1.0)*x11198))+(((-1.0)*r02*sj4*x11189))+(((-1.0)*sj4*x11180*x11182))+((r00*x11191))+(((-1.0)*r01*x11180*x11181))+(((-1.0)*x11193*x11194)));
evalcond[4]=((((-1.0)*sj1*x11198))+(((-1.0)*cj4*x11180*x11185))+(((-1.0)*cj4*x11180*x11190))+((sj4*x11196))+(((-1.0)*r10*x11181))+(((-1.0)*cj4*r12*x11189)));
evalcond[5]=((((-1.0)*sj1*x11199))+(((-1.0)*cj4*r02*x11189))+(((-1.0)*cj4*x11180*x11182))+(((-1.0)*cj4*x11180*x11187))+((sj4*x11193))+(((-1.0)*r00*x11181)));
evalcond[6]=((((-1.0)*x11182*x11184))+(((0.37429)*x11192))+x11200+(((-1.0)*x11184*x11187))+((x11182*x11188))+((x11178*x11186))+(((-1.0)*px))+((r02*x11195))+((x11187*x11188))+(((-1.0)*sj1*x11200)));
evalcond[7]=((((0.37429)*x11183))+(((-1.0)*sj1*x11197))+((r12*x11195))+(((-1.0)*x11184*x11185))+(((-1.0)*x11184*x11190))+((x11185*x11188))+x11197+(((-1.0)*py))+((x11179*x11186))+((x11188*x11190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x11201=((1.0)*cj6*sj5);
IkReal x11202=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r00*x11202))+(((-1.0)*r01*x11201))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x11202))+(((-1.0)*r11*x11201))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11203=(cj4*cj5);
IkReal x11204=((1.0)*sj5);
CheckValue<IkReal> x11205=IKPowWithIntegerCheck(sj1,-1);
if(!x11205.valid){
continue;
}
CheckValue<IkReal> x11206=IKPowWithIntegerCheck(cj1,-1);
if(!x11206.valid){
continue;
}
if( IKabs(((x11205.value)*((((cj6*r10*sj4))+((cj6*r11*x11203))+((r10*sj6*x11203))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11206.value)*(((((-1.0)*cj6*r01*x11204))+(((-1.0)*r00*sj6*x11204))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11205.value)*((((cj6*r10*sj4))+((cj6*r11*x11203))+((r10*sj6*x11203))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))))+IKsqr(((x11206.value)*(((((-1.0)*cj6*r01*x11204))+(((-1.0)*r00*sj6*x11204))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x11205.value)*((((cj6*r10*sj4))+((cj6*r11*x11203))+((r10*sj6*x11203))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))), ((x11206.value)*(((((-1.0)*cj6*r01*x11204))+(((-1.0)*r00*sj6*x11204))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11207=IKsin(j0);
IkReal x11208=IKcos(j0);
IkReal x11209=((1.0)*cj5);
IkReal x11210=(cj6*sj4);
IkReal x11211=(r00*sj6);
IkReal x11212=(cj5*r12);
IkReal x11213=((0.37429)*sj5);
IkReal x11214=(r10*sj6);
IkReal x11215=((0.36442)*cj1);
IkReal x11216=(cj6*r01);
IkReal x11217=((0.01)*cj5);
IkReal x11218=((1.0)*sj5);
IkReal x11219=(cj6*r11);
IkReal x11220=(cj4*cj6);
IkReal x11221=(cj5*r02);
IkReal x11222=(r01*sj6);
IkReal x11223=((1.0)*cj4);
IkReal x11224=((0.01)*sj5);
IkReal x11225=(r11*sj6);
IkReal x11226=(sj1*x11207);
IkReal x11227=((1.0)*x11208);
IkReal x11228=((0.069)*x11208);
evalcond[0]=(x11221+(((-1.0)*cj1*x11227))+(((-1.0)*x11216*x11218))+(((-1.0)*x11211*x11218)));
evalcond[1]=(x11212+(((-1.0)*x11218*x11219))+(((-1.0)*cj1*x11207))+(((-1.0)*x11214*x11218)));
evalcond[2]=((((-1.0)*r02*sj4*x11218))+x11207+(((-1.0)*sj4*x11209*x11211))+(((-1.0)*r01*x11209*x11210))+(((-1.0)*x11222*x11223))+((r00*x11220)));
evalcond[3]=((((-1.0)*r11*x11209*x11210))+(((-1.0)*x11227))+(((-1.0)*sj4*x11209*x11214))+(((-1.0)*r12*sj4*x11218))+(((-1.0)*x11223*x11225))+((r10*x11220)));
evalcond[4]=((((-1.0)*r10*x11210))+x11226+(((-1.0)*cj4*x11209*x11214))+(((-1.0)*cj4*x11209*x11219))+((sj4*x11225))+(((-1.0)*cj4*r12*x11218)));
evalcond[5]=((((-1.0)*cj4*r02*x11218))+(((-1.0)*r00*x11210))+(((-1.0)*cj4*x11209*x11211))+(((-1.0)*cj4*x11209*x11216))+((sj1*x11208))+((sj4*x11222)));
evalcond[6]=(((sj1*x11228))+x11228+(((0.37429)*x11221))+((x11211*x11217))+(((-1.0)*px))+((r02*x11224))+((x11216*x11217))+((x11208*x11215))+(((-1.0)*x11211*x11213))+(((-1.0)*x11213*x11216)));
evalcond[7]=(((x11207*x11215))+((r12*x11224))+((x11217*x11219))+(((-1.0)*py))+((x11214*x11217))+(((0.37429)*x11212))+(((0.069)*x11226))+(((0.069)*x11207))+(((-1.0)*x11213*x11219))+(((-1.0)*x11213*x11214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11229=((1.0)*r00);
IkReal x11230=(cj6*r01);
IkReal x11231=(cj5*sj4);
CheckValue<IkReal> x11232=IKPowWithIntegerCheck(cj1,-1);
if(!x11232.valid){
continue;
}
if( IKabs((((x11230*x11231))+(((-1.0)*cj4*cj6*x11229))+((cj4*r01*sj6))+((r02*sj4*sj5))+((r00*sj6*x11231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11232.value)*(((((-1.0)*sj5*x11230))+(((-1.0)*sj5*sj6*x11229))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x11230*x11231))+(((-1.0)*cj4*cj6*x11229))+((cj4*r01*sj6))+((r02*sj4*sj5))+((r00*sj6*x11231))))+IKsqr(((x11232.value)*(((((-1.0)*sj5*x11230))+(((-1.0)*sj5*sj6*x11229))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x11230*x11231))+(((-1.0)*cj4*cj6*x11229))+((cj4*r01*sj6))+((r02*sj4*sj5))+((r00*sj6*x11231))), ((x11232.value)*(((((-1.0)*sj5*x11230))+(((-1.0)*sj5*sj6*x11229))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11233=IKsin(j0);
IkReal x11234=IKcos(j0);
IkReal x11235=((1.0)*cj5);
IkReal x11236=(cj6*sj4);
IkReal x11237=(r00*sj6);
IkReal x11238=(cj5*r12);
IkReal x11239=((0.37429)*sj5);
IkReal x11240=(r10*sj6);
IkReal x11241=((0.36442)*cj1);
IkReal x11242=(cj6*r01);
IkReal x11243=((0.01)*cj5);
IkReal x11244=((1.0)*sj5);
IkReal x11245=(cj6*r11);
IkReal x11246=(cj4*cj6);
IkReal x11247=(cj5*r02);
IkReal x11248=(r01*sj6);
IkReal x11249=((1.0)*cj4);
IkReal x11250=((0.01)*sj5);
IkReal x11251=(r11*sj6);
IkReal x11252=(sj1*x11233);
IkReal x11253=((1.0)*x11234);
IkReal x11254=((0.069)*x11234);
evalcond[0]=(x11247+(((-1.0)*cj1*x11253))+(((-1.0)*x11242*x11244))+(((-1.0)*x11237*x11244)));
evalcond[1]=((((-1.0)*x11244*x11245))+x11238+(((-1.0)*cj1*x11233))+(((-1.0)*x11240*x11244)));
evalcond[2]=(x11233+(((-1.0)*r02*sj4*x11244))+(((-1.0)*r01*x11235*x11236))+(((-1.0)*x11248*x11249))+(((-1.0)*sj4*x11235*x11237))+((r00*x11246)));
evalcond[3]=((((-1.0)*x11253))+(((-1.0)*r11*x11235*x11236))+(((-1.0)*x11249*x11251))+(((-1.0)*sj4*x11235*x11240))+((r10*x11246))+(((-1.0)*r12*sj4*x11244)));
evalcond[4]=((((-1.0)*cj4*x11235*x11240))+(((-1.0)*cj4*x11235*x11245))+x11252+((sj4*x11251))+(((-1.0)*cj4*r12*x11244))+(((-1.0)*r10*x11236)));
evalcond[5]=((((-1.0)*cj4*x11235*x11242))+((sj1*x11234))+((sj4*x11248))+(((-1.0)*r00*x11236))+(((-1.0)*cj4*r02*x11244))+(((-1.0)*cj4*x11235*x11237)));
evalcond[6]=((((-1.0)*x11237*x11239))+(((0.37429)*x11247))+((x11234*x11241))+((x11242*x11243))+x11254+((r02*x11250))+((x11237*x11243))+((sj1*x11254))+(((-1.0)*px))+(((-1.0)*x11239*x11242)));
evalcond[7]=((((0.37429)*x11238))+((x11243*x11245))+((r12*x11250))+((x11240*x11243))+(((-1.0)*py))+(((0.069)*x11233))+(((-1.0)*x11239*x11245))+(((-1.0)*x11239*x11240))+((x11233*x11241))+(((0.069)*x11252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11255=((1.0)*cj6*sj5);
IkReal x11256=((1.0)*sj5*sj6);
CheckValue<IkReal> x11257=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x11257.valid){
continue;
}
CheckValue<IkReal> x11258 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x11256))+(((-1.0)*r11*x11255)))),IkReal(((((-1.0)*r01*x11255))+(((-1.0)*r00*x11256))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11258.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11257.value)))+(x11258.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11259=IKsin(j0);
IkReal x11260=IKcos(j0);
IkReal x11261=((1.0)*cj5);
IkReal x11262=(cj6*sj4);
IkReal x11263=(r00*sj6);
IkReal x11264=(cj5*r12);
IkReal x11265=((0.37429)*sj5);
IkReal x11266=(r10*sj6);
IkReal x11267=((0.36442)*cj1);
IkReal x11268=(cj6*r01);
IkReal x11269=((0.01)*cj5);
IkReal x11270=((1.0)*sj5);
IkReal x11271=(cj6*r11);
IkReal x11272=(cj4*cj6);
IkReal x11273=(cj5*r02);
IkReal x11274=(r01*sj6);
IkReal x11275=((1.0)*cj4);
IkReal x11276=((0.01)*sj5);
IkReal x11277=(r11*sj6);
IkReal x11278=(sj1*x11259);
IkReal x11279=((1.0)*x11260);
IkReal x11280=((0.069)*x11260);
evalcond[0]=((((-1.0)*x11263*x11270))+x11273+(((-1.0)*x11268*x11270))+(((-1.0)*cj1*x11279)));
evalcond[1]=(x11264+(((-1.0)*cj1*x11259))+(((-1.0)*x11270*x11271))+(((-1.0)*x11266*x11270)));
evalcond[2]=(((r00*x11272))+x11259+(((-1.0)*x11274*x11275))+(((-1.0)*r01*x11261*x11262))+(((-1.0)*sj4*x11261*x11263))+(((-1.0)*r02*sj4*x11270)));
evalcond[3]=(((r10*x11272))+(((-1.0)*r11*x11261*x11262))+(((-1.0)*r12*sj4*x11270))+(((-1.0)*x11275*x11277))+(((-1.0)*x11279))+(((-1.0)*sj4*x11261*x11266)));
evalcond[4]=((((-1.0)*cj4*x11261*x11271))+(((-1.0)*cj4*x11261*x11266))+x11278+(((-1.0)*cj4*r12*x11270))+(((-1.0)*r10*x11262))+((sj4*x11277)));
evalcond[5]=((((-1.0)*cj4*x11261*x11263))+(((-1.0)*cj4*x11261*x11268))+(((-1.0)*cj4*r02*x11270))+(((-1.0)*r00*x11262))+((sj4*x11274))+((sj1*x11260)));
evalcond[6]=(((x11260*x11267))+x11280+(((-1.0)*x11263*x11265))+((x11268*x11269))+(((0.37429)*x11273))+(((-1.0)*px))+((r02*x11276))+((x11263*x11269))+((sj1*x11280))+(((-1.0)*x11265*x11268)));
evalcond[7]=((((-1.0)*x11265*x11271))+((r12*x11276))+(((0.069)*x11278))+((x11259*x11267))+(((0.37429)*x11264))+(((-1.0)*py))+((x11266*x11269))+(((0.069)*x11259))+((x11269*x11271))+(((-1.0)*x11265*x11266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x11281=((1.0)*cj6*sj5);
IkReal x11282=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x11282))+(((-1.0)*r11*x11281)))))+(IKabs(((((-1.0)*r00*x11282))+(((-1.0)*r01*x11281))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11283=(cj5*sj4);
IkReal x11284=((1.0)*cj6);
CheckValue<IkReal> x11285=IKPowWithIntegerCheck(sj1,-1);
if(!x11285.valid){
continue;
}
CheckValue<IkReal> x11286=IKPowWithIntegerCheck(cj1,-1);
if(!x11286.valid){
continue;
}
if( IKabs(((x11285.value)*((((cj6*r11*x11283))+((r10*sj6*x11283))+((cj4*r11*sj6))+((r12*sj4*sj5))+(((-1.0)*cj4*r10*x11284)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11286.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x11284))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11285.value)*((((cj6*r11*x11283))+((r10*sj6*x11283))+((cj4*r11*sj6))+((r12*sj4*sj5))+(((-1.0)*cj4*r10*x11284))))))+IKsqr(((x11286.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x11284))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x11285.value)*((((cj6*r11*x11283))+((r10*sj6*x11283))+((cj4*r11*sj6))+((r12*sj4*sj5))+(((-1.0)*cj4*r10*x11284))))), ((x11286.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x11284))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11287=IKcos(j0);
IkReal x11288=IKsin(j0);
IkReal x11289=((1.0)*cj5);
IkReal x11290=(cj6*sj4);
IkReal x11291=(r00*sj6);
IkReal x11292=(cj5*r12);
IkReal x11293=((0.37429)*sj5);
IkReal x11294=(r10*sj6);
IkReal x11295=((0.36442)*cj1);
IkReal x11296=(cj6*r01);
IkReal x11297=((0.01)*cj5);
IkReal x11298=((1.0)*sj5);
IkReal x11299=(cj6*r11);
IkReal x11300=(sj4*sj6);
IkReal x11301=(cj4*cj6);
IkReal x11302=(cj5*r02);
IkReal x11303=((0.01)*sj5);
IkReal x11304=((0.069)*x11288);
IkReal x11305=((0.069)*x11287);
IkReal x11306=((1.0)*x11288);
IkReal x11307=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*cj1*x11287))+(((-1.0)*x11291*x11298))+x11302+(((-1.0)*x11296*x11298)));
evalcond[1]=((((-1.0)*x11298*x11299))+x11292+(((-1.0)*x11294*x11298))+(((-1.0)*cj1*x11306)));
evalcond[2]=((((-1.0)*cj4*r12*x11298))+(((-1.0)*cj4*x11289*x11294))+(((-1.0)*cj4*x11289*x11299))+x11287+((r11*x11300))+(((-1.0)*r10*x11290)));
evalcond[3]=((((-1.0)*r11*x11289*x11290))+(((-1.0)*sj4*x11289*x11294))+(((-1.0)*r12*sj4*x11298))+((r10*x11301))+(((-1.0)*r11*x11307))+((sj1*x11288)));
evalcond[4]=(((r00*x11301))+(((-1.0)*r01*x11289*x11290))+(((-1.0)*sj4*x11289*x11291))+(((-1.0)*r01*x11307))+((sj1*x11287))+(((-1.0)*r02*sj4*x11298)));
evalcond[5]=((((-1.0)*cj4*x11289*x11291))+(((-1.0)*cj4*x11289*x11296))+(((-1.0)*cj4*r02*x11298))+((r01*x11300))+(((-1.0)*x11306))+(((-1.0)*r00*x11290)));
evalcond[6]=(((r02*x11303))+(((-1.0)*x11291*x11293))+((x11287*x11295))+(((-1.0)*x11304))+x11305+((x11296*x11297))+(((0.37429)*x11302))+((x11291*x11297))+(((-1.0)*px))+(((-1.0)*x11293*x11296)));
evalcond[7]=((((0.37429)*x11292))+x11304+x11305+((r12*x11303))+((x11288*x11295))+((x11297*x11299))+(((-1.0)*py))+((x11294*x11297))+(((-1.0)*x11293*x11294))+(((-1.0)*x11293*x11299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11308=(cj4*cj5);
IkReal x11309=(cj6*r11);
IkReal x11310=(r10*sj6);
IkReal x11311=((1.0)*sj5);
CheckValue<IkReal> x11312=IKPowWithIntegerCheck(cj1,-1);
if(!x11312.valid){
continue;
}
if( IKabs(((x11312.value)*((((cj5*r12))+(((-1.0)*x11309*x11311))+(((-1.0)*x11310*x11311)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x11308*x11309))+((cj6*r10*sj4))+((x11308*x11310))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11312.value)*((((cj5*r12))+(((-1.0)*x11309*x11311))+(((-1.0)*x11310*x11311))))))+IKsqr((((x11308*x11309))+((cj6*r10*sj4))+((x11308*x11310))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x11312.value)*((((cj5*r12))+(((-1.0)*x11309*x11311))+(((-1.0)*x11310*x11311))))), (((x11308*x11309))+((cj6*r10*sj4))+((x11308*x11310))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11313=IKcos(j0);
IkReal x11314=IKsin(j0);
IkReal x11315=((1.0)*cj5);
IkReal x11316=(cj6*sj4);
IkReal x11317=(r00*sj6);
IkReal x11318=(cj5*r12);
IkReal x11319=((0.37429)*sj5);
IkReal x11320=(r10*sj6);
IkReal x11321=((0.36442)*cj1);
IkReal x11322=(cj6*r01);
IkReal x11323=((0.01)*cj5);
IkReal x11324=((1.0)*sj5);
IkReal x11325=(cj6*r11);
IkReal x11326=(sj4*sj6);
IkReal x11327=(cj4*cj6);
IkReal x11328=(cj5*r02);
IkReal x11329=((0.01)*sj5);
IkReal x11330=((0.069)*x11314);
IkReal x11331=((0.069)*x11313);
IkReal x11332=((1.0)*x11314);
IkReal x11333=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x11322*x11324))+(((-1.0)*x11317*x11324))+x11328+(((-1.0)*cj1*x11313)));
evalcond[1]=(x11318+(((-1.0)*cj1*x11332))+(((-1.0)*x11320*x11324))+(((-1.0)*x11324*x11325)));
evalcond[2]=((((-1.0)*cj4*r12*x11324))+x11313+(((-1.0)*cj4*x11315*x11325))+(((-1.0)*cj4*x11315*x11320))+(((-1.0)*r10*x11316))+((r11*x11326)));
evalcond[3]=(((sj1*x11314))+(((-1.0)*r12*sj4*x11324))+(((-1.0)*sj4*x11315*x11320))+((r10*x11327))+(((-1.0)*r11*x11315*x11316))+(((-1.0)*r11*x11333)));
evalcond[4]=((((-1.0)*r01*x11333))+(((-1.0)*r02*sj4*x11324))+((sj1*x11313))+(((-1.0)*sj4*x11315*x11317))+(((-1.0)*r01*x11315*x11316))+((r00*x11327)));
evalcond[5]=((((-1.0)*cj4*r02*x11324))+(((-1.0)*cj4*x11315*x11317))+(((-1.0)*x11332))+(((-1.0)*cj4*x11315*x11322))+(((-1.0)*r00*x11316))+((r01*x11326)));
evalcond[6]=(x11331+(((-1.0)*x11319*x11322))+(((-1.0)*x11317*x11319))+((r02*x11329))+(((-1.0)*px))+(((-1.0)*x11330))+((x11317*x11323))+((x11313*x11321))+(((0.37429)*x11328))+((x11322*x11323)));
evalcond[7]=(((x11320*x11323))+x11331+x11330+(((-1.0)*x11319*x11320))+(((-1.0)*x11319*x11325))+((x11323*x11325))+(((-1.0)*py))+((x11314*x11321))+(((0.37429)*x11318))+((r12*x11329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11334=((1.0)*cj6*sj5);
IkReal x11335=((1.0)*sj5*sj6);
CheckValue<IkReal> x11336=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x11336.valid){
continue;
}
CheckValue<IkReal> x11337 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x11334))+(((-1.0)*r10*x11335)))),IkReal(((((-1.0)*r01*x11334))+(((-1.0)*r00*x11335))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11337.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11336.value)))+(x11337.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11338=IKcos(j0);
IkReal x11339=IKsin(j0);
IkReal x11340=((1.0)*cj5);
IkReal x11341=(cj6*sj4);
IkReal x11342=(r00*sj6);
IkReal x11343=(cj5*r12);
IkReal x11344=((0.37429)*sj5);
IkReal x11345=(r10*sj6);
IkReal x11346=((0.36442)*cj1);
IkReal x11347=(cj6*r01);
IkReal x11348=((0.01)*cj5);
IkReal x11349=((1.0)*sj5);
IkReal x11350=(cj6*r11);
IkReal x11351=(sj4*sj6);
IkReal x11352=(cj4*cj6);
IkReal x11353=(cj5*r02);
IkReal x11354=((0.01)*sj5);
IkReal x11355=((0.069)*x11339);
IkReal x11356=((0.069)*x11338);
IkReal x11357=((1.0)*x11339);
IkReal x11358=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x11342*x11349))+x11353+(((-1.0)*x11347*x11349))+(((-1.0)*cj1*x11338)));
evalcond[1]=(x11343+(((-1.0)*x11349*x11350))+(((-1.0)*cj1*x11357))+(((-1.0)*x11345*x11349)));
evalcond[2]=(((r11*x11351))+(((-1.0)*cj4*r12*x11349))+x11338+(((-1.0)*cj4*x11340*x11345))+(((-1.0)*cj4*x11340*x11350))+(((-1.0)*r10*x11341)));
evalcond[3]=((((-1.0)*r11*x11358))+(((-1.0)*r12*sj4*x11349))+((r10*x11352))+(((-1.0)*sj4*x11340*x11345))+((sj1*x11339))+(((-1.0)*r11*x11340*x11341)));
evalcond[4]=((((-1.0)*sj4*x11340*x11342))+(((-1.0)*r01*x11340*x11341))+((r00*x11352))+((sj1*x11338))+(((-1.0)*r02*sj4*x11349))+(((-1.0)*r01*x11358)));
evalcond[5]=((((-1.0)*r00*x11341))+(((-1.0)*cj4*x11340*x11347))+(((-1.0)*cj4*x11340*x11342))+((r01*x11351))+(((-1.0)*x11357))+(((-1.0)*cj4*r02*x11349)));
evalcond[6]=(((r02*x11354))+((x11338*x11346))+(((-1.0)*x11342*x11344))+x11356+(((0.37429)*x11353))+(((-1.0)*px))+((x11342*x11348))+(((-1.0)*x11355))+(((-1.0)*x11344*x11347))+((x11347*x11348)));
evalcond[7]=(((x11339*x11346))+((r12*x11354))+x11355+x11356+(((0.37429)*x11343))+(((-1.0)*x11344*x11350))+(((-1.0)*py))+((x11345*x11348))+(((-1.0)*x11344*x11345))+((x11348*x11350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x11359=((1.0)*cj6*sj5);
IkReal x11360=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r00*x11360))+((cj5*r02))+(((-1.0)*r01*x11359)))))+(IKabs((((cj5*r12))+(((-1.0)*r11*x11359))+(((-1.0)*r10*x11360))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11361=((1.0)*cj6);
IkReal x11362=(cj5*sj4);
IkReal x11363=((1.0)*sj6);
CheckValue<IkReal> x11364=IKPowWithIntegerCheck(sj1,-1);
if(!x11364.valid){
continue;
}
CheckValue<IkReal> x11365=IKPowWithIntegerCheck(cj1,-1);
if(!x11365.valid){
continue;
}
if( IKabs(((x11364.value)*(((((-1.0)*r10*x11362*x11363))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r10))+(((-1.0)*r11*x11361*x11362))+(((-1.0)*cj4*r11*x11363)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11365.value)*(((((-1.0)*r01*sj5*x11361))+(((-1.0)*r00*sj5*x11363))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11364.value)*(((((-1.0)*r10*x11362*x11363))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r10))+(((-1.0)*r11*x11361*x11362))+(((-1.0)*cj4*r11*x11363))))))+IKsqr(((x11365.value)*(((((-1.0)*r01*sj5*x11361))+(((-1.0)*r00*sj5*x11363))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x11364.value)*(((((-1.0)*r10*x11362*x11363))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r10))+(((-1.0)*r11*x11361*x11362))+(((-1.0)*cj4*r11*x11363))))), ((x11365.value)*(((((-1.0)*r01*sj5*x11361))+(((-1.0)*r00*sj5*x11363))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11366=IKsin(j0);
IkReal x11367=IKcos(j0);
IkReal x11368=(cj5*r11);
IkReal x11369=(sj5*sj6);
IkReal x11370=((1.0)*r00);
IkReal x11371=(cj5*r12);
IkReal x11372=((0.36442)*cj1);
IkReal x11373=(cj5*r01);
IkReal x11374=((1.0)*cj6);
IkReal x11375=(r11*sj5);
IkReal x11376=((1.0)*cj4);
IkReal x11377=((0.01)*cj6);
IkReal x11378=(cj4*cj6);
IkReal x11379=(cj5*r02);
IkReal x11380=(r12*sj5);
IkReal x11381=(cj5*sj6);
IkReal x11382=(r01*sj6);
IkReal x11383=(r02*sj5);
IkReal x11384=(r11*sj6);
IkReal x11385=((0.069)*x11366);
IkReal x11386=((0.069)*x11367);
IkReal x11387=(sj4*x11374);
IkReal x11388=(cj6*r01*sj5);
IkReal x11389=(r10*x11381);
IkReal x11390=((1.0)*sj4*sj5);
IkReal x11391=((1.0)*x11367);
IkReal x11392=((1.0)*x11366);
evalcond[0]=((((-1.0)*r01*sj5*x11374))+(((-1.0)*x11369*x11370))+x11379+(((-1.0)*cj1*x11391)));
evalcond[1]=((((-1.0)*x11374*x11375))+x11371+(((-1.0)*r10*x11369))+(((-1.0)*cj1*x11392)));
evalcond[2]=((((-1.0)*cj4*x11370*x11381))+(((-1.0)*cj4*x11373*x11374))+x11366+(((-1.0)*cj6*sj4*x11370))+((sj4*x11382))+(((-1.0)*x11376*x11383)));
evalcond[3]=((((-1.0)*cj4*x11368*x11374))+(((-1.0)*x11391))+(((-1.0)*r10*x11387))+((sj4*x11384))+(((-1.0)*x11376*x11380))+(((-1.0)*x11376*x11389)));
evalcond[4]=((((-1.0)*sj1*x11392))+((r10*x11378))+(((-1.0)*x11368*x11387))+(((-1.0)*x11376*x11384))+(((-1.0)*sj4*x11380))+(((-1.0)*sj4*x11389)));
evalcond[5]=(((r00*x11378))+(((-1.0)*x11373*x11387))+(((-1.0)*sj4*x11370*x11381))+(((-1.0)*sj1*x11391))+(((-1.0)*x11376*x11382))+(((-1.0)*sj4*x11383)));
evalcond[6]=((((0.01)*r00*x11381))+(((0.37429)*x11379))+(((-0.37429)*x11388))+x11386+x11385+(((0.01)*x11383))+(((-1.0)*px))+((x11367*x11372))+((x11373*x11377))+(((-0.37429)*r00*x11369)));
evalcond[7]=((((-0.37429)*cj6*x11375))+(((0.37429)*x11371))+x11385+(((-1.0)*x11386))+(((-0.37429)*r10*x11369))+(((0.01)*x11389))+(((0.01)*x11380))+((x11368*x11377))+(((-1.0)*py))+((x11366*x11372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11393=((1.0)*sj6);
IkReal x11394=(cj4*cj5);
IkReal x11395=(cj6*r01);
CheckValue<IkReal> x11396=IKPowWithIntegerCheck(cj1,-1);
if(!x11396.valid){
continue;
}
if( IKabs(((((-1.0)*r01*sj4*x11393))+((cj6*r00*sj4))+((x11394*x11395))+((r00*sj6*x11394))+((cj4*r02*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11396.value)*(((((-1.0)*r00*sj5*x11393))+(((-1.0)*sj5*x11395))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj4*x11393))+((cj6*r00*sj4))+((x11394*x11395))+((r00*sj6*x11394))+((cj4*r02*sj5))))+IKsqr(((x11396.value)*(((((-1.0)*r00*sj5*x11393))+(((-1.0)*sj5*x11395))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*sj4*x11393))+((cj6*r00*sj4))+((x11394*x11395))+((r00*sj6*x11394))+((cj4*r02*sj5))), ((x11396.value)*(((((-1.0)*r00*sj5*x11393))+(((-1.0)*sj5*x11395))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11397=IKsin(j0);
IkReal x11398=IKcos(j0);
IkReal x11399=(cj5*r11);
IkReal x11400=(sj5*sj6);
IkReal x11401=((1.0)*r00);
IkReal x11402=(cj5*r12);
IkReal x11403=((0.36442)*cj1);
IkReal x11404=(cj5*r01);
IkReal x11405=((1.0)*cj6);
IkReal x11406=(r11*sj5);
IkReal x11407=((1.0)*cj4);
IkReal x11408=((0.01)*cj6);
IkReal x11409=(cj4*cj6);
IkReal x11410=(cj5*r02);
IkReal x11411=(r12*sj5);
IkReal x11412=(cj5*sj6);
IkReal x11413=(r01*sj6);
IkReal x11414=(r02*sj5);
IkReal x11415=(r11*sj6);
IkReal x11416=((0.069)*x11397);
IkReal x11417=((0.069)*x11398);
IkReal x11418=(sj4*x11405);
IkReal x11419=(cj6*r01*sj5);
IkReal x11420=(r10*x11412);
IkReal x11421=((1.0)*sj4*sj5);
IkReal x11422=((1.0)*x11398);
IkReal x11423=((1.0)*x11397);
evalcond[0]=((((-1.0)*r01*sj5*x11405))+x11410+(((-1.0)*cj1*x11422))+(((-1.0)*x11400*x11401)));
evalcond[1]=(x11402+(((-1.0)*cj1*x11423))+(((-1.0)*x11405*x11406))+(((-1.0)*r10*x11400)));
evalcond[2]=((((-1.0)*x11407*x11414))+((sj4*x11413))+x11397+(((-1.0)*cj4*x11401*x11412))+(((-1.0)*cj4*x11404*x11405))+(((-1.0)*cj6*sj4*x11401)));
evalcond[3]=((((-1.0)*r10*x11418))+(((-1.0)*x11407*x11411))+((sj4*x11415))+(((-1.0)*x11422))+(((-1.0)*cj4*x11399*x11405))+(((-1.0)*x11407*x11420)));
evalcond[4]=((((-1.0)*sj4*x11420))+(((-1.0)*x11407*x11415))+((r10*x11409))+(((-1.0)*x11399*x11418))+(((-1.0)*sj4*x11411))+(((-1.0)*sj1*x11423)));
evalcond[5]=((((-1.0)*x11404*x11418))+(((-1.0)*sj4*x11401*x11412))+(((-1.0)*x11407*x11413))+(((-1.0)*sj4*x11414))+((r00*x11409))+(((-1.0)*sj1*x11422)));
evalcond[6]=((((-0.37429)*r00*x11400))+x11416+x11417+(((0.01)*x11414))+(((0.37429)*x11410))+(((-1.0)*px))+(((-0.37429)*x11419))+(((0.01)*r00*x11412))+((x11404*x11408))+((x11398*x11403)));
evalcond[7]=((((0.37429)*x11402))+x11416+(((0.01)*x11420))+(((0.01)*x11411))+(((-0.37429)*r10*x11400))+(((-1.0)*py))+(((-1.0)*x11417))+((x11397*x11403))+((x11399*x11408))+(((-0.37429)*cj6*x11406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11424=((1.0)*cj6*sj5);
IkReal x11425=((1.0)*sj5*sj6);
CheckValue<IkReal> x11426=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x11426.valid){
continue;
}
CheckValue<IkReal> x11427 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x11424))+(((-1.0)*r10*x11425)))),IkReal(((((-1.0)*r01*x11424))+(((-1.0)*r00*x11425))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11427.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11426.value)))+(x11427.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11428=IKsin(j0);
IkReal x11429=IKcos(j0);
IkReal x11430=(cj5*r11);
IkReal x11431=(sj5*sj6);
IkReal x11432=((1.0)*r00);
IkReal x11433=(cj5*r12);
IkReal x11434=((0.36442)*cj1);
IkReal x11435=(cj5*r01);
IkReal x11436=((1.0)*cj6);
IkReal x11437=(r11*sj5);
IkReal x11438=((1.0)*cj4);
IkReal x11439=((0.01)*cj6);
IkReal x11440=(cj4*cj6);
IkReal x11441=(cj5*r02);
IkReal x11442=(r12*sj5);
IkReal x11443=(cj5*sj6);
IkReal x11444=(r01*sj6);
IkReal x11445=(r02*sj5);
IkReal x11446=(r11*sj6);
IkReal x11447=((0.069)*x11428);
IkReal x11448=((0.069)*x11429);
IkReal x11449=(sj4*x11436);
IkReal x11450=(cj6*r01*sj5);
IkReal x11451=(r10*x11443);
IkReal x11452=((1.0)*sj4*sj5);
IkReal x11453=((1.0)*x11429);
IkReal x11454=((1.0)*x11428);
evalcond[0]=(x11441+(((-1.0)*r01*sj5*x11436))+(((-1.0)*x11431*x11432))+(((-1.0)*cj1*x11453)));
evalcond[1]=(x11433+(((-1.0)*x11436*x11437))+(((-1.0)*r10*x11431))+(((-1.0)*cj1*x11454)));
evalcond[2]=(((sj4*x11444))+x11428+(((-1.0)*x11438*x11445))+(((-1.0)*cj6*sj4*x11432))+(((-1.0)*cj4*x11435*x11436))+(((-1.0)*cj4*x11432*x11443)));
evalcond[3]=(((sj4*x11446))+(((-1.0)*x11438*x11442))+(((-1.0)*r10*x11449))+(((-1.0)*cj4*x11430*x11436))+(((-1.0)*x11438*x11451))+(((-1.0)*x11453)));
evalcond[4]=((((-1.0)*sj4*x11451))+(((-1.0)*x11438*x11446))+((r10*x11440))+(((-1.0)*x11430*x11449))+(((-1.0)*sj4*x11442))+(((-1.0)*sj1*x11454)));
evalcond[5]=(((r00*x11440))+(((-1.0)*x11438*x11444))+(((-1.0)*sj4*x11432*x11443))+(((-1.0)*sj4*x11445))+(((-1.0)*x11435*x11449))+(((-1.0)*sj1*x11453)));
evalcond[6]=(x11447+x11448+(((0.01)*r00*x11443))+((x11429*x11434))+(((0.37429)*x11441))+(((-1.0)*px))+((x11435*x11439))+(((0.01)*x11445))+(((-0.37429)*r00*x11431))+(((-0.37429)*x11450)));
evalcond[7]=(((x11430*x11439))+(((-0.37429)*r10*x11431))+x11447+((x11428*x11434))+(((0.01)*x11451))+(((-1.0)*x11448))+(((-1.0)*py))+(((0.37429)*x11433))+(((0.01)*x11442))+(((-0.37429)*cj6*x11437)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x11461=IKPowWithIntegerCheck(cj1,-1);
if(!x11461.valid){
continue;
}
IkReal x11455=x11461.value;
IkReal x11456=(cj5*r02);
IkReal x11457=(cj1*sj6);
IkReal x11458=(cj1*sj4);
IkReal x11459=(cj6*r01*sj5);
IkReal x11460=(r00*sj5*sj6);
CheckValue<IkReal> x11462=IKPowWithIntegerCheck(sj1,-1);
if(!x11462.valid){
continue;
}
CheckValue<IkReal> x11463=IKPowWithIntegerCheck(sj2,-1);
if(!x11463.valid){
continue;
}
if( IKabs((x11455*(x11462.value)*(x11463.value)*((((cj2*x11460))+((r12*sj5*x11458))+((cj5*cj6*r11*x11458))+(((-1.0)*cj1*cj4*cj6*r10))+((cj2*x11459))+((cj4*r11*x11457))+(((-1.0)*cj2*x11456))+((cj5*r10*sj4*x11457)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11455*((x11456+(((-1.0)*x11459))+(((-1.0)*x11460)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11455*(x11462.value)*(x11463.value)*((((cj2*x11460))+((r12*sj5*x11458))+((cj5*cj6*r11*x11458))+(((-1.0)*cj1*cj4*cj6*r10))+((cj2*x11459))+((cj4*r11*x11457))+(((-1.0)*cj2*x11456))+((cj5*r10*sj4*x11457))))))+IKsqr((x11455*((x11456+(((-1.0)*x11459))+(((-1.0)*x11460))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x11455*(x11462.value)*(x11463.value)*((((cj2*x11460))+((r12*sj5*x11458))+((cj5*cj6*r11*x11458))+(((-1.0)*cj1*cj4*cj6*r10))+((cj2*x11459))+((cj4*r11*x11457))+(((-1.0)*cj2*x11456))+((cj5*r10*sj4*x11457))))), (x11455*((x11456+(((-1.0)*x11459))+(((-1.0)*x11460))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11464=IKsin(j0);
IkReal x11465=IKcos(j0);
IkReal x11466=((1.0)*cj5);
IkReal x11467=(cj6*sj4);
IkReal x11468=(r00*sj6);
IkReal x11469=(cj5*r12);
IkReal x11470=((0.37429)*sj5);
IkReal x11471=(r10*sj6);
IkReal x11472=(cj2*sj1);
IkReal x11473=((0.36442)*cj1);
IkReal x11474=(cj6*r01);
IkReal x11475=((0.01)*cj5);
IkReal x11476=((1.0)*sj5);
IkReal x11477=(cj6*r11);
IkReal x11478=(sj4*sj6);
IkReal x11479=((0.01)*sj5);
IkReal x11480=(cj4*cj6);
IkReal x11481=(cj5*r02);
IkReal x11482=((0.069)*x11464);
IkReal x11483=((1.0)*x11465);
IkReal x11484=(sj2*x11465);
IkReal x11485=((0.069)*x11465);
IkReal x11486=((1.0)*x11464);
IkReal x11487=((1.0)*cj4*sj6);
evalcond[0]=(x11481+(((-1.0)*x11474*x11476))+(((-1.0)*x11468*x11476))+(((-1.0)*cj1*x11483)));
evalcond[1]=(x11469+(((-1.0)*x11476*x11477))+(((-1.0)*x11471*x11476))+(((-1.0)*cj1*x11486)));
evalcond[2]=(((cj2*x11465))+(((-1.0)*r11*x11466*x11467))+(((-1.0)*r11*x11487))+(((-1.0)*r12*sj4*x11476))+((sj1*sj2*x11464))+((r10*x11480))+(((-1.0)*sj4*x11466*x11471)));
evalcond[3]=(((r00*x11480))+(((-1.0)*r01*x11487))+(((-1.0)*r01*x11466*x11467))+((sj1*x11484))+(((-1.0)*r02*sj4*x11476))+(((-1.0)*cj2*x11486))+(((-1.0)*sj4*x11466*x11468)));
evalcond[4]=(x11484+(((-1.0)*r10*x11467))+((r11*x11478))+(((-1.0)*x11472*x11486))+(((-1.0)*cj4*x11466*x11477))+(((-1.0)*cj4*x11466*x11471))+(((-1.0)*cj4*r12*x11476)));
evalcond[5]=((((-1.0)*r00*x11467))+(((-1.0)*sj2*x11486))+(((-1.0)*x11472*x11483))+(((-1.0)*cj4*x11466*x11474))+(((-1.0)*cj4*x11466*x11468))+(((-1.0)*cj4*r02*x11476))+((r01*x11478)));
evalcond[6]=(((x11468*x11475))+x11485+(((-1.0)*sj2*x11482))+((x11465*x11473))+(((-1.0)*x11472*x11485))+(((-1.0)*px))+(((-1.0)*x11468*x11470))+((x11474*x11475))+(((0.37429)*x11481))+(((-1.0)*x11470*x11474))+((r02*x11479)));
evalcond[7]=(((r12*x11479))+((x11471*x11475))+x11482+((x11475*x11477))+(((-1.0)*x11472*x11482))+(((0.37429)*x11469))+(((-1.0)*py))+(((-1.0)*x11470*x11477))+(((-1.0)*x11470*x11471))+(((0.069)*x11484))+((x11464*x11473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x11496=IKPowWithIntegerCheck(cj1,-1);
if(!x11496.valid){
continue;
}
IkReal x11488=x11496.value;
IkReal x11489=(cj6*r11);
IkReal x11490=(cj1*sj6);
IkReal x11491=(cj5*r12);
IkReal x11492=(cj5*sj4);
IkReal x11493=(r10*sj6);
IkReal x11494=((1.0)*sj5);
IkReal x11495=(sj1*sj2*sj5);
CheckValue<IkReal> x11497=IKPowWithIntegerCheck(cj2,-1);
if(!x11497.valid){
continue;
}
if( IKabs((x11488*((x11491+(((-1.0)*x11493*x11494))+(((-1.0)*x11489*x11494)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x11488*(x11497.value)*((((cj1*r12*sj4*sj5))+((cj1*x11489*x11492))+((x11493*x11495))+((cj4*r11*x11490))+((x11489*x11495))+(((-1.0)*cj1*cj4*cj6*r10))+(((-1.0)*sj1*sj2*x11491))+((r10*x11490*x11492)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11488*((x11491+(((-1.0)*x11493*x11494))+(((-1.0)*x11489*x11494))))))+IKsqr((x11488*(x11497.value)*((((cj1*r12*sj4*sj5))+((cj1*x11489*x11492))+((x11493*x11495))+((cj4*r11*x11490))+((x11489*x11495))+(((-1.0)*cj1*cj4*cj6*r10))+(((-1.0)*sj1*sj2*x11491))+((r10*x11490*x11492))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x11488*((x11491+(((-1.0)*x11493*x11494))+(((-1.0)*x11489*x11494))))), (x11488*(x11497.value)*((((cj1*r12*sj4*sj5))+((cj1*x11489*x11492))+((x11493*x11495))+((cj4*r11*x11490))+((x11489*x11495))+(((-1.0)*cj1*cj4*cj6*r10))+(((-1.0)*sj1*sj2*x11491))+((r10*x11490*x11492))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11498=IKsin(j0);
IkReal x11499=IKcos(j0);
IkReal x11500=((1.0)*cj5);
IkReal x11501=(cj6*sj4);
IkReal x11502=(r00*sj6);
IkReal x11503=(cj5*r12);
IkReal x11504=((0.37429)*sj5);
IkReal x11505=(r10*sj6);
IkReal x11506=(cj2*sj1);
IkReal x11507=((0.36442)*cj1);
IkReal x11508=(cj6*r01);
IkReal x11509=((0.01)*cj5);
IkReal x11510=((1.0)*sj5);
IkReal x11511=(cj6*r11);
IkReal x11512=(sj4*sj6);
IkReal x11513=((0.01)*sj5);
IkReal x11514=(cj4*cj6);
IkReal x11515=(cj5*r02);
IkReal x11516=((0.069)*x11498);
IkReal x11517=((1.0)*x11499);
IkReal x11518=(sj2*x11499);
IkReal x11519=((0.069)*x11499);
IkReal x11520=((1.0)*x11498);
IkReal x11521=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x11502*x11510))+x11515+(((-1.0)*cj1*x11517))+(((-1.0)*x11508*x11510)));
evalcond[1]=(x11503+(((-1.0)*cj1*x11520))+(((-1.0)*x11510*x11511))+(((-1.0)*x11505*x11510)));
evalcond[2]=((((-1.0)*r11*x11500*x11501))+((cj2*x11499))+(((-1.0)*sj4*x11500*x11505))+((sj1*sj2*x11498))+(((-1.0)*r12*sj4*x11510))+((r10*x11514))+(((-1.0)*r11*x11521)));
evalcond[3]=((((-1.0)*cj2*x11520))+((sj1*x11518))+(((-1.0)*sj4*x11500*x11502))+(((-1.0)*r02*sj4*x11510))+(((-1.0)*r01*x11500*x11501))+((r00*x11514))+(((-1.0)*r01*x11521)));
evalcond[4]=(x11518+(((-1.0)*x11506*x11520))+(((-1.0)*cj4*x11500*x11511))+(((-1.0)*r10*x11501))+(((-1.0)*cj4*r12*x11510))+((r11*x11512))+(((-1.0)*cj4*x11500*x11505)));
evalcond[5]=(((r01*x11512))+(((-1.0)*r00*x11501))+(((-1.0)*cj4*r02*x11510))+(((-1.0)*x11506*x11517))+(((-1.0)*sj2*x11520))+(((-1.0)*cj4*x11500*x11502))+(((-1.0)*cj4*x11500*x11508)));
evalcond[6]=(x11519+((x11502*x11509))+(((0.37429)*x11515))+(((-1.0)*sj2*x11516))+(((-1.0)*x11504*x11508))+(((-1.0)*px))+((x11508*x11509))+(((-1.0)*x11502*x11504))+((r02*x11513))+(((-1.0)*x11506*x11519))+((x11499*x11507)));
evalcond[7]=(((x11509*x11511))+((x11505*x11509))+x11516+((x11498*x11507))+(((-1.0)*x11504*x11505))+(((-1.0)*py))+(((-1.0)*x11504*x11511))+((r12*x11513))+(((0.37429)*x11503))+(((-1.0)*x11506*x11516))+(((0.069)*x11518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11522=((1.0)*cj6*sj5);
IkReal x11523=((1.0)*sj5*sj6);
CheckValue<IkReal> x11524=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x11524.valid){
continue;
}
CheckValue<IkReal> x11525 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x11523))+(((-1.0)*r11*x11522)))),IkReal(((((-1.0)*r00*x11523))+((cj5*r02))+(((-1.0)*r01*x11522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11525.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11524.value)))+(x11525.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11526=IKsin(j0);
IkReal x11527=IKcos(j0);
IkReal x11528=((1.0)*cj5);
IkReal x11529=(cj6*sj4);
IkReal x11530=(r00*sj6);
IkReal x11531=(cj5*r12);
IkReal x11532=((0.37429)*sj5);
IkReal x11533=(r10*sj6);
IkReal x11534=(cj2*sj1);
IkReal x11535=((0.36442)*cj1);
IkReal x11536=(cj6*r01);
IkReal x11537=((0.01)*cj5);
IkReal x11538=((1.0)*sj5);
IkReal x11539=(cj6*r11);
IkReal x11540=(sj4*sj6);
IkReal x11541=((0.01)*sj5);
IkReal x11542=(cj4*cj6);
IkReal x11543=(cj5*r02);
IkReal x11544=((0.069)*x11526);
IkReal x11545=((1.0)*x11527);
IkReal x11546=(sj2*x11527);
IkReal x11547=((0.069)*x11527);
IkReal x11548=((1.0)*x11526);
IkReal x11549=((1.0)*cj4*sj6);
evalcond[0]=(x11543+(((-1.0)*x11530*x11538))+(((-1.0)*cj1*x11545))+(((-1.0)*x11536*x11538)));
evalcond[1]=((((-1.0)*x11538*x11539))+x11531+(((-1.0)*x11533*x11538))+(((-1.0)*cj1*x11548)));
evalcond[2]=((((-1.0)*sj4*x11528*x11533))+((sj1*sj2*x11526))+((r10*x11542))+(((-1.0)*r12*sj4*x11538))+((cj2*x11527))+(((-1.0)*r11*x11528*x11529))+(((-1.0)*r11*x11549)));
evalcond[3]=((((-1.0)*r02*sj4*x11538))+(((-1.0)*sj4*x11528*x11530))+(((-1.0)*r01*x11528*x11529))+((sj1*x11546))+(((-1.0)*r01*x11549))+((r00*x11542))+(((-1.0)*cj2*x11548)));
evalcond[4]=(x11546+(((-1.0)*x11534*x11548))+(((-1.0)*cj4*x11528*x11533))+(((-1.0)*cj4*x11528*x11539))+(((-1.0)*cj4*r12*x11538))+((r11*x11540))+(((-1.0)*r10*x11529)));
evalcond[5]=((((-1.0)*cj4*r02*x11538))+(((-1.0)*r00*x11529))+((r01*x11540))+(((-1.0)*x11534*x11545))+(((-1.0)*cj4*x11528*x11530))+(((-1.0)*cj4*x11528*x11536))+(((-1.0)*sj2*x11548)));
evalcond[6]=(x11547+(((-1.0)*x11532*x11536))+(((-1.0)*x11534*x11547))+(((-1.0)*x11530*x11532))+((x11527*x11535))+(((-1.0)*px))+((x11530*x11537))+((x11536*x11537))+(((0.37429)*x11543))+(((-1.0)*sj2*x11544))+((r02*x11541)));
evalcond[7]=(x11544+(((-1.0)*x11532*x11539))+(((-1.0)*x11532*x11533))+(((-1.0)*x11534*x11544))+((x11533*x11537))+(((-1.0)*py))+((r12*x11541))+((x11537*x11539))+(((0.069)*x11546))+(((0.37429)*x11531))+((x11526*x11535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11550=((1.0)*cj6*sj5);
IkReal x11551=((1.0)*sj5*sj6);
CheckValue<IkReal> x11552=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x11552.valid){
continue;
}
CheckValue<IkReal> x11553 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x11551))+((cj5*r12))+(((-1.0)*r11*x11550)))),IkReal(((((-1.0)*r00*x11551))+(((-1.0)*r01*x11550))+((cj5*r02)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11553.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11552.value)))+(x11553.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11554=IKcos(j0);
IkReal x11555=IKsin(j0);
IkReal x11556=((0.01)*cj5);
IkReal x11557=(cj6*r11);
IkReal x11558=(cj5*r12);
IkReal x11559=(r10*sj6);
IkReal x11560=((0.37429)*sj5);
IkReal x11561=(r00*sj6);
IkReal x11562=((1.0)*sj5);
IkReal x11563=(cj6*r01);
IkReal x11564=(cj5*r02);
IkReal x11565=(cj2*sj1);
IkReal x11566=((0.01)*sj5);
IkReal x11567=(cj1*x11555);
IkReal x11568=((0.069)*x11555);
IkReal x11569=((0.069)*x11554);
IkReal x11570=(cj1*x11554);
evalcond[0]=(x11564+(((-1.0)*x11570))+(((-1.0)*x11562*x11563))+(((-1.0)*x11561*x11562)));
evalcond[1]=((((-1.0)*x11557*x11562))+x11558+(((-1.0)*x11559*x11562))+(((-1.0)*x11567)));
evalcond[2]=(((x11556*x11561))+((x11556*x11563))+x11569+(((0.37429)*x11564))+(((-1.0)*sj2*x11568))+(((-1.0)*px))+(((-1.0)*x11565*x11569))+((r02*x11566))+(((-1.0)*x11560*x11561))+(((-1.0)*x11560*x11563))+(((0.36442)*x11570)));
evalcond[3]=((((0.36442)*x11567))+(((-1.0)*x11557*x11560))+(((0.37429)*x11558))+x11568+(((-1.0)*x11559*x11560))+(((-1.0)*py))+(((-1.0)*x11565*x11568))+((x11556*x11559))+((x11556*x11557))+((r12*x11566))+((sj2*x11569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x11571=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x11571;
j4eval[1]=IKsign(x11571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x11572=((1.0)*sj5);
IkReal x11573=((((-1.0)*r00*sj6*x11572))+(((-1.0)*cj6*r01*x11572))+((cj5*r02)));
j4eval[0]=x11573;
j4eval[1]=IKsign(x11573);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x11574=cj5*cj5;
IkReal x11575=cj6*cj6;
IkReal x11576=r22*r22;
IkReal x11577=r21*r21;
IkReal x11578=r20*r20;
IkReal x11579=(cj6*r21);
IkReal x11580=(r20*sj6);
IkReal x11581=(cj1*cj2);
IkReal x11582=(r22*sj5);
IkReal x11583=(cj6*r20);
IkReal x11584=((2.0)*cj5);
IkReal x11585=(cj1*sj2);
IkReal x11586=((1.0)*x11577);
IkReal x11587=((1.0)*x11578);
IkReal x11588=((1.0)*r21*sj6);
IkReal x11589=((1.0)*cj5*x11585);
IkReal x11590=(x11574*x11575);
IkReal x11591=(((x11574*x11576))+(((2.0)*x11579*x11580))+(((-2.0)*x11574*x11579*x11580))+(((-1.0)*x11580*x11582*x11584))+(((-1.0)*x11586))+(((-1.0)*x11576))+(((-1.0)*x11586*x11590))+((x11578*x11590))+((x11575*x11577))+(((-1.0)*x11575*x11587))+(((-1.0)*x11579*x11582*x11584))+(((-1.0)*x11574*x11587)));
j4eval[0]=x11591;
j4eval[1]=((IKabs(((((-1.0)*x11579*x11589))+((x11581*x11583))+(((-1.0)*x11580*x11589))+(((-1.0)*x11581*x11588))+(((-1.0)*x11582*x11585)))))+(IKabs((((x11583*x11585))+((cj5*x11579*x11581))+(((-1.0)*x11585*x11588))+((x11581*x11582))+((cj5*x11580*x11581))))));
j4eval[2]=IKsign(x11591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x11592=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11592;
j4eval[1]=IKsign(x11592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x11593=((1.0)*sj5);
IkReal x11594=(((cj5*r12))+(((-1.0)*r10*sj6*x11593))+(((-1.0)*cj6*r11*x11593)));
j4eval[0]=x11594;
j4eval[1]=IKsign(x11594);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x11595=cj6*cj6;
IkReal x11596=cj5*cj5;
IkReal x11597=(cj5*sj5);
IkReal x11598=(cj6*r21);
IkReal x11599=((1.0)*r11);
IkReal x11600=(r10*r20);
IkReal x11601=(r10*sj6);
IkReal x11602=(r12*r22);
IkReal x11603=(r21*x11595);
IkReal x11604=(cj6*r20*sj6);
IkReal x11605=(r11*x11596);
IkReal x11606=((1.0)*x11596);
IkReal x11607=(((cj6*r11*r22*x11597))+(((-1.0)*x11602*x11606))+((r22*x11597*x11601))+x11602+((x11603*x11605))+((r12*r20*sj6*x11597))+((r11*r21))+((x11596*x11598*x11601))+(((-1.0)*x11599*x11604))+(((-1.0)*x11599*x11603))+((r12*x11597*x11598))+((x11604*x11605))+((x11595*x11600))+((x11596*x11600))+(((-1.0)*x11598*x11601))+(((-1.0)*x11595*x11600*x11606)));
j4eval[0]=x11607;
j4eval[1]=IKsign(x11607);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11608=cj6*cj6;
IkReal x11609=cj5*cj5;
IkReal x11610=(r22*sj5);
IkReal x11611=(cj0*sj2);
IkReal x11612=(r12*r22);
IkReal x11613=(cj5*sj6);
IkReal x11614=((1.0)*r11);
IkReal x11615=(cj6*r21);
IkReal x11616=(cj6*r20);
IkReal x11617=(r12*sj5);
IkReal x11618=((1.0)*sj6);
IkReal x11619=((1.0)*cj2*sj0);
IkReal x11620=((1.0)*x11609);
IkReal x11621=(r21*x11608);
IkReal x11622=(r10*x11609);
IkReal x11623=(r11*x11609);
IkReal x11624=(r10*r20*x11608);
CheckValue<IkReal> x11625=IKPowWithIntegerCheck(IKsign((x11612+x11624+((cj5*cj6*r11*x11610))+((sj6*x11616*x11623))+((r11*r21))+(((-1.0)*x11614*x11621))+(((-1.0)*sj6*x11614*x11616))+((r20*x11613*x11617))+(((-1.0)*x11620*x11624))+(((-1.0)*r10*x11615*x11618))+((cj5*x11615*x11617))+((sj6*x11615*x11622))+(((-1.0)*x11612*x11620))+((x11621*x11623))+((r20*x11622))+((r10*x11610*x11613)))),-1);
if(!x11625.valid){
continue;
}
CheckValue<IkReal> x11626 = IKatan2WithCheck(IkReal((((x11611*x11616))+((cj2*r21*sj0*sj6))+(((-1.0)*x11616*x11619))+(((-1.0)*r21*x11611*x11618)))),IkReal((((cj5*x11611*x11615))+((x11610*x11611))+(((-1.0)*cj5*x11615*x11619))+(((-1.0)*r20*x11613*x11619))+(((-1.0)*x11610*x11619))+((r20*x11611*x11613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11626.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11625.value)))+(x11626.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11627=IKsin(j4);
IkReal x11628=IKcos(j4);
IkReal x11629=(cj0*sj2);
IkReal x11630=(cj5*cj6);
IkReal x11631=(cj0*cj2);
IkReal x11632=(r11*sj6);
IkReal x11633=(cj6*r20);
IkReal x11634=(cj5*sj6);
IkReal x11635=(cj6*r10);
IkReal x11636=(cj6*r00);
IkReal x11637=((1.0)*sj0);
IkReal x11638=(cj2*x11637);
IkReal x11639=((1.0)*x11628);
IkReal x11640=((1.0)*x11627);
IkReal x11641=(sj6*x11627);
IkReal x11642=(sj5*x11640);
evalcond[0]=((((-1.0)*r20*x11634*x11640))+(((-1.0)*r21*x11630*x11640))+(((-1.0)*r22*x11642))+((x11628*x11633))+(((-1.0)*r21*sj6*x11639)));
evalcond[1]=((((-1.0)*r20*x11634*x11639))+(((-1.0)*r21*x11630*x11639))+((r21*x11641))+(((-1.0)*r22*sj5*x11639))+(((-1.0)*x11633*x11640)));
evalcond[2]=((((-1.0)*r12*x11642))+x11631+((sj0*sj2))+(((-1.0)*r11*x11630*x11640))+(((-1.0)*x11632*x11639))+((x11628*x11635))+(((-1.0)*r10*x11634*x11640)));
evalcond[3]=((((-1.0)*x11638))+x11629+(((-1.0)*r01*x11630*x11640))+(((-1.0)*r01*sj6*x11639))+(((-1.0)*r00*x11634*x11640))+((x11628*x11636))+(((-1.0)*r02*x11642)));
evalcond[4]=((((-1.0)*r10*x11634*x11639))+(((-1.0)*x11638))+x11629+((x11627*x11632))+(((-1.0)*r11*x11630*x11639))+(((-1.0)*x11635*x11640))+(((-1.0)*r12*sj5*x11639)));
evalcond[5]=((((-1.0)*x11631))+(((-1.0)*r01*x11630*x11639))+(((-1.0)*x11636*x11640))+(((-1.0)*r02*sj5*x11639))+(((-1.0)*r00*x11634*x11639))+((r01*x11641))+(((-1.0)*sj2*x11637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11643=(cj0*sj2);
IkReal x11644=(cj6*r20);
IkReal x11645=(r22*sj5);
IkReal x11646=((1.0)*sj5);
IkReal x11647=(r21*sj6);
IkReal x11648=((1.0)*cj2*sj0);
IkReal x11649=(cj5*cj6*r21);
IkReal x11650=(cj5*r20*sj6);
CheckValue<IkReal> x11651 = IKatan2WithCheck(IkReal((((cj2*sj0*x11647))+((x11643*x11644))+(((-1.0)*x11643*x11647))+(((-1.0)*x11644*x11648)))),IkReal((((x11643*x11645))+((x11643*x11649))+((x11643*x11650))+(((-1.0)*x11648*x11650))+(((-1.0)*x11648*x11649))+(((-1.0)*x11645*x11648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11651.valid){
continue;
}
CheckValue<IkReal> x11652=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x11646))+(((-1.0)*r10*sj6*x11646)))),-1);
if(!x11652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11651.value)+(((1.5707963267949)*(x11652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11653=IKsin(j4);
IkReal x11654=IKcos(j4);
IkReal x11655=(cj0*sj2);
IkReal x11656=(cj5*cj6);
IkReal x11657=(cj0*cj2);
IkReal x11658=(r11*sj6);
IkReal x11659=(cj6*r20);
IkReal x11660=(cj5*sj6);
IkReal x11661=(cj6*r10);
IkReal x11662=(cj6*r00);
IkReal x11663=((1.0)*sj0);
IkReal x11664=(cj2*x11663);
IkReal x11665=((1.0)*x11654);
IkReal x11666=((1.0)*x11653);
IkReal x11667=(sj6*x11653);
IkReal x11668=(sj5*x11666);
evalcond[0]=((((-1.0)*r21*sj6*x11665))+((x11654*x11659))+(((-1.0)*r20*x11660*x11666))+(((-1.0)*r21*x11656*x11666))+(((-1.0)*r22*x11668)));
evalcond[1]=(((r21*x11667))+(((-1.0)*x11659*x11666))+(((-1.0)*r20*x11660*x11665))+(((-1.0)*r21*x11656*x11665))+(((-1.0)*r22*sj5*x11665)));
evalcond[2]=(x11657+(((-1.0)*r10*x11660*x11666))+((sj0*sj2))+(((-1.0)*r12*x11668))+(((-1.0)*x11658*x11665))+(((-1.0)*r11*x11656*x11666))+((x11654*x11661)));
evalcond[3]=((((-1.0)*r01*sj6*x11665))+x11655+(((-1.0)*r01*x11656*x11666))+(((-1.0)*r02*x11668))+(((-1.0)*r00*x11660*x11666))+(((-1.0)*x11664))+((x11654*x11662)));
evalcond[4]=(x11655+(((-1.0)*r12*sj5*x11665))+((x11653*x11658))+(((-1.0)*r10*x11660*x11665))+(((-1.0)*x11664))+(((-1.0)*r11*x11656*x11665))+(((-1.0)*x11661*x11666)));
evalcond[5]=((((-1.0)*r02*sj5*x11665))+(((-1.0)*r01*x11656*x11665))+(((-1.0)*x11657))+((r01*x11667))+(((-1.0)*sj2*x11663))+(((-1.0)*r00*x11660*x11665))+(((-1.0)*x11662*x11666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11669=(sj0*sj2);
IkReal x11670=(cj0*cj2);
IkReal x11671=(cj6*r20);
IkReal x11672=(r22*sj5);
IkReal x11673=((1.0)*r21*sj6);
IkReal x11674=(cj5*cj6*r21);
IkReal x11675=(cj5*r20*sj6);
CheckValue<IkReal> x11676=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11676.valid){
continue;
}
CheckValue<IkReal> x11677 = IKatan2WithCheck(IkReal(((((-1.0)*x11669*x11673))+((x11670*x11671))+(((-1.0)*x11670*x11673))+((x11669*x11671)))),IkReal((((x11670*x11672))+((x11670*x11675))+((x11670*x11674))+((x11669*x11675))+((x11669*x11674))+((x11669*x11672)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11676.value)))+(x11677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11678=IKsin(j4);
IkReal x11679=IKcos(j4);
IkReal x11680=(cj0*sj2);
IkReal x11681=(cj5*cj6);
IkReal x11682=(cj0*cj2);
IkReal x11683=(r11*sj6);
IkReal x11684=(cj6*r20);
IkReal x11685=(cj5*sj6);
IkReal x11686=(cj6*r10);
IkReal x11687=(cj6*r00);
IkReal x11688=((1.0)*sj0);
IkReal x11689=(cj2*x11688);
IkReal x11690=((1.0)*x11679);
IkReal x11691=((1.0)*x11678);
IkReal x11692=(sj6*x11678);
IkReal x11693=(sj5*x11691);
evalcond[0]=((((-1.0)*r22*x11693))+(((-1.0)*r20*x11685*x11691))+(((-1.0)*r21*sj6*x11690))+((x11679*x11684))+(((-1.0)*r21*x11681*x11691)));
evalcond[1]=((((-1.0)*r20*x11685*x11690))+(((-1.0)*r22*sj5*x11690))+(((-1.0)*r21*x11681*x11690))+(((-1.0)*x11684*x11691))+((r21*x11692)));
evalcond[2]=(x11682+(((-1.0)*r10*x11685*x11691))+((sj0*sj2))+(((-1.0)*r11*x11681*x11691))+(((-1.0)*x11683*x11690))+((x11679*x11686))+(((-1.0)*r12*x11693)));
evalcond[3]=(x11680+(((-1.0)*r01*sj6*x11690))+(((-1.0)*r00*x11685*x11691))+(((-1.0)*x11689))+(((-1.0)*r02*x11693))+((x11679*x11687))+(((-1.0)*r01*x11681*x11691)));
evalcond[4]=(x11680+(((-1.0)*x11686*x11691))+(((-1.0)*r12*sj5*x11690))+(((-1.0)*x11689))+(((-1.0)*r10*x11685*x11690))+((x11678*x11683))+(((-1.0)*r11*x11681*x11690)));
evalcond[5]=((((-1.0)*x11682))+(((-1.0)*sj2*x11688))+(((-1.0)*r00*x11685*x11690))+(((-1.0)*x11687*x11691))+((r01*x11692))+(((-1.0)*r01*x11681*x11690))+(((-1.0)*r02*sj5*x11690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x11694=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11694;
j4eval[1]=IKsign(x11694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x11695=cj6*cj6;
IkReal x11696=cj5*cj5;
IkReal x11697=(cj5*sj5);
IkReal x11698=(cj6*r21);
IkReal x11699=((1.0)*r11);
IkReal x11700=(r10*r20);
IkReal x11701=(r10*sj6);
IkReal x11702=(r12*r22);
IkReal x11703=(r21*x11695);
IkReal x11704=(cj6*r20*sj6);
IkReal x11705=(r11*x11696);
IkReal x11706=((1.0)*x11696);
IkReal x11707=(((r12*x11697*x11698))+x11702+((cj6*r11*r22*x11697))+((x11703*x11705))+(((-1.0)*x11695*x11700*x11706))+(((-1.0)*x11702*x11706))+((x11696*x11700))+((r11*r21))+((x11704*x11705))+(((-1.0)*x11698*x11701))+((x11696*x11698*x11701))+(((-1.0)*x11699*x11703))+(((-1.0)*x11699*x11704))+((r22*x11697*x11701))+((r12*r20*sj6*x11697))+((x11695*x11700)));
j4eval[0]=x11707;
j4eval[1]=IKsign(x11707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x11708=cj5*cj5;
IkReal x11709=cj6*cj6;
IkReal x11710=(r00*r20);
IkReal x11711=(r02*r22);
IkReal x11712=(cj5*sj5);
IkReal x11713=(cj6*r21);
IkReal x11714=(r00*sj6);
IkReal x11715=(r20*sj6);
IkReal x11716=(cj6*r01);
IkReal x11717=((1.0)*x11708);
IkReal x11718=(r01*r21*x11709);
IkReal x11719=(x11711+((x11708*x11718))+((x11708*x11710))+(((-1.0)*x11709*x11710*x11717))+(((-1.0)*x11715*x11716))+((x11708*x11715*x11716))+((r01*r21))+(((-1.0)*x11718))+((r02*x11712*x11713))+((r02*x11712*x11715))+(((-1.0)*x11713*x11714))+(((-1.0)*x11711*x11717))+((r22*x11712*x11714))+((r22*x11712*x11716))+((x11708*x11713*x11714))+((x11709*x11710)));
j4eval[0]=x11719;
j4eval[1]=IKsign(x11719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11720=cj5*cj5;
IkReal x11721=cj6*cj6;
IkReal x11722=(cj6*r21);
IkReal x11723=(cj6*r20);
IkReal x11724=(cj0*cj2);
IkReal x11725=(r20*sj6);
IkReal x11726=((1.0)*sj6);
IkReal x11727=(sj0*sj2);
IkReal x11728=((1.0)*cj5);
IkReal x11729=(r02*r22);
IkReal x11730=(r22*sj5);
IkReal x11731=(r00*sj6);
IkReal x11732=(cj5*r02*sj5);
IkReal x11733=(r01*x11720);
IkReal x11734=(r21*x11721);
IkReal x11735=(r00*r20*x11720);
CheckValue<IkReal> x11736 = IKatan2WithCheck(IkReal(((((-1.0)*x11723*x11727))+(((-1.0)*r21*x11724*x11726))+((r21*sj6*x11727))+((x11723*x11724)))),IkReal((((cj5*x11722*x11724))+(((-1.0)*x11722*x11727*x11728))+(((-1.0)*x11727*x11730))+(((-1.0)*x11725*x11727*x11728))+((cj5*x11724*x11725))+((x11724*x11730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11736.valid){
continue;
}
CheckValue<IkReal> x11737=IKPowWithIntegerCheck(IKsign((x11735+x11729+((r00*r20*x11721))+((cj5*x11730*x11731))+((x11733*x11734))+((r01*r21))+(((-1.0)*r00*x11722*x11726))+(((-1.0)*x11721*x11735))+(((-1.0)*r01*x11723*x11726))+(((-1.0)*x11720*x11729))+((x11722*x11732))+((cj5*cj6*r01*x11730))+((x11725*x11732))+(((-1.0)*r01*x11734))+((x11720*x11722*x11731))+((sj6*x11723*x11733)))),-1);
if(!x11737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11736.value)+(((1.5707963267949)*(x11737.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11738=IKsin(j4);
IkReal x11739=IKcos(j4);
IkReal x11740=(cj0*cj2);
IkReal x11741=(cj5*cj6);
IkReal x11742=(r11*sj6);
IkReal x11743=(cj6*r20);
IkReal x11744=(cj5*sj6);
IkReal x11745=(cj6*r10);
IkReal x11746=(r01*sj6);
IkReal x11747=(cj0*sj2);
IkReal x11748=(r21*sj6);
IkReal x11749=(cj6*r00);
IkReal x11750=((1.0)*sj0);
IkReal x11751=(sj2*x11750);
IkReal x11752=((1.0)*x11739);
IkReal x11753=((1.0)*x11738);
IkReal x11754=(sj5*x11753);
evalcond[0]=((((-1.0)*r20*x11744*x11753))+(((-1.0)*r22*x11754))+(((-1.0)*x11748*x11752))+(((-1.0)*r21*x11741*x11753))+((x11739*x11743)));
evalcond[1]=((((-1.0)*r20*x11744*x11752))+(((-1.0)*r22*sj5*x11752))+(((-1.0)*r21*x11741*x11752))+(((-1.0)*x11743*x11753))+((x11738*x11748)));
evalcond[2]=(((cj2*sj0))+x11747+(((-1.0)*r10*x11744*x11752))+(((-1.0)*r12*sj5*x11752))+(((-1.0)*x11745*x11753))+(((-1.0)*r11*x11741*x11752))+((x11738*x11742)));
evalcond[3]=(x11740+(((-1.0)*r10*x11744*x11753))+(((-1.0)*r12*x11754))+(((-1.0)*r11*x11741*x11753))+(((-1.0)*x11742*x11752))+(((-1.0)*x11751))+((x11739*x11745)));
evalcond[4]=((((-1.0)*r00*x11744*x11752))+x11740+(((-1.0)*x11749*x11753))+(((-1.0)*r02*sj5*x11752))+(((-1.0)*r01*x11741*x11752))+(((-1.0)*x11751))+((x11738*x11746)));
evalcond[5]=((((-1.0)*r00*x11744*x11753))+(((-1.0)*cj2*x11750))+(((-1.0)*x11747))+(((-1.0)*r02*x11754))+(((-1.0)*x11746*x11752))+(((-1.0)*r01*x11741*x11753))+((x11739*x11749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11755=cj6*cj6;
IkReal x11756=cj5*cj5;
IkReal x11757=((1.0)*r11);
IkReal x11758=(r22*sj5);
IkReal x11759=(cj0*sj2);
IkReal x11760=(cj5*sj6);
IkReal x11761=(cj6*r20);
IkReal x11762=(cj2*sj0);
IkReal x11763=(r21*sj6);
IkReal x11764=(cj6*r10);
IkReal x11765=(r12*r22);
IkReal x11766=(r12*sj5);
IkReal x11767=(r21*x11755);
IkReal x11768=(r20*x11762);
IkReal x11769=(cj5*cj6*r21);
IkReal x11770=(r11*x11756);
IkReal x11771=(r10*r20*x11756);
CheckValue<IkReal> x11772 = IKatan2WithCheck(IkReal((((x11759*x11761))+(((-1.0)*x11759*x11763))+(((-1.0)*x11762*x11763))+((x11761*x11762)))),IkReal((((x11762*x11769))+((x11759*x11769))+((r20*x11759*x11760))+((x11758*x11762))+((x11758*x11759))+((x11760*x11768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11772.valid){
continue;
}
CheckValue<IkReal> x11773=IKPowWithIntegerCheck(IKsign((((r10*x11758*x11760))+x11771+x11765+((r11*r21))+((x11766*x11769))+((sj6*x11761*x11770))+((cj5*cj6*r11*x11758))+((r20*x11760*x11766))+(((-1.0)*x11763*x11764))+(((-1.0)*sj6*x11757*x11761))+(((-1.0)*x11757*x11767))+((r10*r20*x11755))+(((-1.0)*x11755*x11771))+(((-1.0)*x11756*x11765))+((x11756*x11763*x11764))+((x11767*x11770)))),-1);
if(!x11773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11772.value)+(((1.5707963267949)*(x11773.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11774=IKsin(j4);
IkReal x11775=IKcos(j4);
IkReal x11776=(cj0*cj2);
IkReal x11777=(cj5*cj6);
IkReal x11778=(r11*sj6);
IkReal x11779=(cj6*r20);
IkReal x11780=(cj5*sj6);
IkReal x11781=(cj6*r10);
IkReal x11782=(r01*sj6);
IkReal x11783=(cj0*sj2);
IkReal x11784=(r21*sj6);
IkReal x11785=(cj6*r00);
IkReal x11786=((1.0)*sj0);
IkReal x11787=(sj2*x11786);
IkReal x11788=((1.0)*x11775);
IkReal x11789=((1.0)*x11774);
IkReal x11790=(sj5*x11789);
evalcond[0]=(((x11775*x11779))+(((-1.0)*r20*x11780*x11789))+(((-1.0)*x11784*x11788))+(((-1.0)*r21*x11777*x11789))+(((-1.0)*r22*x11790)));
evalcond[1]=((((-1.0)*x11779*x11789))+((x11774*x11784))+(((-1.0)*r22*sj5*x11788))+(((-1.0)*r20*x11780*x11788))+(((-1.0)*r21*x11777*x11788)));
evalcond[2]=(((cj2*sj0))+x11783+(((-1.0)*r11*x11777*x11788))+(((-1.0)*r12*sj5*x11788))+(((-1.0)*x11781*x11789))+(((-1.0)*r10*x11780*x11788))+((x11774*x11778)));
evalcond[3]=(x11776+(((-1.0)*x11778*x11788))+(((-1.0)*r11*x11777*x11789))+(((-1.0)*r12*x11790))+(((-1.0)*r10*x11780*x11789))+(((-1.0)*x11787))+((x11775*x11781)));
evalcond[4]=((((-1.0)*r00*x11780*x11788))+x11776+((x11774*x11782))+(((-1.0)*x11785*x11789))+(((-1.0)*r02*sj5*x11788))+(((-1.0)*r01*x11777*x11788))+(((-1.0)*x11787)));
evalcond[5]=((((-1.0)*r00*x11780*x11789))+(((-1.0)*x11782*x11788))+(((-1.0)*x11783))+(((-1.0)*r01*x11777*x11789))+(((-1.0)*cj2*x11786))+(((-1.0)*r02*x11790))+((x11775*x11785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11791=(cj0*cj2);
IkReal x11792=(cj6*r20);
IkReal x11793=(r21*sj6);
IkReal x11794=(sj0*sj2);
IkReal x11795=(r22*sj5);
IkReal x11796=(cj5*r20*sj6);
IkReal x11797=(cj5*cj6*r21);
CheckValue<IkReal> x11798 = IKatan2WithCheck(IkReal(((((-1.0)*x11791*x11793))+((x11793*x11794))+(((-1.0)*x11792*x11794))+((x11791*x11792)))),IkReal(((((-1.0)*x11794*x11795))+(((-1.0)*x11794*x11797))+(((-1.0)*x11794*x11796))+((x11791*x11797))+((x11791*x11796))+((x11791*x11795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11798.valid){
continue;
}
CheckValue<IkReal> x11799=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11798.value)+(((1.5707963267949)*(x11799.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11800=IKsin(j4);
IkReal x11801=IKcos(j4);
IkReal x11802=(cj0*cj2);
IkReal x11803=(cj5*cj6);
IkReal x11804=(r11*sj6);
IkReal x11805=(cj6*r20);
IkReal x11806=(cj5*sj6);
IkReal x11807=(cj6*r10);
IkReal x11808=(r01*sj6);
IkReal x11809=(cj0*sj2);
IkReal x11810=(r21*sj6);
IkReal x11811=(cj6*r00);
IkReal x11812=((1.0)*sj0);
IkReal x11813=(sj2*x11812);
IkReal x11814=((1.0)*x11801);
IkReal x11815=((1.0)*x11800);
IkReal x11816=(sj5*x11815);
evalcond[0]=((((-1.0)*r20*x11806*x11815))+(((-1.0)*r22*x11816))+(((-1.0)*x11810*x11814))+(((-1.0)*r21*x11803*x11815))+((x11801*x11805)));
evalcond[1]=((((-1.0)*r20*x11806*x11814))+(((-1.0)*x11805*x11815))+((x11800*x11810))+(((-1.0)*r22*sj5*x11814))+(((-1.0)*r21*x11803*x11814)));
evalcond[2]=(((cj2*sj0))+((x11800*x11804))+(((-1.0)*r11*x11803*x11814))+(((-1.0)*r12*sj5*x11814))+(((-1.0)*x11807*x11815))+x11809+(((-1.0)*r10*x11806*x11814)));
evalcond[3]=((((-1.0)*x11804*x11814))+(((-1.0)*r11*x11803*x11815))+(((-1.0)*r12*x11816))+((x11801*x11807))+(((-1.0)*x11813))+x11802+(((-1.0)*r10*x11806*x11815)));
evalcond[4]=(((x11800*x11808))+(((-1.0)*r00*x11806*x11814))+(((-1.0)*r01*x11803*x11814))+(((-1.0)*r02*sj5*x11814))+(((-1.0)*x11813))+(((-1.0)*x11811*x11815))+x11802);
evalcond[5]=((((-1.0)*r00*x11806*x11815))+(((-1.0)*x11808*x11814))+(((-1.0)*x11809))+(((-1.0)*r01*x11803*x11815))+(((-1.0)*r02*x11816))+(((-1.0)*cj2*x11812))+((x11801*x11811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11817=cj5*cj5;
IkReal x11818=cj6*cj6;
IkReal x11819=r22*r22;
IkReal x11820=r21*r21;
IkReal x11821=r20*r20;
IkReal x11822=(cj6*r21);
IkReal x11823=(r20*sj6);
IkReal x11824=(cj1*cj5);
IkReal x11825=((1.0)*sj2);
IkReal x11826=(cj1*cj2);
IkReal x11827=(cj6*r20);
IkReal x11828=(r22*sj5);
IkReal x11829=(r21*sj6);
IkReal x11830=((2.0)*cj5);
IkReal x11831=((1.0)*x11820);
IkReal x11832=((1.0)*x11821);
IkReal x11833=(x11817*x11818);
CheckValue<IkReal> x11834 = IKatan2WithCheck(IkReal(((((-1.0)*x11822*x11824*x11825))+(((-1.0)*x11823*x11824*x11825))+(((-1.0)*x11826*x11829))+((x11826*x11827))+(((-1.0)*cj1*x11825*x11828)))),IkReal((((cj1*sj2*x11827))+((cj2*x11823*x11824))+((x11826*x11828))+(((-1.0)*cj1*x11825*x11829))+((cj2*x11822*x11824)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11834.valid){
continue;
}
CheckValue<IkReal> x11835=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11823*x11828*x11830))+(((-1.0)*x11819))+((x11817*x11819))+(((-1.0)*x11831*x11833))+((x11818*x11820))+(((2.0)*x11822*x11823))+(((-1.0)*x11822*x11828*x11830))+(((-1.0)*x11831))+((x11821*x11833))+(((-2.0)*x11817*x11822*x11823))+(((-1.0)*x11817*x11832))+(((-1.0)*x11818*x11832)))),-1);
if(!x11835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11834.value)+(((1.5707963267949)*(x11835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11836=IKsin(j4);
IkReal x11837=IKcos(j4);
IkReal x11838=(cj5*cj6);
IkReal x11839=(cj0*sj1);
IkReal x11840=(r11*sj6);
IkReal x11841=(cj6*r20);
IkReal x11842=(cj5*sj6);
IkReal x11843=(cj6*r10);
IkReal x11844=((1.0)*cj2);
IkReal x11845=(r21*sj6);
IkReal x11846=(cj6*r00);
IkReal x11847=(sj0*sj1);
IkReal x11848=(r01*sj6);
IkReal x11849=((1.0)*x11837);
IkReal x11850=((1.0)*x11836);
IkReal x11851=(sj5*x11850);
evalcond[0]=((((-1.0)*x11845*x11849))+((cj1*sj2))+(((-1.0)*r20*x11842*x11850))+((x11837*x11841))+(((-1.0)*r21*x11838*x11850))+(((-1.0)*r22*x11851)));
evalcond[1]=((((-1.0)*r22*sj5*x11849))+((x11836*x11845))+(((-1.0)*cj1*x11844))+(((-1.0)*x11841*x11850))+(((-1.0)*r20*x11842*x11849))+(((-1.0)*r21*x11838*x11849)));
evalcond[2]=((((-1.0)*x11840*x11849))+((cj0*cj2))+(((-1.0)*r11*x11838*x11850))+((x11837*x11843))+(((-1.0)*r10*x11842*x11850))+(((-1.0)*r12*x11851))+((sj2*x11847)));
evalcond[3]=((((-1.0)*r02*x11851))+(((-1.0)*x11848*x11849))+(((-1.0)*r00*x11842*x11850))+((sj2*x11839))+(((-1.0)*r01*x11838*x11850))+((x11837*x11846))+(((-1.0)*sj0*x11844)));
evalcond[4]=((((-1.0)*x11843*x11850))+((x11836*x11840))+(((-1.0)*x11844*x11847))+(((-1.0)*r11*x11838*x11849))+(((-1.0)*r12*sj5*x11849))+(((-1.0)*r10*x11842*x11849))+((cj0*sj2)));
evalcond[5]=(((x11836*x11848))+(((-1.0)*r00*x11842*x11849))+(((-1.0)*x11839*x11844))+(((-1.0)*r02*sj5*x11849))+(((-1.0)*r01*x11838*x11849))+(((-1.0)*sj0*sj2))+(((-1.0)*x11846*x11850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11852=(cj6*r21);
IkReal x11853=(r20*sj6);
IkReal x11854=(cj1*sj2);
IkReal x11855=((1.0)*cj6);
IkReal x11856=((1.0)*sj5);
IkReal x11857=(cj0*cj2);
IkReal x11858=(r21*sj6);
IkReal x11859=(sj0*sj1*sj2);
IkReal x11860=((1.0)*cj5*x11857);
IkReal x11861=((1.0)*cj5*x11859);
CheckValue<IkReal> x11862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x11855))+(((-1.0)*r00*sj6*x11856))+((cj5*r02)))),-1);
if(!x11862.valid){
continue;
}
CheckValue<IkReal> x11863 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6*x11854))+((cj6*r10*x11854))+(((-1.0)*r20*x11855*x11857))+(((-1.0)*r20*x11855*x11859))+((x11858*x11859))+((x11857*x11858)))),IkReal((((r12*sj5*x11854))+(((-1.0)*r22*x11856*x11857))+(((-1.0)*r22*x11856*x11859))+(((-1.0)*x11852*x11860))+(((-1.0)*x11852*x11861))+(((-1.0)*x11853*x11860))+(((-1.0)*x11853*x11861))+((cj5*cj6*r11*x11854))+((cj5*r10*sj6*x11854)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11862.value)))+(x11863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11864=IKsin(j4);
IkReal x11865=IKcos(j4);
IkReal x11866=(cj5*cj6);
IkReal x11867=(cj0*sj1);
IkReal x11868=(r11*sj6);
IkReal x11869=(cj6*r20);
IkReal x11870=(cj5*sj6);
IkReal x11871=(cj6*r10);
IkReal x11872=((1.0)*cj2);
IkReal x11873=(r21*sj6);
IkReal x11874=(cj6*r00);
IkReal x11875=(sj0*sj1);
IkReal x11876=(r01*sj6);
IkReal x11877=((1.0)*x11865);
IkReal x11878=((1.0)*x11864);
IkReal x11879=(sj5*x11878);
evalcond[0]=((((-1.0)*r22*x11879))+(((-1.0)*r20*x11870*x11878))+((cj1*sj2))+(((-1.0)*r21*x11866*x11878))+(((-1.0)*x11873*x11877))+((x11865*x11869)));
evalcond[1]=(((x11864*x11873))+(((-1.0)*cj1*x11872))+(((-1.0)*r20*x11870*x11877))+(((-1.0)*r21*x11866*x11877))+(((-1.0)*x11869*x11878))+(((-1.0)*r22*sj5*x11877)));
evalcond[2]=((((-1.0)*r11*x11866*x11878))+((sj2*x11875))+(((-1.0)*x11868*x11877))+((cj0*cj2))+(((-1.0)*r10*x11870*x11878))+(((-1.0)*r12*x11879))+((x11865*x11871)));
evalcond[3]=(((sj2*x11867))+(((-1.0)*r00*x11870*x11878))+(((-1.0)*r01*x11866*x11878))+(((-1.0)*x11876*x11877))+(((-1.0)*sj0*x11872))+(((-1.0)*r02*x11879))+((x11865*x11874)));
evalcond[4]=((((-1.0)*x11871*x11878))+(((-1.0)*x11872*x11875))+(((-1.0)*r11*x11866*x11877))+((x11864*x11868))+(((-1.0)*r10*x11870*x11877))+(((-1.0)*r12*sj5*x11877))+((cj0*sj2)));
evalcond[5]=(((x11864*x11876))+(((-1.0)*x11867*x11872))+(((-1.0)*r00*x11870*x11877))+(((-1.0)*r01*x11866*x11877))+(((-1.0)*r02*sj5*x11877))+(((-1.0)*sj0*sj2))+(((-1.0)*x11874*x11878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11880=(cj6*r20);
IkReal x11881=(cj2*sj0);
IkReal x11882=((1.0)*sj2);
IkReal x11883=(cj0*sj1);
IkReal x11884=(cj1*r01);
IkReal x11885=(r22*sj5);
IkReal x11886=(cj5*cj6);
IkReal x11887=(cj1*sj2);
IkReal x11888=(r21*sj6);
IkReal x11889=(cj5*r20*sj6);
CheckValue<IkReal> x11890=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x11890.valid){
continue;
}
CheckValue<IkReal> x11891 = IKatan2WithCheck(IkReal(((((-1.0)*x11881*x11888))+(((-1.0)*x11880*x11882*x11883))+(((-1.0)*sj6*x11882*x11884))+((x11880*x11881))+((sj2*x11883*x11888))+((cj6*r00*x11887)))),IkReal((((x11881*x11889))+((x11881*x11885))+(((-1.0)*r21*x11882*x11883*x11886))+(((-1.0)*x11882*x11883*x11889))+(((-1.0)*x11882*x11883*x11885))+((cj5*r00*sj6*x11887))+((sj2*x11884*x11886))+((r02*sj5*x11887))+((r21*x11881*x11886)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11891.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11890.value)))+(x11891.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11892=IKsin(j4);
IkReal x11893=IKcos(j4);
IkReal x11894=(cj5*cj6);
IkReal x11895=(cj0*sj1);
IkReal x11896=(r11*sj6);
IkReal x11897=(cj6*r20);
IkReal x11898=(cj5*sj6);
IkReal x11899=(cj6*r10);
IkReal x11900=((1.0)*cj2);
IkReal x11901=(r21*sj6);
IkReal x11902=(cj6*r00);
IkReal x11903=(sj0*sj1);
IkReal x11904=(r01*sj6);
IkReal x11905=((1.0)*x11893);
IkReal x11906=((1.0)*x11892);
IkReal x11907=(sj5*x11906);
evalcond[0]=((((-1.0)*x11901*x11905))+(((-1.0)*r22*x11907))+((cj1*sj2))+((x11893*x11897))+(((-1.0)*r20*x11898*x11906))+(((-1.0)*r21*x11894*x11906)));
evalcond[1]=((((-1.0)*x11897*x11906))+(((-1.0)*cj1*x11900))+((x11892*x11901))+(((-1.0)*r22*sj5*x11905))+(((-1.0)*r20*x11898*x11905))+(((-1.0)*r21*x11894*x11905)));
evalcond[2]=((((-1.0)*r11*x11894*x11906))+((cj0*cj2))+(((-1.0)*x11896*x11905))+((sj2*x11903))+(((-1.0)*r12*x11907))+(((-1.0)*r10*x11898*x11906))+((x11893*x11899)));
evalcond[3]=((((-1.0)*r02*x11907))+(((-1.0)*sj0*x11900))+(((-1.0)*r00*x11898*x11906))+((x11893*x11902))+((sj2*x11895))+(((-1.0)*x11904*x11905))+(((-1.0)*r01*x11894*x11906)));
evalcond[4]=((((-1.0)*x11900*x11903))+(((-1.0)*x11899*x11906))+(((-1.0)*r11*x11894*x11905))+(((-1.0)*r12*sj5*x11905))+(((-1.0)*r10*x11898*x11905))+((x11892*x11896))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x11895*x11900))+(((-1.0)*r02*sj5*x11905))+(((-1.0)*r00*x11898*x11905))+((x11892*x11904))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x11894*x11905))+(((-1.0)*x11902*x11906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11908=(cj6*sj5);
IkReal x11909=(sj5*sj6);
IkReal x11910=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r00*x11909))+((r01*x11908))+(((-1.0)*r02*x11910)))))+(IKabs((((r10*x11909))+(((-1.0)*r12*x11910))+((r11*x11908))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x11911=cj5*cj5;
IkReal x11912=cj6*cj6;
IkReal x11913=r22*r22;
IkReal x11914=r21*r21;
IkReal x11915=r20*r20;
IkReal x11916=((1.0)*cj5);
IkReal x11917=(cj6*r21);
IkReal x11918=(r20*sj6);
IkReal x11919=(cj1*cj2);
IkReal x11920=(cj1*sj2);
IkReal x11921=(r22*sj5);
IkReal x11922=(cj6*r20);
IkReal x11923=((2.0)*cj5);
IkReal x11924=(sj6*x11919);
IkReal x11925=((1.0)*x11914);
IkReal x11926=(x11912*x11915);
IkReal x11927=((((2.0)*x11917*x11918))+(((-1.0)*x11925))+(((-1.0)*x11913))+(((-1.0)*x11917*x11921*x11923))+((x11912*x11914))+((x11911*x11926))+(((-2.0)*x11911*x11917*x11918))+(((-1.0)*x11918*x11921*x11923))+(((-1.0)*x11911*x11912*x11925))+(((-1.0)*x11926))+((x11911*x11913))+(((-1.0)*x11911*x11915)));
j4eval[0]=x11927;
j4eval[1]=IKsign(x11927);
j4eval[2]=((IKabs(((((-1.0)*r21*sj6*x11920))+(((-1.0)*x11916*x11917*x11919))+(((-1.0)*x11916*x11918*x11919))+((x11920*x11922))+(((-1.0)*x11919*x11921)))))+(IKabs(((((-1.0)*x11920*x11921))+((r21*x11924))+(((-1.0)*x11916*x11918*x11920))+(((-1.0)*x11916*x11917*x11920))+(((-1.0)*x11919*x11922))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(cj1+(((-1.0)*cj1*cj2*sj1))+(((5.28144927536232)*(cj1*cj1))));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((9522.0)+(((-9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x11928=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*cj6*x11928)))))+(IKabs(((((-1.0)*sj6*x11928))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x11929=((1.0)*cj5);
CheckValue<IkReal> x11931 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((((-1.0)*cj6*r21*x11929))+(((-1.0)*r20*sj6*x11929))+(((-1.0)*r22*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11931.valid){
continue;
}
IkReal x11930=x11931.value;
j4array[0]=((-1.0)*x11930);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x11930)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x11932=IKcos(j4);
IkReal x11933=IKsin(j4);
IkReal x11934=(cj5*x11932);
evalcond[0]=((((-1.0)*r21*sj6*x11933))+((r20*sj6*x11934))+((cj6*r20*x11933))+((r22*sj5*x11932))+((cj6*r21*x11934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11935=(cj2*cj4);
IkReal x11936=(r02*sj5);
IkReal x11937=(cj4*sj2);
IkReal x11938=(r12*sj5);
IkReal x11939=((1.0)*r01);
IkReal x11940=(cj5*cj6*r11);
IkReal x11941=(cj5*r00*sj6);
IkReal x11942=(cj5*r10*sj6);
IkReal x11943=(cj6*r00*sj4);
IkReal x11944=(sj2*sj4*sj6);
IkReal x11945=(cj6*r10*sj4);
IkReal x11946=(cj2*sj4*sj6);
IkReal x11947=(cj5*cj6*r01);
if( IKabs(((((-1.0)*r11*x11946))+((x11936*x11937))+((cj2*x11945))+((x11937*x11941))+((x11937*x11947))+((sj2*x11943))+((x11935*x11938))+((x11935*x11940))+((x11935*x11942))+(((-1.0)*x11939*x11944)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x11944))+(((-1.0)*x11937*x11940))+(((-1.0)*x11937*x11942))+((cj2*x11943))+(((-1.0)*sj2*x11945))+((x11935*x11936))+((x11935*x11947))+((x11935*x11941))+(((-1.0)*x11937*x11938))+(((-1.0)*x11939*x11946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x11946))+((x11936*x11937))+((cj2*x11945))+((x11937*x11941))+((x11937*x11947))+((sj2*x11943))+((x11935*x11938))+((x11935*x11940))+((x11935*x11942))+(((-1.0)*x11939*x11944))))+IKsqr((((r11*x11944))+(((-1.0)*x11937*x11940))+(((-1.0)*x11937*x11942))+((cj2*x11943))+(((-1.0)*sj2*x11945))+((x11935*x11936))+((x11935*x11947))+((x11935*x11941))+(((-1.0)*x11937*x11938))+(((-1.0)*x11939*x11946))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x11946))+((x11936*x11937))+((cj2*x11945))+((x11937*x11941))+((x11937*x11947))+((sj2*x11943))+((x11935*x11938))+((x11935*x11940))+((x11935*x11942))+(((-1.0)*x11939*x11944))), (((r11*x11944))+(((-1.0)*x11937*x11940))+(((-1.0)*x11937*x11942))+((cj2*x11943))+(((-1.0)*sj2*x11945))+((x11935*x11936))+((x11935*x11947))+((x11935*x11941))+(((-1.0)*x11937*x11938))+(((-1.0)*x11939*x11946))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11948=IKcos(j0);
IkReal x11949=IKsin(j0);
IkReal x11950=((1.0)*sj4);
IkReal x11951=(cj6*sj4);
IkReal x11952=((0.37429)*sj5);
IkReal x11953=(r10*sj6);
IkReal x11954=(r01*sj6);
IkReal x11955=((0.37429)*cj5);
IkReal x11956=((0.069)*sj2);
IkReal x11957=(cj6*r01);
IkReal x11958=((0.01)*cj5);
IkReal x11959=(r12*sj5);
IkReal x11960=(r00*sj6);
IkReal x11961=(r02*sj5);
IkReal x11962=(cj4*cj6);
IkReal x11963=(cj4*cj5);
IkReal x11964=((1.0)*cj4);
IkReal x11965=(r11*sj6);
IkReal x11966=(sj2*x11948);
IkReal x11967=(cj5*cj6*r11);
IkReal x11968=(cj2*x11948);
IkReal x11969=((0.069)*x11949);
IkReal x11970=(sj2*x11949);
IkReal x11971=((1.0)*cj2*x11949);
evalcond[0]=(x11966+((cj4*x11959))+((x11953*x11963))+(((-1.0)*x11971))+((cj5*r11*x11962))+(((-1.0)*x11950*x11965))+((r10*x11951)));
evalcond[1]=((((-1.0)*x11970))+((x11957*x11963))+(((-1.0)*x11968))+(((-1.0)*x11950*x11954))+((r00*x11951))+((x11960*x11963))+((cj4*x11961)));
evalcond[2]=(x11970+x11968+(((-1.0)*x11964*x11965))+((r10*x11962))+(((-1.0)*x11950*x11967))+(((-1.0)*x11950*x11959))+(((-1.0)*cj5*x11950*x11953)));
evalcond[3]=(x11966+(((-1.0)*cj5*x11950*x11960))+((r00*x11962))+(((-1.0)*x11971))+(((-1.0)*x11950*x11961))+(((-1.0)*x11954*x11964))+(((-1.0)*cj5*x11950*x11957)));
evalcond[4]=((((-0.069)*x11968))+((x11958*x11960))+(((0.01)*x11961))+((r02*x11955))+(((-1.0)*x11949*x11956))+(((-1.0)*x11952*x11957))+(((-1.0)*px))+(((0.069)*x11948))+((x11957*x11958))+(((-1.0)*x11952*x11960)));
evalcond[5]=(x11969+((r12*x11955))+(((-1.0)*cj6*r11*x11952))+(((-1.0)*x11952*x11953))+((cj6*r11*x11958))+(((-1.0)*py))+((x11953*x11958))+((x11948*x11956))+(((0.01)*x11959))+(((-1.0)*cj2*x11969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11973 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11973.valid){
continue;
}
IkReal x11972=x11973.value;
j4array[0]=((-1.0)*x11972);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x11972)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x11974=IKsin(j4);
IkReal x11975=IKcos(j4);
IkReal x11976=((1.0)*x11974);
evalcond[0]=((((-1.0)*r21*sj6*x11975))+(((-1.0)*cj5*r20*sj6*x11976))+((cj6*r20*x11975))+(((-1.0)*cj5*cj6*r21*x11976))+(((-1.0)*r22*sj5*x11976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11977=(cj2*cj4);
IkReal x11978=(r02*sj5);
IkReal x11979=(cj4*sj2);
IkReal x11980=(r12*sj5);
IkReal x11981=((1.0)*r01);
IkReal x11982=(cj5*cj6*r11);
IkReal x11983=(cj5*r00*sj6);
IkReal x11984=(cj5*r10*sj6);
IkReal x11985=(cj6*r00*sj4);
IkReal x11986=(sj2*sj4*sj6);
IkReal x11987=(cj6*r10*sj4);
IkReal x11988=(cj2*sj4*sj6);
IkReal x11989=(cj5*cj6*r01);
if( IKabs((((sj2*x11985))+(((-1.0)*x11981*x11986))+((x11979*x11983))+((x11979*x11989))+((x11978*x11979))+((cj2*x11987))+(((-1.0)*r11*x11988))+((x11977*x11980))+((x11977*x11982))+((x11977*x11984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x11981*x11988))+((x11977*x11978))+(((-1.0)*x11979*x11980))+(((-1.0)*x11979*x11982))+(((-1.0)*x11979*x11984))+((r11*x11986))+((cj2*x11985))+((x11977*x11983))+((x11977*x11989))+(((-1.0)*sj2*x11987)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x11985))+(((-1.0)*x11981*x11986))+((x11979*x11983))+((x11979*x11989))+((x11978*x11979))+((cj2*x11987))+(((-1.0)*r11*x11988))+((x11977*x11980))+((x11977*x11982))+((x11977*x11984))))+IKsqr(((((-1.0)*x11981*x11988))+((x11977*x11978))+(((-1.0)*x11979*x11980))+(((-1.0)*x11979*x11982))+(((-1.0)*x11979*x11984))+((r11*x11986))+((cj2*x11985))+((x11977*x11983))+((x11977*x11989))+(((-1.0)*sj2*x11987))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj2*x11985))+(((-1.0)*x11981*x11986))+((x11979*x11983))+((x11979*x11989))+((x11978*x11979))+((cj2*x11987))+(((-1.0)*r11*x11988))+((x11977*x11980))+((x11977*x11982))+((x11977*x11984))), ((((-1.0)*x11981*x11988))+((x11977*x11978))+(((-1.0)*x11979*x11980))+(((-1.0)*x11979*x11982))+(((-1.0)*x11979*x11984))+((r11*x11986))+((cj2*x11985))+((x11977*x11983))+((x11977*x11989))+(((-1.0)*sj2*x11987))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11990=IKcos(j0);
IkReal x11991=IKsin(j0);
IkReal x11992=((1.0)*sj4);
IkReal x11993=(cj6*sj4);
IkReal x11994=((0.37429)*sj5);
IkReal x11995=(r10*sj6);
IkReal x11996=(r01*sj6);
IkReal x11997=((0.37429)*cj5);
IkReal x11998=((0.069)*sj2);
IkReal x11999=(cj6*r01);
IkReal x12000=((0.01)*cj5);
IkReal x12001=(r12*sj5);
IkReal x12002=(r00*sj6);
IkReal x12003=(r02*sj5);
IkReal x12004=(cj4*cj6);
IkReal x12005=(cj4*cj5);
IkReal x12006=((1.0)*cj4);
IkReal x12007=(r11*sj6);
IkReal x12008=(sj2*x11990);
IkReal x12009=(cj5*cj6*r11);
IkReal x12010=(cj2*x11990);
IkReal x12011=((0.069)*x11991);
IkReal x12012=(sj2*x11991);
IkReal x12013=((1.0)*cj2*x11991);
evalcond[0]=(((cj5*r11*x12004))+((cj4*x12001))+((x11995*x12005))+x12008+(((-1.0)*x12013))+(((-1.0)*x11992*x12007))+((r10*x11993)));
evalcond[1]=((((-1.0)*x11992*x11996))+((x12002*x12005))+((cj4*x12003))+((r00*x11993))+(((-1.0)*x12012))+(((-1.0)*x12010))+((x11999*x12005)));
evalcond[2]=((((-1.0)*x12006*x12007))+(((-1.0)*cj5*x11992*x11995))+x12012+x12010+(((-1.0)*x11992*x12009))+(((-1.0)*x11992*x12001))+((r10*x12004)));
evalcond[3]=((((-1.0)*cj5*x11992*x11999))+((r00*x12004))+x12008+(((-1.0)*x12013))+(((-1.0)*x11992*x12003))+(((-1.0)*x11996*x12006))+(((-1.0)*cj5*x11992*x12002)));
evalcond[4]=((((-1.0)*x11994*x12002))+((x12000*x12002))+(((-0.069)*x12010))+(((-1.0)*x11994*x11999))+(((-1.0)*px))+(((-1.0)*x11991*x11998))+(((0.069)*x11990))+((x11999*x12000))+((r02*x11997))+(((0.01)*x12003)));
evalcond[5]=((((-1.0)*cj6*r11*x11994))+((x11990*x11998))+((x11995*x12000))+(((-1.0)*x11994*x11995))+((cj6*r11*x12000))+(((-1.0)*py))+x12011+(((0.01)*x12001))+((r12*x11997))+(((-1.0)*cj2*x12011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12014=((690.0)*sj5);
IkReal x12015=(cj5*sj2);
IkReal x12016=((25826.01)*r02);
IkReal x12017=(cj6*r11);
IkReal x12018=((25826.01)*sj5);
IkReal x12019=(r00*sj6);
IkReal x12020=(r10*sj6);
IkReal x12021=((25826.01)*r12);
IkReal x12022=(cj6*r01);
IkReal x12023=((69000.0)*py);
IkReal x12024=((69000.0)*px);
IkReal x12025=((690.0)*cj5);
IkReal x12026=(cj2*cj5);
IkReal x12027=(cj2*x12025);
CheckValue<IkReal> x12028=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-9522.0)*cj2)))),-1);
if(!x12028.valid){
continue;
}
CheckValue<IkReal> x12029 = IKatan2WithCheck(IkReal((((x12020*x12027))+((x12017*x12027))+(((-1.0)*cj2*x12017*x12018))+((x12018*x12020))+(((690.0)*x12015*x12022))+((x12021*x12026))+(((-1.0)*cj2*x12023))+((r02*sj2*x12014))+(((-1.0)*sj2*x12018*x12019))+(((-1.0)*r12*x12014))+(((-1.0)*cj2*x12018*x12020))+(((-1.0)*x12020*x12025))+(((-1.0)*sj2*x12024))+x12023+((x12017*x12018))+((x12015*x12016))+(((690.0)*x12015*x12019))+(((-1.0)*cj5*x12021))+(((-1.0)*x12017*x12025))+(((-1.0)*sj2*x12018*x12022))+((cj2*r12*x12014)))),IkReal(((((-1.0)*x12015*x12021))+((sj2*x12018*x12020))+(((-1.0)*cj2*x12018*x12019))+(((-1.0)*r02*x12014))+((cj2*r02*x12014))+((x12018*x12022))+((x12016*x12026))+((x12019*x12027))+(((-1.0)*cj5*x12016))+(((-1.0)*cj2*x12024))+(((-1.0)*cj2*x12018*x12022))+((x12022*x12027))+(((-690.0)*x12015*x12020))+x12024+((x12018*x12019))+((sj2*x12017*x12018))+(((-1.0)*r12*sj2*x12014))+((sj2*x12023))+(((-690.0)*x12015*x12017))+(((-1.0)*x12022*x12025))+(((-1.0)*x12019*x12025)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12029.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12028.value)))+(x12029.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x12030=IKcos(j0);
IkReal x12031=IKsin(j0);
IkReal x12032=((0.01)*cj5);
IkReal x12033=(cj6*r01);
IkReal x12034=((0.37429)*sj5);
IkReal x12035=(cj6*r11);
IkReal x12036=(r00*sj6);
IkReal x12037=((0.01)*sj5);
IkReal x12038=((0.37429)*cj5);
IkReal x12039=(r10*sj6);
IkReal x12040=((0.069)*x12030);
IkReal x12041=((0.069)*x12031);
evalcond[0]=((((-1.0)*x12033*x12034))+(((-1.0)*cj2*x12040))+(((-1.0)*x12034*x12036))+(((-1.0)*px))+x12040+(((-1.0)*sj2*x12041))+((r02*x12038))+((r02*x12037))+((x12032*x12036))+((x12032*x12033)));
evalcond[1]=((((-1.0)*cj2*x12041))+((sj2*x12040))+(((-1.0)*x12034*x12039))+(((-1.0)*x12034*x12035))+(((-1.0)*py))+x12041+((r12*x12038))+((r12*x12037))+((x12032*x12035))+((x12032*x12039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12042=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x12042;
j4eval[1]=IKsign(x12042);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12043=((1.0)*sj5);
IkReal x12044=(((cj5*r12))+(((-1.0)*cj6*r11*x12043))+(((-1.0)*r10*sj6*x12043)));
j4eval[0]=x12044;
j4eval[1]=IKsign(x12044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12045=cj6*cj6;
IkReal x12046=cj5*cj5;
IkReal x12047=(cj5*sj5);
IkReal x12048=(cj6*r21);
IkReal x12049=((1.0)*r11);
IkReal x12050=(r10*r20);
IkReal x12051=(r10*sj6);
IkReal x12052=(r12*r22);
IkReal x12053=(r21*x12045);
IkReal x12054=(cj6*r20*sj6);
IkReal x12055=(r11*x12046);
IkReal x12056=((1.0)*x12046);
IkReal x12057=(((cj6*r11*r22*x12047))+(((-1.0)*x12048*x12051))+(((-1.0)*x12049*x12054))+(((-1.0)*x12049*x12053))+((r11*r21))+((r12*r20*sj6*x12047))+((x12053*x12055))+((r22*x12047*x12051))+x12052+((x12045*x12050))+((x12046*x12050))+((x12046*x12048*x12051))+(((-1.0)*x12052*x12056))+(((-1.0)*x12045*x12050*x12056))+((r12*x12047*x12048))+((x12054*x12055)));
j4eval[0]=x12057;
j4eval[1]=IKsign(x12057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12058=cj6*cj6;
IkReal x12059=cj5*cj5;
IkReal x12060=((1.0)*r11);
IkReal x12061=(cj6*r20);
IkReal x12062=(cj0*cj2);
IkReal x12063=(cj5*r20);
IkReal x12064=(r12*r22);
IkReal x12065=(cj6*r21);
IkReal x12066=(sj0*sj2);
IkReal x12067=(r22*sj5);
IkReal x12068=(r12*sj5);
IkReal x12069=(r10*sj6);
IkReal x12070=(r21*x12058);
IkReal x12071=(sj6*x12066);
IkReal x12072=((1.0)*x12059);
IkReal x12073=(r10*x12059);
IkReal x12074=(r11*x12059);
IkReal x12075=(r10*r20*x12058);
CheckValue<IkReal> x12076 = IKatan2WithCheck(IkReal((((cj5*x12062*x12065))+((x12062*x12067))+((cj5*x12065*x12066))+((sj6*x12062*x12063))+((x12063*x12071))+((x12066*x12067)))),IkReal((((r21*sj6*x12062))+(((-1.0)*x12061*x12066))+(((-1.0)*x12061*x12062))+((r21*x12071)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12076.valid){
continue;
}
CheckValue<IkReal> x12077=IKPowWithIntegerCheck(IKsign((((sj6*x12063*x12068))+(((-1.0)*x12072*x12075))+(((-1.0)*sj6*x12060*x12061))+((r11*r21))+((x12070*x12074))+((sj6*x12061*x12074))+((x12059*x12065*x12069))+(((-1.0)*x12064*x12072))+x12075+x12064+((cj5*cj6*r11*x12067))+((cj5*x12067*x12069))+(((-1.0)*x12065*x12069))+((cj5*x12065*x12068))+(((-1.0)*x12060*x12070))+((r20*x12073)))),-1);
if(!x12077.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12076.value)+(((1.5707963267949)*(x12077.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12078=IKcos(j4);
IkReal x12079=IKsin(j4);
IkReal x12080=(cj0*sj2);
IkReal x12081=(cj0*cj2);
IkReal x12082=(cj5*sj6);
IkReal x12083=(cj5*r01);
IkReal x12084=(cj5*r21);
IkReal x12085=((1.0)*sj0);
IkReal x12086=(cj2*x12085);
IkReal x12087=(cj5*cj6*r11);
IkReal x12088=((1.0)*x12079);
IkReal x12089=(cj6*x12078);
IkReal x12090=(sj5*x12078);
IkReal x12091=(cj6*x12079);
IkReal x12092=(sj5*x12088);
IkReal x12093=((1.0)*sj6*x12078);
evalcond[0]=((((-1.0)*r21*sj6*x12088))+((r22*x12090))+((x12084*x12089))+((r20*x12091))+((r20*x12078*x12082)));
evalcond[1]=(((r20*x12089))+(((-1.0)*r21*x12093))+(((-1.0)*r22*x12092))+(((-1.0)*cj6*x12084*x12088))+(((-1.0)*r20*x12082*x12088)));
evalcond[2]=(((r12*x12090))+(((-1.0)*x12086))+((x12078*x12087))+x12080+((r10*x12091))+(((-1.0)*r11*sj6*x12088))+((r10*x12078*x12082)));
evalcond[3]=(((r00*x12091))+((x12083*x12089))+(((-1.0)*x12081))+((r00*x12078*x12082))+(((-1.0)*r01*sj6*x12088))+((r02*x12090))+(((-1.0)*sj2*x12085)));
evalcond[4]=((((-1.0)*x12087*x12088))+((sj0*sj2))+(((-1.0)*r11*x12093))+x12081+(((-1.0)*r12*x12092))+((r10*x12089))+(((-1.0)*r10*x12082*x12088)));
evalcond[5]=((((-1.0)*x12086))+((r00*x12089))+(((-1.0)*cj6*x12083*x12088))+(((-1.0)*r00*x12082*x12088))+(((-1.0)*r02*x12092))+x12080+(((-1.0)*r01*x12093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12094=((1.0)*r21);
IkReal x12095=(sj0*sj2);
IkReal x12096=(cj0*cj2);
IkReal x12097=((1.0)*sj5);
IkReal x12098=(cj6*x12096);
IkReal x12099=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x12100=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x12097))+(((-1.0)*cj6*r11*x12097)))),-1);
if(!x12100.valid){
continue;
}
CheckValue<IkReal> x12101 = IKatan2WithCheck(IkReal(((((-1.0)*x12095*x12099))+(((-1.0)*x12096*x12099))+(((-1.0)*r22*x12095*x12097))+(((-1.0)*r22*x12096*x12097))+(((-1.0)*cj5*cj6*x12094*x12095))+(((-1.0)*cj5*x12094*x12098)))),IkReal((((r20*x12098))+((cj6*r20*x12095))+(((-1.0)*sj6*x12094*x12095))+(((-1.0)*sj6*x12094*x12096)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12100.value)))+(x12101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12102=IKcos(j4);
IkReal x12103=IKsin(j4);
IkReal x12104=(cj0*sj2);
IkReal x12105=(cj0*cj2);
IkReal x12106=(cj5*sj6);
IkReal x12107=(cj5*r01);
IkReal x12108=(cj5*r21);
IkReal x12109=((1.0)*sj0);
IkReal x12110=(cj2*x12109);
IkReal x12111=(cj5*cj6*r11);
IkReal x12112=((1.0)*x12103);
IkReal x12113=(cj6*x12102);
IkReal x12114=(sj5*x12102);
IkReal x12115=(cj6*x12103);
IkReal x12116=(sj5*x12112);
IkReal x12117=((1.0)*sj6*x12102);
evalcond[0]=(((x12108*x12113))+((r20*x12115))+((r20*x12102*x12106))+(((-1.0)*r21*sj6*x12112))+((r22*x12114)));
evalcond[1]=((((-1.0)*r20*x12106*x12112))+(((-1.0)*r22*x12116))+((r20*x12113))+(((-1.0)*r21*x12117))+(((-1.0)*cj6*x12108*x12112)));
evalcond[2]=(((r10*x12115))+((r10*x12102*x12106))+x12104+(((-1.0)*x12110))+((x12102*x12111))+((r12*x12114))+(((-1.0)*r11*sj6*x12112)));
evalcond[3]=(((r02*x12114))+(((-1.0)*r01*sj6*x12112))+((x12107*x12113))+(((-1.0)*sj2*x12109))+((r00*x12115))+((r00*x12102*x12106))+(((-1.0)*x12105)));
evalcond[4]=((((-1.0)*r11*x12117))+((r10*x12113))+(((-1.0)*r12*x12116))+(((-1.0)*r10*x12106*x12112))+x12105+(((-1.0)*x12111*x12112))+((sj0*sj2)));
evalcond[5]=((((-1.0)*r01*x12117))+((r00*x12113))+x12104+(((-1.0)*x12110))+(((-1.0)*r00*x12106*x12112))+(((-1.0)*r02*x12116))+(((-1.0)*cj6*x12107*x12112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12118=(r22*sj5);
IkReal x12119=(cj6*r20);
IkReal x12120=(cj0*sj2);
IkReal x12121=(r21*sj6);
IkReal x12122=((1.0)*cj2*sj0);
IkReal x12123=(cj5*cj6*r21);
IkReal x12124=(cj5*r20*sj6);
CheckValue<IkReal> x12125=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x12125.valid){
continue;
}
CheckValue<IkReal> x12126 = IKatan2WithCheck(IkReal((((x12120*x12124))+((x12120*x12123))+((x12118*x12120))+(((-1.0)*x12118*x12122))+(((-1.0)*x12122*x12123))+(((-1.0)*x12122*x12124)))),IkReal((((cj2*sj0*x12119))+((x12120*x12121))+(((-1.0)*x12119*x12120))+(((-1.0)*x12121*x12122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12125.value)))+(x12126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12127=IKcos(j4);
IkReal x12128=IKsin(j4);
IkReal x12129=(cj0*sj2);
IkReal x12130=(cj0*cj2);
IkReal x12131=(cj5*sj6);
IkReal x12132=(cj5*r01);
IkReal x12133=(cj5*r21);
IkReal x12134=((1.0)*sj0);
IkReal x12135=(cj2*x12134);
IkReal x12136=(cj5*cj6*r11);
IkReal x12137=((1.0)*x12128);
IkReal x12138=(cj6*x12127);
IkReal x12139=(sj5*x12127);
IkReal x12140=(cj6*x12128);
IkReal x12141=(sj5*x12137);
IkReal x12142=((1.0)*sj6*x12127);
evalcond[0]=(((r22*x12139))+((r20*x12127*x12131))+((r20*x12140))+((x12133*x12138))+(((-1.0)*r21*sj6*x12137)));
evalcond[1]=((((-1.0)*r22*x12141))+(((-1.0)*r20*x12131*x12137))+(((-1.0)*r21*x12142))+(((-1.0)*cj6*x12133*x12137))+((r20*x12138)));
evalcond[2]=(((r12*x12139))+((r10*x12127*x12131))+((r10*x12140))+(((-1.0)*x12135))+x12129+(((-1.0)*r11*sj6*x12137))+((x12127*x12136)));
evalcond[3]=((((-1.0)*r01*sj6*x12137))+((r00*x12140))+((r02*x12139))+((x12132*x12138))+(((-1.0)*x12130))+(((-1.0)*sj2*x12134))+((r00*x12127*x12131)));
evalcond[4]=((((-1.0)*r12*x12141))+(((-1.0)*r11*x12142))+x12130+((sj0*sj2))+(((-1.0)*x12136*x12137))+(((-1.0)*r10*x12131*x12137))+((r10*x12138)));
evalcond[5]=((((-1.0)*r02*x12141))+((r00*x12138))+(((-1.0)*r01*x12142))+(((-1.0)*x12135))+(((-1.0)*cj6*x12132*x12137))+x12129+(((-1.0)*r00*x12131*x12137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((9522.0)+(((9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12143=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*cj5*cj6*x12143))+(((-1.0)*r22*sj5)))))+(IKabs(((((-1.0)*sj6*x12143))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12144=((1.0)*cj5);
CheckValue<IkReal> x12146 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IkReal(((((-1.0)*r20*sj6*x12144))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x12144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12146.valid){
continue;
}
IkReal x12145=x12146.value;
j4array[0]=((-1.0)*x12145);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12145)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12147=IKcos(j4);
IkReal x12148=IKsin(j4);
IkReal x12149=(cj5*x12147);
evalcond[0]=(((r22*sj5*x12147))+((cj6*r21*x12149))+((cj6*r20*x12148))+((r20*sj6*x12149))+(((-1.0)*r21*sj6*x12148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12150=(r02*sj5);
IkReal x12151=(cj5*sj6);
IkReal x12152=(r00*sj2);
IkReal x12153=(cj6*sj4);
IkReal x12154=((1.0)*cj2);
IkReal x12155=(r12*sj5);
IkReal x12156=(cj4*sj2);
IkReal x12157=(cj4*x12154);
IkReal x12158=(cj5*cj6*r11);
IkReal x12159=((1.0)*x12156);
IkReal x12160=(cj5*cj6*r01);
IkReal x12161=(sj2*sj4*sj6);
IkReal x12162=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*r01*x12161))+((x12156*x12160))+(((-1.0)*r10*x12151*x12157))+((cj4*x12151*x12152))+((x12150*x12156))+((r11*x12162))+(((-1.0)*x12157*x12158))+(((-1.0)*x12155*x12157))+(((-1.0)*r10*x12153*x12154))+((x12152*x12153)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x12153*x12154))+(((-1.0)*r10*x12151*x12159))+(((-1.0)*r00*x12151*x12157))+(((-1.0)*x12157*x12160))+(((-1.0)*x12150*x12157))+((r01*x12162))+(((-1.0)*r10*sj2*x12153))+((r11*x12161))+(((-1.0)*x12158*x12159))+(((-1.0)*x12155*x12159)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x12161))+((x12156*x12160))+(((-1.0)*r10*x12151*x12157))+((cj4*x12151*x12152))+((x12150*x12156))+((r11*x12162))+(((-1.0)*x12157*x12158))+(((-1.0)*x12155*x12157))+(((-1.0)*r10*x12153*x12154))+((x12152*x12153))))+IKsqr(((((-1.0)*r00*x12153*x12154))+(((-1.0)*r10*x12151*x12159))+(((-1.0)*r00*x12151*x12157))+(((-1.0)*x12157*x12160))+(((-1.0)*x12150*x12157))+((r01*x12162))+(((-1.0)*r10*sj2*x12153))+((r11*x12161))+(((-1.0)*x12158*x12159))+(((-1.0)*x12155*x12159))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x12161))+((x12156*x12160))+(((-1.0)*r10*x12151*x12157))+((cj4*x12151*x12152))+((x12150*x12156))+((r11*x12162))+(((-1.0)*x12157*x12158))+(((-1.0)*x12155*x12157))+(((-1.0)*r10*x12153*x12154))+((x12152*x12153))), ((((-1.0)*r00*x12153*x12154))+(((-1.0)*r10*x12151*x12159))+(((-1.0)*r00*x12151*x12157))+(((-1.0)*x12157*x12160))+(((-1.0)*x12150*x12157))+((r01*x12162))+(((-1.0)*r10*sj2*x12153))+((r11*x12161))+(((-1.0)*x12158*x12159))+(((-1.0)*x12155*x12159))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12163=IKcos(j0);
IkReal x12164=IKsin(j0);
IkReal x12165=((1.0)*sj4);
IkReal x12166=(cj6*sj4);
IkReal x12167=((0.37429)*sj5);
IkReal x12168=(r10*sj6);
IkReal x12169=((0.069)*sj2);
IkReal x12170=(r01*sj6);
IkReal x12171=((0.37429)*cj5);
IkReal x12172=(cj6*r01);
IkReal x12173=((0.01)*cj5);
IkReal x12174=(r12*sj5);
IkReal x12175=(r00*sj6);
IkReal x12176=(r02*sj5);
IkReal x12177=(cj4*cj6);
IkReal x12178=(cj4*cj5);
IkReal x12179=((1.0)*cj4);
IkReal x12180=(r11*sj6);
IkReal x12181=(cj2*x12163);
IkReal x12182=(cj5*cj6*r11);
IkReal x12183=((0.069)*x12164);
IkReal x12184=(sj2*x12163);
IkReal x12185=(cj2*x12164);
IkReal x12186=((1.0)*sj2*x12164);
evalcond[0]=(((r10*x12166))+((x12168*x12178))+((cj5*r11*x12177))+x12185+x12184+((cj4*x12174))+(((-1.0)*x12165*x12180)));
evalcond[1]=((((-1.0)*x12165*x12170))+(((-1.0)*x12186))+x12181+((x12175*x12178))+((r00*x12166))+((cj4*x12176))+((x12172*x12178)));
evalcond[2]=((((-1.0)*x12165*x12174))+(((-1.0)*x12186))+(((-1.0)*x12179*x12180))+((r10*x12177))+(((-1.0)*cj5*x12165*x12168))+x12181+(((-1.0)*x12165*x12182)));
evalcond[3]=((((-1.0)*x12165*x12176))+(((-1.0)*x12170*x12179))+(((-1.0)*cj5*x12165*x12175))+(((-1.0)*cj5*x12165*x12172))+(((-1.0)*x12184))+(((-1.0)*x12185))+((r00*x12177)));
evalcond[4]=(((x12173*x12175))+(((-1.0)*x12164*x12169))+(((-1.0)*px))+(((0.069)*x12181))+(((-1.0)*x12167*x12172))+(((-1.0)*x12167*x12175))+((x12172*x12173))+(((0.01)*x12176))+(((0.069)*x12163))+((r02*x12171)));
evalcond[5]=(((x12168*x12173))+((cj6*r11*x12173))+((x12163*x12169))+x12183+(((-1.0)*py))+(((-1.0)*x12167*x12168))+((cj2*x12183))+(((-1.0)*cj6*r11*x12167))+(((0.01)*x12174))+((r12*x12171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12188 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12188.valid){
continue;
}
IkReal x12187=x12188.value;
j4array[0]=((-1.0)*x12187);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12187)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12189=IKsin(j4);
IkReal x12190=IKcos(j4);
IkReal x12191=((1.0)*x12189);
evalcond[0]=(((cj6*r20*x12190))+(((-1.0)*cj5*cj6*r21*x12191))+(((-1.0)*cj5*r20*sj6*x12191))+(((-1.0)*r22*sj5*x12191))+(((-1.0)*r21*sj6*x12190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12192=(r02*sj5);
IkReal x12193=(cj5*sj6);
IkReal x12194=(r00*sj2);
IkReal x12195=(cj6*sj4);
IkReal x12196=((1.0)*cj2);
IkReal x12197=(r12*sj5);
IkReal x12198=(cj4*sj2);
IkReal x12199=(cj4*x12196);
IkReal x12200=(cj5*cj6*r11);
IkReal x12201=((1.0)*x12198);
IkReal x12202=(cj5*cj6*r01);
IkReal x12203=(sj2*sj4*sj6);
IkReal x12204=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*x12197*x12199))+((cj4*x12193*x12194))+(((-1.0)*r10*x12195*x12196))+((x12194*x12195))+(((-1.0)*r10*x12193*x12199))+(((-1.0)*r01*x12203))+((x12192*x12198))+(((-1.0)*x12199*x12200))+((x12198*x12202))+((r11*x12204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12197*x12201))+(((-1.0)*x12200*x12201))+(((-1.0)*x12192*x12199))+(((-1.0)*r00*x12195*x12196))+(((-1.0)*r00*x12193*x12199))+(((-1.0)*r10*x12193*x12201))+((r01*x12204))+(((-1.0)*x12199*x12202))+(((-1.0)*r10*sj2*x12195))+((r11*x12203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12197*x12199))+((cj4*x12193*x12194))+(((-1.0)*r10*x12195*x12196))+((x12194*x12195))+(((-1.0)*r10*x12193*x12199))+(((-1.0)*r01*x12203))+((x12192*x12198))+(((-1.0)*x12199*x12200))+((x12198*x12202))+((r11*x12204))))+IKsqr(((((-1.0)*x12197*x12201))+(((-1.0)*x12200*x12201))+(((-1.0)*x12192*x12199))+(((-1.0)*r00*x12195*x12196))+(((-1.0)*r00*x12193*x12199))+(((-1.0)*r10*x12193*x12201))+((r01*x12204))+(((-1.0)*x12199*x12202))+(((-1.0)*r10*sj2*x12195))+((r11*x12203))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12197*x12199))+((cj4*x12193*x12194))+(((-1.0)*r10*x12195*x12196))+((x12194*x12195))+(((-1.0)*r10*x12193*x12199))+(((-1.0)*r01*x12203))+((x12192*x12198))+(((-1.0)*x12199*x12200))+((x12198*x12202))+((r11*x12204))), ((((-1.0)*x12197*x12201))+(((-1.0)*x12200*x12201))+(((-1.0)*x12192*x12199))+(((-1.0)*r00*x12195*x12196))+(((-1.0)*r00*x12193*x12199))+(((-1.0)*r10*x12193*x12201))+((r01*x12204))+(((-1.0)*x12199*x12202))+(((-1.0)*r10*sj2*x12195))+((r11*x12203))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12205=IKcos(j0);
IkReal x12206=IKsin(j0);
IkReal x12207=((1.0)*sj4);
IkReal x12208=(cj6*sj4);
IkReal x12209=((0.37429)*sj5);
IkReal x12210=(r10*sj6);
IkReal x12211=((0.069)*sj2);
IkReal x12212=(r01*sj6);
IkReal x12213=((0.37429)*cj5);
IkReal x12214=(cj6*r01);
IkReal x12215=((0.01)*cj5);
IkReal x12216=(r12*sj5);
IkReal x12217=(r00*sj6);
IkReal x12218=(r02*sj5);
IkReal x12219=(cj4*cj6);
IkReal x12220=(cj4*cj5);
IkReal x12221=((1.0)*cj4);
IkReal x12222=(r11*sj6);
IkReal x12223=(cj2*x12205);
IkReal x12224=(cj5*cj6*r11);
IkReal x12225=((0.069)*x12206);
IkReal x12226=(sj2*x12205);
IkReal x12227=(cj2*x12206);
IkReal x12228=((1.0)*sj2*x12206);
evalcond[0]=(((cj4*x12216))+((x12210*x12220))+((cj5*r11*x12219))+x12226+x12227+(((-1.0)*x12207*x12222))+((r10*x12208)));
evalcond[1]=(((cj4*x12218))+(((-1.0)*x12228))+((x12214*x12220))+((x12217*x12220))+x12223+(((-1.0)*x12207*x12212))+((r00*x12208)));
evalcond[2]=((((-1.0)*x12228))+(((-1.0)*cj5*x12207*x12210))+x12223+(((-1.0)*x12207*x12224))+(((-1.0)*x12207*x12216))+((r10*x12219))+(((-1.0)*x12221*x12222)));
evalcond[3]=((((-1.0)*cj5*x12207*x12217))+(((-1.0)*cj5*x12207*x12214))+(((-1.0)*x12212*x12221))+(((-1.0)*x12207*x12218))+((r00*x12219))+(((-1.0)*x12227))+(((-1.0)*x12226)));
evalcond[4]=(((r02*x12213))+(((0.069)*x12205))+((x12215*x12217))+(((0.069)*x12223))+((x12214*x12215))+(((0.01)*x12218))+(((-1.0)*px))+(((-1.0)*x12206*x12211))+(((-1.0)*x12209*x12217))+(((-1.0)*x12209*x12214)));
evalcond[5]=(((r12*x12213))+((cj6*r11*x12215))+x12225+(((0.01)*x12216))+((x12205*x12211))+(((-1.0)*py))+(((-1.0)*cj6*r11*x12209))+((cj2*x12225))+(((-1.0)*x12209*x12210))+((x12210*x12215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12229=((690.0)*sj5);
IkReal x12230=(cj5*sj2);
IkReal x12231=((25826.01)*r02);
IkReal x12232=(cj6*r11);
IkReal x12233=((25826.01)*sj5);
IkReal x12234=(r10*sj6);
IkReal x12235=((25826.01)*r12);
IkReal x12236=(cj6*r01);
IkReal x12237=((69000.0)*py);
IkReal x12238=((69000.0)*px);
IkReal x12239=((690.0)*cj5);
IkReal x12240=(cj2*cj5);
IkReal x12241=(r00*sj6);
IkReal x12242=(cj2*x12239);
IkReal x12243=((690.0)*x12241);
CheckValue<IkReal> x12244=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj2)))),-1);
if(!x12244.valid){
continue;
}
CheckValue<IkReal> x12245 = IKatan2WithCheck(IkReal((((r02*sj2*x12229))+(((-1.0)*sj2*x12233*x12236))+((x12230*x12231))+((cj2*x12237))+((x12230*x12243))+(((-1.0)*x12234*x12242))+x12237+((x12233*x12234))+(((-1.0)*x12234*x12239))+(((-1.0)*cj2*r12*x12229))+((cj2*x12232*x12233))+(((-1.0)*cj5*x12235))+(((-1.0)*r12*x12229))+(((-1.0)*x12232*x12239))+(((690.0)*x12230*x12236))+(((-1.0)*sj2*x12238))+((x12232*x12233))+((cj2*x12233*x12234))+(((-1.0)*x12232*x12242))+(((-1.0)*sj2*x12233*x12241))+(((-1.0)*x12235*x12240)))),IkReal((((sj2*x12233*x12234))+(((-690.0)*x12230*x12232))+(((-690.0)*x12230*x12234))+((cj2*x12238))+(((-1.0)*r12*sj2*x12229))+(((-1.0)*x12230*x12235))+(((-1.0)*x12239*x12241))+((cj2*x12233*x12241))+x12238+((x12233*x12236))+(((-1.0)*cj2*r02*x12229))+(((-1.0)*cj5*x12231))+((sj2*x12232*x12233))+((cj2*x12233*x12236))+((sj2*x12237))+((x12233*x12241))+(((-1.0)*x12231*x12240))+(((-1.0)*x12241*x12242))+(((-1.0)*x12236*x12239))+(((-1.0)*r02*x12229))+(((-1.0)*x12236*x12242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12245.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12244.value)))+(x12245.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x12246=IKcos(j0);
IkReal x12247=IKsin(j0);
IkReal x12248=((0.01)*cj5);
IkReal x12249=(cj6*r01);
IkReal x12250=((0.37429)*sj5);
IkReal x12251=(cj6*r11);
IkReal x12252=(r00*sj6);
IkReal x12253=((0.01)*sj5);
IkReal x12254=((0.37429)*cj5);
IkReal x12255=(r10*sj6);
IkReal x12256=((0.069)*x12246);
IkReal x12257=((0.069)*x12247);
evalcond[0]=(((cj2*x12256))+(((-1.0)*x12250*x12252))+(((-1.0)*x12249*x12250))+x12256+(((-1.0)*px))+((x12248*x12252))+((x12248*x12249))+((r02*x12254))+((r02*x12253))+(((-1.0)*sj2*x12257)));
evalcond[1]=(((cj2*x12257))+((r12*x12253))+((r12*x12254))+(((-1.0)*x12250*x12255))+(((-1.0)*x12250*x12251))+x12257+(((-1.0)*py))+((x12248*x12255))+((x12248*x12251))+((sj2*x12256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12258=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x12258;
j4eval[1]=IKsign(x12258);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12259=((1.0)*sj5);
IkReal x12260=(((cj5*r12))+(((-1.0)*cj6*r11*x12259))+(((-1.0)*r10*sj6*x12259)));
j4eval[0]=x12260;
j4eval[1]=IKsign(x12260);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12261=cj6*cj6;
IkReal x12262=cj5*cj5;
IkReal x12263=(cj5*sj5);
IkReal x12264=(cj6*r21);
IkReal x12265=((1.0)*r11);
IkReal x12266=(r10*r20);
IkReal x12267=(r10*sj6);
IkReal x12268=(r12*r22);
IkReal x12269=(r21*x12261);
IkReal x12270=(cj6*r20*sj6);
IkReal x12271=(r11*x12262);
IkReal x12272=((1.0)*x12262);
IkReal x12273=(((x12270*x12271))+(((-1.0)*x12265*x12270))+((x12269*x12271))+((r11*r21))+x12268+(((-1.0)*x12268*x12272))+(((-1.0)*x12264*x12267))+((cj6*r11*r22*x12263))+((x12262*x12264*x12267))+(((-1.0)*x12265*x12269))+((x12261*x12266))+((r12*x12263*x12264))+((x12262*x12266))+((r22*x12263*x12267))+(((-1.0)*x12261*x12266*x12272))+((r12*r20*sj6*x12263)));
j4eval[0]=x12273;
j4eval[1]=IKsign(x12273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12274=cj6*cj6;
IkReal x12275=cj5*cj5;
IkReal x12276=((1.0)*r11);
IkReal x12277=((1.0)*r20);
IkReal x12278=(cj0*cj2);
IkReal x12279=(r12*r22);
IkReal x12280=(cj6*sj6);
IkReal x12281=((1.0)*r21);
IkReal x12282=(r22*sj5);
IkReal x12283=(sj0*sj2);
IkReal x12284=(r12*sj5);
IkReal x12285=(cj5*sj6);
IkReal x12286=(r21*x12274);
IkReal x12287=(cj5*x12283);
IkReal x12288=(r10*x12275);
IkReal x12289=(r11*x12275);
IkReal x12290=(cj5*cj6*r21);
CheckValue<IkReal> x12291=IKPowWithIntegerCheck(IKsign((((r21*x12280*x12288))+(((-1.0)*r20*x12276*x12280))+((r11*r21))+(((-1.0)*x12276*x12286))+(((-1.0)*r10*x12280*x12281))+((r20*x12284*x12285))+x12279+((r10*x12282*x12285))+(((-1.0)*x12274*x12277*x12288))+((x12284*x12290))+((x12286*x12289))+((r20*x12280*x12289))+((cj5*cj6*r11*x12282))+((r20*x12288))+((r10*r20*x12274))+(((-1.0)*x12275*x12279)))),-1);
if(!x12291.valid){
continue;
}
CheckValue<IkReal> x12292 = IKatan2WithCheck(IkReal((((x12278*x12290))+((r20*x12278*x12285))+((x12278*x12282))+(((-1.0)*x12282*x12283))+(((-1.0)*cj6*x12281*x12287))+(((-1.0)*x12277*x12283*x12285)))),IkReal(((((-1.0)*sj6*x12281*x12283))+((cj6*r20*x12283))+(((-1.0)*cj6*x12277*x12278))+((r21*sj6*x12278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12291.value)))+(x12292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12293=IKcos(j4);
IkReal x12294=IKsin(j4);
IkReal x12295=(cj0*cj2);
IkReal x12296=(cj5*sj6);
IkReal x12297=(cj5*r01);
IkReal x12298=(cj0*sj2);
IkReal x12299=(cj5*r21);
IkReal x12300=((1.0)*sj0);
IkReal x12301=(sj2*x12300);
IkReal x12302=(cj5*cj6*r11);
IkReal x12303=((1.0)*x12294);
IkReal x12304=(cj6*x12293);
IkReal x12305=(sj5*x12293);
IkReal x12306=(cj6*x12294);
IkReal x12307=(sj5*x12303);
IkReal x12308=((1.0)*sj6*x12293);
evalcond[0]=(((r20*x12293*x12296))+((r20*x12306))+((x12299*x12304))+((r22*x12305))+(((-1.0)*r21*sj6*x12303)));
evalcond[1]=((((-1.0)*r21*x12308))+((r20*x12304))+(((-1.0)*r22*x12307))+(((-1.0)*cj6*x12299*x12303))+(((-1.0)*r20*x12296*x12303)));
evalcond[2]=(((cj2*sj0))+((r10*x12306))+((x12293*x12302))+(((-1.0)*r11*sj6*x12303))+x12298+((r12*x12305))+((r10*x12293*x12296)));
evalcond[3]=(x12295+((r00*x12293*x12296))+(((-1.0)*r01*sj6*x12303))+(((-1.0)*x12301))+((r00*x12306))+((x12297*x12304))+((r02*x12305)));
evalcond[4]=((((-1.0)*r11*x12308))+(((-1.0)*r10*x12296*x12303))+((r10*x12304))+x12295+(((-1.0)*x12302*x12303))+(((-1.0)*x12301))+(((-1.0)*r12*x12307)));
evalcond[5]=((((-1.0)*r00*x12296*x12303))+(((-1.0)*cj2*x12300))+(((-1.0)*r02*x12307))+(((-1.0)*r01*x12308))+(((-1.0)*x12298))+((r00*x12304))+(((-1.0)*cj6*x12297*x12303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12309=(r21*sj6);
IkReal x12310=(sj0*sj2);
IkReal x12311=((1.0)*cj6);
IkReal x12312=(cj5*sj6);
IkReal x12313=(cj0*cj2);
IkReal x12314=(cj5*r21);
IkReal x12315=((1.0)*sj5);
IkReal x12316=(r20*x12313);
CheckValue<IkReal> x12317 = IKatan2WithCheck(IkReal((((r22*sj5*x12313))+(((-1.0)*r22*x12310*x12315))+((x12312*x12316))+((cj6*x12313*x12314))+(((-1.0)*x12310*x12311*x12314))+(((-1.0)*r20*x12310*x12312)))),IkReal(((((-1.0)*x12311*x12316))+((x12309*x12313))+(((-1.0)*x12309*x12310))+((cj6*r20*x12310)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12317.valid){
continue;
}
CheckValue<IkReal> x12318=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x12315))+(((-1.0)*r11*sj5*x12311)))),-1);
if(!x12318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12317.value)+(((1.5707963267949)*(x12318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12319=IKcos(j4);
IkReal x12320=IKsin(j4);
IkReal x12321=(cj0*cj2);
IkReal x12322=(cj5*sj6);
IkReal x12323=(cj5*r01);
IkReal x12324=(cj0*sj2);
IkReal x12325=(cj5*r21);
IkReal x12326=((1.0)*sj0);
IkReal x12327=(sj2*x12326);
IkReal x12328=(cj5*cj6*r11);
IkReal x12329=((1.0)*x12320);
IkReal x12330=(cj6*x12319);
IkReal x12331=(sj5*x12319);
IkReal x12332=(cj6*x12320);
IkReal x12333=(sj5*x12329);
IkReal x12334=((1.0)*sj6*x12319);
evalcond[0]=((((-1.0)*r21*sj6*x12329))+((r20*x12319*x12322))+((r20*x12332))+((x12325*x12330))+((r22*x12331)));
evalcond[1]=((((-1.0)*r22*x12333))+((r20*x12330))+(((-1.0)*cj6*x12325*x12329))+(((-1.0)*r20*x12322*x12329))+(((-1.0)*r21*x12334)));
evalcond[2]=(((cj2*sj0))+x12324+((r10*x12319*x12322))+((x12319*x12328))+((r12*x12331))+((r10*x12332))+(((-1.0)*r11*sj6*x12329)));
evalcond[3]=(((r00*x12332))+x12321+((x12323*x12330))+(((-1.0)*x12327))+(((-1.0)*r01*sj6*x12329))+((r00*x12319*x12322))+((r02*x12331)));
evalcond[4]=(x12321+(((-1.0)*x12328*x12329))+(((-1.0)*x12327))+((r10*x12330))+(((-1.0)*r11*x12334))+(((-1.0)*r12*x12333))+(((-1.0)*r10*x12322*x12329)));
evalcond[5]=((((-1.0)*r00*x12322*x12329))+(((-1.0)*cj6*x12323*x12329))+((r00*x12330))+(((-1.0)*cj2*x12326))+(((-1.0)*r01*x12334))+(((-1.0)*x12324))+(((-1.0)*r02*x12333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12335=(cj5*r21);
IkReal x12336=(cj0*sj2);
IkReal x12337=(r22*sj5);
IkReal x12338=((1.0)*r20);
IkReal x12339=(cj5*r20);
IkReal x12340=(cj2*cj6*sj0);
IkReal x12341=(cj2*sj0*sj6);
CheckValue<IkReal> x12342=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x12342.valid){
continue;
}
CheckValue<IkReal> x12343 = IKatan2WithCheck(IkReal((((x12339*x12341))+((x12335*x12340))+((x12336*x12337))+((sj6*x12336*x12339))+((cj2*sj0*x12337))+((cj6*x12335*x12336)))),IkReal(((((-1.0)*x12338*x12340))+((r21*sj6*x12336))+(((-1.0)*cj6*x12336*x12338))+((r21*x12341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12342.value)))+(x12343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12344=IKcos(j4);
IkReal x12345=IKsin(j4);
IkReal x12346=(cj0*cj2);
IkReal x12347=(cj5*sj6);
IkReal x12348=(cj5*r01);
IkReal x12349=(cj0*sj2);
IkReal x12350=(cj5*r21);
IkReal x12351=((1.0)*sj0);
IkReal x12352=(sj2*x12351);
IkReal x12353=(cj5*cj6*r11);
IkReal x12354=((1.0)*x12345);
IkReal x12355=(cj6*x12344);
IkReal x12356=(sj5*x12344);
IkReal x12357=(cj6*x12345);
IkReal x12358=(sj5*x12354);
IkReal x12359=((1.0)*sj6*x12344);
evalcond[0]=(((r20*x12357))+((x12350*x12355))+(((-1.0)*r21*sj6*x12354))+((r20*x12344*x12347))+((r22*x12356)));
evalcond[1]=(((r20*x12355))+(((-1.0)*r21*x12359))+(((-1.0)*r20*x12347*x12354))+(((-1.0)*r22*x12358))+(((-1.0)*cj6*x12350*x12354)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r11*sj6*x12354))+((x12344*x12353))+x12349+((r10*x12344*x12347))+((r12*x12356))+((r10*x12357)));
evalcond[3]=(((r00*x12344*x12347))+(((-1.0)*x12352))+x12346+((r00*x12357))+((r02*x12356))+((x12348*x12355))+(((-1.0)*r01*sj6*x12354)));
evalcond[4]=((((-1.0)*x12353*x12354))+(((-1.0)*x12352))+x12346+(((-1.0)*r11*x12359))+(((-1.0)*r12*x12358))+(((-1.0)*r10*x12347*x12354))+((r10*x12355)));
evalcond[5]=((((-1.0)*r02*x12358))+(((-1.0)*cj2*x12351))+((r00*x12355))+(((-1.0)*r01*x12359))+(((-1.0)*cj6*x12348*x12354))+(((-1.0)*x12349))+(((-1.0)*r00*x12347*x12354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12360=(cj1*r12);
IkReal x12361=(cj5*r02);
IkReal x12362=((69.0)*sj2);
IkReal x12363=((69.0)*cj1);
IkReal x12364=(cj6*r11);
IkReal x12365=(r10*sj6);
IkReal x12366=(cj6*r01*sj5);
IkReal x12367=(r00*sj5*sj6);
IkReal x12368=((374.29)*cj1*sj5);
IkReal x12369=((10.0)*cj1*cj5);
CheckValue<IkReal> x12370=IKPowWithIntegerCheck(((((-1.0)*cj2*sj1*x12363))+(((364.42)*(cj1*cj1)))+x12363),-1);
if(!x12370.valid){
continue;
}
CheckValue<IkReal> x12371=IKPowWithIntegerCheck(cj1,-1);
if(!x12371.valid){
continue;
}
if( IKabs(((x12370.value)*(((((-1.0)*x12365*x12369))+(((-10.0)*sj5*x12360))+(((1000.0)*cj1*py))+(((-374.29)*cj5*x12360))+((x12364*x12368))+((x12365*x12368))+((x12361*x12362))+(((-1.0)*x12364*x12369))+(((-1.0)*x12362*x12366))+(((-1.0)*x12362*x12367)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12371.value)*((x12367+x12366+(((-1.0)*x12361)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12370.value)*(((((-1.0)*x12365*x12369))+(((-10.0)*sj5*x12360))+(((1000.0)*cj1*py))+(((-374.29)*cj5*x12360))+((x12364*x12368))+((x12365*x12368))+((x12361*x12362))+(((-1.0)*x12364*x12369))+(((-1.0)*x12362*x12366))+(((-1.0)*x12362*x12367))))))+IKsqr(((x12371.value)*((x12367+x12366+(((-1.0)*x12361))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12370.value)*(((((-1.0)*x12365*x12369))+(((-10.0)*sj5*x12360))+(((1000.0)*cj1*py))+(((-374.29)*cj5*x12360))+((x12364*x12368))+((x12365*x12368))+((x12361*x12362))+(((-1.0)*x12364*x12369))+(((-1.0)*x12362*x12366))+(((-1.0)*x12362*x12367))))), ((x12371.value)*((x12367+x12366+(((-1.0)*x12361))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12372=IKcos(j0);
IkReal x12373=IKsin(j0);
IkReal x12374=((0.01)*cj5);
IkReal x12375=(cj6*r11);
IkReal x12376=(r10*sj6);
IkReal x12377=((0.37429)*sj5);
IkReal x12378=(cj5*r12);
IkReal x12379=((1.0)*cj1);
IkReal x12380=((0.36442)*cj1);
IkReal x12381=(r00*sj6);
IkReal x12382=(cj6*r01);
IkReal x12383=(cj5*r02);
IkReal x12384=(cj2*sj1);
IkReal x12385=((0.01)*sj5);
IkReal x12386=((0.069)*x12373);
IkReal x12387=((0.069)*x12372);
evalcond[0]=(((sj5*x12382))+((sj5*x12381))+(((-1.0)*x12383))+(((-1.0)*x12372*x12379)));
evalcond[1]=(((sj5*x12376))+((sj5*x12375))+(((-1.0)*x12373*x12379))+(((-1.0)*x12378)));
evalcond[2]=((((-1.0)*x12384*x12387))+(((0.37429)*x12383))+((r02*x12385))+(((-1.0)*sj2*x12386))+x12387+((x12372*x12380))+(((-1.0)*px))+(((-1.0)*x12377*x12381))+(((-1.0)*x12377*x12382))+((x12374*x12381))+((x12374*x12382)));
evalcond[3]=(((r12*x12385))+(((-1.0)*x12384*x12386))+(((-1.0)*x12375*x12377))+x12386+((x12373*x12380))+(((-1.0)*py))+(((0.37429)*x12378))+(((-1.0)*x12376*x12377))+((sj2*x12387))+((x12374*x12375))+((x12374*x12376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12388=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x12388;
j4eval[1]=IKsign(x12388);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12389=((1.0)*sj5);
IkReal x12390=(((cj5*r12))+(((-1.0)*cj6*r11*x12389))+(((-1.0)*r10*sj6*x12389)));
j4eval[0]=x12390;
j4eval[1]=IKsign(x12390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12391=cj5*cj5;
IkReal x12392=cj6*cj6;
IkReal x12393=r22*r22;
IkReal x12394=r21*r21;
IkReal x12395=r20*r20;
IkReal x12396=((1.0)*cj5);
IkReal x12397=(cj6*r21);
IkReal x12398=(r20*sj6);
IkReal x12399=(cj1*cj2);
IkReal x12400=(cj1*sj2);
IkReal x12401=(r22*sj5);
IkReal x12402=(cj6*r20);
IkReal x12403=((2.0)*cj5);
IkReal x12404=(sj6*x12399);
IkReal x12405=((1.0)*x12394);
IkReal x12406=(x12392*x12395);
IkReal x12407=((((-1.0)*x12405))+(((-1.0)*x12391*x12395))+(((-1.0)*x12398*x12401*x12403))+(((-1.0)*x12391*x12392*x12405))+((x12391*x12406))+(((-2.0)*x12391*x12397*x12398))+(((2.0)*x12397*x12398))+((x12391*x12393))+(((-1.0)*x12397*x12401*x12403))+((x12392*x12394))+(((-1.0)*x12393))+(((-1.0)*x12406)));
j4eval[0]=x12407;
j4eval[1]=IKsign(x12407);
j4eval[2]=((IKabs(((((-1.0)*x12399*x12402))+(((-1.0)*x12396*x12397*x12400))+(((-1.0)*x12396*x12398*x12400))+((r21*x12404))+(((-1.0)*x12400*x12401)))))+(IKabs((((x12400*x12402))+(((-1.0)*x12399*x12401))+(((-1.0)*x12396*x12398*x12399))+(((-1.0)*x12396*x12397*x12399))+(((-1.0)*r21*sj6*x12400))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12408=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x12408;
j4eval[1]=IKsign(x12408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12409=((1.0)*sj5);
IkReal x12410=(((cj5*r12))+(((-1.0)*cj6*r11*x12409))+(((-1.0)*r10*sj6*x12409)));
j4eval[0]=x12410;
j4eval[1]=IKsign(x12410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12411=cj6*cj6;
IkReal x12412=cj5*cj5;
IkReal x12413=(cj5*sj5);
IkReal x12414=(cj6*r21);
IkReal x12415=((1.0)*r11);
IkReal x12416=(r10*r20);
IkReal x12417=(r10*sj6);
IkReal x12418=(r12*r22);
IkReal x12419=(r21*x12411);
IkReal x12420=(cj6*r20*sj6);
IkReal x12421=(r11*x12412);
IkReal x12422=((1.0)*x12412);
IkReal x12423=(((x12412*x12414*x12417))+(((-1.0)*x12414*x12417))+((x12420*x12421))+(((-1.0)*x12418*x12422))+(((-1.0)*x12415*x12419))+((x12411*x12416))+((r11*r21))+((x12419*x12421))+((r12*r20*sj6*x12413))+((r22*x12413*x12417))+(((-1.0)*x12411*x12416*x12422))+x12418+((x12412*x12416))+((cj6*r11*r22*x12413))+(((-1.0)*x12415*x12420))+((r12*x12413*x12414)));
j4eval[0]=x12423;
j4eval[1]=IKsign(x12423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12424=cj6*cj6;
IkReal x12425=cj5*cj5;
IkReal x12426=((1.0)*r11);
IkReal x12427=(cj6*r20);
IkReal x12428=(cj0*cj2);
IkReal x12429=(cj5*r20);
IkReal x12430=(r12*r22);
IkReal x12431=(cj6*r21);
IkReal x12432=(sj0*sj2);
IkReal x12433=(r22*sj5);
IkReal x12434=(r12*sj5);
IkReal x12435=(r10*sj6);
IkReal x12436=(r21*x12424);
IkReal x12437=(sj6*x12432);
IkReal x12438=((1.0)*x12425);
IkReal x12439=(r10*x12425);
IkReal x12440=(r11*x12425);
IkReal x12441=(r10*r20*x12424);
CheckValue<IkReal> x12442 = IKatan2WithCheck(IkReal((((x12428*x12433))+((cj5*x12428*x12431))+((cj5*x12431*x12432))+((x12429*x12437))+((sj6*x12428*x12429))+((x12432*x12433)))),IkReal((((r21*x12437))+(((-1.0)*x12427*x12428))+(((-1.0)*x12427*x12432))+((r21*sj6*x12428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12442.valid){
continue;
}
CheckValue<IkReal> x12443=IKPowWithIntegerCheck(IKsign((((cj5*x12433*x12435))+((sj6*x12427*x12440))+((cj5*x12431*x12434))+((r20*x12439))+(((-1.0)*x12430*x12438))+((r11*r21))+((sj6*x12429*x12434))+((x12425*x12431*x12435))+(((-1.0)*sj6*x12426*x12427))+((cj5*cj6*r11*x12433))+(((-1.0)*x12438*x12441))+(((-1.0)*x12431*x12435))+x12430+x12441+((x12436*x12440))+(((-1.0)*x12426*x12436)))),-1);
if(!x12443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12442.value)+(((1.5707963267949)*(x12443.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12444=IKcos(j4);
IkReal x12445=IKsin(j4);
IkReal x12446=(cj0*sj2);
IkReal x12447=(cj0*cj2);
IkReal x12448=(cj5*sj6);
IkReal x12449=(cj5*r01);
IkReal x12450=(cj5*r21);
IkReal x12451=((1.0)*sj0);
IkReal x12452=(cj2*x12451);
IkReal x12453=(cj5*cj6*r11);
IkReal x12454=((1.0)*x12445);
IkReal x12455=(cj6*x12444);
IkReal x12456=(sj5*x12444);
IkReal x12457=(cj6*x12445);
IkReal x12458=(sj5*x12454);
IkReal x12459=((1.0)*sj6*x12444);
evalcond[0]=((((-1.0)*r21*sj6*x12454))+((r22*x12456))+((x12450*x12455))+((r20*x12457))+((r20*x12444*x12448)));
evalcond[1]=((((-1.0)*r22*x12458))+(((-1.0)*r20*x12448*x12454))+(((-1.0)*cj6*x12450*x12454))+((r20*x12455))+(((-1.0)*r21*x12459)));
evalcond[2]=(((x12444*x12453))+(((-1.0)*r11*sj6*x12454))+((r10*x12444*x12448))+((r12*x12456))+(((-1.0)*x12452))+x12446+((r10*x12457)));
evalcond[3]=(((r02*x12456))+(((-1.0)*r01*sj6*x12454))+(((-1.0)*x12447))+((r00*x12444*x12448))+((r00*x12457))+(((-1.0)*sj2*x12451))+((x12449*x12455)));
evalcond[4]=((((-1.0)*r11*x12459))+(((-1.0)*r12*x12458))+(((-1.0)*r10*x12448*x12454))+((sj0*sj2))+(((-1.0)*x12453*x12454))+x12447+((r10*x12455)));
evalcond[5]=((((-1.0)*cj6*x12449*x12454))+(((-1.0)*r00*x12448*x12454))+(((-1.0)*r01*x12459))+(((-1.0)*r02*x12458))+((r00*x12455))+(((-1.0)*x12452))+x12446);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12460=((1.0)*r21);
IkReal x12461=(sj0*sj2);
IkReal x12462=(cj0*cj2);
IkReal x12463=((1.0)*sj5);
IkReal x12464=(cj6*x12462);
IkReal x12465=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x12466=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x12463))+(((-1.0)*r10*sj6*x12463)))),-1);
if(!x12466.valid){
continue;
}
CheckValue<IkReal> x12467 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12462*x12463))+(((-1.0)*cj5*x12460*x12464))+(((-1.0)*cj5*cj6*x12460*x12461))+(((-1.0)*x12462*x12465))+(((-1.0)*x12461*x12465))+(((-1.0)*r22*x12461*x12463)))),IkReal((((r20*x12464))+((cj6*r20*x12461))+(((-1.0)*sj6*x12460*x12462))+(((-1.0)*sj6*x12460*x12461)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12466.value)))+(x12467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12468=IKcos(j4);
IkReal x12469=IKsin(j4);
IkReal x12470=(cj0*sj2);
IkReal x12471=(cj0*cj2);
IkReal x12472=(cj5*sj6);
IkReal x12473=(cj5*r01);
IkReal x12474=(cj5*r21);
IkReal x12475=((1.0)*sj0);
IkReal x12476=(cj2*x12475);
IkReal x12477=(cj5*cj6*r11);
IkReal x12478=((1.0)*x12469);
IkReal x12479=(cj6*x12468);
IkReal x12480=(sj5*x12468);
IkReal x12481=(cj6*x12469);
IkReal x12482=(sj5*x12478);
IkReal x12483=((1.0)*sj6*x12468);
evalcond[0]=(((x12474*x12479))+((r22*x12480))+((r20*x12468*x12472))+((r20*x12481))+(((-1.0)*r21*sj6*x12478)));
evalcond[1]=((((-1.0)*r22*x12482))+((r20*x12479))+(((-1.0)*r20*x12472*x12478))+(((-1.0)*r21*x12483))+(((-1.0)*cj6*x12474*x12478)));
evalcond[2]=((((-1.0)*r11*sj6*x12478))+((r12*x12480))+((r10*x12468*x12472))+(((-1.0)*x12476))+((x12468*x12477))+((r10*x12481))+x12470);
evalcond[3]=((((-1.0)*x12471))+((r02*x12480))+((x12473*x12479))+((r00*x12468*x12472))+((r00*x12481))+(((-1.0)*sj2*x12475))+(((-1.0)*r01*sj6*x12478)));
evalcond[4]=((((-1.0)*r12*x12482))+(((-1.0)*r11*x12483))+(((-1.0)*r10*x12472*x12478))+((sj0*sj2))+x12471+((r10*x12479))+(((-1.0)*x12477*x12478)));
evalcond[5]=(((r00*x12479))+(((-1.0)*r01*x12483))+(((-1.0)*r02*x12482))+(((-1.0)*cj6*x12473*x12478))+(((-1.0)*x12476))+(((-1.0)*r00*x12472*x12478))+x12470);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12484=(r22*sj5);
IkReal x12485=(cj6*r20);
IkReal x12486=(cj0*sj2);
IkReal x12487=(r21*sj6);
IkReal x12488=((1.0)*cj2*sj0);
IkReal x12489=(cj5*cj6*r21);
IkReal x12490=(cj5*r20*sj6);
CheckValue<IkReal> x12491=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x12491.valid){
continue;
}
CheckValue<IkReal> x12492 = IKatan2WithCheck(IkReal(((((-1.0)*x12488*x12489))+((x12484*x12486))+((x12486*x12490))+(((-1.0)*x12484*x12488))+((x12486*x12489))+(((-1.0)*x12488*x12490)))),IkReal(((((-1.0)*x12487*x12488))+((cj2*sj0*x12485))+(((-1.0)*x12485*x12486))+((x12486*x12487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12491.value)))+(x12492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12493=IKcos(j4);
IkReal x12494=IKsin(j4);
IkReal x12495=(cj0*sj2);
IkReal x12496=(cj0*cj2);
IkReal x12497=(cj5*sj6);
IkReal x12498=(cj5*r01);
IkReal x12499=(cj5*r21);
IkReal x12500=((1.0)*sj0);
IkReal x12501=(cj2*x12500);
IkReal x12502=(cj5*cj6*r11);
IkReal x12503=((1.0)*x12494);
IkReal x12504=(cj6*x12493);
IkReal x12505=(sj5*x12493);
IkReal x12506=(cj6*x12494);
IkReal x12507=(sj5*x12503);
IkReal x12508=((1.0)*sj6*x12493);
evalcond[0]=(((r20*x12506))+(((-1.0)*r21*sj6*x12503))+((x12499*x12504))+((r20*x12493*x12497))+((r22*x12505)));
evalcond[1]=((((-1.0)*r22*x12507))+((r20*x12504))+(((-1.0)*r21*x12508))+(((-1.0)*cj6*x12499*x12503))+(((-1.0)*r20*x12497*x12503)));
evalcond[2]=((((-1.0)*r11*sj6*x12503))+(((-1.0)*x12501))+((x12493*x12502))+((r10*x12506))+((r10*x12493*x12497))+x12495+((r12*x12505)));
evalcond[3]=(((r00*x12493*x12497))+((r00*x12506))+((x12498*x12504))+(((-1.0)*sj2*x12500))+((r02*x12505))+(((-1.0)*r01*sj6*x12503))+(((-1.0)*x12496)));
evalcond[4]=((((-1.0)*r11*x12508))+(((-1.0)*r12*x12507))+(((-1.0)*r10*x12497*x12503))+((sj0*sj2))+((r10*x12504))+(((-1.0)*x12502*x12503))+x12496);
evalcond[5]=((((-1.0)*x12501))+(((-1.0)*cj6*x12498*x12503))+(((-1.0)*r01*x12508))+(((-1.0)*r02*x12507))+((r00*x12504))+(((-1.0)*r00*x12497*x12503))+x12495);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12509=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x12509;
j4eval[1]=IKsign(x12509);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12510=((1.0)*sj5);
IkReal x12511=(((cj5*r12))+(((-1.0)*r10*sj6*x12510))+(((-1.0)*cj6*r11*x12510)));
j4eval[0]=x12511;
j4eval[1]=IKsign(x12511);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x12512=cj6*cj6;
IkReal x12513=cj5*cj5;
IkReal x12514=(cj5*sj5);
IkReal x12515=(cj6*r21);
IkReal x12516=((1.0)*r11);
IkReal x12517=(r10*r20);
IkReal x12518=(r10*sj6);
IkReal x12519=(r12*r22);
IkReal x12520=(r21*x12512);
IkReal x12521=(cj6*r20*sj6);
IkReal x12522=(r11*x12513);
IkReal x12523=((1.0)*x12513);
IkReal x12524=(((r12*x12514*x12515))+((x12520*x12522))+((x12521*x12522))+((cj6*r11*r22*x12514))+((x12513*x12515*x12518))+((r11*r21))+(((-1.0)*x12516*x12520))+(((-1.0)*x12516*x12521))+(((-1.0)*x12515*x12518))+(((-1.0)*x12519*x12523))+((r22*x12514*x12518))+((r12*r20*sj6*x12514))+(((-1.0)*x12512*x12517*x12523))+((x12512*x12517))+x12519+((x12513*x12517)));
j4eval[0]=x12524;
j4eval[1]=IKsign(x12524);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12525=cj6*cj6;
IkReal x12526=cj5*cj5;
IkReal x12527=((1.0)*r11);
IkReal x12528=((1.0)*r20);
IkReal x12529=(cj0*cj2);
IkReal x12530=(r12*r22);
IkReal x12531=(cj6*sj6);
IkReal x12532=((1.0)*r21);
IkReal x12533=(r22*sj5);
IkReal x12534=(sj0*sj2);
IkReal x12535=(r12*sj5);
IkReal x12536=(cj5*sj6);
IkReal x12537=(r21*x12525);
IkReal x12538=(cj5*x12534);
IkReal x12539=(r10*x12526);
IkReal x12540=(r11*x12526);
IkReal x12541=(cj5*cj6*r21);
CheckValue<IkReal> x12542 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*x12532*x12538))+((r20*x12529*x12536))+((x12529*x12541))+(((-1.0)*x12533*x12534))+(((-1.0)*x12528*x12534*x12536))+((x12529*x12533)))),IkReal(((((-1.0)*cj6*x12528*x12529))+((cj6*r20*x12534))+(((-1.0)*sj6*x12532*x12534))+((r21*sj6*x12529)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12542.valid){
continue;
}
CheckValue<IkReal> x12543=IKPowWithIntegerCheck(IKsign((((x12537*x12540))+((r21*x12531*x12539))+(((-1.0)*r10*x12531*x12532))+((r20*x12539))+((r10*x12533*x12536))+((r11*r21))+((r10*r20*x12525))+(((-1.0)*x12527*x12537))+((r20*x12531*x12540))+((r20*x12535*x12536))+(((-1.0)*x12526*x12530))+(((-1.0)*r20*x12527*x12531))+((x12535*x12541))+(((-1.0)*x12525*x12528*x12539))+x12530+((cj5*cj6*r11*x12533)))),-1);
if(!x12543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12542.value)+(((1.5707963267949)*(x12543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12544=IKcos(j4);
IkReal x12545=IKsin(j4);
IkReal x12546=(cj0*cj2);
IkReal x12547=(cj5*sj6);
IkReal x12548=(cj5*r01);
IkReal x12549=(cj0*sj2);
IkReal x12550=(cj5*r21);
IkReal x12551=((1.0)*sj0);
IkReal x12552=(sj2*x12551);
IkReal x12553=(cj5*cj6*r11);
IkReal x12554=((1.0)*x12545);
IkReal x12555=(cj6*x12544);
IkReal x12556=(sj5*x12544);
IkReal x12557=(cj6*x12545);
IkReal x12558=(sj5*x12554);
IkReal x12559=((1.0)*sj6*x12544);
evalcond[0]=((((-1.0)*r21*sj6*x12554))+((r20*x12557))+((x12550*x12555))+((r22*x12556))+((r20*x12544*x12547)));
evalcond[1]=(((r20*x12555))+(((-1.0)*r22*x12558))+(((-1.0)*r21*x12559))+(((-1.0)*cj6*x12550*x12554))+(((-1.0)*r20*x12547*x12554)));
evalcond[2]=(((cj2*sj0))+((r12*x12556))+((r10*x12557))+(((-1.0)*r11*sj6*x12554))+((x12544*x12553))+x12549+((r10*x12544*x12547)));
evalcond[3]=((((-1.0)*r01*sj6*x12554))+((x12548*x12555))+((r00*x12544*x12547))+((r00*x12557))+((r02*x12556))+x12546+(((-1.0)*x12552)));
evalcond[4]=((((-1.0)*r12*x12558))+(((-1.0)*r10*x12547*x12554))+((r10*x12555))+(((-1.0)*x12553*x12554))+x12546+(((-1.0)*x12552))+(((-1.0)*r11*x12559)));
evalcond[5]=((((-1.0)*x12549))+((r00*x12555))+(((-1.0)*r01*x12559))+(((-1.0)*cj6*x12548*x12554))+(((-1.0)*r00*x12547*x12554))+(((-1.0)*cj2*x12551))+(((-1.0)*r02*x12558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12560=(r21*sj6);
IkReal x12561=(sj0*sj2);
IkReal x12562=((1.0)*cj6);
IkReal x12563=(cj5*sj6);
IkReal x12564=(cj0*cj2);
IkReal x12565=(cj5*r21);
IkReal x12566=((1.0)*sj5);
IkReal x12567=(r20*x12564);
CheckValue<IkReal> x12568 = IKatan2WithCheck(IkReal((((x12563*x12567))+((cj6*x12564*x12565))+(((-1.0)*r20*x12561*x12563))+(((-1.0)*r22*x12561*x12566))+((r22*sj5*x12564))+(((-1.0)*x12561*x12562*x12565)))),IkReal((((cj6*r20*x12561))+(((-1.0)*x12562*x12567))+((x12560*x12564))+(((-1.0)*x12560*x12561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12568.valid){
continue;
}
CheckValue<IkReal> x12569=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x12566))+(((-1.0)*r11*sj5*x12562)))),-1);
if(!x12569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12568.value)+(((1.5707963267949)*(x12569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12570=IKcos(j4);
IkReal x12571=IKsin(j4);
IkReal x12572=(cj0*cj2);
IkReal x12573=(cj5*sj6);
IkReal x12574=(cj5*r01);
IkReal x12575=(cj0*sj2);
IkReal x12576=(cj5*r21);
IkReal x12577=((1.0)*sj0);
IkReal x12578=(sj2*x12577);
IkReal x12579=(cj5*cj6*r11);
IkReal x12580=((1.0)*x12571);
IkReal x12581=(cj6*x12570);
IkReal x12582=(sj5*x12570);
IkReal x12583=(cj6*x12571);
IkReal x12584=(sj5*x12580);
IkReal x12585=((1.0)*sj6*x12570);
evalcond[0]=(((x12576*x12581))+((r20*x12583))+((r20*x12570*x12573))+(((-1.0)*r21*sj6*x12580))+((r22*x12582)));
evalcond[1]=(((r20*x12581))+(((-1.0)*r20*x12573*x12580))+(((-1.0)*r21*x12585))+(((-1.0)*r22*x12584))+(((-1.0)*cj6*x12576*x12580)));
evalcond[2]=(((cj2*sj0))+((r12*x12582))+(((-1.0)*r11*sj6*x12580))+((x12570*x12579))+x12575+((r10*x12570*x12573))+((r10*x12583)));
evalcond[3]=(((r00*x12570*x12573))+((r00*x12583))+((x12574*x12581))+(((-1.0)*x12578))+((r02*x12582))+(((-1.0)*r01*sj6*x12580))+x12572);
evalcond[4]=((((-1.0)*x12579*x12580))+(((-1.0)*r12*x12584))+(((-1.0)*r11*x12585))+(((-1.0)*x12578))+x12572+(((-1.0)*r10*x12573*x12580))+((r10*x12581)));
evalcond[5]=((((-1.0)*r01*x12585))+((r00*x12581))+(((-1.0)*r00*x12573*x12580))+(((-1.0)*r02*x12584))+(((-1.0)*cj2*x12577))+(((-1.0)*x12575))+(((-1.0)*cj6*x12574*x12580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12586=(cj5*r21);
IkReal x12587=(cj0*sj2);
IkReal x12588=(r22*sj5);
IkReal x12589=((1.0)*r20);
IkReal x12590=(cj5*r20);
IkReal x12591=(cj2*cj6*sj0);
IkReal x12592=(cj2*sj0*sj6);
CheckValue<IkReal> x12593 = IKatan2WithCheck(IkReal((((x12590*x12592))+((cj6*x12586*x12587))+((x12587*x12588))+((sj6*x12587*x12590))+((cj2*sj0*x12588))+((x12586*x12591)))),IkReal((((r21*x12592))+(((-1.0)*x12589*x12591))+((r21*sj6*x12587))+(((-1.0)*cj6*x12587*x12589)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12593.valid){
continue;
}
CheckValue<IkReal> x12594=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x12594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12593.value)+(((1.5707963267949)*(x12594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12595=IKcos(j4);
IkReal x12596=IKsin(j4);
IkReal x12597=(cj0*cj2);
IkReal x12598=(cj5*sj6);
IkReal x12599=(cj5*r01);
IkReal x12600=(cj0*sj2);
IkReal x12601=(cj5*r21);
IkReal x12602=((1.0)*sj0);
IkReal x12603=(sj2*x12602);
IkReal x12604=(cj5*cj6*r11);
IkReal x12605=((1.0)*x12596);
IkReal x12606=(cj6*x12595);
IkReal x12607=(sj5*x12595);
IkReal x12608=(cj6*x12596);
IkReal x12609=(sj5*x12605);
IkReal x12610=((1.0)*sj6*x12595);
evalcond[0]=(((r20*x12608))+(((-1.0)*r21*sj6*x12605))+((x12601*x12606))+((r22*x12607))+((r20*x12595*x12598)));
evalcond[1]=(((r20*x12606))+(((-1.0)*r20*x12598*x12605))+(((-1.0)*cj6*x12601*x12605))+(((-1.0)*r22*x12609))+(((-1.0)*r21*x12610)));
evalcond[2]=(((cj2*sj0))+((x12595*x12604))+((r10*x12608))+(((-1.0)*r11*sj6*x12605))+((r12*x12607))+((r10*x12595*x12598))+x12600);
evalcond[3]=(((x12599*x12606))+((r00*x12608))+(((-1.0)*r01*sj6*x12605))+(((-1.0)*x12603))+((r02*x12607))+((r00*x12595*x12598))+x12597);
evalcond[4]=((((-1.0)*r10*x12598*x12605))+(((-1.0)*r11*x12610))+(((-1.0)*x12603))+((r10*x12606))+(((-1.0)*r12*x12609))+x12597+(((-1.0)*x12604*x12605)));
evalcond[5]=(((r00*x12606))+(((-1.0)*x12600))+(((-1.0)*cj6*x12599*x12605))+(((-1.0)*cj2*x12602))+(((-1.0)*r01*x12610))+(((-1.0)*r02*x12609))+(((-1.0)*r00*x12598*x12605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12611=cj5*cj5;
IkReal x12612=cj6*cj6;
IkReal x12613=r22*r22;
IkReal x12614=r21*r21;
IkReal x12615=r20*r20;
IkReal x12616=((1.0)*cj5);
IkReal x12617=(cj6*r21);
IkReal x12618=(r20*sj6);
IkReal x12619=(cj1*cj2);
IkReal x12620=(cj1*sj2);
IkReal x12621=(r22*sj5);
IkReal x12622=(cj6*r20);
IkReal x12623=((2.0)*cj5);
IkReal x12624=(sj6*x12619);
IkReal x12625=((1.0)*x12614);
IkReal x12626=(x12612*x12615);
CheckValue<IkReal> x12627 = IKatan2WithCheck(IkReal(((((-1.0)*x12619*x12622))+(((-1.0)*x12616*x12618*x12620))+((r21*x12624))+(((-1.0)*x12616*x12617*x12620))+(((-1.0)*x12620*x12621)))),IkReal(((((-1.0)*x12619*x12621))+(((-1.0)*x12616*x12618*x12619))+(((-1.0)*r21*sj6*x12620))+((x12620*x12622))+(((-1.0)*x12616*x12617*x12619)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12627.valid){
continue;
}
CheckValue<IkReal> x12628=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12625))+(((-1.0)*x12611*x12615))+((x12611*x12626))+(((-1.0)*x12617*x12621*x12623))+((x12611*x12613))+(((-1.0)*x12626))+(((-1.0)*x12613))+(((-1.0)*x12611*x12612*x12625))+(((-2.0)*x12611*x12617*x12618))+((x12612*x12614))+(((-1.0)*x12618*x12621*x12623))+(((2.0)*x12617*x12618)))),-1);
if(!x12628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12627.value)+(((1.5707963267949)*(x12628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12629=IKcos(j4);
IkReal x12630=IKsin(j4);
IkReal x12631=(cj0*sj1);
IkReal x12632=((1.0)*cj2);
IkReal x12633=(cj5*sj6);
IkReal x12634=(sj0*sj1);
IkReal x12635=((1.0)*sj6);
IkReal x12636=(cj5*cj6);
IkReal x12637=(r11*x12636);
IkReal x12638=((1.0)*x12630);
IkReal x12639=(sj5*x12629);
IkReal x12640=(r01*x12629);
IkReal x12641=(cj6*x12629);
IkReal x12642=(cj6*x12630);
IkReal x12643=(sj5*x12638);
evalcond[0]=(((r20*x12642))+(((-1.0)*r21*x12630*x12635))+((r22*x12639))+((r21*x12629*x12636))+(((-1.0)*cj1*x12632))+((r20*x12629*x12633)));
evalcond[1]=((((-1.0)*r20*x12633*x12638))+(((-1.0)*r21*x12629*x12635))+((cj1*sj2))+(((-1.0)*r22*x12643))+((r20*x12641))+(((-1.0)*r21*x12636*x12638)));
evalcond[2]=(((x12629*x12637))+((r12*x12639))+((r10*x12629*x12633))+(((-1.0)*x12632*x12634))+((r10*x12642))+(((-1.0)*r11*x12630*x12635))+((cj0*sj2)));
evalcond[3]=(((r00*x12629*x12633))+(((-1.0)*x12631*x12632))+((x12636*x12640))+((r00*x12642))+((r02*x12639))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x12630*x12635)));
evalcond[4]=((((-1.0)*r11*x12629*x12635))+(((-1.0)*x12637*x12638))+((sj2*x12634))+((cj0*cj2))+(((-1.0)*r10*x12633*x12638))+((r10*x12641))+(((-1.0)*r12*x12643)));
evalcond[5]=((((-1.0)*r02*x12643))+(((-1.0)*r00*x12633*x12638))+((sj2*x12631))+((r00*x12641))+(((-1.0)*r01*x12636*x12638))+(((-1.0)*sj0*x12632))+(((-1.0)*x12635*x12640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12644=(sj0*sj2);
IkReal x12645=((1.0)*r21);
IkReal x12646=((1.0)*sj5);
IkReal x12647=(cj6*r20);
IkReal x12648=(cj5*cj6);
IkReal x12649=(cj1*cj2);
IkReal x12650=(sj6*x12649);
IkReal x12651=(cj0*cj2*sj1);
IkReal x12652=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x12653=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x12646))+(((-1.0)*r10*sj6*x12646)))),-1);
if(!x12653.valid){
continue;
}
CheckValue<IkReal> x12654 = IKatan2WithCheck(IkReal((((r02*sj5*x12649))+(((-1.0)*r22*x12644*x12646))+((r01*x12648*x12649))+(((-1.0)*x12644*x12645*x12648))+(((-1.0)*x12644*x12652))+(((-1.0)*r22*x12646*x12651))+(((-1.0)*x12651*x12652))+(((-1.0)*x12645*x12648*x12651))+((cj5*r00*x12650)))),IkReal(((((-1.0)*sj6*x12644*x12645))+(((-1.0)*sj6*x12645*x12651))+(((-1.0)*cj6*r00*x12649))+((x12647*x12651))+((x12644*x12647))+((r01*x12650)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12653.value)))+(x12654.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12655=IKcos(j4);
IkReal x12656=IKsin(j4);
IkReal x12657=(cj0*sj1);
IkReal x12658=((1.0)*cj2);
IkReal x12659=(cj5*sj6);
IkReal x12660=(sj0*sj1);
IkReal x12661=((1.0)*sj6);
IkReal x12662=(cj5*cj6);
IkReal x12663=(r11*x12662);
IkReal x12664=((1.0)*x12656);
IkReal x12665=(sj5*x12655);
IkReal x12666=(r01*x12655);
IkReal x12667=(cj6*x12655);
IkReal x12668=(cj6*x12656);
IkReal x12669=(sj5*x12664);
evalcond[0]=((((-1.0)*cj1*x12658))+((r22*x12665))+(((-1.0)*r21*x12656*x12661))+((r21*x12655*x12662))+((r20*x12655*x12659))+((r20*x12668)));
evalcond[1]=((((-1.0)*r22*x12669))+((cj1*sj2))+(((-1.0)*r20*x12659*x12664))+(((-1.0)*r21*x12662*x12664))+((r20*x12667))+(((-1.0)*r21*x12655*x12661)));
evalcond[2]=(((r10*x12655*x12659))+((x12655*x12663))+((r10*x12668))+((r12*x12665))+(((-1.0)*x12658*x12660))+(((-1.0)*r11*x12656*x12661))+((cj0*sj2)));
evalcond[3]=(((r00*x12655*x12659))+((r02*x12665))+((x12662*x12666))+(((-1.0)*r01*x12656*x12661))+(((-1.0)*sj0*sj2))+((r00*x12668))+(((-1.0)*x12657*x12658)));
evalcond[4]=(((r10*x12667))+(((-1.0)*r10*x12659*x12664))+(((-1.0)*r11*x12655*x12661))+((cj0*cj2))+(((-1.0)*x12663*x12664))+(((-1.0)*r12*x12669))+((sj2*x12660)));
evalcond[5]=((((-1.0)*x12661*x12666))+(((-1.0)*sj0*x12658))+(((-1.0)*r02*x12669))+(((-1.0)*r00*x12659*x12664))+((sj2*x12657))+(((-1.0)*r01*x12662*x12664))+((r00*x12667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12670=(cj6*r20);
IkReal x12671=(cj0*sj2);
IkReal x12672=((1.0)*sj6);
IkReal x12673=(cj1*cj2);
IkReal x12674=(cj5*cj6);
IkReal x12675=(cj5*r20);
IkReal x12676=(r22*sj5);
IkReal x12677=(cj2*sj0*sj1);
CheckValue<IkReal> x12678 = IKatan2WithCheck(IkReal((((r11*x12673*x12674))+(((-1.0)*x12672*x12675*x12677))+((cj5*r10*sj6*x12673))+(((-1.0)*x12676*x12677))+(((-1.0)*r21*x12674*x12677))+((sj6*x12671*x12675))+((x12671*x12676))+((r12*sj5*x12673))+((r21*x12671*x12674)))),IkReal((((r11*sj6*x12673))+((r21*sj6*x12671))+((x12670*x12677))+(((-1.0)*cj6*r10*x12673))+(((-1.0)*r21*x12672*x12677))+(((-1.0)*x12670*x12671)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12678.valid){
continue;
}
CheckValue<IkReal> x12679=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x12679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12678.value)+(((1.5707963267949)*(x12679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12680=IKcos(j4);
IkReal x12681=IKsin(j4);
IkReal x12682=(cj0*sj1);
IkReal x12683=((1.0)*cj2);
IkReal x12684=(cj5*sj6);
IkReal x12685=(sj0*sj1);
IkReal x12686=((1.0)*sj6);
IkReal x12687=(cj5*cj6);
IkReal x12688=(r11*x12687);
IkReal x12689=((1.0)*x12681);
IkReal x12690=(sj5*x12680);
IkReal x12691=(r01*x12680);
IkReal x12692=(cj6*x12680);
IkReal x12693=(cj6*x12681);
IkReal x12694=(sj5*x12689);
evalcond[0]=(((r20*x12680*x12684))+(((-1.0)*cj1*x12683))+((r21*x12680*x12687))+((r22*x12690))+((r20*x12693))+(((-1.0)*r21*x12681*x12686)));
evalcond[1]=((((-1.0)*r20*x12684*x12689))+(((-1.0)*r22*x12694))+(((-1.0)*r21*x12680*x12686))+(((-1.0)*r21*x12687*x12689))+((cj1*sj2))+((r20*x12692)));
evalcond[2]=(((r10*x12680*x12684))+((r10*x12693))+((r12*x12690))+((x12680*x12688))+(((-1.0)*r11*x12681*x12686))+((cj0*sj2))+(((-1.0)*x12683*x12685)));
evalcond[3]=(((r00*x12693))+((r02*x12690))+((r00*x12680*x12684))+((x12687*x12691))+(((-1.0)*r01*x12681*x12686))+(((-1.0)*sj0*sj2))+(((-1.0)*x12682*x12683)));
evalcond[4]=((((-1.0)*r12*x12694))+((sj2*x12685))+((r10*x12692))+((cj0*cj2))+(((-1.0)*r10*x12684*x12689))+(((-1.0)*r11*x12680*x12686))+(((-1.0)*x12688*x12689)));
evalcond[5]=(((r00*x12692))+(((-1.0)*r00*x12684*x12689))+(((-1.0)*r02*x12694))+((sj2*x12682))+(((-1.0)*r01*x12687*x12689))+(((-1.0)*sj0*x12683))+(((-1.0)*x12686*x12691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12695=cj5*cj5;
IkReal x12696=cj6*cj6;
IkReal x12697=r22*r22;
IkReal x12698=r21*r21;
IkReal x12699=r20*r20;
IkReal x12700=((1.0)*cj5);
IkReal x12701=(cj6*r21);
IkReal x12702=(r20*sj6);
IkReal x12703=(cj1*cj2);
IkReal x12704=(cj1*sj2);
IkReal x12705=(r22*sj5);
IkReal x12706=(cj6*r20);
IkReal x12707=((2.0)*cj5);
IkReal x12708=(sj6*x12703);
IkReal x12709=((1.0)*x12698);
IkReal x12710=(x12696*x12699);
CheckValue<IkReal> x12711=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12710))+((x12696*x12698))+((x12695*x12697))+((x12695*x12710))+(((2.0)*x12701*x12702))+(((-1.0)*x12695*x12699))+(((-1.0)*x12709))+(((-1.0)*x12695*x12696*x12709))+(((-2.0)*x12695*x12701*x12702))+(((-1.0)*x12701*x12705*x12707))+(((-1.0)*x12697))+(((-1.0)*x12702*x12705*x12707)))),-1);
if(!x12711.valid){
continue;
}
CheckValue<IkReal> x12712 = IKatan2WithCheck(IkReal(((((-1.0)*x12700*x12701*x12704))+((r21*x12708))+(((-1.0)*x12700*x12702*x12704))+(((-1.0)*x12703*x12706))+(((-1.0)*x12704*x12705)))),IkReal(((((-1.0)*x12700*x12701*x12703))+(((-1.0)*x12700*x12702*x12703))+(((-1.0)*x12703*x12705))+(((-1.0)*r21*sj6*x12704))+((x12704*x12706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12711.value)))+(x12712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x12713=IKcos(j4);
IkReal x12714=IKsin(j4);
IkReal x12715=(r22*sj5);
IkReal x12716=(cj6*r20);
IkReal x12717=((1.0)*r21*sj6);
IkReal x12718=((1.0)*x12714);
IkReal x12719=(cj5*cj6*r21);
IkReal x12720=(cj5*r20*sj6);
evalcond[0]=((((-1.0)*cj1*cj2))+(((-1.0)*x12714*x12717))+((x12714*x12716))+((x12713*x12720))+((x12713*x12719))+((x12713*x12715)));
evalcond[1]=((((-1.0)*x12715*x12718))+((cj1*sj2))+(((-1.0)*x12718*x12720))+(((-1.0)*x12718*x12719))+(((-1.0)*x12713*x12717))+((x12713*x12716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x12721=(cj6*sj5);
IkReal x12722=(sj5*sj6);
IkReal x12723=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r11*x12721))+((r10*x12722))+(((-1.0)*r12*x12723)))))+(IKabs(((((-1.0)*r02*x12723))+((r00*x12722))+((r01*x12721))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12724=(cj2*cj4);
IkReal x12725=(r02*sj5);
IkReal x12726=(cj4*sj2);
IkReal x12727=(r12*sj5);
IkReal x12728=((1.0)*r01);
IkReal x12729=(cj5*cj6*r11);
IkReal x12730=(cj5*r00*sj6);
IkReal x12731=(cj5*r10*sj6);
IkReal x12732=(cj6*r00*sj4);
IkReal x12733=(sj2*sj4*sj6);
IkReal x12734=(cj6*r10*sj4);
IkReal x12735=(cj2*sj4*sj6);
IkReal x12736=(cj5*cj6*r01);
if( IKabs(((((-1.0)*x12728*x12733))+(((-1.0)*r11*x12735))+((x12724*x12729))+((x12724*x12727))+((x12724*x12731))+((cj2*x12734))+((x12725*x12726))+((sj2*x12732))+((x12726*x12730))+((x12726*x12736)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x12733))+(((-1.0)*x12728*x12735))+(((-1.0)*x12726*x12729))+(((-1.0)*x12726*x12727))+(((-1.0)*sj2*x12734))+(((-1.0)*x12726*x12731))+((x12724*x12725))+((x12724*x12736))+((x12724*x12730))+((cj2*x12732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12728*x12733))+(((-1.0)*r11*x12735))+((x12724*x12729))+((x12724*x12727))+((x12724*x12731))+((cj2*x12734))+((x12725*x12726))+((sj2*x12732))+((x12726*x12730))+((x12726*x12736))))+IKsqr((((r11*x12733))+(((-1.0)*x12728*x12735))+(((-1.0)*x12726*x12729))+(((-1.0)*x12726*x12727))+(((-1.0)*sj2*x12734))+(((-1.0)*x12726*x12731))+((x12724*x12725))+((x12724*x12736))+((x12724*x12730))+((cj2*x12732))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12728*x12733))+(((-1.0)*r11*x12735))+((x12724*x12729))+((x12724*x12727))+((x12724*x12731))+((cj2*x12734))+((x12725*x12726))+((sj2*x12732))+((x12726*x12730))+((x12726*x12736))), (((r11*x12733))+(((-1.0)*x12728*x12735))+(((-1.0)*x12726*x12729))+(((-1.0)*x12726*x12727))+(((-1.0)*sj2*x12734))+(((-1.0)*x12726*x12731))+((x12724*x12725))+((x12724*x12736))+((x12724*x12730))+((cj2*x12732))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12737=IKcos(j0);
IkReal x12738=IKsin(j0);
IkReal x12739=((1.0)*sj4);
IkReal x12740=(cj6*sj4);
IkReal x12741=((0.37429)*sj5);
IkReal x12742=(r10*sj6);
IkReal x12743=(r01*sj6);
IkReal x12744=((0.37429)*cj5);
IkReal x12745=((0.069)*sj2);
IkReal x12746=(cj6*r01);
IkReal x12747=((0.01)*cj5);
IkReal x12748=(r12*sj5);
IkReal x12749=(r00*sj6);
IkReal x12750=(r02*sj5);
IkReal x12751=(cj4*cj6);
IkReal x12752=(cj4*cj5);
IkReal x12753=((1.0)*cj4);
IkReal x12754=(r11*sj6);
IkReal x12755=(sj2*x12737);
IkReal x12756=(cj5*cj6*r11);
IkReal x12757=(cj2*x12737);
IkReal x12758=((0.069)*x12738);
IkReal x12759=(sj2*x12738);
IkReal x12760=((1.0)*cj2*x12738);
evalcond[0]=(((cj4*x12748))+((cj5*r11*x12751))+((x12742*x12752))+(((-1.0)*x12760))+x12755+((r10*x12740))+(((-1.0)*x12739*x12754)));
evalcond[1]=(((cj4*x12750))+(((-1.0)*x12757))+(((-1.0)*x12759))+((r00*x12740))+(((-1.0)*x12739*x12743))+((x12749*x12752))+((x12746*x12752)));
evalcond[2]=((((-1.0)*cj5*x12739*x12742))+(((-1.0)*x12753*x12754))+x12759+x12757+(((-1.0)*x12739*x12756))+((r10*x12751))+(((-1.0)*x12739*x12748)));
evalcond[3]=((((-1.0)*cj5*x12739*x12749))+(((-1.0)*cj5*x12739*x12746))+(((-1.0)*x12760))+x12755+(((-1.0)*x12743*x12753))+(((-1.0)*x12739*x12750))+((r00*x12751)));
evalcond[4]=((((-1.0)*x12741*x12746))+(((-1.0)*x12741*x12749))+(((0.01)*x12750))+(((-0.069)*x12757))+(((-1.0)*px))+((r02*x12744))+(((-1.0)*x12738*x12745))+(((0.069)*x12737))+((x12747*x12749))+((x12746*x12747)));
evalcond[5]=((((-1.0)*x12741*x12742))+(((-1.0)*cj6*r11*x12741))+((x12737*x12745))+(((0.01)*x12748))+((x12742*x12747))+(((-1.0)*py))+x12758+((cj6*r11*x12747))+(((-1.0)*cj2*x12758))+((r12*x12744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12761=(r02*sj5);
IkReal x12762=(cj5*sj6);
IkReal x12763=(r00*sj2);
IkReal x12764=(cj6*sj4);
IkReal x12765=((1.0)*cj2);
IkReal x12766=(r12*sj5);
IkReal x12767=(cj4*sj2);
IkReal x12768=(cj4*x12765);
IkReal x12769=(cj5*cj6*r11);
IkReal x12770=((1.0)*x12767);
IkReal x12771=(cj5*cj6*r01);
IkReal x12772=(sj2*sj4*sj6);
IkReal x12773=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*x12766*x12768))+((cj4*x12762*x12763))+((x12763*x12764))+(((-1.0)*r10*x12762*x12768))+((x12767*x12771))+((r11*x12773))+(((-1.0)*r10*x12764*x12765))+(((-1.0)*x12768*x12769))+((x12761*x12767))+(((-1.0)*r01*x12772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x12773))+(((-1.0)*r10*sj2*x12764))+(((-1.0)*x12768*x12771))+(((-1.0)*r00*x12764*x12765))+(((-1.0)*x12769*x12770))+(((-1.0)*x12766*x12770))+(((-1.0)*r10*x12762*x12770))+(((-1.0)*r00*x12762*x12768))+((r11*x12772))+(((-1.0)*x12761*x12768)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12766*x12768))+((cj4*x12762*x12763))+((x12763*x12764))+(((-1.0)*r10*x12762*x12768))+((x12767*x12771))+((r11*x12773))+(((-1.0)*r10*x12764*x12765))+(((-1.0)*x12768*x12769))+((x12761*x12767))+(((-1.0)*r01*x12772))))+IKsqr((((r01*x12773))+(((-1.0)*r10*sj2*x12764))+(((-1.0)*x12768*x12771))+(((-1.0)*r00*x12764*x12765))+(((-1.0)*x12769*x12770))+(((-1.0)*x12766*x12770))+(((-1.0)*r10*x12762*x12770))+(((-1.0)*r00*x12762*x12768))+((r11*x12772))+(((-1.0)*x12761*x12768))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12766*x12768))+((cj4*x12762*x12763))+((x12763*x12764))+(((-1.0)*r10*x12762*x12768))+((x12767*x12771))+((r11*x12773))+(((-1.0)*r10*x12764*x12765))+(((-1.0)*x12768*x12769))+((x12761*x12767))+(((-1.0)*r01*x12772))), (((r01*x12773))+(((-1.0)*r10*sj2*x12764))+(((-1.0)*x12768*x12771))+(((-1.0)*r00*x12764*x12765))+(((-1.0)*x12769*x12770))+(((-1.0)*x12766*x12770))+(((-1.0)*r10*x12762*x12770))+(((-1.0)*r00*x12762*x12768))+((r11*x12772))+(((-1.0)*x12761*x12768))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12774=IKcos(j0);
IkReal x12775=IKsin(j0);
IkReal x12776=((1.0)*sj4);
IkReal x12777=(cj6*sj4);
IkReal x12778=((0.37429)*sj5);
IkReal x12779=(r10*sj6);
IkReal x12780=((0.069)*sj2);
IkReal x12781=(r01*sj6);
IkReal x12782=((0.37429)*cj5);
IkReal x12783=(cj6*r01);
IkReal x12784=((0.01)*cj5);
IkReal x12785=(r12*sj5);
IkReal x12786=(r00*sj6);
IkReal x12787=(r02*sj5);
IkReal x12788=(cj4*cj6);
IkReal x12789=(cj4*cj5);
IkReal x12790=((1.0)*cj4);
IkReal x12791=(r11*sj6);
IkReal x12792=(cj2*x12774);
IkReal x12793=(cj5*cj6*r11);
IkReal x12794=((0.069)*x12775);
IkReal x12795=(sj2*x12774);
IkReal x12796=(cj2*x12775);
IkReal x12797=((1.0)*sj2*x12775);
evalcond[0]=(((cj4*x12785))+(((-1.0)*x12776*x12791))+x12795+x12796+((cj5*r11*x12788))+((x12779*x12789))+((r10*x12777)));
evalcond[1]=(((x12786*x12789))+(((-1.0)*x12797))+((x12783*x12789))+((cj4*x12787))+x12792+(((-1.0)*x12776*x12781))+((r00*x12777)));
evalcond[2]=((((-1.0)*x12797))+(((-1.0)*cj5*x12776*x12779))+(((-1.0)*x12776*x12793))+((r10*x12788))+x12792+(((-1.0)*x12776*x12785))+(((-1.0)*x12790*x12791)));
evalcond[3]=((((-1.0)*x12781*x12790))+(((-1.0)*cj5*x12776*x12783))+(((-1.0)*cj5*x12776*x12786))+((r00*x12788))+(((-1.0)*x12795))+(((-1.0)*x12796))+(((-1.0)*x12776*x12787)));
evalcond[4]=(((x12783*x12784))+((x12784*x12786))+(((-1.0)*x12778*x12783))+(((-1.0)*x12778*x12786))+(((0.069)*x12774))+(((-1.0)*px))+(((0.01)*x12787))+(((0.069)*x12792))+((r02*x12782))+(((-1.0)*x12775*x12780)));
evalcond[5]=(((x12774*x12780))+((cj6*r11*x12784))+(((-1.0)*cj6*r11*x12778))+(((-1.0)*py))+(((0.01)*x12785))+((cj2*x12794))+((r12*x12782))+x12794+(((-1.0)*x12778*x12779))+((x12779*x12784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x12798=(cj6*sj5);
IkReal x12799=(sj5*sj6);
IkReal x12800=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r10*x12799))+(((-1.0)*r12*x12800))+((r11*x12798)))))+(IKabs(((((-1.0)*r02*x12800))+((r01*x12798))+((r00*x12799))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12801=(cj5*sj4);
CheckValue<IkReal> x12802=IKPowWithIntegerCheck(sj1,-1);
if(!x12802.valid){
continue;
}
CheckValue<IkReal> x12803=IKPowWithIntegerCheck(cj1,-1);
if(!x12803.valid){
continue;
}
if( IKabs(((x12802.value)*((((cj6*r11*x12801))+((r10*sj6*x12801))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12803.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12802.value)*((((cj6*r11*x12801))+((r10*sj6*x12801))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))))+IKsqr(((x12803.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12802.value)*((((cj6*r11*x12801))+((r10*sj6*x12801))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))), ((x12803.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12804=IKcos(j0);
IkReal x12805=IKsin(j0);
IkReal x12806=((1.0)*sj4);
IkReal x12807=(cj6*sj4);
IkReal x12808=((0.37429)*sj5);
IkReal x12809=(r10*sj6);
IkReal x12810=(r01*sj6);
IkReal x12811=((0.36442)*cj1);
IkReal x12812=(cj6*r01);
IkReal x12813=(r00*sj6);
IkReal x12814=(cj6*r11);
IkReal x12815=(r02*sj5);
IkReal x12816=((0.01)*cj5);
IkReal x12817=(r12*sj5);
IkReal x12818=(cj4*cj6);
IkReal x12819=(cj5*r02);
IkReal x12820=(cj4*cj5);
IkReal x12821=((1.0)*cj4);
IkReal x12822=(r11*sj6);
IkReal x12823=(cj5*r12);
IkReal x12824=((0.069)*x12805);
IkReal x12825=((0.069)*x12804);
IkReal x12826=(cj5*x12814);
IkReal x12827=((1.0)*x12805);
evalcond[0]=((((-1.0)*x12819))+(((-1.0)*cj1*x12804))+((sj5*x12813))+((sj5*x12812)));
evalcond[1]=(((sj5*x12809))+(((-1.0)*cj1*x12827))+(((-1.0)*x12823))+((sj5*x12814)));
evalcond[2]=(((r10*x12807))+x12804+((x12814*x12820))+(((-1.0)*x12806*x12822))+((x12809*x12820))+((cj4*x12817)));
evalcond[3]=(((x12813*x12820))+((x12812*x12820))+((r00*x12807))+(((-1.0)*x12806*x12810))+(((-1.0)*x12827))+((cj4*x12815)));
evalcond[4]=((((-1.0)*cj5*x12806*x12809))+(((-1.0)*x12806*x12826))+((sj1*x12805))+(((-1.0)*x12806*x12817))+(((-1.0)*x12821*x12822))+((r10*x12818)));
evalcond[5]=(((sj1*x12804))+((r00*x12818))+(((-1.0)*x12806*x12815))+(((-1.0)*cj5*x12806*x12813))+(((-1.0)*cj5*x12806*x12812))+(((-1.0)*x12810*x12821)));
evalcond[6]=(((x12812*x12816))+x12825+((x12813*x12816))+(((0.01)*x12815))+(((-1.0)*px))+((x12804*x12811))+(((-1.0)*x12808*x12813))+(((-1.0)*x12808*x12812))+(((-1.0)*x12824))+(((0.37429)*x12819)));
evalcond[7]=(x12824+x12825+(((0.37429)*x12823))+((x12814*x12816))+(((0.01)*x12817))+(((-1.0)*py))+(((-1.0)*x12808*x12814))+((x12809*x12816))+(((-1.0)*x12808*x12809))+((x12805*x12811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12828=(cj6*r01);
IkReal x12829=(cj4*cj5);
IkReal x12830=(r00*sj6);
CheckValue<IkReal> x12831=IKPowWithIntegerCheck(cj1,-1);
if(!x12831.valid){
continue;
}
if( IKabs((((cj6*r00*sj4))+((x12828*x12829))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x12829*x12830)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12831.value)*((((sj5*x12830))+((sj5*x12828))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj4))+((x12828*x12829))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x12829*x12830))))+IKsqr(((x12831.value)*((((sj5*x12830))+((sj5*x12828))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj6*r00*sj4))+((x12828*x12829))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x12829*x12830))), ((x12831.value)*((((sj5*x12830))+((sj5*x12828))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12832=IKcos(j0);
IkReal x12833=IKsin(j0);
IkReal x12834=((1.0)*sj4);
IkReal x12835=(cj6*sj4);
IkReal x12836=((0.37429)*sj5);
IkReal x12837=(r10*sj6);
IkReal x12838=(r01*sj6);
IkReal x12839=((0.36442)*cj1);
IkReal x12840=(cj6*r01);
IkReal x12841=(r00*sj6);
IkReal x12842=(cj6*r11);
IkReal x12843=(r02*sj5);
IkReal x12844=((0.01)*cj5);
IkReal x12845=(r12*sj5);
IkReal x12846=(cj4*cj6);
IkReal x12847=(cj5*r02);
IkReal x12848=(cj4*cj5);
IkReal x12849=((1.0)*cj4);
IkReal x12850=(r11*sj6);
IkReal x12851=(cj5*r12);
IkReal x12852=((0.069)*x12833);
IkReal x12853=((0.069)*x12832);
IkReal x12854=(cj5*x12842);
IkReal x12855=((1.0)*x12833);
evalcond[0]=((((-1.0)*cj1*x12832))+(((-1.0)*x12847))+((sj5*x12840))+((sj5*x12841)));
evalcond[1]=(((sj5*x12837))+(((-1.0)*cj1*x12855))+(((-1.0)*x12851))+((sj5*x12842)));
evalcond[2]=(((r10*x12835))+x12832+((x12842*x12848))+((x12837*x12848))+((cj4*x12845))+(((-1.0)*x12834*x12850)));
evalcond[3]=(((x12841*x12848))+((x12840*x12848))+((cj4*x12843))+((r00*x12835))+(((-1.0)*x12855))+(((-1.0)*x12834*x12838)));
evalcond[4]=(((r10*x12846))+(((-1.0)*x12834*x12854))+(((-1.0)*x12834*x12845))+(((-1.0)*cj5*x12834*x12837))+((sj1*x12833))+(((-1.0)*x12849*x12850)));
evalcond[5]=((((-1.0)*x12838*x12849))+(((-1.0)*cj5*x12834*x12841))+(((-1.0)*cj5*x12834*x12840))+((r00*x12846))+(((-1.0)*x12834*x12843))+((sj1*x12832)));
evalcond[6]=(x12853+((x12841*x12844))+((x12840*x12844))+(((-1.0)*px))+(((-1.0)*x12836*x12841))+(((-1.0)*x12836*x12840))+((x12832*x12839))+(((-1.0)*x12852))+(((0.01)*x12843))+(((0.37429)*x12847)));
evalcond[7]=((((0.37429)*x12851))+x12853+x12852+((x12842*x12844))+((x12837*x12844))+(((-1.0)*x12836*x12837))+(((-1.0)*py))+((x12833*x12839))+(((-1.0)*x12836*x12842))+(((0.01)*x12845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12856=(cj6*sj5);
IkReal x12857=(sj5*sj6);
IkReal x12858=((1.0)*cj5);
CheckValue<IkReal> x12859=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12859.valid){
continue;
}
CheckValue<IkReal> x12860 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12858))+((r10*x12857))+((r11*x12856)))),IkReal((((r00*x12857))+(((-1.0)*r02*x12858))+((r01*x12856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12860.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12859.value)))+(x12860.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12861=IKcos(j0);
IkReal x12862=IKsin(j0);
IkReal x12863=((1.0)*sj4);
IkReal x12864=(cj6*sj4);
IkReal x12865=((0.37429)*sj5);
IkReal x12866=(r10*sj6);
IkReal x12867=(r01*sj6);
IkReal x12868=((0.36442)*cj1);
IkReal x12869=(cj6*r01);
IkReal x12870=(r00*sj6);
IkReal x12871=(cj6*r11);
IkReal x12872=(r02*sj5);
IkReal x12873=((0.01)*cj5);
IkReal x12874=(r12*sj5);
IkReal x12875=(cj4*cj6);
IkReal x12876=(cj5*r02);
IkReal x12877=(cj4*cj5);
IkReal x12878=((1.0)*cj4);
IkReal x12879=(r11*sj6);
IkReal x12880=(cj5*r12);
IkReal x12881=((0.069)*x12862);
IkReal x12882=((0.069)*x12861);
IkReal x12883=(cj5*x12871);
IkReal x12884=((1.0)*x12862);
evalcond[0]=(((sj5*x12869))+(((-1.0)*cj1*x12861))+(((-1.0)*x12876))+((sj5*x12870)));
evalcond[1]=(((sj5*x12866))+(((-1.0)*x12880))+((sj5*x12871))+(((-1.0)*cj1*x12884)));
evalcond[2]=((((-1.0)*x12863*x12879))+x12861+((x12871*x12877))+((cj4*x12874))+((r10*x12864))+((x12866*x12877)));
evalcond[3]=(((x12870*x12877))+(((-1.0)*x12884))+((cj4*x12872))+((x12869*x12877))+(((-1.0)*x12863*x12867))+((r00*x12864)));
evalcond[4]=((((-1.0)*x12863*x12874))+((r10*x12875))+(((-1.0)*x12878*x12879))+(((-1.0)*cj5*x12863*x12866))+(((-1.0)*x12863*x12883))+((sj1*x12862)));
evalcond[5]=((((-1.0)*x12863*x12872))+(((-1.0)*x12867*x12878))+(((-1.0)*cj5*x12863*x12870))+((r00*x12875))+(((-1.0)*cj5*x12863*x12869))+((sj1*x12861)));
evalcond[6]=((((0.37429)*x12876))+((x12870*x12873))+x12882+(((-1.0)*x12881))+((x12869*x12873))+(((-1.0)*x12865*x12869))+(((-1.0)*px))+((x12861*x12868))+(((0.01)*x12872))+(((-1.0)*x12865*x12870)));
evalcond[7]=(x12881+x12882+((x12871*x12873))+(((-1.0)*x12865*x12866))+(((0.37429)*x12880))+(((-1.0)*py))+(((0.01)*x12874))+((x12862*x12868))+(((-1.0)*x12865*x12871))+((x12866*x12873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x12885=(cj6*sj5);
IkReal x12886=(sj5*sj6);
IkReal x12887=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r02*x12887))+((r00*x12886))+((r01*x12885)))))+(IKabs(((((-1.0)*r12*x12887))+((r10*x12886))+((r11*x12885))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12888=((1.0)*cj5*sj4);
CheckValue<IkReal> x12889=IKPowWithIntegerCheck(sj1,-1);
if(!x12889.valid){
continue;
}
CheckValue<IkReal> x12890=IKPowWithIntegerCheck(cj1,-1);
if(!x12890.valid){
continue;
}
if( IKabs(((x12889.value)*(((((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+(((-1.0)*r10*sj6*x12888))+((cj4*cj6*r10))+(((-1.0)*cj6*r11*x12888)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12890.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12889.value)*(((((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+(((-1.0)*r10*sj6*x12888))+((cj4*cj6*r10))+(((-1.0)*cj6*r11*x12888))))))+IKsqr(((x12890.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12889.value)*(((((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+(((-1.0)*r10*sj6*x12888))+((cj4*cj6*r10))+(((-1.0)*cj6*r11*x12888))))), ((x12890.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12891=IKsin(j0);
IkReal x12892=IKcos(j0);
IkReal x12893=((1.0)*sj4);
IkReal x12894=(cj6*sj4);
IkReal x12895=((0.37429)*sj5);
IkReal x12896=(r10*sj6);
IkReal x12897=(r01*sj6);
IkReal x12898=((0.36442)*cj1);
IkReal x12899=(cj6*r01);
IkReal x12900=(r00*sj6);
IkReal x12901=(r12*sj5);
IkReal x12902=(cj6*r11);
IkReal x12903=(r02*sj5);
IkReal x12904=((0.01)*cj5);
IkReal x12905=(cj4*cj6);
IkReal x12906=(cj5*r02);
IkReal x12907=(cj4*cj5);
IkReal x12908=((1.0)*cj4);
IkReal x12909=(r11*sj6);
IkReal x12910=(cj5*r12);
IkReal x12911=((0.069)*x12891);
IkReal x12912=((0.069)*x12892);
IkReal x12913=(cj5*x12902);
IkReal x12914=((1.0)*x12892);
IkReal x12915=((1.0)*x12891);
evalcond[0]=((((-1.0)*x12906))+((sj5*x12900))+((sj5*x12899))+(((-1.0)*cj1*x12914)));
evalcond[1]=((((-1.0)*x12910))+((sj5*x12902))+((sj5*x12896))+(((-1.0)*cj1*x12915)));
evalcond[2]=((((-1.0)*x12893*x12897))+x12891+((r00*x12894))+((x12899*x12907))+((cj4*x12903))+((x12900*x12907)));
evalcond[3]=((((-1.0)*x12914))+(((-1.0)*x12893*x12909))+((x12902*x12907))+((cj4*x12901))+((r10*x12894))+((x12896*x12907)));
evalcond[4]=((((-1.0)*x12908*x12909))+(((-1.0)*x12893*x12901))+(((-1.0)*x12893*x12913))+(((-1.0)*sj1*x12915))+((r10*x12905))+(((-1.0)*cj5*x12893*x12896)));
evalcond[5]=(((r00*x12905))+(((-1.0)*x12893*x12903))+(((-1.0)*x12897*x12908))+(((-1.0)*sj1*x12914))+(((-1.0)*cj5*x12893*x12900))+(((-1.0)*cj5*x12893*x12899)));
evalcond[6]=(x12912+x12911+(((-1.0)*px))+((x12899*x12904))+(((0.01)*x12903))+(((-1.0)*x12895*x12899))+((x12900*x12904))+(((0.37429)*x12906))+(((-1.0)*x12895*x12900))+((x12892*x12898)));
evalcond[7]=(x12911+(((-1.0)*x12912))+(((-1.0)*py))+((x12902*x12904))+(((0.01)*x12901))+((x12896*x12904))+(((-1.0)*x12895*x12896))+(((0.37429)*x12910))+((x12891*x12898))+(((-1.0)*x12895*x12902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12916=(cj6*r11);
IkReal x12917=(cj4*cj5);
IkReal x12918=(r10*sj6);
CheckValue<IkReal> x12919=IKPowWithIntegerCheck(cj1,-1);
if(!x12919.valid){
continue;
}
if( IKabs(((x12919.value)*(((((-1.0)*cj5*r12))+((sj5*x12916))+((sj5*x12918)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj4))+((x12917*x12918))+((x12916*x12917))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12919.value)*(((((-1.0)*cj5*r12))+((sj5*x12916))+((sj5*x12918))))))+IKsqr((((cj6*r10*sj4))+((x12917*x12918))+((x12916*x12917))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12919.value)*(((((-1.0)*cj5*r12))+((sj5*x12916))+((sj5*x12918))))), (((cj6*r10*sj4))+((x12917*x12918))+((x12916*x12917))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12920=IKsin(j0);
IkReal x12921=IKcos(j0);
IkReal x12922=((1.0)*sj4);
IkReal x12923=(cj6*sj4);
IkReal x12924=((0.37429)*sj5);
IkReal x12925=(r10*sj6);
IkReal x12926=(r01*sj6);
IkReal x12927=((0.36442)*cj1);
IkReal x12928=(cj6*r01);
IkReal x12929=(r00*sj6);
IkReal x12930=(r12*sj5);
IkReal x12931=(cj6*r11);
IkReal x12932=(r02*sj5);
IkReal x12933=((0.01)*cj5);
IkReal x12934=(cj4*cj6);
IkReal x12935=(cj5*r02);
IkReal x12936=(cj4*cj5);
IkReal x12937=((1.0)*cj4);
IkReal x12938=(r11*sj6);
IkReal x12939=(cj5*r12);
IkReal x12940=((0.069)*x12920);
IkReal x12941=((0.069)*x12921);
IkReal x12942=(cj5*x12931);
IkReal x12943=((1.0)*x12921);
IkReal x12944=((1.0)*x12920);
evalcond[0]=(((sj5*x12928))+((sj5*x12929))+(((-1.0)*cj1*x12943))+(((-1.0)*x12935)));
evalcond[1]=(((sj5*x12925))+(((-1.0)*cj1*x12944))+((sj5*x12931))+(((-1.0)*x12939)));
evalcond[2]=(x12920+((x12928*x12936))+((x12929*x12936))+((r00*x12923))+(((-1.0)*x12922*x12926))+((cj4*x12932)));
evalcond[3]=(((r10*x12923))+((x12931*x12936))+(((-1.0)*x12943))+((x12925*x12936))+(((-1.0)*x12922*x12938))+((cj4*x12930)));
evalcond[4]=((((-1.0)*x12937*x12938))+(((-1.0)*x12922*x12942))+((r10*x12934))+(((-1.0)*cj5*x12922*x12925))+(((-1.0)*x12922*x12930))+(((-1.0)*sj1*x12944)));
evalcond[5]=((((-1.0)*x12926*x12937))+(((-1.0)*cj5*x12922*x12929))+(((-1.0)*cj5*x12922*x12928))+((r00*x12934))+(((-1.0)*x12922*x12932))+(((-1.0)*sj1*x12943)));
evalcond[6]=(x12941+x12940+((x12921*x12927))+((x12928*x12933))+(((-1.0)*px))+(((0.37429)*x12935))+(((0.01)*x12932))+((x12929*x12933))+(((-1.0)*x12924*x12929))+(((-1.0)*x12924*x12928)));
evalcond[7]=(x12940+(((-1.0)*x12924*x12931))+((x12920*x12927))+(((-1.0)*py))+((x12931*x12933))+(((0.37429)*x12939))+(((0.01)*x12930))+(((-1.0)*x12941))+((x12925*x12933))+(((-1.0)*x12924*x12925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12945=(cj6*sj5);
IkReal x12946=(sj5*sj6);
IkReal x12947=((1.0)*cj5);
CheckValue<IkReal> x12948=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x12948.valid){
continue;
}
CheckValue<IkReal> x12949 = IKatan2WithCheck(IkReal((((r10*x12946))+((r11*x12945))+(((-1.0)*r12*x12947)))),IkReal((((r00*x12946))+((r01*x12945))+(((-1.0)*r02*x12947)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12949.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12948.value)))+(x12949.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12950=IKsin(j0);
IkReal x12951=IKcos(j0);
IkReal x12952=((1.0)*sj4);
IkReal x12953=(cj6*sj4);
IkReal x12954=((0.37429)*sj5);
IkReal x12955=(r10*sj6);
IkReal x12956=(r01*sj6);
IkReal x12957=((0.36442)*cj1);
IkReal x12958=(cj6*r01);
IkReal x12959=(r00*sj6);
IkReal x12960=(r12*sj5);
IkReal x12961=(cj6*r11);
IkReal x12962=(r02*sj5);
IkReal x12963=((0.01)*cj5);
IkReal x12964=(cj4*cj6);
IkReal x12965=(cj5*r02);
IkReal x12966=(cj4*cj5);
IkReal x12967=((1.0)*cj4);
IkReal x12968=(r11*sj6);
IkReal x12969=(cj5*r12);
IkReal x12970=((0.069)*x12950);
IkReal x12971=((0.069)*x12951);
IkReal x12972=(cj5*x12961);
IkReal x12973=((1.0)*x12951);
IkReal x12974=((1.0)*x12950);
evalcond[0]=((((-1.0)*cj1*x12973))+(((-1.0)*x12965))+((sj5*x12958))+((sj5*x12959)));
evalcond[1]=((((-1.0)*cj1*x12974))+(((-1.0)*x12969))+((sj5*x12961))+((sj5*x12955)));
evalcond[2]=(x12950+(((-1.0)*x12952*x12956))+((x12959*x12966))+((r00*x12953))+((cj4*x12962))+((x12958*x12966)));
evalcond[3]=(((r10*x12953))+((x12955*x12966))+(((-1.0)*x12973))+(((-1.0)*x12952*x12968))+((x12961*x12966))+((cj4*x12960)));
evalcond[4]=((((-1.0)*cj5*x12952*x12955))+(((-1.0)*x12952*x12972))+(((-1.0)*x12952*x12960))+(((-1.0)*sj1*x12974))+(((-1.0)*x12967*x12968))+((r10*x12964)));
evalcond[5]=((((-1.0)*cj5*x12952*x12958))+(((-1.0)*cj5*x12952*x12959))+((r00*x12964))+(((-1.0)*x12952*x12962))+(((-1.0)*sj1*x12973))+(((-1.0)*x12956*x12967)));
evalcond[6]=((((-1.0)*x12954*x12959))+(((-1.0)*x12954*x12958))+x12970+x12971+((x12951*x12957))+((x12959*x12963))+(((-1.0)*px))+(((0.01)*x12962))+(((0.37429)*x12965))+((x12958*x12963)));
evalcond[7]=((((-1.0)*x12954*x12955))+x12970+((x12955*x12963))+(((-1.0)*x12971))+((x12961*x12963))+(((-1.0)*py))+(((-1.0)*x12954*x12961))+(((0.01)*x12960))+(((0.37429)*x12969))+((x12950*x12957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12975=(cj6*sj5);
IkReal x12976=(sj5*sj6);
IkReal x12977=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x12977))+((r11*x12975))+((r10*x12976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x12975))+((r00*x12976))+(((-1.0)*r02*x12977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x12977))+((r11*x12975))+((r10*x12976))))+IKsqr((((r01*x12975))+((r00*x12976))+(((-1.0)*r02*x12977))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x12977))+((r11*x12975))+((r10*x12976))), (((r01*x12975))+((r00*x12976))+(((-1.0)*r02*x12977))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12978=IKcos(j0);
IkReal x12979=IKsin(j0);
IkReal x12980=((1.0)*sj4);
IkReal x12981=(cj6*sj4);
IkReal x12982=((0.37429)*sj5);
IkReal x12983=(r10*sj6);
IkReal x12984=(r01*sj6);
IkReal x12985=((0.069)*sj2);
IkReal x12986=(cj6*r01);
IkReal x12987=(r00*sj6);
IkReal x12988=(r12*sj5);
IkReal x12989=(cj6*r11);
IkReal x12990=(r02*sj5);
IkReal x12991=((0.01)*cj5);
IkReal x12992=(cj4*cj6);
IkReal x12993=(cj5*r02);
IkReal x12994=(cj4*cj5);
IkReal x12995=((1.0)*cj4);
IkReal x12996=(r11*sj6);
IkReal x12997=(cj5*r12);
IkReal x12998=(cj5*x12989);
IkReal x12999=((1.0)*x12979);
evalcond[0]=((((-1.0)*x12978))+((sj5*x12987))+((sj5*x12986))+(((-1.0)*x12993)));
evalcond[1]=((((-1.0)*x12999))+((sj5*x12983))+((sj5*x12989))+(((-1.0)*x12997)));
evalcond[2]=(((r10*x12981))+((x12989*x12994))+((cj4*x12988))+((sj2*x12978))+((x12983*x12994))+(((-1.0)*x12980*x12996)));
evalcond[3]=((((-1.0)*x12980*x12984))+((cj4*x12990))+((r00*x12981))+((x12987*x12994))+((x12986*x12994))+(((-1.0)*sj2*x12999)));
evalcond[4]=((((-1.0)*x12980*x12988))+((cj2*x12978))+((r10*x12992))+(((-1.0)*cj5*x12980*x12983))+(((-1.0)*x12995*x12996))+(((-1.0)*x12980*x12998)));
evalcond[5]=((((-1.0)*cj2*x12999))+((r00*x12992))+(((-1.0)*cj5*x12980*x12987))+(((-1.0)*cj5*x12980*x12986))+(((-1.0)*x12984*x12995))+(((-1.0)*x12980*x12990)));
evalcond[6]=((((0.37429)*x12993))+(((0.43342)*x12978))+((x12987*x12991))+(((-1.0)*x12982*x12987))+(((-1.0)*x12982*x12986))+(((-1.0)*px))+(((-1.0)*x12979*x12985))+((x12986*x12991))+(((0.01)*x12990)));
evalcond[7]=((((0.37429)*x12997))+((x12989*x12991))+(((0.43342)*x12979))+(((-1.0)*x12982*x12983))+(((-1.0)*x12982*x12989))+(((-1.0)*py))+((x12978*x12985))+((x12983*x12991))+(((0.01)*x12988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13000=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x13000))+(((-1.0)*r10*sj6*x13000)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x13000))+(((-1.0)*cj6*r01*x13000))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x13000))+(((-1.0)*r10*sj6*x13000))))+IKsqr(((((-1.0)*r00*sj6*x13000))+(((-1.0)*cj6*r01*x13000))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x13000))+(((-1.0)*r10*sj6*x13000))), ((((-1.0)*r00*sj6*x13000))+(((-1.0)*cj6*r01*x13000))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13001=IKcos(j0);
IkReal x13002=IKsin(j0);
IkReal x13003=((1.0)*sj4);
IkReal x13004=(cj6*sj4);
IkReal x13005=((0.37429)*sj5);
IkReal x13006=(r10*sj6);
IkReal x13007=(r01*sj6);
IkReal x13008=((0.37429)*cj5);
IkReal x13009=((0.069)*sj2);
IkReal x13010=(cj6*r01);
IkReal x13011=(r00*sj6);
IkReal x13012=(r12*sj5);
IkReal x13013=(cj6*r11);
IkReal x13014=(r02*sj5);
IkReal x13015=((0.01)*cj5);
IkReal x13016=(cj4*cj6);
IkReal x13017=((1.0)*cj5);
IkReal x13018=(cj4*cj5);
IkReal x13019=((1.0)*cj4);
IkReal x13020=(r11*sj6);
IkReal x13021=(cj5*x13013);
IkReal x13022=((1.0)*x13002);
evalcond[0]=(((sj5*x13011))+((sj5*x13010))+x13001+(((-1.0)*r02*x13017)));
evalcond[1]=(((sj5*x13013))+x13002+((sj5*x13006))+(((-1.0)*r12*x13017)));
evalcond[2]=(((x13006*x13018))+((x13013*x13018))+((cj4*x13012))+((r10*x13004))+(((-1.0)*x13003*x13020))+((sj2*x13001)));
evalcond[3]=(((r00*x13004))+(((-1.0)*x13003*x13007))+(((-1.0)*sj2*x13022))+((cj4*x13014))+((x13010*x13018))+((x13011*x13018)));
evalcond[4]=((((-1.0)*x13003*x13012))+((cj2*x13001))+(((-1.0)*x13019*x13020))+(((-1.0)*cj5*x13003*x13006))+((r10*x13016))+(((-1.0)*x13003*x13021)));
evalcond[5]=((((-1.0)*x13003*x13014))+((r00*x13016))+(((-1.0)*cj2*x13022))+(((-1.0)*cj5*x13003*x13011))+(((-1.0)*cj5*x13003*x13010))+(((-1.0)*x13007*x13019)));
evalcond[6]=((((-1.0)*x13002*x13009))+(((-1.0)*x13005*x13010))+(((-1.0)*x13005*x13011))+(((-0.29542)*x13001))+((r02*x13008))+(((-1.0)*px))+(((0.01)*x13014))+((x13010*x13015))+((x13011*x13015)));
evalcond[7]=((((-1.0)*x13005*x13006))+(((-1.0)*x13005*x13013))+(((-0.29542)*x13002))+((x13006*x13015))+((x13013*x13015))+(((-1.0)*py))+((r12*x13008))+((x13001*x13009))+(((0.01)*x13012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x13023=(cj6*sj5);
IkReal x13024=(sj5*sj6);
IkReal x13025=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r01*x13023))+((r00*x13024))+(((-1.0)*r02*x13025)))))+(IKabs((((r11*x13023))+(((-1.0)*r12*x13025))+((r10*x13024))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13026=(cj4*cj5);
CheckValue<IkReal> x13027=IKPowWithIntegerCheck(sj1,-1);
if(!x13027.valid){
continue;
}
CheckValue<IkReal> x13028=IKPowWithIntegerCheck(cj1,-1);
if(!x13028.valid){
continue;
}
if( IKabs(((x13027.value)*((((r10*sj6*x13026))+((cj6*r10*sj4))+((cj6*r11*x13026))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13028.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13027.value)*((((r10*sj6*x13026))+((cj6*r10*sj4))+((cj6*r11*x13026))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))))+IKsqr(((x13028.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13027.value)*((((r10*sj6*x13026))+((cj6*r10*sj4))+((cj6*r11*x13026))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))), ((x13028.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13029=IKcos(j0);
IkReal x13030=IKsin(j0);
IkReal x13031=((1.0)*sj4);
IkReal x13032=(cj6*sj4);
IkReal x13033=((0.37429)*sj5);
IkReal x13034=(r10*sj6);
IkReal x13035=(r01*sj6);
IkReal x13036=((0.36442)*cj1);
IkReal x13037=(cj6*r01);
IkReal x13038=(r00*sj6);
IkReal x13039=(r12*sj5);
IkReal x13040=(cj6*r11);
IkReal x13041=(r02*sj5);
IkReal x13042=((1.0)*cj5);
IkReal x13043=((0.01)*cj5);
IkReal x13044=(cj4*cj6);
IkReal x13045=((0.37429)*cj5);
IkReal x13046=(cj4*cj5);
IkReal x13047=((1.0)*cj4);
IkReal x13048=(r11*sj6);
IkReal x13049=(cj5*x13040);
IkReal x13050=((0.069)*x13029);
IkReal x13051=((0.069)*x13030);
IkReal x13052=((1.0)*x13030);
IkReal x13053=((1.0)*x13029);
evalcond[0]=((((-1.0)*r02*x13042))+((sj5*x13038))+((sj5*x13037))+(((-1.0)*cj1*x13053)));
evalcond[1]=(((sj5*x13034))+((sj5*x13040))+(((-1.0)*cj1*x13052))+(((-1.0)*r12*x13042)));
evalcond[2]=((((-1.0)*x13047*x13048))+(((-1.0)*x13031*x13039))+(((-1.0)*cj5*x13031*x13034))+((r10*x13044))+x13029+(((-1.0)*x13031*x13049)));
evalcond[3]=((((-1.0)*sj1*x13052))+((x13034*x13046))+((x13040*x13046))+((r10*x13032))+(((-1.0)*x13031*x13048))+((cj4*x13039)));
evalcond[4]=((((-1.0)*sj1*x13053))+(((-1.0)*x13031*x13035))+((x13037*x13046))+((x13038*x13046))+((r00*x13032))+((cj4*x13041)));
evalcond[5]=((((-1.0)*cj5*x13031*x13037))+(((-1.0)*cj5*x13031*x13038))+((r00*x13044))+(((-1.0)*x13031*x13041))+(((-1.0)*x13052))+(((-1.0)*x13035*x13047)));
evalcond[6]=((((-1.0)*sj1*x13050))+((r02*x13045))+((x13037*x13043))+(((-1.0)*x13033*x13038))+(((-1.0)*x13033*x13037))+((x13029*x13036))+(((-1.0)*px))+((x13038*x13043))+x13050+(((0.01)*x13041)));
evalcond[7]=((((-1.0)*sj1*x13051))+(((-1.0)*x13033*x13034))+(((0.01)*x13039))+((x13034*x13043))+((x13040*x13043))+((x13030*x13036))+(((-1.0)*x13033*x13040))+(((-1.0)*py))+x13051+((r12*x13045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13054=(cj6*r11);
IkReal x13055=(cj5*sj4);
IkReal x13056=(r10*sj6);
CheckValue<IkReal> x13057=IKPowWithIntegerCheck(cj1,-1);
if(!x13057.valid){
continue;
}
if( IKabs(((x13057.value)*(((((-1.0)*cj5*r12))+((sj5*x13054))+((sj5*x13056)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x13055*x13056))+((x13054*x13055))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13057.value)*(((((-1.0)*cj5*r12))+((sj5*x13054))+((sj5*x13056))))))+IKsqr((((x13055*x13056))+((x13054*x13055))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13057.value)*(((((-1.0)*cj5*r12))+((sj5*x13054))+((sj5*x13056))))), (((x13055*x13056))+((x13054*x13055))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13058=IKcos(j0);
IkReal x13059=IKsin(j0);
IkReal x13060=((1.0)*sj4);
IkReal x13061=(cj6*sj4);
IkReal x13062=((0.37429)*sj5);
IkReal x13063=(r10*sj6);
IkReal x13064=(r01*sj6);
IkReal x13065=((0.36442)*cj1);
IkReal x13066=(cj6*r01);
IkReal x13067=(r00*sj6);
IkReal x13068=(r12*sj5);
IkReal x13069=(cj6*r11);
IkReal x13070=(r02*sj5);
IkReal x13071=((1.0)*cj5);
IkReal x13072=((0.01)*cj5);
IkReal x13073=(cj4*cj6);
IkReal x13074=((0.37429)*cj5);
IkReal x13075=(cj4*cj5);
IkReal x13076=((1.0)*cj4);
IkReal x13077=(r11*sj6);
IkReal x13078=(cj5*x13069);
IkReal x13079=((0.069)*x13058);
IkReal x13080=((0.069)*x13059);
IkReal x13081=((1.0)*x13059);
IkReal x13082=((1.0)*x13058);
evalcond[0]=((((-1.0)*r02*x13071))+(((-1.0)*cj1*x13082))+((sj5*x13067))+((sj5*x13066)));
evalcond[1]=((((-1.0)*r12*x13071))+(((-1.0)*cj1*x13081))+((sj5*x13063))+((sj5*x13069)));
evalcond[2]=((((-1.0)*x13076*x13077))+((r10*x13073))+(((-1.0)*x13060*x13068))+x13058+(((-1.0)*x13060*x13078))+(((-1.0)*cj5*x13060*x13063)));
evalcond[3]=(((r10*x13061))+(((-1.0)*x13060*x13077))+((x13063*x13075))+((x13069*x13075))+((cj4*x13068))+(((-1.0)*sj1*x13081)));
evalcond[4]=((((-1.0)*x13060*x13064))+((cj4*x13070))+((x13067*x13075))+((x13066*x13075))+((r00*x13061))+(((-1.0)*sj1*x13082)));
evalcond[5]=((((-1.0)*x13081))+(((-1.0)*x13064*x13076))+((r00*x13073))+(((-1.0)*x13060*x13070))+(((-1.0)*cj5*x13060*x13067))+(((-1.0)*cj5*x13060*x13066)));
evalcond[6]=((((-1.0)*x13062*x13067))+(((-1.0)*x13062*x13066))+((x13067*x13072))+((x13066*x13072))+(((-1.0)*px))+((x13058*x13065))+(((-1.0)*sj1*x13079))+((r02*x13074))+x13079+(((0.01)*x13070)));
evalcond[7]=(((x13059*x13065))+(((-1.0)*x13062*x13069))+(((-1.0)*x13062*x13063))+(((-1.0)*py))+(((0.01)*x13068))+((r12*x13074))+x13080+((x13063*x13072))+((x13069*x13072))+(((-1.0)*sj1*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13083=(cj6*sj5);
IkReal x13084=(sj5*sj6);
IkReal x13085=((1.0)*cj5);
CheckValue<IkReal> x13086=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13086.valid){
continue;
}
CheckValue<IkReal> x13087 = IKatan2WithCheck(IkReal((((r11*x13083))+((r10*x13084))+(((-1.0)*r12*x13085)))),IkReal(((((-1.0)*r02*x13085))+((r00*x13084))+((r01*x13083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13087.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13086.value)))+(x13087.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13088=IKcos(j0);
IkReal x13089=IKsin(j0);
IkReal x13090=((1.0)*sj4);
IkReal x13091=(cj6*sj4);
IkReal x13092=((0.37429)*sj5);
IkReal x13093=(r10*sj6);
IkReal x13094=(r01*sj6);
IkReal x13095=((0.36442)*cj1);
IkReal x13096=(cj6*r01);
IkReal x13097=(r00*sj6);
IkReal x13098=(r12*sj5);
IkReal x13099=(cj6*r11);
IkReal x13100=(r02*sj5);
IkReal x13101=((1.0)*cj5);
IkReal x13102=((0.01)*cj5);
IkReal x13103=(cj4*cj6);
IkReal x13104=((0.37429)*cj5);
IkReal x13105=(cj4*cj5);
IkReal x13106=((1.0)*cj4);
IkReal x13107=(r11*sj6);
IkReal x13108=(cj5*x13099);
IkReal x13109=((0.069)*x13088);
IkReal x13110=((0.069)*x13089);
IkReal x13111=((1.0)*x13089);
IkReal x13112=((1.0)*x13088);
evalcond[0]=(((sj5*x13096))+((sj5*x13097))+(((-1.0)*r02*x13101))+(((-1.0)*cj1*x13112)));
evalcond[1]=((((-1.0)*r12*x13101))+((sj5*x13099))+((sj5*x13093))+(((-1.0)*cj1*x13111)));
evalcond[2]=((((-1.0)*x13106*x13107))+(((-1.0)*x13090*x13098))+(((-1.0)*cj5*x13090*x13093))+x13088+((r10*x13103))+(((-1.0)*x13090*x13108)));
evalcond[3]=(((x13099*x13105))+((x13093*x13105))+((cj4*x13098))+(((-1.0)*sj1*x13111))+((r10*x13091))+(((-1.0)*x13090*x13107)));
evalcond[4]=(((x13096*x13105))+((x13097*x13105))+(((-1.0)*x13090*x13094))+((r00*x13091))+((cj4*x13100))+(((-1.0)*sj1*x13112)));
evalcond[5]=(((r00*x13103))+(((-1.0)*x13094*x13106))+(((-1.0)*x13111))+(((-1.0)*cj5*x13090*x13097))+(((-1.0)*cj5*x13090*x13096))+(((-1.0)*x13090*x13100)));
evalcond[6]=(((x13096*x13102))+((x13088*x13095))+((x13097*x13102))+(((-1.0)*sj1*x13109))+(((-1.0)*px))+((r02*x13104))+x13109+(((0.01)*x13100))+(((-1.0)*x13092*x13097))+(((-1.0)*x13092*x13096)));
evalcond[7]=(((x13099*x13102))+((x13089*x13095))+(((0.01)*x13098))+((x13093*x13102))+(((-1.0)*py))+((r12*x13104))+x13110+(((-1.0)*x13092*x13093))+(((-1.0)*x13092*x13099))+(((-1.0)*sj1*x13110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x13113=(cj6*sj5);
IkReal x13114=(sj5*sj6);
IkReal x13115=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r02*x13115))+((r00*x13114))+((r01*x13113)))))+(IKabs(((((-1.0)*r12*x13115))+((r10*x13114))+((r11*x13113))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13116=((1.0)*cj6);
IkReal x13117=((1.0)*cj4);
CheckValue<IkReal> x13118=IKPowWithIntegerCheck(sj1,-1);
if(!x13118.valid){
continue;
}
CheckValue<IkReal> x13119=IKPowWithIntegerCheck(cj1,-1);
if(!x13119.valid){
continue;
}
if( IKabs(((x13118.value)*(((((-1.0)*r10*sj4*x13116))+((r11*sj4*sj6))+(((-1.0)*cj5*r10*sj6*x13117))+(((-1.0)*cj4*cj5*r11*x13116))+(((-1.0)*r12*sj5*x13117)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13119.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13118.value)*(((((-1.0)*r10*sj4*x13116))+((r11*sj4*sj6))+(((-1.0)*cj5*r10*sj6*x13117))+(((-1.0)*cj4*cj5*r11*x13116))+(((-1.0)*r12*sj5*x13117))))))+IKsqr(((x13119.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13118.value)*(((((-1.0)*r10*sj4*x13116))+((r11*sj4*sj6))+(((-1.0)*cj5*r10*sj6*x13117))+(((-1.0)*cj4*cj5*r11*x13116))+(((-1.0)*r12*sj5*x13117))))), ((x13119.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13120=IKsin(j0);
IkReal x13121=IKcos(j0);
IkReal x13122=((1.0)*sj4);
IkReal x13123=(cj6*sj4);
IkReal x13124=((0.37429)*sj5);
IkReal x13125=(r10*sj6);
IkReal x13126=(r01*sj6);
IkReal x13127=((0.36442)*cj1);
IkReal x13128=(cj6*r01);
IkReal x13129=(r00*sj6);
IkReal x13130=(cj6*r11);
IkReal x13131=(r02*sj5);
IkReal x13132=((0.01)*cj5);
IkReal x13133=(r12*sj5);
IkReal x13134=(cj4*cj6);
IkReal x13135=(cj5*r02);
IkReal x13136=(cj4*cj5);
IkReal x13137=((1.0)*cj4);
IkReal x13138=(r11*sj6);
IkReal x13139=(cj5*r12);
IkReal x13140=(cj5*x13130);
IkReal x13141=(sj1*x13120);
IkReal x13142=((1.0)*x13121);
IkReal x13143=((0.069)*x13121);
evalcond[0]=(((sj5*x13128))+((sj5*x13129))+(((-1.0)*cj1*x13142))+(((-1.0)*x13135)));
evalcond[1]=(((sj5*x13130))+((sj5*x13125))+(((-1.0)*cj1*x13120))+(((-1.0)*x13139)));
evalcond[2]=(((r10*x13123))+((x13130*x13136))+(((-1.0)*x13122*x13138))+((x13125*x13136))+((cj4*x13133))+x13141);
evalcond[3]=(((x13129*x13136))+((x13128*x13136))+((r00*x13123))+(((-1.0)*x13122*x13126))+((cj4*x13131))+((sj1*x13121)));
evalcond[4]=((((-1.0)*cj5*x13122*x13128))+(((-1.0)*cj5*x13122*x13129))+(((-1.0)*x13122*x13131))+((r00*x13134))+x13120+(((-1.0)*x13126*x13137)));
evalcond[5]=(((r10*x13134))+(((-1.0)*cj5*x13122*x13125))+(((-1.0)*x13122*x13133))+(((-1.0)*x13137*x13138))+(((-1.0)*x13142))+(((-1.0)*x13122*x13140)));
evalcond[6]=((((0.01)*x13131))+((x13129*x13132))+(((-1.0)*x13124*x13128))+(((-1.0)*x13124*x13129))+((x13128*x13132))+(((0.37429)*x13135))+((x13121*x13127))+(((-1.0)*px))+x13143+((sj1*x13143)));
evalcond[7]=((((0.01)*x13133))+(((-1.0)*x13124*x13125))+((x13130*x13132))+(((0.37429)*x13139))+(((-1.0)*x13124*x13130))+(((0.069)*x13120))+(((-1.0)*py))+((x13120*x13127))+(((0.069)*x13141))+((x13125*x13132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13144=(cj6*r01);
IkReal x13145=(cj5*sj4);
IkReal x13146=(r00*sj6);
CheckValue<IkReal> x13147=IKPowWithIntegerCheck(cj1,-1);
if(!x13147.valid){
continue;
}
if( IKabs((((x13144*x13145))+(((-1.0)*cj4*cj6*r00))+((x13145*x13146))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13147.value)*((((sj5*x13146))+((sj5*x13144))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x13144*x13145))+(((-1.0)*cj4*cj6*r00))+((x13145*x13146))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x13147.value)*((((sj5*x13146))+((sj5*x13144))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x13144*x13145))+(((-1.0)*cj4*cj6*r00))+((x13145*x13146))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x13147.value)*((((sj5*x13146))+((sj5*x13144))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13148=IKsin(j0);
IkReal x13149=IKcos(j0);
IkReal x13150=((1.0)*sj4);
IkReal x13151=(cj6*sj4);
IkReal x13152=((0.37429)*sj5);
IkReal x13153=(r10*sj6);
IkReal x13154=(r01*sj6);
IkReal x13155=((0.36442)*cj1);
IkReal x13156=(cj6*r01);
IkReal x13157=(r00*sj6);
IkReal x13158=(cj6*r11);
IkReal x13159=(r02*sj5);
IkReal x13160=((0.01)*cj5);
IkReal x13161=(r12*sj5);
IkReal x13162=(cj4*cj6);
IkReal x13163=(cj5*r02);
IkReal x13164=(cj4*cj5);
IkReal x13165=((1.0)*cj4);
IkReal x13166=(r11*sj6);
IkReal x13167=(cj5*r12);
IkReal x13168=(cj5*x13158);
IkReal x13169=(sj1*x13148);
IkReal x13170=((1.0)*x13149);
IkReal x13171=((0.069)*x13149);
evalcond[0]=((((-1.0)*cj1*x13170))+((sj5*x13157))+((sj5*x13156))+(((-1.0)*x13163)));
evalcond[1]=((((-1.0)*cj1*x13148))+((sj5*x13158))+((sj5*x13153))+(((-1.0)*x13167)));
evalcond[2]=(((x13158*x13164))+(((-1.0)*x13150*x13166))+((x13153*x13164))+((r10*x13151))+((cj4*x13161))+x13169);
evalcond[3]=(((cj4*x13159))+((x13157*x13164))+((x13156*x13164))+((r00*x13151))+((sj1*x13149))+(((-1.0)*x13150*x13154)));
evalcond[4]=((((-1.0)*x13154*x13165))+((r00*x13162))+(((-1.0)*cj5*x13150*x13157))+(((-1.0)*cj5*x13150*x13156))+x13148+(((-1.0)*x13150*x13159)));
evalcond[5]=((((-1.0)*x13150*x13168))+(((-1.0)*x13150*x13161))+(((-1.0)*cj5*x13150*x13153))+(((-1.0)*x13165*x13166))+(((-1.0)*x13170))+((r10*x13162)));
evalcond[6]=(((x13149*x13155))+(((0.37429)*x13163))+((x13157*x13160))+(((-1.0)*x13152*x13157))+(((-1.0)*x13152*x13156))+((x13156*x13160))+(((-1.0)*px))+(((0.01)*x13159))+x13171+((sj1*x13171)));
evalcond[7]=(((x13158*x13160))+(((0.37429)*x13167))+((x13153*x13160))+(((-1.0)*x13152*x13153))+(((-1.0)*x13152*x13158))+(((-1.0)*py))+(((0.069)*x13148))+(((0.01)*x13161))+(((0.069)*x13169))+((x13148*x13155)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13172=(cj6*sj5);
IkReal x13173=(sj5*sj6);
IkReal x13174=((1.0)*cj5);
CheckValue<IkReal> x13175=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13175.valid){
continue;
}
CheckValue<IkReal> x13176 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x13174))+((r11*x13172))+((r10*x13173)))),IkReal((((r01*x13172))+((r00*x13173))+(((-1.0)*r02*x13174)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13176.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13175.value)))+(x13176.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13177=IKsin(j0);
IkReal x13178=IKcos(j0);
IkReal x13179=((1.0)*sj4);
IkReal x13180=(cj6*sj4);
IkReal x13181=((0.37429)*sj5);
IkReal x13182=(r10*sj6);
IkReal x13183=(r01*sj6);
IkReal x13184=((0.36442)*cj1);
IkReal x13185=(cj6*r01);
IkReal x13186=(r00*sj6);
IkReal x13187=(cj6*r11);
IkReal x13188=(r02*sj5);
IkReal x13189=((0.01)*cj5);
IkReal x13190=(r12*sj5);
IkReal x13191=(cj4*cj6);
IkReal x13192=(cj5*r02);
IkReal x13193=(cj4*cj5);
IkReal x13194=((1.0)*cj4);
IkReal x13195=(r11*sj6);
IkReal x13196=(cj5*r12);
IkReal x13197=(cj5*x13187);
IkReal x13198=(sj1*x13177);
IkReal x13199=((1.0)*x13178);
IkReal x13200=((0.069)*x13178);
evalcond[0]=((((-1.0)*x13192))+(((-1.0)*cj1*x13199))+((sj5*x13186))+((sj5*x13185)));
evalcond[1]=((((-1.0)*x13196))+(((-1.0)*cj1*x13177))+((sj5*x13187))+((sj5*x13182)));
evalcond[2]=((((-1.0)*x13179*x13195))+((x13182*x13193))+((r10*x13180))+((cj4*x13190))+((x13187*x13193))+x13198);
evalcond[3]=((((-1.0)*x13179*x13183))+((x13186*x13193))+((cj4*x13188))+((x13185*x13193))+((r00*x13180))+((sj1*x13178)));
evalcond[4]=((((-1.0)*x13179*x13188))+(((-1.0)*x13183*x13194))+(((-1.0)*cj5*x13179*x13186))+(((-1.0)*cj5*x13179*x13185))+((r00*x13191))+x13177);
evalcond[5]=((((-1.0)*x13179*x13190))+(((-1.0)*x13179*x13197))+(((-1.0)*x13199))+(((-1.0)*x13194*x13195))+((r10*x13191))+(((-1.0)*cj5*x13179*x13182)));
evalcond[6]=(((x13186*x13189))+(((0.01)*x13188))+(((-1.0)*px))+((x13185*x13189))+((x13178*x13184))+((sj1*x13200))+(((0.37429)*x13192))+x13200+(((-1.0)*x13181*x13186))+(((-1.0)*x13181*x13185)));
evalcond[7]=(((x13182*x13189))+(((0.01)*x13190))+(((0.069)*x13198))+(((-1.0)*py))+(((0.37429)*x13196))+((x13187*x13189))+(((0.069)*x13177))+(((-1.0)*x13181*x13187))+(((-1.0)*x13181*x13182))+((x13177*x13184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x13208=IKPowWithIntegerCheck(cj1,-1);
if(!x13208.valid){
continue;
}
IkReal x13201=x13208.value;
IkReal x13202=(cj1*r10);
IkReal x13203=(cj1*cj4);
IkReal x13204=(sj2*sj5);
IkReal x13205=(cj6*r01);
IkReal x13206=(r00*sj6);
IkReal x13207=((1.0)*cj5*r02);
CheckValue<IkReal> x13209=IKPowWithIntegerCheck(cj2,-1);
if(!x13209.valid){
continue;
}
CheckValue<IkReal> x13210=IKPowWithIntegerCheck(sj1,-1);
if(!x13210.valid){
continue;
}
if( IKabs((x13201*(x13209.value)*(x13210.value)*(((((-1.0)*sj2*x13207))+((x13204*x13205))+((x13204*x13206))+((cj5*cj6*r11*x13203))+((cj6*sj4*x13202))+((r12*sj5*x13203))+(((-1.0)*cj1*r11*sj4*sj6))+((cj4*cj5*sj6*x13202)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13201*((((sj5*x13205))+((sj5*x13206))+(((-1.0)*x13207)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13201*(x13209.value)*(x13210.value)*(((((-1.0)*sj2*x13207))+((x13204*x13205))+((x13204*x13206))+((cj5*cj6*r11*x13203))+((cj6*sj4*x13202))+((r12*sj5*x13203))+(((-1.0)*cj1*r11*sj4*sj6))+((cj4*cj5*sj6*x13202))))))+IKsqr((x13201*((((sj5*x13205))+((sj5*x13206))+(((-1.0)*x13207))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x13201*(x13209.value)*(x13210.value)*(((((-1.0)*sj2*x13207))+((x13204*x13205))+((x13204*x13206))+((cj5*cj6*r11*x13203))+((cj6*sj4*x13202))+((r12*sj5*x13203))+(((-1.0)*cj1*r11*sj4*sj6))+((cj4*cj5*sj6*x13202))))), (x13201*((((sj5*x13205))+((sj5*x13206))+(((-1.0)*x13207))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13211=IKcos(j0);
IkReal x13212=IKsin(j0);
IkReal x13213=((1.0)*sj4);
IkReal x13214=(cj6*sj4);
IkReal x13215=((0.37429)*sj5);
IkReal x13216=(r10*sj6);
IkReal x13217=((0.36442)*cj1);
IkReal x13218=(cj6*r11);
IkReal x13219=(r01*sj6);
IkReal x13220=(r00*sj6);
IkReal x13221=((0.069)*sj2);
IkReal x13222=(cj6*r01);
IkReal x13223=(r12*sj5);
IkReal x13224=(r02*sj5);
IkReal x13225=((1.0)*sj1);
IkReal x13226=((0.01)*cj5);
IkReal x13227=((1.0)*cj1);
IkReal x13228=(cj4*cj6);
IkReal x13229=(cj5*r02);
IkReal x13230=(cj4*cj5);
IkReal x13231=((1.0)*cj4);
IkReal x13232=(r11*sj6);
IkReal x13233=(cj5*r12);
IkReal x13234=(cj5*x13218);
IkReal x13235=(cj2*x13211);
IkReal x13236=((0.069)*x13212);
IkReal x13237=(sj2*x13211);
IkReal x13238=((1.0)*x13212);
evalcond[0]=(((sj5*x13222))+((sj5*x13220))+(((-1.0)*x13229))+(((-1.0)*x13211*x13227)));
evalcond[1]=((((-1.0)*x13212*x13227))+((sj5*x13218))+((sj5*x13216))+(((-1.0)*x13233)));
evalcond[2]=((((-1.0)*x13213*x13232))+((r10*x13214))+((x13216*x13230))+((cj4*x13223))+x13237+((x13218*x13230))+(((-1.0)*cj2*x13212*x13225)));
evalcond[3]=(((r00*x13214))+(((-1.0)*x13225*x13235))+(((-1.0)*x13213*x13219))+((x13220*x13230))+((x13222*x13230))+((cj4*x13224))+(((-1.0)*sj2*x13238)));
evalcond[4]=(((sj1*sj2*x13212))+(((-1.0)*x13213*x13234))+((r10*x13228))+(((-1.0)*x13213*x13223))+(((-1.0)*x13231*x13232))+x13235+(((-1.0)*cj5*x13213*x13216)));
evalcond[5]=((((-1.0)*x13213*x13224))+(((-1.0)*x13219*x13231))+((sj1*x13237))+((r00*x13228))+(((-1.0)*cj2*x13238))+(((-1.0)*cj5*x13213*x13222))+(((-1.0)*cj5*x13213*x13220)));
evalcond[6]=((((0.37429)*x13229))+(((-1.0)*x13212*x13221))+((x13211*x13217))+(((-1.0)*x13215*x13222))+(((-1.0)*x13215*x13220))+(((0.01)*x13224))+((x13220*x13226))+(((-1.0)*px))+((x13222*x13226))+(((-0.069)*sj1*x13235))+(((0.069)*x13211)));
evalcond[7]=(((x13218*x13226))+(((0.37429)*x13233))+(((0.01)*x13223))+(((-1.0)*cj2*sj1*x13236))+(((-1.0)*x13215*x13218))+(((-1.0)*x13215*x13216))+(((-1.0)*py))+x13236+((x13212*x13217))+((x13211*x13221))+((x13216*x13226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x13246=IKPowWithIntegerCheck(cj1,-1);
if(!x13246.valid){
continue;
}
IkReal x13239=x13246.value;
IkReal x13240=(cj1*cj4);
IkReal x13241=(cj2*sj1);
IkReal x13242=(cj5*r02);
IkReal x13243=(r00*sj6);
IkReal x13244=(cj1*sj4);
IkReal x13245=(cj6*r01*sj5);
CheckValue<IkReal> x13247=IKPowWithIntegerCheck(sj2,-1);
if(!x13247.valid){
continue;
}
if( IKabs((x13239*(x13247.value)*((((r02*sj5*x13240))+(((-1.0)*x13241*x13245))+(((-1.0)*r01*sj6*x13244))+((x13241*x13242))+(((-1.0)*sj5*x13241*x13243))+((cj6*r00*x13244))+((cj5*x13240*x13243))+((cj5*cj6*r01*x13240)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x13239*(((((-1.0)*x13242))+x13245+((sj5*x13243)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x13239*(x13247.value)*((((r02*sj5*x13240))+(((-1.0)*x13241*x13245))+(((-1.0)*r01*sj6*x13244))+((x13241*x13242))+(((-1.0)*sj5*x13241*x13243))+((cj6*r00*x13244))+((cj5*x13240*x13243))+((cj5*cj6*r01*x13240))))))+IKsqr((x13239*(((((-1.0)*x13242))+x13245+((sj5*x13243))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x13239*(x13247.value)*((((r02*sj5*x13240))+(((-1.0)*x13241*x13245))+(((-1.0)*r01*sj6*x13244))+((x13241*x13242))+(((-1.0)*sj5*x13241*x13243))+((cj6*r00*x13244))+((cj5*x13240*x13243))+((cj5*cj6*r01*x13240))))), (x13239*(((((-1.0)*x13242))+x13245+((sj5*x13243))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13248=IKcos(j0);
IkReal x13249=IKsin(j0);
IkReal x13250=((1.0)*sj4);
IkReal x13251=(cj6*sj4);
IkReal x13252=((0.37429)*sj5);
IkReal x13253=(r10*sj6);
IkReal x13254=((0.36442)*cj1);
IkReal x13255=(cj6*r11);
IkReal x13256=(r01*sj6);
IkReal x13257=(r00*sj6);
IkReal x13258=((0.069)*sj2);
IkReal x13259=(cj6*r01);
IkReal x13260=(r12*sj5);
IkReal x13261=(r02*sj5);
IkReal x13262=((1.0)*sj1);
IkReal x13263=((0.01)*cj5);
IkReal x13264=((1.0)*cj1);
IkReal x13265=(cj4*cj6);
IkReal x13266=(cj5*r02);
IkReal x13267=(cj4*cj5);
IkReal x13268=((1.0)*cj4);
IkReal x13269=(r11*sj6);
IkReal x13270=(cj5*r12);
IkReal x13271=(cj5*x13255);
IkReal x13272=(cj2*x13248);
IkReal x13273=((0.069)*x13249);
IkReal x13274=(sj2*x13248);
IkReal x13275=((1.0)*x13249);
evalcond[0]=((((-1.0)*x13266))+(((-1.0)*x13248*x13264))+((sj5*x13257))+((sj5*x13259)));
evalcond[1]=((((-1.0)*x13270))+(((-1.0)*x13249*x13264))+((sj5*x13255))+((sj5*x13253)));
evalcond[2]=(((x13255*x13267))+(((-1.0)*cj2*x13249*x13262))+(((-1.0)*x13250*x13269))+((r10*x13251))+x13274+((x13253*x13267))+((cj4*x13260)));
evalcond[3]=(((x13259*x13267))+(((-1.0)*sj2*x13275))+(((-1.0)*x13262*x13272))+((r00*x13251))+((x13257*x13267))+(((-1.0)*x13250*x13256))+((cj4*x13261)));
evalcond[4]=((((-1.0)*x13250*x13271))+(((-1.0)*x13250*x13260))+((sj1*sj2*x13249))+((r10*x13265))+(((-1.0)*cj5*x13250*x13253))+x13272+(((-1.0)*x13268*x13269)));
evalcond[5]=((((-1.0)*x13256*x13268))+(((-1.0)*x13250*x13261))+((r00*x13265))+((sj1*x13274))+(((-1.0)*cj2*x13275))+(((-1.0)*cj5*x13250*x13257))+(((-1.0)*cj5*x13250*x13259)));
evalcond[6]=(((x13259*x13263))+((x13248*x13254))+(((0.01)*x13261))+(((-1.0)*px))+(((0.37429)*x13266))+((x13257*x13263))+(((-1.0)*x13249*x13258))+(((0.069)*x13248))+(((-1.0)*x13252*x13257))+(((-1.0)*x13252*x13259))+(((-0.069)*sj1*x13272)));
evalcond[7]=(((x13255*x13263))+((x13249*x13254))+((x13248*x13258))+(((-1.0)*cj2*sj1*x13273))+(((0.01)*x13260))+(((0.37429)*x13270))+(((-1.0)*py))+x13273+((x13253*x13263))+(((-1.0)*x13252*x13255))+(((-1.0)*x13252*x13253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13276=(cj6*sj5);
IkReal x13277=(sj5*sj6);
IkReal x13278=((1.0)*cj5);
CheckValue<IkReal> x13279 = IKatan2WithCheck(IkReal((((r11*x13276))+((r10*x13277))+(((-1.0)*r12*x13278)))),IkReal((((r01*x13276))+((r00*x13277))+(((-1.0)*r02*x13278)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13279.valid){
continue;
}
CheckValue<IkReal> x13280=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13280.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x13279.value)+(((1.5707963267949)*(x13280.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13281=IKcos(j0);
IkReal x13282=IKsin(j0);
IkReal x13283=((1.0)*sj4);
IkReal x13284=(cj6*sj4);
IkReal x13285=((0.37429)*sj5);
IkReal x13286=(r10*sj6);
IkReal x13287=((0.36442)*cj1);
IkReal x13288=(cj6*r11);
IkReal x13289=(r01*sj6);
IkReal x13290=(r00*sj6);
IkReal x13291=((0.069)*sj2);
IkReal x13292=(cj6*r01);
IkReal x13293=(r12*sj5);
IkReal x13294=(r02*sj5);
IkReal x13295=((1.0)*sj1);
IkReal x13296=((0.01)*cj5);
IkReal x13297=((1.0)*cj1);
IkReal x13298=(cj4*cj6);
IkReal x13299=(cj5*r02);
IkReal x13300=(cj4*cj5);
IkReal x13301=((1.0)*cj4);
IkReal x13302=(r11*sj6);
IkReal x13303=(cj5*r12);
IkReal x13304=(cj5*x13288);
IkReal x13305=(cj2*x13281);
IkReal x13306=((0.069)*x13282);
IkReal x13307=(sj2*x13281);
IkReal x13308=((1.0)*x13282);
evalcond[0]=(((sj5*x13292))+((sj5*x13290))+(((-1.0)*x13299))+(((-1.0)*x13281*x13297)));
evalcond[1]=(((sj5*x13288))+((sj5*x13286))+(((-1.0)*x13282*x13297))+(((-1.0)*x13303)));
evalcond[2]=((((-1.0)*cj2*x13282*x13295))+((x13288*x13300))+(((-1.0)*x13283*x13302))+((cj4*x13293))+((r10*x13284))+((x13286*x13300))+x13307);
evalcond[3]=(((x13290*x13300))+(((-1.0)*x13295*x13305))+((cj4*x13294))+((x13292*x13300))+(((-1.0)*x13283*x13289))+((r00*x13284))+(((-1.0)*sj2*x13308)));
evalcond[4]=((((-1.0)*x13283*x13304))+((r10*x13298))+(((-1.0)*cj5*x13283*x13286))+(((-1.0)*x13283*x13293))+x13305+(((-1.0)*x13301*x13302))+((sj1*sj2*x13282)));
evalcond[5]=(((sj1*x13307))+(((-1.0)*x13289*x13301))+(((-1.0)*cj2*x13308))+(((-1.0)*cj5*x13283*x13290))+(((-1.0)*cj5*x13283*x13292))+(((-1.0)*x13283*x13294))+((r00*x13298)));
evalcond[6]=((((-1.0)*x13285*x13292))+(((-1.0)*x13285*x13290))+(((-0.069)*sj1*x13305))+(((0.37429)*x13299))+((x13281*x13287))+(((-1.0)*px))+(((0.069)*x13281))+((x13292*x13296))+(((0.01)*x13294))+(((-1.0)*x13282*x13291))+((x13290*x13296)));
evalcond[7]=((((0.37429)*x13303))+(((-1.0)*cj2*sj1*x13306))+(((-1.0)*py))+(((0.01)*x13293))+((x13281*x13291))+((x13282*x13287))+((x13286*x13296))+((x13288*x13296))+x13306+(((-1.0)*x13285*x13288))+(((-1.0)*x13285*x13286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13309=(cj6*sj5);
IkReal x13310=(sj5*sj6);
IkReal x13311=((1.0)*cj5);
CheckValue<IkReal> x13312=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x13312.valid){
continue;
}
CheckValue<IkReal> x13313 = IKatan2WithCheck(IkReal((((r10*x13310))+(((-1.0)*r12*x13311))+((r11*x13309)))),IkReal((((r00*x13310))+(((-1.0)*r02*x13311))+((r01*x13309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13313.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13312.value)))+(x13313.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x13314=IKcos(j0);
IkReal x13315=IKsin(j0);
IkReal x13316=((0.01)*cj5);
IkReal x13317=(cj6*r11);
IkReal x13318=(r10*sj6);
IkReal x13319=((0.37429)*sj5);
IkReal x13320=(cj5*r12);
IkReal x13321=((1.0)*cj1);
IkReal x13322=((0.36442)*cj1);
IkReal x13323=(r00*sj6);
IkReal x13324=(cj6*r01);
IkReal x13325=(cj5*r02);
IkReal x13326=(cj2*sj1);
IkReal x13327=((0.01)*sj5);
IkReal x13328=((0.069)*x13315);
IkReal x13329=((0.069)*x13314);
evalcond[0]=((((-1.0)*x13314*x13321))+(((-1.0)*x13325))+((sj5*x13324))+((sj5*x13323)));
evalcond[1]=((((-1.0)*x13315*x13321))+(((-1.0)*x13320))+((sj5*x13317))+((sj5*x13318)));
evalcond[2]=(((x13314*x13322))+((r02*x13327))+(((-1.0)*x13319*x13324))+(((-1.0)*x13319*x13323))+((x13316*x13324))+((x13316*x13323))+(((-1.0)*px))+(((0.37429)*x13325))+(((-1.0)*x13326*x13329))+(((-1.0)*sj2*x13328))+x13329);
evalcond[3]=(((r12*x13327))+((x13315*x13322))+(((-1.0)*py))+((sj2*x13329))+(((0.37429)*x13320))+(((-1.0)*x13326*x13328))+(((-1.0)*x13317*x13319))+(((-1.0)*x13318*x13319))+x13328+((x13316*x13318))+((x13316*x13317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13330=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13330;
j4eval[1]=IKsign(x13330);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13331=((1.0)*sj5);
IkReal x13332=(((cj5*r12))+(((-1.0)*r10*sj6*x13331))+(((-1.0)*cj6*r11*x13331)));
j4eval[0]=x13332;
j4eval[1]=IKsign(x13332);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x13333=cj5*cj5;
IkReal x13334=cj6*cj6;
IkReal x13335=r22*r22;
IkReal x13336=r21*r21;
IkReal x13337=r20*r20;
IkReal x13338=((1.0)*cj5);
IkReal x13339=(cj6*r21);
IkReal x13340=(r20*sj6);
IkReal x13341=(cj1*cj2);
IkReal x13342=(cj1*sj2);
IkReal x13343=(r22*sj5);
IkReal x13344=(cj6*r20);
IkReal x13345=((2.0)*cj5);
IkReal x13346=(sj6*x13341);
IkReal x13347=((1.0)*x13336);
IkReal x13348=(x13334*x13337);
IkReal x13349=((((-1.0)*x13333*x13334*x13347))+(((-2.0)*x13333*x13339*x13340))+(((-1.0)*x13335))+(((-1.0)*x13347))+(((-1.0)*x13333*x13337))+(((-1.0)*x13340*x13343*x13345))+((x13333*x13335))+((x13334*x13336))+(((-1.0)*x13348))+(((2.0)*x13339*x13340))+((x13333*x13348))+(((-1.0)*x13339*x13343*x13345)));
j4eval[0]=x13349;
j4eval[1]=IKsign(x13349);
j4eval[2]=((IKabs(((((-1.0)*x13338*x13340*x13342))+((r21*x13346))+(((-1.0)*x13338*x13339*x13342))+(((-1.0)*x13341*x13344))+(((-1.0)*x13342*x13343)))))+(IKabs(((((-1.0)*x13338*x13340*x13341))+(((-1.0)*x13338*x13339*x13341))+((x13342*x13344))+(((-1.0)*r21*sj6*x13342))+(((-1.0)*x13341*x13343))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13350=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13350;
j4eval[1]=IKsign(x13350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13351=((1.0)*sj5);
IkReal x13352=(((cj5*r12))+(((-1.0)*r10*sj6*x13351))+(((-1.0)*cj6*r11*x13351)));
j4eval[0]=x13352;
j4eval[1]=IKsign(x13352);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13353=cj6*cj6;
IkReal x13354=cj5*cj5;
IkReal x13355=(cj5*sj5);
IkReal x13356=(cj6*r21);
IkReal x13357=((1.0)*r11);
IkReal x13358=(r10*r20);
IkReal x13359=(r10*sj6);
IkReal x13360=(r12*r22);
IkReal x13361=(r21*x13353);
IkReal x13362=(cj6*r20*sj6);
IkReal x13363=(r11*x13354);
IkReal x13364=((1.0)*x13354);
IkReal x13365=((((-1.0)*x13356*x13359))+(((-1.0)*x13360*x13364))+((x13362*x13363))+((r11*r21))+((x13353*x13358))+((r12*r20*sj6*x13355))+((x13361*x13363))+((cj6*r11*r22*x13355))+(((-1.0)*x13357*x13361))+(((-1.0)*x13357*x13362))+((x13354*x13356*x13359))+((r22*x13355*x13359))+((r12*x13355*x13356))+(((-1.0)*x13353*x13358*x13364))+x13360+((x13354*x13358)));
j4eval[0]=x13365;
j4eval[1]=IKsign(x13365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13366=cj6*cj6;
IkReal x13367=cj5*cj5;
IkReal x13368=((1.0)*r11);
IkReal x13369=(cj6*r20);
IkReal x13370=(cj0*cj2);
IkReal x13371=(cj5*r20);
IkReal x13372=(r12*r22);
IkReal x13373=(cj6*r21);
IkReal x13374=(sj0*sj2);
IkReal x13375=(r22*sj5);
IkReal x13376=(r12*sj5);
IkReal x13377=(r10*sj6);
IkReal x13378=(r21*x13366);
IkReal x13379=(sj6*x13374);
IkReal x13380=((1.0)*x13367);
IkReal x13381=(r10*x13367);
IkReal x13382=(r11*x13367);
IkReal x13383=(r10*r20*x13366);
CheckValue<IkReal> x13384 = IKatan2WithCheck(IkReal((((x13371*x13379))+((x13370*x13375))+((cj5*x13370*x13373))+((cj5*x13373*x13374))+((sj6*x13370*x13371))+((x13374*x13375)))),IkReal(((((-1.0)*x13369*x13374))+(((-1.0)*x13369*x13370))+((r21*sj6*x13370))+((r21*x13379)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13384.valid){
continue;
}
CheckValue<IkReal> x13385=IKPowWithIntegerCheck(IKsign((((sj6*x13369*x13382))+(((-1.0)*x13373*x13377))+((cj5*x13373*x13376))+((x13367*x13373*x13377))+((r20*x13381))+((r11*r21))+(((-1.0)*x13368*x13378))+(((-1.0)*sj6*x13368*x13369))+((cj5*x13375*x13377))+(((-1.0)*x13380*x13383))+((x13378*x13382))+((cj5*cj6*r11*x13375))+x13372+x13383+(((-1.0)*x13372*x13380))+((sj6*x13371*x13376)))),-1);
if(!x13385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13384.value)+(((1.5707963267949)*(x13385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13386=IKcos(j4);
IkReal x13387=IKsin(j4);
IkReal x13388=(cj0*sj2);
IkReal x13389=(cj0*cj2);
IkReal x13390=(cj5*sj6);
IkReal x13391=(cj5*r01);
IkReal x13392=(cj5*r21);
IkReal x13393=((1.0)*sj0);
IkReal x13394=(cj2*x13393);
IkReal x13395=(cj5*cj6*r11);
IkReal x13396=((1.0)*x13387);
IkReal x13397=(cj6*x13386);
IkReal x13398=(sj5*x13386);
IkReal x13399=(cj6*x13387);
IkReal x13400=(sj5*x13396);
IkReal x13401=((1.0)*sj6*x13386);
evalcond[0]=(((r20*x13399))+((x13392*x13397))+((r22*x13398))+(((-1.0)*r21*sj6*x13396))+((r20*x13386*x13390)));
evalcond[1]=(((r20*x13397))+(((-1.0)*r20*x13390*x13396))+(((-1.0)*cj6*x13392*x13396))+(((-1.0)*r21*x13401))+(((-1.0)*r22*x13400)));
evalcond[2]=(((r10*x13399))+((r12*x13398))+((x13386*x13395))+(((-1.0)*r11*sj6*x13396))+(((-1.0)*x13394))+x13388+((r10*x13386*x13390)));
evalcond[3]=((((-1.0)*r01*sj6*x13396))+(((-1.0)*x13389))+((r00*x13386*x13390))+((x13391*x13397))+((r00*x13399))+(((-1.0)*sj2*x13393))+((r02*x13398)));
evalcond[4]=(((r10*x13397))+(((-1.0)*x13395*x13396))+((sj0*sj2))+(((-1.0)*r11*x13401))+(((-1.0)*r12*x13400))+(((-1.0)*r10*x13390*x13396))+x13389);
evalcond[5]=((((-1.0)*r02*x13400))+(((-1.0)*cj6*x13391*x13396))+((r00*x13397))+(((-1.0)*r00*x13390*x13396))+(((-1.0)*r01*x13401))+(((-1.0)*x13394))+x13388);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13402=((1.0)*r21);
IkReal x13403=(sj0*sj2);
IkReal x13404=(cj0*cj2);
IkReal x13405=((1.0)*sj5);
IkReal x13406=(cj6*x13404);
IkReal x13407=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x13408=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x13405))+(((-1.0)*cj6*r11*x13405)))),-1);
if(!x13408.valid){
continue;
}
CheckValue<IkReal> x13409 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x13403*x13405))+(((-1.0)*cj5*cj6*x13402*x13403))+(((-1.0)*r22*x13404*x13405))+(((-1.0)*x13403*x13407))+(((-1.0)*cj5*x13402*x13406))+(((-1.0)*x13404*x13407)))),IkReal(((((-1.0)*sj6*x13402*x13404))+(((-1.0)*sj6*x13402*x13403))+((cj6*r20*x13403))+((r20*x13406)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13408.value)))+(x13409.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13410=IKcos(j4);
IkReal x13411=IKsin(j4);
IkReal x13412=(cj0*sj2);
IkReal x13413=(cj0*cj2);
IkReal x13414=(cj5*sj6);
IkReal x13415=(cj5*r01);
IkReal x13416=(cj5*r21);
IkReal x13417=((1.0)*sj0);
IkReal x13418=(cj2*x13417);
IkReal x13419=(cj5*cj6*r11);
IkReal x13420=((1.0)*x13411);
IkReal x13421=(cj6*x13410);
IkReal x13422=(sj5*x13410);
IkReal x13423=(cj6*x13411);
IkReal x13424=(sj5*x13420);
IkReal x13425=((1.0)*sj6*x13410);
evalcond[0]=((((-1.0)*r21*sj6*x13420))+((r22*x13422))+((r20*x13410*x13414))+((x13416*x13421))+((r20*x13423)));
evalcond[1]=((((-1.0)*r22*x13424))+(((-1.0)*cj6*x13416*x13420))+(((-1.0)*r21*x13425))+(((-1.0)*r20*x13414*x13420))+((r20*x13421)));
evalcond[2]=(x13412+((r10*x13410*x13414))+((x13410*x13419))+((r12*x13422))+(((-1.0)*r11*sj6*x13420))+((r10*x13423))+(((-1.0)*x13418)));
evalcond[3]=((((-1.0)*sj2*x13417))+((x13415*x13421))+(((-1.0)*x13413))+((r00*x13410*x13414))+((r02*x13422))+(((-1.0)*r01*sj6*x13420))+((r00*x13423)));
evalcond[4]=(x13413+(((-1.0)*r10*x13414*x13420))+((sj0*sj2))+(((-1.0)*r12*x13424))+(((-1.0)*r11*x13425))+(((-1.0)*x13419*x13420))+((r10*x13421)));
evalcond[5]=(x13412+(((-1.0)*r00*x13414*x13420))+(((-1.0)*r01*x13425))+(((-1.0)*r02*x13424))+(((-1.0)*cj6*x13415*x13420))+((r00*x13421))+(((-1.0)*x13418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13426=(r22*sj5);
IkReal x13427=(cj6*r20);
IkReal x13428=(cj0*sj2);
IkReal x13429=(r21*sj6);
IkReal x13430=((1.0)*cj2*sj0);
IkReal x13431=(cj5*cj6*r21);
IkReal x13432=(cj5*r20*sj6);
CheckValue<IkReal> x13433 = IKatan2WithCheck(IkReal(((((-1.0)*x13426*x13430))+((x13428*x13431))+((x13428*x13432))+((x13426*x13428))+(((-1.0)*x13430*x13432))+(((-1.0)*x13430*x13431)))),IkReal((((x13428*x13429))+(((-1.0)*x13427*x13428))+(((-1.0)*x13429*x13430))+((cj2*sj0*x13427)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13433.valid){
continue;
}
CheckValue<IkReal> x13434=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13433.value)+(((1.5707963267949)*(x13434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13435=IKcos(j4);
IkReal x13436=IKsin(j4);
IkReal x13437=(cj0*sj2);
IkReal x13438=(cj0*cj2);
IkReal x13439=(cj5*sj6);
IkReal x13440=(cj5*r01);
IkReal x13441=(cj5*r21);
IkReal x13442=((1.0)*sj0);
IkReal x13443=(cj2*x13442);
IkReal x13444=(cj5*cj6*r11);
IkReal x13445=((1.0)*x13436);
IkReal x13446=(cj6*x13435);
IkReal x13447=(sj5*x13435);
IkReal x13448=(cj6*x13436);
IkReal x13449=(sj5*x13445);
IkReal x13450=((1.0)*sj6*x13435);
evalcond[0]=(((r22*x13447))+(((-1.0)*r21*sj6*x13445))+((r20*x13435*x13439))+((r20*x13448))+((x13441*x13446)));
evalcond[1]=((((-1.0)*r20*x13439*x13445))+(((-1.0)*r21*x13450))+(((-1.0)*r22*x13449))+((r20*x13446))+(((-1.0)*cj6*x13441*x13445)));
evalcond[2]=(x13437+((x13435*x13444))+(((-1.0)*r11*sj6*x13445))+(((-1.0)*x13443))+((r12*x13447))+((r10*x13448))+((r10*x13435*x13439)));
evalcond[3]=(((r02*x13447))+(((-1.0)*r01*sj6*x13445))+(((-1.0)*x13438))+((r00*x13448))+((r00*x13435*x13439))+((x13440*x13446))+(((-1.0)*sj2*x13442)));
evalcond[4]=(x13438+(((-1.0)*r12*x13449))+((sj0*sj2))+(((-1.0)*r10*x13439*x13445))+((r10*x13446))+(((-1.0)*x13444*x13445))+(((-1.0)*r11*x13450)));
evalcond[5]=(x13437+(((-1.0)*x13443))+(((-1.0)*r01*x13450))+(((-1.0)*r02*x13449))+((r00*x13446))+(((-1.0)*r00*x13439*x13445))+(((-1.0)*cj6*x13440*x13445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13451=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13451;
j4eval[1]=IKsign(x13451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13452=((1.0)*sj5);
IkReal x13453=(((cj5*r12))+(((-1.0)*r10*sj6*x13452))+(((-1.0)*cj6*r11*x13452)));
j4eval[0]=x13453;
j4eval[1]=IKsign(x13453);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13454=cj6*cj6;
IkReal x13455=cj5*cj5;
IkReal x13456=(cj5*sj5);
IkReal x13457=(cj6*r21);
IkReal x13458=((1.0)*r11);
IkReal x13459=(r10*r20);
IkReal x13460=(r10*sj6);
IkReal x13461=(r12*r22);
IkReal x13462=(r21*x13454);
IkReal x13463=(cj6*r20*sj6);
IkReal x13464=(r11*x13455);
IkReal x13465=((1.0)*x13455);
IkReal x13466=(x13461+(((-1.0)*x13461*x13465))+((r11*r21))+((r22*x13456*x13460))+((x13463*x13464))+((x13462*x13464))+((x13455*x13457*x13460))+((x13455*x13459))+(((-1.0)*x13458*x13462))+(((-1.0)*x13458*x13463))+((x13454*x13459))+(((-1.0)*x13454*x13459*x13465))+((r12*x13456*x13457))+((cj6*r11*r22*x13456))+(((-1.0)*x13457*x13460))+((r12*r20*sj6*x13456)));
j4eval[0]=x13466;
j4eval[1]=IKsign(x13466);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13467=cj6*cj6;
IkReal x13468=cj5*cj5;
IkReal x13469=((1.0)*r11);
IkReal x13470=((1.0)*r20);
IkReal x13471=(cj0*cj2);
IkReal x13472=(r12*r22);
IkReal x13473=(cj6*sj6);
IkReal x13474=((1.0)*r21);
IkReal x13475=(r22*sj5);
IkReal x13476=(sj0*sj2);
IkReal x13477=(r12*sj5);
IkReal x13478=(cj5*sj6);
IkReal x13479=(r21*x13467);
IkReal x13480=(cj5*x13476);
IkReal x13481=(r10*x13468);
IkReal x13482=(r11*x13468);
IkReal x13483=(cj5*cj6*r21);
CheckValue<IkReal> x13484=IKPowWithIntegerCheck(IKsign((x13472+((r10*x13475*x13478))+(((-1.0)*r20*x13469*x13473))+((x13477*x13483))+((r11*r21))+((cj5*cj6*r11*x13475))+(((-1.0)*r10*x13473*x13474))+((x13479*x13482))+((r20*x13477*x13478))+((r20*x13481))+((r21*x13473*x13481))+(((-1.0)*x13469*x13479))+(((-1.0)*x13468*x13472))+((r20*x13473*x13482))+((r10*r20*x13467))+(((-1.0)*x13467*x13470*x13481)))),-1);
if(!x13484.valid){
continue;
}
CheckValue<IkReal> x13485 = IKatan2WithCheck(IkReal(((((-1.0)*x13475*x13476))+((x13471*x13475))+((r20*x13471*x13478))+((x13471*x13483))+(((-1.0)*cj6*x13474*x13480))+(((-1.0)*x13470*x13476*x13478)))),IkReal(((((-1.0)*sj6*x13474*x13476))+((cj6*r20*x13476))+((r21*sj6*x13471))+(((-1.0)*cj6*x13470*x13471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13484.value)))+(x13485.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13486=IKcos(j4);
IkReal x13487=IKsin(j4);
IkReal x13488=(cj0*cj2);
IkReal x13489=(cj5*sj6);
IkReal x13490=(cj5*r01);
IkReal x13491=(cj0*sj2);
IkReal x13492=(cj5*r21);
IkReal x13493=((1.0)*sj0);
IkReal x13494=(sj2*x13493);
IkReal x13495=(cj5*cj6*r11);
IkReal x13496=((1.0)*x13487);
IkReal x13497=(cj6*x13486);
IkReal x13498=(sj5*x13486);
IkReal x13499=(cj6*x13487);
IkReal x13500=(sj5*x13496);
IkReal x13501=((1.0)*sj6*x13486);
evalcond[0]=((((-1.0)*r21*sj6*x13496))+((r22*x13498))+((r20*x13486*x13489))+((r20*x13499))+((x13492*x13497)));
evalcond[1]=((((-1.0)*r21*x13501))+((r20*x13497))+(((-1.0)*cj6*x13492*x13496))+(((-1.0)*r20*x13489*x13496))+(((-1.0)*r22*x13500)));
evalcond[2]=(x13491+((cj2*sj0))+((x13486*x13495))+(((-1.0)*r11*sj6*x13496))+((r10*x13486*x13489))+((r10*x13499))+((r12*x13498)));
evalcond[3]=(x13488+((r02*x13498))+((x13490*x13497))+(((-1.0)*r01*sj6*x13496))+((r00*x13486*x13489))+((r00*x13499))+(((-1.0)*x13494)));
evalcond[4]=((((-1.0)*x13495*x13496))+x13488+(((-1.0)*r11*x13501))+(((-1.0)*r12*x13500))+(((-1.0)*r10*x13489*x13496))+((r10*x13497))+(((-1.0)*x13494)));
evalcond[5]=((((-1.0)*x13491))+(((-1.0)*cj2*x13493))+(((-1.0)*r00*x13489*x13496))+((r00*x13497))+(((-1.0)*cj6*x13490*x13496))+(((-1.0)*r01*x13501))+(((-1.0)*r02*x13500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13502=(r21*sj6);
IkReal x13503=(sj0*sj2);
IkReal x13504=((1.0)*cj6);
IkReal x13505=(cj5*sj6);
IkReal x13506=(cj0*cj2);
IkReal x13507=(cj5*r21);
IkReal x13508=((1.0)*sj5);
IkReal x13509=(r20*x13506);
CheckValue<IkReal> x13510=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x13508))+(((-1.0)*r11*sj5*x13504)))),-1);
if(!x13510.valid){
continue;
}
CheckValue<IkReal> x13511 = IKatan2WithCheck(IkReal((((r22*sj5*x13506))+(((-1.0)*x13503*x13504*x13507))+(((-1.0)*r20*x13503*x13505))+((x13505*x13509))+(((-1.0)*r22*x13503*x13508))+((cj6*x13506*x13507)))),IkReal(((((-1.0)*x13502*x13503))+((cj6*r20*x13503))+((x13502*x13506))+(((-1.0)*x13504*x13509)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13510.value)))+(x13511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13512=IKcos(j4);
IkReal x13513=IKsin(j4);
IkReal x13514=(cj0*cj2);
IkReal x13515=(cj5*sj6);
IkReal x13516=(cj5*r01);
IkReal x13517=(cj0*sj2);
IkReal x13518=(cj5*r21);
IkReal x13519=((1.0)*sj0);
IkReal x13520=(sj2*x13519);
IkReal x13521=(cj5*cj6*r11);
IkReal x13522=((1.0)*x13513);
IkReal x13523=(cj6*x13512);
IkReal x13524=(sj5*x13512);
IkReal x13525=(cj6*x13513);
IkReal x13526=(sj5*x13522);
IkReal x13527=((1.0)*sj6*x13512);
evalcond[0]=((((-1.0)*r21*sj6*x13522))+((r20*x13525))+((x13518*x13523))+((r22*x13524))+((r20*x13512*x13515)));
evalcond[1]=((((-1.0)*r20*x13515*x13522))+(((-1.0)*r22*x13526))+((r20*x13523))+(((-1.0)*r21*x13527))+(((-1.0)*cj6*x13518*x13522)));
evalcond[2]=(((cj2*sj0))+x13517+((x13512*x13521))+((r10*x13512*x13515))+((r12*x13524))+(((-1.0)*r11*sj6*x13522))+((r10*x13525)));
evalcond[3]=(((x13516*x13523))+x13514+((r02*x13524))+(((-1.0)*r01*sj6*x13522))+(((-1.0)*x13520))+((r00*x13512*x13515))+((r00*x13525)));
evalcond[4]=((((-1.0)*r12*x13526))+x13514+(((-1.0)*r11*x13527))+(((-1.0)*x13521*x13522))+(((-1.0)*r10*x13515*x13522))+(((-1.0)*x13520))+((r10*x13523)));
evalcond[5]=((((-1.0)*x13517))+(((-1.0)*cj2*x13519))+(((-1.0)*r00*x13515*x13522))+(((-1.0)*r01*x13527))+((r00*x13523))+(((-1.0)*cj6*x13516*x13522))+(((-1.0)*r02*x13526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13528=(cj5*r21);
IkReal x13529=(cj0*sj2);
IkReal x13530=(r22*sj5);
IkReal x13531=((1.0)*r20);
IkReal x13532=(cj5*r20);
IkReal x13533=(cj2*cj6*sj0);
IkReal x13534=(cj2*sj0*sj6);
CheckValue<IkReal> x13535 = IKatan2WithCheck(IkReal((((sj6*x13529*x13532))+((cj6*x13528*x13529))+((x13528*x13533))+((x13529*x13530))+((cj2*sj0*x13530))+((x13532*x13534)))),IkReal((((r21*sj6*x13529))+(((-1.0)*cj6*x13529*x13531))+(((-1.0)*x13531*x13533))+((r21*x13534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13535.valid){
continue;
}
CheckValue<IkReal> x13536=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13535.value)+(((1.5707963267949)*(x13536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13537=IKcos(j4);
IkReal x13538=IKsin(j4);
IkReal x13539=(cj0*cj2);
IkReal x13540=(cj5*sj6);
IkReal x13541=(cj5*r01);
IkReal x13542=(cj0*sj2);
IkReal x13543=(cj5*r21);
IkReal x13544=((1.0)*sj0);
IkReal x13545=(sj2*x13544);
IkReal x13546=(cj5*cj6*r11);
IkReal x13547=((1.0)*x13538);
IkReal x13548=(cj6*x13537);
IkReal x13549=(sj5*x13537);
IkReal x13550=(cj6*x13538);
IkReal x13551=(sj5*x13547);
IkReal x13552=((1.0)*sj6*x13537);
evalcond[0]=(((r20*x13537*x13540))+((r22*x13549))+(((-1.0)*r21*sj6*x13547))+((r20*x13550))+((x13543*x13548)));
evalcond[1]=(((r20*x13548))+(((-1.0)*cj6*x13543*x13547))+(((-1.0)*r22*x13551))+(((-1.0)*r20*x13540*x13547))+(((-1.0)*r21*x13552)));
evalcond[2]=(((r10*x13537*x13540))+((cj2*sj0))+((r12*x13549))+x13542+((r10*x13550))+(((-1.0)*r11*sj6*x13547))+((x13537*x13546)));
evalcond[3]=(x13539+(((-1.0)*x13545))+(((-1.0)*r01*sj6*x13547))+((r00*x13550))+((r00*x13537*x13540))+((x13541*x13548))+((r02*x13549)));
evalcond[4]=(x13539+(((-1.0)*x13545))+((r10*x13548))+(((-1.0)*x13546*x13547))+(((-1.0)*r12*x13551))+(((-1.0)*r11*x13552))+(((-1.0)*r10*x13540*x13547)));
evalcond[5]=((((-1.0)*r00*x13540*x13547))+(((-1.0)*cj2*x13544))+((r00*x13548))+(((-1.0)*r01*x13552))+(((-1.0)*r02*x13551))+(((-1.0)*cj6*x13541*x13547))+(((-1.0)*x13542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13553=cj5*cj5;
IkReal x13554=cj6*cj6;
IkReal x13555=r22*r22;
IkReal x13556=r21*r21;
IkReal x13557=r20*r20;
IkReal x13558=((1.0)*cj5);
IkReal x13559=(cj6*r21);
IkReal x13560=(r20*sj6);
IkReal x13561=(cj1*cj2);
IkReal x13562=(cj1*sj2);
IkReal x13563=(r22*sj5);
IkReal x13564=(cj6*r20);
IkReal x13565=((2.0)*cj5);
IkReal x13566=(sj6*x13561);
IkReal x13567=((1.0)*x13556);
IkReal x13568=(x13554*x13557);
CheckValue<IkReal> x13569=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13559*x13563*x13565))+((x13553*x13568))+(((-1.0)*x13553*x13554*x13567))+((x13554*x13556))+(((-1.0)*x13568))+(((-1.0)*x13553*x13557))+((x13553*x13555))+(((-1.0)*x13555))+(((-2.0)*x13553*x13559*x13560))+(((-1.0)*x13567))+(((-1.0)*x13560*x13563*x13565))+(((2.0)*x13559*x13560)))),-1);
if(!x13569.valid){
continue;
}
CheckValue<IkReal> x13570 = IKatan2WithCheck(IkReal(((((-1.0)*x13558*x13559*x13562))+(((-1.0)*x13562*x13563))+((r21*x13566))+(((-1.0)*x13558*x13560*x13562))+(((-1.0)*x13561*x13564)))),IkReal(((((-1.0)*r21*sj6*x13562))+(((-1.0)*x13558*x13559*x13561))+((x13562*x13564))+(((-1.0)*x13558*x13560*x13561))+(((-1.0)*x13561*x13563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13570.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13569.value)))+(x13570.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13571=IKcos(j4);
IkReal x13572=IKsin(j4);
IkReal x13573=(cj0*sj1);
IkReal x13574=((1.0)*cj2);
IkReal x13575=(cj5*sj6);
IkReal x13576=(sj0*sj1);
IkReal x13577=((1.0)*sj6);
IkReal x13578=(cj5*cj6);
IkReal x13579=(r11*x13578);
IkReal x13580=((1.0)*x13572);
IkReal x13581=(sj5*x13571);
IkReal x13582=(r01*x13571);
IkReal x13583=(cj6*x13571);
IkReal x13584=(cj6*x13572);
IkReal x13585=(sj5*x13580);
evalcond[0]=((((-1.0)*r21*x13572*x13577))+(((-1.0)*cj1*x13574))+((r21*x13571*x13578))+((r20*x13584))+((r20*x13571*x13575))+((r22*x13581)));
evalcond[1]=((((-1.0)*r21*x13571*x13577))+((cj1*sj2))+(((-1.0)*r21*x13578*x13580))+(((-1.0)*r20*x13575*x13580))+((r20*x13583))+(((-1.0)*r22*x13585)));
evalcond[2]=(((r12*x13581))+((r10*x13584))+(((-1.0)*r11*x13572*x13577))+((r10*x13571*x13575))+((x13571*x13579))+(((-1.0)*x13574*x13576))+((cj0*sj2)));
evalcond[3]=((((-1.0)*r01*x13572*x13577))+((r00*x13571*x13575))+((r00*x13584))+(((-1.0)*x13573*x13574))+((r02*x13581))+(((-1.0)*sj0*sj2))+((x13578*x13582)));
evalcond[4]=((((-1.0)*r11*x13571*x13577))+(((-1.0)*x13579*x13580))+((r10*x13583))+((sj2*x13576))+(((-1.0)*r12*x13585))+((cj0*cj2))+(((-1.0)*r10*x13575*x13580)));
evalcond[5]=((((-1.0)*r02*x13585))+((sj2*x13573))+((r00*x13583))+(((-1.0)*sj0*x13574))+(((-1.0)*r01*x13578*x13580))+(((-1.0)*r00*x13575*x13580))+(((-1.0)*x13577*x13582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13586=(sj0*sj2);
IkReal x13587=((1.0)*r21);
IkReal x13588=((1.0)*sj5);
IkReal x13589=(cj6*r20);
IkReal x13590=(cj5*cj6);
IkReal x13591=(cj1*cj2);
IkReal x13592=(sj6*x13591);
IkReal x13593=(cj0*cj2*sj1);
IkReal x13594=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x13595 = IKatan2WithCheck(IkReal((((cj5*r00*x13592))+((r01*x13590*x13591))+(((-1.0)*x13587*x13590*x13593))+(((-1.0)*x13586*x13594))+(((-1.0)*r22*x13588*x13593))+(((-1.0)*x13586*x13587*x13590))+(((-1.0)*r22*x13586*x13588))+(((-1.0)*x13593*x13594))+((r02*sj5*x13591)))),IkReal((((x13589*x13593))+((r01*x13592))+(((-1.0)*cj6*r00*x13591))+(((-1.0)*sj6*x13586*x13587))+((x13586*x13589))+(((-1.0)*sj6*x13587*x13593)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13595.valid){
continue;
}
CheckValue<IkReal> x13596=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x13588))+(((-1.0)*r10*sj6*x13588)))),-1);
if(!x13596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13595.value)+(((1.5707963267949)*(x13596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13597=IKcos(j4);
IkReal x13598=IKsin(j4);
IkReal x13599=(cj0*sj1);
IkReal x13600=((1.0)*cj2);
IkReal x13601=(cj5*sj6);
IkReal x13602=(sj0*sj1);
IkReal x13603=((1.0)*sj6);
IkReal x13604=(cj5*cj6);
IkReal x13605=(r11*x13604);
IkReal x13606=((1.0)*x13598);
IkReal x13607=(sj5*x13597);
IkReal x13608=(r01*x13597);
IkReal x13609=(cj6*x13597);
IkReal x13610=(cj6*x13598);
IkReal x13611=(sj5*x13606);
evalcond[0]=(((r21*x13597*x13604))+((r20*x13610))+((r20*x13597*x13601))+(((-1.0)*cj1*x13600))+((r22*x13607))+(((-1.0)*r21*x13598*x13603)));
evalcond[1]=((((-1.0)*r20*x13601*x13606))+((cj1*sj2))+(((-1.0)*r21*x13604*x13606))+((r20*x13609))+(((-1.0)*r21*x13597*x13603))+(((-1.0)*r22*x13611)));
evalcond[2]=(((r12*x13607))+((r10*x13597*x13601))+(((-1.0)*r11*x13598*x13603))+((r10*x13610))+(((-1.0)*x13600*x13602))+((cj0*sj2))+((x13597*x13605)));
evalcond[3]=((((-1.0)*x13599*x13600))+((x13604*x13608))+((r02*x13607))+((r00*x13610))+(((-1.0)*r01*x13598*x13603))+((r00*x13597*x13601))+(((-1.0)*sj0*sj2)));
evalcond[4]=((((-1.0)*r11*x13597*x13603))+((r10*x13609))+(((-1.0)*x13605*x13606))+(((-1.0)*r10*x13601*x13606))+((cj0*cj2))+((sj2*x13602))+(((-1.0)*r12*x13611)));
evalcond[5]=((((-1.0)*r00*x13601*x13606))+(((-1.0)*x13603*x13608))+(((-1.0)*sj0*x13600))+(((-1.0)*r01*x13604*x13606))+(((-1.0)*r02*x13611))+((sj2*x13599))+((r00*x13609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13612=(cj6*r20);
IkReal x13613=(cj0*sj2);
IkReal x13614=((1.0)*sj6);
IkReal x13615=(cj1*cj2);
IkReal x13616=(cj5*cj6);
IkReal x13617=(cj5*r20);
IkReal x13618=(r22*sj5);
IkReal x13619=(cj2*sj0*sj1);
CheckValue<IkReal> x13620 = IKatan2WithCheck(IkReal((((r12*sj5*x13615))+((sj6*x13613*x13617))+((cj5*r10*sj6*x13615))+(((-1.0)*x13614*x13617*x13619))+(((-1.0)*r21*x13616*x13619))+((r11*x13615*x13616))+((x13613*x13618))+((r21*x13613*x13616))+(((-1.0)*x13618*x13619)))),IkReal((((r11*sj6*x13615))+((r21*sj6*x13613))+((x13612*x13619))+(((-1.0)*cj6*r10*x13615))+(((-1.0)*r21*x13614*x13619))+(((-1.0)*x13612*x13613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13620.valid){
continue;
}
CheckValue<IkReal> x13621=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13620.value)+(((1.5707963267949)*(x13621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13622=IKcos(j4);
IkReal x13623=IKsin(j4);
IkReal x13624=(cj0*sj1);
IkReal x13625=((1.0)*cj2);
IkReal x13626=(cj5*sj6);
IkReal x13627=(sj0*sj1);
IkReal x13628=((1.0)*sj6);
IkReal x13629=(cj5*cj6);
IkReal x13630=(r11*x13629);
IkReal x13631=((1.0)*x13623);
IkReal x13632=(sj5*x13622);
IkReal x13633=(r01*x13622);
IkReal x13634=(cj6*x13622);
IkReal x13635=(cj6*x13623);
IkReal x13636=(sj5*x13631);
evalcond[0]=((((-1.0)*cj1*x13625))+((r22*x13632))+(((-1.0)*r21*x13623*x13628))+((r21*x13622*x13629))+((r20*x13622*x13626))+((r20*x13635)));
evalcond[1]=((((-1.0)*r21*x13629*x13631))+(((-1.0)*r21*x13622*x13628))+((cj1*sj2))+(((-1.0)*r22*x13636))+(((-1.0)*r20*x13626*x13631))+((r20*x13634)));
evalcond[2]=(((r10*x13635))+(((-1.0)*r11*x13623*x13628))+((r10*x13622*x13626))+((r12*x13632))+((x13622*x13630))+(((-1.0)*x13625*x13627))+((cj0*sj2)));
evalcond[3]=((((-1.0)*x13624*x13625))+((r02*x13632))+((r00*x13622*x13626))+(((-1.0)*sj0*sj2))+((x13629*x13633))+((r00*x13635))+(((-1.0)*r01*x13623*x13628)));
evalcond[4]=(((r10*x13634))+(((-1.0)*x13630*x13631))+((cj0*cj2))+(((-1.0)*r12*x13636))+(((-1.0)*r10*x13626*x13631))+((sj2*x13627))+(((-1.0)*r11*x13622*x13628)));
evalcond[5]=((((-1.0)*sj0*x13625))+(((-1.0)*r00*x13626*x13631))+(((-1.0)*r02*x13636))+(((-1.0)*r01*x13629*x13631))+(((-1.0)*x13628*x13633))+((sj2*x13624))+((r00*x13634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13637=cj1*cj1;
IkReal x13638=(cj5*r02);
IkReal x13639=((136398.7618)*cj1);
IkReal x13640=(r10*sj6);
IkReal x13641=((690.0)*r12);
IkReal x13642=((25826.01)*sj2);
IkReal x13643=(r00*sj6);
IkReal x13644=(cj6*sj5);
IkReal x13645=((25826.01)*r11);
IkReal x13646=((69000.0)*py);
IkReal x13647=(sj2*sj5);
IkReal x13648=(cj2*sj1);
IkReal x13649=((25826.01)*sj5);
IkReal x13650=((690.0)*r02);
IkReal x13651=((364420.0)*cj1);
IkReal x13652=((3644.2)*cj1);
IkReal x13653=(cj5*cj6);
IkReal x13654=((690.0)*r11);
IkReal x13655=((69000.0)*px);
IkReal x13656=((50289.96)*cj1);
IkReal x13657=((690.0)*cj5);
IkReal x13658=((690.0)*r01);
IkReal x13659=((25826.01)*r01);
IkReal x13660=(cj5*r12);
IkReal x13661=(sj5*x13648);
IkReal x13662=(sj2*x13657);
IkReal x13663=((25826.01)*x13660);
CheckValue<IkReal> x13664 = IKatan2WithCheck(IkReal((((x13641*x13661))+(((-1.0)*r12*sj5*x13652))+(((-1.0)*r01*x13642*x13644))+((sj2*x13653*x13658))+x13646+(((-1.0)*x13640*x13648*x13649))+(((-1.0)*sj5*x13641))+((x13648*x13663))+(((-1.0)*x13639*x13660))+((x13644*x13645))+((py*x13651))+(((-1.0)*x13646*x13648))+((sj5*x13639*x13640))+(((-1.0)*x13663))+(((-1.0)*x13644*x13645*x13648))+(((-1.0)*sj5*x13642*x13643))+(((-1.0)*sj2*x13655))+(((-1.0)*x13653*x13654))+(((-1.0)*cj5*x13640*x13652))+((x13640*x13648*x13657))+((x13643*x13662))+((x13647*x13650))+((x13638*x13642))+((x13640*x13649))+((x13648*x13653*x13654))+(((-1.0)*r11*x13652*x13653))+(((-1.0)*x13640*x13657))+((r11*x13639*x13644)))),IkReal(((((-1.0)*x13648*x13655))+(((-1.0)*r01*x13652*x13653))+(((-1.0)*x13638*x13639))+(((-1.0)*r02*sj5*x13652))+(((-1.0)*x13642*x13660))+x13655+((px*x13651))+(((25826.01)*x13638*x13648))+(((-1.0)*x13641*x13647))+((x13643*x13648*x13657))+((sj5*x13639*x13643))+((x13650*x13661))+((sj2*x13646))+(((-1.0)*x13640*x13662))+((r11*x13642*x13644))+(((-1.0)*cj5*x13643*x13652))+(((-1.0)*x13644*x13648*x13659))+(((-1.0)*x13653*x13658))+(((-1.0)*x13643*x13648*x13649))+(((-1.0)*sj2*x13653*x13654))+((x13644*x13659))+(((-25826.01)*x13638))+(((-1.0)*sj5*x13650))+((sj5*x13640*x13642))+((r01*x13639*x13644))+((x13643*x13649))+((x13648*x13653*x13658))+(((-1.0)*x13643*x13657)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13664.valid){
continue;
}
CheckValue<IkReal> x13665=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-1.0)*x13648*x13656))+x13656+(((132801.9364)*x13637))+(((-4761.0)*x13637*(cj2*cj2)))+(((-9522.0)*x13648)))),-1);
if(!x13665.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x13664.value)+(((1.5707963267949)*(x13665.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x13666=IKcos(j0);
IkReal x13667=IKsin(j0);
IkReal x13668=(r10*sj6);
IkReal x13669=((0.37429)*sj5);
IkReal x13670=((0.36442)*cj1);
IkReal x13671=((0.01)*cj5);
IkReal x13672=(cj6*r11);
IkReal x13673=(r00*sj6);
IkReal x13674=(cj6*r01);
IkReal x13675=((0.37429)*cj5);
IkReal x13676=(cj2*sj1);
IkReal x13677=((0.01)*sj5);
IkReal x13678=((0.069)*x13667);
IkReal x13679=((0.069)*x13666);
evalcond[0]=((((-1.0)*x13669*x13674))+(((-1.0)*x13669*x13673))+x13679+((r02*x13675))+((r02*x13677))+(((-1.0)*sj2*x13678))+(((-1.0)*x13676*x13679))+(((-1.0)*px))+((x13666*x13670))+((x13671*x13673))+((x13671*x13674)));
evalcond[1]=((((-1.0)*x13669*x13672))+(((-1.0)*x13668*x13669))+x13678+((r12*x13675))+((r12*x13677))+(((-1.0)*x13676*x13678))+(((-1.0)*py))+((sj2*x13679))+((x13668*x13671))+((x13667*x13670))+((x13671*x13672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x13680=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x13680;
j4eval[1]=IKsign(x13680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13681=((1.0)*sj5);
IkReal x13682=((((-1.0)*cj6*r01*x13681))+(((-1.0)*r00*sj6*x13681))+((cj5*r02)));
j4eval[0]=x13682;
j4eval[1]=IKsign(x13682);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13683=((1.0)*sj5);
IkReal x13684=((((-1.0)*cj6*r21*x13683))+((cj5*r22))+(((-1.0)*r20*sj6*x13683)));
j4eval[0]=x13684;
j4eval[1]=IKsign(x13684);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13685=((1.0)*sj6);
IkReal x13686=(cj5*cj6);
IkReal x13687=(sj1*sj2);
IkReal x13688=(cj0*r11);
IkReal x13689=(cj6*r00);
IkReal x13690=(cj2*sj0);
IkReal x13691=(cj0*cj2);
IkReal x13692=(r02*sj5);
IkReal x13693=((1.0)*sj5);
IkReal x13694=(cj5*sj6);
IkReal x13695=(cj0*r10);
IkReal x13696=(r01*sj0*x13687);
CheckValue<IkReal> x13697 = IKatan2WithCheck(IkReal((((sj6*x13687*x13688))+((cj6*r10*x13690))+((x13689*x13691))+((sj0*x13687*x13689))+(((-1.0)*r11*x13685*x13690))+(((-1.0)*r01*x13685*x13691))+(((-1.0)*x13685*x13696))+(((-1.0)*cj6*x13687*x13695)))),IkReal((((sj0*x13687*x13692))+(((-1.0)*x13686*x13687*x13688))+(((-1.0)*cj5*x13685*x13687*x13695))+((r01*x13686*x13691))+(((-1.0)*cj0*r12*x13687*x13693))+((r00*sj0*x13687*x13694))+((r11*x13686*x13690))+((r00*x13691*x13694))+((x13691*x13692))+((x13686*x13696))+((r10*x13690*x13694))+((r12*sj5*x13690)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13697.valid){
continue;
}
CheckValue<IkReal> x13698=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj5*x13685))+(((-1.0)*cj6*r21*x13693)))),-1);
if(!x13698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13697.value)+(((1.5707963267949)*(x13698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13699=IKsin(j4);
IkReal x13700=IKcos(j4);
IkReal x13701=(r01*sj3);
IkReal x13702=((1.0)*sj5);
IkReal x13703=(cj3*r02);
IkReal x13704=((1.0)*cj6);
IkReal x13705=(cj5*r12);
IkReal x13706=(cj0*sj2);
IkReal x13707=(sj3*sj6);
IkReal x13708=((1.0)*r20);
IkReal x13709=(cj0*cj2);
IkReal x13710=(cj3*sj6);
IkReal x13711=((1.0)*cj1);
IkReal x13712=((1.0)*cj5);
IkReal x13713=(cj6*sj5);
IkReal x13714=(r21*sj3);
IkReal x13715=((1.0)*r00);
IkReal x13716=((1.0)*r10);
IkReal x13717=(cj3*r22);
IkReal x13718=(r11*sj3);
IkReal x13719=((1.0)*sj0);
IkReal x13720=(cj3*x13704);
IkReal x13721=(cj5*x13700);
IkReal x13722=(sj6*x13699);
IkReal x13723=(r10*x13699);
IkReal x13724=(r00*x13699);
IkReal x13725=(cj6*x13700);
IkReal x13726=(sj3*x13700);
IkReal x13727=(cj5*x13699);
IkReal x13728=(r20*x13699);
IkReal x13729=((1.0)*sj6*x13700);
evalcond[0]=(((r20*x13725))+((cj1*sj2))+(((-1.0)*cj5*x13708*x13722))+(((-1.0)*r22*x13699*x13702))+(((-1.0)*r21*x13729))+(((-1.0)*r21*x13704*x13727)));
evalcond[1]=(x13709+((r10*x13725))+(((-1.0)*r12*x13699*x13702))+(((-1.0)*r11*x13729))+(((-1.0)*r11*x13704*x13727))+((sj0*sj1*sj2))+(((-1.0)*r10*x13712*x13722)));
evalcond[2]=((((-1.0)*r01*x13704*x13727))+(((-1.0)*r00*x13712*x13722))+(((-1.0)*r01*x13729))+((sj1*x13706))+((r00*x13725))+(((-1.0)*cj2*x13719))+(((-1.0)*r02*x13699*x13702)));
evalcond[3]=(sj1+(((-1.0)*cj3*cj6*r21*x13702))+(((-1.0)*x13707*x13708*x13721))+((r21*x13699*x13707))+(((-1.0)*r20*x13702*x13710))+(((-1.0)*sj3*x13704*x13728))+(((-1.0)*x13704*x13714*x13721))+(((-1.0)*r22*x13702*x13726))+((cj5*x13717)));
evalcond[4]=((((-1.0)*x13708*x13710*x13721))+(((-1.0)*r21*x13720*x13721))+((r20*sj5*x13707))+(((-1.0)*cj2*x13711))+(((-1.0)*x13720*x13728))+((r21*x13699*x13710))+(((-1.0)*r22*sj3*x13712))+(((-1.0)*x13700*x13702*x13717))+((x13713*x13714)));
evalcond[5]=((((-1.0)*r02*x13702*x13726))+(((-1.0)*cj3*cj6*r01*x13702))+(((-1.0)*x13701*x13704*x13721))+(((-1.0)*sj3*x13704*x13724))+((x13701*x13722))+(((-1.0)*r00*x13700*x13707*x13712))+(((-1.0)*cj0*x13711))+((cj5*x13703))+(((-1.0)*r00*x13702*x13710)));
evalcond[6]=((((-1.0)*sj0*x13711))+((cj3*x13705))+(((-1.0)*sj3*x13704*x13723))+(((-1.0)*r12*x13702*x13726))+(((-1.0)*cj3*cj6*r11*x13702))+(((-1.0)*x13704*x13718*x13721))+(((-1.0)*r10*x13700*x13707*x13712))+((r11*x13699*x13707))+(((-1.0)*r10*x13702*x13710)));
evalcond[7]=(((r10*sj5*x13707))+(((-1.0)*r10*x13700*x13710*x13712))+(((-1.0)*r11*x13720*x13721))+x13706+(((-1.0)*x13720*x13723))+(((-1.0)*cj3*r12*x13700*x13702))+(((-1.0)*cj2*sj1*x13719))+(((-1.0)*sj3*x13705))+((x13713*x13718))+((r11*x13699*x13710)));
evalcond[8]=((((-1.0)*sj2*x13719))+(((-1.0)*x13720*x13724))+(((-1.0)*r00*x13700*x13710*x13712))+(((-1.0)*r01*x13720*x13721))+((r00*sj5*x13707))+(((-1.0)*x13700*x13702*x13703))+(((-1.0)*r02*sj3*x13712))+(((-1.0)*sj1*x13709))+((x13701*x13713))+((r01*x13699*x13710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13730=(cj6*r21);
IkReal x13731=(r20*sj6);
IkReal x13732=(cj1*sj2);
IkReal x13733=((1.0)*cj6);
IkReal x13734=((1.0)*sj5);
IkReal x13735=(cj0*cj2);
IkReal x13736=(r21*sj6);
IkReal x13737=(sj0*sj1*sj2);
IkReal x13738=((1.0)*cj5*x13735);
IkReal x13739=((1.0)*cj5*x13737);
CheckValue<IkReal> x13740=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x13733))+(((-1.0)*r00*sj6*x13734))+((cj5*r02)))),-1);
if(!x13740.valid){
continue;
}
CheckValue<IkReal> x13741 = IKatan2WithCheck(IkReal((((cj6*r10*x13732))+((x13735*x13736))+((x13736*x13737))+(((-1.0)*r20*x13733*x13735))+(((-1.0)*r20*x13733*x13737))+(((-1.0)*r11*sj6*x13732)))),IkReal((((cj5*cj6*r11*x13732))+(((-1.0)*x13730*x13738))+(((-1.0)*x13730*x13739))+(((-1.0)*x13731*x13739))+(((-1.0)*x13731*x13738))+(((-1.0)*r22*x13734*x13735))+(((-1.0)*r22*x13734*x13737))+((r12*sj5*x13732))+((cj5*r10*sj6*x13732)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13741.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13740.value)))+(x13741.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13742=IKsin(j4);
IkReal x13743=IKcos(j4);
IkReal x13744=(r01*sj3);
IkReal x13745=((1.0)*sj5);
IkReal x13746=(cj3*r02);
IkReal x13747=((1.0)*cj6);
IkReal x13748=(cj5*r12);
IkReal x13749=(cj0*sj2);
IkReal x13750=(sj3*sj6);
IkReal x13751=((1.0)*r20);
IkReal x13752=(cj0*cj2);
IkReal x13753=(cj3*sj6);
IkReal x13754=((1.0)*cj1);
IkReal x13755=((1.0)*cj5);
IkReal x13756=(cj6*sj5);
IkReal x13757=(r21*sj3);
IkReal x13758=((1.0)*r00);
IkReal x13759=((1.0)*r10);
IkReal x13760=(cj3*r22);
IkReal x13761=(r11*sj3);
IkReal x13762=((1.0)*sj0);
IkReal x13763=(cj3*x13747);
IkReal x13764=(cj5*x13743);
IkReal x13765=(sj6*x13742);
IkReal x13766=(r10*x13742);
IkReal x13767=(r00*x13742);
IkReal x13768=(cj6*x13743);
IkReal x13769=(sj3*x13743);
IkReal x13770=(cj5*x13742);
IkReal x13771=(r20*x13742);
IkReal x13772=((1.0)*sj6*x13743);
evalcond[0]=(((cj1*sj2))+((r20*x13768))+(((-1.0)*r21*x13747*x13770))+(((-1.0)*r21*x13772))+(((-1.0)*r22*x13742*x13745))+(((-1.0)*cj5*x13751*x13765)));
evalcond[1]=(x13752+(((-1.0)*r12*x13742*x13745))+((r10*x13768))+(((-1.0)*r11*x13772))+(((-1.0)*r10*x13755*x13765))+((sj0*sj1*sj2))+(((-1.0)*r11*x13747*x13770)));
evalcond[2]=((((-1.0)*r01*x13772))+((r00*x13768))+((sj1*x13749))+(((-1.0)*cj2*x13762))+(((-1.0)*r02*x13742*x13745))+(((-1.0)*r01*x13747*x13770))+(((-1.0)*r00*x13755*x13765)));
evalcond[3]=((((-1.0)*cj3*cj6*r21*x13745))+((cj5*x13760))+sj1+((r21*x13742*x13750))+(((-1.0)*r20*x13745*x13753))+(((-1.0)*x13750*x13751*x13764))+(((-1.0)*r22*x13745*x13769))+(((-1.0)*sj3*x13747*x13771))+(((-1.0)*x13747*x13757*x13764)));
evalcond[4]=(((r21*x13742*x13753))+(((-1.0)*x13751*x13753*x13764))+(((-1.0)*r22*sj3*x13755))+(((-1.0)*r21*x13763*x13764))+(((-1.0)*cj2*x13754))+((r20*sj5*x13750))+((x13756*x13757))+(((-1.0)*x13743*x13745*x13760))+(((-1.0)*x13763*x13771)));
evalcond[5]=(((cj5*x13746))+(((-1.0)*cj3*cj6*r01*x13745))+(((-1.0)*cj0*x13754))+(((-1.0)*r02*x13745*x13769))+(((-1.0)*x13744*x13747*x13764))+(((-1.0)*sj3*x13747*x13767))+((x13744*x13765))+(((-1.0)*r00*x13743*x13750*x13755))+(((-1.0)*r00*x13745*x13753)));
evalcond[6]=(((r11*x13742*x13750))+(((-1.0)*r12*x13745*x13769))+(((-1.0)*cj3*cj6*r11*x13745))+(((-1.0)*r10*x13743*x13750*x13755))+(((-1.0)*sj0*x13754))+(((-1.0)*x13747*x13761*x13764))+(((-1.0)*r10*x13745*x13753))+(((-1.0)*sj3*x13747*x13766))+((cj3*x13748)));
evalcond[7]=(((r11*x13742*x13753))+(((-1.0)*r10*x13743*x13753*x13755))+x13749+((r10*sj5*x13750))+(((-1.0)*cj2*sj1*x13762))+(((-1.0)*sj3*x13748))+(((-1.0)*cj3*r12*x13743*x13745))+((x13756*x13761))+(((-1.0)*x13763*x13766))+(((-1.0)*r11*x13763*x13764)));
evalcond[8]=(((r01*x13742*x13753))+(((-1.0)*r01*x13763*x13764))+(((-1.0)*sj2*x13762))+((r00*sj5*x13750))+(((-1.0)*r00*x13743*x13753*x13755))+(((-1.0)*r02*sj3*x13755))+(((-1.0)*sj1*x13752))+((x13744*x13756))+(((-1.0)*x13763*x13767))+(((-1.0)*x13743*x13745*x13746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13773=(cj6*r20);
IkReal x13774=(cj2*sj0);
IkReal x13775=((1.0)*sj2);
IkReal x13776=(cj0*sj1);
IkReal x13777=(cj1*r01);
IkReal x13778=(r22*sj5);
IkReal x13779=(cj5*cj6);
IkReal x13780=(cj1*sj2);
IkReal x13781=(r21*sj6);
IkReal x13782=(cj5*r20*sj6);
CheckValue<IkReal> x13783=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x13783.valid){
continue;
}
CheckValue<IkReal> x13784 = IKatan2WithCheck(IkReal((((sj2*x13776*x13781))+((cj6*r00*x13780))+(((-1.0)*sj6*x13775*x13777))+(((-1.0)*x13774*x13781))+(((-1.0)*x13773*x13775*x13776))+((x13773*x13774)))),IkReal((((x13774*x13778))+((r02*sj5*x13780))+(((-1.0)*x13775*x13776*x13778))+((cj5*r00*sj6*x13780))+(((-1.0)*x13775*x13776*x13782))+((sj2*x13777*x13779))+((r21*x13774*x13779))+((x13774*x13782))+(((-1.0)*r21*x13775*x13776*x13779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13784.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13783.value)))+(x13784.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13785=IKsin(j4);
IkReal x13786=IKcos(j4);
IkReal x13787=(r01*sj3);
IkReal x13788=((1.0)*sj5);
IkReal x13789=(cj3*r02);
IkReal x13790=((1.0)*cj6);
IkReal x13791=(cj5*r12);
IkReal x13792=(cj0*sj2);
IkReal x13793=(sj3*sj6);
IkReal x13794=((1.0)*r20);
IkReal x13795=(cj0*cj2);
IkReal x13796=(cj3*sj6);
IkReal x13797=((1.0)*cj1);
IkReal x13798=((1.0)*cj5);
IkReal x13799=(cj6*sj5);
IkReal x13800=(r21*sj3);
IkReal x13801=((1.0)*r00);
IkReal x13802=((1.0)*r10);
IkReal x13803=(cj3*r22);
IkReal x13804=(r11*sj3);
IkReal x13805=((1.0)*sj0);
IkReal x13806=(cj3*x13790);
IkReal x13807=(cj5*x13786);
IkReal x13808=(sj6*x13785);
IkReal x13809=(r10*x13785);
IkReal x13810=(r00*x13785);
IkReal x13811=(cj6*x13786);
IkReal x13812=(sj3*x13786);
IkReal x13813=(cj5*x13785);
IkReal x13814=(r20*x13785);
IkReal x13815=((1.0)*sj6*x13786);
evalcond[0]=((((-1.0)*r21*x13815))+((cj1*sj2))+(((-1.0)*r21*x13790*x13813))+(((-1.0)*cj5*x13794*x13808))+(((-1.0)*r22*x13785*x13788))+((r20*x13811)));
evalcond[1]=(((r10*x13811))+x13795+(((-1.0)*r11*x13815))+(((-1.0)*r12*x13785*x13788))+(((-1.0)*r11*x13790*x13813))+((sj0*sj1*sj2))+(((-1.0)*r10*x13798*x13808)));
evalcond[2]=(((r00*x13811))+(((-1.0)*r02*x13785*x13788))+(((-1.0)*r00*x13798*x13808))+(((-1.0)*cj2*x13805))+((sj1*x13792))+(((-1.0)*r01*x13815))+(((-1.0)*r01*x13790*x13813)));
evalcond[3]=(sj1+(((-1.0)*cj3*cj6*r21*x13788))+(((-1.0)*x13790*x13800*x13807))+((cj5*x13803))+((r21*x13785*x13793))+(((-1.0)*sj3*x13790*x13814))+(((-1.0)*r22*x13788*x13812))+(((-1.0)*x13793*x13794*x13807))+(((-1.0)*r20*x13788*x13796)));
evalcond[4]=((((-1.0)*x13794*x13796*x13807))+(((-1.0)*cj2*x13797))+((r20*sj5*x13793))+((x13799*x13800))+((r21*x13785*x13796))+(((-1.0)*x13786*x13788*x13803))+(((-1.0)*r22*sj3*x13798))+(((-1.0)*r21*x13806*x13807))+(((-1.0)*x13806*x13814)));
evalcond[5]=((((-1.0)*x13787*x13790*x13807))+(((-1.0)*cj3*cj6*r01*x13788))+((cj5*x13789))+(((-1.0)*r00*x13788*x13796))+(((-1.0)*r02*x13788*x13812))+(((-1.0)*sj3*x13790*x13810))+(((-1.0)*cj0*x13797))+((x13787*x13808))+(((-1.0)*r00*x13786*x13793*x13798)));
evalcond[6]=((((-1.0)*sj0*x13797))+(((-1.0)*r10*x13788*x13796))+(((-1.0)*r10*x13786*x13793*x13798))+(((-1.0)*x13790*x13804*x13807))+(((-1.0)*sj3*x13790*x13809))+(((-1.0)*r12*x13788*x13812))+(((-1.0)*cj3*cj6*r11*x13788))+((cj3*x13791))+((r11*x13785*x13793)));
evalcond[7]=((((-1.0)*x13806*x13809))+x13792+((x13799*x13804))+(((-1.0)*cj2*sj1*x13805))+(((-1.0)*sj3*x13791))+(((-1.0)*cj3*r12*x13786*x13788))+(((-1.0)*r10*x13786*x13796*x13798))+((r11*x13785*x13796))+(((-1.0)*r11*x13806*x13807))+((r10*sj5*x13793)));
evalcond[8]=(((r00*sj5*x13793))+(((-1.0)*r02*sj3*x13798))+(((-1.0)*sj2*x13805))+(((-1.0)*x13786*x13788*x13789))+(((-1.0)*r00*x13786*x13796*x13798))+((x13787*x13799))+((r01*x13785*x13796))+(((-1.0)*sj1*x13795))+(((-1.0)*r01*x13806*x13807))+(((-1.0)*x13806*x13810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13816=cj6*cj6;
IkReal x13817=r20*r20;
IkReal x13818=cj5*cj5;
IkReal x13819=r21*r21;
IkReal x13820=r22*r22;
IkReal x13821=(cj6*sj5);
IkReal x13822=(cj3*r22);
IkReal x13823=(cj5*r21);
IkReal x13824=(sj3*sj6);
IkReal x13825=((1.0)*r22);
IkReal x13826=(cj6*r21);
IkReal x13827=(cj3*cj6);
IkReal x13828=(cj1*cj2);
IkReal x13829=(cj5*sj3);
IkReal x13830=(cj6*r20);
IkReal x13831=((1.0)*cj3);
IkReal x13832=(cj3*sj6);
IkReal x13833=(cj5*r20);
IkReal x13834=((2.0)*r20);
IkReal x13835=(r21*sj3);
IkReal x13836=((1.0)*x13817);
IkReal x13837=(cj3*x13816);
IkReal x13838=((1.0)*cj1*sj2);
IkReal x13839=(sj5*x13816);
IkReal x13840=(r22*x13818);
IkReal x13841=((1.0)*x13819);
IkReal x13842=(cj3*x13818);
CheckValue<IkReal> x13843 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*sj2*sj6*x13831*x13833))+((x13819*x13821*x13824))+(((-1.0)*x13823*x13824*x13825))+(((-1.0)*sj5*x13822*x13838))+(((-1.0)*r21*sj6*x13828))+(((-1.0)*x13821*x13824*x13836))+((r22*x13829*x13830))+(((-1.0)*x13823*x13827*x13838))+(((-1.0)*x13834*x13835*x13839))+((r20*sj5*x13835))+((x13828*x13830)))),IkReal((((cj1*r20*sj2*x13827))+((r22*sj5*x13828))+(((-1.0)*sj3*x13825*x13826))+(((-1.0)*sj5*x13829*x13836))+((x13817*x13829*x13839))+(((2.0)*sj3*x13826*x13840))+((cj6*x13823*x13828))+((x13824*x13834*x13840))+(((-1.0)*x13829*x13839*x13841))+(((-1.0)*cj1*r21*sj2*sj6*x13831))+(((-1.0)*x13821*x13823*x13824*x13834))+((sj5*x13820*x13829))+((sj6*x13828*x13833))+(((-1.0)*r20*x13824*x13825)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13843.valid){
continue;
}
CheckValue<IkReal> x13844=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13818*x13826*x13832*x13834))+(((-1.0)*x13820*x13831))+(((-1.0)*x13816*x13818*x13819*x13831))+(((-2.0)*x13821*x13822*x13823))+((x13819*x13837))+(((-1.0)*x13816*x13817*x13831))+(((-2.0)*sj5*sj6*x13822*x13833))+((x13826*x13832*x13834))+(((-1.0)*x13817*x13818*x13831))+((x13820*x13842))+((x13817*x13818*x13837))+(((-1.0)*x13819*x13831)))),-1);
if(!x13844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13843.value)+(((1.5707963267949)*(x13844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x13845=IKsin(j4);
IkReal x13846=IKcos(j4);
IkReal x13847=(cj3*r21);
IkReal x13848=((1.0)*sj5);
IkReal x13849=(r21*sj3);
IkReal x13850=((1.0)*cj5);
IkReal x13851=(r22*sj3);
IkReal x13852=(cj6*r20);
IkReal x13853=(cj3*r22);
IkReal x13854=(sj6*x13845);
IkReal x13855=(r20*sj3*sj6);
IkReal x13856=(cj3*r20*sj6);
IkReal x13857=((1.0)*x13845);
IkReal x13858=(x13846*x13850);
evalcond[0]=(((cj1*sj2))+(((-1.0)*r22*x13845*x13848))+(((-1.0)*r20*x13850*x13854))+(((-1.0)*r21*sj6*x13846))+(((-1.0)*cj6*r21*x13845*x13850))+((x13846*x13852)));
evalcond[1]=(((x13849*x13854))+(((-1.0)*cj6*x13849*x13858))+sj1+(((-1.0)*x13848*x13856))+(((-1.0)*x13855*x13858))+((cj5*x13853))+(((-1.0)*x13846*x13848*x13851))+(((-1.0)*cj6*x13847*x13848))+(((-1.0)*sj3*x13852*x13857)));
evalcond[2]=((((-1.0)*cj6*x13847*x13858))+(((-1.0)*cj3*x13852*x13857))+(((-1.0)*cj1*cj2))+(((-1.0)*x13856*x13858))+((sj5*x13855))+(((-1.0)*x13846*x13848*x13853))+(((-1.0)*x13850*x13851))+((x13847*x13854))+((cj6*sj5*x13849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x13859=cj1*cj1;
IkReal x13860=((1.0)+(((-1.0)*x13859))+((x13859*(cj2*cj2))));
j0eval[0]=x13860;
j0eval[1]=IKsign(x13860);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x13861=(cj1*cj2);
j0eval[0]=((((-1.0)*sj1))+cj2+(((5.28144927536232)*x13861)));
j0eval[1]=IKsign(((((364.42)*x13861))+(((-69.0)*sj1))+(((69.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x13862=cj1*cj1;
IkReal x13863=(sj1*sj2);
IkReal x13864=((5.28144927536232)*cj1);
IkReal x13865=(cj2*x13862);
j0eval[0]=(x13863+((sj2*x13865))+((x13863*x13864)));
j0eval[1]=((((-1.0)*sj1))+(((-1.0)*x13865))+(((-1.0)*sj1*x13864)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13866=(cj4*sj6);
IkReal x13867=((1.0)*r01);
IkReal x13868=(cj5*sj4);
IkReal x13869=(sj4*sj5);
IkReal x13870=(cj4*cj6);
if( IKabs(((((-1.0)*r00*sj6*x13868))+(((-1.0)*r02*x13869))+((r00*x13870))+(((-1.0)*x13866*x13867))+(((-1.0)*cj6*x13867*x13868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x13870))+((r11*x13866))+((r12*x13869))+((r10*sj6*x13868))+((cj6*r11*x13868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj6*x13868))+(((-1.0)*r02*x13869))+((r00*x13870))+(((-1.0)*x13866*x13867))+(((-1.0)*cj6*x13867*x13868))))+IKsqr(((((-1.0)*r10*x13870))+((r11*x13866))+((r12*x13869))+((r10*sj6*x13868))+((cj6*r11*x13868))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj6*x13868))+(((-1.0)*r02*x13869))+((r00*x13870))+(((-1.0)*x13866*x13867))+(((-1.0)*cj6*x13867*x13868))), ((((-1.0)*r10*x13870))+((r11*x13866))+((r12*x13869))+((r10*sj6*x13868))+((cj6*r11*x13868))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13871=IKcos(j0);
IkReal x13872=IKsin(j0);
IkReal x13873=((1.0)*sj4);
IkReal x13874=(cj6*r10);
IkReal x13875=(sj5*sj6);
IkReal x13876=(cj3*cj5);
IkReal x13877=(r00*sj3);
IkReal x13878=((0.36442)*cj1);
IkReal x13879=(cj6*r01);
IkReal x13880=((1.0)*cj3);
IkReal x13881=((0.01)*cj5);
IkReal x13882=(r10*sj6);
IkReal x13883=(r12*sj5);
IkReal x13884=(sj3*sj5);
IkReal x13885=(r02*sj5);
IkReal x13886=(cj6*r00);
IkReal x13887=((1.0)*cj4);
IkReal x13888=(r00*sj6);
IkReal x13889=((0.37429)*cj5);
IkReal x13890=(cj6*r11);
IkReal x13891=((0.37429)*sj5);
IkReal x13892=(cj5*x13890);
IkReal x13893=((0.069)*x13872);
IkReal x13894=(r11*sj4*sj6);
IkReal x13895=(sj3*x13887);
IkReal x13896=(r01*sj4*sj6);
IkReal x13897=((1.0)*x13872);
IkReal x13898=((1.0)*x13871);
IkReal x13899=((0.069)*x13871);
IkReal x13900=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*x13873*x13883))+x13871+(((-1.0)*r11*sj6*x13887))+(((-1.0)*cj5*x13873*x13882))+((cj4*x13874))+(((-1.0)*x13873*x13892)));
evalcond[1]=((((-1.0)*x13873*x13885))+(((-1.0)*cj5*x13873*x13888))+(((-1.0)*x13897))+(((-1.0)*cj5*x13873*x13879))+((cj4*x13886))+(((-1.0)*r01*sj6*x13887)));
evalcond[2]=((((-1.0)*x13879*x13891))+(((-1.0)*sj1*x13899))+((x13881*x13888))+(((0.01)*x13885))+x13899+((x13871*x13878))+((r02*x13889))+(((-1.0)*px))+((x13879*x13881))+(((-0.37429)*r00*x13875)));
evalcond[3]=((((-1.0)*sj1*x13893))+((x13881*x13882))+(((0.01)*x13883))+((x13881*x13890))+x13893+((x13872*x13878))+(((-1.0)*py))+(((-0.37429)*r10*x13875))+((r12*x13889))+(((-1.0)*x13890*x13891)));
evalcond[4]=((((-1.0)*cj3*x13873*x13874))+(((-1.0)*sj1*x13897))+((cj3*x13894))+(((-1.0)*cj4*x13880*x13883))+(((-1.0)*r12*x13900))+((x13884*x13890))+((r10*sj3*x13875))+(((-1.0)*x13876*x13887*x13890))+(((-1.0)*x13876*x13882*x13887)));
evalcond[5]=((((-1.0)*sj1*x13898))+((cj3*x13896))+(((-1.0)*cj4*x13880*x13885))+((x13879*x13884))+((x13875*x13877))+(((-1.0)*x13876*x13879*x13887))+(((-1.0)*r02*x13900))+(((-1.0)*cj3*x13873*x13886))+(((-1.0)*x13876*x13887*x13888)));
evalcond[6]=((((-1.0)*cj1*x13898))+((sj3*x13896))+(((-1.0)*sj5*x13879*x13880))+(((-1.0)*r00*x13875*x13880))+(((-1.0)*cj6*x13873*x13877))+(((-1.0)*cj5*sj6*x13877*x13887))+(((-1.0)*r02*x13884*x13887))+(((-1.0)*cj5*x13879*x13895))+((r02*x13876)));
evalcond[7]=((((-1.0)*cj1*x13897))+((sj3*x13894))+(((-1.0)*x13892*x13895))+(((-1.0)*x13883*x13895))+((r12*x13876))+(((-1.0)*cj5*x13882*x13895))+(((-1.0)*r10*x13875*x13880))+(((-1.0)*sj3*x13873*x13874))+(((-1.0)*sj5*x13880*x13890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13901=((1.0)*cj4);
IkReal x13902=(sj4*sj5);
IkReal x13903=(cj5*sj4*sj6);
IkReal x13904=(cj5*cj6*sj4);
if( IKabs((((r02*x13902))+((r01*x13904))+((r00*x13903))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x13901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x13903))+((cj4*cj6*r10))+(((-1.0)*r11*sj6*x13901))+(((-1.0)*r12*x13902))+(((-1.0)*r11*x13904)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x13902))+((r01*x13904))+((r00*x13903))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x13901))))+IKsqr(((((-1.0)*r10*x13903))+((cj4*cj6*r10))+(((-1.0)*r11*sj6*x13901))+(((-1.0)*r12*x13902))+(((-1.0)*r11*x13904))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*x13902))+((r01*x13904))+((r00*x13903))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x13901))), ((((-1.0)*r10*x13903))+((cj4*cj6*r10))+(((-1.0)*r11*sj6*x13901))+(((-1.0)*r12*x13902))+(((-1.0)*r11*x13904))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13905=IKcos(j0);
IkReal x13906=IKsin(j0);
IkReal x13907=((1.0)*sj4);
IkReal x13908=(cj6*sj3);
IkReal x13909=(sj5*sj6);
IkReal x13910=(cj3*cj5);
IkReal x13911=(r00*sj3);
IkReal x13912=((0.36442)*cj1);
IkReal x13913=(cj5*r01);
IkReal x13914=((1.0)*cj3);
IkReal x13915=(r10*sj6);
IkReal x13916=((0.01)*cj5);
IkReal x13917=(r12*sj5);
IkReal x13918=(r01*sj5);
IkReal x13919=((1.0)*cj4);
IkReal x13920=(r02*sj5);
IkReal x13921=(cj3*cj6);
IkReal x13922=(r00*sj6);
IkReal x13923=((0.37429)*cj5);
IkReal x13924=(cj4*cj6);
IkReal x13925=(r11*sj5);
IkReal x13926=(cj5*sj3);
IkReal x13927=((0.37429)*cj6);
IkReal x13928=(cj5*cj6*r11);
IkReal x13929=((0.069)*x13906);
IkReal x13930=(r11*sj4*sj6);
IkReal x13931=(r01*sj4*sj6);
IkReal x13932=((1.0)*x13905);
IkReal x13933=((0.069)*x13905);
evalcond[0]=((((-1.0)*cj6*x13907*x13913))+x13906+(((-1.0)*r01*sj6*x13919))+((r00*x13924))+(((-1.0)*cj5*x13907*x13922))+(((-1.0)*x13907*x13920)));
evalcond[1]=(((r10*x13924))+(((-1.0)*x13932))+(((-1.0)*x13907*x13917))+(((-1.0)*r11*sj6*x13919))+(((-1.0)*x13907*x13928))+(((-1.0)*cj5*x13907*x13915)));
evalcond[2]=((((0.01)*cj6*x13913))+((sj1*x13933))+x13933+(((-1.0)*px))+((x13916*x13922))+((r02*x13923))+(((0.01)*x13920))+(((-0.37429)*r00*x13909))+((x13905*x13912))+(((-1.0)*x13918*x13927)));
evalcond[3]=(((x13906*x13912))+((sj1*x13929))+(((0.01)*x13917))+(((-1.0)*x13925*x13927))+x13929+(((-1.0)*py))+((cj6*r11*x13916))+((x13915*x13916))+(((-0.37429)*r10*x13909))+((r12*x13923)));
evalcond[4]=((((-1.0)*x13910*x13915*x13919))+(((-1.0)*r12*x13926))+(((-1.0)*r10*x13907*x13921))+((cj3*x13930))+(((-1.0)*cj6*r11*x13910*x13919))+(((-1.0)*cj4*x13914*x13917))+((sj1*x13906))+((x13908*x13925))+((r10*sj3*x13909)));
evalcond[5]=((((-1.0)*cj4*x13914*x13920))+((cj3*x13931))+(((-1.0)*x13910*x13919*x13922))+((x13909*x13911))+(((-1.0)*cj6*r01*x13910*x13919))+(((-1.0)*r00*x13907*x13921))+((sj1*x13905))+((x13908*x13918))+(((-1.0)*r02*x13926)));
evalcond[6]=(((sj3*x13931))+(((-1.0)*cj5*sj6*x13911*x13919))+(((-1.0)*sj3*x13919*x13920))+((r02*x13910))+(((-1.0)*cj6*x13914*x13918))+(((-1.0)*x13908*x13913*x13919))+(((-1.0)*cj1*x13932))+(((-1.0)*r00*x13907*x13908))+(((-1.0)*r00*x13909*x13914)));
evalcond[7]=(((sj3*x13930))+(((-1.0)*sj3*x13917*x13919))+(((-1.0)*x13915*x13919*x13926))+(((-1.0)*cj5*r11*x13908*x13919))+((r12*x13910))+(((-1.0)*r10*x13909*x13914))+(((-1.0)*cj1*x13906))+(((-1.0)*cj6*x13914*x13925))+(((-1.0)*r10*x13907*x13908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13934=((0.842227766698146)*sj5);
IkReal x13935=(r10*sj6);
IkReal x13936=(cj6*r01);
IkReal x13937=((0.00358229604870815)*cj5);
IkReal x13938=(cj6*r11);
IkReal x13939=((0.0225020109192911)*sj5);
IkReal x13940=((0.134081758807097)*sj5);
IkReal x13941=(r00*sj6);
IkReal x13942=((0.134081758807097)*cj5);
IkReal x13943=((0.0225020109192911)*cj5);
IkReal x13944=((0.842227766698146)*cj5);
IkReal x13945=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*x13935*x13943))+(((-1.0)*x13940*x13941))+((x13934*x13938))+((x13934*x13935))+(((-1.0)*x13936*x13940))+(((-1.0)*r12*x13944))+(((2.25020109192911)*py))+(((-1.0)*r12*x13939))+(((-0.358229604870815)*px))+((x13937*x13941))+(((-1.0)*x13938*x13943))+((x13936*x13937))+((r02*x13942))+((r02*x13945)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x13937*x13938))+((x13934*x13936))+(((-1.0)*x13941*x13943))+(((-1.0)*x13936*x13943))+(((-1.0)*r12*x13945))+(((-1.0)*r12*x13942))+(((-1.0)*x13935*x13937))+(((2.25020109192911)*px))+((x13934*x13941))+((x13935*x13940))+(((0.358229604870815)*py))+(((-1.0)*r02*x13944))+(((-1.0)*r02*x13939))+((x13938*x13940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x13935*x13943))+(((-1.0)*x13940*x13941))+((x13934*x13938))+((x13934*x13935))+(((-1.0)*x13936*x13940))+(((-1.0)*r12*x13944))+(((2.25020109192911)*py))+(((-1.0)*r12*x13939))+(((-0.358229604870815)*px))+((x13937*x13941))+(((-1.0)*x13938*x13943))+((x13936*x13937))+((r02*x13942))+((r02*x13945))))+IKsqr(((((-1.0)*x13937*x13938))+((x13934*x13936))+(((-1.0)*x13941*x13943))+(((-1.0)*x13936*x13943))+(((-1.0)*r12*x13945))+(((-1.0)*r12*x13942))+(((-1.0)*x13935*x13937))+(((2.25020109192911)*px))+((x13934*x13941))+((x13935*x13940))+(((0.358229604870815)*py))+(((-1.0)*r02*x13944))+(((-1.0)*r02*x13939))+((x13938*x13940))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x13935*x13943))+(((-1.0)*x13940*x13941))+((x13934*x13938))+((x13934*x13935))+(((-1.0)*x13936*x13940))+(((-1.0)*r12*x13944))+(((2.25020109192911)*py))+(((-1.0)*r12*x13939))+(((-0.358229604870815)*px))+((x13937*x13941))+(((-1.0)*x13938*x13943))+((x13936*x13937))+((r02*x13942))+((r02*x13945))), ((((-1.0)*x13937*x13938))+((x13934*x13936))+(((-1.0)*x13941*x13943))+(((-1.0)*x13936*x13943))+(((-1.0)*r12*x13945))+(((-1.0)*r12*x13942))+(((-1.0)*x13935*x13937))+(((2.25020109192911)*px))+((x13934*x13941))+((x13935*x13940))+(((0.358229604870815)*py))+(((-1.0)*r02*x13944))+(((-1.0)*r02*x13939))+((x13938*x13940))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13946=IKsin(j0);
IkReal x13947=IKcos(j0);
IkReal x13948=(r10*sj3);
IkReal x13949=(cj3*r00);
IkReal x13950=(sj5*sj6);
IkReal x13951=(cj5*r12);
IkReal x13952=(r00*sj3);
IkReal x13953=(cj3*r10);
IkReal x13954=(cj5*sj6);
IkReal x13955=((1.0)*cj4);
IkReal x13956=(cj5*r02);
IkReal x13957=(cj3*r01);
IkReal x13958=(sj4*sj6);
IkReal x13959=(r12*sj5);
IkReal x13960=(cj6*sj5);
IkReal x13961=(r01*sj3);
IkReal x13962=(r11*sj3);
IkReal x13963=((1.0)*sj3);
IkReal x13964=(r02*sj5);
IkReal x13965=(cj5*cj6);
IkReal x13966=(cj3*r11);
IkReal x13967=((1.0)*x13946);
IkReal x13968=((1.0)*cj6*sj4);
IkReal x13969=(r11*x13958);
IkReal x13970=((0.01)*x13965);
evalcond[0]=((((-0.37429)*r01*x13960))+(((-0.069)*x13946))+(((0.01)*x13964))+(((0.43342)*x13947))+(((-1.0)*px))+(((-0.37429)*r00*x13950))+(((0.01)*r00*x13954))+((r01*x13970))+(((0.37429)*x13956)));
evalcond[1]=((((-0.37429)*r11*x13960))+(((-0.37429)*r10*x13950))+((r11*x13970))+(((0.43342)*x13946))+(((-1.0)*py))+(((0.01)*x13959))+(((0.37429)*x13951))+(((0.069)*x13947))+(((0.01)*r10*x13954)));
evalcond[2]=(((x13948*x13950))+(((-1.0)*x13953*x13968))+((x13958*x13966))+x13947+(((-1.0)*x13955*x13965*x13966))+(((-1.0)*x13951*x13963))+(((-1.0)*cj3*x13955*x13959))+((x13960*x13962))+(((-1.0)*x13953*x13954*x13955)));
evalcond[3]=((((-1.0)*cj3*x13955*x13964))+(((-1.0)*x13955*x13957*x13965))+(((-1.0)*x13949*x13968))+((x13950*x13952))+((x13960*x13961))+(((-1.0)*x13967))+((x13957*x13958))+(((-1.0)*x13949*x13954*x13955))+(((-1.0)*x13956*x13963)));
evalcond[4]=((((-1.0)*x13957*x13960))+(((-1.0)*x13947))+((x13958*x13961))+(((-1.0)*x13949*x13950))+((cj3*x13956))+(((-1.0)*x13952*x13954*x13955))+(((-1.0)*sj3*x13955*x13964))+(((-1.0)*x13955*x13961*x13965))+(((-1.0)*x13952*x13968)));
evalcond[5]=((((-1.0)*sj3*x13955*x13959))+(((-1.0)*x13948*x13968))+((x13958*x13962))+((cj3*x13951))+(((-1.0)*x13950*x13953))+(((-1.0)*x13948*x13954*x13955))+(((-1.0)*x13967))+(((-1.0)*x13955*x13962*x13965))+(((-1.0)*x13960*x13966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13971=((0.842227766698146)*sj5);
IkReal x13972=(r10*sj6);
IkReal x13973=(cj6*r01);
IkReal x13974=((0.00358229604870815)*cj5);
IkReal x13975=(cj6*r11);
IkReal x13976=((0.0225020109192911)*sj5);
IkReal x13977=((0.134081758807097)*sj5);
IkReal x13978=(r00*sj6);
IkReal x13979=((0.134081758807097)*cj5);
IkReal x13980=((0.0225020109192911)*cj5);
IkReal x13981=((0.842227766698146)*cj5);
IkReal x13982=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*r02*x13979))+(((-1.0)*x13973*x13974))+(((2.25020109192911)*py))+(((-1.0)*r12*x13976))+(((-1.0)*x13972*x13980))+(((-1.0)*x13975*x13980))+(((-1.0)*r02*x13982))+(((0.358229604870815)*px))+((x13971*x13975))+((x13971*x13972))+(((-1.0)*x13974*x13978))+(((-1.0)*r12*x13981))+((x13973*x13977))+((x13977*x13978)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x13972*x13977))+((r12*x13982))+(((-1.0)*r02*x13976))+(((-1.0)*x13978*x13980))+(((2.25020109192911)*px))+(((-0.358229604870815)*py))+(((-1.0)*r02*x13981))+((x13974*x13975))+((x13971*x13978))+((x13971*x13973))+(((-1.0)*x13975*x13977))+((r12*x13979))+(((-1.0)*x13973*x13980))+((x13972*x13974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x13979))+(((-1.0)*x13973*x13974))+(((2.25020109192911)*py))+(((-1.0)*r12*x13976))+(((-1.0)*x13972*x13980))+(((-1.0)*x13975*x13980))+(((-1.0)*r02*x13982))+(((0.358229604870815)*px))+((x13971*x13975))+((x13971*x13972))+(((-1.0)*x13974*x13978))+(((-1.0)*r12*x13981))+((x13973*x13977))+((x13977*x13978))))+IKsqr(((((-1.0)*x13972*x13977))+((r12*x13982))+(((-1.0)*r02*x13976))+(((-1.0)*x13978*x13980))+(((2.25020109192911)*px))+(((-0.358229604870815)*py))+(((-1.0)*r02*x13981))+((x13974*x13975))+((x13971*x13978))+((x13971*x13973))+(((-1.0)*x13975*x13977))+((r12*x13979))+(((-1.0)*x13973*x13980))+((x13972*x13974))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x13979))+(((-1.0)*x13973*x13974))+(((2.25020109192911)*py))+(((-1.0)*r12*x13976))+(((-1.0)*x13972*x13980))+(((-1.0)*x13975*x13980))+(((-1.0)*r02*x13982))+(((0.358229604870815)*px))+((x13971*x13975))+((x13971*x13972))+(((-1.0)*x13974*x13978))+(((-1.0)*r12*x13981))+((x13973*x13977))+((x13977*x13978))), ((((-1.0)*x13972*x13977))+((r12*x13982))+(((-1.0)*r02*x13976))+(((-1.0)*x13978*x13980))+(((2.25020109192911)*px))+(((-0.358229604870815)*py))+(((-1.0)*r02*x13981))+((x13974*x13975))+((x13971*x13978))+((x13971*x13973))+(((-1.0)*x13975*x13977))+((r12*x13979))+(((-1.0)*x13973*x13980))+((x13972*x13974))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13983=IKsin(j0);
IkReal x13984=IKcos(j0);
IkReal x13985=(r10*sj3);
IkReal x13986=(cj3*r00);
IkReal x13987=(sj5*sj6);
IkReal x13988=(cj5*r12);
IkReal x13989=(r00*sj3);
IkReal x13990=((1.0)*cj3);
IkReal x13991=(cj5*r02);
IkReal x13992=((0.01)*cj5);
IkReal x13993=(r10*sj6);
IkReal x13994=(cj6*r11);
IkReal x13995=(cj4*cj5);
IkReal x13996=((1.0)*sj3);
IkReal x13997=(cj6*r01);
IkReal x13998=((1.0)*sj6);
IkReal x13999=((0.01)*sj5);
IkReal x14000=((1.0)*x13984);
IkReal x14001=((1.0)*cj6*sj4);
IkReal x14002=(sj5*x13997);
IkReal x14003=(r11*sj4*sj6);
IkReal x14004=(cj4*r12*sj5);
IkReal x14005=(r01*sj4*sj6);
IkReal x14006=(cj4*r02*sj5);
evalcond[0]=((((0.43342)*x13984))+(((0.069)*x13983))+((x13992*x13997))+((r02*x13999))+(((-0.37429)*r00*x13987))+(((-1.0)*px))+((r00*sj6*x13992))+(((-0.37429)*x14002))+(((0.37429)*x13991)));
evalcond[1]=((((0.43342)*x13983))+(((0.37429)*x13988))+((x13992*x13994))+((x13992*x13993))+(((-0.37429)*r10*x13987))+(((-0.37429)*sj5*x13994))+((r12*x13999))+(((-1.0)*py))+(((-0.069)*x13984)));
evalcond[2]=((((-1.0)*x13986*x14001))+(((-1.0)*x13990*x13995*x13997))+(((-1.0)*x13986*x13995*x13998))+x13983+((x13987*x13989))+((sj3*x14002))+(((-1.0)*x13991*x13996))+((cj3*x14005))+(((-1.0)*x13990*x14006)));
evalcond[3]=((((-1.0)*x13990*x13994*x13995))+(((-1.0)*x13988*x13996))+((sj3*sj5*x13994))+(((-1.0)*x13990*x13993*x13995))+(((-1.0)*cj6*r10*sj4*x13990))+((x13985*x13987))+((cj3*x14003))+(((-1.0)*x13990*x14004))+(((-1.0)*x14000)));
evalcond[4]=((((-1.0)*x13995*x13996*x13997))+((cj3*x13991))+(((-1.0)*x13989*x14001))+(((-1.0)*x13986*x13987))+((sj3*x14005))+(((-1.0)*x13996*x14006))+(((-1.0)*x13990*x14002))+(((-1.0)*x13989*x13995*x13998))+(((-1.0)*x14000)));
evalcond[5]=((((-1.0)*x13985*x14001))+(((-1.0)*r10*x13987*x13990))+((cj3*x13988))+(((-1.0)*x13985*x13995*x13998))+(((-1.0)*sj5*x13990*x13994))+((sj3*x14003))+(((-1.0)*x13996*x14004))+(((-1.0)*x13994*x13995*x13996))+(((-1.0)*x13983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14007=((0.0320990151198118)*sj5);
IkReal x14008=((0.00749723120732182)*sj5);
IkReal x14009=(cj6*r01);
IkReal x14010=((0.00749723120732182)*cj5);
IkReal x14011=(r00*sj6);
IkReal x14012=((1.20143403691943)*sj5);
IkReal x14013=((0.0320990151198118)*cj5);
IkReal x14014=(r10*sj6);
IkReal x14015=((0.280613866858848)*cj5);
IkReal x14016=((1.20143403691943)*cj5);
IkReal x14017=((0.280613866858848)*sj5);
IkReal x14018=(cj6*r11);
IkReal x14019=(cj6*x14012);
IkReal x14020=(cj6*x14013);
if( IKabs(((((-0.749723120732182)*px))+(((-1.0)*x14012*x14014))+(((-1.0)*x14012*x14018))+((r02*x14008))+((r02*x14015))+(((-1.0)*x14009*x14017))+((r12*x14007))+((r12*x14016))+((x14013*x14014))+((x14013*x14018))+((x14009*x14010))+((x14010*x14011))+(((-3.20990151198118)*py))+(((-1.0)*x14011*x14017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x14007))+((x14011*x14013))+((r02*x14016))+(((-1.0)*x14009*x14012))+((x14014*x14017))+(((-1.0)*x14010*x14014))+(((-1.0)*x14010*x14018))+(((-1.0)*r12*x14015))+(((0.749723120732182)*py))+(((-1.0)*r12*x14008))+((x14009*x14013))+(((-3.20990151198118)*px))+(((-1.0)*x14011*x14012))+((x14017*x14018)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.749723120732182)*px))+(((-1.0)*x14012*x14014))+(((-1.0)*x14012*x14018))+((r02*x14008))+((r02*x14015))+(((-1.0)*x14009*x14017))+((r12*x14007))+((r12*x14016))+((x14013*x14014))+((x14013*x14018))+((x14009*x14010))+((x14010*x14011))+(((-3.20990151198118)*py))+(((-1.0)*x14011*x14017))))+IKsqr((((r02*x14007))+((x14011*x14013))+((r02*x14016))+(((-1.0)*x14009*x14012))+((x14014*x14017))+(((-1.0)*x14010*x14014))+(((-1.0)*x14010*x14018))+(((-1.0)*r12*x14015))+(((0.749723120732182)*py))+(((-1.0)*r12*x14008))+((x14009*x14013))+(((-3.20990151198118)*px))+(((-1.0)*x14011*x14012))+((x14017*x14018))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.749723120732182)*px))+(((-1.0)*x14012*x14014))+(((-1.0)*x14012*x14018))+((r02*x14008))+((r02*x14015))+(((-1.0)*x14009*x14017))+((r12*x14007))+((r12*x14016))+((x14013*x14014))+((x14013*x14018))+((x14009*x14010))+((x14010*x14011))+(((-3.20990151198118)*py))+(((-1.0)*x14011*x14017))), (((r02*x14007))+((x14011*x14013))+((r02*x14016))+(((-1.0)*x14009*x14012))+((x14014*x14017))+(((-1.0)*x14010*x14014))+(((-1.0)*x14010*x14018))+(((-1.0)*r12*x14015))+(((0.749723120732182)*py))+(((-1.0)*r12*x14008))+((x14009*x14013))+(((-3.20990151198118)*px))+(((-1.0)*x14011*x14012))+((x14017*x14018))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14021=IKcos(j0);
IkReal x14022=IKsin(j0);
IkReal x14023=(r10*sj3);
IkReal x14024=(cj3*r00);
IkReal x14025=(sj5*sj6);
IkReal x14026=(cj3*cj5);
IkReal x14027=(r00*sj3);
IkReal x14028=(cj3*r10);
IkReal x14029=(cj5*sj6);
IkReal x14030=((1.0)*cj4);
IkReal x14031=(cj5*cj6);
IkReal x14032=(r01*sj3);
IkReal x14033=(cj3*r01);
IkReal x14034=(sj4*sj6);
IkReal x14035=(r12*sj5);
IkReal x14036=(cj6*sj5);
IkReal x14037=((0.37429)*cj5);
IkReal x14038=(r11*sj3);
IkReal x14039=(r02*sj5);
IkReal x14040=((1.0)*cj6*sj4);
IkReal x14041=(r11*x14034);
IkReal x14042=((1.0)*cj5*sj3);
evalcond[0]=((((-0.069)*x14022))+(((-0.37429)*r00*x14025))+(((-0.37429)*r01*x14036))+(((0.01)*x14039))+(((-1.0)*px))+(((0.01)*r00*x14029))+(((0.01)*r01*x14031))+(((-0.29542)*x14021))+((r02*x14037)));
evalcond[1]=((((0.01)*r10*x14029))+(((-0.37429)*r11*x14036))+(((0.069)*x14021))+(((-0.37429)*r10*x14025))+(((0.01)*x14035))+(((0.01)*r11*x14031))+(((-1.0)*py))+(((-0.29542)*x14022))+((r12*x14037)));
evalcond[2]=(((x14023*x14025))+(((-1.0)*cj6*r11*x14026*x14030))+((x14036*x14038))+(((-1.0)*r12*x14042))+((cj3*x14041))+(((-1.0)*x14028*x14040))+(((-1.0)*cj3*x14030*x14035))+(((-1.0)*r10*sj6*x14026*x14030))+x14021);
evalcond[3]=((((-1.0)*x14027*x14029*x14030))+(((-1.0)*x14033*x14036))+(((-1.0)*x14024*x14025))+((x14032*x14034))+(((-1.0)*sj3*x14030*x14039))+(((-1.0)*x14030*x14031*x14032))+(((-1.0)*x14027*x14040))+x14021+((r02*x14026)));
evalcond[4]=(((x14034*x14038))+(((-1.0)*cj3*r11*x14036))+(((-1.0)*x14025*x14028))+(((-1.0)*x14023*x14029*x14030))+(((-1.0)*sj3*x14030*x14035))+(((-1.0)*x14023*x14040))+(((-1.0)*x14030*x14031*x14038))+x14022+((r12*x14026)));
evalcond[5]=((((-1.0)*x14024*x14029*x14030))+((x14025*x14027))+(((-1.0)*x14022))+((x14033*x14034))+(((-1.0)*x14024*x14040))+((x14032*x14036))+(((-1.0)*r02*x14042))+(((-1.0)*cj3*x14030*x14039))+(((-1.0)*cj6*r01*x14026*x14030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14043=((0.0320990151198118)*sj5);
IkReal x14044=((0.00749723120732182)*sj5);
IkReal x14045=(cj6*r01);
IkReal x14046=((0.00749723120732182)*cj5);
IkReal x14047=(r00*sj6);
IkReal x14048=((1.20143403691943)*sj5);
IkReal x14049=((0.0320990151198118)*cj5);
IkReal x14050=(r10*sj6);
IkReal x14051=((0.280613866858848)*cj5);
IkReal x14052=((1.20143403691943)*cj5);
IkReal x14053=((0.280613866858848)*sj5);
IkReal x14054=(cj6*r11);
IkReal x14055=(cj6*x14048);
IkReal x14056=(cj6*x14049);
if( IKabs(((((-1.0)*x14045*x14046))+((r12*x14052))+(((-1.0)*x14048*x14050))+(((-1.0)*x14048*x14054))+(((-1.0)*r02*x14051))+(((-1.0)*r02*x14044))+(((0.749723120732182)*px))+(((-1.0)*x14046*x14047))+((x14045*x14053))+(((-3.20990151198118)*py))+((x14049*x14050))+((x14049*x14054))+((r12*x14043))+((x14047*x14053)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.749723120732182)*py))+(((-1.0)*x14045*x14048))+((r12*x14051))+(((-1.0)*x14050*x14053))+(((-1.0)*x14053*x14054))+((r02*x14052))+(((-3.20990151198118)*px))+((x14047*x14049))+(((-1.0)*x14047*x14048))+((x14046*x14054))+((x14046*x14050))+((r02*x14043))+((r12*x14044))+((x14045*x14049)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14045*x14046))+((r12*x14052))+(((-1.0)*x14048*x14050))+(((-1.0)*x14048*x14054))+(((-1.0)*r02*x14051))+(((-1.0)*r02*x14044))+(((0.749723120732182)*px))+(((-1.0)*x14046*x14047))+((x14045*x14053))+(((-3.20990151198118)*py))+((x14049*x14050))+((x14049*x14054))+((r12*x14043))+((x14047*x14053))))+IKsqr(((((-0.749723120732182)*py))+(((-1.0)*x14045*x14048))+((r12*x14051))+(((-1.0)*x14050*x14053))+(((-1.0)*x14053*x14054))+((r02*x14052))+(((-3.20990151198118)*px))+((x14047*x14049))+(((-1.0)*x14047*x14048))+((x14046*x14054))+((x14046*x14050))+((r02*x14043))+((r12*x14044))+((x14045*x14049))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x14045*x14046))+((r12*x14052))+(((-1.0)*x14048*x14050))+(((-1.0)*x14048*x14054))+(((-1.0)*r02*x14051))+(((-1.0)*r02*x14044))+(((0.749723120732182)*px))+(((-1.0)*x14046*x14047))+((x14045*x14053))+(((-3.20990151198118)*py))+((x14049*x14050))+((x14049*x14054))+((r12*x14043))+((x14047*x14053))), ((((-0.749723120732182)*py))+(((-1.0)*x14045*x14048))+((r12*x14051))+(((-1.0)*x14050*x14053))+(((-1.0)*x14053*x14054))+((r02*x14052))+(((-3.20990151198118)*px))+((x14047*x14049))+(((-1.0)*x14047*x14048))+((x14046*x14054))+((x14046*x14050))+((r02*x14043))+((r12*x14044))+((x14045*x14049))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14057=IKcos(j0);
IkReal x14058=IKsin(j0);
IkReal x14059=(r10*sj3);
IkReal x14060=(cj3*r00);
IkReal x14061=(sj5*sj6);
IkReal x14062=(cj3*cj5);
IkReal x14063=(r00*sj3);
IkReal x14064=((1.0)*cj3);
IkReal x14065=(cj6*r01);
IkReal x14066=((0.37429)*sj5);
IkReal x14067=((0.01)*cj5);
IkReal x14068=(r10*sj6);
IkReal x14069=(cj6*r11);
IkReal x14070=((1.0)*cj4);
IkReal x14071=(cj5*sj3);
IkReal x14072=(r12*sj5);
IkReal x14073=((0.37429)*cj5);
IkReal x14074=(sj3*sj5);
IkReal x14075=(cj5*sj6);
IkReal x14076=(r02*sj5);
IkReal x14077=((1.0)*cj6*sj4);
IkReal x14078=(r11*sj4*sj6);
IkReal x14079=(r01*sj4*sj6);
evalcond[0]=((((-0.29542)*x14057))+((r02*x14073))+(((0.069)*x14058))+(((-1.0)*x14065*x14066))+((r00*sj6*x14067))+(((-1.0)*px))+(((0.01)*x14076))+(((-0.37429)*r00*x14061))+((x14065*x14067)));
evalcond[1]=((((-0.29542)*x14058))+(((-1.0)*x14066*x14069))+((x14067*x14068))+((x14067*x14069))+(((-1.0)*py))+(((0.01)*x14072))+(((-0.069)*x14057))+((r12*x14073))+(((-0.37429)*r10*x14061)));
evalcond[2]=((((-1.0)*r02*x14071))+(((-1.0)*cj4*x14064*x14076))+(((-1.0)*x14060*x14077))+(((-1.0)*x14062*x14065*x14070))+(((-1.0)*x14060*x14070*x14075))+x14058+((x14061*x14063))+((x14065*x14074))+((cj3*x14079)));
evalcond[3]=(((r02*x14062))+((sj3*x14079))+(((-1.0)*x14063*x14070*x14075))+(((-1.0)*r02*x14070*x14074))+x14057+(((-1.0)*x14065*x14070*x14071))+(((-1.0)*sj5*x14064*x14065))+(((-1.0)*x14063*x14077))+(((-1.0)*x14060*x14061)));
evalcond[4]=((((-1.0)*x14059*x14077))+(((-1.0)*x14069*x14070*x14071))+((sj3*x14078))+(((-1.0)*r10*x14061*x14064))+(((-1.0)*x14059*x14070*x14075))+((r12*x14062))+x14058+(((-1.0)*sj5*x14064*x14069))+(((-1.0)*sj3*x14070*x14072)));
evalcond[5]=((((-1.0)*x14057))+(((-1.0)*x14062*x14069*x14070))+(((-1.0)*x14062*x14068*x14070))+(((-1.0)*cj6*r10*sj4*x14064))+(((-1.0)*cj4*x14064*x14072))+((x14069*x14074))+((x14059*x14061))+(((-1.0)*r12*x14071))+((cj3*x14078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14080=cj1*cj1;
IkReal x14081=((69.0)*r10);
IkReal x14082=(cj4*cj6);
IkReal x14083=((364.42)*cj1);
IkReal x14084=(cj5*sj4);
IkReal x14085=((374.29)*cj2);
IkReal x14086=(cj5*r02);
IkReal x14087=(sj1*sj5);
IkReal x14088=((10.0)*r02);
IkReal x14089=(sj1*sj2);
IkReal x14090=(cj6*r11);
IkReal x14091=((69.0)*cj2);
IkReal x14092=(cj6*r01);
IkReal x14093=(cj2*sj1);
IkReal x14094=(r12*sj4);
IkReal x14095=(r00*sj6);
IkReal x14096=((1000.0)*px);
IkReal x14097=(cj4*r11*sj6);
IkReal x14098=((10.0)*cj5*sj1);
IkReal x14099=((10.0)*cj2*cj5);
IkReal x14100=(x14081*x14082);
IkReal x14101=((69.0)*x14097);
IkReal x14102=((69.0)*sj5*x14094);
IkReal x14103=((69.0)*x14084*x14090);
IkReal x14104=(sj6*x14081*x14084);
IkReal x14105=(x14103+x14102+x14101+x14104);
CheckValue<IkReal> x14106=IKPowWithIntegerCheck(((((69.0)*x14089))+((x14083*x14089))+((sj2*x14080*x14091))),-1);
if(!x14106.valid){
continue;
}
CheckValue<IkReal> x14107=IKPowWithIntegerCheck(((((-1.0)*sj1*x14083))+(((-69.0)*sj1))+(((-1.0)*x14080*x14091))),-1);
if(!x14107.valid){
continue;
}
if( IKabs(((x14106.value)*((((cj2*sj5*x14088))+(((-1.0)*sj1*x14084*x14090*x14091))+((sj5*x14083*x14094))+(((-1.0)*x14093*x14104))+((r10*sj6*x14083*x14084))+((x14093*x14100))+(((-1.0)*x14100))+((x14095*x14099))+(((-1.0)*sj1*x14091*x14097))+(((-1.0)*cj2*x14096))+((x14083*x14097))+x14105+(((-1.0)*x14087*x14091*x14094))+(((-1.0)*sj5*x14085*x14092))+(((-1.0)*sj5*x14085*x14095))+(((-1.0)*r10*x14082*x14083))+((x14083*x14084*x14090))+((x14092*x14099))+((x14085*x14086)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14107.value)*(((((-374.29)*x14087*x14095))+(((-374.29)*x14087*x14092))+((x14087*x14088))+(((-1.0)*sj1*x14096))+(((-1.0)*x14105))+((x14095*x14098))+x14100+(((374.29)*sj1*x14086))+((x14092*x14098)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14106.value)*((((cj2*sj5*x14088))+(((-1.0)*sj1*x14084*x14090*x14091))+((sj5*x14083*x14094))+(((-1.0)*x14093*x14104))+((r10*sj6*x14083*x14084))+((x14093*x14100))+(((-1.0)*x14100))+((x14095*x14099))+(((-1.0)*sj1*x14091*x14097))+(((-1.0)*cj2*x14096))+((x14083*x14097))+x14105+(((-1.0)*x14087*x14091*x14094))+(((-1.0)*sj5*x14085*x14092))+(((-1.0)*sj5*x14085*x14095))+(((-1.0)*r10*x14082*x14083))+((x14083*x14084*x14090))+((x14092*x14099))+((x14085*x14086))))))+IKsqr(((x14107.value)*(((((-374.29)*x14087*x14095))+(((-374.29)*x14087*x14092))+((x14087*x14088))+(((-1.0)*sj1*x14096))+(((-1.0)*x14105))+((x14095*x14098))+x14100+(((374.29)*sj1*x14086))+((x14092*x14098))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14106.value)*((((cj2*sj5*x14088))+(((-1.0)*sj1*x14084*x14090*x14091))+((sj5*x14083*x14094))+(((-1.0)*x14093*x14104))+((r10*sj6*x14083*x14084))+((x14093*x14100))+(((-1.0)*x14100))+((x14095*x14099))+(((-1.0)*sj1*x14091*x14097))+(((-1.0)*cj2*x14096))+((x14083*x14097))+x14105+(((-1.0)*x14087*x14091*x14094))+(((-1.0)*sj5*x14085*x14092))+(((-1.0)*sj5*x14085*x14095))+(((-1.0)*r10*x14082*x14083))+((x14083*x14084*x14090))+((x14092*x14099))+((x14085*x14086))))), ((x14107.value)*(((((-374.29)*x14087*x14095))+(((-374.29)*x14087*x14092))+((x14087*x14088))+(((-1.0)*sj1*x14096))+(((-1.0)*x14105))+((x14095*x14098))+x14100+(((374.29)*sj1*x14086))+((x14092*x14098))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14108=IKcos(j0);
IkReal x14109=IKsin(j0);
IkReal x14110=((1.0)*sj4);
IkReal x14111=(cj6*sj3);
IkReal x14112=(cj3*cj5);
IkReal x14113=(sj5*sj6);
IkReal x14114=(r00*sj3);
IkReal x14115=((0.36442)*cj1);
IkReal x14116=((0.069)*sj2);
IkReal x14117=(cj6*r01);
IkReal x14118=((1.0)*cj3);
IkReal x14119=((0.37429)*sj5);
IkReal x14120=((0.01)*cj5);
IkReal x14121=(r10*sj6);
IkReal x14122=(r12*sj5);
IkReal x14123=((1.0)*cj4);
IkReal x14124=(r02*sj5);
IkReal x14125=((1.0)*sj1);
IkReal x14126=(cj3*cj6);
IkReal x14127=(r01*sj6);
IkReal x14128=(r00*sj6);
IkReal x14129=(cj6*r11);
IkReal x14130=((0.37429)*cj5);
IkReal x14131=(cj4*cj6);
IkReal x14132=(cj5*sj3);
IkReal x14133=(cj5*x14129);
IkReal x14134=(cj2*x14108);
IkReal x14135=((0.069)*x14109);
IkReal x14136=(r11*sj4*sj6);
IkReal x14137=(sj2*x14108);
IkReal x14138=((1.0)*x14109);
evalcond[0]=((((-1.0)*x14110*x14133))+((r10*x14131))+((sj1*sj2*x14109))+(((-1.0)*x14110*x14122))+(((-1.0)*cj5*x14110*x14121))+x14134+(((-1.0)*r11*sj6*x14123)));
evalcond[1]=((((-1.0)*cj5*x14110*x14117))+(((-1.0)*x14110*x14124))+(((-1.0)*cj2*x14138))+(((-1.0)*cj5*x14110*x14128))+(((-1.0)*x14123*x14127))+((sj1*x14137))+((r00*x14131)));
evalcond[2]=(((r02*x14112))+(((-1.0)*cj5*sj6*x14114*x14123))+(((-1.0)*sj5*x14117*x14118))+((sj3*sj4*x14127))+(((-1.0)*r00*x14113*x14118))+(((-1.0)*cj1*x14108))+(((-1.0)*r00*x14110*x14111))+(((-1.0)*sj3*x14123*x14124))+(((-1.0)*cj5*r01*x14111*x14123)));
evalcond[3]=((((-1.0)*cj1*x14138))+(((-1.0)*cj5*r11*x14111*x14123))+(((-1.0)*r10*x14113*x14118))+((sj3*x14136))+(((-1.0)*sj5*x14118*x14129))+(((-1.0)*x14121*x14123*x14132))+((r12*x14112))+(((-1.0)*sj3*x14122*x14123))+(((-1.0)*r10*x14110*x14111)));
evalcond[4]=((((0.069)*x14108))+(((-0.069)*sj1*x14134))+(((0.01)*x14124))+((r02*x14130))+((x14108*x14115))+((x14120*x14128))+(((-1.0)*px))+(((-0.37429)*r00*x14113))+(((-1.0)*x14117*x14119))+((x14117*x14120))+(((-1.0)*x14109*x14116)));
evalcond[5]=((((0.01)*x14122))+((x14108*x14116))+((x14109*x14115))+((x14120*x14121))+((x14120*x14129))+(((-1.0)*py))+((r12*x14130))+(((-0.37429)*r10*x14113))+x14135+(((-1.0)*cj2*sj1*x14135))+(((-1.0)*x14119*x14129)));
evalcond[6]=(((r10*sj3*x14113))+(((-1.0)*x14112*x14121*x14123))+(((-1.0)*r10*x14110*x14126))+((r11*sj5*x14111))+(((-1.0)*cj4*x14118*x14122))+(((-1.0)*x14112*x14123*x14129))+(((-1.0)*r12*x14132))+x14137+(((-1.0)*cj2*x14109*x14125))+((cj3*x14136)));
evalcond[7]=((((-1.0)*r02*x14132))+((r01*sj5*x14111))+((x14113*x14114))+((cj3*sj4*x14127))+(((-1.0)*cj4*x14118*x14124))+(((-1.0)*x14112*x14123*x14128))+(((-1.0)*x14125*x14134))+(((-1.0)*x14112*x14117*x14123))+(((-1.0)*r00*x14110*x14126))+(((-1.0)*sj2*x14138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14139=(r10*sj6);
IkReal x14140=((69.0)*cj2);
IkReal x14141=(cj6*r11);
IkReal x14142=((374.29)*sj5);
IkReal x14143=((10.0)*cj5);
IkReal x14144=(cj5*sj4);
IkReal x14145=(r11*sj6);
IkReal x14146=(sj1*sj2);
IkReal x14147=((1000.0)*py);
IkReal x14148=((69.0)*sj2);
IkReal x14149=(r12*sj5);
IkReal x14150=((364.42)*cj1);
IkReal x14151=(cj4*x14150);
IkReal x14152=(sj1*x14149);
IkReal x14153=((374.29)*cj5*r12);
IkReal x14154=((69.0)*cj4*cj6*r10);
IkReal x14155=(x14144*x14150);
CheckValue<IkReal> x14156=IKPowWithIntegerCheck(IKsign((((cj2*x14150))+(((-69.0)*sj1))+x14140)),-1);
if(!x14156.valid){
continue;
}
CheckValue<IkReal> x14157 = IKatan2WithCheck(IkReal(((((-10.0)*cj2*x14149))+((cj4*cj6*r10*x14148))+((cj2*x14147))+((cj2*x14139*x14142))+(((-1.0)*cj2*x14139*x14143))+(((-1.0)*x14141*x14144*x14148))+((cj2*x14141*x14142))+(((-1.0)*cj2*x14141*x14143))+(((-1.0)*x14139*x14144*x14148))+(((-1.0)*sj4*x14148*x14149))+(((-1.0)*cj4*x14145*x14148))+(((-1.0)*cj2*x14153)))),IkReal(((((69.0)*sj4*x14149))+(((-1.0)*sj1*x14139*x14140*x14144))+((x14139*x14143*x14146))+((x14146*x14153))+((sj4*x14149*x14150))+(((-1.0)*x14141*x14142*x14146))+(((-1.0)*cj4*sj1*x14140*x14145))+(((69.0)*x14141*x14144))+(((-1.0)*sj4*x14140*x14152))+(((10.0)*x14146*x14149))+((x14141*x14143*x14146))+(((-1.0)*sj1*x14140*x14141*x14144))+((cj4*cj6*r10*sj1*x14140))+(((-1.0)*x14146*x14147))+(((-1.0)*x14154))+((x14139*x14155))+(((69.0)*x14139*x14144))+(((-1.0)*cj6*r10*x14151))+((x14145*x14151))+(((-1.0)*x14139*x14142*x14146))+(((69.0)*cj4*x14145))+((x14141*x14155)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14157.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14156.value)))+(x14157.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14158=IKcos(j0);
IkReal x14159=IKsin(j0);
IkReal x14160=((1.0)*sj4);
IkReal x14161=(cj6*sj3);
IkReal x14162=(cj3*cj5);
IkReal x14163=(sj5*sj6);
IkReal x14164=(r00*sj3);
IkReal x14165=((0.36442)*cj1);
IkReal x14166=((0.069)*sj2);
IkReal x14167=(cj6*r01);
IkReal x14168=((1.0)*cj3);
IkReal x14169=((0.37429)*sj5);
IkReal x14170=((0.01)*cj5);
IkReal x14171=(r10*sj6);
IkReal x14172=(r12*sj5);
IkReal x14173=((1.0)*cj4);
IkReal x14174=(r02*sj5);
IkReal x14175=((1.0)*sj1);
IkReal x14176=(cj3*cj6);
IkReal x14177=(r01*sj6);
IkReal x14178=(r00*sj6);
IkReal x14179=(cj6*r11);
IkReal x14180=((0.37429)*cj5);
IkReal x14181=(cj4*cj6);
IkReal x14182=(cj5*sj3);
IkReal x14183=(cj5*x14179);
IkReal x14184=(cj2*x14158);
IkReal x14185=((0.069)*x14159);
IkReal x14186=(r11*sj4*sj6);
IkReal x14187=(sj2*x14158);
IkReal x14188=((1.0)*x14159);
evalcond[0]=((((-1.0)*cj5*x14160*x14171))+(((-1.0)*x14160*x14183))+(((-1.0)*x14160*x14172))+x14184+(((-1.0)*r11*sj6*x14173))+((r10*x14181))+((sj1*sj2*x14159)));
evalcond[1]=(((sj1*x14187))+(((-1.0)*cj5*x14160*x14178))+(((-1.0)*cj5*x14160*x14167))+(((-1.0)*x14173*x14177))+(((-1.0)*x14160*x14174))+((r00*x14181))+(((-1.0)*cj2*x14188)));
evalcond[2]=(((r02*x14162))+(((-1.0)*cj5*r01*x14161*x14173))+((sj3*sj4*x14177))+(((-1.0)*cj5*sj6*x14164*x14173))+(((-1.0)*r00*x14160*x14161))+(((-1.0)*sj3*x14173*x14174))+(((-1.0)*r00*x14163*x14168))+(((-1.0)*sj5*x14167*x14168))+(((-1.0)*cj1*x14158)));
evalcond[3]=(((sj3*x14186))+(((-1.0)*cj1*x14188))+(((-1.0)*cj5*r11*x14161*x14173))+(((-1.0)*sj3*x14172*x14173))+((r12*x14162))+(((-1.0)*r10*x14160*x14161))+(((-1.0)*sj5*x14168*x14179))+(((-1.0)*r10*x14163*x14168))+(((-1.0)*x14171*x14173*x14182)));
evalcond[4]=((((0.01)*x14174))+((x14167*x14170))+((r02*x14180))+((x14158*x14165))+((x14170*x14178))+(((-1.0)*px))+(((-0.069)*sj1*x14184))+(((-1.0)*x14167*x14169))+(((0.069)*x14158))+(((-1.0)*x14159*x14166))+(((-0.37429)*r00*x14163)));
evalcond[5]=((((-0.37429)*r10*x14163))+((x14159*x14165))+(((0.01)*x14172))+(((-1.0)*x14169*x14179))+(((-1.0)*cj2*sj1*x14185))+((x14158*x14166))+((x14170*x14171))+((x14170*x14179))+((r12*x14180))+(((-1.0)*py))+x14185);
evalcond[6]=(((r11*sj5*x14161))+(((-1.0)*r12*x14182))+((cj3*x14186))+(((-1.0)*cj4*x14168*x14172))+(((-1.0)*r10*x14160*x14176))+((r10*sj3*x14163))+x14187+(((-1.0)*x14162*x14173*x14179))+(((-1.0)*x14162*x14171*x14173))+(((-1.0)*cj2*x14159*x14175)));
evalcond[7]=((((-1.0)*x14175*x14184))+(((-1.0)*x14162*x14167*x14173))+(((-1.0)*cj4*x14168*x14174))+((cj3*sj4*x14177))+(((-1.0)*r02*x14182))+(((-1.0)*sj2*x14188))+(((-1.0)*x14162*x14173*x14178))+((r01*sj5*x14161))+((x14163*x14164))+(((-1.0)*r00*x14160*x14176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14189=cj1*cj1;
IkReal x14190=((1.0)*r01);
IkReal x14191=(cj5*cj6);
IkReal x14192=(r02*sj5);
IkReal x14193=(cj2*sj4);
IkReal x14194=(cj5*sj6);
IkReal x14195=(cj4*cj6);
IkReal x14196=(r12*sj5);
IkReal x14197=(cj2*cj4*sj6);
IkReal x14198=(sj1*sj2*sj4);
IkReal x14199=((1.0)*sj1*sj2);
IkReal x14200=(cj4*sj1*sj2*sj6);
CheckValue<IkReal> x14201 = IKatan2WithCheck(IkReal(((((-1.0)*x14192*x14193))+((r10*x14194*x14198))+((r11*x14191*x14198))+((cj2*r00*x14195))+(((-1.0)*r10*x14195*x14199))+(((-1.0)*r00*x14193*x14194))+((x14196*x14198))+((r11*x14200))+(((-1.0)*x14190*x14197))+(((-1.0)*x14190*x14191*x14193)))),IkReal((((r10*x14193*x14194))+((r11*x14191*x14193))+((x14193*x14196))+(((-1.0)*r00*x14195*x14199))+((r11*x14197))+(((-1.0)*cj2*r10*x14195))+((r00*x14194*x14198))+((r01*x14200))+((r01*x14191*x14198))+((x14192*x14198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14201.valid){
continue;
}
CheckValue<IkReal> x14202=IKPowWithIntegerCheck(IKsign(((1.0)+((x14189*(cj2*cj2)))+(((-1.0)*x14189)))),-1);
if(!x14202.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x14201.value)+(((1.5707963267949)*(x14202.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14203=IKcos(j0);
IkReal x14204=IKsin(j0);
IkReal x14205=((1.0)*sj4);
IkReal x14206=(cj6*sj3);
IkReal x14207=(cj3*cj5);
IkReal x14208=(sj5*sj6);
IkReal x14209=(r00*sj3);
IkReal x14210=((0.36442)*cj1);
IkReal x14211=((0.069)*sj2);
IkReal x14212=(cj6*r01);
IkReal x14213=((1.0)*cj3);
IkReal x14214=((0.37429)*sj5);
IkReal x14215=((0.01)*cj5);
IkReal x14216=(r10*sj6);
IkReal x14217=(r12*sj5);
IkReal x14218=((1.0)*cj4);
IkReal x14219=(r02*sj5);
IkReal x14220=((1.0)*sj1);
IkReal x14221=(cj3*cj6);
IkReal x14222=(r01*sj6);
IkReal x14223=(r00*sj6);
IkReal x14224=(cj6*r11);
IkReal x14225=((0.37429)*cj5);
IkReal x14226=(cj4*cj6);
IkReal x14227=(cj5*sj3);
IkReal x14228=(cj5*x14224);
IkReal x14229=(cj2*x14203);
IkReal x14230=((0.069)*x14204);
IkReal x14231=(r11*sj4*sj6);
IkReal x14232=(sj2*x14203);
IkReal x14233=((1.0)*x14204);
evalcond[0]=(((sj1*sj2*x14204))+(((-1.0)*x14205*x14217))+(((-1.0)*x14205*x14228))+((r10*x14226))+(((-1.0)*cj5*x14205*x14216))+(((-1.0)*r11*sj6*x14218))+x14229);
evalcond[1]=(((sj1*x14232))+(((-1.0)*x14205*x14219))+(((-1.0)*cj5*x14205*x14223))+(((-1.0)*cj5*x14205*x14212))+((r00*x14226))+(((-1.0)*x14218*x14222))+(((-1.0)*cj2*x14233)));
evalcond[2]=((((-1.0)*r00*x14205*x14206))+(((-1.0)*sj5*x14212*x14213))+(((-1.0)*cj1*x14203))+(((-1.0)*r00*x14208*x14213))+((r02*x14207))+(((-1.0)*sj3*x14218*x14219))+((sj3*sj4*x14222))+(((-1.0)*cj5*r01*x14206*x14218))+(((-1.0)*cj5*sj6*x14209*x14218)));
evalcond[3]=((((-1.0)*cj1*x14233))+(((-1.0)*r10*x14208*x14213))+((r12*x14207))+(((-1.0)*x14216*x14218*x14227))+(((-1.0)*r10*x14205*x14206))+(((-1.0)*sj5*x14213*x14224))+(((-1.0)*sj3*x14217*x14218))+((sj3*x14231))+(((-1.0)*cj5*r11*x14206*x14218)));
evalcond[4]=(((r02*x14225))+(((-1.0)*x14204*x14211))+(((-1.0)*x14212*x14214))+(((0.01)*x14219))+(((0.069)*x14203))+(((-0.069)*sj1*x14229))+(((-1.0)*px))+((x14212*x14215))+((x14203*x14210))+(((-0.37429)*r00*x14208))+((x14215*x14223)));
evalcond[5]=(((x14204*x14210))+(((0.01)*x14217))+(((-1.0)*py))+((x14215*x14216))+(((-1.0)*x14214*x14224))+((x14203*x14211))+(((-0.37429)*r10*x14208))+((x14215*x14224))+(((-1.0)*cj2*sj1*x14230))+x14230+((r12*x14225)));
evalcond[6]=((((-1.0)*r10*x14205*x14221))+(((-1.0)*x14207*x14216*x14218))+(((-1.0)*x14207*x14218*x14224))+((r11*sj5*x14206))+(((-1.0)*cj4*x14213*x14217))+((cj3*x14231))+(((-1.0)*cj2*x14204*x14220))+(((-1.0)*r12*x14227))+((r10*sj3*x14208))+x14232);
evalcond[7]=((((-1.0)*r00*x14205*x14221))+(((-1.0)*sj2*x14233))+((x14208*x14209))+(((-1.0)*x14207*x14218*x14223))+((cj3*sj4*x14222))+(((-1.0)*cj4*x14213*x14219))+(((-1.0)*r02*x14227))+((r01*sj5*x14206))+(((-1.0)*x14207*x14212*x14218))+(((-1.0)*x14220*x14229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14234=cj6*cj6;
IkReal x14235=r21*r21;
IkReal x14236=r20*r20;
IkReal x14237=cj5*cj5;
IkReal x14238=r22*r22;
IkReal x14239=(cj3*r21);
IkReal x14240=((1.0)*r20);
IkReal x14241=(cj6*r22);
IkReal x14242=(cj1*sj2);
IkReal x14243=(cj3*cj5);
IkReal x14244=((2.0)*sj6);
IkReal x14245=((1.0)*sj3);
IkReal x14246=(cj5*cj6);
IkReal x14247=(r22*sj5);
IkReal x14248=(cj5*sj3);
IkReal x14249=(r21*sj6);
IkReal x14250=(r20*sj5);
IkReal x14251=(cj5*sj6);
IkReal x14252=((1.0)*sj1);
IkReal x14253=(cj6*r20*sj3);
IkReal x14254=(sj3*x14237);
IkReal x14255=(sj5*x14236);
IkReal x14256=(cj3*r20*r22);
IkReal x14257=(sj5*x14235);
IkReal x14258=(cj3*cj6*sj6);
IkReal x14259=(x14234*x14236);
IkReal x14260=(sj3*x14234*x14235);
CheckValue<IkReal> x14261 = IKatan2WithCheck(IkReal(((((-1.0)*sj6*x14240*x14242*x14248))+(((-1.0)*x14257*x14258))+(((-1.0)*sj5*x14239*x14240))+(((-1.0)*x14242*x14245*x14247))+(((2.0)*x14234*x14239*x14250))+((r22*x14239*x14251))+(((-1.0)*x14240*x14241*x14243))+((x14255*x14258))+(((-1.0)*cj6*sj1*x14240))+((sj1*x14249))+(((-1.0)*r21*x14242*x14245*x14246)))),IkReal(((((-1.0)*x14234*x14243*x14255))+(((-2.0)*x14237*x14239*x14241))+(((-1.0)*x14242*x14245*x14249))+(((-1.0)*x14247*x14252))+((x14243*x14255))+(((-1.0)*x14237*x14244*x14256))+((x14239*x14241))+((x14234*x14243*x14257))+((sj6*x14256))+((x14239*x14244*x14246*x14250))+(((-1.0)*r21*x14246*x14252))+(((-1.0)*sj1*x14240*x14251))+(((-1.0)*sj5*x14238*x14243))+((x14242*x14253)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14261.valid){
continue;
}
CheckValue<IkReal> x14262=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14238*x14245))+(((-1.0)*x14245*x14259))+(((-1.0)*x14234*x14235*x14237*x14245))+((x14238*x14254))+(((-1.0)*x14235*x14245))+(((-1.0)*r21*x14237*x14244*x14253))+(((-1.0)*x14236*x14237*x14245))+((r21*x14244*x14253))+(((-1.0)*r20*x14244*x14247*x14248))+((x14254*x14259))+(((-2.0)*r21*sj5*x14241*x14248))+x14260)),-1);
if(!x14262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14261.value)+(((1.5707963267949)*(x14262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x14263=IKsin(j4);
IkReal x14264=IKcos(j4);
IkReal x14265=(cj3*r21);
IkReal x14266=((1.0)*sj5);
IkReal x14267=(r21*sj3);
IkReal x14268=((1.0)*cj5);
IkReal x14269=(r22*sj3);
IkReal x14270=(cj6*r20);
IkReal x14271=(cj3*r22);
IkReal x14272=(sj6*x14263);
IkReal x14273=(r20*sj3*sj6);
IkReal x14274=(cj3*r20*sj6);
IkReal x14275=((1.0)*x14263);
IkReal x14276=(x14264*x14268);
evalcond[0]=(((cj1*sj2))+(((-1.0)*r20*x14268*x14272))+(((-1.0)*r22*x14263*x14266))+((x14264*x14270))+(((-1.0)*r21*sj6*x14264))+(((-1.0)*cj6*r21*x14263*x14268)));
evalcond[1]=((((-1.0)*sj3*x14270*x14275))+sj1+(((-1.0)*x14273*x14276))+(((-1.0)*cj6*x14267*x14276))+((x14267*x14272))+(((-1.0)*cj6*x14265*x14266))+((cj5*x14271))+(((-1.0)*x14264*x14266*x14269))+(((-1.0)*x14266*x14274)));
evalcond[2]=((((-1.0)*x14274*x14276))+(((-1.0)*x14268*x14269))+((sj5*x14273))+(((-1.0)*cj1*cj2))+(((-1.0)*cj6*x14265*x14276))+((x14265*x14272))+(((-1.0)*cj3*x14270*x14275))+(((-1.0)*x14264*x14266*x14271))+((cj6*sj5*x14267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x14277=cj1*cj1;
IkReal x14278=((1.0)+(((-1.0)*x14277))+((x14277*(cj2*cj2))));
j0eval[0]=x14278;
j0eval[1]=IKsign(x14278);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x14279=(cj1*cj2);
j0eval[0]=((((-1.0)*sj1))+(((5.28144927536232)*x14279))+cj2);
j0eval[1]=IKsign(((((364.42)*x14279))+(((-69.0)*sj1))+(((69.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x14280=cj1*cj1;
IkReal x14281=(sj1*sj2);
IkReal x14282=((5.28144927536232)*cj1);
IkReal x14283=(cj2*x14280);
j0eval[0]=(((x14281*x14282))+((sj2*x14283))+x14281);
j0eval[1]=((((-1.0)*sj1))+(((-1.0)*x14283))+(((-1.0)*sj1*x14282)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14284=(cj4*sj6);
IkReal x14285=((1.0)*r01);
IkReal x14286=(cj5*sj4);
IkReal x14287=(sj4*sj5);
IkReal x14288=(cj4*cj6);
if( IKabs(((((-1.0)*x14284*x14285))+(((-1.0)*cj6*x14285*x14286))+((r00*x14288))+(((-1.0)*r00*sj6*x14286))+(((-1.0)*r02*x14287)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x14287))+(((-1.0)*r10*x14288))+((r11*x14284))+((r10*sj6*x14286))+((cj6*r11*x14286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14284*x14285))+(((-1.0)*cj6*x14285*x14286))+((r00*x14288))+(((-1.0)*r00*sj6*x14286))+(((-1.0)*r02*x14287))))+IKsqr((((r12*x14287))+(((-1.0)*r10*x14288))+((r11*x14284))+((r10*sj6*x14286))+((cj6*r11*x14286))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x14284*x14285))+(((-1.0)*cj6*x14285*x14286))+((r00*x14288))+(((-1.0)*r00*sj6*x14286))+(((-1.0)*r02*x14287))), (((r12*x14287))+(((-1.0)*r10*x14288))+((r11*x14284))+((r10*sj6*x14286))+((cj6*r11*x14286))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14289=IKcos(j0);
IkReal x14290=IKsin(j0);
IkReal x14291=((1.0)*sj4);
IkReal x14292=(cj6*r10);
IkReal x14293=(sj5*sj6);
IkReal x14294=(cj3*cj5);
IkReal x14295=(r00*sj3);
IkReal x14296=((0.36442)*cj1);
IkReal x14297=(cj6*r01);
IkReal x14298=((1.0)*cj3);
IkReal x14299=((0.01)*cj5);
IkReal x14300=(r10*sj6);
IkReal x14301=(r12*sj5);
IkReal x14302=(sj3*sj5);
IkReal x14303=(r02*sj5);
IkReal x14304=(cj6*r00);
IkReal x14305=((1.0)*cj4);
IkReal x14306=(r00*sj6);
IkReal x14307=((0.37429)*cj5);
IkReal x14308=(cj6*r11);
IkReal x14309=((0.37429)*sj5);
IkReal x14310=(cj5*x14308);
IkReal x14311=((0.069)*x14290);
IkReal x14312=(r11*sj4*sj6);
IkReal x14313=(sj3*x14305);
IkReal x14314=(r01*sj4*sj6);
IkReal x14315=((1.0)*x14290);
IkReal x14316=((1.0)*x14289);
IkReal x14317=((0.069)*x14289);
IkReal x14318=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*x14291*x14310))+((cj4*x14292))+(((-1.0)*r11*sj6*x14305))+(((-1.0)*cj5*x14291*x14300))+x14289+(((-1.0)*x14291*x14301)));
evalcond[1]=((((-1.0)*r01*sj6*x14305))+(((-1.0)*cj5*x14291*x14297))+(((-1.0)*x14315))+((cj4*x14304))+(((-1.0)*cj5*x14291*x14306))+(((-1.0)*x14291*x14303)));
evalcond[2]=(((r02*x14307))+((x14289*x14296))+(((-0.37429)*r00*x14293))+((x14299*x14306))+((x14297*x14299))+(((-1.0)*x14297*x14309))+(((-1.0)*sj1*x14317))+(((-1.0)*px))+(((0.01)*x14303))+x14317);
evalcond[3]=(((x14299*x14308))+((x14299*x14300))+(((-1.0)*x14308*x14309))+(((-1.0)*sj1*x14311))+((r12*x14307))+((x14290*x14296))+(((-1.0)*py))+(((-0.37429)*r10*x14293))+(((0.01)*x14301))+x14311);
evalcond[4]=(((cj3*x14312))+((r10*sj3*x14293))+(((-1.0)*sj1*x14315))+(((-1.0)*cj3*x14291*x14292))+((x14302*x14308))+(((-1.0)*r12*x14318))+(((-1.0)*x14294*x14305*x14308))+(((-1.0)*cj4*x14298*x14301))+(((-1.0)*x14294*x14300*x14305)));
evalcond[5]=(((cj3*x14314))+((x14297*x14302))+(((-1.0)*x14294*x14297*x14305))+(((-1.0)*cj3*x14291*x14304))+(((-1.0)*sj1*x14316))+(((-1.0)*r02*x14318))+((x14293*x14295))+(((-1.0)*x14294*x14305*x14306))+(((-1.0)*cj4*x14298*x14303)));
evalcond[6]=(((r02*x14294))+(((-1.0)*cj5*x14297*x14313))+(((-1.0)*sj5*x14297*x14298))+((sj3*x14314))+(((-1.0)*cj1*x14316))+(((-1.0)*r02*x14302*x14305))+(((-1.0)*r00*x14293*x14298))+(((-1.0)*cj5*sj6*x14295*x14305))+(((-1.0)*cj6*x14291*x14295)));
evalcond[7]=((((-1.0)*sj3*x14291*x14292))+(((-1.0)*sj5*x14298*x14308))+(((-1.0)*r10*x14293*x14298))+((sj3*x14312))+(((-1.0)*cj1*x14315))+(((-1.0)*x14310*x14313))+((r12*x14294))+(((-1.0)*x14301*x14313))+(((-1.0)*cj5*x14300*x14313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14319=((1.0)*cj4);
IkReal x14320=(sj4*sj5);
IkReal x14321=(cj5*sj4*sj6);
IkReal x14322=(cj5*cj6*sj4);
if( IKabs((((r00*x14321))+((r01*x14322))+((r02*x14320))+(((-1.0)*cj6*r00*x14319))+((cj4*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj6*x14319))+(((-1.0)*r11*x14322))+((cj4*cj6*r10))+(((-1.0)*r12*x14320))+(((-1.0)*r10*x14321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x14321))+((r01*x14322))+((r02*x14320))+(((-1.0)*cj6*r00*x14319))+((cj4*r01*sj6))))+IKsqr(((((-1.0)*r11*sj6*x14319))+(((-1.0)*r11*x14322))+((cj4*cj6*r10))+(((-1.0)*r12*x14320))+(((-1.0)*r10*x14321))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x14321))+((r01*x14322))+((r02*x14320))+(((-1.0)*cj6*r00*x14319))+((cj4*r01*sj6))), ((((-1.0)*r11*sj6*x14319))+(((-1.0)*r11*x14322))+((cj4*cj6*r10))+(((-1.0)*r12*x14320))+(((-1.0)*r10*x14321))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14323=IKcos(j0);
IkReal x14324=IKsin(j0);
IkReal x14325=((1.0)*sj4);
IkReal x14326=(cj6*sj3);
IkReal x14327=(sj5*sj6);
IkReal x14328=(cj3*cj5);
IkReal x14329=(r00*sj3);
IkReal x14330=((0.36442)*cj1);
IkReal x14331=(cj5*r01);
IkReal x14332=((1.0)*cj3);
IkReal x14333=(r10*sj6);
IkReal x14334=((0.01)*cj5);
IkReal x14335=(r12*sj5);
IkReal x14336=(r01*sj5);
IkReal x14337=((1.0)*cj4);
IkReal x14338=(r02*sj5);
IkReal x14339=(cj3*cj6);
IkReal x14340=(r00*sj6);
IkReal x14341=((0.37429)*cj5);
IkReal x14342=(cj4*cj6);
IkReal x14343=(r11*sj5);
IkReal x14344=(cj5*sj3);
IkReal x14345=((0.37429)*cj6);
IkReal x14346=(cj5*cj6*r11);
IkReal x14347=((0.069)*x14324);
IkReal x14348=(r11*sj4*sj6);
IkReal x14349=(r01*sj4*sj6);
IkReal x14350=((1.0)*x14323);
IkReal x14351=((0.069)*x14323);
evalcond[0]=(((r00*x14342))+(((-1.0)*cj5*x14325*x14340))+(((-1.0)*x14325*x14338))+x14324+(((-1.0)*cj6*x14325*x14331))+(((-1.0)*r01*sj6*x14337)));
evalcond[1]=((((-1.0)*x14350))+(((-1.0)*x14325*x14346))+((r10*x14342))+(((-1.0)*x14325*x14335))+(((-1.0)*r11*sj6*x14337))+(((-1.0)*cj5*x14325*x14333)));
evalcond[2]=(((x14334*x14340))+((x14323*x14330))+(((-0.37429)*r00*x14327))+(((-1.0)*px))+(((-1.0)*x14336*x14345))+(((0.01)*x14338))+((sj1*x14351))+((r02*x14341))+x14351+(((0.01)*cj6*x14331)));
evalcond[3]=(((sj1*x14347))+((x14333*x14334))+(((-1.0)*x14343*x14345))+((x14324*x14330))+(((-1.0)*py))+(((0.01)*x14335))+((r12*x14341))+((cj6*r11*x14334))+x14347+(((-0.37429)*r10*x14327)));
evalcond[4]=(((cj3*x14348))+(((-1.0)*r12*x14344))+(((-1.0)*x14328*x14333*x14337))+(((-1.0)*r10*x14325*x14339))+((sj1*x14324))+((r10*sj3*x14327))+((x14326*x14343))+(((-1.0)*cj4*x14332*x14335))+(((-1.0)*cj6*r11*x14328*x14337)));
evalcond[5]=(((cj3*x14349))+((x14326*x14336))+((sj1*x14323))+((x14327*x14329))+(((-1.0)*cj6*r01*x14328*x14337))+(((-1.0)*r00*x14325*x14339))+(((-1.0)*x14328*x14337*x14340))+(((-1.0)*r02*x14344))+(((-1.0)*cj4*x14332*x14338)));
evalcond[6]=((((-1.0)*x14326*x14331*x14337))+(((-1.0)*r00*x14327*x14332))+(((-1.0)*cj6*x14332*x14336))+(((-1.0)*cj5*sj6*x14329*x14337))+((r02*x14328))+(((-1.0)*sj3*x14337*x14338))+((sj3*x14349))+(((-1.0)*r00*x14325*x14326))+(((-1.0)*cj1*x14350)));
evalcond[7]=((((-1.0)*x14333*x14337*x14344))+(((-1.0)*cj5*r11*x14326*x14337))+(((-1.0)*cj1*x14324))+(((-1.0)*sj3*x14335*x14337))+((sj3*x14348))+(((-1.0)*r10*x14327*x14332))+(((-1.0)*cj6*x14332*x14343))+((r12*x14328))+(((-1.0)*r10*x14325*x14326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14352=((0.842227766698146)*sj5);
IkReal x14353=(r10*sj6);
IkReal x14354=(cj6*r01);
IkReal x14355=((0.00358229604870815)*cj5);
IkReal x14356=(cj6*r11);
IkReal x14357=((0.0225020109192911)*sj5);
IkReal x14358=((0.134081758807097)*sj5);
IkReal x14359=(r00*sj6);
IkReal x14360=((0.134081758807097)*cj5);
IkReal x14361=((0.0225020109192911)*cj5);
IkReal x14362=((0.842227766698146)*cj5);
IkReal x14363=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*x14358*x14359))+((x14352*x14356))+((x14352*x14353))+(((2.25020109192911)*py))+(((-1.0)*x14356*x14361))+((r02*x14363))+((r02*x14360))+(((-0.358229604870815)*px))+(((-1.0)*r12*x14357))+(((-1.0)*x14354*x14358))+((x14354*x14355))+((x14355*x14359))+(((-1.0)*x14353*x14361))+(((-1.0)*r12*x14362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x14357))+((x14352*x14359))+((x14352*x14354))+(((2.25020109192911)*px))+((x14353*x14358))+(((-1.0)*r02*x14362))+(((0.358229604870815)*py))+((x14356*x14358))+(((-1.0)*x14355*x14356))+(((-1.0)*x14353*x14355))+(((-1.0)*x14354*x14361))+(((-1.0)*r12*x14363))+(((-1.0)*r12*x14360))+(((-1.0)*x14359*x14361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14358*x14359))+((x14352*x14356))+((x14352*x14353))+(((2.25020109192911)*py))+(((-1.0)*x14356*x14361))+((r02*x14363))+((r02*x14360))+(((-0.358229604870815)*px))+(((-1.0)*r12*x14357))+(((-1.0)*x14354*x14358))+((x14354*x14355))+((x14355*x14359))+(((-1.0)*x14353*x14361))+(((-1.0)*r12*x14362))))+IKsqr(((((-1.0)*r02*x14357))+((x14352*x14359))+((x14352*x14354))+(((2.25020109192911)*px))+((x14353*x14358))+(((-1.0)*r02*x14362))+(((0.358229604870815)*py))+((x14356*x14358))+(((-1.0)*x14355*x14356))+(((-1.0)*x14353*x14355))+(((-1.0)*x14354*x14361))+(((-1.0)*r12*x14363))+(((-1.0)*r12*x14360))+(((-1.0)*x14359*x14361))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x14358*x14359))+((x14352*x14356))+((x14352*x14353))+(((2.25020109192911)*py))+(((-1.0)*x14356*x14361))+((r02*x14363))+((r02*x14360))+(((-0.358229604870815)*px))+(((-1.0)*r12*x14357))+(((-1.0)*x14354*x14358))+((x14354*x14355))+((x14355*x14359))+(((-1.0)*x14353*x14361))+(((-1.0)*r12*x14362))), ((((-1.0)*r02*x14357))+((x14352*x14359))+((x14352*x14354))+(((2.25020109192911)*px))+((x14353*x14358))+(((-1.0)*r02*x14362))+(((0.358229604870815)*py))+((x14356*x14358))+(((-1.0)*x14355*x14356))+(((-1.0)*x14353*x14355))+(((-1.0)*x14354*x14361))+(((-1.0)*r12*x14363))+(((-1.0)*r12*x14360))+(((-1.0)*x14359*x14361))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14364=IKsin(j0);
IkReal x14365=IKcos(j0);
IkReal x14366=(r10*sj3);
IkReal x14367=(cj3*r00);
IkReal x14368=(sj5*sj6);
IkReal x14369=(cj5*r12);
IkReal x14370=(r00*sj3);
IkReal x14371=(cj3*r10);
IkReal x14372=(cj5*sj6);
IkReal x14373=((1.0)*cj4);
IkReal x14374=(cj5*r02);
IkReal x14375=(cj3*r01);
IkReal x14376=(sj4*sj6);
IkReal x14377=(r12*sj5);
IkReal x14378=(cj6*sj5);
IkReal x14379=(r01*sj3);
IkReal x14380=(r11*sj3);
IkReal x14381=((1.0)*sj3);
IkReal x14382=(r02*sj5);
IkReal x14383=(cj5*cj6);
IkReal x14384=(cj3*r11);
IkReal x14385=((1.0)*x14364);
IkReal x14386=((1.0)*cj6*sj4);
IkReal x14387=(r11*x14376);
IkReal x14388=((0.01)*x14383);
evalcond[0]=(((r01*x14388))+(((0.01)*r00*x14372))+(((0.01)*x14382))+(((0.37429)*x14374))+(((-1.0)*px))+(((-0.37429)*r01*x14378))+(((0.43342)*x14365))+(((-0.069)*x14364))+(((-0.37429)*r00*x14368)));
evalcond[1]=((((0.069)*x14365))+(((0.01)*r10*x14372))+(((-0.37429)*r10*x14368))+((r11*x14388))+(((-1.0)*py))+(((0.01)*x14377))+(((0.43342)*x14364))+(((0.37429)*x14369))+(((-0.37429)*r11*x14378)));
evalcond[2]=((((-1.0)*cj3*x14373*x14377))+((x14378*x14380))+(((-1.0)*x14371*x14386))+((x14376*x14384))+(((-1.0)*x14371*x14372*x14373))+(((-1.0)*x14373*x14383*x14384))+(((-1.0)*x14369*x14381))+x14365+((x14366*x14368)));
evalcond[3]=((((-1.0)*x14367*x14386))+(((-1.0)*x14385))+(((-1.0)*x14367*x14372*x14373))+((x14378*x14379))+(((-1.0)*x14374*x14381))+(((-1.0)*x14373*x14375*x14383))+((x14368*x14370))+(((-1.0)*cj3*x14373*x14382))+((x14375*x14376)));
evalcond[4]=((((-1.0)*sj3*x14373*x14382))+(((-1.0)*x14373*x14379*x14383))+((x14376*x14379))+(((-1.0)*x14367*x14368))+(((-1.0)*x14370*x14372*x14373))+((cj3*x14374))+(((-1.0)*x14365))+(((-1.0)*x14370*x14386))+(((-1.0)*x14375*x14378)));
evalcond[5]=((((-1.0)*x14385))+((cj3*x14369))+(((-1.0)*x14366*x14386))+((x14376*x14380))+(((-1.0)*x14378*x14384))+(((-1.0)*x14373*x14380*x14383))+(((-1.0)*x14368*x14371))+(((-1.0)*x14366*x14372*x14373))+(((-1.0)*sj3*x14373*x14377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14389=((0.842227766698146)*sj5);
IkReal x14390=(r10*sj6);
IkReal x14391=(cj6*r01);
IkReal x14392=((0.00358229604870815)*cj5);
IkReal x14393=(cj6*r11);
IkReal x14394=((0.0225020109192911)*sj5);
IkReal x14395=((0.134081758807097)*sj5);
IkReal x14396=(r00*sj6);
IkReal x14397=((0.134081758807097)*cj5);
IkReal x14398=((0.0225020109192911)*cj5);
IkReal x14399=((0.842227766698146)*cj5);
IkReal x14400=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*x14390*x14398))+(((-1.0)*x14392*x14396))+(((2.25020109192911)*py))+((x14395*x14396))+(((-1.0)*x14393*x14398))+(((-1.0)*r02*x14400))+(((0.358229604870815)*px))+(((-1.0)*r12*x14399))+(((-1.0)*r12*x14394))+((x14391*x14395))+(((-1.0)*x14391*x14392))+((x14389*x14393))+((x14389*x14390))+(((-1.0)*r02*x14397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14390*x14395))+((r12*x14400))+(((2.25020109192911)*px))+(((-1.0)*x14393*x14395))+(((-0.358229604870815)*py))+((r12*x14397))+(((-1.0)*x14391*x14398))+((x14389*x14391))+((x14389*x14396))+((x14392*x14393))+(((-1.0)*r02*x14394))+(((-1.0)*r02*x14399))+((x14390*x14392))+(((-1.0)*x14396*x14398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14390*x14398))+(((-1.0)*x14392*x14396))+(((2.25020109192911)*py))+((x14395*x14396))+(((-1.0)*x14393*x14398))+(((-1.0)*r02*x14400))+(((0.358229604870815)*px))+(((-1.0)*r12*x14399))+(((-1.0)*r12*x14394))+((x14391*x14395))+(((-1.0)*x14391*x14392))+((x14389*x14393))+((x14389*x14390))+(((-1.0)*r02*x14397))))+IKsqr(((((-1.0)*x14390*x14395))+((r12*x14400))+(((2.25020109192911)*px))+(((-1.0)*x14393*x14395))+(((-0.358229604870815)*py))+((r12*x14397))+(((-1.0)*x14391*x14398))+((x14389*x14391))+((x14389*x14396))+((x14392*x14393))+(((-1.0)*r02*x14394))+(((-1.0)*r02*x14399))+((x14390*x14392))+(((-1.0)*x14396*x14398))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x14390*x14398))+(((-1.0)*x14392*x14396))+(((2.25020109192911)*py))+((x14395*x14396))+(((-1.0)*x14393*x14398))+(((-1.0)*r02*x14400))+(((0.358229604870815)*px))+(((-1.0)*r12*x14399))+(((-1.0)*r12*x14394))+((x14391*x14395))+(((-1.0)*x14391*x14392))+((x14389*x14393))+((x14389*x14390))+(((-1.0)*r02*x14397))), ((((-1.0)*x14390*x14395))+((r12*x14400))+(((2.25020109192911)*px))+(((-1.0)*x14393*x14395))+(((-0.358229604870815)*py))+((r12*x14397))+(((-1.0)*x14391*x14398))+((x14389*x14391))+((x14389*x14396))+((x14392*x14393))+(((-1.0)*r02*x14394))+(((-1.0)*r02*x14399))+((x14390*x14392))+(((-1.0)*x14396*x14398))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14401=IKsin(j0);
IkReal x14402=IKcos(j0);
IkReal x14403=(r10*sj3);
IkReal x14404=(cj3*r00);
IkReal x14405=(sj5*sj6);
IkReal x14406=(cj5*r12);
IkReal x14407=(r00*sj3);
IkReal x14408=((1.0)*cj3);
IkReal x14409=(cj5*r02);
IkReal x14410=((0.01)*cj5);
IkReal x14411=(r10*sj6);
IkReal x14412=(cj6*r11);
IkReal x14413=(cj4*cj5);
IkReal x14414=((1.0)*sj3);
IkReal x14415=(cj6*r01);
IkReal x14416=((1.0)*sj6);
IkReal x14417=((0.01)*sj5);
IkReal x14418=((1.0)*x14402);
IkReal x14419=((1.0)*cj6*sj4);
IkReal x14420=(sj5*x14415);
IkReal x14421=(r11*sj4*sj6);
IkReal x14422=(cj4*r12*sj5);
IkReal x14423=(r01*sj4*sj6);
IkReal x14424=(cj4*r02*sj5);
evalcond[0]=(((r00*sj6*x14410))+(((-0.37429)*x14420))+((r02*x14417))+(((-1.0)*px))+(((0.37429)*x14409))+((x14410*x14415))+(((0.069)*x14401))+(((-0.37429)*r00*x14405))+(((0.43342)*x14402)));
evalcond[1]=(((r12*x14417))+(((-1.0)*py))+(((-0.069)*x14402))+(((-0.37429)*sj5*x14412))+(((-0.37429)*r10*x14405))+(((0.37429)*x14406))+((x14410*x14412))+((x14410*x14411))+(((0.43342)*x14401)));
evalcond[2]=((((-1.0)*x14408*x14413*x14415))+((x14405*x14407))+(((-1.0)*x14404*x14419))+((sj3*x14420))+x14401+(((-1.0)*x14404*x14413*x14416))+((cj3*x14423))+(((-1.0)*x14408*x14424))+(((-1.0)*x14409*x14414)));
evalcond[3]=((((-1.0)*x14408*x14412*x14413))+(((-1.0)*x14408*x14411*x14413))+(((-1.0)*x14418))+(((-1.0)*cj6*r10*sj4*x14408))+(((-1.0)*x14406*x14414))+((x14403*x14405))+((cj3*x14421))+(((-1.0)*x14408*x14422))+((sj3*sj5*x14412)));
evalcond[4]=((((-1.0)*x14418))+(((-1.0)*x14407*x14413*x14416))+(((-1.0)*x14413*x14414*x14415))+(((-1.0)*x14407*x14419))+((sj3*x14423))+((cj3*x14409))+(((-1.0)*x14414*x14424))+(((-1.0)*x14408*x14420))+(((-1.0)*x14404*x14405)));
evalcond[5]=((((-1.0)*x14401))+(((-1.0)*x14403*x14419))+((sj3*x14421))+((cj3*x14406))+(((-1.0)*x14414*x14422))+(((-1.0)*r10*x14405*x14408))+(((-1.0)*sj5*x14408*x14412))+(((-1.0)*x14412*x14413*x14414))+(((-1.0)*x14403*x14413*x14416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14425=((0.0320990151198118)*sj5);
IkReal x14426=((0.00749723120732182)*sj5);
IkReal x14427=(cj6*r01);
IkReal x14428=((0.00749723120732182)*cj5);
IkReal x14429=(r00*sj6);
IkReal x14430=((1.20143403691943)*sj5);
IkReal x14431=((0.0320990151198118)*cj5);
IkReal x14432=(r10*sj6);
IkReal x14433=((0.280613866858848)*cj5);
IkReal x14434=((1.20143403691943)*cj5);
IkReal x14435=((0.280613866858848)*sj5);
IkReal x14436=(cj6*r11);
IkReal x14437=(cj6*x14430);
IkReal x14438=(cj6*x14431);
if( IKabs(((((-0.749723120732182)*px))+((r12*x14425))+((r12*x14434))+(((-1.0)*x14429*x14435))+((r02*x14426))+((r02*x14433))+(((-3.20990151198118)*py))+((x14427*x14428))+((x14428*x14429))+(((-1.0)*x14430*x14436))+(((-1.0)*x14430*x14432))+((x14431*x14432))+((x14431*x14436))+(((-1.0)*x14427*x14435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14428*x14432))+(((-1.0)*x14428*x14436))+(((-1.0)*x14429*x14430))+(((0.749723120732182)*py))+((r02*x14425))+(((-1.0)*r12*x14433))+((r02*x14434))+((x14427*x14431))+((x14435*x14436))+((x14429*x14431))+(((-3.20990151198118)*px))+(((-1.0)*r12*x14426))+((x14432*x14435))+(((-1.0)*x14427*x14430)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.749723120732182)*px))+((r12*x14425))+((r12*x14434))+(((-1.0)*x14429*x14435))+((r02*x14426))+((r02*x14433))+(((-3.20990151198118)*py))+((x14427*x14428))+((x14428*x14429))+(((-1.0)*x14430*x14436))+(((-1.0)*x14430*x14432))+((x14431*x14432))+((x14431*x14436))+(((-1.0)*x14427*x14435))))+IKsqr(((((-1.0)*x14428*x14432))+(((-1.0)*x14428*x14436))+(((-1.0)*x14429*x14430))+(((0.749723120732182)*py))+((r02*x14425))+(((-1.0)*r12*x14433))+((r02*x14434))+((x14427*x14431))+((x14435*x14436))+((x14429*x14431))+(((-3.20990151198118)*px))+(((-1.0)*r12*x14426))+((x14432*x14435))+(((-1.0)*x14427*x14430))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.749723120732182)*px))+((r12*x14425))+((r12*x14434))+(((-1.0)*x14429*x14435))+((r02*x14426))+((r02*x14433))+(((-3.20990151198118)*py))+((x14427*x14428))+((x14428*x14429))+(((-1.0)*x14430*x14436))+(((-1.0)*x14430*x14432))+((x14431*x14432))+((x14431*x14436))+(((-1.0)*x14427*x14435))), ((((-1.0)*x14428*x14432))+(((-1.0)*x14428*x14436))+(((-1.0)*x14429*x14430))+(((0.749723120732182)*py))+((r02*x14425))+(((-1.0)*r12*x14433))+((r02*x14434))+((x14427*x14431))+((x14435*x14436))+((x14429*x14431))+(((-3.20990151198118)*px))+(((-1.0)*r12*x14426))+((x14432*x14435))+(((-1.0)*x14427*x14430))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14439=IKcos(j0);
IkReal x14440=IKsin(j0);
IkReal x14441=(r10*sj3);
IkReal x14442=(cj3*r00);
IkReal x14443=(sj5*sj6);
IkReal x14444=(cj3*cj5);
IkReal x14445=(r00*sj3);
IkReal x14446=(cj3*r10);
IkReal x14447=(cj5*sj6);
IkReal x14448=((1.0)*cj4);
IkReal x14449=(cj5*cj6);
IkReal x14450=(r01*sj3);
IkReal x14451=(cj3*r01);
IkReal x14452=(sj4*sj6);
IkReal x14453=(r12*sj5);
IkReal x14454=(cj6*sj5);
IkReal x14455=((0.37429)*cj5);
IkReal x14456=(r11*sj3);
IkReal x14457=(r02*sj5);
IkReal x14458=((1.0)*cj6*sj4);
IkReal x14459=(r11*x14452);
IkReal x14460=((1.0)*cj5*sj3);
evalcond[0]=((((-0.29542)*x14439))+(((-0.069)*x14440))+(((0.01)*x14457))+(((-1.0)*px))+(((-0.37429)*r00*x14443))+(((-0.37429)*r01*x14454))+(((0.01)*r00*x14447))+((r02*x14455))+(((0.01)*r01*x14449)));
evalcond[1]=((((0.01)*r10*x14447))+(((-0.37429)*r10*x14443))+((r12*x14455))+(((0.01)*x14453))+(((0.069)*x14439))+(((0.01)*r11*x14449))+(((-1.0)*py))+(((-0.29542)*x14440))+(((-0.37429)*r11*x14454)));
evalcond[2]=((((-1.0)*x14446*x14458))+((x14441*x14443))+(((-1.0)*r12*x14460))+x14439+((x14454*x14456))+(((-1.0)*cj6*r11*x14444*x14448))+((cj3*x14459))+(((-1.0)*cj3*x14448*x14453))+(((-1.0)*r10*sj6*x14444*x14448)));
evalcond[3]=((((-1.0)*x14448*x14449*x14450))+(((-1.0)*x14442*x14443))+((x14450*x14452))+(((-1.0)*x14451*x14454))+(((-1.0)*x14445*x14447*x14448))+x14439+((r02*x14444))+(((-1.0)*x14445*x14458))+(((-1.0)*sj3*x14448*x14457)));
evalcond[4]=((((-1.0)*x14441*x14447*x14448))+(((-1.0)*x14448*x14449*x14456))+((r12*x14444))+(((-1.0)*cj3*r11*x14454))+((x14452*x14456))+(((-1.0)*x14443*x14446))+x14440+(((-1.0)*x14441*x14458))+(((-1.0)*sj3*x14448*x14453)));
evalcond[5]=(((x14451*x14452))+(((-1.0)*cj6*r01*x14444*x14448))+((x14450*x14454))+(((-1.0)*x14442*x14458))+(((-1.0)*r02*x14460))+(((-1.0)*x14440))+((x14443*x14445))+(((-1.0)*cj3*x14448*x14457))+(((-1.0)*x14442*x14447*x14448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14461=((0.0320990151198118)*sj5);
IkReal x14462=((0.00749723120732182)*sj5);
IkReal x14463=(cj6*r01);
IkReal x14464=((0.00749723120732182)*cj5);
IkReal x14465=(r00*sj6);
IkReal x14466=((1.20143403691943)*sj5);
IkReal x14467=((0.0320990151198118)*cj5);
IkReal x14468=(r10*sj6);
IkReal x14469=((0.280613866858848)*cj5);
IkReal x14470=((1.20143403691943)*cj5);
IkReal x14471=((0.280613866858848)*sj5);
IkReal x14472=(cj6*r11);
IkReal x14473=(cj6*x14466);
IkReal x14474=(cj6*x14467);
if( IKabs(((((-1.0)*x14463*x14464))+(((-1.0)*x14464*x14465))+(((-1.0)*r02*x14462))+(((-1.0)*r02*x14469))+(((-1.0)*x14466*x14472))+((r12*x14461))+(((-1.0)*x14466*x14468))+(((0.749723120732182)*px))+((r12*x14470))+((x14465*x14471))+(((-3.20990151198118)*py))+((x14467*x14468))+((x14463*x14471))+((x14467*x14472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.749723120732182)*py))+(((-1.0)*x14463*x14466))+((r02*x14461))+((r02*x14470))+(((-1.0)*x14468*x14471))+((r12*x14462))+((r12*x14469))+((x14465*x14467))+((x14464*x14472))+((x14464*x14468))+(((-1.0)*x14471*x14472))+(((-1.0)*x14465*x14466))+(((-3.20990151198118)*px))+((x14463*x14467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x14463*x14464))+(((-1.0)*x14464*x14465))+(((-1.0)*r02*x14462))+(((-1.0)*r02*x14469))+(((-1.0)*x14466*x14472))+((r12*x14461))+(((-1.0)*x14466*x14468))+(((0.749723120732182)*px))+((r12*x14470))+((x14465*x14471))+(((-3.20990151198118)*py))+((x14467*x14468))+((x14463*x14471))+((x14467*x14472))))+IKsqr(((((-0.749723120732182)*py))+(((-1.0)*x14463*x14466))+((r02*x14461))+((r02*x14470))+(((-1.0)*x14468*x14471))+((r12*x14462))+((r12*x14469))+((x14465*x14467))+((x14464*x14472))+((x14464*x14468))+(((-1.0)*x14471*x14472))+(((-1.0)*x14465*x14466))+(((-3.20990151198118)*px))+((x14463*x14467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x14463*x14464))+(((-1.0)*x14464*x14465))+(((-1.0)*r02*x14462))+(((-1.0)*r02*x14469))+(((-1.0)*x14466*x14472))+((r12*x14461))+(((-1.0)*x14466*x14468))+(((0.749723120732182)*px))+((r12*x14470))+((x14465*x14471))+(((-3.20990151198118)*py))+((x14467*x14468))+((x14463*x14471))+((x14467*x14472))), ((((-0.749723120732182)*py))+(((-1.0)*x14463*x14466))+((r02*x14461))+((r02*x14470))+(((-1.0)*x14468*x14471))+((r12*x14462))+((r12*x14469))+((x14465*x14467))+((x14464*x14472))+((x14464*x14468))+(((-1.0)*x14471*x14472))+(((-1.0)*x14465*x14466))+(((-3.20990151198118)*px))+((x14463*x14467))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14475=IKcos(j0);
IkReal x14476=IKsin(j0);
IkReal x14477=(r10*sj3);
IkReal x14478=(cj3*r00);
IkReal x14479=(sj5*sj6);
IkReal x14480=(cj3*cj5);
IkReal x14481=(r00*sj3);
IkReal x14482=((1.0)*cj3);
IkReal x14483=(cj6*r01);
IkReal x14484=((0.37429)*sj5);
IkReal x14485=((0.01)*cj5);
IkReal x14486=(r10*sj6);
IkReal x14487=(cj6*r11);
IkReal x14488=((1.0)*cj4);
IkReal x14489=(cj5*sj3);
IkReal x14490=(r12*sj5);
IkReal x14491=((0.37429)*cj5);
IkReal x14492=(sj3*sj5);
IkReal x14493=(cj5*sj6);
IkReal x14494=(r02*sj5);
IkReal x14495=((1.0)*cj6*sj4);
IkReal x14496=(r11*sj4*sj6);
IkReal x14497=(r01*sj4*sj6);
evalcond[0]=((((-1.0)*x14483*x14484))+((r00*sj6*x14485))+(((-0.29542)*x14475))+((r02*x14491))+(((-1.0)*px))+(((0.069)*x14476))+(((-0.37429)*r00*x14479))+((x14483*x14485))+(((0.01)*x14494)));
evalcond[1]=((((-0.37429)*r10*x14479))+((r12*x14491))+(((-0.29542)*x14476))+(((-1.0)*py))+(((-1.0)*x14484*x14487))+((x14485*x14486))+((x14485*x14487))+(((-0.069)*x14475))+(((0.01)*x14490)));
evalcond[2]=((((-1.0)*x14478*x14495))+(((-1.0)*r02*x14489))+((x14479*x14481))+(((-1.0)*x14478*x14488*x14493))+x14476+((cj3*x14497))+(((-1.0)*x14480*x14483*x14488))+(((-1.0)*cj4*x14482*x14494))+((x14483*x14492)));
evalcond[3]=((((-1.0)*x14481*x14488*x14493))+((r02*x14480))+((sj3*x14497))+(((-1.0)*x14481*x14495))+(((-1.0)*r02*x14488*x14492))+(((-1.0)*sj5*x14482*x14483))+x14475+(((-1.0)*x14478*x14479))+(((-1.0)*x14483*x14488*x14489)));
evalcond[4]=((((-1.0)*x14477*x14488*x14493))+(((-1.0)*sj3*x14488*x14490))+(((-1.0)*r10*x14479*x14482))+((sj3*x14496))+((r12*x14480))+(((-1.0)*x14487*x14488*x14489))+(((-1.0)*sj5*x14482*x14487))+x14476+(((-1.0)*x14477*x14495)));
evalcond[5]=(((x14487*x14492))+(((-1.0)*x14475))+(((-1.0)*x14480*x14487*x14488))+(((-1.0)*cj6*r10*sj4*x14482))+(((-1.0)*r12*x14489))+(((-1.0)*x14480*x14486*x14488))+((cj3*x14496))+((x14477*x14479))+(((-1.0)*cj4*x14482*x14490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14498=cj1*cj1;
IkReal x14499=((69.0)*r10);
IkReal x14500=(cj4*cj6);
IkReal x14501=((364.42)*cj1);
IkReal x14502=(cj5*sj4);
IkReal x14503=((374.29)*cj2);
IkReal x14504=(cj5*r02);
IkReal x14505=(sj1*sj5);
IkReal x14506=((10.0)*r02);
IkReal x14507=(sj1*sj2);
IkReal x14508=(cj6*r11);
IkReal x14509=((69.0)*cj2);
IkReal x14510=(cj6*r01);
IkReal x14511=(cj2*sj1);
IkReal x14512=(r12*sj4);
IkReal x14513=(r00*sj6);
IkReal x14514=((1000.0)*px);
IkReal x14515=(cj4*r11*sj6);
IkReal x14516=((10.0)*cj5*sj1);
IkReal x14517=((10.0)*cj2*cj5);
IkReal x14518=(x14499*x14500);
IkReal x14519=((69.0)*x14515);
IkReal x14520=((69.0)*sj5*x14512);
IkReal x14521=((69.0)*x14502*x14508);
IkReal x14522=(sj6*x14499*x14502);
IkReal x14523=(x14519+x14521+x14520+x14522);
CheckValue<IkReal> x14524=IKPowWithIntegerCheck((((x14501*x14507))+(((69.0)*x14507))+((sj2*x14498*x14509))),-1);
if(!x14524.valid){
continue;
}
CheckValue<IkReal> x14525=IKPowWithIntegerCheck(((((-69.0)*sj1))+(((-1.0)*sj1*x14501))+(((-1.0)*x14498*x14509))),-1);
if(!x14525.valid){
continue;
}
if( IKabs(((x14524.value)*(((((-1.0)*cj2*x14514))+(((-1.0)*sj5*x14503*x14510))+(((-1.0)*sj5*x14503*x14513))+(((-1.0)*x14511*x14522))+((cj2*sj5*x14506))+(((-1.0)*sj1*x14509*x14515))+((r10*sj6*x14501*x14502))+((x14511*x14518))+((x14501*x14502*x14508))+x14523+(((-1.0)*sj1*x14502*x14508*x14509))+(((-1.0)*x14518))+((x14513*x14517))+((sj5*x14501*x14512))+((x14503*x14504))+((x14501*x14515))+(((-1.0)*x14505*x14509*x14512))+(((-1.0)*r10*x14500*x14501))+((x14510*x14517)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14525.value)*((((x14505*x14506))+(((374.29)*sj1*x14504))+(((-1.0)*x14523))+x14518+((x14513*x14516))+(((-374.29)*x14505*x14510))+(((-374.29)*x14505*x14513))+(((-1.0)*sj1*x14514))+((x14510*x14516)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14524.value)*(((((-1.0)*cj2*x14514))+(((-1.0)*sj5*x14503*x14510))+(((-1.0)*sj5*x14503*x14513))+(((-1.0)*x14511*x14522))+((cj2*sj5*x14506))+(((-1.0)*sj1*x14509*x14515))+((r10*sj6*x14501*x14502))+((x14511*x14518))+((x14501*x14502*x14508))+x14523+(((-1.0)*sj1*x14502*x14508*x14509))+(((-1.0)*x14518))+((x14513*x14517))+((sj5*x14501*x14512))+((x14503*x14504))+((x14501*x14515))+(((-1.0)*x14505*x14509*x14512))+(((-1.0)*r10*x14500*x14501))+((x14510*x14517))))))+IKsqr(((x14525.value)*((((x14505*x14506))+(((374.29)*sj1*x14504))+(((-1.0)*x14523))+x14518+((x14513*x14516))+(((-374.29)*x14505*x14510))+(((-374.29)*x14505*x14513))+(((-1.0)*sj1*x14514))+((x14510*x14516))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14524.value)*(((((-1.0)*cj2*x14514))+(((-1.0)*sj5*x14503*x14510))+(((-1.0)*sj5*x14503*x14513))+(((-1.0)*x14511*x14522))+((cj2*sj5*x14506))+(((-1.0)*sj1*x14509*x14515))+((r10*sj6*x14501*x14502))+((x14511*x14518))+((x14501*x14502*x14508))+x14523+(((-1.0)*sj1*x14502*x14508*x14509))+(((-1.0)*x14518))+((x14513*x14517))+((sj5*x14501*x14512))+((x14503*x14504))+((x14501*x14515))+(((-1.0)*x14505*x14509*x14512))+(((-1.0)*r10*x14500*x14501))+((x14510*x14517))))), ((x14525.value)*((((x14505*x14506))+(((374.29)*sj1*x14504))+(((-1.0)*x14523))+x14518+((x14513*x14516))+(((-374.29)*x14505*x14510))+(((-374.29)*x14505*x14513))+(((-1.0)*sj1*x14514))+((x14510*x14516))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14526=IKcos(j0);
IkReal x14527=IKsin(j0);
IkReal x14528=((1.0)*sj4);
IkReal x14529=(cj6*sj3);
IkReal x14530=(cj3*cj5);
IkReal x14531=(sj5*sj6);
IkReal x14532=(r00*sj3);
IkReal x14533=((0.36442)*cj1);
IkReal x14534=((0.069)*sj2);
IkReal x14535=(cj6*r01);
IkReal x14536=((1.0)*cj3);
IkReal x14537=((0.37429)*sj5);
IkReal x14538=((0.01)*cj5);
IkReal x14539=(r10*sj6);
IkReal x14540=(r12*sj5);
IkReal x14541=((1.0)*cj4);
IkReal x14542=(r02*sj5);
IkReal x14543=((1.0)*sj1);
IkReal x14544=(cj3*cj6);
IkReal x14545=(r01*sj6);
IkReal x14546=(r00*sj6);
IkReal x14547=(cj6*r11);
IkReal x14548=((0.37429)*cj5);
IkReal x14549=(cj4*cj6);
IkReal x14550=(cj5*sj3);
IkReal x14551=(cj5*x14547);
IkReal x14552=(cj2*x14526);
IkReal x14553=((0.069)*x14527);
IkReal x14554=(r11*sj4*sj6);
IkReal x14555=(sj2*x14526);
IkReal x14556=((1.0)*x14527);
evalcond[0]=(((r10*x14549))+(((-1.0)*x14528*x14551))+((sj1*sj2*x14527))+(((-1.0)*cj5*x14528*x14539))+x14552+(((-1.0)*x14528*x14540))+(((-1.0)*r11*sj6*x14541)));
evalcond[1]=((((-1.0)*cj2*x14556))+(((-1.0)*cj5*x14528*x14535))+((r00*x14549))+(((-1.0)*cj5*x14528*x14546))+(((-1.0)*x14541*x14545))+(((-1.0)*x14528*x14542))+((sj1*x14555)));
evalcond[2]=(((r02*x14530))+(((-1.0)*sj3*x14541*x14542))+(((-1.0)*r00*x14528*x14529))+(((-1.0)*cj5*r01*x14529*x14541))+(((-1.0)*cj1*x14526))+(((-1.0)*r00*x14531*x14536))+(((-1.0)*cj5*sj6*x14532*x14541))+(((-1.0)*sj5*x14535*x14536))+((sj3*sj4*x14545)));
evalcond[3]=((((-1.0)*r10*x14531*x14536))+(((-1.0)*cj1*x14556))+((sj3*x14554))+(((-1.0)*sj5*x14536*x14547))+((r12*x14530))+(((-1.0)*sj3*x14540*x14541))+(((-1.0)*x14539*x14541*x14550))+(((-1.0)*r10*x14528*x14529))+(((-1.0)*cj5*r11*x14529*x14541)));
evalcond[4]=((((-1.0)*x14535*x14537))+((r02*x14548))+(((0.069)*x14526))+((x14538*x14546))+((x14526*x14533))+(((-0.069)*sj1*x14552))+(((-1.0)*x14527*x14534))+(((0.01)*x14542))+(((-1.0)*px))+(((-0.37429)*r00*x14531))+((x14535*x14538)));
evalcond[5]=(((r12*x14548))+(((-0.37429)*r10*x14531))+((x14538*x14539))+((x14538*x14547))+((x14526*x14534))+(((-1.0)*cj2*sj1*x14553))+(((0.01)*x14540))+(((-1.0)*py))+x14553+(((-1.0)*x14537*x14547))+((x14527*x14533)));
evalcond[6]=((((-1.0)*cj4*x14536*x14540))+((r11*sj5*x14529))+(((-1.0)*x14530*x14541*x14547))+((r10*sj3*x14531))+(((-1.0)*r10*x14528*x14544))+(((-1.0)*r12*x14550))+x14555+(((-1.0)*cj2*x14527*x14543))+(((-1.0)*x14530*x14539*x14541))+((cj3*x14554)));
evalcond[7]=(((cj3*sj4*x14545))+(((-1.0)*cj4*x14536*x14542))+(((-1.0)*x14530*x14541*x14546))+(((-1.0)*r02*x14550))+(((-1.0)*x14530*x14535*x14541))+(((-1.0)*r00*x14528*x14544))+((r01*sj5*x14529))+(((-1.0)*sj2*x14556))+(((-1.0)*x14543*x14552))+((x14531*x14532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14557=(r10*sj6);
IkReal x14558=((69.0)*cj2);
IkReal x14559=(cj6*r11);
IkReal x14560=((374.29)*sj5);
IkReal x14561=((10.0)*cj5);
IkReal x14562=(cj5*sj4);
IkReal x14563=(r11*sj6);
IkReal x14564=(sj1*sj2);
IkReal x14565=((1000.0)*py);
IkReal x14566=((69.0)*sj2);
IkReal x14567=(r12*sj5);
IkReal x14568=((364.42)*cj1);
IkReal x14569=(cj4*x14568);
IkReal x14570=(sj1*x14567);
IkReal x14571=((374.29)*cj5*r12);
IkReal x14572=((69.0)*cj4*cj6*r10);
IkReal x14573=(x14562*x14568);
CheckValue<IkReal> x14574 = IKatan2WithCheck(IkReal(((((-1.0)*cj2*x14571))+((cj2*x14557*x14560))+(((-1.0)*cj2*x14557*x14561))+(((-1.0)*sj4*x14566*x14567))+(((-10.0)*cj2*x14567))+(((-1.0)*x14559*x14562*x14566))+(((-1.0)*cj4*x14563*x14566))+((cj2*x14559*x14560))+(((-1.0)*x14557*x14562*x14566))+((cj2*x14565))+((cj4*cj6*r10*x14566))+(((-1.0)*cj2*x14559*x14561)))),IkReal(((((-1.0)*cj4*sj1*x14558*x14563))+(((-1.0)*sj1*x14557*x14558*x14562))+((sj4*x14567*x14568))+(((-1.0)*cj6*r10*x14569))+(((69.0)*x14559*x14562))+(((69.0)*sj4*x14567))+(((10.0)*x14564*x14567))+(((-1.0)*sj1*x14558*x14559*x14562))+(((-1.0)*x14572))+((x14563*x14569))+((cj4*cj6*r10*sj1*x14558))+(((-1.0)*sj4*x14558*x14570))+(((-1.0)*x14564*x14565))+(((69.0)*cj4*x14563))+(((-1.0)*x14559*x14560*x14564))+((x14557*x14573))+((x14559*x14561*x14564))+((x14559*x14573))+(((69.0)*x14557*x14562))+(((-1.0)*x14557*x14560*x14564))+((x14557*x14561*x14564))+((x14564*x14571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14574.valid){
continue;
}
CheckValue<IkReal> x14575=IKPowWithIntegerCheck(IKsign(((((-69.0)*sj1))+x14558+((cj2*x14568)))),-1);
if(!x14575.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x14574.value)+(((1.5707963267949)*(x14575.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14576=IKcos(j0);
IkReal x14577=IKsin(j0);
IkReal x14578=((1.0)*sj4);
IkReal x14579=(cj6*sj3);
IkReal x14580=(cj3*cj5);
IkReal x14581=(sj5*sj6);
IkReal x14582=(r00*sj3);
IkReal x14583=((0.36442)*cj1);
IkReal x14584=((0.069)*sj2);
IkReal x14585=(cj6*r01);
IkReal x14586=((1.0)*cj3);
IkReal x14587=((0.37429)*sj5);
IkReal x14588=((0.01)*cj5);
IkReal x14589=(r10*sj6);
IkReal x14590=(r12*sj5);
IkReal x14591=((1.0)*cj4);
IkReal x14592=(r02*sj5);
IkReal x14593=((1.0)*sj1);
IkReal x14594=(cj3*cj6);
IkReal x14595=(r01*sj6);
IkReal x14596=(r00*sj6);
IkReal x14597=(cj6*r11);
IkReal x14598=((0.37429)*cj5);
IkReal x14599=(cj4*cj6);
IkReal x14600=(cj5*sj3);
IkReal x14601=(cj5*x14597);
IkReal x14602=(cj2*x14576);
IkReal x14603=((0.069)*x14577);
IkReal x14604=(r11*sj4*sj6);
IkReal x14605=(sj2*x14576);
IkReal x14606=((1.0)*x14577);
evalcond[0]=((((-1.0)*cj5*x14578*x14589))+(((-1.0)*x14578*x14590))+(((-1.0)*x14578*x14601))+((r10*x14599))+((sj1*sj2*x14577))+x14602+(((-1.0)*r11*sj6*x14591)));
evalcond[1]=((((-1.0)*cj5*x14578*x14596))+(((-1.0)*cj5*x14578*x14585))+(((-1.0)*x14578*x14592))+(((-1.0)*cj2*x14606))+((sj1*x14605))+(((-1.0)*x14591*x14595))+((r00*x14599)));
evalcond[2]=(((r02*x14580))+((sj3*sj4*x14595))+(((-1.0)*r00*x14581*x14586))+(((-1.0)*cj5*sj6*x14582*x14591))+(((-1.0)*r00*x14578*x14579))+(((-1.0)*sj3*x14591*x14592))+(((-1.0)*sj5*x14585*x14586))+(((-1.0)*cj1*x14576))+(((-1.0)*cj5*r01*x14579*x14591)));
evalcond[3]=((((-1.0)*x14589*x14591*x14600))+(((-1.0)*sj5*x14586*x14597))+(((-1.0)*cj1*x14606))+(((-1.0)*sj3*x14590*x14591))+((sj3*x14604))+(((-1.0)*r10*x14581*x14586))+(((-1.0)*r10*x14578*x14579))+((r12*x14580))+(((-1.0)*cj5*r11*x14579*x14591)));
evalcond[4]=((((0.069)*x14576))+(((0.01)*x14592))+(((-1.0)*x14577*x14584))+(((-1.0)*px))+((x14585*x14588))+(((-1.0)*x14585*x14587))+((x14576*x14583))+(((-0.37429)*r00*x14581))+((x14588*x14596))+(((-0.069)*sj1*x14602))+((r02*x14598)));
evalcond[5]=((((-1.0)*x14587*x14597))+(((0.01)*x14590))+(((-0.37429)*r10*x14581))+(((-1.0)*cj2*sj1*x14603))+(((-1.0)*py))+x14603+((x14576*x14584))+((r12*x14598))+((x14588*x14597))+((x14577*x14583))+((x14588*x14589)));
evalcond[6]=((((-1.0)*x14580*x14591*x14597))+(((-1.0)*r10*x14578*x14594))+(((-1.0)*cj4*x14586*x14590))+(((-1.0)*cj2*x14577*x14593))+((cj3*x14604))+((r11*sj5*x14579))+x14605+(((-1.0)*x14580*x14589*x14591))+((r10*sj3*x14581))+(((-1.0)*r12*x14600)));
evalcond[7]=((((-1.0)*r00*x14578*x14594))+(((-1.0)*x14580*x14591*x14596))+(((-1.0)*sj2*x14606))+(((-1.0)*r02*x14600))+((x14581*x14582))+(((-1.0)*x14580*x14585*x14591))+(((-1.0)*cj4*x14586*x14592))+(((-1.0)*x14593*x14602))+((cj3*sj4*x14595))+((r01*sj5*x14579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14607=cj1*cj1;
IkReal x14608=((1.0)*r01);
IkReal x14609=(cj5*cj6);
IkReal x14610=(r02*sj5);
IkReal x14611=(cj2*sj4);
IkReal x14612=(cj5*sj6);
IkReal x14613=(cj4*cj6);
IkReal x14614=(r12*sj5);
IkReal x14615=(cj2*cj4*sj6);
IkReal x14616=(sj1*sj2*sj4);
IkReal x14617=((1.0)*sj1*sj2);
IkReal x14618=(cj4*sj1*sj2*sj6);
CheckValue<IkReal> x14619=IKPowWithIntegerCheck(IKsign(((1.0)+((x14607*(cj2*cj2)))+(((-1.0)*x14607)))),-1);
if(!x14619.valid){
continue;
}
CheckValue<IkReal> x14620 = IKatan2WithCheck(IkReal(((((-1.0)*x14608*x14609*x14611))+(((-1.0)*r00*x14611*x14612))+(((-1.0)*r10*x14613*x14617))+((r11*x14609*x14616))+((x14614*x14616))+(((-1.0)*x14610*x14611))+((cj2*r00*x14613))+((r11*x14618))+((r10*x14612*x14616))+(((-1.0)*x14608*x14615)))),IkReal((((r01*x14609*x14616))+((r11*x14609*x14611))+((r00*x14612*x14616))+(((-1.0)*r00*x14613*x14617))+((r01*x14618))+((x14610*x14616))+((r11*x14615))+((x14611*x14614))+((r10*x14611*x14612))+(((-1.0)*cj2*r10*x14613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14620.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14619.value)))+(x14620.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14621=IKcos(j0);
IkReal x14622=IKsin(j0);
IkReal x14623=((1.0)*sj4);
IkReal x14624=(cj6*sj3);
IkReal x14625=(cj3*cj5);
IkReal x14626=(sj5*sj6);
IkReal x14627=(r00*sj3);
IkReal x14628=((0.36442)*cj1);
IkReal x14629=((0.069)*sj2);
IkReal x14630=(cj6*r01);
IkReal x14631=((1.0)*cj3);
IkReal x14632=((0.37429)*sj5);
IkReal x14633=((0.01)*cj5);
IkReal x14634=(r10*sj6);
IkReal x14635=(r12*sj5);
IkReal x14636=((1.0)*cj4);
IkReal x14637=(r02*sj5);
IkReal x14638=((1.0)*sj1);
IkReal x14639=(cj3*cj6);
IkReal x14640=(r01*sj6);
IkReal x14641=(r00*sj6);
IkReal x14642=(cj6*r11);
IkReal x14643=((0.37429)*cj5);
IkReal x14644=(cj4*cj6);
IkReal x14645=(cj5*sj3);
IkReal x14646=(cj5*x14642);
IkReal x14647=(cj2*x14621);
IkReal x14648=((0.069)*x14622);
IkReal x14649=(r11*sj4*sj6);
IkReal x14650=(sj2*x14621);
IkReal x14651=((1.0)*x14622);
evalcond[0]=((((-1.0)*x14623*x14646))+(((-1.0)*r11*sj6*x14636))+((r10*x14644))+(((-1.0)*x14623*x14635))+(((-1.0)*cj5*x14623*x14634))+((sj1*sj2*x14622))+x14647);
evalcond[1]=((((-1.0)*x14636*x14640))+(((-1.0)*x14623*x14637))+((sj1*x14650))+(((-1.0)*cj2*x14651))+((r00*x14644))+(((-1.0)*cj5*x14623*x14630))+(((-1.0)*cj5*x14623*x14641)));
evalcond[2]=(((sj3*sj4*x14640))+(((-1.0)*r00*x14626*x14631))+(((-1.0)*cj5*sj6*x14627*x14636))+((r02*x14625))+(((-1.0)*sj3*x14636*x14637))+(((-1.0)*sj5*x14630*x14631))+(((-1.0)*cj5*r01*x14624*x14636))+(((-1.0)*r00*x14623*x14624))+(((-1.0)*cj1*x14621)));
evalcond[3]=((((-1.0)*cj5*r11*x14624*x14636))+(((-1.0)*sj5*x14631*x14642))+(((-1.0)*sj3*x14635*x14636))+(((-1.0)*r10*x14626*x14631))+(((-1.0)*cj1*x14651))+((sj3*x14649))+(((-1.0)*x14634*x14636*x14645))+((r12*x14625))+(((-1.0)*r10*x14623*x14624)));
evalcond[4]=((((0.01)*x14637))+(((0.069)*x14621))+(((-1.0)*x14622*x14629))+((x14630*x14633))+((x14633*x14641))+(((-1.0)*px))+(((-0.069)*sj1*x14647))+((r02*x14643))+(((-0.37429)*r00*x14626))+(((-1.0)*x14630*x14632))+((x14621*x14628)));
evalcond[5]=(((x14633*x14634))+((r12*x14643))+((x14622*x14628))+(((0.01)*x14635))+(((-0.37429)*r10*x14626))+(((-1.0)*cj2*sj1*x14648))+((x14633*x14642))+(((-1.0)*py))+(((-1.0)*x14632*x14642))+x14648+((x14621*x14629)));
evalcond[6]=((((-1.0)*x14625*x14634*x14636))+(((-1.0)*cj4*x14631*x14635))+(((-1.0)*r12*x14645))+((r10*sj3*x14626))+(((-1.0)*x14625*x14636*x14642))+((r11*sj5*x14624))+x14650+(((-1.0)*r10*x14623*x14639))+((cj3*x14649))+(((-1.0)*cj2*x14622*x14638)));
evalcond[7]=((((-1.0)*cj4*x14631*x14637))+((r01*sj5*x14624))+((x14626*x14627))+((cj3*sj4*x14640))+(((-1.0)*x14625*x14636*x14641))+(((-1.0)*x14638*x14647))+(((-1.0)*x14625*x14630*x14636))+(((-1.0)*r02*x14645))+(((-1.0)*sj2*x14651))+(((-1.0)*r00*x14623*x14639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


// functions added by Andreas
#include <stdio.h>

IKFAST_API void deleteDoublePointer(double* p)
{
  delete p;
  p = NULL;
}


IKFAST_API double* computeInverseKinematics( double r00, double r01, double r02, 
                                                            double r10, double r11, double r12, 
                                                            double r20, double r21, double r22,
                                                            double t0,  double t1,  double t2, 
                                                            double v0)
{
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(1);
  vfree[0] = v0;
  IkReal eerot[9],eetrans[3];
  eerot[0] = r00; eerot[1] = r01; eerot[2] = r02; 
  eerot[3] = r10; eerot[4] = r11; eerot[5] = r12; 
  eerot[6] = r20; eerot[7] = r21; eerot[8] = r22; 
  eetrans[0] = t0; eetrans[1] = t1; eetrans[2] = t2;
  // printf("%.15f", eetrans[0]);
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
  
  double* solutions_array = new double[(int)solutions.GetNumSolutions()*7];
  solutions_array[0] = -1.35768;
  
  // printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
      const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
      // printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
      std::vector<IkReal> vsolfree(sol.GetFree().size());
      sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
      for( std::size_t j = 0; j < solvalues.size(); ++j)
      {
        solutions_array[i*7+j] = solvalues[j];
        // printf("%.15f, ", solvalues[j]);
      }
      // printf("\n");
  }
  
  // return bSuccess;
  return solutions_array;
}


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "066a871837ad268b50406eb32c2e6dba"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
