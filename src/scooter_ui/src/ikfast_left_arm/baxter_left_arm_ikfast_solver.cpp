/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-07-29 00:32:56.092468
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72;
x0=IKsin(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((0.37429)*x2);
x15=((1.0)*x12);
x16=((0.01)*x0);
x17=((1.0)*x0);
x18=((0.22952)*x9);
x19=((0.22952)*x8);
x20=((0.01)*x4);
x21=((0.37429)*x0);
x22=((0.069)*x3);
x23=((1.0)*x3);
x24=((1.0)*x9);
x25=((0.069)*x0);
x26=((0.01)*x7);
x27=((1.0)*x8);
x28=((1.0)*x4);
x29=((0.36442)*x6);
x30=((1.0)*x13);
x31=((1.0)*x2);
x32=(x6*x7);
x33=((-1.0)*x9);
x34=(x4*x7);
x35=(x5*x6);
x36=(x1*x2);
x37=((-1.0)*x8);
x38=(x2*x3);
x39=(x1*x6);
x40=(x3*x4);
x41=(x1*x4);
x42=(x28*x36);
x43=(x31*x32);
x44=(x17*x40);
x45=(x17*x32);
x46=((((-1.0)*x44))+x36);
x47=(((x4*x5))+(((-1.0)*x23*x32)));
x48=(((x3*x35))+x34);
x49=((((-1.0)*x17*x3))+x42);
x50=((((-1.0)*x1*x31))+x44);
x51=(((x1*x17))+((x2*x23*x4)));
x52=((-1.0)*x51);
x53=(((x17*x41))+((x2*x23)));
x54=((-1.0)*x53);
x55=(x46*x7);
x56=(x12*x48);
x57=(x49*x8);
x58=(x5*x50);
x59=(x52*x7);
x60=(x5*x51);
x61=((((-1.0)*x17*x35))+x55);
x62=(((x47*x9))+((x39*x8)));
x63=((((-1.0)*x45))+x58);
x64=((((-1.0)*x27*x47))+((x24*x39)));
x65=((((-1.0)*x31*x35))+x59);
x66=((((-1.0)*x43))+x60);
x67=(x13*x62);
x68=(x12*x63);
x69=(((x53*x8))+((x61*x9)));
x70=(x57+((x65*x9)));
x71=(x13*x69);
x72=(((x37*x65))+((x33*(((((-1.0)*x42))+((x0*x3)))))));
eerot[0]=(((x10*((((x12*x66))+((x13*x70))))))+((x11*x72)));
eerot[1]=(((x10*x72))+((x11*(((((-1.0)*x15*x66))+(((-1.0)*x30*x70)))))));
eerot[2]=(((x13*((x43+(((-1.0)*x60))))))+((x12*x70)));
IkReal x73=((1.0)*x1);
eetrans[0]=((0.0557)+(((0.069)*x2))+(((-1.0)*x2*x22*x4))+((x8*((((x20*x36))+(((-1.0)*x16*x3))))))+(((-1.0)*x25*x73))+((x12*((((x19*x49))+((x18*x65))))))+((x14*x32))+((x13*(((((-0.22952)*x60))+(((0.22952)*x2*x32))))))+((x2*x29))+((x9*((((x26*x52))+(((-0.01)*x2*x35))))))+((x5*(((((-1.0)*x14*x40))+(((-1.0)*x21*x73)))))));
eerot[3]=(((x10*((x71+x68))))+((x11*(((((-1.0)*x27*x61))+(((-1.0)*x24*x54)))))));
eerot[4]=(((x11*(((((-1.0)*x30*x69))+(((-1.0)*x15*x63))))))+((x10*((((x37*x61))+((x33*x54)))))));
eerot[5]=(((x12*x69))+((x13*((x45+(((-1.0)*x58)))))));
IkReal x74=((1.0)*x0);
eetrans[1]=(((x9*((((x26*x46))+(((-1.0)*x16*x35))))))+((x0*x29))+(((-1.0)*x22*x4*x74))+((x21*x32))+((x12*((((x19*x53))+((x18*(((((-1.0)*x35*x74))+x55))))))))+x25+((x13*(((((-0.22952)*x58))+(((0.22952)*x0*x32))))))+((x5*((((x1*x14))+(((-1.0)*x21*x40))))))+((x8*((((x16*x41))+(((0.01)*x38))))))+(((0.069)*x36)));
eerot[6]=(((x10*((x56+x67))))+((x11*x64)));
eerot[7]=(((x10*x64))+((x11*(((((-1.0)*x56))+(((-1.0)*x67)))))));
eerot[8]=(((x12*x62))+((x13*(((((-1.0)*x28*x7))+(((-1.0)*x23*x35)))))));
IkReal x75=((1.0)*x6);
IkReal x76=(x3*x35);
eetrans[2]=((0.28139)+((x12*((((x19*x39))+((x18*x47))))))+(((0.01)*x39*x8))+((x13*(((((-0.22952)*x76))+(((-0.22952)*x34))))))+(((-0.37429)*x34))+(((-0.36442)*x4))+(((-0.37429)*x76))+(((-1.0)*x22*x75))+((x9*(((((-1.0)*x26*x3*x75))+((x20*x5)))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j6,cj6,sj6,htj6,j6mul,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]), htj5=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=r00;
new_r02=r02;
new_px=((-0.0557)+(((-0.22952)*r02))+px);
new_r10=((-1.0)*r11);
new_r11=r10;
new_r12=r12;
new_py=((((-0.22952)*r12))+py);
new_r20=((-1.0)*r21);
new_r21=r20;
new_r22=r22;
new_pz=((-0.28139)+(((-0.22952)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x77=((1.0)*px);
IkReal x78=((1.0)*pz);
IkReal x79=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x79))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x78)));
rxp0_2=((((-1.0)*r10*x77))+((py*r00)));
rxp1_0=((((-1.0)*r21*x79))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x78)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x77)));
rxp2_0=((((-1.0)*r22*x79))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x78)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x77)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x80=(r22*sj5);
IkReal x81=(cj5*r20);
IkReal x82=(cj5*r21);
IkReal x83=((0.37429)*r21);
IkReal x84=(r20*sj5);
IkReal x85=((0.01)*cj5);
IkReal x86=((0.37429)*sj5);
IkReal x87=(r21*sj5);
IkReal x88=((-1.0)*r21);
IkReal x89=((-1.0)*npx);
IkReal x90=((0.01)+(((-1.0)*npz*sj5)));
IkReal x91=((-1.0)*r11);
IkReal x92=((-1.0)*r01);
IkReal x93=((-1.0)*cj5);
IkReal x94=((-1.0)*npy);
IkReal x95=((-1.0)*sj5);
IkReal x96=((-1.0)*x80);
IkReal x97=(r12*x95);
IkReal x98=(r02*x95);
IkReal x99=((-1.0)*x81);
IkReal x100=(r10*x93);
IkReal x101=(r00*x93);
IkReal x102=((-1.0)*x82);
IkReal x103=(cj5*x91);
IkReal x104=(cj5*x92);
IkReal x105=(cj5*x89);
IkReal x106=(npy*x93);
IkReal x107=((((-0.37429)*x84))+(((0.01)*x81)));
IkReal x108=(((r00*x85))+(((-1.0)*r00*x86)));
IkReal x109=((((0.01)*x82))+(((-1.0)*sj5*x83)));
IkReal x110=(((r01*x85))+(((-1.0)*r01*x86)));
matrixinvcoeffs[0]=x107;
matrixinvcoeffs[1]=x108;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=x84;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=(sj5*x89);
matrixinvcoeffs[15]=0;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=0;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=x107;
matrixinvcoeffs[22]=x108;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=((-1.0)*x84);
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=(npx*sj5);
matrixinvcoeffs[30]=0;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x109;
matrixinvcoeffs[33]=x110;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=x87;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=(sj5*x94);
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=0;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=x109;
matrixinvcoeffs[54]=x110;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=((-1.0)*x87);
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=(npy*sj5);
matrixinvcoeffs[62]=0;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=x96;
matrixinvcoeffs[67]=x97;
matrixinvcoeffs[68]=x98;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=0;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=0;
matrixinvcoeffs[79]=(rxp2_2*sj5);
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=x96;
matrixinvcoeffs[88]=x97;
matrixinvcoeffs[89]=x98;
matrixinvcoeffs[90]=x90;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=0;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=0;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=x99;
matrixinvcoeffs[99]=x100;
matrixinvcoeffs[100]=x101;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=x88;
matrixinvcoeffs[108]=0;
matrixinvcoeffs[109]=npy;
matrixinvcoeffs[110]=0;
matrixinvcoeffs[111]=(((cj5*rxp0_2))+x83);
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=x99;
matrixinvcoeffs[120]=x100;
matrixinvcoeffs[121]=x101;
matrixinvcoeffs[122]=x105;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=x88;
matrixinvcoeffs[125]=0;
matrixinvcoeffs[126]=npy;
matrixinvcoeffs[127]=0;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=x102;
matrixinvcoeffs[131]=x103;
matrixinvcoeffs[132]=x104;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=r20;
matrixinvcoeffs[140]=0;
matrixinvcoeffs[141]=x89;
matrixinvcoeffs[142]=0;
matrixinvcoeffs[143]=(((cj5*rxp1_2))+(((-0.37429)*r20)));
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=x102;
matrixinvcoeffs[152]=x103;
matrixinvcoeffs[153]=x104;
matrixinvcoeffs[154]=x106;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=r20;
matrixinvcoeffs[157]=0;
matrixinvcoeffs[158]=x89;
matrixinvcoeffs[159]=0;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=x80;
matrixinvcoeffs[172]=0;
matrixinvcoeffs[173]=x90;
matrixinvcoeffs[174]=0;
matrixinvcoeffs[175]=((((-0.37429)*x80))+((r22*x85)));
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=x80;
matrixinvcoeffs[189]=0;
matrixinvcoeffs[190]=x90;
matrixinvcoeffs[191]=0;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=x88;
matrixinvcoeffs[195]=x91;
matrixinvcoeffs[196]=x92;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x81;
matrixinvcoeffs[204]=0;
matrixinvcoeffs[205]=x105;
matrixinvcoeffs[206]=0;
matrixinvcoeffs[207]=((((-0.37429)*x81))+rxp1_2+(((-0.01)*x84)));
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=x88;
matrixinvcoeffs[216]=x91;
matrixinvcoeffs[217]=x92;
matrixinvcoeffs[218]=x94;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=x81;
matrixinvcoeffs[221]=0;
matrixinvcoeffs[222]=x105;
matrixinvcoeffs[223]=0;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=r20;
matrixinvcoeffs[227]=r10;
matrixinvcoeffs[228]=r00;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=x82;
matrixinvcoeffs[236]=0;
matrixinvcoeffs[237]=x106;
matrixinvcoeffs[238]=0;
matrixinvcoeffs[239]=((((-0.37429)*x82))+(((-0.01)*x87))+(((-1.0)*rxp0_2)));
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=r20;
matrixinvcoeffs[248]=r10;
matrixinvcoeffs[249]=r00;
matrixinvcoeffs[250]=npx;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=x82;
matrixinvcoeffs[253]=0;
matrixinvcoeffs[254]=x106;
matrixinvcoeffs[255]=0;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal op[72], zeror[48];
int numroots;;
IkReal x111=((0.138)*cj0);
IkReal x112=((0.138)*sj0);
IkReal x113=((1.0)*py);
IkReal x114=((-0.138)*sj0);
IkReal x115=((0.37429)*cj5*r12);
IkReal x116=((0.01)*r12*sj5);
IkReal x117=((((0.02)*npz*sj5))+(((0.74858)*cj5*npz)));
IkReal x118=(x116+x115);
IkReal x119=((-0.0524208923)+(((-1.0)*x117))+pp);
IkReal x120=((0.0481590277)+(((-1.0)*x117))+pp);
IkReal x121=((((-1.0)*x113))+x118+(((0.43342)*sj0)));
IkReal x122=((((-1.0)*x113))+x118+(((-0.29542)*sj0)));
op[0]=x121;
op[1]=0;
op[2]=x111;
op[3]=0;
op[4]=x121;
op[5]=0;
op[6]=x119;
op[7]=0;
op[8]=0;
op[9]=0;
op[10]=x119;
op[11]=0;
op[12]=0;
op[13]=x121;
op[14]=0;
op[15]=x111;
op[16]=0;
op[17]=x121;
op[18]=0;
op[19]=x119;
op[20]=0;
op[21]=0;
op[22]=0;
op[23]=x119;
op[24]=x114;
op[25]=0;
op[26]=0;
op[27]=0;
op[28]=x112;
op[29]=0;
op[30]=0.019044;
op[31]=0;
op[32]=0;
op[33]=0;
op[34]=-0.019044;
op[35]=0;
op[36]=0;
op[37]=x114;
op[38]=0;
op[39]=0;
op[40]=0;
op[41]=x112;
op[42]=0;
op[43]=0.019044;
op[44]=0;
op[45]=0;
op[46]=0;
op[47]=-0.019044;
op[48]=x122;
op[49]=0;
op[50]=x111;
op[51]=0;
op[52]=x122;
op[53]=0;
op[54]=x120;
op[55]=0;
op[56]=0;
op[57]=0;
op[58]=x120;
op[59]=0;
op[60]=0;
op[61]=x122;
op[62]=0;
op[63]=x111;
op[64]=0;
op[65]=x122;
op[66]=0;
op[67]=x120;
op[68]=0;
op[69]=0;
op[70]=0;
op[71]=x120;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x123=htj1*htj1;
CheckValue<IkReal> x124=IKPowWithIntegerCheck(((1.0)+x123),-1);
if(!x124.valid){
continue;
}
cj1array[numsolutions]=((x124.value)*(((1.0)+(((-1.0)*x123)))));
CheckValue<IkReal> x125=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x125.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x125.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x126=htj2*htj2;
CheckValue<IkReal> x127=IKPowWithIntegerCheck(((1.0)+x126),-1);
if(!x127.valid){
continue;
}
cj2array[numsolutions]=((x127.value)*(((1.0)+(((-1.0)*x126)))));
CheckValue<IkReal> x128=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x128.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x128.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x129=htj3*htj3;
CheckValue<IkReal> x130=IKPowWithIntegerCheck(((1.0)+x129),-1);
if(!x130.valid){
continue;
}
cj3array[numsolutions]=((x130.value)*(((1.0)+(((-1.0)*x129)))));
CheckValue<IkReal> x131=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x131.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x131.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j6eval[2];
IkReal x132=cj5*cj5;
IkReal x133=r21*r21;
IkReal x134=r20*r20;
IkReal x135=sj5*sj5;
IkReal x136=((37429.0)*sj5);
IkReal x137=((1000.0)*cj5);
IkReal x138=((74.858)*cj5*sj5);
IkReal x139=((1400.930041)*x135);
j6eval[0]=((((-1.0)*x134*x138))+(((-1.0)*x133*x138))+((x134*x139))+((x133*x139))+((x132*x133))+((x132*x134)));
j6eval[1]=((IKabs(((((-1.0)*r21*x136))+((r21*x137)))))+(IKabs((((r20*x137))+(((-1.0)*r20*x136))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
evalcond[1]=((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x140=(py*r01);
IkReal x141=(px*r00);
IkReal x142=(pz*r00);
IkReal x143=((-1.0)*r01);
IkReal x144=(((px*r01))+((py*r00)));
IkReal x145=(pz*x143);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x143;
r11=r00;
npx=(x141+(((-1.0)*x140)));
npy=x144;
npz=(pz*r22);
rxp0_0=x145;
rxp0_1=((-1.0)*x142);
rxp0_2=x144;
rxp1_0=x142;
rxp1_1=x145;
rxp1_2=(x140+(((-1.0)*x141)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj5;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x146=(py*r01);
IkReal x147=(px*r00);
IkReal x148=(pz*r00);
IkReal x149=((-1.0)*r01);
IkReal x150=(((px*r01))+((py*r00)));
IkReal x151=(pz*x149);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x149;
r11=r00;
npx=(x147+(((-1.0)*x146)));
npy=x150;
npz=(pz*r22);
rxp0_0=x151;
rxp0_1=((-1.0)*x148);
rxp0_2=x150;
rxp1_0=x148;
rxp1_1=x151;
rxp1_2=(x146+(((-1.0)*x147)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj5;
j4eval[2]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x152=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.37429)*r22))+(((-1.0)*pz))+(((-0.069)*x152))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((cj3*r22)));
evalcond[4]=((((-1.0)*x152))+(((-1.0)*r22*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal op[8+1], zeror[8];
int numroots;
IkReal x153=((0.01)*r00);
IkReal x154=((1.0)*py);
IkReal x155=((0.01)*r01);
IkReal x156=((1.0)*px);
IkReal x157=(cj2*sj1);
IkReal x158=((0.069)*x157);
IkReal x159=((((-1.0)*x154))+x153);
IkReal x160=((0.138)+(((-0.138)*x157)));
IkReal x161=((((-1.0)*x153))+(((-1.0)*x154)));
IkReal x162=((-0.069)+x158);
IkReal x163=(x156+x158);
IkReal x164=((0.069)+(((-1.0)*x163))+x155);
IkReal x165=((0.069)+(((-1.0)*x155))+(((-1.0)*x163)));
IkReal x166=((((-1.0)*x156))+x162+x155);
IkReal x167=((((-1.0)*x155))+(((-1.0)*x156))+x162);
IkReal gconst40=x159;
IkReal gconst41=x161;
IkReal gconst42=x164;
IkReal gconst43=x165;
IkReal gconst44=x159;
IkReal gconst45=x161;
IkReal gconst46=x164;
IkReal gconst47=x165;
IkReal gconst48=x160;
IkReal gconst49=x160;
IkReal gconst50=x160;
IkReal gconst51=x160;
IkReal gconst52=x159;
IkReal gconst53=x161;
IkReal gconst54=x166;
IkReal gconst55=x167;
IkReal gconst56=x159;
IkReal gconst57=x161;
IkReal gconst58=x166;
IkReal gconst59=x167;
IkReal x168=r00*r00;
IkReal x169=r01*r01;
IkReal x170=(gconst46*gconst49);
IkReal x171=(gconst53*gconst59);
IkReal x172=(gconst42*gconst50);
IkReal x173=(gconst43*gconst50);
IkReal x174=(gconst53*gconst58);
IkReal x175=(gconst55*gconst56);
IkReal x176=((1.0)*gconst47);
IkReal x177=(gconst43*gconst48);
IkReal x178=(gconst41*gconst47);
IkReal x179=(gconst50*gconst54);
IkReal x180=(gconst51*gconst58);
IkReal x181=(gconst40*gconst43);
IkReal x182=(gconst44*gconst54);
IkReal x183=(gconst48*gconst55);
IkReal x184=(gconst45*gconst46);
IkReal x185=(gconst40*gconst55);
IkReal x186=((1.0)*gconst59);
IkReal x187=(gconst43*gconst44);
IkReal x188=(gconst46*gconst51);
IkReal x189=(gconst49*gconst59);
IkReal x190=(r00*r01);
IkReal x191=(gconst41*gconst58);
IkReal x192=(gconst52*gconst55);
IkReal x193=(gconst45*gconst58);
IkReal x194=((1.0)*gconst42);
IkReal x195=(gconst46*gconst57);
IkReal x196=(gconst42*gconst44);
IkReal x197=(gconst47*gconst49);
IkReal x198=(gconst57*gconst58);
IkReal x199=((1.0)*gconst54);
IkReal x200=(gconst43*gconst56);
IkReal x201=((0.0004)*gconst55);
IkReal x202=(gconst54*gconst56);
IkReal x203=((0.0008)*gconst50);
IkReal x204=((0.0004)*gconst44);
IkReal x205=((0.0004)*gconst46);
IkReal x206=((0.0008)*gconst56);
IkReal x207=(gconst44*gconst55);
IkReal x208=(gconst49*gconst58);
IkReal x209=((0.0008)*gconst46);
IkReal x210=((0.0004)*gconst56);
IkReal x211=(gconst43*gconst52);
IkReal x212=((0.0004)*gconst50);
IkReal x213=(gconst47*gconst53);
IkReal x214=(gconst42*gconst56);
IkReal x215=(gconst41*gconst59);
IkReal x216=((0.0008)*gconst44);
IkReal x217=(gconst45*x194);
IkReal x218=(gconst52*x176);
IkReal x219=(gconst58*x169);
IkReal x220=(gconst49*x168);
IkReal x221=(gconst43*x169);
IkReal x222=(gconst41*x168);
IkReal x223=(gconst53*x168);
IkReal x224=((0.0008)*x223);
IkReal x225=(x210*x223);
IkReal x226=((0.0004)*x175*x190);
IkReal x227=(x201*x219);
IkReal x228=((0.0004)*x174*x190);
IkReal x229=((0.0004)*x190*x208);
IkReal x230=(gconst50*x190*x201);
IkReal x231=(x210*x220);
IkReal x232=(x212*x223);
IkReal x233=(gconst53*x190*x205);
IkReal x234=(x210*x222);
IkReal x235=((0.0004)*x190*x200);
IkReal x236=(x204*x223);
IkReal x237=(gconst44*x190*x201);
IkReal x238=(x212*x220);
IkReal x239=(gconst46*x169*x201);
IkReal x240=((0.0004)*x190*x191);
IkReal x241=((0.0004)*gconst43*x219);
IkReal x242=(x212*x222);
IkReal x243=(x204*x220);
IkReal x244=((0.0004)*x173*x190);
IkReal x245=((0.0004)*x170*x190);
IkReal x246=(x204*x222);
IkReal x247=(gconst41*x190*x205);
IkReal x248=((0.0004)*x187*x190);
IkReal x249=(x205*x221);
IkReal x250=(x228+x225+x227+x226);
IkReal x251=(x229+x232+x230+x231);
IkReal x252=(x247+x246+x249+x248);
IkReal x253=(x243+x242+x245+x244);
IkReal x254=(x238+x239+x233+x236+x237+x234+x235+x241+x240);
op[0]=(((x171*x202))+(((-1.0)*gconst52*x175*x186))+((x192*x198))+(((-1.0)*gconst57*x174*x199))+(((-1.0)*x250)));
op[1]=((((-1.0)*gconst50*x186*x192))+(((-1.0)*gconst49*x198*x199))+((x180*x192))+((x189*x202))+((x171*x179))+(((-1.0)*gconst48*x175*x186))+((x183*x198))+(((-1.0)*x251))+(((-1.0)*gconst51*x174*x199)));
op[2]=((((-1.0)*gconst44*x186*x192))+(((-1.0)*x206*x223))+(((-0.0008)*x175*x190))+((x180*x183))+(((-0.0008)*x174*x190))+((x202*x215))+((x202*x213))+((x179*x189))+(((-1.0)*gconst40*x175*x186))+((x171*x214))+(((-1.0)*gconst53*x195*x199))+(((-1.0)*gconst57*x191*x199))+((x198*x211))+(((-0.0008)*gconst55*x219))+((x185*x198))+(((-1.0)*gconst52*x186*x200))+((x192*x195))+((x192*x193))+((x171*x182))+(((-1.0)*gconst49*x180*x199))+(((-1.0)*gconst57*x174*x194))+(((-1.0)*x175*x218))+(((-1.0)*gconst45*x174*x199))+(((-1.0)*gconst50*x183*x186))+(((-1.0)*x254)));
op[3]=(((x179*x215))+((x179*x213))+(((-1.0)*x206*x220))+(((-1.0)*gconst52*x173*x186))+((x180*x185))+(((-1.0)*gconst56*x177*x186))+(((-1.0)*gconst49*x193*x199))+((x188*x192))+(((-1.0)*gconst48*x175*x176))+(((-1.0)*gconst50*x185*x186))+((x197*x202))+((x171*x172))+(((-1.0)*x203*x223))+((x189*x214))+(((-0.0008)*x190*x208))+(((-1.0)*gconst55*x190*x203))+((x180*x211))+(((-1.0)*gconst50*x176*x192))+(((-1.0)*gconst57*x170*x199))+(((-1.0)*gconst49*x194*x198))+(((-1.0)*gconst44*x183*x186))+((x177*x198))+(((-1.0)*gconst41*x180*x199))+(((-1.0)*gconst53*x188*x199))+((x182*x189))+((x183*x195))+((x183*x193))+(((-1.0)*x253))+(((-1.0)*gconst51*x174*x194)));
op[4]=((((-1.0)*x216*x223))+(((-1.0)*x174*x217))+((x177*x180))+(((-1.0)*x206*x222))+(((-1.0)*gconst52*x186*x187))+((x214*x215))+(((-1.0)*gconst53*x190*x209))+((x213*x214))+((x172*x189))+((x179*x197))+((x193*x211))+(((-1.0)*gconst55*x169*x209))+(((-1.0)*gconst41*x195*x199))+((x182*x213))+((x182*x215))+((x184*x192))+(((-1.0)*gconst53*x184*x199))+(((-1.0)*gconst57*x191*x194))+(((-1.0)*gconst45*x191*x199))+((x185*x193))+((x185*x195))+(((-1.0)*gconst48*x173*x186))+(((-1.0)*gconst53*x194*x195))+((x178*x202))+(((-1.0)*gconst51*x170*x199))+(((-0.0008)*gconst43*x219))+(((-1.0)*gconst49*x180*x194))+(((-1.0)*x200*x218))+(((-1.0)*gconst44*x176*x192))+((x171*x196))+(((-1.0)*x203*x220))+(((-1.0)*gconst56*x181*x186))+(((-0.0008)*x190*x207))+(((-0.0008)*x190*x200))+(((-1.0)*gconst44*x185*x186))+(((-1.0)*gconst50*x176*x183))+((x181*x198))+((x183*x188))+((x195*x211))+(((-0.0008)*x190*x191))+(((-1.0)*x250))+(((-1.0)*x252))+(((-1.0)*gconst40*x175*x176)));
op[5]=((((-1.0)*x216*x220))+((x180*x181))+((x197*x214))+((x178*x179))+(((-1.0)*gconst45*x170*x199))+(((-1.0)*gconst49*x193*x194))+(((-1.0)*gconst44*x177*x186))+(((-1.0)*gconst56*x176*x177))+((x185*x188))+((x189*x196))+((x172*x215))+((x172*x213))+(((-1.0)*gconst41*x188*x199))+(((-1.0)*gconst44*x176*x183))+(((-1.0)*x203*x222))+((x188*x211))+(((-0.0008)*x170*x190))+(((-0.0008)*x173*x190))+(((-1.0)*gconst57*x170*x194))+(((-1.0)*gconst50*x176*x185))+((x182*x197))+(((-1.0)*x173*x218))+((x183*x184))+((x177*x193))+((x177*x195))+(((-1.0)*gconst41*x180*x194))+(((-1.0)*gconst53*x188*x194))+(((-1.0)*x251))+(((-1.0)*gconst40*x173*x186)));
op[6]=((((-1.0)*x216*x222))+((x177*x188))+(((-1.0)*gconst41*x190*x209))+((x184*x211))+(((-1.0)*gconst56*x176*x181))+(((-0.0008)*x187*x190))+((x178*x182))+(((-1.0)*gconst48*x173*x176))+((x172*x197))+(((-1.0)*gconst53*x184*x194))+(((-1.0)*gconst41*x194*x195))+(((-1.0)*x187*x218))+((x184*x185))+((x196*x213))+((x196*x215))+(((-1.0)*x209*x221))+(((-1.0)*gconst44*x176*x185))+(((-1.0)*gconst51*x170*x194))+(((-1.0)*x191*x217))+((x181*x193))+((x181*x195))+(((-1.0)*gconst44*x181*x186))+(((-1.0)*gconst41*x184*x199))+((x178*x214))+(((-1.0)*x254)));
op[7]=(((x177*x184))+((x172*x178))+((x196*x197))+(((-1.0)*x170*x217))+(((-1.0)*gconst41*x188*x194))+(((-1.0)*gconst40*x173*x176))+(((-1.0)*gconst44*x176*x177))+((x181*x188))+(((-1.0)*x253)));
op[8]=(((x178*x196))+(((-1.0)*gconst44*x176*x181))+(((-1.0)*gconst41*x184*x194))+((x181*x184))+(((-1.0)*x252)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x255=((100.0)*r00);
IkReal x256=(cj0*r01);
IkReal x257=((100.0)*r01);
IkReal x258=(r00*sj0);
IkReal x259=(cj0*r00);
IkReal x260=(r01*sj0);
IkReal x261=((6.9)*cj2*sj1);
if( IKabs((((x259*x261))+(((6.9)*x260))+((px*x255))+(((-1.0)*py*x257))+(((-6.9)*x259))+(((-1.0)*x260*x261)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x258*x261))+((py*x255))+((px*x257))+((x256*x261))+(((-6.9)*x256))+(((-6.9)*x258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x259*x261))+(((6.9)*x260))+((px*x255))+(((-1.0)*py*x257))+(((-6.9)*x259))+(((-1.0)*x260*x261))))+IKsqr((((x258*x261))+((py*x255))+((px*x257))+((x256*x261))+(((-6.9)*x256))+(((-6.9)*x258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((x259*x261))+(((6.9)*x260))+((px*x255))+(((-1.0)*py*x257))+(((-6.9)*x259))+(((-1.0)*x260*x261))), (((x258*x261))+((py*x255))+((px*x257))+((x256*x261))+(((-6.9)*x256))+(((-6.9)*x258))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x262=IKcos(j6);
IkReal x263=IKsin(j6);
IkReal x264=((0.069)*cj2*sj1);
IkReal x265=((0.01)*x262);
IkReal x266=((0.01)*x263);
evalcond[0]=((((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*cj0*x264))+((r00*x266))+((r01*x265)));
evalcond[1]=((((-1.0)*py))+(((0.069)*sj0))+(((-1.0)*r01*x266))+(((-1.0)*sj0*x264))+((r00*x265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x267=(cj2*sj0);
IkReal x268=(cj6*r00);
IkReal x269=((1.0)*sj6);
IkReal x270=(cj6*r01);
IkReal x271=(cj0*cj2);
if( IKabs(((((-1.0)*r01*x269*x271))+(((-1.0)*r00*x267*x269))+(((-1.0)*x267*x270))+((x268*x271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x267*x268))+(((-1.0)*r01*x267*x269))+((x270*x271))+((r00*sj6*x271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x269*x271))+(((-1.0)*r00*x267*x269))+(((-1.0)*x267*x270))+((x268*x271))))+IKsqr((((x267*x268))+(((-1.0)*r01*x267*x269))+((x270*x271))+((r00*sj6*x271))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*r01*x269*x271))+(((-1.0)*r00*x267*x269))+(((-1.0)*x267*x270))+((x268*x271))), (((x267*x268))+(((-1.0)*r01*x267*x269))+((x270*x271))+((r00*sj6*x271))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x272=IKsin(j4);
IkReal x273=IKcos(j4);
IkReal x274=(r01*sj6);
IkReal x275=(r00*sj6);
IkReal x276=((1.0)*cj6);
IkReal x277=(cj6*r01);
IkReal x278=(sj3*x272);
IkReal x279=(cj3*x273);
IkReal x280=((1.0)*cj2*sj1);
IkReal x281=(sj3*x273);
IkReal x282=(cj3*x272);
IkReal x283=((1.0)*x273*x275);
IkReal x284=(r00*x273*x276);
evalcond[0]=(((x275*x278))+(((-1.0)*r00*x276*x281))+((x274*x281))+((x277*x278)));
evalcond[1]=(((x272*x274))+(((-1.0)*r01*x273*x276))+((cj0*cj2))+(((-1.0)*x283))+(((-1.0)*r00*x272*x276)));
evalcond[2]=((((-1.0)*x273*x274))+((cj6*r00*x273))+(((-1.0)*cj2*sj0))+(((-1.0)*r01*x272*x276))+(((-1.0)*x272*x275)));
evalcond[3]=(((x274*x278))+(((-1.0)*r01*x276*x281))+(((-1.0)*x275*x281))+(((-1.0)*r00*x276*x278)));
evalcond[4]=(((x274*x279))+(((-1.0)*sj0*x280))+((x275*x282))+((x277*x282))+(((-1.0)*r00*x276*x279)));
evalcond[5]=((((-1.0)*cj0*x280))+(((-1.0)*r00*x276*x282))+((x274*x282))+(((-1.0)*x275*x279))+(((-1.0)*r01*x276*x279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x285=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((-0.069)*x285))+(((-1.0)*pz))+(((-0.37429)*r22))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*cj3*r22))+sj1);
evalcond[4]=(((r22*sj3))+(((-1.0)*x285)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal op[8+1], zeror[8];
int numroots;
IkReal x286=((0.01)*r00);
IkReal x287=((1.0)*py);
IkReal x288=((0.01)*r01);
IkReal x289=((1.0)*px);
IkReal x290=(cj2*sj1);
IkReal x291=((0.069)*x290);
IkReal x292=(x286+(((-1.0)*x287)));
IkReal x293=((0.138)+(((-0.138)*x290)));
IkReal x294=((((-1.0)*x286))+(((-1.0)*x287)));
IkReal x295=((-0.069)+x291);
IkReal x296=(x291+x289);
IkReal x297=((0.069)+(((-1.0)*x296))+(((-1.0)*x288)));
IkReal x298=((0.069)+(((-1.0)*x296))+x288);
IkReal x299=(x295+(((-1.0)*x288))+(((-1.0)*x289)));
IkReal x300=(x295+x288+(((-1.0)*x289)));
IkReal gconst76=x294;
IkReal gconst77=x292;
IkReal gconst78=x297;
IkReal gconst79=x298;
IkReal gconst80=x294;
IkReal gconst81=x292;
IkReal gconst82=x297;
IkReal gconst83=x298;
IkReal gconst84=x293;
IkReal gconst85=x293;
IkReal gconst86=x293;
IkReal gconst87=x293;
IkReal gconst88=x294;
IkReal gconst89=x292;
IkReal gconst90=x299;
IkReal gconst91=x300;
IkReal gconst92=x294;
IkReal gconst93=x292;
IkReal gconst94=x299;
IkReal gconst95=x300;
IkReal x301=r00*r00;
IkReal x302=r01*r01;
IkReal x303=((1.0)*gconst85);
IkReal x304=(gconst90*gconst93);
IkReal x305=(gconst80*gconst83);
IkReal x306=(gconst78*gconst85);
IkReal x307=((0.0008)*gconst89);
IkReal x308=(gconst79*gconst81);
IkReal x309=(gconst84*gconst94);
IkReal x310=(gconst82*gconst88);
IkReal x311=(gconst77*gconst86);
IkReal x312=(gconst83*gconst90);
IkReal x313=((0.0008)*gconst77);
IkReal x314=(gconst78*gconst95);
IkReal x315=(gconst77*gconst92);
IkReal x316=((1.0)*gconst76);
IkReal x317=(gconst79*gconst95);
IkReal x318=((0.0004)*gconst89);
IkReal x319=(gconst78*gconst94);
IkReal x320=((0.0004)*gconst77);
IkReal x321=((0.0008)*gconst92);
IkReal x322=((1.0)*gconst89);
IkReal x323=(gconst81*gconst91);
IkReal x324=(gconst81*gconst82);
IkReal x325=(gconst83*gconst92);
IkReal x326=(gconst78*gconst89);
IkReal x327=((1.0)*gconst88);
IkReal x328=(gconst91*gconst93);
IkReal x329=(r00*r01);
IkReal x330=(gconst79*gconst80);
IkReal x331=(gconst82*gconst84);
IkReal x332=(gconst76*gconst82);
IkReal x333=(gconst89*gconst92);
IkReal x334=((1.0)*gconst84);
IkReal x335=(gconst78*gconst83);
IkReal x336=(gconst83*gconst86);
IkReal x337=((1.0)*gconst77);
IkReal x338=(gconst78*gconst82);
IkReal x339=((0.0008)*gconst86);
IkReal x340=(gconst79*gconst93);
IkReal x341=((0.0004)*gconst85);
IkReal x342=(gconst88*gconst94);
IkReal x343=(gconst87*gconst90);
IkReal x344=(gconst87*gconst91);
IkReal x345=(gconst89*gconst90);
IkReal x346=(gconst76*gconst94);
IkReal x347=(gconst79*gconst87);
IkReal x348=(gconst90*gconst95);
IkReal x349=(gconst86*gconst89);
IkReal x350=((0.0008)*gconst85);
IkReal x351=(gconst85*gconst86);
IkReal x352=((0.0004)*gconst91);
IkReal x353=(gconst86*gconst95);
IkReal x354=(gconst80*gconst95);
IkReal x355=((0.0004)*gconst86);
IkReal x356=((0.0008)*gconst82);
IkReal x357=(gconst85*gconst92);
IkReal x358=(gconst77*gconst80);
IkReal x359=((0.0004)*gconst92);
IkReal x360=(gconst94*x329);
IkReal x361=(gconst80*x301);
IkReal x362=(gconst85*x301);
IkReal x363=(gconst91*x354);
IkReal x364=(gconst86*x301);
IkReal x365=(gconst91*gconst92*gconst95);
IkReal x366=((0.0004)*x301);
IkReal x367=(gconst92*x301);
IkReal x368=(gconst81*gconst90*gconst94);
IkReal x369=(gconst91*x353);
IkReal x370=(gconst79*x302);
IkReal x371=(gconst91*gconst94*x302);
IkReal x372=((0.0004)*gconst82*x302);
IkReal x373=(gconst94*x302*x352);
IkReal x374=(gconst92*x329*x352);
IkReal x375=(x318*x360);
IkReal x376=(x318*x367);
IkReal x377=(x341*x367);
IkReal x378=(x341*x360);
IkReal x379=(x318*x364);
IkReal x380=(gconst86*x329*x352);
IkReal x381=(gconst82*x318*x329);
IkReal x382=(x318*x361);
IkReal x383=(gconst80*x329*x352);
IkReal x384=((0.0004)*gconst94*x370);
IkReal x385=(gconst79*x329*x359);
IkReal x386=(x320*x360);
IkReal x387=(gconst82*x302*x352);
IkReal x388=(x341*x364);
IkReal x389=(x315*x366);
IkReal x390=(x311*x366);
IkReal x391=(x341*x361);
IkReal x392=(gconst82*x329*x341);
IkReal x393=(gconst79*x329*x355);
IkReal x394=((0.0004)*gconst82*x370);
IkReal x395=(gconst82*x320*x329);
IkReal x396=(x320*x361);
IkReal x397=((0.0004)*x329*x330);
IkReal x398=(x395+x394+x397+x396);
IkReal x399=(x376+x375+x374+x373);
IkReal x400=(x391+x390+x393+x392);
IkReal x401=(x380+x379+x378+x377);
IkReal x402=(x386+x387+x384+x385+x382+x383+x381+x388+x389);
op[0]=((((-1.0)*x399))+((x333*x348))+((x328*x342))+(((-1.0)*x327*x365))+(((-1.0)*gconst94*x304*x322)));
op[1]=((((-1.0)*gconst94*x322*x343))+(((-1.0)*gconst94*x303*x304))+((x345*x353))+((x309*x328))+((x348*x357))+(((-1.0)*x327*x369))+(((-1.0)*x334*x365))+(((-1.0)*x401))+((x342*x344)));
op[2]=(((x345*x354))+((x310*x328))+(((-1.0)*gconst91*x325*x327))+(((-1.0)*gconst92*x317*x327))+((x315*x348))+(((-1.0)*gconst91*x321*x329))+(((-1.0)*gconst82*x304*x322))+(((-1.0)*gconst94*x304*x337))+(((-1.0)*x307*x360))+(((-1.0)*x307*x367))+(((-0.0008)*x371))+((x323*x342))+((x309*x344))+((x314*x333))+((x348*x351))+((x340*x342))+((x328*x346))+(((-1.0)*gconst93*x319*x322))+((x312*x333))+(((-1.0)*gconst94*x303*x343))+(((-1.0)*x316*x365))+(((-1.0)*x327*x363))+(((-1.0)*x322*x368))+(((-1.0)*x334*x369))+(((-1.0)*x402)));
op[3]=((((-1.0)*gconst86*x317*x327))+(((-1.0)*x303*x368))+((gconst80*gconst85*x348))+((x314*x349))+(((-1.0)*x321*x362))+(((-1.0)*gconst91*x327*x336))+(((-1.0)*x350*x360))+(((-1.0)*gconst91*x325*x334))+((x311*x348))+(((-1.0)*gconst92*x317*x334))+((x312*x357))+(((-1.0)*gconst91*x329*x339))+((x344*x346))+((x312*x349))+(((-1.0)*gconst82*x303*x304))+(((-1.0)*x307*x364))+(((-1.0)*gconst93*x303*x319))+((x309*x323))+((x328*x331))+((x310*x344))+((x309*x340))+(((-1.0)*gconst82*x322*x343))+(((-1.0)*gconst87*x319*x322))+(((-1.0)*x316*x369))+(((-1.0)*x334*x363))+(((-1.0)*x400))+(((-1.0)*gconst94*x337*x343))+((gconst92*gconst95*x306))+((x342*x347)));
op[4]=((((-1.0)*x313*x367))+(((-1.0)*x313*x360))+(((-1.0)*x339*x362))+(((-1.0)*gconst93*x319*x337))+((x325*x326))+((gconst80*gconst89*x314))+(((-1.0)*gconst79*x321*x329))+(((-1.0)*x398))+(((-1.0)*x399))+(((-1.0)*gconst87*x303*x319))+((x312*x315))+(((-1.0)*gconst80*x317*x327))+(((-0.0008)*gconst94*x370))+((x310*x323))+(((-1.0)*gconst82*x303*x343))+(((-0.0008)*gconst80*gconst91*x329))+((x305*x345))+((x312*x351))+((x331*x344))+(((-1.0)*gconst90*x322*x324))+(((-1.0)*gconst91*x305*x327))+(((-1.0)*gconst91*x302*x356))+(((-1.0)*gconst82*x304*x337))+(((-1.0)*x307*x361))+(((-1.0)*gconst81*x319*x322))+(((-1.0)*gconst92*x316*x317))+((x323*x346))+((x328*x332))+((x310*x340))+(((-1.0)*gconst82*x307*x329))+((x309*x347))+(((-1.0)*gconst91*x334*x336))+(((-1.0)*gconst93*x322*x338))+(((-1.0)*gconst91*x316*x325))+((x348*x358))+(((-1.0)*x337*x368))+((x340*x346))+(((-1.0)*gconst79*x325*x327))+(((-1.0)*gconst86*x317*x334))+((x308*x342))+((x314*x315))+((x306*x353))+(((-1.0)*x316*x363)));
op[5]=((((-1.0)*gconst81*x303*x319))+(((-1.0)*x350*x361))+(((-1.0)*gconst82*x337*x343))+(((-1.0)*gconst90*x303*x324))+(((-1.0)*gconst93*x303*x338))+(((-1.0)*gconst87*x319*x337))+(((-1.0)*gconst82*x329*x350))+((x331*x340))+(((-1.0)*gconst91*x316*x336))+(((-1.0)*gconst79*x327*x336))+((x332*x344))+((x308*x309))+(((-1.0)*gconst87*x322*x338))+((x311*x312))+((x311*x314))+((x310*x347))+((x346*x347))+((gconst85*gconst90*x305))+(((-0.0008)*x301*x311))+(((-1.0)*gconst80*x317*x334))+(((-1.0)*gconst79*x329*x339))+((x323*x331))+((x326*x336))+(((-1.0)*gconst91*x305*x334))+((x306*x325))+(((-1.0)*gconst79*x325*x334))+((x306*x354))+(((-1.0)*x401))+(((-1.0)*gconst86*x316*x317)));
op[6]=((((-1.0)*x313*x361))+(((-1.0)*gconst90*x324*x337))+(((-1.0)*gconst78*x322*x324))+(((-1.0)*gconst82*x313*x329))+(((-1.0)*gconst80*x316*x317))+(((-0.0008)*x329*x330))+((x305*x326))+(((-1.0)*gconst91*x305*x316))+((x308*x310))+(((-1.0)*gconst87*x303*x338))+((gconst77*gconst90*x305))+(((-1.0)*x356*x370))+((x331*x347))+(((-1.0)*gconst79*x316*x325))+(((-1.0)*gconst93*x337*x338))+((x332*x340))+(((-1.0)*gconst79*x305*x327))+((x314*x358))+(((-1.0)*gconst81*x319*x337))+((x315*x335))+((x323*x332))+((x306*x336))+((x308*x346))+(((-1.0)*x402))+(((-1.0)*gconst79*x334*x336)));
op[7]=(((x311*x335))+(((-1.0)*gconst78*x303*x324))+(((-1.0)*gconst79*x305*x334))+((x308*x331))+((x332*x347))+(((-1.0)*gconst87*x337*x338))+((x305*x306))+(((-1.0)*x400))+(((-1.0)*gconst79*x316*x336)));
op[8]=((((-1.0)*x398))+((gconst77*gconst78*x305))+(((-1.0)*gconst79*x305*x316))+((x308*x332))+(((-1.0)*gconst78*x324*x337)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x403=((100.0)*r00);
IkReal x404=(cj0*r01);
IkReal x405=((100.0)*r01);
IkReal x406=(r00*sj0);
IkReal x407=(cj0*r00);
IkReal x408=(r01*sj0);
IkReal x409=((6.9)*cj2*sj1);
if( IKabs((((py*x405))+(((-1.0)*px*x403))+(((-6.9)*x408))+(((6.9)*x407))+((x408*x409))+(((-1.0)*x407*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x406*x409))+(((-1.0)*px*x405))+(((6.9)*x404))+(((6.9)*x406))+(((-1.0)*x404*x409))+(((-1.0)*py*x403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x405))+(((-1.0)*px*x403))+(((-6.9)*x408))+(((6.9)*x407))+((x408*x409))+(((-1.0)*x407*x409))))+IKsqr(((((-1.0)*x406*x409))+(((-1.0)*px*x405))+(((6.9)*x404))+(((6.9)*x406))+(((-1.0)*x404*x409))+(((-1.0)*py*x403))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((py*x405))+(((-1.0)*px*x403))+(((-6.9)*x408))+(((6.9)*x407))+((x408*x409))+(((-1.0)*x407*x409))), ((((-1.0)*x406*x409))+(((-1.0)*px*x405))+(((6.9)*x404))+(((6.9)*x406))+(((-1.0)*x404*x409))+(((-1.0)*py*x403))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x410=IKsin(j6);
IkReal x411=IKcos(j6);
IkReal x412=((0.01)*r01);
IkReal x413=((0.01)*r00);
IkReal x414=((0.069)*cj2*sj1);
evalcond[0]=((((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*cj0*x414))+(((-1.0)*x411*x412))+(((-1.0)*x410*x413)));
evalcond[1]=(((x410*x412))+(((-1.0)*py))+(((0.069)*sj0))+(((-1.0)*x411*x413))+(((-1.0)*sj0*x414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x415=(cj2*cj6*sj0);
IkReal x416=(cj0*cj2*r01);
IkReal x417=(cj2*sj0*sj6);
IkReal x418=(cj0*cj2*r00);
if( IKabs(((((-1.0)*cj6*x418))+((r01*x415))+((sj6*x416))+((r00*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*x416))+(((-1.0)*r01*x417))+((sj6*x418))+((r00*x415)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x418))+((r01*x415))+((sj6*x416))+((r00*x417))))+IKsqr((((cj6*x416))+(((-1.0)*r01*x417))+((sj6*x418))+((r00*x415))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*x418))+((r01*x415))+((sj6*x416))+((r00*x417))), (((cj6*x416))+(((-1.0)*r01*x417))+((sj6*x418))+((r00*x415))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x419=IKsin(j4);
IkReal x420=IKcos(j4);
IkReal x421=(r01*sj3);
IkReal x422=(cj3*r00);
IkReal x423=(cj0*cj2);
IkReal x424=(r00*sj3);
IkReal x425=((1.0)*sj1);
IkReal x426=(cj2*sj0);
IkReal x427=(cj3*r01);
IkReal x428=((1.0)*r01);
IkReal x429=(cj6*x420);
IkReal x430=(cj6*x419);
IkReal x431=(sj6*x419);
IkReal x432=(sj6*x420);
IkReal x433=(r00*x432);
evalcond[0]=((((-1.0)*x426))+((r00*x429))+((r00*x431))+((r01*x430))+(((-1.0)*x428*x432)));
evalcond[1]=(((x424*x432))+((x421*x431))+(((-1.0)*x424*x430))+((x421*x429)));
evalcond[2]=(((x424*x431))+((x421*x430))+((x424*x429))+(((-1.0)*x421*x432)));
evalcond[3]=((((-1.0)*x433))+x423+(((-1.0)*x428*x429))+((r00*x430))+(((-1.0)*x428*x431)));
evalcond[4]=((((-1.0)*x427*x432))+(((-1.0)*x425*x426))+((x422*x429))+((x427*x430))+((x422*x431)));
evalcond[5]=(((x427*x429))+(((-1.0)*x422*x430))+(((-1.0)*x423*x425))+((x427*x431))+((x422*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x434=(cj1*cj2);
IkReal x435=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((0.37429)*x435))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-0.069)*x434))+(((-0.36442)*sj1)));
evalcond[2]=((((-1.0)*x434))+(((-1.0)*x435)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x436=(py*r01);
IkReal x437=(px*r00);
IkReal x438=(pz*r00);
IkReal x439=((-1.0)*r01);
IkReal x440=(((px*r01))+((py*r00)));
IkReal x441=(pz*x439);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x439;
r11=r00;
npx=((((-1.0)*x436))+x437);
npy=x440;
npz=(pz*r22);
rxp0_0=x441;
rxp0_1=((-1.0)*x438);
rxp0_2=x440;
rxp1_0=x438;
rxp1_1=x441;
rxp1_2=((((-1.0)*x437))+x436);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x442=(r22*sj5);
j4eval[0]=x442;
j4eval[1]=((IKabs(sj1))+(IKabs((cj1*sj2))));
j4eval[2]=IKsign(x442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x443 = IKatan2WithCheck(IkReal((cj1*sj2)),sj1,IKFAST_ATAN2_MAGTHRESH);
if(!x443.valid){
continue;
}
CheckValue<IkReal> x444=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x443.value)+(((1.5707963267949)*(x444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x445=((1.0)*r22*sj5);
evalcond[0]=(sj1+(((-1.0)*x445*(IKcos(j4)))));
evalcond[1]=((((-1.0)*x445*(IKsin(j4))))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x446=((1.0)*sj2);
IkReal x447=(r01*sj5);
IkReal x448=(cj2*sj1);
IkReal x449=(r00*sj5);
IkReal x450=((1.0)*x448);
IkReal x451=(sj2+(((-1.0)*x449)));
IkReal x452=((1.0)*x449);
IkReal x453=((1.0)*x447);
IkReal x454=((((-1.0)*x446))+x449);
IkReal x455=((((-1.0)*x450))+x447);
IkReal x456=(x448+x447);
IkReal x457=((((-1.0)*x453))+x448);
IkReal x458=((((-1.0)*x446))+(((-1.0)*x452)));
IkReal x459=((((-1.0)*x450))+(((-1.0)*x453)));
IkReal gconst112=x451;
IkReal gconst113=x455;
IkReal gconst114=x459;
IkReal gconst115=x451;
IkReal gconst116=x455;
IkReal gconst117=x459;
IkReal gconst118=x454;
IkReal gconst119=x458;
IkReal gconst120=x456;
IkReal gconst121=x457;
IkReal gconst122=x454;
IkReal gconst123=x458;
IkReal gconst124=x456;
IkReal gconst125=x457;
IkReal x460=sj5*sj5;
IkReal x461=r00*r00;
IkReal x462=r01*r01;
IkReal x463=sj2*sj2;
IkReal x464=sj5*sj5*sj5;
IkReal x465=sj2*sj2*sj2;
IkReal x466=r00*r00*r00;
IkReal x467=(cj2*sj1);
IkReal x468=(r00*sj5);
IkReal x469=(gconst112*gconst117);
IkReal x470=((2.0)*gconst119);
IkReal x471=(gconst123*gconst124);
IkReal x472=(gconst120*gconst125);
IkReal x473=(gconst114*gconst115);
IkReal x474=(gconst116*sj2);
IkReal x475=(gconst118*sj2);
IkReal x476=((2.0)*gconst121);
IkReal x477=(gconst120*sj2);
IkReal x478=(gconst118*gconst125);
IkReal x479=(gconst114*gconst117);
IkReal x480=((4.0)*gconst112);
IkReal x481=((2.0)*sj2);
IkReal x482=(gconst119*gconst122);
IkReal x483=(r00*r01);
IkReal x484=(gconst121*gconst122);
IkReal x485=(gconst112*gconst115);
IkReal x486=(gconst113*gconst116);
IkReal x487=((2.0)*gconst115);
IkReal x488=(sj2*x467);
IkReal x489=((2.0)*gconst114*gconst116);
IkReal x490=((2.0)*gconst112*gconst113);
IkReal x491=((2.0)*gconst122*gconst125);
IkReal x492=((2.0)*x463);
IkReal x493=((2.0)*x465);
IkReal x494=((4.0)*x460);
IkReal x495=(gconst114*x462);
IkReal x496=(gconst124*x462);
IkReal x497=((8.0)*x460);
IkReal x498=((4.0)*x463);
IkReal x499=((2.0)*gconst113*gconst117);
IkReal x500=(x464*x466);
IkReal x501=(x460*x461);
IkReal x502=(x461*x497);
IkReal x503=(x483*x497);
IkReal x504=(r01*x461*x464);
IkReal x505=(sj2*x503);
op[0]=((((-1.0)*x478*x484))+(((-1.0)*gconst121*x494*x496))+(((-1.0)*x461*x482*x494))+(((-1.0)*gconst119*gconst124*x483*x494))+(((-1.0)*gconst119*gconst120*x471))+((gconst118*gconst121*x471))+(((-1.0)*x483*x484*x494))+((x472*x482)));
op[1]=(((gconst122*x467*x502))+((x475*x491))+(((-2.0)*x471*x475))+((gconst120*gconst124*x467*x470))+((gconst122*gconst125*x467*x476))+((sj2*x496*x497))+(((-1.0)*gconst118*gconst124*x467*x476))+(((-1.0)*gconst122*gconst125*sj2*x470))+((gconst122*x475*x476))+(((-2.0)*gconst122*x467*x472))+((gconst121*x467*x503))+((gconst119*x467*x502))+((sj2*x470*x471))+(((2.0)*gconst120*x467*x471))+((gconst124*x467*x503))+(((-1.0)*gconst123*x475*x476))+(((-1.0)*gconst122*x470*x477))+((gconst119*x505))+((x467*x476*x478))+(((-1.0)*x467*x471*x476))+((gconst122*x505))+((gconst123*x470*x477))+((gconst121*sj2*x462*x497))+(((-1.0)*x467*x470*x472)));
op[2]=(((gconst112*gconst120*gconst122*gconst125))+(((-1.0)*gconst121*gconst122*gconst125*r00*sj5))+(((-1.0)*gconst117*gconst118*gconst121*gconst122))+(((-4.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+(((-4.0)*cj2*gconst119*gconst124*sj1*sj2))+(((-1.0)*gconst113*gconst119*gconst123*gconst124))+(((4.0)*cj2*gconst121*gconst123*sj1*sj2))+(((-8.0)*gconst121*gconst122*r00*r01*(sj5*sj5)))+(((4.0)*gconst118*gconst123*(sj2*sj2)))+(((-8.0)*gconst119*gconst124*r00*r01*(sj5*sj5)))+(((-32.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((4.0)*gconst119*gconst122*(sj2*sj2)))+((gconst115*gconst118*gconst121*gconst124))+(((-4.0)*gconst114*gconst122*r00*r01*(sj5*sj5)))+(((-4.0)*gconst120*gconst124*(cj2*cj2)*(sj1*sj1)))+((gconst121*gconst123*gconst124*r00*sj5))+(((-4.0)*cj2*gconst118*gconst125*sj1*sj2))+(((-4.0)*gconst118*gconst122*(sj2*sj2)))+(((-4.0)*gconst119*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-1.0)*gconst112*gconst120*gconst123*gconst124))+(((-4.0)*gconst119*gconst123*(sj2*sj2)))+(((-1.0)*gconst114*gconst118*gconst122*gconst125))+(((-1.0)*gconst118*gconst121*gconst125*sj2))+(((-8.0)*gconst119*gconst122*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst121*gconst125*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst121*gconst124*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst120*gconst122*sj1*sj2))+(((-1.0)*gconst115*gconst119*gconst120*gconst124))+(((-4.0)*gconst121*r01*(r00*r00)*(sj5*sj5*sj5)))+(((4.0)*cj2*gconst119*gconst125*sj1*sj2))+(((4.0)*cj2*gconst118*gconst124*sj1*sj2))+(((-4.0)*gconst114*gconst124*(r01*r01)*(sj5*sj5)))+(((-16.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*gconst116*gconst121*(r01*r01)*(sj5*sj5)))+(((-4.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+((gconst116*gconst118*gconst121*gconst123))+(((-4.0)*gconst112*gconst124*r00*r01*(sj5*sj5)))+(((-8.0)*gconst121*gconst124*(r01*r01)*(sj5*sj5)))+((gconst121*gconst123*gconst124*sj2))+(((-1.0)*gconst121*gconst122*gconst125*sj2))+((gconst119*gconst120*gconst125*sj2))+(((-4.0)*gconst116*gconst119*r00*r01*(sj5*sj5)))+(((4.0)*gconst120*gconst125*(cj2*cj2)*(sj1*sj1)))+((gconst117*gconst119*gconst120*gconst122))+(((-4.0)*cj2*gconst121*gconst122*sj1*sj2))+(((-4.0)*cj2*gconst120*gconst123*sj1*sj2))+(((-1.0)*gconst118*gconst121*gconst125*r00*sj5))+((gconst113*gconst119*gconst122*gconst125))+((gconst119*gconst120*gconst125*r00*sj5))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-4.0)*gconst121*r00*r01*sj2*(sj5*sj5)))+((gconst114*gconst118*gconst123*gconst124))+(((-1.0)*gconst116*gconst119*gconst120*gconst123)));
op[3]=((((-2.0)*gconst115*gconst118*gconst121*sj2))+(((-2.0)*gconst121*gconst123*r00*sj2*sj5))+(((2.0)*gconst114*gconst118*gconst122*sj2))+(((-2.0)*gconst115*gconst118*gconst124*sj2))+(((-2.0)*cj2*gconst114*gconst118*gconst124*sj1))+(((2.0)*cj2*gconst115*gconst120*gconst124*sj1))+(((2.0)*cj2*gconst117*gconst118*gconst121*sj1))+(((-2.0)*gconst121*gconst123*(sj2*sj2)))+(((-2.0)*cj2*gconst112*gconst120*gconst125*sj1))+(((2.0)*cj2*gconst113*gconst119*gconst124*sj1))+(((2.0)*gconst113*gconst119*gconst123*sj2))+(((16.0)*gconst124*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst118*gconst121*(sj2*sj2)))+(((16.0)*cj2*gconst124*r00*r01*sj1*(sj5*sj5)))+(((16.0)*cj2*gconst122*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst116*gconst121*gconst123*sj1))+(((-2.0)*gconst112*gconst122*gconst125*sj2))+(((4.0)*cj2*gconst121*gconst125*sj1*sj2))+(((16.0)*cj2*gconst121*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst120*gconst125*r00*sj1*sj5))+(((8.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst115*gconst119*gconst124*sj2))+(((-2.0)*gconst123*gconst124*r00*sj2*sj5))+(((-2.0)*gconst113*gconst119*gconst122*sj2))+(((2.0)*gconst115*gconst119*gconst120*sj2))+(((-2.0)*gconst116*gconst118*gconst123*sj2))+(((-2.0)*gconst119*gconst125*r00*sj2*sj5))+(((-2.0)*cj2*gconst121*gconst124*r00*sj1*sj5))+(((-2.0)*cj2*gconst121*gconst124*sj1*sj2))+(((-2.0)*gconst117*gconst119*gconst122*sj2))+(((2.0)*gconst112*gconst120*gconst123*sj2))+(((-2.0)*gconst123*gconst124*(sj2*sj2)))+(((-2.0)*cj2*gconst117*gconst119*gconst120*sj1))+(((2.0)*cj2*gconst116*gconst119*gconst120*sj1))+(((-2.0)*gconst112*gconst120*gconst122*sj2))+(((2.0)*gconst118*gconst125*(sj2*sj2)))+(((2.0)*cj2*gconst112*gconst120*gconst124*sj1))+(((16.0)*cj2*gconst119*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst118*gconst121*r00*sj2*sj5))+(((8.0)*cj2*gconst112*sj1*(r00*r00)*(sj5*sj5)))+(((8.0)*r01*sj2*(r00*r00)*(sj5*sj5*sj5)))+(((8.0)*r00*r01*(sj2*sj2)*(sj5*sj5)))+(((8.0)*gconst114*sj2*(r01*r01)*(sj5*sj5)))+(((8.0)*cj2*sj1*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*cj2*gconst114*gconst123*gconst124*sj1))+(((8.0)*gconst116*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst112*gconst123*gconst124*sj2))+(((16.0)*gconst121*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*cj2*gconst116*gconst118*gconst121*sj1))+(((16.0)*gconst119*r00*r01*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst114*gconst122*gconst125*sj1))+(((-2.0)*gconst114*gconst118*gconst123*sj2))+(((2.0)*cj2*gconst117*gconst121*gconst122*sj1))+(((-2.0)*cj2*gconst120*gconst125*sj1*sj2))+(((-2.0)*cj2*gconst115*gconst121*gconst124*sj1))+(((-2.0)*cj2*gconst113*gconst122*gconst125*sj1))+(((2.0)*gconst122*gconst125*(sj2*sj2)))+(((-2.0)*gconst119*gconst120*r00*sj2*sj5))+(((8.0)*cj2*gconst116*r00*r01*sj1*(sj5*sj5)))+(((4.0)*cj2*gconst121*gconst125*r00*sj1*sj5))+(((2.0)*gconst121*gconst122*r00*sj2*sj5))+(((8.0)*cj2*gconst114*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst113*gconst119*gconst125*sj1))+(((2.0)*cj2*gconst114*gconst118*gconst125*sj1))+(((-2.0)*gconst119*gconst120*(sj2*sj2)))+(((2.0)*cj2*gconst113*gconst123*gconst124*sj1))+(((2.0)*gconst122*gconst125*r00*sj2*sj5))+(((2.0)*gconst116*gconst119*gconst123*sj2))+(((8.0)*gconst112*r00*r01*sj2*(sj5*sj5)))+(((-2.0)*gconst119*gconst125*(sj2*sj2)))+(((2.0)*gconst118*gconst125*r00*sj2*sj5))+(((2.0)*cj2*gconst116*gconst120*gconst123*sj1))+(((2.0)*gconst121*gconst122*(sj2*sj2)))+(((2.0)*gconst117*gconst118*gconst122*sj2))+(((16.0)*gconst122*r00*r01*sj2*(sj5*sj5)))+(((-2.0)*cj2*gconst117*gconst120*gconst122*sj1)));
op[4]=((((-4.0)*cj2*gconst125*r00*sj1*sj2*sj5))+(((-4.0)*gconst112*gconst123*(sj2*sj2)))+(((4.0)*cj2*gconst124*sj1*(sj2*sj2)))+(((-4.0)*cj2*gconst114*gconst122*sj1*sj2))+(((-4.0)*gconst114*r00*r01*sj2*(sj5*sj5)))+((gconst113*gconst119*gconst125*sj2))+(((-8.0)*gconst121*r00*r01*sj2*(sj5*sj5)))+(((-4.0)*gconst114*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-8.0)*gconst112*gconst124*r00*r01*(sj5*sj5)))+((gconst112*gconst113*gconst122*gconst125))+(((-1.0)*gconst114*gconst117*gconst118*gconst122))+(((4.0)*gconst117*gconst120*(cj2*cj2)*(sj1*sj1)))+((gconst113*gconst119*gconst125*r00*sj5))+((gconst115*gconst116*gconst118*gconst121))+(((-1.0)*gconst112*gconst116*gconst120*gconst123))+(((-4.0)*cj2*gconst112*gconst124*sj1*sj2))+(((-4.0)*gconst122*(sj2*sj2*sj2)))+(((-32.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*gconst121*gconst122*r00*r01*(sj5*sj5)))+(((-4.0)*gconst113*gconst124*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst119*(sj2*sj2*sj2)))+(((4.0)*cj2*gconst116*gconst118*sj1*sj2))+(((-1.0)*gconst117*gconst121*gconst122*r00*sj5))+(((-8.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+((gconst115*gconst121*gconst124*r00*sj5))+(((-1.0)*gconst114*gconst118*gconst125*r00*sj5))+(((-4.0)*cj2*gconst113*gconst123*sj1*sj2))+(((4.0)*gconst114*gconst124*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst120*r00*sj1*sj2*sj5))+(((4.0)*gconst116*gconst121*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst114*gconst123*sj1*sj2))+(((-1.0)*gconst112*gconst115*gconst120*gconst124))+(((4.0)*cj2*gconst117*gconst119*sj1*sj2))+(((-4.0)*gconst122*r00*sj5*(sj2*sj2)))+(((-1.0)*gconst114*gconst122*gconst125*sj2))+(((-8.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst112*gconst116*r00*r01*(sj5*sj5)))+((gconst115*gconst121*gconst124*sj2))+(((4.0)*cj2*gconst120*sj1*(sj2*sj2)))+(((4.0)*cj2*gconst113*gconst122*sj1*sj2))+(((4.0)*cj2*gconst112*gconst125*sj1*sj2))+((gconst112*gconst120*gconst125*r00*sj5))+(((-4.0)*cj2*gconst121*r00*sj1*sj2*sj5))+((gconst114*gconst123*gconst124*sj2))+(((-4.0)*gconst114*gconst116*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst114*gconst118*gconst125*sj2))+(((-4.0)*gconst112*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*gconst113*gconst125*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst119*gconst124*r00*r01*(sj5*sj5)))+(((-4.0)*gconst115*gconst119*(sj2*sj2)))+((gconst114*gconst123*gconst124*r00*sj5))+((gconst116*gconst121*gconst123*r00*sj5))+(((-4.0)*gconst119*gconst122*(r00*r00)*(sj5*sj5)))+(((-8.0)*gconst116*gconst119*r00*r01*(sj5*sj5)))+(((-4.0)*cj2*gconst117*gconst118*sj1*sj2))+(((4.0)*gconst123*(sj2*sj2*sj2)))+(((-1.0)*gconst113*gconst115*gconst119*gconst124))+(((-8.0)*gconst114*gconst124*(r01*r01)*(sj5*sj5)))+(((4.0)*gconst119*r00*sj5*(sj2*sj2)))+(((-8.0)*gconst114*gconst122*r00*r01*(sj5*sj5)))+(((-4.0)*gconst118*(sj2*sj2*sj2)))+((gconst117*gconst119*gconst120*r00*sj5))+(((-4.0)*gconst112*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-8.0)*gconst116*gconst121*(r01*r01)*(sj5*sj5)))+(((-64.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((4.0)*cj2*gconst124*r00*sj1*sj2*sj5))+(((-4.0)*gconst121*gconst124*(r01*r01)*(sj5*sj5)))+(((-4.0)*gconst117*gconst121*(cj2*cj2)*(sj1*sj1)))+((gconst114*gconst115*gconst118*gconst124))+((gconst112*gconst120*gconst125*sj2))+(((4.0)*gconst115*gconst118*(sj2*sj2)))+(((4.0)*gconst112*gconst122*(sj2*sj2)))+(((-1.0)*gconst115*gconst116*gconst119*gconst120))+(((-4.0)*cj2*gconst116*gconst119*sj1*sj2))+((gconst114*gconst116*gconst118*gconst123))+(((-4.0)*cj2*gconst121*sj1*(sj2*sj2)))+(((-4.0)*gconst114*gconst125*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst117*gconst118*gconst121*r00*sj5))+(((-2.0)*gconst121*gconst125*r00*sj2*sj5))+((gconst117*gconst119*gconst120*sj2))+(((-8.0)*gconst119*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-1.0)*gconst121*gconst125*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst116*gconst120*(cj2*cj2)*(sj1*sj1)))+(((-8.0)*gconst121*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-1.0)*gconst113*gconst116*gconst119*gconst123))+(((-1.0)*gconst112*gconst113*gconst123*gconst124))+(((-1.0)*gconst121*gconst125*(sj2*sj2)))+(((-32.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+((gconst112*gconst117*gconst120*gconst122))+(((-1.0)*gconst117*gconst121*gconst122*sj2))+(((-4.0)*cj2*gconst115*gconst120*sj1*sj2))+(((-1.0)*gconst114*gconst122*gconst125*r00*sj5))+(((-1.0)*gconst117*gconst118*gconst121*sj2))+((gconst113*gconst117*gconst119*gconst122))+(((4.0)*gconst123*r00*sj5*(sj2*sj2)))+(((4.0)*cj2*gconst115*gconst121*sj1*sj2))+(((-4.0)*gconst118*r00*sj5*(sj2*sj2)))+(((-4.0)*cj2*gconst125*sj1*(sj2*sj2)))+((gconst116*gconst121*gconst123*sj2)));
op[5]=((((2.0)*gconst114*gconst118*(sj2*sj2)))+(((-2.0)*cj2*gconst117*gconst120*r00*sj1*sj5))+(((2.0)*gconst114*gconst118*r00*sj2*sj5))+(((16.0)*cj2*gconst116*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*gconst114*gconst123*r00*sj2*sj5))+(((2.0)*cj2*gconst112*gconst116*gconst120*sj1))+(((-2.0)*cj2*gconst117*gconst120*sj1*sj2))+(((-2.0)*gconst114*gconst123*(sj2*sj2)))+(((2.0)*cj2*gconst115*gconst116*gconst120*sj1))+(((-2.0)*cj2*gconst113*gconst117*gconst119*sj1))+(((-2.0)*gconst115*gconst124*(sj2*sj2)))+(((2.0)*gconst115*gconst116*gconst119*sj2))+(((-2.0)*cj2*gconst113*gconst125*r00*sj1*sj5))+(((2.0)*cj2*gconst114*gconst117*gconst118*sj1))+(((2.0)*cj2*gconst113*gconst116*gconst119*sj1))+(((-2.0)*cj2*gconst114*gconst116*gconst118*sj1))+(((8.0)*cj2*gconst121*r00*r01*sj1*(sj5*sj5)))+(((8.0)*cj2*gconst119*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*cj2*gconst113*gconst115*gconst124*sj1))+(((2.0)*cj2*gconst112*gconst113*gconst124*sj1))+(((-2.0)*cj2*gconst113*gconst125*sj1*sj2))+(((-2.0)*cj2*gconst114*gconst124*r00*sj1*sj5))+(((-2.0)*gconst116*gconst123*(sj2*sj2)))+(((-2.0)*gconst112*gconst125*r00*sj2*sj5))+(((2.0)*gconst112*gconst115*gconst124*sj2))+(((-2.0)*cj2*gconst115*gconst116*gconst121*sj1))+(((-2.0)*gconst114*gconst115*gconst118*sj2))+(((-2.0)*gconst115*gconst116*gconst118*sj2))+(((-2.0)*gconst113*gconst119*(sj2*sj2)))+(((2.0)*gconst117*gconst122*r00*sj2*sj5))+(((2.0)*gconst112*gconst116*gconst123*sj2))+(((16.0)*gconst114*sj2*(r01*r01)*(sj5*sj5)))+(((16.0)*cj2*sj1*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*gconst115*gconst121*r00*sj2*sj5))+(((2.0)*gconst112*gconst113*gconst123*sj2))+(((-2.0)*gconst116*gconst123*r00*sj2*sj5))+(((4.0)*cj2*gconst117*gconst121*sj1*sj2))+(((2.0)*gconst125*(sj2*sj2*sj2)))+(((2.0)*gconst117*gconst118*r00*sj2*sj5))+(((2.0)*gconst121*(sj2*sj2*sj2)))+(((16.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((16.0)*gconst116*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*gconst112*gconst120*(sj2*sj2)))+(((2.0)*gconst125*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*cj2*gconst117*gconst121*r00*sj1*sj5))+(((16.0)*cj2*gconst114*r00*r01*sj1*(sj5*sj5)))+(((8.0)*gconst122*r00*r01*sj2*(sj5*sj5)))+(((-2.0)*cj2*gconst112*gconst113*gconst125*sj1))+(((-2.0)*gconst115*gconst121*(sj2*sj2)))+(((-2.0)*cj2*gconst114*gconst124*sj1*sj2))+(((2.0)*gconst121*sj2*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst114*gconst122*r00*sj2*sj5))+(((4.0)*cj2*gconst114*gconst125*sj1*sj2))+(((2.0)*gconst117*gconst122*(sj2*sj2)))+(((-2.0)*gconst112*gconst117*gconst122*sj2))+(((8.0)*cj2*gconst122*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst114*gconst122*(sj2*sj2)))+(((8.0)*gconst119*r00*r01*sj2*(sj5*sj5)))+(((4.0)*gconst121*r00*sj5*(sj2*sj2)))+(((4.0)*cj2*gconst114*gconst125*r00*sj1*sj5))+(((-2.0)*cj2*gconst114*gconst116*gconst123*sj1))+(((-2.0)*gconst117*gconst119*(sj2*sj2)))+(((2.0)*gconst112*gconst115*gconst120*sj2))+(((-2.0)*gconst113*gconst119*r00*sj2*sj5))+(((4.0)*gconst125*r00*sj5*(sj2*sj2)))+(((8.0)*gconst121*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst117*gconst118*(sj2*sj2)))+(((-2.0)*gconst112*gconst120*r00*sj2*sj5))+(((-2.0)*cj2*gconst114*gconst115*gconst124*sj1))+(((16.0)*cj2*gconst112*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*gconst117*gconst119*r00*sj2*sj5))+(((16.0)*r01*sj2*(r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*gconst115*gconst124*r00*sj2*sj5))+(((2.0)*cj2*gconst113*gconst116*gconst123*sj1))+(((8.0)*gconst124*sj2*(r01*r01)*(sj5*sj5)))+(((16.0)*gconst112*r00*r01*sj2*(sj5*sj5)))+(((8.0)*cj2*gconst124*r00*r01*sj1*(sj5*sj5)))+(((2.0)*cj2*gconst114*gconst117*gconst122*sj1))+(((-2.0)*cj2*gconst112*gconst117*gconst120*sj1))+(((-2.0)*cj2*gconst116*gconst121*sj1*sj2))+(((-2.0)*gconst112*gconst113*gconst122*sj2))+(((-2.0)*gconst112*gconst125*(sj2*sj2)))+(((-2.0)*cj2*gconst116*gconst121*r00*sj1*sj5))+(((16.0)*r00*r01*(sj2*sj2)*(sj5*sj5)))+(((-2.0)*cj2*gconst113*gconst117*gconst122*sj1))+(((2.0)*gconst113*gconst115*gconst119*sj2)));
op[6]=((((-4.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+((gconst113*gconst117*gconst119*sj2))+(((4.0)*cj2*gconst116*r00*sj1*sj2*sj5))+((gconst115*gconst116*gconst121*r00*sj5))+(((-8.0)*gconst112*sj2*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst112*gconst115*gconst116*gconst120))+(((-4.0)*cj2*gconst117*sj1*(sj2*sj2)))+((gconst114*gconst116*gconst123*sj2))+(((-2.0)*gconst114*gconst125*r00*sj2*sj5))+(((4.0)*gconst114*gconst116*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst114*gconst125*(sj2*sj2)))+(((-4.0)*(sj2*sj2*sj2*sj2)))+(((-1.0)*gconst114*gconst125*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst113*gconst115*gconst116*gconst119))+(((-4.0)*gconst112*gconst115*(sj2*sj2)))+(((-32.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((-8.0)*gconst112*gconst116*r00*r01*(sj5*sj5)))+(((-4.0)*cj2*gconst114*r00*sj1*sj2*sj5))+(((-8.0)*gconst114*r01*(r00*r00)*(sj5*sj5*sj5)))+((gconst112*gconst117*gconst120*sj2))+((gconst112*gconst117*gconst120*r00*sj5))+(((4.0)*cj2*gconst112*gconst117*sj1*sj2))+(((-4.0)*gconst114*gconst122*r00*r01*(sj5*sj5)))+((gconst114*gconst115*gconst124*sj2))+(((-1.0)*gconst114*gconst117*gconst122*r00*sj5))+((gconst112*gconst113*gconst125*r00*sj5))+((gconst114*gconst115*gconst116*gconst118))+(((-1.0)*gconst112*gconst113*gconst116*gconst123))+(((4.0)*gconst112*r00*sj5*(sj2*sj2)))+(((-8.0)*gconst114*gconst116*(r01*r01)*(sj5*sj5)))+(((-4.0)*(r00*r00)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*gconst119*(r00*r00*r00)*(sj5*sj5*sj5)))+(((4.0)*gconst113*gconst117*(cj2*cj2)*(sj1*sj1)))+(((-2.0)*gconst117*gconst121*r00*sj2*sj5))+((gconst112*gconst113*gconst125*sj2))+(((4.0)*cj2*gconst116*sj1*(sj2*sj2)))+(((4.0)*gconst115*(sj2*sj2*sj2)))+(((-1.0)*gconst117*gconst121*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst114*gconst117*gconst122*sj2))+(((-1.0)*gconst117*gconst121*(sj2*sj2)))+(((4.0)*gconst112*(sj2*sj2*sj2)))+(((-8.0)*r00*sj5*(sj2*sj2*sj2)))+(((-4.0)*cj2*gconst117*r00*sj1*sj2*sj5))+(((-4.0)*gconst121*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst114*sj1*(sj2*sj2)))+((gconst112*gconst113*gconst117*gconst122))+(((-4.0)*gconst114*gconst124*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst112*gconst113*gconst115*gconst124))+(((-16.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*gconst116*gconst121*(r01*r01)*(sj5*sj5)))+(((4.0)*cj2*gconst114*gconst115*sj1*sj2))+(((-4.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst112*gconst124*r00*r01*(sj5*sj5)))+(((-8.0)*gconst112*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst112*gconst116*sj1*sj2))+(((-4.0)*cj2*gconst113*gconst115*sj1*sj2))+(((-4.0)*gconst116*gconst119*r00*r01*(sj5*sj5)))+(((-1.0)*gconst114*gconst117*gconst118*sj2))+((gconst115*gconst116*gconst121*sj2))+(((-4.0)*gconst113*gconst116*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst115*r00*sj5*(sj2*sj2)))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-1.0)*gconst114*gconst117*gconst118*r00*sj5))+(((-4.0)*gconst121*r00*r01*sj2*(sj5*sj5)))+((gconst114*gconst115*gconst124*r00*sj5))+((gconst113*gconst117*gconst119*r00*sj5))+(((-8.0)*gconst114*r00*r01*sj2*(sj5*sj5)))+(((4.0)*cj2*gconst113*sj1*(sj2*sj2)))+(((4.0)*cj2*gconst113*r00*sj1*sj2*sj5))+(((-4.0)*gconst114*gconst117*(cj2*cj2)*(sj1*sj1)))+((gconst114*gconst116*gconst123*r00*sj5)));
op[7]=((((8.0)*x467*x500))+(((-1.0)*gconst113*gconst117*x467*x481))+((gconst117*x493))+(((-1.0)*x468*x474*x487))+((gconst114*x493))+(((-2.0)*gconst116*x467*x473))+((x488*x502))+((gconst117*x468*x498))+(((8.0)*sj2*x504))+((gconst113*x481*x485))+(((-2.0)*gconst113*x467*x469))+((gconst112*x505))+((x462*x474*x497))+(((-1.0)*gconst116*x463*x487))+((x467*x486*x487))+(((4.0)*x467*x468*x479))+(((-1.0)*x467*x468*x489))+(((-1.0)*gconst112*gconst113*x468*x481))+((sj2*x495*x497))+((gconst114*x468*x498))+((gconst114*x481*x501))+(((-1.0)*x467*x468*x499))+(((2.0)*x474*x485))+(((-1.0)*x469*x492))+(((2.0)*gconst112*x467*x486))+(((-2.0)*gconst114*x467*x474))+(((-1.0)*x468*x469*x481))+(((-1.0)*x473*x492))+((gconst112*x467*x502))+((gconst116*x467*x503))+(((-1.0)*x463*x490))+((x463*x503))+((gconst117*x481*x501))+((gconst114*x467*x503))+(((4.0)*x479*x488))+(((-1.0)*x468*x473*x481)));
op[8]=((((-1.0)*x468*x479*x481))+((x473*x474))+(((-1.0)*gconst116*x460*x480*x483))+(((-1.0)*x485*x486))+((gconst116*x468*x473))+((gconst113*sj2*x469))+(((-1.0)*sj2*x480*x501))+(((-1.0)*x480*x500))+((gconst113*x468*x469))+(((-1.0)*gconst116*x494*x495))+(((-4.0)*gconst114*x504))+(((-1.0)*gconst114*sj2*x483*x494))+(((-1.0)*x463*x479))+(((-1.0)*x479*x501)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[3];
IkReal x506=(py*r01);
IkReal x507=(px*r00);
IkReal x508=(pz*r00);
IkReal x509=((-1.0)*r01);
IkReal x510=(((px*r01))+((py*r00)));
IkReal x511=(pz*x509);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x509;
r11=r00;
npx=(x507+(((-1.0)*x506)));
npy=x510;
npz=(pz*r22);
rxp0_0=x511;
rxp0_1=((-1.0)*x508);
rxp0_2=x510;
rxp1_0=x508;
rxp1_1=x511;
rxp1_2=(x506+(((-1.0)*x507)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x512=cj2*cj2;
IkReal x513=sj1*sj1;
IkReal x514=sj0*sj0;
IkReal x515=cj0*cj0;
IkReal x516=sj2*sj2;
IkReal x517=(x512*x513);
j6eval[0]=sj5;
j6eval[1]=(((x514*x516))+((x514*x517))+((x515*x516))+((x515*x517)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x518=(py*r01);
IkReal x519=(px*r00);
IkReal x520=(pz*r00);
IkReal x521=((-1.0)*r01);
IkReal x522=(((px*r01))+((py*r00)));
IkReal x523=(pz*x521);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x521;
r11=r00;
npx=((((-1.0)*x518))+x519);
npy=x522;
npz=(pz*r22);
rxp0_0=x523;
rxp0_1=((-1.0)*x520);
rxp0_2=x522;
rxp1_0=x520;
rxp1_1=x523;
rxp1_2=((((-1.0)*x519))+x518);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x524=(sj4*sj5);
j6eval[0]=x524;
j6eval[1]=IKsign(x524);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x525=(py*r01);
IkReal x526=(px*r00);
IkReal x527=(pz*r00);
IkReal x528=((-1.0)*r01);
IkReal x529=(((px*r01))+((py*r00)));
IkReal x530=(pz*x528);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x528;
r11=r00;
npx=((((-1.0)*x525))+x526);
npy=x529;
npz=(pz*r22);
rxp0_0=x530;
rxp0_1=((-1.0)*x527);
rxp0_2=x529;
rxp1_0=x527;
rxp1_1=x530;
rxp1_2=((((-1.0)*x526))+x525);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x531=(cj4*cj5*sj5);
j6eval[0]=x531;
j6eval[1]=IKsign(x531);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x532=(r01*sj4);
IkReal x533=(cj4*cj5);
IkReal x534=(r00*sj4);
IkReal x535=((1.0)*cj0*sj2);
IkReal x536=(cj2*sj0*sj1);
IkReal x537=(cj0*cj1*sj5);
CheckValue<IkReal> x538=IKPowWithIntegerCheck(IKsign((sj5*x533)),-1);
if(!x538.valid){
continue;
}
CheckValue<IkReal> x539 = IKatan2WithCheck(IkReal(((((-1.0)*x534*x535))+((r01*x533*x536))+(((-1.0)*r01*x533*x535))+((x534*x536))+((r00*x537)))),((((-1.0)*x532*x535))+((cj0*r00*sj2*x533))+(((-1.0)*r00*x533*x536))+((x532*x536))+((r01*x537))),IKFAST_ATAN2_MAGTHRESH);
if(!x539.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x538.value)))+(x539.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x540=IKcos(j6);
IkReal x541=IKsin(j6);
IkReal x542=((0.01)*r00);
IkReal x543=((0.36442)*cj1);
IkReal x544=((0.069)*cj0);
IkReal x545=((1.0)*cj0);
IkReal x546=(cj0*sj2);
IkReal x547=(cj2*sj1);
IkReal x548=((1.0)*sj0);
IkReal x549=(r01*sj4);
IkReal x550=((0.069)*sj0);
IkReal x551=((0.01)*r01);
IkReal x552=(r01*sj5);
IkReal x553=((1.0)*cj4);
IkReal x554=(cj5*x540);
IkReal x555=(r01*x553);
IkReal x556=((1.0)*r00*sj4);
IkReal x557=(r00*x541);
IkReal x558=(cj5*x541);
IkReal x559=(r00*sj5*x540);
evalcond[0]=((((-1.0)*x541*x552))+(((-1.0)*x547*x548))+x559+x546);
evalcond[1]=((((-1.0)*x545*x547))+(((-1.0)*sj2*x548))+((sj5*x557))+((x540*x552)));
evalcond[2]=(((sj4*x557))+(((-1.0)*r00*x553*x554))+(((-1.0)*cj1*x548))+((x540*x549))+((cj4*r01*x558)));
evalcond[3]=((((-1.0)*cj5*x553*x557))+((x541*x549))+(((-1.0)*x554*x555))+(((-1.0)*cj1*x545))+(((-1.0)*x540*x556)));
evalcond[4]=((((-1.0)*x554*x556))+((cj0*cj2))+(((-1.0)*x553*x557))+(((-1.0)*x540*x555))+((x549*x558))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*x556*x558))+((sj1*x546))+(((-1.0)*cj2*x548))+(((-1.0)*x549*x554))+((cj4*r00*x540))+(((-1.0)*x541*x555)));
evalcond[6]=(((x542*x558))+(((-1.0)*x544*x547))+(((-0.37429)*sj5*x557))+((cj0*x543))+(((-1.0)*sj2*x550))+(((-1.0)*px))+x544+((x551*x554))+(((-0.37429)*x540*x552)));
evalcond[7]=(((x542*x554))+((sj0*x543))+(((-0.37429)*x559))+((sj2*x544))+(((-1.0)*x547*x550))+(((0.37429)*x541*x552))+(((-1.0)*x551*x558))+(((-1.0)*py))+x550);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x560=(cj0*sj2);
IkReal x561=(r01*sj4);
IkReal x562=(r00*sj4);
IkReal x563=(cj4*cj5*r00);
IkReal x564=(cj2*sj0*sj1);
IkReal x565=(cj1*sj0*sj5);
IkReal x566=(cj4*cj5*r01);
CheckValue<IkReal> x567 = IKatan2WithCheck(IkReal((((r00*x565))+((x563*x564))+((x560*x561))+(((-1.0)*x560*x563))+(((-1.0)*x561*x564)))),(((x564*x566))+((r01*x565))+((x562*x564))+(((-1.0)*x560*x562))+(((-1.0)*x560*x566))),IKFAST_ATAN2_MAGTHRESH);
if(!x567.valid){
continue;
}
CheckValue<IkReal> x568=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x568.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x567.value)+(((1.5707963267949)*(x568.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x569=IKcos(j6);
IkReal x570=IKsin(j6);
IkReal x571=((0.01)*r00);
IkReal x572=((0.36442)*cj1);
IkReal x573=((0.069)*cj0);
IkReal x574=((1.0)*cj0);
IkReal x575=(cj0*sj2);
IkReal x576=(cj2*sj1);
IkReal x577=((1.0)*sj0);
IkReal x578=(r01*sj4);
IkReal x579=((0.069)*sj0);
IkReal x580=((0.01)*r01);
IkReal x581=(r01*sj5);
IkReal x582=((1.0)*cj4);
IkReal x583=(cj5*x569);
IkReal x584=(r01*x582);
IkReal x585=((1.0)*r00*sj4);
IkReal x586=(r00*x570);
IkReal x587=(cj5*x570);
IkReal x588=(r00*sj5*x569);
evalcond[0]=((((-1.0)*x576*x577))+x575+x588+(((-1.0)*x570*x581)));
evalcond[1]=((((-1.0)*sj2*x577))+((sj5*x586))+(((-1.0)*x574*x576))+((x569*x581)));
evalcond[2]=((((-1.0)*cj1*x577))+((x569*x578))+((sj4*x586))+(((-1.0)*r00*x582*x583))+((cj4*r01*x587)));
evalcond[3]=((((-1.0)*cj1*x574))+(((-1.0)*x583*x584))+(((-1.0)*cj5*x582*x586))+(((-1.0)*x569*x585))+((x570*x578)));
evalcond[4]=(((x578*x587))+(((-1.0)*x582*x586))+((cj0*cj2))+(((-1.0)*x583*x585))+((sj0*sj1*sj2))+(((-1.0)*x569*x584)));
evalcond[5]=(((sj1*x575))+(((-1.0)*cj2*x577))+(((-1.0)*x570*x584))+(((-1.0)*x585*x587))+(((-1.0)*x578*x583))+((cj4*r00*x569)));
evalcond[6]=(((x580*x583))+(((-0.37429)*sj5*x586))+(((-1.0)*x573*x576))+((cj0*x572))+(((-1.0)*sj2*x579))+(((-1.0)*px))+x573+(((-0.37429)*x569*x581))+((x571*x587)));
evalcond[7]=((((-1.0)*x580*x587))+(((0.37429)*x570*x581))+(((-1.0)*x576*x579))+(((-1.0)*py))+(((-0.37429)*x588))+((sj2*x573))+x579+((x571*x583))+((sj0*x572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x589=(cj0*r01);
IkReal x590=(cj2*sj1);
IkReal x591=(r01*sj0);
IkReal x592=(r00*sj2);
CheckValue<IkReal> x593=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x593.valid){
continue;
}
CheckValue<IkReal> x594 = IKatan2WithCheck(IkReal((((sj2*x589))+((cj0*r00*x590))+((sj0*x592))+(((-1.0)*x590*x591)))),(((r00*sj0*x590))+(((-1.0)*cj0*x592))+((sj2*x591))+((x589*x590))),IKFAST_ATAN2_MAGTHRESH);
if(!x594.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x593.value)))+(x594.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x595=IKcos(j6);
IkReal x596=IKsin(j6);
IkReal x597=((0.01)*r00);
IkReal x598=((0.36442)*cj1);
IkReal x599=((0.069)*cj0);
IkReal x600=((1.0)*cj0);
IkReal x601=(cj0*sj2);
IkReal x602=(cj2*sj1);
IkReal x603=((1.0)*sj0);
IkReal x604=(r01*sj4);
IkReal x605=((0.069)*sj0);
IkReal x606=((0.01)*r01);
IkReal x607=(r01*sj5);
IkReal x608=((1.0)*cj4);
IkReal x609=(cj5*x595);
IkReal x610=(r01*x608);
IkReal x611=((1.0)*r00*sj4);
IkReal x612=(r00*x596);
IkReal x613=(cj5*x596);
IkReal x614=(r00*sj5*x595);
evalcond[0]=((((-1.0)*x602*x603))+x601+x614+(((-1.0)*x596*x607)));
evalcond[1]=(((x595*x607))+(((-1.0)*sj2*x603))+(((-1.0)*x600*x602))+((sj5*x612)));
evalcond[2]=((((-1.0)*r00*x608*x609))+((sj4*x612))+((x595*x604))+((cj4*r01*x613))+(((-1.0)*cj1*x603)));
evalcond[3]=((((-1.0)*x595*x611))+(((-1.0)*x609*x610))+(((-1.0)*cj1*x600))+((x596*x604))+(((-1.0)*cj5*x608*x612)));
evalcond[4]=((((-1.0)*x595*x610))+(((-1.0)*x609*x611))+((cj0*cj2))+((sj0*sj1*sj2))+(((-1.0)*x608*x612))+((x604*x613)));
evalcond[5]=(((sj1*x601))+((cj4*r00*x595))+(((-1.0)*x604*x609))+(((-1.0)*x611*x613))+(((-1.0)*cj2*x603))+(((-1.0)*x596*x610)));
evalcond[6]=((((-0.37429)*x595*x607))+(((-0.37429)*sj5*x612))+((x597*x613))+(((-1.0)*sj2*x605))+(((-1.0)*x599*x602))+(((-1.0)*px))+((x606*x609))+x599+((cj0*x598)));
evalcond[7]=((((-1.0)*x602*x605))+(((-0.37429)*x614))+((x597*x609))+(((-1.0)*py))+(((-1.0)*x606*x613))+(((0.37429)*x596*x607))+x605+((sj0*x598))+((sj2*x599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x615=(cj5*r22);
IkReal x616=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((0.01)*r22*sj5))+(((0.37429)*x615))+(((-1.0)*pz))+(((-0.069)*x616))+(((-0.36442)*sj1)));
evalcond[2]=((((-1.0)*x616))+x615);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x617=(py*r01);
IkReal x618=(px*r00);
IkReal x619=(pz*r00);
IkReal x620=((-1.0)*r01);
IkReal x621=(((px*r01))+((py*r00)));
IkReal x622=(pz*x620);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x620;
r11=r00;
npx=((((-1.0)*x617))+x618);
npy=x621;
npz=(pz*r22);
rxp0_0=x622;
rxp0_1=((-1.0)*x619);
rxp0_2=x621;
rxp1_0=x619;
rxp1_1=x622;
rxp1_2=((((-1.0)*x618))+x617);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x623=(r22*sj5);
j4eval[0]=x623;
j4eval[1]=((IKabs(sj1))+(IKabs((cj1*sj2))));
j4eval[2]=IKsign(x623);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal((cj1*sj2)),((-1.0)*sj1),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
CheckValue<IkReal> x625=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x624.value)+(((1.5707963267949)*(x625.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x626=(r22*sj5);
evalcond[0]=(sj1+((x626*(IKcos(j4)))));
evalcond[1]=((((-1.0)*x626*(IKsin(j4))))+((cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x627=((1.0)*sj2);
IkReal x628=(cj2*sj1);
IkReal x629=(r01*sj5);
IkReal x630=(r00*sj5);
IkReal x631=((1.0)*x628);
IkReal x632=(sj2+(((-1.0)*x630)));
IkReal x633=((1.0)*x630);
IkReal x634=((1.0)*x629);
IkReal x635=((((-1.0)*x627))+x630);
IkReal x636=((((-1.0)*x631))+x629);
IkReal x637=((((-1.0)*x634))+x628);
IkReal x638=(x629+x628);
IkReal x639=((((-1.0)*x627))+(((-1.0)*x633)));
IkReal x640=((((-1.0)*x634))+(((-1.0)*x631)));
IkReal gconst142=x632;
IkReal gconst143=x640;
IkReal gconst144=x636;
IkReal gconst145=x632;
IkReal gconst146=x640;
IkReal gconst147=x636;
IkReal gconst148=x639;
IkReal gconst149=x635;
IkReal gconst150=x637;
IkReal gconst151=x638;
IkReal gconst152=x639;
IkReal gconst153=x635;
IkReal gconst154=x637;
IkReal gconst155=x638;
IkReal x641=sj5*sj5;
IkReal x642=r01*r01;
IkReal x643=r00*r00;
IkReal x644=sj2*sj2;
IkReal x645=sj5*sj5*sj5;
IkReal x646=sj2*sj2*sj2;
IkReal x647=r00*r00*r00;
IkReal x648=((2.0)*gconst143);
IkReal x649=(gconst152*gconst155);
IkReal x650=(gconst149*gconst150);
IkReal x651=((8.0)*gconst144);
IkReal x652=(gconst142*gconst144);
IkReal x653=(gconst145*sj2);
IkReal x654=(gconst148*gconst151);
IkReal x655=(gconst145*gconst147);
IkReal x656=((2.0)*sj2);
IkReal x657=(cj2*sj1);
IkReal x658=((1.0)*gconst146);
IkReal x659=(gconst153*gconst154);
IkReal x660=((4.0)*gconst143);
IkReal x661=((2.0)*gconst142);
IkReal x662=((4.0)*r00);
IkReal x663=(gconst146*r01);
IkReal x664=((4.0)*gconst154);
IkReal x665=(r00*sj5);
IkReal x666=(gconst144*gconst146);
IkReal x667=((4.0)*gconst152);
IkReal x668=((2.0)*gconst146);
IkReal x669=(gconst146*sj2);
IkReal x670=(sj2*x641);
IkReal x671=(gconst146*x665);
IkReal x672=((2.0)*x657);
IkReal x673=((8.0)*x657);
IkReal x674=(gconst145*x641);
IkReal x675=(gconst143*x644);
IkReal x676=(gconst151*x642);
IkReal x677=((2.0)*x644);
IkReal x678=((8.0)*r00*r01);
IkReal x679=((8.0)*x642);
IkReal x680=((4.0)*x643);
IkReal x681=(x645*x647);
IkReal x682=(r00*r01*x641);
IkReal x683=(x641*x643);
IkReal x684=(gconst149*x683);
op[0]=((((-1.0)*gconst149*gconst154*r01*x641*x662))+(((-1.0)*x667*x684))+(((-1.0)*gconst151*gconst152*r01*x641*x662))+(((-1.0)*x650*x659))+(((-1.0)*x641*x664*x676))+((x649*x650))+((x654*x659))+(((-1.0)*x649*x654)));
op[1]=(((gconst152*x673*x683))+(((-1.0)*gconst148*x656*x659))+(((-1.0)*gconst151*x659*x672))+((gconst152*x654*x656))+(((-1.0)*gconst155*x650*x672))+((gconst151*x649*x672))+(((8.0)*x670*x676))+((gconst149*x670*x678))+((gconst152*x670*x678))+((gconst153*x650*x656))+((gconst151*x673*x682))+(((-1.0)*gconst149*x649*x656))+((gconst150*x659*x672))+(((-1.0)*gconst150*x649*x672))+((gconst155*x654*x672))+((x673*x684))+((gconst154*x673*x682))+(((-1.0)*gconst152*x650*x656))+(((-1.0)*gconst154*x654*x672))+((gconst154*x650*x672))+(((-1.0)*gconst153*x654*x656))+((gconst148*x649*x656))+((gconst149*x656*x659))+((gconst154*x670*x679)));
op[2]=((((-1.0)*gconst145*gconst148*gconst151*gconst155))+(((-1.0)*gconst143*gconst149*gconst153*gconst154))+(((-4.0)*gconst145*gconst151*r00*r01*(sj5*sj5)))+(((-8.0)*gconst151*gconst154*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst150*gconst153*gconst154*sj2))+(((-4.0)*gconst146*gconst151*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst144*gconst148*gconst152*gconst155))+(((-1.0)*gconst149*gconst150*gconst154*sj2))+((gconst148*gconst151*gconst154*r00*sj5))+(((-32.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((-1.0)*gconst142*gconst151*gconst152*gconst155))+(((4.0)*cj2*gconst149*gconst155*sj1*sj2))+(((-4.0)*gconst151*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst144*gconst152*r00*r01*(sj5*sj5)))+((gconst147*gconst149*gconst150*gconst152))+(((-4.0)*cj2*gconst150*gconst153*sj1*sj2))+(((-4.0)*gconst150*gconst154*(cj2*cj2)*(sj1*sj1)))+(((-8.0)*gconst149*gconst152*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst152*(r00*r00*r00)*(sj5*sj5*sj5)))+((gconst143*gconst149*gconst152*gconst155))+(((-4.0)*gconst148*gconst152*(sj2*sj2)))+(((-1.0)*gconst149*gconst150*gconst154*r00*sj5))+(((-1.0)*gconst147*gconst148*gconst151*gconst152))+(((4.0)*cj2*gconst148*gconst154*sj1*sj2))+(((4.0)*gconst149*gconst152*(sj2*sj2)))+((gconst144*gconst148*gconst153*gconst154))+(((-4.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+((gconst142*gconst151*gconst153*gconst154))+(((-4.0)*cj2*gconst151*gconst152*sj1*sj2))+(((4.0)*gconst151*gconst154*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst154*r00*r01*sj2*(sj5*sj5)))+(((-8.0)*gconst149*gconst154*r00*r01*(sj5*sj5)))+((gconst148*gconst151*gconst154*sj2))+((gconst150*gconst152*gconst155*r00*sj5))+((gconst150*gconst152*gconst155*sj2))+(((-4.0)*cj2*gconst148*gconst155*sj1*sj2))+(((-4.0)*gconst154*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-16.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((4.0)*cj2*gconst150*gconst152*sj1*sj2))+((gconst146*gconst148*gconst151*gconst153))+(((-1.0)*gconst150*gconst153*gconst154*r00*sj5))+(((-8.0)*gconst151*gconst152*r00*r01*(sj5*sj5)))+(((-4.0)*gconst144*gconst154*(r01*r01)*(sj5*sj5)))+(((4.0)*gconst150*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*cj2*gconst149*gconst154*sj1*sj2))+(((4.0)*gconst148*gconst153*(sj2*sj2)))+(((-4.0)*gconst149*gconst153*(sj2*sj2)))+(((-4.0)*gconst146*gconst149*r00*r01*(sj5*sj5)))+(((4.0)*cj2*gconst151*gconst153*sj1*sj2))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-1.0)*gconst146*gconst149*gconst150*gconst153))+((gconst145*gconst149*gconst150*gconst155))+(((-4.0)*gconst152*sj2*(r00*r00)*(sj5*sj5))));
op[3]=((((-2.0)*gconst145*gconst149*gconst150*sj2))+(((16.0)*gconst149*r00*r01*sj2*(sj5*sj5)))+(((2.0)*gconst149*gconst150*r00*sj2*sj5))+(((-2.0)*cj2*gconst151*gconst154*r00*sj1*sj5))+(((2.0)*cj2*gconst143*gconst149*gconst154*sj1))+(((-2.0)*cj2*gconst144*gconst153*gconst154*sj1))+(((2.0)*gconst142*gconst151*gconst152*sj2))+(((8.0)*gconst146*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst144*gconst148*gconst152*sj2))+(((-2.0)*gconst142*gconst153*gconst154*sj2))+(((-2.0)*gconst150*gconst152*(sj2*sj2)))+(((-2.0)*cj2*gconst143*gconst152*gconst155*sj1))+(((2.0)*gconst153*gconst154*r00*sj2*sj5))+(((8.0)*gconst144*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst153*gconst154*(sj2*sj2)))+(((16.0)*gconst152*r00*r01*sj2*(sj5*sj5)))+(((16.0)*cj2*gconst154*r00*r01*sj1*(sj5*sj5)))+(((2.0)*gconst145*gconst148*gconst151*sj2))+(((2.0)*gconst149*gconst154*r00*sj2*sj5))+(((16.0)*cj2*gconst151*r00*r01*sj1*(sj5*sj5)))+(((2.0)*cj2*gconst146*gconst149*gconst150*sj1))+(((2.0)*gconst149*gconst154*(sj2*sj2)))+(((8.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst150*gconst155*sj1*sj2))+(((2.0)*cj2*gconst147*gconst151*gconst152*sj1))+(((2.0)*cj2*gconst144*gconst152*gconst155*sj1))+(((2.0)*gconst147*gconst148*gconst152*sj2))+(((2.0)*gconst150*gconst153*r00*sj2*sj5))+(((2.0)*gconst145*gconst148*gconst155*sj2))+(((8.0)*gconst145*r00*r01*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst147*gconst148*gconst151*sj1))+(((-2.0)*cj2*gconst147*gconst150*gconst152*sj1))+(((-2.0)*gconst147*gconst149*gconst152*sj2))+(((8.0)*cj2*gconst146*r00*r01*sj1*(sj5*sj5)))+(((2.0)*cj2*gconst145*gconst151*gconst155*sj1))+(((8.0)*r01*sj2*(r00*r00)*(sj5*sj5*sj5)))+(((8.0)*r00*r01*(sj2*sj2)*(sj5*sj5)))+(((2.0)*cj2*gconst142*gconst151*gconst155*sj1))+(((2.0)*cj2*gconst144*gconst148*gconst155*sj1))+(((16.0)*gconst151*sj2*(r01*r01)*(sj5*sj5)))+(((8.0)*cj2*sj1*(r00*r00*r00)*(sj5*sj5*sj5)))+(((16.0)*cj2*gconst149*sj1*(r00*r00)*(sj5*sj5)))+(((8.0)*cj2*gconst145*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*cj2*gconst146*gconst150*gconst153*sj1))+(((-2.0)*cj2*gconst146*gconst148*gconst151*sj1))+(((8.0)*cj2*gconst144*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst147*gconst149*gconst150*sj1))+(((-2.0)*gconst145*gconst149*gconst155*sj2))+(((-2.0)*gconst152*gconst155*r00*sj2*sj5))+(((-2.0)*cj2*gconst146*gconst151*gconst153*sj1))+(((-2.0)*cj2*gconst145*gconst150*gconst155*sj1))+(((-2.0)*gconst144*gconst148*gconst153*sj2))+(((16.0)*gconst154*sj2*(r01*r01)*(sj5*sj5)))+(((4.0)*cj2*gconst150*gconst154*sj1*sj2))+(((-2.0)*cj2*gconst150*gconst155*r00*sj1*sj5))+(((-2.0)*cj2*gconst142*gconst151*gconst154*sj1))+(((-2.0)*gconst148*gconst151*r00*sj2*sj5))+(((2.0)*gconst142*gconst152*gconst155*sj2))+(((2.0)*gconst150*gconst153*(sj2*sj2)))+(((16.0)*cj2*gconst152*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*gconst148*gconst151*(sj2*sj2)))+(((-2.0)*cj2*gconst144*gconst148*gconst154*sj1))+(((2.0)*cj2*gconst143*gconst153*gconst154*sj1))+(((-2.0)*gconst152*gconst155*(sj2*sj2)))+(((-2.0)*gconst148*gconst154*r00*sj2*sj5))+(((4.0)*cj2*gconst150*gconst154*r00*sj1*sj5))+(((2.0)*gconst143*gconst149*gconst153*sj2))+(((-2.0)*gconst143*gconst149*gconst152*sj2))+(((2.0)*gconst149*gconst150*(sj2*sj2)))+(((-2.0)*gconst142*gconst151*gconst153*sj2))+(((2.0)*gconst146*gconst149*gconst153*sj2))+(((-2.0)*gconst146*gconst148*gconst153*sj2))+(((-2.0)*cj2*gconst143*gconst149*gconst155*sj1))+(((-2.0)*gconst150*gconst152*r00*sj2*sj5))+(((-2.0)*gconst148*gconst154*(sj2*sj2)))+(((-2.0)*cj2*gconst151*gconst154*sj1*sj2)));
op[4]=((((4.0)*gconst148*r00*sj5*(sj2*sj2)))+((gconst145*gconst150*gconst155*sj2))+(((-4.0)*cj2*gconst154*r00*sj1*sj2*sj5))+(((-1.0)*gconst143*gconst149*gconst154*r00*sj5))+(((-4.0)*gconst145*gconst148*(sj2*sj2)))+(((-8.0)*gconst146*gconst149*r00*r01*(sj5*sj5)))+(((4.0)*cj2*gconst151*r00*sj1*sj2*sj5))+((gconst143*gconst152*gconst155*sj2))+(((-32.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((-1.0)*gconst143*gconst153*gconst154*sj2))+(((-1.0)*gconst150*gconst154*(sj2*sj2)))+((gconst143*gconst145*gconst149*gconst155))+(((4.0)*cj2*gconst155*sj1*(sj2*sj2)))+(((-4.0)*gconst146*gconst150*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst151*gconst154*(r01*r01)*(sj5*sj5)))+(((-4.0)*gconst147*gconst151*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst144*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*cj2*gconst146*gconst149*sj1*sj2))+((gconst142*gconst151*gconst154*sj2))+(((-4.0)*gconst151*gconst152*r00*r01*(sj5*sj5)))+(((-4.0)*cj2*gconst142*gconst155*sj1*sj2))+(((-8.0)*gconst145*gconst151*r00*r01*(sj5*sj5)))+(((4.0)*cj2*gconst143*gconst152*sj1*sj2))+(((-4.0)*cj2*gconst147*gconst148*sj1*sj2))+(((-8.0)*gconst152*sj2*(r00*r00)*(sj5*sj5)))+(((-4.0)*cj2*gconst154*sj1*(sj2*sj2)))+(((-4.0)*gconst144*gconst145*r00*r01*(sj5*sj5)))+((gconst146*gconst148*gconst151*sj2))+(((4.0)*gconst144*gconst154*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst148*(sj2*sj2*sj2)))+((gconst143*gconst152*gconst155*r00*sj5))+((gconst144*gconst148*gconst154*sj2))+(((4.0)*gconst145*gconst149*(sj2*sj2)))+(((-4.0)*gconst149*gconst154*r00*r01*(sj5*sj5)))+(((4.0)*cj2*gconst145*gconst150*sj1*sj2))+(((-8.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst145*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*gconst145*sj2*(r00*r00)*(sj5*sj5)))+(((-8.0)*gconst154*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*gconst150*gconst154*r00*sj2*sj5))+(((-4.0)*gconst142*gconst152*(sj2*sj2)))+(((4.0)*cj2*gconst142*gconst154*sj1*sj2))+(((-1.0)*gconst150*gconst154*(r00*r00)*(sj5*sj5)))+((gconst146*gconst148*gconst151*r00*sj5))+(((-1.0)*gconst146*gconst150*gconst153*r00*sj5))+(((-1.0)*gconst143*gconst153*gconst154*r00*sj5))+(((-1.0)*gconst142*gconst147*gconst151*gconst152))+(((-8.0)*gconst144*gconst154*(r01*r01)*(sj5*sj5)))+(((-8.0)*gconst154*r00*r01*sj2*(sj5*sj5)))+((gconst142*gconst144*gconst153*gconst154))+((gconst145*gconst150*gconst155*r00*sj5))+(((-4.0)*gconst149*r00*sj5*(sj2*sj2)))+(((4.0)*gconst146*gconst151*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst153*(sj2*sj2*sj2)))+((gconst142*gconst151*gconst154*r00*sj5))+(((-4.0)*gconst153*r00*sj5*(sj2*sj2)))+((gconst145*gconst147*gconst149*gconst150))+(((4.0)*cj2*gconst151*sj1*(sj2*sj2)))+((gconst147*gconst150*gconst152*r00*sj5))+(((4.0)*cj2*gconst146*gconst148*sj1*sj2))+(((-8.0)*gconst146*gconst151*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst146*gconst149*gconst150*sj2))+(((-4.0)*cj2*gconst144*gconst152*sj1*sj2))+(((4.0)*gconst147*gconst150*(cj2*cj2)*(sj1*sj1)))+((gconst147*gconst150*gconst152*sj2))+(((-1.0)*gconst145*gconst147*gconst148*gconst151))+(((-1.0)*gconst146*gconst150*gconst153*sj2))+(((-4.0)*gconst149*(sj2*sj2*sj2)))+(((-1.0)*gconst146*gconst149*gconst150*r00*sj5))+(((4.0)*gconst152*(sj2*sj2*sj2)))+(((-64.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((4.0)*gconst143*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*cj2*gconst150*sj1*(sj2*sj2)))+(((-1.0)*gconst143*gconst146*gconst149*gconst153))+(((4.0)*gconst152*r00*sj5*(sj2*sj2)))+(((-4.0)*gconst144*gconst146*(r01*r01)*(sj5*sj5)))+(((-8.0)*gconst144*gconst152*r00*r01*(sj5*sj5)))+(((-1.0)*gconst143*gconst149*gconst154*sj2))+(((-4.0)*gconst149*gconst152*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst144*gconst147*gconst148*gconst152))+(((-4.0)*gconst146*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*gconst146*r00*r01*sj2*(sj5*sj5)))+(((-4.0)*cj2*gconst143*gconst153*sj1*sj2))+(((-4.0)*gconst143*gconst154*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst155*r00*sj1*sj2*sj5))+(((-1.0)*gconst142*gconst145*gconst151*gconst155))+(((-32.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((4.0)*cj2*gconst147*gconst149*sj1*sj2))+(((-8.0)*gconst152*(r00*r00*r00)*(sj5*sj5*sj5)))+(((4.0)*cj2*gconst144*gconst153*sj1*sj2))+((gconst144*gconst148*gconst154*r00*sj5))+(((-1.0)*gconst144*gconst145*gconst148*gconst155))+((gconst144*gconst146*gconst148*gconst153))+((gconst142*gconst146*gconst151*gconst153))+(((4.0)*gconst142*gconst153*(sj2*sj2)))+(((-1.0)*gconst142*gconst144*gconst152*gconst155))+(((-4.0)*cj2*gconst145*gconst151*sj1*sj2))+((gconst143*gconst147*gconst149*gconst152))+(((-4.0)*cj2*gconst150*r00*sj1*sj2*sj5)));
op[5]=((((8.0)*cj2*gconst151*r00*r01*sj1*(sj5*sj5)))+(((2.0)*gconst150*sj2*(r00*r00)*(sj5*sj5)))+(((16.0)*cj2*gconst146*r00*r01*sj1*(sj5*sj5)))+(((4.0)*cj2*gconst146*gconst150*r00*sj1*sj5))+(((-2.0)*cj2*gconst142*gconst146*gconst151*sj1))+(((2.0)*gconst154*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*cj2*gconst143*gconst154*r00*sj1*sj5))+(((8.0)*gconst154*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*cj2*gconst143*gconst155*sj1*sj2))+(((2.0)*gconst145*gconst147*gconst148*sj2))+(((-2.0)*gconst147*gconst152*(sj2*sj2)))+(((2.0)*gconst143*gconst149*(sj2*sj2)))+(((-2.0)*gconst145*gconst150*(sj2*sj2)))+(((16.0)*cj2*gconst144*r00*r01*sj1*(sj5*sj5)))+(((8.0)*gconst152*r00*r01*sj2*(sj5*sj5)))+(((8.0)*gconst151*sj2*(r01*r01)*(sj5*sj5)))+(((4.0)*gconst154*r00*sj5*(sj2*sj2)))+(((2.0)*gconst144*gconst145*gconst148*sj2))+(((-2.0)*cj2*gconst142*gconst144*gconst154*sj1))+(((2.0)*cj2*gconst143*gconst146*gconst153*sj1))+(((2.0)*cj2*gconst145*gconst147*gconst151*sj1))+(((-2.0)*cj2*gconst146*gconst151*sj1*sj2))+(((8.0)*cj2*gconst152*sj1*(r00*r00)*(sj5*sj5)))+(((8.0)*gconst149*r00*r01*sj2*(sj5*sj5)))+(((2.0)*gconst143*gconst153*(sj2*sj2)))+(((2.0)*gconst146*gconst149*r00*sj2*sj5))+(((4.0)*cj2*gconst146*gconst150*sj1*sj2))+(((16.0)*cj2*sj1*(r00*r00*r00)*(sj5*sj5*sj5)))+(((4.0)*gconst150*r00*sj5*(sj2*sj2)))+(((2.0)*gconst142*gconst145*gconst155*sj2))+(((2.0)*gconst154*(sj2*sj2*sj2)))+(((-2.0)*cj2*gconst146*gconst151*r00*sj1*sj5))+(((-2.0)*gconst142*gconst146*gconst153*sj2))+(((2.0)*gconst142*gconst144*gconst152*sj2))+(((-2.0)*gconst142*gconst144*gconst153*sj2))+(((16.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst145*gconst147*gconst150*sj1))+(((-2.0)*gconst145*gconst155*r00*sj2*sj5))+(((16.0)*cj2*gconst145*sj1*(r00*r00)*(sj5*sj5)))+(((16.0)*gconst144*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*gconst144*gconst148*r00*sj2*sj5))+(((-2.0)*cj2*gconst143*gconst147*gconst149*sj1))+(((-2.0)*cj2*gconst143*gconst155*r00*sj1*sj5))+(((-2.0)*gconst146*gconst148*(sj2*sj2)))+(((16.0)*gconst146*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*gconst142*gconst154*r00*sj2*sj5))+(((-2.0)*gconst144*gconst148*(sj2*sj2)))+(((2.0)*cj2*gconst143*gconst146*gconst149*sj1))+(((-2.0)*gconst147*gconst152*r00*sj2*sj5))+(((2.0)*gconst146*gconst149*(sj2*sj2)))+(((-2.0)*cj2*gconst144*gconst146*gconst148*sj1))+(((-2.0)*cj2*gconst147*gconst150*r00*sj1*sj5))+(((2.0)*gconst142*gconst147*gconst152*sj2))+(((2.0)*cj2*gconst142*gconst147*gconst151*sj1))+(((2.0)*cj2*gconst142*gconst144*gconst155*sj1))+(((4.0)*cj2*gconst143*gconst154*sj1*sj2))+(((-2.0)*gconst142*gconst151*r00*sj2*sj5))+(((-2.0)*gconst143*gconst152*r00*sj2*sj5))+(((-2.0)*gconst143*gconst145*gconst149*sj2))+(((2.0)*gconst150*(sj2*sj2*sj2)))+(((-2.0)*gconst145*gconst155*(sj2*sj2)))+(((2.0)*gconst146*gconst153*r00*sj2*sj5))+(((2.0)*cj2*gconst144*gconst145*gconst155*sj1))+(((2.0)*cj2*gconst144*gconst147*gconst148*sj1))+(((16.0)*gconst145*r00*r01*sj2*(sj5*sj5)))+(((2.0)*gconst143*gconst153*r00*sj2*sj5))+(((2.0)*gconst146*gconst153*(sj2*sj2)))+(((16.0)*r01*sj2*(r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*cj2*gconst144*gconst146*gconst153*sj1))+(((-2.0)*gconst142*gconst154*(sj2*sj2)))+(((2.0)*cj2*gconst144*gconst147*gconst152*sj1))+(((2.0)*gconst143*gconst149*r00*sj2*sj5))+(((8.0)*cj2*gconst154*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst144*gconst154*r00*sj1*sj5))+(((-2.0)*cj2*gconst147*gconst150*sj1*sj2))+(((-2.0)*cj2*gconst143*gconst147*gconst152*sj1))+(((-2.0)*gconst142*gconst151*(sj2*sj2)))+(((-2.0)*gconst145*gconst147*gconst149*sj2))+(((-2.0)*gconst146*gconst148*r00*sj2*sj5))+(((-2.0)*gconst143*gconst152*(sj2*sj2)))+(((-2.0)*cj2*gconst143*gconst145*gconst155*sj1))+(((16.0)*r00*r01*(sj2*sj2)*(sj5*sj5)))+(((2.0)*gconst142*gconst145*gconst151*sj2))+(((-2.0)*cj2*gconst144*gconst154*sj1*sj2))+(((8.0)*cj2*gconst149*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*gconst145*gconst150*r00*sj2*sj5)));
op[6]=((((4.0)*cj2*gconst143*gconst145*sj1*sj2))+(((4.0)*gconst143*gconst147*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst143*gconst146*gconst153*sj2))+(((-8.0)*gconst145*sj2*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst145*gconst151*r00*r01*(sj5*sj5)))+(((-1.0)*gconst144*gconst145*gconst147*gconst148))+(((-4.0)*gconst146*gconst151*(r01*r01)*(sj5*sj5)))+(((-4.0)*gconst143*gconst146*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst146*gconst150*(r00*r00)*(sj5*sj5)))+(((-4.0)*(sj2*sj2*sj2*sj2)))+(((4.0)*cj2*gconst144*r00*sj1*sj2*sj5))+(((4.0)*cj2*gconst144*sj1*(sj2*sj2)))+((gconst143*gconst147*gconst152*r00*sj5))+(((-32.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((-8.0)*gconst145*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*gconst144*gconst152*r00*r01*(sj5*sj5)))+((gconst144*gconst146*gconst148*sj2))+((gconst143*gconst145*gconst155*r00*sj5))+(((-1.0)*gconst143*gconst146*gconst149*r00*sj5))+((gconst145*gconst147*gconst150*r00*sj5))+(((-4.0)*gconst152*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-1.0)*gconst142*gconst144*gconst145*gconst155))+(((4.0)*gconst144*gconst146*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst143*gconst146*gconst153*r00*sj5))+(((-1.0)*gconst143*gconst154*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst142*gconst144*gconst147*gconst152))+(((4.0)*gconst145*r00*sj5*(sj2*sj2)))+(((-4.0)*cj2*gconst146*sj1*(sj2*sj2)))+((gconst143*gconst145*gconst155*sj2))+(((-8.0)*gconst144*gconst146*(r01*r01)*(sj5*sj5)))+((gconst142*gconst144*gconst146*gconst153))+(((-2.0)*gconst146*gconst150*r00*sj2*sj5))+(((4.0)*cj2*gconst147*sj1*(sj2*sj2)))+((gconst142*gconst144*gconst154*r00*sj5))+(((-4.0)*(r00*r00)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*cj2*gconst143*r00*sj1*sj2*sj5))+(((-4.0)*cj2*gconst144*gconst145*sj1*sj2))+((gconst142*gconst146*gconst151*sj2))+(((-4.0)*gconst144*gconst147*(cj2*cj2)*(sj1*sj1)))+((gconst143*gconst147*gconst152*sj2))+(((-4.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst146*gconst150*(sj2*sj2)))+((gconst142*gconst144*gconst154*sj2))+(((-8.0)*r00*sj5*(sj2*sj2*sj2)))+(((-4.0)*gconst154*r00*r01*sj2*(sj5*sj5)))+((gconst143*gconst145*gconst147*gconst149))+(((4.0)*gconst142*(sj2*sj2*sj2)))+(((-1.0)*gconst142*gconst145*gconst147*gconst151))+(((-4.0)*gconst142*gconst145*(sj2*sj2)))+(((4.0)*gconst145*(sj2*sj2*sj2)))+(((-4.0)*gconst154*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-16.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+((gconst142*gconst146*gconst151*r00*sj5))+(((4.0)*gconst142*r00*sj5*(sj2*sj2)))+(((4.0)*cj2*gconst142*gconst146*sj1*sj2))+(((4.0)*cj2*gconst147*r00*sj1*sj2*sj5))+(((-4.0)*cj2*gconst143*sj1*(sj2*sj2)))+(((-4.0)*gconst144*gconst154*(r01*r01)*(sj5*sj5)))+((gconst145*gconst147*gconst150*sj2))+(((-8.0)*gconst146*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst146*r00*sj1*sj2*sj5))+((gconst144*gconst146*gconst148*r00*sj5))+(((-1.0)*gconst143*gconst146*gconst149*sj2))+(((-8.0)*gconst146*r00*r01*sj2*(sj5*sj5)))+(((-4.0)*gconst146*gconst149*r00*r01*(sj5*sj5)))+(((-2.0)*gconst143*gconst154*r00*sj2*sj5))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-4.0)*cj2*gconst142*gconst147*sj1*sj2))+(((-8.0)*gconst144*gconst145*r00*r01*(sj5*sj5)))+(((-4.0)*gconst152*sj2*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst143*gconst154*(sj2*sj2))));
op[7]=((((-1.0)*gconst147*sj2*x648*x657))+(((-2.0)*gconst147*x653*x665))+((gconst144*x655*x672))+(((-1.0)*x665*x666*x672))+((gconst147*x652*x672))+((gconst146*x656*x683))+(((-1.0)*x652*x657*x668))+((r00*x641*x663*x673))+(((-1.0)*gconst146*x644*x661))+((x641*x653*x678))+((x643*x648*x670))+(((-1.0)*x656*x657*x666))+(((-1.0)*gconst145*x644*x648))+(((2.0)*x652*x653))+((x642*x651*x670))+((x657*x660*x671))+((gconst146*sj5*x644*x662))+((x651*x657*x682))+((x643*x670*x673))+((x673*x681))+(((-1.0)*x648*x653*x665))+(((-1.0)*x652*x656*x665))+((x643*x673*x674))+(((-1.0)*gconst147*x648*x657*x665))+((x641*x644*x678))+(((-1.0)*x652*x677))+((x646*x668))+(((-1.0)*gconst142*x656*x671))+(((-1.0)*x648*x655*x657))+((x644*x660*x665))+((x646*x648))+(((-1.0)*x655*x677))+((x641*x669*x679))+((x657*x660*x669))+((gconst147*x653*x661))+(((8.0)*r01*sj2*x643*x645)));
op[8]=(((gconst143*x655*x665))+(((-1.0)*x662*x663*x670))+(((-1.0)*gconst143*x658*x683))+(((-1.0)*x641*x653*x680))+(((-1.0)*gconst144*r01*x662*x674))+(((-1.0)*x658*x675))+((gconst143*gconst147*x653))+((x652*x669))+(((-1.0)*x648*x665*x669))+(((-4.0)*gconst145*x681))+((x652*x671))+(((-1.0)*x645*x663*x680))+(((-1.0)*x652*x655))+(((-4.0)*x641*x642*x666)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[3];
IkReal x685=(py*r01);
IkReal x686=(px*r00);
IkReal x687=(pz*r00);
IkReal x688=((-1.0)*r01);
IkReal x689=(((px*r01))+((py*r00)));
IkReal x690=(pz*x688);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x688;
r11=r00;
npx=(x686+(((-1.0)*x685)));
npy=x689;
npz=(pz*r22);
rxp0_0=x690;
rxp0_1=((-1.0)*x687);
rxp0_2=x689;
rxp1_0=x687;
rxp1_1=x690;
rxp1_2=(x685+(((-1.0)*x686)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x691=cj2*cj2;
IkReal x692=sj1*sj1;
IkReal x693=sj0*sj0;
IkReal x694=cj0*cj0;
IkReal x695=sj2*sj2;
IkReal x696=(x691*x692);
j6eval[0]=sj5;
j6eval[1]=(((x694*x696))+((x694*x695))+((x693*x696))+((x693*x695)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x697=(py*r01);
IkReal x698=(px*r00);
IkReal x699=(pz*r00);
IkReal x700=((-1.0)*r01);
IkReal x701=(((px*r01))+((py*r00)));
IkReal x702=(pz*x700);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x700;
r11=r00;
npx=(x698+(((-1.0)*x697)));
npy=x701;
npz=(pz*r22);
rxp0_0=x702;
rxp0_1=((-1.0)*x699);
rxp0_2=x701;
rxp1_0=x699;
rxp1_1=x702;
rxp1_2=(x697+(((-1.0)*x698)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x703=(cj4*cj5*sj5);
j6eval[0]=x703;
j6eval[1]=IKsign(x703);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x704=(py*r01);
IkReal x705=(px*r00);
IkReal x706=(pz*r00);
IkReal x707=((-1.0)*r01);
IkReal x708=(((px*r01))+((py*r00)));
IkReal x709=(pz*x707);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x707;
r11=r00;
npx=((((-1.0)*x704))+x705);
npy=x708;
npz=(pz*r22);
rxp0_0=x709;
rxp0_1=((-1.0)*x706);
rxp0_2=x708;
rxp1_0=x706;
rxp1_1=x709;
rxp1_2=((((-1.0)*x705))+x704);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x710=(sj4*sj5);
j6eval[0]=x710;
j6eval[1]=IKsign(x710);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x711=(cj0*sj2);
IkReal x712=(r01*sj4);
IkReal x713=(r00*sj4);
IkReal x714=(cj4*cj5*r00);
IkReal x715=(cj2*sj0*sj1);
IkReal x716=(cj1*sj0*sj5);
IkReal x717=(cj4*cj5*r01);
CheckValue<IkReal> x718 = IKatan2WithCheck(IkReal((((x714*x715))+((r00*x716))+((x711*x712))+(((-1.0)*x711*x714))+(((-1.0)*x712*x715)))),(((x715*x717))+((r01*x716))+(((-1.0)*x711*x717))+(((-1.0)*x711*x713))+((x713*x715))),IKFAST_ATAN2_MAGTHRESH);
if(!x718.valid){
continue;
}
CheckValue<IkReal> x719=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x719.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x718.value)+(((-1.5707963267949)*(x719.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x720=IKsin(j6);
IkReal x721=IKcos(j6);
IkReal x722=(cj5*r00);
IkReal x723=(cj4*r01);
IkReal x724=(cj1*sj0);
IkReal x725=((0.069)*cj0);
IkReal x726=((1.0)*cj0);
IkReal x727=(cj0*sj2);
IkReal x728=(cj2*sj1);
IkReal x729=((1.0)*sj0);
IkReal x730=(r01*sj5);
IkReal x731=(cj5*r01);
IkReal x732=((0.069)*sj0);
IkReal x733=(r00*sj5);
IkReal x734=((0.01)*x721);
IkReal x735=((1.0)*x721);
IkReal x736=(cj4*x720);
IkReal x737=(cj4*x721);
IkReal x738=((0.37429)*x721);
IkReal x739=((0.37429)*x720);
IkReal x740=((0.01)*x720);
IkReal x741=((1.0)*x720);
IkReal x742=(sj4*x741);
evalcond[0]=(((x720*x730))+(((-1.0)*x733*x735))+x727+(((-1.0)*x728*x729)));
evalcond[1]=((((-1.0)*x730*x735))+(((-1.0)*x733*x741))+(((-1.0)*sj2*x729))+(((-1.0)*x726*x728)));
evalcond[2]=(((x722*x736))+((r00*sj4*x721))+((cj5*x721*x723))+(((-1.0)*cj1*x726))+(((-1.0)*r01*x742)));
evalcond[3]=((((-1.0)*r01*sj4*x735))+((x722*x737))+(((-1.0)*x724))+(((-1.0)*r00*x742))+(((-1.0)*cj5*x723*x741)));
evalcond[4]=((((-1.0)*x723*x735))+((cj0*cj2))+((sj4*x720*x731))+(((-1.0)*r00*x736))+(((-1.0)*sj4*x722*x735))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*x722*x742))+(((-1.0)*cj2*x729))+((r00*x737))+(((-1.0)*sj4*x731*x735))+((sj1*x727))+(((-1.0)*x723*x741)));
evalcond[6]=(((x731*x734))+(((-1.0)*x733*x739))+(((0.36442)*cj0*cj1))+(((-1.0)*px))+(((-1.0)*x725*x728))+(((-1.0)*x730*x738))+(((-1.0)*sj2*x732))+((x722*x740))+x725);
evalcond[7]=(((sj2*x725))+(((-1.0)*x733*x738))+((x722*x734))+(((-1.0)*x731*x740))+(((-1.0)*py))+x732+(((-1.0)*x728*x732))+(((0.36442)*x724))+((x730*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x743=(r01*sj4);
IkReal x744=(cj4*cj5);
IkReal x745=(r00*sj4);
IkReal x746=((1.0)*cj0*sj2);
IkReal x747=(cj2*sj0*sj1);
IkReal x748=(cj0*cj1*sj5);
CheckValue<IkReal> x749=IKPowWithIntegerCheck(IKsign((sj5*x744)),-1);
if(!x749.valid){
continue;
}
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal((((x745*x747))+(((-1.0)*x745*x746))+(((-1.0)*r01*x744*x746))+((r00*x748))+((r01*x744*x747)))),(((cj0*r00*sj2*x744))+(((-1.0)*r00*x744*x747))+((x743*x747))+((r01*x748))+(((-1.0)*x743*x746))),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x749.value)))+(x750.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x751=IKsin(j6);
IkReal x752=IKcos(j6);
IkReal x753=(cj5*r00);
IkReal x754=(cj4*r01);
IkReal x755=(cj1*sj0);
IkReal x756=((0.069)*cj0);
IkReal x757=((1.0)*cj0);
IkReal x758=(cj0*sj2);
IkReal x759=(cj2*sj1);
IkReal x760=((1.0)*sj0);
IkReal x761=(r01*sj5);
IkReal x762=(cj5*r01);
IkReal x763=((0.069)*sj0);
IkReal x764=(r00*sj5);
IkReal x765=((0.01)*x752);
IkReal x766=((1.0)*x752);
IkReal x767=(cj4*x751);
IkReal x768=(cj4*x752);
IkReal x769=((0.37429)*x752);
IkReal x770=((0.37429)*x751);
IkReal x771=((0.01)*x751);
IkReal x772=((1.0)*x751);
IkReal x773=(sj4*x772);
evalcond[0]=((((-1.0)*x764*x766))+((x751*x761))+x758+(((-1.0)*x759*x760)));
evalcond[1]=((((-1.0)*x764*x772))+(((-1.0)*x757*x759))+(((-1.0)*x761*x766))+(((-1.0)*sj2*x760)));
evalcond[2]=(((cj5*x752*x754))+((r00*sj4*x752))+(((-1.0)*r01*x773))+(((-1.0)*cj1*x757))+((x753*x767)));
evalcond[3]=((((-1.0)*r01*sj4*x766))+(((-1.0)*x755))+(((-1.0)*r00*x773))+(((-1.0)*cj5*x754*x772))+((x753*x768)));
evalcond[4]=(((sj4*x751*x762))+(((-1.0)*sj4*x753*x766))+(((-1.0)*r00*x767))+((cj0*cj2))+(((-1.0)*x754*x766))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*x754*x772))+(((-1.0)*x753*x773))+(((-1.0)*cj2*x760))+((sj1*x758))+(((-1.0)*sj4*x762*x766))+((r00*x768)));
evalcond[6]=((((-1.0)*x764*x770))+(((0.36442)*cj0*cj1))+((x762*x765))+(((-1.0)*px))+(((-1.0)*x756*x759))+x756+((x753*x771))+(((-1.0)*x761*x769))+(((-1.0)*sj2*x763)));
evalcond[7]=((((-1.0)*x764*x769))+(((-1.0)*py))+(((0.36442)*x755))+x763+((sj2*x756))+(((-1.0)*x762*x771))+((x761*x770))+((x753*x765))+(((-1.0)*x759*x763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x774=(r00*sj2);
IkReal x775=((1.0)*sj0);
IkReal x776=(r01*sj2);
IkReal x777=(cj2*sj1);
IkReal x778=((1.0)*cj0);
CheckValue<IkReal> x779=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x779.valid){
continue;
}
CheckValue<IkReal> x780 = IKatan2WithCheck(IkReal(((((-1.0)*x774*x775))+((r01*sj0*x777))+(((-1.0)*r00*x777*x778))+(((-1.0)*x776*x778)))),((((-1.0)*r00*x775*x777))+(((-1.0)*x775*x776))+((cj0*x774))+(((-1.0)*r01*x777*x778))),IKFAST_ATAN2_MAGTHRESH);
if(!x780.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x779.value)))+(x780.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x781=IKsin(j6);
IkReal x782=IKcos(j6);
IkReal x783=(cj5*r00);
IkReal x784=(cj4*r01);
IkReal x785=(cj1*sj0);
IkReal x786=((0.069)*cj0);
IkReal x787=((1.0)*cj0);
IkReal x788=(cj0*sj2);
IkReal x789=(cj2*sj1);
IkReal x790=((1.0)*sj0);
IkReal x791=(r01*sj5);
IkReal x792=(cj5*r01);
IkReal x793=((0.069)*sj0);
IkReal x794=(r00*sj5);
IkReal x795=((0.01)*x782);
IkReal x796=((1.0)*x782);
IkReal x797=(cj4*x781);
IkReal x798=(cj4*x782);
IkReal x799=((0.37429)*x782);
IkReal x800=((0.37429)*x781);
IkReal x801=((0.01)*x781);
IkReal x802=((1.0)*x781);
IkReal x803=(sj4*x802);
evalcond[0]=(((x781*x791))+(((-1.0)*x794*x796))+(((-1.0)*x789*x790))+x788);
evalcond[1]=((((-1.0)*x791*x796))+(((-1.0)*x787*x789))+(((-1.0)*x794*x802))+(((-1.0)*sj2*x790)));
evalcond[2]=(((r00*sj4*x782))+((cj5*x782*x784))+((x783*x797))+(((-1.0)*r01*x803))+(((-1.0)*cj1*x787)));
evalcond[3]=(((x783*x798))+(((-1.0)*r00*x803))+(((-1.0)*r01*sj4*x796))+(((-1.0)*x785))+(((-1.0)*cj5*x784*x802)));
evalcond[4]=(((sj4*x781*x792))+(((-1.0)*sj4*x783*x796))+(((-1.0)*r00*x797))+((cj0*cj2))+(((-1.0)*x784*x796))+((sj0*sj1*sj2)));
evalcond[5]=(((r00*x798))+(((-1.0)*cj2*x790))+(((-1.0)*x784*x802))+((sj1*x788))+(((-1.0)*sj4*x792*x796))+(((-1.0)*x783*x803)));
evalcond[6]=((((0.36442)*cj0*cj1))+(((-1.0)*x791*x799))+(((-1.0)*px))+((x792*x795))+(((-1.0)*x786*x789))+x786+(((-1.0)*x794*x800))+(((-1.0)*sj2*x793))+((x783*x801)));
evalcond[7]=(((sj2*x786))+(((-1.0)*x794*x799))+((x783*x795))+((x791*x800))+(((-1.0)*py))+(((-1.0)*x792*x801))+(((0.36442)*x785))+(((-1.0)*x789*x793))+x793);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x804=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*x804))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
evalcond[2]=(sj1+x804);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x805=(py*r01);
IkReal x806=(px*r00);
IkReal x807=(pz*r00);
IkReal x808=((-1.0)*r01);
IkReal x809=(((px*r01))+((py*r00)));
IkReal x810=(pz*x808);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x808;
r11=r00;
npx=((((-1.0)*x805))+x806);
npy=x809;
npz=(pz*r22);
rxp0_0=x810;
rxp0_1=((-1.0)*x807);
rxp0_2=x809;
rxp1_0=x807;
rxp1_1=x810;
rxp1_2=((((-1.0)*x806))+x805);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x811=(r22*sj5);
j4eval[0]=x811;
j4eval[1]=((IKabs((cj1*sj2)))+(IKabs((cj1*cj2))));
j4eval[2]=IKsign(x811);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x812=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x812.valid){
continue;
}
CheckValue<IkReal> x813 = IKatan2WithCheck(IkReal((cj1*sj2)),((-1.0)*cj1*cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x812.value)))+(x813.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x814=((1.0)*r22*sj5);
evalcond[0]=(((cj1*sj2))+(((-1.0)*x814*(IKsin(j4)))));
evalcond[1]=((((-1.0)*cj1*cj2))+(((-1.0)*x814*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
IkReal x815=(py*r01);
IkReal x816=(px*r00);
IkReal x817=(pz*r00);
IkReal x818=((-1.0)*r01);
IkReal x819=(((px*r01))+((py*r00)));
IkReal x820=(pz*x818);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x818;
r11=r00;
npx=((((-1.0)*x815))+x816);
npy=x819;
npz=(pz*r22);
rxp0_0=x820;
rxp0_1=((-1.0)*x817);
rxp0_2=x819;
rxp1_0=x817;
rxp1_1=x820;
rxp1_2=((((-1.0)*x816))+x815);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x821=r01*r01;
IkReal x822=r00*r00;
IkReal x823=((0.552)*sj2);
IkReal x824=((1.104)*sj2);
IkReal x825=((2.95484)*cj1);
IkReal x826=((12.0)*px);
IkReal x827=((4.0)*px);
IkReal x828=((0.276)*cj2*sj1);
IkReal x829=(cj4*sj5*x821);
IkReal x830=(cj4*sj5*x822);
IkReal x831=((0.04)*cj1*cj4*cj5);
IkReal x832=((0.276)*x830);
IkReal x833=((0.276)*x829);
IkReal x834=(x825*x829);
IkReal x835=(x825*x830);
IkReal x836=(x821*x831);
IkReal x837=(x826*x830);
IkReal x838=(x826*x829);
IkReal x839=(x822*x831);
IkReal x840=(x828*x830);
IkReal x841=(x828*x829);
IkReal x842=(x837+x838);
IkReal x843=(x834+x835+x832+x833);
IkReal x844=(x836+x839+x841+x840);
j0eval[0]=((((0.5)*(IKabs(((((-1.0)*x844))+(((-1.0)*x842))+x843)))))+(IKabs(((((-1.0)*x823*x830))+(((-1.0)*x823*x829)))))+(((0.5)*(IKabs(((((-1.0)*x842))+(((-1.0)*x843))+x844)))))+(((0.5)*(IKabs(((((-1.0)*x827*x830))+(((-1.0)*x827*x829))+(((-1.0)*x843))+x844)))))+(((0.5)*(IKabs(((((-1.0)*x824*x829))+(((-1.0)*x824*x830))))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j0evalpoly[1];
IkReal x845=r01*r01;
IkReal x846=r00*r00;
IkReal x847=((0.552)*sj2);
IkReal x848=((1.104)*sj2);
IkReal x849=((2.95484)*cj1);
IkReal x850=((12.0)*px);
IkReal x851=((4.0)*px);
IkReal x852=((0.276)*cj2*sj1);
IkReal x853=(cj4*sj5*x845);
IkReal x854=(cj4*sj5*x846);
IkReal x855=((0.04)*cj1*cj4*cj5);
IkReal x856=((0.276)*x854);
IkReal x857=((0.276)*x853);
IkReal x858=(x849*x853);
IkReal x859=(x849*x854);
IkReal x860=(x845*x855);
IkReal x861=(x850*x854);
IkReal x862=(x850*x853);
IkReal x863=(x846*x855);
IkReal x864=(x851*x854);
IkReal x865=(x851*x853);
IkReal x866=(x852*x854);
IkReal x867=(x852*x853);
IkReal x868=((((-1.0)*x847*x854))+(((-1.0)*x847*x853)));
IkReal x869=(x862+x861);
IkReal x870=(x865+x864);
IkReal x871=(x856+x857+x858+x859);
IkReal x872=(x867+x866+x863+x860);
op[0]=(x872+(((-1.0)*x871))+(((-1.0)*x870)));
op[1]=x868;
op[2]=((((-1.0)*x869))+x872+(((-1.0)*x871)));
op[3]=((((-1.0)*x848*x854))+(((-1.0)*x848*x853)));
op[4]=((((-1.0)*x869))+x871+(((-1.0)*x872)));
op[5]=x868;
op[6]=(x871+(((-1.0)*x872))+(((-1.0)*x870)));
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

IkReal x873=r01*r01;
IkReal x874=r00*r00;
IkReal x875=(sj2*sj5);
IkReal x876=((0.276)*sj5);
IkReal x877=(sj4*x873);
IkReal x878=((0.04)*cj1*cj5);
IkReal x879=((12.0)*px*sj5);
IkReal x880=(sj4*x874);
IkReal x881=((2.95484)*cj1*sj5);
IkReal x882=((4.0)*px*sj5);
IkReal x883=(cj2*sj1*x876);
IkReal x884=(x876*x877);
IkReal x885=(x876*x880);
IkReal x886=(x877*x878);
IkReal x887=(x879*x880);
IkReal x888=(x877*x879);
IkReal x889=(x878*x880);
IkReal x890=(x880*x881);
IkReal x891=(x877*x881);
IkReal x892=(x880*x882);
IkReal x893=(x877*x882);
IkReal x894=(x880*x883);
IkReal x895=(x877*x883);
IkReal x896=((((0.552)*x875*x880))+(((0.552)*x875*x877)));
IkReal x897=(x892+x893);
IkReal x898=(x887+x888);
IkReal x899=(x885+x884+x890+x891);
IkReal x900=(x886+x889+x894+x895);
j0evalpoly[0]=(((htj0*x896))+((x896*(htj0*htj0*htj0*htj0*htj0)))+(((-1.0)*x899))+(((htj0*htj0)*(((((-1.0)*x899))+x898+x900))))+x897+(((htj0*htj0*htj0*htj0*htj0*htj0)*(((((-1.0)*x900))+x897+x899))))+(((htj0*htj0*htj0*htj0)*(((((-1.0)*x900))+x898+x899))))+x900+(((htj0*htj0*htj0)*(((((1.104)*x875*x877))+(((1.104)*x875*x880)))))));
if( IKabs(j0evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[4];
IkReal x901=(py*r01);
IkReal x902=(px*r00);
IkReal x903=(pz*r00);
IkReal x904=((-1.0)*r01);
IkReal x905=(((px*r01))+((py*r00)));
IkReal x906=(pz*x904);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x904;
r11=r00;
npx=((((-1.0)*x901))+x902);
npy=x905;
npz=(pz*r22);
rxp0_0=x906;
rxp0_1=((-1.0)*x903);
rxp0_2=x905;
rxp1_0=x903;
rxp1_1=x906;
rxp1_2=((((-1.0)*x902))+x901);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j6eval[0]=sj5;
j6eval[1]=cj1;
j6eval[2]=((cj0*cj0)+(sj0*sj0));
j6eval[3]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x907=(py*r01);
IkReal x908=(px*r00);
IkReal x909=(pz*r00);
IkReal x910=((-1.0)*r01);
IkReal x911=(((px*r01))+((py*r00)));
IkReal x912=(pz*x910);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x910;
r11=r00;
npx=((((-1.0)*x907))+x908);
npy=x911;
npz=(pz*r22);
rxp0_0=x912;
rxp0_1=((-1.0)*x909);
rxp0_2=x911;
rxp1_0=x909;
rxp1_1=x912;
rxp1_2=((((-1.0)*x908))+x907);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x913=(sj4*sj5);
IkReal x914=(cj1*sj0);
IkReal x915=((1.0)*r00);
IkReal x916=(cj4*cj5);
IkReal x917=((1.0)*r01);
IkReal x918=(cj0*sj2*sj5);
IkReal x919=(cj2*sj0*sj1*sj5);
j6eval[0]=x913;
j6eval[1]=IKsign(x913);
j6eval[2]=((IKabs(((((-1.0)*x914*x915*x916))+(((-1.0)*x915*x918))+((r00*x919))+((r01*sj4*x914)))))+(IKabs(((((-1.0)*sj4*x914*x915))+(((-1.0)*x914*x916*x917))+((r01*x919))+(((-1.0)*x917*x918))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x920=(py*r01);
IkReal x921=(px*r00);
IkReal x922=(pz*r00);
IkReal x923=((-1.0)*r01);
IkReal x924=(((px*r01))+((py*r00)));
IkReal x925=(pz*x923);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x923;
r11=r00;
npx=((((-1.0)*x920))+x921);
npy=x924;
npz=(pz*r22);
rxp0_0=x925;
rxp0_1=((-1.0)*x922);
rxp0_2=x924;
rxp1_0=x922;
rxp1_1=x925;
rxp1_2=((((-1.0)*x921))+x920);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x926=(cj0*r01);
IkReal x927=(sj2*sj5);
IkReal x928=(cj4*cj5);
IkReal x929=(sj5*x928);
IkReal x930=(cj0*cj1*r00);
IkReal x931=(cj2*sj0*sj1*sj5);
j6eval[0]=x929;
j6eval[1]=IKsign(x929);
j6eval[2]=((IKabs(((((-1.0)*cj1*sj4*x926))+((x928*x930))+(((-1.0)*r01*x931))+((x926*x927)))))+(IKabs(((((-1.0)*cj0*r00*x927))+((sj4*x930))+((cj1*x926*x928))+((r00*x931))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x932=(cj0*r01);
IkReal x933=(sj2*sj5);
IkReal x934=(cj4*cj5);
IkReal x935=(cj0*cj1*r00);
IkReal x936=(cj2*sj0*sj1*sj5);
CheckValue<IkReal> x937=IKPowWithIntegerCheck(IKsign((sj5*x934)),-1);
if(!x937.valid){
continue;
}
CheckValue<IkReal> x938 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*sj4*x932))+(((-1.0)*r01*x936))+((x934*x935))+((x932*x933)))),(((cj1*x932*x934))+(((-1.0)*cj0*r00*x933))+((sj4*x935))+((r00*x936))),IKFAST_ATAN2_MAGTHRESH);
if(!x938.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x937.value)))+(x938.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x939=IKsin(j6);
IkReal x940=IKcos(j6);
IkReal x941=((0.01)*r00);
IkReal x942=((0.36442)*cj1);
IkReal x943=((0.069)*cj0);
IkReal x944=((1.0)*cj0);
IkReal x945=(cj0*sj2);
IkReal x946=((1.0)*sj0);
IkReal x947=(cj2*sj1);
IkReal x948=(r01*sj5);
IkReal x949=((0.069)*sj0);
IkReal x950=(r00*sj5);
IkReal x951=(r01*sj4);
IkReal x952=((1.0)*cj4);
IkReal x953=(cj5*x940);
IkReal x954=(r01*x952);
IkReal x955=((1.0)*r00*sj4);
IkReal x956=((0.37429)*x940);
IkReal x957=((1.0)*x940);
IkReal x958=(r00*x939);
IkReal x959=(cj5*x939);
IkReal x960=(r01*x959);
evalcond[0]=((((-1.0)*cj1*x946))+((x939*x948))+(((-1.0)*x950*x957)));
evalcond[1]=((((-1.0)*cj1*x944))+(((-1.0)*x939*x950))+(((-1.0)*x948*x957)));
evalcond[2]=(((x940*x951))+((sj4*x958))+(((-1.0)*x946*x947))+(((-1.0)*r00*x952*x953))+x945+((cj4*x960)));
evalcond[3]=(((x951*x959))+(((-1.0)*x940*x954))+((cj0*cj2))+(((-1.0)*x953*x955))+((sj0*sj1*sj2))+(((-1.0)*x952*x958)));
evalcond[4]=((((-1.0)*cj2*x946))+((sj1*x945))+(((-1.0)*x939*x954))+(((-1.0)*x951*x953))+(((-1.0)*x955*x959))+((cj4*r00*x940)));
evalcond[5]=((((-1.0)*x940*x955))+(((-1.0)*x944*x947))+(((-1.0)*cj5*x952*x958))+(((-1.0)*x953*x954))+((x939*x951))+(((-1.0)*sj2*x946)));
evalcond[6]=(((cj0*x942))+(((-0.37429)*x939*x950))+((x941*x959))+(((-1.0)*px))+(((0.01)*r01*x953))+(((-1.0)*x943*x947))+x943+(((-1.0)*x948*x956))+(((-1.0)*sj2*x949)));
evalcond[7]=(((sj2*x943))+((sj0*x942))+(((-1.0)*x947*x949))+((x941*x953))+(((-1.0)*py))+(((-1.0)*x950*x956))+(((-0.01)*x960))+x949+(((0.37429)*x939*x948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x961=(cj1*sj0);
IkReal x962=((1.0)*r00);
IkReal x963=(cj4*cj5);
IkReal x964=((1.0)*r01);
IkReal x965=(cj0*sj2*sj5);
IkReal x966=(cj2*sj0*sj1*sj5);
CheckValue<IkReal> x967 = IKatan2WithCheck(IkReal(((((-1.0)*x962*x965))+((r00*x966))+(((-1.0)*x961*x962*x963))+((r01*sj4*x961)))),((((-1.0)*x964*x965))+(((-1.0)*sj4*x961*x962))+((r01*x966))+(((-1.0)*x961*x963*x964))),IKFAST_ATAN2_MAGTHRESH);
if(!x967.valid){
continue;
}
CheckValue<IkReal> x968=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x968.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x967.value)+(((1.5707963267949)*(x968.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x969=IKsin(j6);
IkReal x970=IKcos(j6);
IkReal x971=((0.01)*r00);
IkReal x972=((0.36442)*cj1);
IkReal x973=((0.069)*cj0);
IkReal x974=((1.0)*cj0);
IkReal x975=(cj0*sj2);
IkReal x976=((1.0)*sj0);
IkReal x977=(cj2*sj1);
IkReal x978=(r01*sj5);
IkReal x979=((0.069)*sj0);
IkReal x980=(r00*sj5);
IkReal x981=(r01*sj4);
IkReal x982=((1.0)*cj4);
IkReal x983=(cj5*x970);
IkReal x984=(r01*x982);
IkReal x985=((1.0)*r00*sj4);
IkReal x986=((0.37429)*x970);
IkReal x987=((1.0)*x970);
IkReal x988=(r00*x969);
IkReal x989=(cj5*x969);
IkReal x990=(r01*x989);
evalcond[0]=(((x969*x978))+(((-1.0)*cj1*x976))+(((-1.0)*x980*x987)));
evalcond[1]=((((-1.0)*cj1*x974))+(((-1.0)*x978*x987))+(((-1.0)*x969*x980)));
evalcond[2]=((((-1.0)*r00*x982*x983))+((cj4*x990))+((sj4*x988))+(((-1.0)*x976*x977))+x975+((x970*x981)));
evalcond[3]=(((x981*x989))+((cj0*cj2))+(((-1.0)*x982*x988))+(((-1.0)*x970*x984))+((sj0*sj1*sj2))+(((-1.0)*x983*x985)));
evalcond[4]=((((-1.0)*x969*x984))+(((-1.0)*cj2*x976))+((sj1*x975))+((cj4*r00*x970))+(((-1.0)*x985*x989))+(((-1.0)*x981*x983)));
evalcond[5]=((((-1.0)*x974*x977))+(((-1.0)*x970*x985))+(((-1.0)*cj5*x982*x988))+(((-1.0)*sj2*x976))+(((-1.0)*x983*x984))+((x969*x981)));
evalcond[6]=((((0.01)*r01*x983))+(((-1.0)*x978*x986))+(((-1.0)*px))+((x971*x989))+(((-1.0)*sj2*x979))+x973+((cj0*x972))+(((-0.37429)*x969*x980))+(((-1.0)*x973*x977)));
evalcond[7]=((((-0.01)*x990))+((sj0*x972))+(((0.37429)*x969*x978))+(((-1.0)*py))+((x971*x983))+(((-1.0)*x980*x986))+(((-1.0)*x977*x979))+((sj2*x973))+x979);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x991=(cj1*r01);
IkReal x992=((1.0)*cj1*r00);
CheckValue<IkReal> x993=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x993.valid){
continue;
}
CheckValue<IkReal> x994 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x992))+((sj0*x991)))),((((-1.0)*cj0*x991))+(((-1.0)*sj0*x992))),IKFAST_ATAN2_MAGTHRESH);
if(!x994.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x993.value)))+(x994.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x995=IKsin(j6);
IkReal x996=IKcos(j6);
IkReal x997=((0.01)*r00);
IkReal x998=((0.36442)*cj1);
IkReal x999=((0.069)*cj0);
IkReal x1000=((1.0)*cj0);
IkReal x1001=(cj0*sj2);
IkReal x1002=((1.0)*sj0);
IkReal x1003=(cj2*sj1);
IkReal x1004=(r01*sj5);
IkReal x1005=((0.069)*sj0);
IkReal x1006=(r00*sj5);
IkReal x1007=(r01*sj4);
IkReal x1008=((1.0)*cj4);
IkReal x1009=(cj5*x996);
IkReal x1010=(r01*x1008);
IkReal x1011=((1.0)*r00*sj4);
IkReal x1012=((0.37429)*x996);
IkReal x1013=((1.0)*x996);
IkReal x1014=(r00*x995);
IkReal x1015=(cj5*x995);
IkReal x1016=(r01*x1015);
evalcond[0]=((((-1.0)*x1006*x1013))+(((-1.0)*cj1*x1002))+((x1004*x995)));
evalcond[1]=((((-1.0)*x1004*x1013))+(((-1.0)*x1006*x995))+(((-1.0)*cj1*x1000)));
evalcond[2]=(x1001+((sj4*x1014))+((x1007*x996))+((cj4*x1016))+(((-1.0)*x1002*x1003))+(((-1.0)*r00*x1008*x1009)));
evalcond[3]=((((-1.0)*x1009*x1011))+((cj0*cj2))+(((-1.0)*x1008*x1014))+(((-1.0)*x1010*x996))+((sj0*sj1*sj2))+((x1007*x1015)));
evalcond[4]=((((-1.0)*x1011*x1015))+(((-1.0)*x1007*x1009))+((sj1*x1001))+((cj4*r00*x996))+(((-1.0)*x1010*x995))+(((-1.0)*cj2*x1002)));
evalcond[5]=((((-1.0)*x1009*x1010))+((x1007*x995))+(((-1.0)*cj5*x1008*x1014))+(((-1.0)*x1011*x996))+(((-1.0)*sj2*x1002))+(((-1.0)*x1000*x1003)));
evalcond[6]=((((-1.0)*x1003*x999))+(((-1.0)*x1004*x1012))+(((-0.37429)*x1006*x995))+(((-1.0)*px))+((x1015*x997))+(((0.01)*r01*x1009))+(((-1.0)*sj2*x1005))+((cj0*x998))+x999);
evalcond[7]=(x1005+((x1009*x997))+(((-1.0)*x1006*x1012))+(((-0.01)*x1016))+((sj2*x999))+(((0.37429)*x1004*x995))+(((-1.0)*py))+((sj0*x998))+(((-1.0)*x1003*x1005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1017=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((0.37429)*x1017))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
evalcond[2]=(sj1+(((-1.0)*x1017)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1018=(py*r01);
IkReal x1019=(px*r00);
IkReal x1020=(pz*r00);
IkReal x1021=((-1.0)*r01);
IkReal x1022=(((px*r01))+((py*r00)));
IkReal x1023=(pz*x1021);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1021;
r11=r00;
npx=(x1019+(((-1.0)*x1018)));
npy=x1022;
npz=(pz*r22);
rxp0_0=x1023;
rxp0_1=((-1.0)*x1020);
rxp0_2=x1022;
rxp1_0=x1020;
rxp1_1=x1023;
rxp1_2=(x1018+(((-1.0)*x1019)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1024=(r22*sj5);
j4eval[0]=x1024;
j4eval[1]=((IKabs((cj1*sj2)))+(IKabs((cj1*cj2))));
j4eval[2]=IKsign(x1024);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1025 = IKatan2WithCheck(IkReal((cj1*sj2)),(cj1*cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x1025.valid){
continue;
}
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1025.value)+(((1.5707963267949)*(x1026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1027=(r22*sj5);
evalcond[0]=(((cj1*sj2))+(((-1.0)*x1027*(IKsin(j4)))));
evalcond[1]=((((-1.0)*cj1*cj2))+((x1027*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
IkReal x1028=(py*r01);
IkReal x1029=(px*r00);
IkReal x1030=(pz*r00);
IkReal x1031=((-1.0)*r01);
IkReal x1032=(((px*r01))+((py*r00)));
IkReal x1033=(pz*x1031);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1031;
r11=r00;
npx=(x1029+(((-1.0)*x1028)));
npy=x1032;
npz=(pz*r22);
rxp0_0=x1033;
rxp0_1=((-1.0)*x1030);
rxp0_2=x1032;
rxp1_0=x1030;
rxp1_1=x1033;
rxp1_2=(x1028+(((-1.0)*x1029)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1034=r01*r01;
IkReal x1035=r00*r00;
IkReal x1036=((0.552)*sj2);
IkReal x1037=((1.104)*sj2);
IkReal x1038=((12.0)*px);
IkReal x1039=((4.0)*px);
IkReal x1040=((0.276)*cj2*sj1);
IkReal x1041=((0.03948)*cj1*cj4*sj5);
IkReal x1042=(cj4*sj5*x1034);
IkReal x1043=(cj4*sj5*x1035);
IkReal x1044=((0.04)*cj1*cj4*cj5);
IkReal x1045=((0.276)*x1043);
IkReal x1046=((0.276)*x1042);
IkReal x1047=(x1034*x1044);
IkReal x1048=(x1035*x1044);
IkReal x1049=(x1038*x1043);
IkReal x1050=(x1038*x1042);
IkReal x1051=(x1035*x1041);
IkReal x1052=(x1034*x1041);
IkReal x1053=(x1040*x1043);
IkReal x1054=(x1040*x1042);
IkReal x1055=(x1050+x1049);
IkReal x1056=(x1047+x1046+x1045+x1048);
IkReal x1057=(x1051+x1052+x1053+x1054);
j0eval[0]=((((0.5)*(IKabs((((x1037*x1042))+((x1037*x1043)))))))+(IKabs((((x1036*x1042))+((x1036*x1043)))))+(((0.5)*(IKabs(((((-1.0)*x1057))+x1056+((x1039*x1043))+((x1039*x1042)))))))+(((0.5)*(IKabs(((((-1.0)*x1056))+x1055+x1057)))))+(((0.5)*(IKabs(((((-1.0)*x1057))+x1055+x1056))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j0evalpoly[1];
IkReal x1058=r00*r00;
IkReal x1059=r01*r01;
IkReal x1060=(cj4*sj5);
IkReal x1061=((0.03948)*cj1);
IkReal x1062=(cj2*sj1);
IkReal x1063=((0.276)*x1059);
IkReal x1064=(sj2*x1059);
IkReal x1065=(sj2*x1058);
IkReal x1066=(px*x1058);
IkReal x1067=(px*x1059);
IkReal x1068=((0.276)*x1058);
IkReal x1069=((0.04)*cj1*cj4*cj5);
IkReal x1070=(x1060*x1068);
IkReal x1071=(x1060*x1063);
IkReal x1072=(x1059*x1069);
IkReal x1073=(x1058*x1069);
IkReal x1074=((12.0)*x1060*x1066);
IkReal x1075=((12.0)*x1060*x1067);
IkReal x1076=(x1058*x1060*x1061);
IkReal x1077=(x1059*x1060*x1061);
IkReal x1078=((4.0)*x1060*x1066);
IkReal x1079=((4.0)*x1060*x1067);
IkReal x1080=(x1062*x1070);
IkReal x1081=(x1062*x1071);
IkReal x1082=((((0.552)*x1060*x1065))+(((0.552)*x1060*x1064)));
IkReal x1083=(x1078+x1079);
IkReal x1084=(x1074+x1075);
IkReal x1085=(x1072+x1073+x1070+x1071);
IkReal x1086=(x1076+x1077+x1081+x1080);
op[0]=(x1085+x1083+(((-1.0)*x1086)));
op[1]=x1082;
op[2]=(x1085+x1084+(((-1.0)*x1086)));
op[3]=((((1.104)*x1060*x1065))+(((1.104)*x1060*x1064)));
op[4]=(x1086+x1084+(((-1.0)*x1085)));
op[5]=x1082;
op[6]=(x1086+x1083+(((-1.0)*x1085)));
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

IkReal x1087=r00*r00;
IkReal x1088=r01*r01;
IkReal x1089=(sj2*sj5);
IkReal x1090=((0.276)*sj5);
IkReal x1091=(sj4*x1088);
IkReal x1092=((0.04)*cj1*cj5);
IkReal x1093=((12.0)*px*sj5);
IkReal x1094=(sj4*x1087);
IkReal x1095=((0.03948)*cj1*sj5);
IkReal x1096=((4.0)*px*sj5);
IkReal x1097=(cj2*sj1*x1090);
IkReal x1098=(x1090*x1091);
IkReal x1099=(x1090*x1094);
IkReal x1100=(x1094*x1096);
IkReal x1101=(x1091*x1092);
IkReal x1102=(x1092*x1094);
IkReal x1103=(x1091*x1095);
IkReal x1104=(x1094*x1095);
IkReal x1105=(x1093*x1094);
IkReal x1106=(x1091*x1093);
IkReal x1107=(x1091*x1096);
IkReal x1108=(x1094*x1097);
IkReal x1109=(x1091*x1097);
IkReal x1110=((((0.552)*x1089*x1091))+(((0.552)*x1089*x1094)));
IkReal x1111=(x1107+x1100);
IkReal x1112=(x1106+x1105);
IkReal x1113=(x1102+x1101+x1098+x1099);
IkReal x1114=(x1104+x1103+x1108+x1109);
j0evalpoly[0]=((((htj0*htj0*htj0)*(((((1.104)*x1089*x1091))+(((1.104)*x1089*x1094))))))+x1111+x1114+(((htj0*htj0)*((x1112+x1114+(((-1.0)*x1113))))))+(((htj0*htj0*htj0*htj0)*((x1113+x1112+(((-1.0)*x1114))))))+((htj0*x1110))+((x1110*(htj0*htj0*htj0*htj0*htj0)))+(((-1.0)*x1113))+(((htj0*htj0*htj0*htj0*htj0*htj0)*((x1111+x1113+(((-1.0)*x1114)))))));
if( IKabs(j0evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[4];
IkReal x1115=(py*r01);
IkReal x1116=(px*r00);
IkReal x1117=(pz*r00);
IkReal x1118=((-1.0)*r01);
IkReal x1119=(((px*r01))+((py*r00)));
IkReal x1120=(pz*x1118);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1118;
r11=r00;
npx=(x1116+(((-1.0)*x1115)));
npy=x1119;
npz=(pz*r22);
rxp0_0=x1120;
rxp0_1=((-1.0)*x1117);
rxp0_2=x1119;
rxp1_0=x1117;
rxp1_1=x1120;
rxp1_2=(x1115+(((-1.0)*x1116)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j6eval[0]=sj5;
j6eval[1]=cj1;
j6eval[2]=((cj0*cj0)+(sj0*sj0));
j6eval[3]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1121=(py*r01);
IkReal x1122=(px*r00);
IkReal x1123=(pz*r00);
IkReal x1124=((-1.0)*r01);
IkReal x1125=(((px*r01))+((py*r00)));
IkReal x1126=(pz*x1124);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1124;
r11=r00;
npx=(x1122+(((-1.0)*x1121)));
npy=x1125;
npz=(pz*r22);
rxp0_0=x1126;
rxp0_1=((-1.0)*x1123);
rxp0_2=x1125;
rxp1_0=x1123;
rxp1_1=x1126;
rxp1_2=(x1121+(((-1.0)*x1122)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1127=(sj4*sj5);
IkReal x1128=(cj4*cj5);
IkReal x1129=(cj0*r01);
IkReal x1130=(cj0*cj1*r00);
IkReal x1131=(sj0*sj2*sj5);
IkReal x1132=(cj2*sj1*sj5);
j6eval[0]=x1127;
j6eval[1]=((IKabs(((((-1.0)*x1128*x1130))+((r00*x1131))+((cj0*r00*x1132))+((cj1*sj4*x1129)))))+(IKabs(((((-1.0)*x1129*x1132))+((cj1*x1128*x1129))+((sj4*x1130))+(((-1.0)*r01*x1131))))));
j6eval[2]=IKsign(x1127);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1133=(py*r01);
IkReal x1134=(px*r00);
IkReal x1135=(pz*r00);
IkReal x1136=((-1.0)*r01);
IkReal x1137=(((px*r01))+((py*r00)));
IkReal x1138=(pz*x1136);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1136;
r11=r00;
npx=(x1134+(((-1.0)*x1133)));
npy=x1137;
npz=(pz*r22);
rxp0_0=x1138;
rxp0_1=((-1.0)*x1135);
rxp0_2=x1137;
rxp1_0=x1135;
rxp1_1=x1138;
rxp1_2=(x1133+(((-1.0)*x1134)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1139=(cj4*sj5);
IkReal x1140=(r01*sj5);
IkReal x1141=(cj2*sj0);
IkReal x1142=(cj5*sj4);
IkReal x1143=(r00*sj5);
IkReal x1144=(cj0*cj1*r00);
IkReal x1145=(cj0*cj1*r01);
IkReal x1146=(cj0*sj1*sj2);
j6eval[0]=x1139;
j6eval[1]=((IKabs((((x1141*x1143))+((x1142*x1144))+((cj4*x1145))+(((-1.0)*x1143*x1146)))))+(IKabs((((x1140*x1146))+(((-1.0)*x1142*x1145))+((cj4*x1144))+(((-1.0)*x1140*x1141))))));
j6eval[2]=IKsign(x1139);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1147=(r01*sj5);
IkReal x1148=(cj2*sj0);
IkReal x1149=(cj5*sj4);
IkReal x1150=(r00*sj5);
IkReal x1151=(cj0*cj1*r00);
IkReal x1152=(cj0*sj1*sj2);
IkReal x1153=(cj0*cj1*r01);
CheckValue<IkReal> x1154 = IKatan2WithCheck(IkReal(((((-1.0)*x1147*x1148))+(((-1.0)*x1149*x1153))+((x1147*x1152))+((cj4*x1151)))),(((x1149*x1151))+((cj4*x1153))+((x1148*x1150))+(((-1.0)*x1150*x1152))),IKFAST_ATAN2_MAGTHRESH);
if(!x1154.valid){
continue;
}
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(IKsign((cj4*sj5)),-1);
if(!x1155.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1154.value)+(((1.5707963267949)*(x1155.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1156=IKcos(j6);
IkReal x1157=IKsin(j6);
IkReal x1158=(cj5*r00);
IkReal x1159=(cj4*r01);
IkReal x1160=(cj1*sj0);
IkReal x1161=((0.069)*cj0);
IkReal x1162=((1.0)*sj4);
IkReal x1163=((1.0)*cj0);
IkReal x1164=(cj0*sj2);
IkReal x1165=(cj2*sj1);
IkReal x1166=((1.0)*sj0);
IkReal x1167=(cj5*r01);
IkReal x1168=((0.069)*sj0);
IkReal x1169=(r01*sj5);
IkReal x1170=((0.01)*x1156);
IkReal x1171=((1.0)*x1156);
IkReal x1172=(r00*x1157);
IkReal x1173=(cj4*x1156);
IkReal x1174=((0.01)*x1157);
IkReal x1175=((1.0)*x1157);
IkReal x1176=(r00*sj5*x1156);
evalcond[0]=(((x1156*x1169))+(((-1.0)*cj1*x1163))+((sj5*x1172)));
evalcond[1]=(x1176+(((-1.0)*x1169*x1175))+(((-1.0)*x1160)));
evalcond[2]=((((-1.0)*x1159*x1171))+(((-1.0)*x1156*x1158*x1162))+((sj4*x1157*x1167))+((cj0*cj2))+(((-1.0)*cj4*x1172))+((sj0*sj1*sj2)));
evalcond[3]=(((r00*sj4*x1156))+(((-1.0)*sj2*x1166))+(((-1.0)*x1163*x1165))+(((-1.0)*r01*x1157*x1162))+((cj4*x1157*x1158))+((cj5*x1156*x1159)));
evalcond[4]=((((-1.0)*x1156*x1162*x1167))+((sj1*x1164))+(((-1.0)*x1159*x1175))+((r00*x1173))+(((-1.0)*cj2*x1166))+(((-1.0)*x1157*x1158*x1162)));
evalcond[5]=(x1164+(((-1.0)*x1162*x1172))+(((-1.0)*cj5*x1159*x1175))+((x1158*x1173))+(((-1.0)*x1165*x1166))+(((-1.0)*r01*x1156*x1162)));
evalcond[6]=(x1161+(((-1.0)*sj2*x1168))+(((0.36442)*cj0*cj1))+(((-1.0)*px))+((x1167*x1170))+(((-0.37429)*x1156*x1169))+((x1158*x1174))+(((-1.0)*x1161*x1165))+(((-0.37429)*sj5*x1172)));
evalcond[7]=(((sj2*x1161))+x1168+(((0.36442)*x1160))+(((-1.0)*py))+(((0.37429)*x1157*x1169))+(((-1.0)*x1167*x1174))+((x1158*x1170))+(((-1.0)*x1165*x1168))+(((-0.37429)*x1176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1177=((1.0)*r01);
IkReal x1178=(sj0*sj2*sj5);
IkReal x1179=(cj0*cj1*sj4);
IkReal x1180=(cj0*cj1*cj4*cj5);
IkReal x1181=(cj0*cj2*sj1*sj5);
CheckValue<IkReal> x1182 = IKatan2WithCheck(IkReal((((r00*x1179))+((r01*x1180))+(((-1.0)*x1177*x1178))+(((-1.0)*x1177*x1181)))),(((r00*x1181))+((r01*x1179))+((r00*x1178))+(((-1.0)*r00*x1180))),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
CheckValue<IkReal> x1183=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x1183.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1182.value)+(((1.5707963267949)*(x1183.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1184=IKcos(j6);
IkReal x1185=IKsin(j6);
IkReal x1186=(cj5*r00);
IkReal x1187=(cj4*r01);
IkReal x1188=(cj1*sj0);
IkReal x1189=((0.069)*cj0);
IkReal x1190=((1.0)*sj4);
IkReal x1191=((1.0)*cj0);
IkReal x1192=(cj0*sj2);
IkReal x1193=(cj2*sj1);
IkReal x1194=((1.0)*sj0);
IkReal x1195=(cj5*r01);
IkReal x1196=((0.069)*sj0);
IkReal x1197=(r01*sj5);
IkReal x1198=((0.01)*x1184);
IkReal x1199=((1.0)*x1184);
IkReal x1200=(r00*x1185);
IkReal x1201=(cj4*x1184);
IkReal x1202=((0.01)*x1185);
IkReal x1203=((1.0)*x1185);
IkReal x1204=(r00*sj5*x1184);
evalcond[0]=(((x1184*x1197))+(((-1.0)*cj1*x1191))+((sj5*x1200)));
evalcond[1]=(x1204+(((-1.0)*x1188))+(((-1.0)*x1197*x1203)));
evalcond[2]=(((sj4*x1185*x1195))+(((-1.0)*x1184*x1186*x1190))+((cj0*cj2))+(((-1.0)*cj4*x1200))+(((-1.0)*x1187*x1199))+((sj0*sj1*sj2)));
evalcond[3]=((((-1.0)*sj2*x1194))+(((-1.0)*x1191*x1193))+((cj4*x1185*x1186))+((cj5*x1184*x1187))+((r00*sj4*x1184))+(((-1.0)*r01*x1185*x1190)));
evalcond[4]=((((-1.0)*x1184*x1190*x1195))+((sj1*x1192))+(((-1.0)*cj2*x1194))+(((-1.0)*x1187*x1203))+((r00*x1201))+(((-1.0)*x1185*x1186*x1190)));
evalcond[5]=(x1192+(((-1.0)*x1190*x1200))+(((-1.0)*x1193*x1194))+((x1186*x1201))+(((-1.0)*cj5*x1187*x1203))+(((-1.0)*r01*x1184*x1190)));
evalcond[6]=((((-1.0)*sj2*x1196))+(((-0.37429)*x1184*x1197))+x1189+(((-1.0)*x1189*x1193))+((x1186*x1202))+((x1195*x1198))+(((-0.37429)*sj5*x1200))+(((0.36442)*cj0*cj1))+(((-1.0)*px)));
evalcond[7]=(x1196+(((-1.0)*x1193*x1196))+((x1186*x1198))+(((0.37429)*x1185*x1197))+(((-1.0)*py))+((sj2*x1189))+(((-0.37429)*x1204))+(((0.36442)*x1188))+(((-1.0)*x1195*x1202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1205=(cj1*r00);
IkReal x1206=(cj1*r01);
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x1207.valid){
continue;
}
CheckValue<IkReal> x1208 = IKatan2WithCheck(IkReal((((cj0*x1205))+(((-1.0)*sj0*x1206)))),(((cj0*x1206))+((sj0*x1205))),IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1207.value)))+(x1208.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1209=IKcos(j6);
IkReal x1210=IKsin(j6);
IkReal x1211=(cj5*r00);
IkReal x1212=(cj4*r01);
IkReal x1213=(cj1*sj0);
IkReal x1214=((0.069)*cj0);
IkReal x1215=((1.0)*sj4);
IkReal x1216=((1.0)*cj0);
IkReal x1217=(cj0*sj2);
IkReal x1218=(cj2*sj1);
IkReal x1219=((1.0)*sj0);
IkReal x1220=(cj5*r01);
IkReal x1221=((0.069)*sj0);
IkReal x1222=(r01*sj5);
IkReal x1223=((0.01)*x1209);
IkReal x1224=((1.0)*x1209);
IkReal x1225=(r00*x1210);
IkReal x1226=(cj4*x1209);
IkReal x1227=((0.01)*x1210);
IkReal x1228=((1.0)*x1210);
IkReal x1229=(r00*sj5*x1209);
evalcond[0]=(((sj5*x1225))+(((-1.0)*cj1*x1216))+((x1209*x1222)));
evalcond[1]=(x1229+(((-1.0)*x1222*x1228))+(((-1.0)*x1213)));
evalcond[2]=((((-1.0)*x1212*x1224))+((cj0*cj2))+((sj0*sj1*sj2))+(((-1.0)*cj4*x1225))+((sj4*x1210*x1220))+(((-1.0)*x1209*x1211*x1215)));
evalcond[3]=((((-1.0)*r01*x1210*x1215))+(((-1.0)*x1216*x1218))+((r00*sj4*x1209))+((cj4*x1210*x1211))+((cj5*x1209*x1212))+(((-1.0)*sj2*x1219)));
evalcond[4]=((((-1.0)*x1212*x1228))+((r00*x1226))+(((-1.0)*cj2*x1219))+(((-1.0)*x1209*x1215*x1220))+((sj1*x1217))+(((-1.0)*x1210*x1211*x1215)));
evalcond[5]=(x1217+((x1211*x1226))+(((-1.0)*x1218*x1219))+(((-1.0)*r01*x1209*x1215))+(((-1.0)*x1215*x1225))+(((-1.0)*cj5*x1212*x1228)));
evalcond[6]=((((-0.37429)*sj5*x1225))+x1214+((x1211*x1227))+(((-0.37429)*x1209*x1222))+(((-1.0)*x1214*x1218))+(((0.36442)*cj0*cj1))+(((-1.0)*px))+((x1220*x1223))+(((-1.0)*sj2*x1221)));
evalcond[7]=(x1221+((x1211*x1223))+(((0.37429)*x1210*x1222))+(((-1.0)*x1218*x1221))+(((0.36442)*x1213))+(((-0.37429)*x1229))+(((-1.0)*x1220*x1227))+(((-1.0)*py))+((sj2*x1214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1233=IKPowWithIntegerCheck(r22,-1);
if(!x1233.valid){
continue;
}
IkReal x1230=x1233.value;
CheckValue<IkReal> x1234=IKPowWithIntegerCheck(sj5,-1);
if(!x1234.valid){
continue;
}
IkReal x1231=x1234.value;
IkReal x1232=(x1230*x1231);
CheckValue<IkReal> x1235=IKPowWithIntegerCheck(cj3,-1);
if(!x1235.valid){
continue;
}
if( IKabs((cj1*sj2*x1232)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1232*(x1235.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x1232))+IKsqr((x1232*(x1235.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x1232), (x1232*(x1235.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1236=IKcos(j4);
IkReal x1237=(cj3*r22);
IkReal x1238=((1.0)*sj5);
IkReal x1239=(r22*sj3);
evalcond[0]=((((-1.0)*r22*x1238*(IKsin(j4))))+((cj1*sj2)));
evalcond[1]=(sj1+(((-1.0)*x1236*x1238*x1239))+((cj5*x1237)));
evalcond[2]=((((-1.0)*cj1*cj2))+(((-1.0)*x1236*x1237*x1238))+(((-1.0)*cj5*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1240=(sj1*sj2);
IkReal x1241=(cj4*r01);
IkReal x1242=((1.0)*cj2);
IkReal x1243=(cj4*r00);
IkReal x1244=((1.0)*r00);
IkReal x1245=(cj5*sj4);
IkReal x1246=((2.0)*r00);
IkReal x1247=((1.0)*x1241);
IkReal x1248=(r00*x1245);
IkReal x1249=(r01*x1245);
IkReal x1250=((1.0)*x1243);
IkReal x1251=((1.0)*x1240);
IkReal x1252=(x1244*x1245);
IkReal x1253=((1.0)*x1249);
IkReal x1254=(x1241+x1248);
IkReal x1255=((((2.0)*x1249))+(((-2.0)*x1243)));
IkReal x1256=(x1254+cj2);
IkReal x1257=(x1254+(((-1.0)*x1242)));
IkReal x1258=((((-1.0)*x1252))+cj2+(((-1.0)*x1247)));
IkReal x1259=((((-1.0)*x1253))+x1240+x1243);
IkReal x1260=((((-1.0)*x1245*x1246))+(((-2.0)*x1241)));
IkReal x1261=((((-1.0)*x1250))+x1240+x1249);
IkReal x1262=(x1247+x1252);
IkReal x1263=((((-1.0)*x1253))+(((-1.0)*x1251))+x1243);
IkReal x1264=((((-1.0)*x1250))+(((-1.0)*x1251))+x1249);
IkReal x1265=((((-1.0)*x1242))+(((-1.0)*x1262)));
IkReal gconst0=x1258;
IkReal gconst1=x1255;
IkReal gconst2=x1256;
IkReal gconst3=x1259;
IkReal gconst4=x1260;
IkReal gconst5=x1261;
IkReal gconst6=x1258;
IkReal gconst7=x1255;
IkReal gconst8=x1256;
IkReal gconst9=x1259;
IkReal gconst10=x1260;
IkReal gconst11=x1261;
IkReal gconst12=x1265;
IkReal gconst13=x1255;
IkReal gconst14=x1257;
IkReal gconst15=x1263;
IkReal gconst16=x1260;
IkReal gconst17=x1264;
IkReal gconst18=x1265;
IkReal gconst19=x1255;
IkReal gconst20=x1257;
IkReal gconst21=x1263;
IkReal gconst22=x1260;
IkReal gconst23=x1264;
IkReal x1266=sj1*sj1;
IkReal x1267=sj2*sj2;
IkReal x1268=cj2*cj2;
IkReal x1269=((1.0)*gconst21);
IkReal x1270=(gconst15*gconst20);
IkReal x1271=(gconst13*gconst19);
IkReal x1272=((2.0)*gconst21);
IkReal x1273=(gconst23*gconst6);
IkReal x1274=(gconst2*gconst3);
IkReal x1275=(gconst2*gconst9);
IkReal x1276=(gconst19*gconst4);
IkReal x1277=(gconst11*gconst6);
IkReal x1278=(sj1*sj2);
IkReal x1279=((4.0)*cj2);
IkReal x1280=(gconst4*gconst7);
IkReal x1281=(gconst15*gconst18);
IkReal x1282=((2.0)*cj2);
IkReal x1283=(gconst12*gconst20);
IkReal x1284=(gconst17*gconst21);
IkReal x1285=(gconst0*gconst20);
IkReal x1286=(gconst14*gconst20);
IkReal x1287=((1.0)*gconst8);
IkReal x1288=(gconst5*gconst6);
IkReal x1289=(gconst3*gconst9);
IkReal x1290=((1.0)*gconst9);
IkReal x1291=(gconst1*gconst17);
IkReal x1292=((2.0)*gconst5);
IkReal x1293=(gconst0*gconst11);
IkReal x1294=(gconst21*gconst5);
IkReal x1295=(gconst16*gconst22);
IkReal x1296=(gconst5*gconst8);
IkReal x1297=(gconst2*gconst6);
IkReal x1298=(gconst14*gconst18);
IkReal x1299=(gconst13*gconst22);
IkReal x1300=(gconst1*gconst5);
IkReal x1301=(gconst16*gconst7);
IkReal x1302=(gconst5*gconst9);
IkReal x1303=(gconst1*gconst10);
IkReal x1304=(gconst14*gconst15);
IkReal x1305=((2.0)*gconst23);
IkReal x1306=((2.0)*gconst9);
IkReal x1307=(gconst1*gconst7);
IkReal x1308=(gconst0*gconst8);
IkReal x1309=(gconst12*gconst23);
IkReal x1310=(gconst10*gconst6);
IkReal x1311=(gconst0*gconst9);
IkReal x1312=(gconst17*gconst18);
IkReal x1313=((2.0)*gconst4);
IkReal x1314=(gconst13*gconst7);
IkReal x1315=(gconst11*gconst18);
IkReal x1316=((1.0)*gconst0);
IkReal x1317=((1.0)*gconst10);
IkReal x1318=(gconst10*gconst13);
IkReal x1319=(gconst16*gconst19);
IkReal x1320=((1.0)*gconst12);
IkReal x1321=(gconst18*gconst5);
IkReal x1322=(gconst12*gconst17);
IkReal x1323=(gconst14*gconst21);
IkReal x1324=(gconst17*gconst20);
IkReal x1325=((1.0)*gconst14);
IkReal x1326=(gconst18*gconst2);
IkReal x1327=(gconst14*gconst23);
IkReal x1328=(gconst5*x1316);
IkReal x1329=(gconst9*x1308);
IkReal x1330=(gconst17*x1299);
IkReal x1331=((4.0)*x1268);
IkReal x1332=(gconst21*x1319);
IkReal x1333=((1.0)*gconst22*gconst4);
IkReal x1334=(gconst14*x1319);
IkReal x1335=((4.0)*x1266*x1267);
op[0]=((((-1.0)*gconst14*x1269*x1270))+((x1319*x1323))+(((-1.0)*gconst17*x1269*x1271))+((x1283*x1284))+((x1281*x1327))+(((-1.0)*x1309*x1312))+((x1299*x1312))+(((-1.0)*x1295*x1298)));
op[1]=(((x1278*x1281*x1305))+(((-1.0)*cj2*x1272*x1283))+((gconst17*x1271*x1282))+((gconst14*x1270*x1282))+(((-1.0)*x1272*x1278*x1304))+((cj2*x1272*x1286))+((gconst18*x1282*x1309))+((cj2*x1271*x1272))+((x1272*x1278*x1322))+((x1272*x1278*x1324))+((x1272*x1278*x1319))+(((-2.0)*gconst14*x1278*x1295))+(((-1.0)*x1282*x1334))+(((-2.0)*gconst18*x1278*x1295))+(((-1.0)*gconst17*x1282*x1283))+(((-1.0)*gconst14*x1281*x1282))+(((-1.0)*gconst18*x1282*x1299))+(((-1.0)*x1278*x1305*x1312))+(((-1.0)*x1270*x1272*x1278))+((x1278*x1304*x1305))+(((-1.0)*x1278*x1305*x1322))+((gconst12*x1282*x1312))+(((-1.0)*gconst23*x1282*x1298))+(((2.0)*x1278*x1330)));
op[2]=((((-1.0)*gconst5*x1269*x1271))+((gconst18*gconst22*x1291))+(((-1.0)*gconst12*gconst18*x1331))+((x1298*x1331))+((gconst6*x1330))+(((-1.0)*gconst16*x1298*x1317))+((gconst17*gconst9*x1283))+(((-1.0)*gconst14*x1270*x1290))+((gconst11*gconst14*x1281))+(((-1.0)*gconst17*x1269*x1314))+((x1270*x1278*x1279))+(((-1.0)*gconst15*gconst21*x1335))+(((-1.0)*gconst17*x1273*x1320))+(((-1.0)*gconst12*gconst21*x1278*x1279))+(((-1.0)*x1295*x1326))+(((-1.0)*x1298*x1333))+((x1284*x1285))+(((-1.0)*gconst8*x1269*x1304))+((gconst2*x1332))+((x1278*x1279*x1312))+((x1276*x1323))+(((-1.0)*gconst2*x1269*x1270))+((x1278*x1279*x1323))+((x1283*x1331))+(((-1.0)*x1278*x1279*x1299))+(((-1.0)*gconst3*x1269*x1286))+(((-1.0)*gconst17*x1271*x1290))+((x1278*x1279*x1309))+((gconst12*gconst8*x1284))+(((-1.0)*gconst17*gconst23*x1335))+(((-1.0)*x1309*x1321))+((gconst2*gconst23*x1281))+((x1301*x1323))+(((-1.0)*x1278*x1279*x1324))+(((-1.0)*x1278*x1279*x1327))+(((-1.0)*gconst11*x1312*x1320))+(((-1.0)*x1278*x1279*x1281))+((x1284*x1335))+((x1273*x1304))+(((-1.0)*x1278*x1279*x1319))+(((-1.0)*gconst23*x1312*x1316))+(((-1.0)*gconst6*x1295*x1325))+((x1299*x1321))+(((-1.0)*gconst19*x1269*x1291))+(((-1.0)*x1286*x1331))+((x1283*x1294))+((gconst15*gconst23*x1335))+((gconst9*x1334))+((x1312*x1318))+(((-1.0)*x1295*x1335))+(((-1.0)*x1271*x1331))+((gconst23*gconst3*x1298)));
op[3]=((((2.0)*cj2*gconst1*gconst17*gconst19))+(((2.0)*cj2*gconst14*gconst21*gconst8))+(((-2.0)*gconst12*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst16*gconst2*gconst22*sj1*sj2))+(((2.0)*gconst17*gconst21*gconst8*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst19*gconst2))+(((2.0)*cj2*gconst12*gconst18*gconst5))+(((2.0)*gconst1*gconst17*gconst22*sj1*sj2))+(((-2.0)*gconst15*gconst20*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst20*gconst9))+(((2.0)*cj2*gconst14*gconst20*gconst3))+(((2.0)*cj2*gconst1*gconst19*gconst21))+(((-2.0)*gconst18*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst17*gconst20))+(((-2.0)*cj2*gconst15*gconst18*gconst2))+(((-2.0)*cj2*gconst13*gconst22*gconst6))+(((2.0)*gconst10*gconst13*gconst17*sj1*sj2))+(((-2.0)*gconst14*gconst22*gconst4*sj1*sj2))+(((-2.0)*gconst18*gconst23*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst23*gconst6*sj1*sj2))+(((-2.0)*gconst14*gconst21*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst21*gconst8))+(((-2.0)*cj2*gconst12*gconst17*gconst8))+(((-2.0)*gconst10*gconst14*gconst16*sj1*sj2))+(((-2.0)*gconst15*gconst2*gconst21*sj1*sj2))+(((-2.0)*gconst11*gconst12*gconst17*sj1*sj2))+(((-2.0)*gconst11*gconst17*gconst18*sj1*sj2))+(((-2.0)*gconst14*gconst15*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst18*sj1*sj2))+(((2.0)*cj2*gconst12*gconst17*gconst6))+(((2.0)*gconst13*gconst22*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst23))+(((2.0)*gconst0*gconst17*gconst21*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst20*gconst9))+(((-2.0)*cj2*gconst12*gconst20*gconst5))+(((-2.0)*cj2*gconst10*gconst13*gconst18))+(((2.0)*gconst12*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst13*gconst17*gconst7))+(((2.0)*cj2*gconst15*gconst2*gconst20))+(((2.0)*gconst11*gconst14*gconst15*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst16*gconst7))+(((2.0)*cj2*gconst12*gconst23*gconst6))+(((-2.0)*gconst17*gconst23*gconst6*sj1*sj2))+(((2.0)*gconst18*gconst23*gconst3*sj1*sj2))+(((-2.0)*gconst15*gconst21*gconst8*sj1*sj2))+(((2.0)*cj2*gconst13*gconst19*gconst5))+(((2.0)*cj2*gconst13*gconst19*gconst9))+(((-2.0)*gconst0*gconst17*gconst23*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst23*gconst6))+(((-2.0)*cj2*gconst11*gconst14*gconst18))+(((-2.0)*cj2*gconst1*gconst18*gconst22))+(((2.0)*cj2*gconst11*gconst12*gconst18))+(((2.0)*gconst19*gconst21*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst19*gconst4))+(((2.0)*cj2*gconst14*gconst15*gconst8))+(((-2.0)*cj2*gconst14*gconst18*gconst3))+(((2.0)*gconst16*gconst21*gconst7*sj1*sj2))+(((2.0)*gconst16*gconst19*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst18))+(((-2.0)*cj2*gconst18*gconst2*gconst23))+(((-2.0)*gconst20*gconst21*gconst3*sj1*sj2))+(((2.0)*gconst17*gconst20*gconst9*sj1*sj2))+(((2.0)*gconst14*gconst23*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst15*gconst6))+(((2.0)*cj2*gconst2*gconst20*gconst21))+(((2.0)*gconst20*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst2*gconst23*sj1*sj2))+(((2.0)*cj2*gconst13*gconst21*gconst7))+(((2.0)*gconst12*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst18*sj1*sj2))+(((-2.0)*gconst16*gconst22*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst21)));
op[4]=((((4.0)*gconst21*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+((gconst14*gconst21*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-4.0)*gconst11*gconst17*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst12*gconst6*(cj2*cj2)))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((4.0)*gconst18*gconst2*(cj2*cj2)))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+((gconst14*gconst23*gconst3*gconst6))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+(((4.0)*cj2*gconst17*gconst6*sj1*sj2))+((gconst1*gconst10*gconst17*gconst18))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((-4.0)*cj2*gconst10*gconst13*sj1*sj2))+(((-4.0)*cj2*gconst2*gconst23*sj1*sj2))+((gconst13*gconst22*gconst5*gconst6))+((gconst12*gconst20*gconst5*gconst9))+(((-4.0)*cj2*gconst12*gconst9*sj1*sj2))+(((4.0)*cj2*gconst11*gconst12*sj1*sj2))+(((4.0)*gconst11*gconst15*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+((gconst0*gconst20*gconst21*gconst5))+(((-4.0)*cj2*gconst17*gconst8*sj1*sj2))+((gconst15*gconst2*gconst23*gconst6))+((gconst1*gconst18*gconst22*gconst5))+(((-4.0)*gconst15*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*cj2*gconst1*gconst22*sj1*sj2))+(((4.0)*cj2*gconst14*gconst9*sj1*sj2))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+((gconst14*gconst16*gconst7*gconst9))+(((-4.0)*gconst21*gconst3*(sj1*sj1)*(sj2*sj2)))+((gconst19*gconst2*gconst21*gconst4))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-4.0)*gconst23*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst22*gconst4*(sj1*sj1)*(sj2*sj2)))+(((4.0)*gconst0*gconst20*(cj2*cj2)))+(((-4.0)*cj2*gconst11*gconst14*sj1*sj2))+((gconst12*gconst21*gconst5*gconst8))+((gconst11*gconst15*gconst18*gconst2))+((gconst1*gconst17*gconst22*gconst6))+((gconst10*gconst13*gconst17*gconst6))+(((-4.0)*cj2*gconst18*gconst3*sj1*sj2))+(((-4.0)*gconst10*gconst16*(sj1*sj1)*(sj2*sj2)))+((gconst16*gconst19*gconst2*gconst9))+((gconst18*gconst2*gconst23*gconst3))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+(((-4.0)*gconst1*gconst19*(cj2*cj2)))+((gconst16*gconst2*gconst21*gconst7))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-4.0)*gconst13*gconst7*(cj2*cj2)))+(((4.0)*cj2*gconst15*gconst8*sj1*sj2))+(((-4.0)*cj2*gconst19*gconst4*sj1*sj2))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+(((-4.0)*cj2*gconst20*gconst5*sj1*sj2))+((gconst10*gconst13*gconst18*gconst5))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+(((-4.0)*cj2*gconst16*gconst7*sj1*sj2))+(((-4.0)*cj2*gconst15*gconst6*sj1*sj2))+(((4.0)*cj2*gconst0*gconst23*sj1*sj2))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((4.0)*gconst17*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-4.0)*gconst0*gconst18*(cj2*cj2)))+(((-4.0)*gconst14*gconst8*(cj2*cj2)))+(((4.0)*cj2*gconst18*gconst5*sj1*sj2))+((gconst11*gconst14*gconst15*gconst6))+((gconst12*gconst17*gconst8*gconst9))+(((-4.0)*gconst2*gconst20*(cj2*cj2)))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+((gconst14*gconst19*gconst4*gconst9))+((gconst11*gconst14*gconst18*gconst3))+(((4.0)*gconst14*gconst6*(cj2*cj2)))+((gconst0*gconst17*gconst20*gconst9))+(((4.0)*gconst12*gconst8*(cj2*cj2)))+(((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((4.0)*gconst23*gconst3*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-4.0)*cj2*gconst0*gconst21*sj1*sj2))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+(((4.0)*cj2*gconst2*gconst21*sj1*sj2))+((gconst0*gconst17*gconst21*gconst8))+(((4.0)*cj2*gconst20*gconst3*sj1*sj2)));
op[5]=((((2.0)*gconst23*gconst3*gconst6*sj1*sj2))+(((-2.0)*gconst11*gconst18*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst3*gconst8))+(((-2.0)*gconst0*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst22*gconst4*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst19*gconst2*gconst4))+(((-2.0)*cj2*gconst12*gconst5*gconst8))+(((2.0)*gconst1*gconst22*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst21*gconst5*sj1*sj2))+(((-2.0)*gconst14*gconst3*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst14*gconst6))+(((-2.0)*cj2*gconst14*gconst4*gconst7))+(((-2.0)*cj2*gconst1*gconst22*gconst6))+(((-2.0)*cj2*gconst14*gconst3*gconst6))+(((2.0)*gconst17*gconst8*gconst9*sj1*sj2))+(((2.0)*gconst21*gconst4*gconst7*sj1*sj2))+(((-2.0)*gconst0*gconst11*gconst17*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst8*gconst9))+(((-2.0)*gconst15*gconst2*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst1*gconst10*gconst18))+(((-2.0)*cj2*gconst0*gconst17*gconst8))+(((2.0)*gconst2*gconst23*gconst3*sj1*sj2))+(((2.0)*gconst21*gconst5*gconst8*sj1*sj2))+(((-2.0)*gconst23*gconst5*gconst6*sj1*sj2))+(((2.0)*gconst10*gconst13*gconst5*sj1*sj2))+(((2.0)*gconst1*gconst10*gconst17*sj1*sj2))+(((-2.0)*gconst20*gconst3*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst11*gconst18))+(((-2.0)*gconst11*gconst17*gconst6*sj1*sj2))+(((2.0)*cj2*gconst1*gconst17*gconst7))+(((2.0)*gconst11*gconst14*gconst3*sj1*sj2))+(((2.0)*cj2*gconst2*gconst20*gconst3))+(((2.0)*cj2*gconst2*gconst20*gconst9))+(((2.0)*cj2*gconst1*gconst19*gconst5))+(((2.0)*cj2*gconst1*gconst19*gconst9))+(((-2.0)*gconst21*gconst3*gconst8*sj1*sj2))+(((2.0)*gconst16*gconst7*gconst9*sj1*sj2))+(((-2.0)*gconst2*gconst21*gconst3*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst6))+(((2.0)*cj2*gconst13*gconst5*gconst7))+(((2.0)*cj2*gconst1*gconst21*gconst7))+(((2.0)*cj2*gconst14*gconst8*gconst9))+(((2.0)*cj2*gconst0*gconst23*gconst6))+(((2.0)*cj2*gconst2*gconst21*gconst8))+(((2.0)*cj2*gconst13*gconst7*gconst9))+(((-2.0)*gconst2*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst21*gconst8))+(((2.0)*cj2*gconst11*gconst12*gconst6))+(((2.0)*gconst12*gconst5*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst5))+(((-2.0)*cj2*gconst0*gconst20*gconst9))+(((-2.0)*cj2*gconst15*gconst2*gconst6))+(((-2.0)*cj2*gconst2*gconst23*gconst6))+(((2.0)*gconst19*gconst4*gconst9*sj1*sj2))+(((-2.0)*gconst15*gconst8*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst18*gconst2))+(((2.0)*gconst20*gconst5*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst14*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst2*gconst7))+(((-2.0)*gconst10*gconst18*gconst4*sj1*sj2))+(((2.0)*gconst11*gconst18*gconst3*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst10*gconst13*gconst6))+(((-2.0)*gconst11*gconst12*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst5))+(((2.0)*cj2*gconst15*gconst2*gconst8))+(((2.0)*cj2*gconst12*gconst5*gconst6))+(((-2.0)*cj2*gconst18*gconst2*gconst3)));
op[6]=((((-1.0)*gconst10*gconst4*x1335))+((x1278*x1279*x1293))+(((-1.0)*x1273*x1328))+((gconst1*gconst22*x1288))+((x1297*x1331))+((x1274*x1315))+((gconst2*gconst21*x1280))+((x1275*x1276))+(((-1.0)*gconst19*x1290*x1300))+(((-1.0)*x1297*x1333))+(((-1.0)*gconst20*x1274*x1290))+(((-1.0)*gconst16*x1297*x1317))+((x1308*x1331))+((x1291*x1310))+((x1285*x1302))+((gconst14*gconst3*x1277))+((gconst15*gconst2*x1277))+((x1273*x1274))+(((-1.0)*x1289*x1335))+((gconst3*gconst8*x1278*x1279))+(((-1.0)*gconst7*x1290*x1291))+(((-1.0)*gconst0*gconst6*x1331))+((x1294*x1308))+((x1278*x1279*x1288))+(((-1.0)*x1278*x1279*x1296))+(((-1.0)*gconst5*x1277*x1320))+(((-1.0)*gconst14*x1287*x1289))+(((-1.0)*x1293*x1321))+((gconst17*x1329))+(((-1.0)*gconst11*gconst2*x1278*x1279))+((x1275*x1301))+(((-1.0)*gconst4*x1317*x1326))+(((-1.0)*gconst5*x1290*x1314))+(((-1.0)*gconst11*gconst5*x1335))+((gconst14*gconst9*x1280))+(((-1.0)*x1278*x1279*x1303))+(((-1.0)*x1307*x1331))+((gconst11*gconst3*x1335))+(((-1.0)*gconst2*gconst8*x1331))+(((-1.0)*gconst8*x1269*x1274))+(((-1.0)*x1278*x1279*x1280))+(((-1.0)*gconst4*x1310*x1325))+(((-1.0)*gconst17*x1277*x1316))+(((-1.0)*x1278*x1279*x1311))+((x1302*x1335))+(((-1.0)*gconst3*gconst6*x1278*x1279))+((gconst12*gconst9*x1296))+(((-1.0)*gconst7*x1269*x1300))+(((-1.0)*gconst15*x1275*x1287))+((x1275*x1278*x1279))+((gconst10*gconst18*x1300))+((x1288*x1318)));
op[7]=((((-1.0)*gconst2*x1277*x1282))+(((-1.0)*x1274*x1278*x1306))+((gconst7*x1282*x1300))+((gconst0*x1282*x1288))+((gconst8*x1274*x1282))+((gconst0*x1277*x1282))+(((-1.0)*gconst6*x1274*x1282))+(((2.0)*gconst3*x1277*x1278))+((x1278*x1292*x1303))+(((-1.0)*x1282*x1329))+((x1278*x1292*x1311))+((gconst9*x1282*x1307))+((gconst8*x1275*x1282))+(((2.0)*gconst11*x1274*x1278))+(((-1.0)*x1278*x1310*x1313))+(((-1.0)*x1277*x1278*x1292))+(((-2.0)*gconst8*x1278*x1289))+(((-1.0)*gconst0*x1282*x1296))+(((-1.0)*gconst6*x1282*x1303))+(((-1.0)*gconst10*gconst2*x1278*x1313))+(((-1.0)*gconst2*x1280*x1282))+((gconst8*gconst9*x1278*x1292))+(((-1.0)*x1278*x1292*x1293))+((x1278*x1280*x1306)));
op[8]=(((x1288*x1303))+(((-1.0)*x1277*x1328))+((x1275*x1280))+((x1274*x1277))+((x1296*x1311))+(((-1.0)*gconst7*x1290*x1300))+(((-1.0)*gconst4*x1297*x1317))+(((-1.0)*gconst9*x1274*x1287)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[2];
IkReal x1336=(py*r01);
IkReal x1337=(px*r00);
IkReal x1338=(pz*r00);
IkReal x1339=((-1.0)*r01);
IkReal x1340=(((px*r01))+((py*r00)));
IkReal x1341=(pz*x1339);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1339;
r11=r00;
npx=(x1337+(((-1.0)*x1336)));
npy=x1340;
npz=(pz*r22);
rxp0_0=x1341;
rxp0_1=((-1.0)*x1338);
rxp0_2=x1340;
rxp1_0=x1338;
rxp1_1=x1341;
rxp1_2=(x1336+(((-1.0)*x1337)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1342=cj4*cj4;
IkReal x1343=cj5*cj5;
IkReal x1344=(x1342+x1343+(((-1.0)*x1342*x1343)));
j6eval[0]=x1344;
j6eval[1]=IKsign(x1344);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1345=(py*r01);
IkReal x1346=(px*r00);
IkReal x1347=(pz*r00);
IkReal x1348=((-1.0)*r01);
IkReal x1349=(((px*r01))+((py*r00)));
IkReal x1350=(pz*x1348);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1348;
r11=r00;
npx=(x1346+(((-1.0)*x1345)));
npy=x1349;
npz=(pz*r22);
rxp0_0=x1350;
rxp0_1=((-1.0)*x1347);
rxp0_2=x1349;
rxp1_0=x1347;
rxp1_1=x1350;
rxp1_2=(x1345+(((-1.0)*x1346)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1351=((((-1.0)*cj5*sj3))+(((-1.0)*cj3*cj4*sj5)));
j6eval[0]=x1351;
j6eval[1]=IKsign(x1351);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1352=(py*r01);
IkReal x1353=(px*r00);
IkReal x1354=(pz*r00);
IkReal x1355=((-1.0)*r01);
IkReal x1356=(((px*r01))+((py*r00)));
IkReal x1357=(pz*x1355);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1355;
r11=r00;
npx=(x1353+(((-1.0)*x1352)));
npy=x1356;
npz=(pz*r22);
rxp0_0=x1357;
rxp0_1=((-1.0)*x1354);
rxp0_2=x1356;
rxp1_0=x1354;
rxp1_1=x1357;
rxp1_2=(x1352+(((-1.0)*x1353)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1358=((1.0)*sj4);
IkReal x1359=(cj4*sj3);
IkReal x1360=(((sj4*x1359))+(((-1.0)*x1358*x1359*(cj5*cj5)))+(((-1.0)*cj3*cj5*sj5*x1358)));
j6eval[0]=x1360;
j6eval[1]=IKsign(x1360);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1361=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.37429)*r22))+(((-0.069)*x1361))+(((-1.0)*pz))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((cj3*r22)));
evalcond[4]=((((-1.0)*x1361))+(((-1.0)*r22*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1362=((100.0)*r00);
IkReal x1363=(cj0*r01);
IkReal x1364=((100.0)*r01);
IkReal x1365=(r00*sj0);
IkReal x1366=(cj0*r00);
IkReal x1367=(r01*sj0);
IkReal x1368=((6.9)*cj2*sj1);
if( IKabs((((x1366*x1368))+((px*x1362))+(((6.9)*x1367))+(((-6.9)*x1366))+(((-1.0)*py*x1364))+(((-1.0)*x1367*x1368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1363*x1368))+((x1365*x1368))+((px*x1364))+(((-6.9)*x1363))+(((-6.9)*x1365))+((py*x1362)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1366*x1368))+((px*x1362))+(((6.9)*x1367))+(((-6.9)*x1366))+(((-1.0)*py*x1364))+(((-1.0)*x1367*x1368))))+IKsqr((((x1363*x1368))+((x1365*x1368))+((px*x1364))+(((-6.9)*x1363))+(((-6.9)*x1365))+((py*x1362))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((x1366*x1368))+((px*x1362))+(((6.9)*x1367))+(((-6.9)*x1366))+(((-1.0)*py*x1364))+(((-1.0)*x1367*x1368))), (((x1363*x1368))+((x1365*x1368))+((px*x1364))+(((-6.9)*x1363))+(((-6.9)*x1365))+((py*x1362))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1369=IKcos(j6);
IkReal x1370=IKsin(j6);
IkReal x1371=(r00*sj3);
IkReal x1372=((0.069)*cj0);
IkReal x1373=((0.01)*r01);
IkReal x1374=((1.0)*r00);
IkReal x1375=(cj2*sj1);
IkReal x1376=(r01*sj3);
IkReal x1377=((0.069)*sj0);
IkReal x1378=(cj3*r01);
IkReal x1379=(cj3*r00);
IkReal x1380=((1.0)*sj0);
IkReal x1381=((1.0)*r01);
IkReal x1382=(sj4*x1370);
IkReal x1383=(cj4*x1370);
IkReal x1384=(sj4*x1369);
IkReal x1385=(r00*x1369);
IkReal x1386=((1.0)*cj4*x1369);
evalcond[0]=(x1372+(((-1.0)*x1372*x1375))+(((-1.0)*px))+((x1369*x1373))+(((0.01)*r00*x1370)));
evalcond[1]=(x1377+(((-1.0)*x1370*x1373))+(((-1.0)*x1375*x1377))+(((-1.0)*py))+(((0.01)*x1385)));
evalcond[2]=(((x1371*x1382))+((x1376*x1384))+((x1376*x1383))+(((-1.0)*x1371*x1386)));
evalcond[3]=(((cj0*cj2))+(((-1.0)*x1374*x1384))+(((-1.0)*x1374*x1383))+(((-1.0)*cj4*x1369*x1381))+((r01*x1382)));
evalcond[4]=((((-1.0)*x1374*x1382))+((cj4*x1385))+(((-1.0)*x1381*x1383))+(((-1.0)*x1381*x1384))+(((-1.0)*cj2*x1380)));
evalcond[5]=((((-1.0)*x1376*x1386))+(((-1.0)*x1371*x1383))+(((-1.0)*x1371*x1384))+((x1376*x1382)));
evalcond[6]=((((-1.0)*x1375*x1380))+(((-1.0)*cj3*cj4*x1369*x1374))+((x1379*x1382))+((x1378*x1384))+((x1378*x1383)));
evalcond[7]=((((-1.0)*cj0*x1375))+(((-1.0)*cj3*x1374*x1383))+(((-1.0)*cj3*x1374*x1384))+(((-1.0)*x1378*x1386))+((x1378*x1382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1387=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((-0.069)*x1387))+(((-1.0)*pz))+(((-0.37429)*r22))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*cj3*r22))+sj1);
evalcond[4]=(((r22*sj3))+(((-1.0)*x1387)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1388=((100.0)*r00);
IkReal x1389=(cj0*r01);
IkReal x1390=((100.0)*r01);
IkReal x1391=(r00*sj0);
IkReal x1392=(cj0*r00);
IkReal x1393=(r01*sj0);
IkReal x1394=((6.9)*cj2*sj1);
if( IKabs(((((-1.0)*x1392*x1394))+(((-6.9)*x1393))+((x1393*x1394))+((py*x1390))+(((-1.0)*px*x1388))+(((6.9)*x1392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1389*x1394))+(((-1.0)*x1391*x1394))+(((-1.0)*px*x1390))+(((6.9)*x1389))+(((-1.0)*py*x1388))+(((6.9)*x1391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1392*x1394))+(((-6.9)*x1393))+((x1393*x1394))+((py*x1390))+(((-1.0)*px*x1388))+(((6.9)*x1392))))+IKsqr(((((-1.0)*x1389*x1394))+(((-1.0)*x1391*x1394))+(((-1.0)*px*x1390))+(((6.9)*x1389))+(((-1.0)*py*x1388))+(((6.9)*x1391))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x1392*x1394))+(((-6.9)*x1393))+((x1393*x1394))+((py*x1390))+(((-1.0)*px*x1388))+(((6.9)*x1392))), ((((-1.0)*x1389*x1394))+(((-1.0)*x1391*x1394))+(((-1.0)*px*x1390))+(((6.9)*x1389))+(((-1.0)*py*x1388))+(((6.9)*x1391))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1395=IKsin(j6);
IkReal x1396=IKcos(j6);
IkReal x1397=((1.0)*r01);
IkReal x1398=((0.069)*cj0);
IkReal x1399=(r00*sj3);
IkReal x1400=(cj3*r00);
IkReal x1401=(r01*sj3);
IkReal x1402=(cj2*sj1);
IkReal x1403=((1.0)*sj0);
IkReal x1404=((0.069)*sj0);
IkReal x1405=(cj3*r01);
IkReal x1406=(cj4*x1396);
IkReal x1407=(sj4*x1395);
IkReal x1408=(r01*x1396);
IkReal x1409=(sj4*x1396);
IkReal x1410=(cj4*x1395);
IkReal x1411=((0.01)*x1395);
evalcond[0]=(x1398+(((-1.0)*x1398*x1402))+(((-1.0)*px))+(((-1.0)*r00*x1411))+(((-0.01)*x1408)));
evalcond[1]=((((-1.0)*py))+((r01*x1411))+(((-1.0)*x1402*x1404))+x1404+(((-0.01)*r00*x1396)));
evalcond[2]=((((-1.0)*cj2*x1403))+((r00*x1407))+((r00*x1406))+((sj4*x1408))+(((-1.0)*x1397*x1410)));
evalcond[3]=(((x1399*x1410))+((x1401*x1407))+((x1401*x1406))+(((-1.0)*x1399*x1409)));
evalcond[4]=((((-1.0)*sj3*x1397*x1410))+((x1399*x1407))+((x1399*x1406))+((x1401*x1409)));
evalcond[5]=(((cj0*cj2))+((r00*x1409))+(((-1.0)*r00*x1410))+(((-1.0)*x1397*x1407))+(((-1.0)*x1397*x1406)));
evalcond[6]=((((-1.0)*cj3*x1397*x1410))+((x1405*x1409))+(((-1.0)*x1402*x1403))+((x1400*x1407))+((x1400*x1406)));
evalcond[7]=(((x1400*x1410))+(((-1.0)*x1400*x1409))+(((-1.0)*cj0*x1402))+((x1405*x1406))+((x1405*x1407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1412=(cj5*r22);
IkReal x1413=((1.0)*sj3);
IkReal x1414=(r22*sj5);
IkReal x1415=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.01)*x1414))+(((-1.0)*pz))+(((-0.069)*x1415))+(((0.37429)*x1412))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*x1413*x1414))+((cj3*x1412)));
evalcond[4]=((((-1.0)*x1412*x1413))+(((-1.0)*cj3*x1414))+(((-1.0)*x1415)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1416=(cj2*r01);
IkReal x1417=(cj2*r00);
if( IKabs(((((-1.0)*sj0*x1416))+((cj0*x1417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x1416))+((sj0*x1417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x1416))+((cj0*x1417))))+IKsqr((((cj0*x1416))+((sj0*x1417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj0*x1416))+((cj0*x1417))), (((cj0*x1416))+((sj0*x1417))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1418=IKcos(j6);
IkReal x1419=IKsin(j6);
IkReal x1420=((0.01)*cj5);
IkReal x1421=((0.069)*cj0);
IkReal x1422=((1.0)*cj5);
IkReal x1423=(cj3*sj5);
IkReal x1424=((0.37429)*sj5);
IkReal x1425=((0.069)*sj0);
IkReal x1426=(cj2*sj1);
IkReal x1427=(sj3*sj5);
IkReal x1428=(r00*x1418);
IkReal x1429=(r00*x1419);
IkReal x1430=(r01*x1418);
IkReal x1431=(r01*x1419);
IkReal x1432=((1.0)*x1426);
evalcond[0]=((((-1.0)*x1430))+((cj0*cj2))+(((-1.0)*x1429)));
evalcond[1]=((((-1.0)*x1431))+(((-1.0)*cj2*sj0))+x1428);
evalcond[2]=((((-1.0)*sj3*x1422*x1428))+((x1423*x1431))+((cj5*sj3*x1431))+(((-1.0)*x1423*x1428)));
evalcond[3]=((((-1.0)*sj3*x1422*x1429))+(((-1.0)*x1423*x1430))+(((-1.0)*sj3*x1422*x1430))+(((-1.0)*x1423*x1429)));
evalcond[4]=((((-1.0)*sj0*x1432))+(((-1.0)*cj3*x1422*x1428))+((cj3*cj5*x1431))+(((-1.0)*x1427*x1431))+((x1427*x1428)));
evalcond[5]=((((-1.0)*cj3*x1422*x1429))+((x1427*x1430))+(((-1.0)*cj3*x1422*x1430))+(((-1.0)*cj0*x1432))+((x1427*x1429)));
evalcond[6]=((((-1.0)*x1421*x1426))+((x1420*x1429))+(((-1.0)*x1424*x1429))+(((-1.0)*px))+((x1420*x1430))+x1421+(((-1.0)*x1424*x1430)));
evalcond[7]=((((-1.0)*x1420*x1431))+((x1420*x1428))+(((-1.0)*x1424*x1428))+(((-1.0)*x1425*x1426))+((x1424*x1431))+(((-1.0)*py))+x1425);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1433=(r22*sj3);
IkReal x1434=(cj1*cj2);
IkReal x1435=(cj5*r22);
IkReal x1436=(r22*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.37429)*x1435))+(((-1.0)*pz))+(((-0.069)*x1434))+(((0.01)*x1436))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((sj5*x1433))+((cj3*x1435)));
evalcond[4]=((((-1.0)*cj5*x1433))+(((-1.0)*x1434))+((cj3*x1436)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1437=(cj2*sj0);
IkReal x1438=((1.0)*r00);
IkReal x1439=(cj0*cj2);
if( IKabs(((((-1.0)*x1438*x1439))+((r01*x1437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1437*x1438))+(((-1.0)*r01*x1439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1438*x1439))+((r01*x1437))))+IKsqr(((((-1.0)*x1437*x1438))+(((-1.0)*r01*x1439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x1438*x1439))+((r01*x1437))), ((((-1.0)*x1437*x1438))+(((-1.0)*r01*x1439))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1440=IKsin(j6);
IkReal x1441=IKcos(j6);
IkReal x1442=((0.069)*cj0);
IkReal x1443=((1.0)*cj3);
IkReal x1444=(cj0*cj2);
IkReal x1445=(cj5*sj3);
IkReal x1446=((1.0)*sj1);
IkReal x1447=(cj2*sj0);
IkReal x1448=((0.01)*cj5);
IkReal x1449=(sj3*sj5);
IkReal x1450=((0.37429)*sj5);
IkReal x1451=(cj3*cj5);
IkReal x1452=(r01*x1440);
IkReal x1453=(r01*x1441);
IkReal x1454=(r00*x1441);
IkReal x1455=(r00*x1440);
IkReal x1456=(cj5*x1454);
IkReal x1457=(sj5*x1453);
IkReal x1458=(sj5*x1455);
evalcond[0]=(x1455+x1453+x1444);
evalcond[1]=((((-1.0)*x1454))+(((-1.0)*x1447))+x1452);
evalcond[2]=(((x1445*x1455))+((x1445*x1453))+(((-1.0)*x1443*x1458))+(((-1.0)*x1443*x1457)));
evalcond[3]=(((x1445*x1454))+(((-1.0)*sj5*x1443*x1454))+((cj3*sj5*x1452))+(((-1.0)*x1445*x1452)));
evalcond[4]=((((-1.0)*x1444*x1446))+((x1449*x1455))+((x1449*x1453))+((x1451*x1453))+((x1451*x1455)));
evalcond[5]=((((-1.0)*x1446*x1447))+(((-1.0)*cj5*x1443*x1452))+(((-1.0)*x1449*x1452))+((x1449*x1454))+((x1451*x1454)));
evalcond[6]=((((-1.0)*cj2*sj1*x1442))+((x1448*x1453))+((x1448*x1455))+(((-1.0)*px))+x1442+(((-1.0)*x1450*x1453))+(((-1.0)*x1450*x1455)));
evalcond[7]=((((-0.069)*sj1*x1447))+(((-1.0)*x1448*x1452))+((x1450*x1452))+((x1448*x1454))+(((-1.0)*py))+(((0.069)*sj0))+(((-1.0)*x1450*x1454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1459=(cj1*cj2);
IkReal x1460=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22)));
evalcond[2]=((((-1.0)*pz))+(((0.01)*r22))+(((-0.069)*x1459))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1460)));
evalcond[4]=(((cj0*x1460))+(((-1.0)*cj2*sj0)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1459);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1461=((0.184349034171364)*cj0);
IkReal x1462=((2.67172513291833)*r00);
IkReal x1463=(r01*sj2);
IkReal x1464=((0.184349034171364)*sj0);
IkReal x1465=(r00*sj2);
IkReal x1466=((2.67172513291833)*r01);
if( IKabs((((py*x1466))+((r00*x1461))+(((-1.0)*x1464*x1465))+(((-1.0)*r01*x1464))+(((-1.0)*px*x1462))+(((-1.0)*x1461*x1463)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*py*x1462))+((r01*x1461))+((x1461*x1465))+((r00*x1464))+(((-1.0)*x1463*x1464))+(((-1.0)*px*x1466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x1466))+((r00*x1461))+(((-1.0)*x1464*x1465))+(((-1.0)*r01*x1464))+(((-1.0)*px*x1462))+(((-1.0)*x1461*x1463))))+IKsqr(((((-1.0)*py*x1462))+((r01*x1461))+((x1461*x1465))+((r00*x1464))+(((-1.0)*x1463*x1464))+(((-1.0)*px*x1466))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((py*x1466))+((r00*x1461))+(((-1.0)*x1464*x1465))+(((-1.0)*r01*x1464))+(((-1.0)*px*x1462))+(((-1.0)*x1461*x1463))), ((((-1.0)*py*x1462))+((r01*x1461))+((x1461*x1465))+((r00*x1464))+(((-1.0)*x1463*x1464))+(((-1.0)*px*x1466))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1467=IKsin(j6);
IkReal x1468=IKcos(j6);
IkReal x1469=((1.0)*r01);
IkReal x1470=((0.069)*sj2);
IkReal x1471=((0.37429)*r01);
IkReal x1472=((1.0)*r00);
IkReal x1473=((0.37429)*r00);
IkReal x1474=(cj3*x1468);
IkReal x1475=(sj3*x1467);
IkReal x1476=(sj3*x1468);
IkReal x1477=(cj3*r00*x1467);
IkReal x1478=(x1472*x1474);
IkReal x1479=(((cj3*r01*x1467))+((r01*x1476))+((r00*x1475)));
evalcond[0]=((((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*x1468*x1471))+(((-1.0)*x1467*x1473))+(((-1.0)*sj0*x1470)));
evalcond[1]=(((x1467*x1471))+(((-1.0)*py))+(((-1.0)*x1468*x1473))+(((0.069)*sj0))+((cj0*x1470)));
evalcond[2]=(x1479+(((-1.0)*x1478)));
evalcond[3]=((((-1.0)*x1469*x1474))+((r01*x1475))+(((-1.0)*cj3*x1467*x1472))+(((-1.0)*x1472*x1476)));
evalcond[4]=((((-1.0)*x1469*x1475))+x1477+((r01*x1474))+((r00*x1476))+((cj0*sj2)));
evalcond[5]=(x1479+(((-1.0)*sj0*sj2))+(((-1.0)*x1478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1480=(cj1*cj2);
IkReal x1481=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+r22);
evalcond[2]=((((-1.0)*pz))+(((-0.069)*x1480))+(((0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((sj0*x1481))+((cj0*cj2)));
evalcond[4]=((((-1.0)*cj2*sj0))+((cj0*x1481)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1480);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1482=((0.184349034171364)*cj0);
IkReal x1483=((2.67172513291833)*r00);
IkReal x1484=(r01*sj2);
IkReal x1485=((0.184349034171364)*sj0);
IkReal x1486=(r00*sj2);
IkReal x1487=((2.67172513291833)*r01);
if( IKabs(((((-1.0)*x1482*x1484))+(((-1.0)*r01*x1485))+((r00*x1482))+((py*x1487))+(((-1.0)*x1485*x1486))+(((-1.0)*px*x1483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1482*x1486))+((r01*x1482))+((r00*x1485))+(((-1.0)*x1484*x1485))+(((-1.0)*px*x1487))+(((-1.0)*py*x1483)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1482*x1484))+(((-1.0)*r01*x1485))+((r00*x1482))+((py*x1487))+(((-1.0)*x1485*x1486))+(((-1.0)*px*x1483))))+IKsqr((((x1482*x1486))+((r01*x1482))+((r00*x1485))+(((-1.0)*x1484*x1485))+(((-1.0)*px*x1487))+(((-1.0)*py*x1483))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x1482*x1484))+(((-1.0)*r01*x1485))+((r00*x1482))+((py*x1487))+(((-1.0)*x1485*x1486))+(((-1.0)*px*x1483))), (((x1482*x1486))+((r01*x1482))+((r00*x1485))+(((-1.0)*x1484*x1485))+(((-1.0)*px*x1487))+(((-1.0)*py*x1483))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1488=IKsin(j6);
IkReal x1489=IKcos(j6);
IkReal x1490=((1.0)*r01);
IkReal x1491=((0.069)*sj2);
IkReal x1492=((1.0)*r00);
IkReal x1493=((0.37429)*r01);
IkReal x1494=(cj3*x1489);
IkReal x1495=(r00*x1489);
IkReal x1496=(sj3*x1488);
IkReal x1497=(sj3*x1489);
IkReal x1498=(cj3*x1488);
IkReal x1499=(sj3*x1495);
IkReal x1500=(((x1492*x1498))+((x1490*x1494))+((x1490*x1496)));
evalcond[0]=((((-0.37429)*r00*x1488))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*sj0*x1491))+(((-1.0)*x1489*x1493)));
evalcond[1]=((((-0.37429)*x1495))+(((-1.0)*py))+(((0.069)*sj0))+((cj0*x1491))+((x1488*x1493)));
evalcond[2]=((((-1.0)*x1500))+x1499);
evalcond[3]=(((r01*x1498))+(((-1.0)*x1492*x1494))+(((-1.0)*x1492*x1496))+(((-1.0)*x1490*x1497)));
evalcond[4]=(((r00*x1496))+((r00*x1494))+((r01*x1497))+(((-1.0)*sj0*sj2))+(((-1.0)*x1490*x1498)));
evalcond[5]=((((-1.0)*x1500))+x1499+((cj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1501=(cj1*cj2);
IkReal x1502=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+r22);
evalcond[2]=((((-0.069)*x1501))+(((-1.0)*pz))+(((-0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1502)));
evalcond[4]=(((cj0*x1502))+(((-1.0)*cj2*sj0)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1501);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1503=((0.184349034171364)*cj0);
IkReal x1504=((2.67172513291833)*r00);
IkReal x1505=(r01*sj2);
IkReal x1506=((0.184349034171364)*sj0);
IkReal x1507=(r00*sj2);
IkReal x1508=((2.67172513291833)*r01);
if( IKabs((((x1506*x1507))+(((-1.0)*r00*x1503))+((r01*x1506))+(((-1.0)*py*x1508))+((x1503*x1505))+((px*x1504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1503))+(((-1.0)*r00*x1506))+((py*x1504))+(((-1.0)*x1503*x1507))+((px*x1508))+((x1505*x1506)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1506*x1507))+(((-1.0)*r00*x1503))+((r01*x1506))+(((-1.0)*py*x1508))+((x1503*x1505))+((px*x1504))))+IKsqr(((((-1.0)*r01*x1503))+(((-1.0)*r00*x1506))+((py*x1504))+(((-1.0)*x1503*x1507))+((px*x1508))+((x1505*x1506))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((x1506*x1507))+(((-1.0)*r00*x1503))+((r01*x1506))+(((-1.0)*py*x1508))+((x1503*x1505))+((px*x1504))), ((((-1.0)*r01*x1503))+(((-1.0)*r00*x1506))+((py*x1504))+(((-1.0)*x1503*x1507))+((px*x1508))+((x1505*x1506))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1509=IKcos(j6);
IkReal x1510=IKsin(j6);
IkReal x1511=((0.069)*cj0);
IkReal x1512=((0.069)*sj0);
IkReal x1513=(cj3*r00);
IkReal x1514=(r01*sj3);
IkReal x1515=(cj3*r01);
IkReal x1516=((0.37429)*r00);
IkReal x1517=((0.37429)*r01);
IkReal x1518=((1.0)*x1509);
IkReal x1519=(x1509*x1515);
IkReal x1520=(x1510*x1514);
IkReal x1521=(x1510*x1513);
IkReal x1522=(r00*sj3*x1510);
IkReal x1523=(r00*sj3*x1518);
IkReal x1524=(x1520+x1521+x1519);
evalcond[0]=(((x1509*x1517))+((x1510*x1516))+(((-1.0)*px))+x1511+(((-1.0)*sj2*x1512)));
evalcond[1]=(((x1509*x1516))+((sj2*x1511))+(((-1.0)*x1510*x1517))+(((-1.0)*py))+x1512);
evalcond[2]=((((-1.0)*x1523))+x1524);
evalcond[3]=(((x1509*x1513))+((x1509*x1514))+x1522+(((-1.0)*x1510*x1515)));
evalcond[4]=((((-1.0)*x1523))+x1524+((cj0*sj2)));
evalcond[5]=(((x1510*x1515))+(((-1.0)*x1513*x1518))+(((-1.0)*x1514*x1518))+(((-1.0)*sj0*sj2))+(((-1.0)*x1522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1525=(cj1*cj2);
IkReal x1526=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22)));
evalcond[2]=((((-0.069)*x1525))+(((-1.0)*pz))+(((-0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((sj0*x1526))+((cj0*cj2)));
evalcond[4]=(((cj0*x1526))+(((-1.0)*cj2*sj0)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1525);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1527=((0.184349034171364)*cj0);
IkReal x1528=((2.67172513291833)*r00);
IkReal x1529=(r01*sj2);
IkReal x1530=((0.184349034171364)*sj0);
IkReal x1531=(r00*sj2);
IkReal x1532=((2.67172513291833)*r01);
if( IKabs(((((-1.0)*r00*x1527))+((r01*x1530))+((x1530*x1531))+((px*x1528))+((x1527*x1529))+(((-1.0)*py*x1532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1530))+(((-1.0)*r01*x1527))+((x1529*x1530))+((px*x1532))+(((-1.0)*x1527*x1531))+((py*x1528)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1527))+((r01*x1530))+((x1530*x1531))+((px*x1528))+((x1527*x1529))+(((-1.0)*py*x1532))))+IKsqr(((((-1.0)*r00*x1530))+(((-1.0)*r01*x1527))+((x1529*x1530))+((px*x1532))+(((-1.0)*x1527*x1531))+((py*x1528))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*r00*x1527))+((r01*x1530))+((x1530*x1531))+((px*x1528))+((x1527*x1529))+(((-1.0)*py*x1532))), ((((-1.0)*r00*x1530))+(((-1.0)*r01*x1527))+((x1529*x1530))+((px*x1532))+(((-1.0)*x1527*x1531))+((py*x1528))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1533=IKcos(j6);
IkReal x1534=IKsin(j6);
IkReal x1535=((0.069)*cj0);
IkReal x1536=((0.069)*sj0);
IkReal x1537=(cj3*x1533);
IkReal x1538=(r00*x1533);
IkReal x1539=(r01*x1534);
IkReal x1540=(r00*x1537);
IkReal x1541=((1.0)*sj3*x1534);
IkReal x1542=((1.0)*r01*x1533);
IkReal x1543=(cj3*r00*x1534);
IkReal x1544=(r00*x1541);
IkReal x1545=(sj3*x1542);
IkReal x1546=((1.0)*cj3*x1539);
IkReal x1547=(x1546+x1544+x1545);
evalcond[0]=((((-1.0)*sj2*x1536))+(((0.37429)*r01*x1533))+(((0.37429)*r00*x1534))+(((-1.0)*px))+x1535);
evalcond[1]=(((sj2*x1535))+(((-0.37429)*x1539))+(((0.37429)*x1538))+(((-1.0)*py))+x1536);
evalcond[2]=(((sj3*x1538))+((r01*x1537))+(((-1.0)*sj3*x1539))+x1543);
evalcond[3]=(x1540+(((-1.0)*x1547)));
evalcond[4]=((((-1.0)*x1543))+((sj3*x1539))+(((-1.0)*sj3*x1538))+(((-1.0)*r01*x1537))+((cj0*sj2)));
evalcond[5]=(x1540+(((-1.0)*sj0*sj2))+(((-1.0)*x1547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1548=((1.0)*r01);
IkReal x1549=(cj4*r00);
IkReal x1550=(cj1*sj0);
IkReal x1551=(cj4*r01);
IkReal x1552=(sj3*sj4);
IkReal x1553=(cj3*sj5);
IkReal x1554=((1.0)*cj5);
IkReal x1555=(r00*sj4);
IkReal x1556=((1.0)*r00);
IkReal x1557=(cj2*sj0);
IkReal x1558=(sj3*x1557);
IkReal x1559=(cj0*sj1*sj2);
CheckValue<IkReal> x1560 = IKatan2WithCheck(IkReal(((((-1.0)*x1553*x1556*x1559))+((cj5*x1549*x1558))+(((-1.0)*cj5*sj4*x1548*x1550))+((r00*x1553*x1557))+((x1549*x1550))+(((-1.0)*x1548*x1552*x1557))+(((-1.0)*sj3*x1549*x1554*x1559))+((r01*x1552*x1559)))),((((-1.0)*x1552*x1556*x1559))+((x1550*x1551))+((r00*x1552*x1557))+(((-1.0)*cj4*cj5*sj3*x1548*x1559))+(((-1.0)*x1548*x1553*x1559))+((cj5*x1550*x1555))+((r01*x1553*x1557))+((cj5*x1551*x1558))),IKFAST_ATAN2_MAGTHRESH);
if(!x1560.valid){
continue;
}
CheckValue<IkReal> x1561=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*cj5*x1552*x1554))+(((-1.0)*sj4*x1553*x1554))+((cj4*x1552)))),-1);
if(!x1561.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1560.value)+(((1.5707963267949)*(x1561.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1562=IKcos(j6);
IkReal x1563=IKsin(j6);
IkReal x1564=((1.0)*cj4);
IkReal x1565=((0.36442)*cj1);
IkReal x1566=((0.069)*cj0);
IkReal x1567=(r00*sj4);
IkReal x1568=(sj3*sj5);
IkReal x1569=((1.0)*cj0);
IkReal x1570=(cj0*sj2);
IkReal x1571=((1.0)*sj4);
IkReal x1572=((1.0)*cj3);
IkReal x1573=(r01*sj4);
IkReal x1574=(cj2*sj1);
IkReal x1575=((0.37429)*sj5);
IkReal x1576=((0.069)*sj0);
IkReal x1577=(r01*sj5);
IkReal x1578=((1.0)*sj0);
IkReal x1579=(r01*x1562);
IkReal x1580=(sj3*x1563);
IkReal x1581=(cj4*cj5*r01);
IkReal x1582=(cj5*x1563);
IkReal x1583=(cj3*x1563);
IkReal x1584=(r00*x1563);
IkReal x1585=(r00*x1562);
IkReal x1586=(r01*x1563);
IkReal x1587=(cj5*x1585);
evalcond[0]=((((-1.0)*cj5*x1562*x1567))+((cj0*cj2))+((x1573*x1582))+(((-1.0)*x1564*x1584))+(((-1.0)*x1564*x1579))+((sj0*sj1*sj2)));
evalcond[1]=(((cj4*x1585))+(((-1.0)*cj5*x1571*x1579))+(((-1.0)*x1564*x1586))+(((-1.0)*x1567*x1582))+((sj1*x1570))+(((-1.0)*cj2*x1578)));
evalcond[2]=((((-1.0)*sj2*x1576))+(((-1.0)*x1575*x1579))+(((-1.0)*x1566*x1574))+(((0.01)*r00*x1582))+(((-1.0)*px))+x1566+((cj0*x1565))+(((0.01)*cj5*x1579))+(((-1.0)*x1575*x1584)));
evalcond[3]=((((0.01)*x1587))+((x1575*x1586))+(((-1.0)*py))+((sj0*x1565))+x1576+(((-1.0)*x1574*x1576))+(((-0.01)*r01*x1582))+((sj2*x1566))+(((-1.0)*x1575*x1585)));
evalcond[4]=(((x1567*x1580))+(((-1.0)*sj5*x1572*x1585))+(((-1.0)*cj1*x1578))+((sj3*x1562*x1573))+((x1580*x1581))+((x1577*x1583))+(((-1.0)*sj3*x1564*x1587)));
evalcond[5]=((((-1.0)*sj5*x1572*x1584))+(((-1.0)*cj5*sj3*x1564*x1579))+((x1573*x1580))+(((-1.0)*cj1*x1569))+(((-1.0)*x1562*x1572*x1577))+(((-1.0)*sj3*x1562*x1567))+(((-1.0)*cj5*r00*x1564*x1580)));
evalcond[6]=(((x1567*x1583))+(((-1.0)*x1568*x1586))+((x1568*x1585))+x1570+(((-1.0)*x1574*x1578))+((cj3*x1562*x1573))+(((-1.0)*cj3*x1564*x1587))+((x1581*x1583)));
evalcond[7]=((((-1.0)*sj2*x1578))+(((-1.0)*cj3*r00*x1564*x1582))+((x1568*x1584))+((x1573*x1583))+((x1568*x1579))+(((-1.0)*x1569*x1574))+(((-1.0)*x1562*x1567*x1572))+(((-1.0)*cj3*cj5*x1564*x1579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1588=(sj1*sj2);
IkReal x1589=(r01*sj0);
IkReal x1590=(sj3*sj4);
IkReal x1591=(cj0*cj2);
IkReal x1592=((1.0)*cj5*sj3);
IkReal x1593=(cj4*r00*sj0);
IkReal x1594=((1.0)*cj3*sj5);
IkReal x1595=((1.0)*r00*sj0);
IkReal x1596=(cj1*cj5*sj4);
CheckValue<IkReal> x1597 = IKatan2WithCheck(IkReal((((x1588*x1589*x1590))+(((-1.0)*x1595*x1596))+((r01*x1590*x1591))+(((-1.0)*x1588*x1592*x1593))+(((-1.0)*r00*sj0*x1588*x1594))+(((-1.0)*cj1*cj4*x1589))+(((-1.0)*cj4*r00*x1591*x1592))+(((-1.0)*r00*x1591*x1594)))),((((-1.0)*x1589*x1596))+((cj1*x1593))+(((-1.0)*cj4*r01*x1591*x1592))+(((-1.0)*x1588*x1590*x1595))+(((-1.0)*x1588*x1589*x1594))+(((-1.0)*cj4*x1588*x1589*x1592))+(((-1.0)*r01*x1591*x1594))+(((-1.0)*r00*x1590*x1591))),IKFAST_ATAN2_MAGTHRESH);
if(!x1597.valid){
continue;
}
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1592))+(((-1.0)*cj4*x1594)))),-1);
if(!x1598.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1597.value)+(((1.5707963267949)*(x1598.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1599=IKcos(j6);
IkReal x1600=IKsin(j6);
IkReal x1601=((1.0)*cj4);
IkReal x1602=((0.36442)*cj1);
IkReal x1603=((0.069)*cj0);
IkReal x1604=(r00*sj4);
IkReal x1605=(sj3*sj5);
IkReal x1606=((1.0)*cj0);
IkReal x1607=(cj0*sj2);
IkReal x1608=((1.0)*sj4);
IkReal x1609=((1.0)*cj3);
IkReal x1610=(r01*sj4);
IkReal x1611=(cj2*sj1);
IkReal x1612=((0.37429)*sj5);
IkReal x1613=((0.069)*sj0);
IkReal x1614=(r01*sj5);
IkReal x1615=((1.0)*sj0);
IkReal x1616=(r01*x1599);
IkReal x1617=(sj3*x1600);
IkReal x1618=(cj4*cj5*r01);
IkReal x1619=(cj5*x1600);
IkReal x1620=(cj3*x1600);
IkReal x1621=(r00*x1600);
IkReal x1622=(r00*x1599);
IkReal x1623=(r01*x1600);
IkReal x1624=(cj5*x1622);
evalcond[0]=(((cj0*cj2))+(((-1.0)*cj5*x1599*x1604))+(((-1.0)*x1601*x1621))+(((-1.0)*x1601*x1616))+((sj0*sj1*sj2))+((x1610*x1619)));
evalcond[1]=(((cj4*x1622))+((sj1*x1607))+(((-1.0)*x1601*x1623))+(((-1.0)*x1604*x1619))+(((-1.0)*cj2*x1615))+(((-1.0)*cj5*x1608*x1616)));
evalcond[2]=(x1603+(((0.01)*cj5*x1616))+((cj0*x1602))+(((-1.0)*px))+(((-1.0)*x1603*x1611))+(((-1.0)*x1612*x1621))+(((-1.0)*x1612*x1616))+(((0.01)*r00*x1619))+(((-1.0)*sj2*x1613)));
evalcond[3]=(((sj2*x1603))+(((-1.0)*x1611*x1613))+x1613+(((-0.01)*r01*x1619))+((sj0*x1602))+(((-1.0)*py))+(((0.01)*x1624))+((x1612*x1623))+(((-1.0)*x1612*x1622)));
evalcond[4]=((((-1.0)*sj5*x1609*x1622))+(((-1.0)*sj3*x1601*x1624))+((sj3*x1599*x1610))+((x1617*x1618))+((x1614*x1620))+((x1604*x1617))+(((-1.0)*cj1*x1615)));
evalcond[5]=((((-1.0)*sj5*x1609*x1621))+(((-1.0)*cj1*x1606))+(((-1.0)*x1599*x1609*x1614))+(((-1.0)*cj5*r00*x1601*x1617))+((x1610*x1617))+(((-1.0)*sj3*x1599*x1604))+(((-1.0)*cj5*sj3*x1601*x1616)));
evalcond[6]=((((-1.0)*x1611*x1615))+x1607+(((-1.0)*cj3*x1601*x1624))+(((-1.0)*x1605*x1623))+((cj3*x1599*x1610))+((x1618*x1620))+((x1605*x1622))+((x1604*x1620)));
evalcond[7]=((((-1.0)*x1606*x1611))+(((-1.0)*cj3*cj5*x1601*x1616))+(((-1.0)*x1599*x1604*x1609))+(((-1.0)*cj3*r00*x1601*x1619))+((x1605*x1621))+((x1605*x1616))+((x1610*x1620))+(((-1.0)*sj2*x1615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1625=cj4*cj4;
IkReal x1626=cj5*cj5;
IkReal x1627=(cj5*sj4);
IkReal x1628=((1.0)*r00);
IkReal x1629=(cj2*sj0);
IkReal x1630=(cj4*r01);
IkReal x1631=(cj4*r00);
IkReal x1632=(cj0*cj2);
IkReal x1633=((1.0)*r01);
IkReal x1634=(cj0*sj1*sj2);
IkReal x1635=(sj0*sj1*sj2);
CheckValue<IkReal> x1636 = IKatan2WithCheck(IkReal(((((-1.0)*x1627*x1633*x1635))+((r00*x1627*x1634))+(((-1.0)*x1627*x1628*x1629))+(((-1.0)*x1629*x1630))+(((-1.0)*x1627*x1632*x1633))+((x1631*x1632))+((x1631*x1635))+((x1630*x1634)))),(((r00*x1627*x1635))+((r00*x1627*x1632))+(((-1.0)*cj4*x1628*x1634))+((x1629*x1631))+(((-1.0)*x1627*x1629*x1633))+((x1630*x1632))+((x1630*x1635))+((r01*x1627*x1634))),IKFAST_ATAN2_MAGTHRESH);
if(!x1636.valid){
continue;
}
CheckValue<IkReal> x1637=IKPowWithIntegerCheck(IKsign((x1626+x1625+(((-1.0)*x1625*x1626)))),-1);
if(!x1637.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1636.value)+(((1.5707963267949)*(x1637.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1638=IKcos(j6);
IkReal x1639=IKsin(j6);
IkReal x1640=((1.0)*cj4);
IkReal x1641=((0.36442)*cj1);
IkReal x1642=((0.069)*cj0);
IkReal x1643=(r00*sj4);
IkReal x1644=(sj3*sj5);
IkReal x1645=((1.0)*cj0);
IkReal x1646=(cj0*sj2);
IkReal x1647=((1.0)*sj4);
IkReal x1648=((1.0)*cj3);
IkReal x1649=(r01*sj4);
IkReal x1650=(cj2*sj1);
IkReal x1651=((0.37429)*sj5);
IkReal x1652=((0.069)*sj0);
IkReal x1653=(r01*sj5);
IkReal x1654=((1.0)*sj0);
IkReal x1655=(r01*x1638);
IkReal x1656=(sj3*x1639);
IkReal x1657=(cj4*cj5*r01);
IkReal x1658=(cj5*x1639);
IkReal x1659=(cj3*x1639);
IkReal x1660=(r00*x1639);
IkReal x1661=(r00*x1638);
IkReal x1662=(r01*x1639);
IkReal x1663=(cj5*x1661);
evalcond[0]=((((-1.0)*x1640*x1660))+((cj0*cj2))+(((-1.0)*x1640*x1655))+((x1649*x1658))+((sj0*sj1*sj2))+(((-1.0)*cj5*x1638*x1643)));
evalcond[1]=((((-1.0)*x1643*x1658))+((cj4*x1661))+((sj1*x1646))+(((-1.0)*x1640*x1662))+(((-1.0)*cj2*x1654))+(((-1.0)*cj5*x1647*x1655)));
evalcond[2]=(x1642+(((-1.0)*sj2*x1652))+(((-1.0)*x1642*x1650))+(((-1.0)*px))+(((0.01)*cj5*x1655))+(((0.01)*r00*x1658))+((cj0*x1641))+(((-1.0)*x1651*x1655))+(((-1.0)*x1651*x1660)));
evalcond[3]=(((sj0*x1641))+x1652+((sj2*x1642))+(((-1.0)*x1650*x1652))+(((-1.0)*py))+(((-0.01)*r01*x1658))+(((0.01)*x1663))+((x1651*x1662))+(((-1.0)*x1651*x1661)));
evalcond[4]=(((x1656*x1657))+((sj3*x1638*x1649))+(((-1.0)*cj1*x1654))+(((-1.0)*sj3*x1640*x1663))+((x1643*x1656))+((x1653*x1659))+(((-1.0)*sj5*x1648*x1661)));
evalcond[5]=((((-1.0)*cj5*sj3*x1640*x1655))+(((-1.0)*cj1*x1645))+((x1649*x1656))+(((-1.0)*x1638*x1648*x1653))+(((-1.0)*cj5*r00*x1640*x1656))+(((-1.0)*sj5*x1648*x1660))+(((-1.0)*sj3*x1638*x1643)));
evalcond[6]=((((-1.0)*cj3*x1640*x1663))+x1646+(((-1.0)*x1644*x1662))+(((-1.0)*x1650*x1654))+((x1644*x1661))+((cj3*x1638*x1649))+((x1643*x1659))+((x1657*x1659)));
evalcond[7]=((((-1.0)*cj3*r00*x1640*x1658))+(((-1.0)*x1638*x1643*x1648))+(((-1.0)*sj2*x1654))+(((-1.0)*x1645*x1650))+((x1644*x1660))+((x1644*x1655))+((x1649*x1659))+(((-1.0)*cj3*cj5*x1640*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1667=IKPowWithIntegerCheck(r22,-1);
if(!x1667.valid){
continue;
}
IkReal x1664=x1667.value;
CheckValue<IkReal> x1668=IKPowWithIntegerCheck(sj5,-1);
if(!x1668.valid){
continue;
}
IkReal x1665=x1668.value;
IkReal x1666=(x1664*x1665);
CheckValue<IkReal> x1669=IKPowWithIntegerCheck(sj3,-1);
if(!x1669.valid){
continue;
}
if( IKabs((cj1*sj2*x1666)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1666*(x1669.value)*((sj1+((cj3*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x1666))+IKsqr((x1666*(x1669.value)*((sj1+((cj3*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x1666), (x1666*(x1669.value)*((sj1+((cj3*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1670=IKcos(j4);
IkReal x1671=(cj3*r22);
IkReal x1672=((1.0)*sj5);
IkReal x1673=(r22*sj3);
evalcond[0]=(((cj1*sj2))+(((-1.0)*r22*x1672*(IKsin(j4)))));
evalcond[1]=(sj1+(((-1.0)*x1670*x1672*x1673))+((cj5*x1671)));
evalcond[2]=((((-1.0)*x1670*x1671*x1672))+(((-1.0)*cj1*cj2))+(((-1.0)*cj5*x1673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1674=(sj1*sj2);
IkReal x1675=(cj4*r01);
IkReal x1676=((1.0)*cj2);
IkReal x1677=(cj4*r00);
IkReal x1678=((1.0)*r00);
IkReal x1679=(cj5*sj4);
IkReal x1680=((2.0)*r00);
IkReal x1681=((1.0)*x1675);
IkReal x1682=(r00*x1679);
IkReal x1683=(r01*x1679);
IkReal x1684=((1.0)*x1677);
IkReal x1685=((1.0)*x1674);
IkReal x1686=(x1678*x1679);
IkReal x1687=((1.0)*x1683);
IkReal x1688=(x1675+x1682);
IkReal x1689=((((2.0)*x1683))+(((-2.0)*x1677)));
IkReal x1690=(cj2+x1688);
IkReal x1691=(x1688+(((-1.0)*x1676)));
IkReal x1692=((((-1.0)*x1681))+(((-1.0)*x1686))+cj2);
IkReal x1693=((((-1.0)*x1687))+x1674+x1677);
IkReal x1694=((((-2.0)*x1675))+(((-1.0)*x1679*x1680)));
IkReal x1695=((((-1.0)*x1684))+x1674+x1683);
IkReal x1696=(x1681+x1686);
IkReal x1697=((((-1.0)*x1687))+(((-1.0)*x1685))+x1677);
IkReal x1698=((((-1.0)*x1684))+(((-1.0)*x1685))+x1683);
IkReal x1699=((((-1.0)*x1696))+(((-1.0)*x1676)));
IkReal gconst0=x1692;
IkReal gconst1=x1689;
IkReal gconst2=x1690;
IkReal gconst3=x1693;
IkReal gconst4=x1694;
IkReal gconst5=x1695;
IkReal gconst6=x1692;
IkReal gconst7=x1689;
IkReal gconst8=x1690;
IkReal gconst9=x1693;
IkReal gconst10=x1694;
IkReal gconst11=x1695;
IkReal gconst12=x1699;
IkReal gconst13=x1689;
IkReal gconst14=x1691;
IkReal gconst15=x1697;
IkReal gconst16=x1694;
IkReal gconst17=x1698;
IkReal gconst18=x1699;
IkReal gconst19=x1689;
IkReal gconst20=x1691;
IkReal gconst21=x1697;
IkReal gconst22=x1694;
IkReal gconst23=x1698;
IkReal x1700=sj1*sj1;
IkReal x1701=sj2*sj2;
IkReal x1702=cj2*cj2;
IkReal x1703=((1.0)*gconst21);
IkReal x1704=(gconst15*gconst20);
IkReal x1705=(gconst13*gconst19);
IkReal x1706=((2.0)*gconst21);
IkReal x1707=(gconst23*gconst6);
IkReal x1708=(gconst2*gconst3);
IkReal x1709=(gconst2*gconst9);
IkReal x1710=(gconst19*gconst4);
IkReal x1711=(gconst11*gconst6);
IkReal x1712=(sj1*sj2);
IkReal x1713=((4.0)*cj2);
IkReal x1714=(gconst4*gconst7);
IkReal x1715=(gconst15*gconst18);
IkReal x1716=((2.0)*cj2);
IkReal x1717=(gconst12*gconst20);
IkReal x1718=(gconst17*gconst21);
IkReal x1719=(gconst0*gconst20);
IkReal x1720=(gconst14*gconst20);
IkReal x1721=((1.0)*gconst8);
IkReal x1722=(gconst5*gconst6);
IkReal x1723=(gconst3*gconst9);
IkReal x1724=((1.0)*gconst9);
IkReal x1725=(gconst1*gconst17);
IkReal x1726=((2.0)*gconst5);
IkReal x1727=(gconst0*gconst11);
IkReal x1728=(gconst21*gconst5);
IkReal x1729=(gconst16*gconst22);
IkReal x1730=(gconst5*gconst8);
IkReal x1731=(gconst2*gconst6);
IkReal x1732=(gconst14*gconst18);
IkReal x1733=(gconst13*gconst22);
IkReal x1734=(gconst1*gconst5);
IkReal x1735=(gconst16*gconst7);
IkReal x1736=(gconst5*gconst9);
IkReal x1737=(gconst1*gconst10);
IkReal x1738=(gconst14*gconst15);
IkReal x1739=((2.0)*gconst23);
IkReal x1740=((2.0)*gconst9);
IkReal x1741=(gconst1*gconst7);
IkReal x1742=(gconst0*gconst8);
IkReal x1743=(gconst12*gconst23);
IkReal x1744=(gconst10*gconst6);
IkReal x1745=(gconst0*gconst9);
IkReal x1746=(gconst17*gconst18);
IkReal x1747=((2.0)*gconst4);
IkReal x1748=(gconst13*gconst7);
IkReal x1749=(gconst11*gconst18);
IkReal x1750=((1.0)*gconst0);
IkReal x1751=((1.0)*gconst10);
IkReal x1752=(gconst10*gconst13);
IkReal x1753=(gconst16*gconst19);
IkReal x1754=((1.0)*gconst12);
IkReal x1755=(gconst18*gconst5);
IkReal x1756=(gconst12*gconst17);
IkReal x1757=(gconst14*gconst21);
IkReal x1758=(gconst17*gconst20);
IkReal x1759=((1.0)*gconst14);
IkReal x1760=(gconst18*gconst2);
IkReal x1761=(gconst14*gconst23);
IkReal x1762=(gconst5*x1750);
IkReal x1763=(gconst9*x1742);
IkReal x1764=(gconst17*x1733);
IkReal x1765=((4.0)*x1702);
IkReal x1766=(gconst21*x1753);
IkReal x1767=((1.0)*gconst22*gconst4);
IkReal x1768=(gconst14*x1753);
IkReal x1769=((4.0)*x1700*x1701);
op[0]=(((x1753*x1757))+((x1715*x1761))+(((-1.0)*x1729*x1732))+(((-1.0)*x1743*x1746))+((x1733*x1746))+(((-1.0)*gconst14*x1703*x1704))+(((-1.0)*gconst17*x1703*x1705))+((x1717*x1718)));
op[1]=(((x1706*x1712*x1756))+((x1706*x1712*x1758))+((x1706*x1712*x1753))+((cj2*x1705*x1706))+(((-2.0)*gconst18*x1712*x1729))+((x1712*x1715*x1739))+((gconst18*x1716*x1743))+(((-1.0)*gconst18*x1716*x1733))+(((-2.0)*gconst14*x1712*x1729))+((cj2*x1706*x1720))+(((-1.0)*cj2*x1706*x1717))+(((-1.0)*x1712*x1739*x1756))+(((-1.0)*x1712*x1739*x1746))+(((-1.0)*gconst17*x1716*x1717))+(((-1.0)*x1716*x1768))+(((-1.0)*gconst14*x1715*x1716))+((x1712*x1738*x1739))+((gconst12*x1716*x1746))+(((2.0)*x1712*x1764))+((gconst17*x1705*x1716))+(((-1.0)*x1704*x1706*x1712))+((gconst14*x1704*x1716))+(((-1.0)*gconst23*x1716*x1732))+(((-1.0)*x1706*x1712*x1738)));
op[2]=((((-1.0)*x1712*x1713*x1715))+(((-1.0)*gconst17*x1707*x1754))+(((-1.0)*x1720*x1765))+((gconst23*gconst3*x1732))+((gconst15*gconst23*x1769))+((x1717*x1765))+(((-1.0)*gconst8*x1703*x1738))+(((-1.0)*gconst2*x1703*x1704))+((x1746*x1752))+(((-1.0)*gconst14*x1704*x1724))+(((-1.0)*x1712*x1713*x1733))+(((-1.0)*gconst19*x1703*x1725))+((gconst2*x1766))+((x1707*x1738))+((x1732*x1765))+(((-1.0)*gconst17*x1703*x1748))+((x1717*x1728))+((gconst18*gconst22*x1725))+(((-1.0)*gconst15*gconst21*x1769))+((gconst6*x1764))+((x1704*x1712*x1713))+(((-1.0)*gconst17*x1705*x1724))+(((-1.0)*x1732*x1767))+(((-1.0)*gconst16*x1732*x1751))+(((-1.0)*gconst5*x1703*x1705))+((gconst11*gconst14*x1715))+(((-1.0)*gconst23*x1746*x1750))+(((-1.0)*x1729*x1769))+(((-1.0)*x1712*x1713*x1753))+(((-1.0)*x1712*x1713*x1758))+((gconst17*gconst9*x1717))+((gconst9*x1768))+((x1718*x1769))+(((-1.0)*gconst6*x1729*x1759))+((x1735*x1757))+((x1712*x1713*x1757))+(((-1.0)*x1743*x1755))+(((-1.0)*x1729*x1760))+((x1710*x1757))+((x1712*x1713*x1743))+((x1712*x1713*x1746))+(((-1.0)*gconst12*gconst21*x1712*x1713))+(((-1.0)*gconst12*gconst18*x1765))+((gconst12*gconst8*x1718))+(((-1.0)*gconst11*x1746*x1754))+((x1733*x1755))+((x1718*x1719))+(((-1.0)*gconst3*x1703*x1720))+(((-1.0)*x1705*x1765))+(((-1.0)*gconst17*gconst23*x1769))+((gconst2*gconst23*x1715))+(((-1.0)*x1712*x1713*x1761)));
op[3]=((((2.0)*cj2*gconst1*gconst17*gconst19))+(((2.0)*cj2*gconst14*gconst21*gconst8))+(((-2.0)*gconst12*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst16*gconst2*gconst22*sj1*sj2))+(((2.0)*gconst17*gconst21*gconst8*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst19*gconst2))+(((2.0)*cj2*gconst12*gconst18*gconst5))+(((2.0)*gconst1*gconst17*gconst22*sj1*sj2))+(((-2.0)*gconst15*gconst20*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst20*gconst9))+(((2.0)*cj2*gconst14*gconst20*gconst3))+(((2.0)*cj2*gconst1*gconst19*gconst21))+(((-2.0)*gconst18*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst17*gconst20))+(((-2.0)*cj2*gconst15*gconst18*gconst2))+(((-2.0)*cj2*gconst13*gconst22*gconst6))+(((2.0)*gconst10*gconst13*gconst17*sj1*sj2))+(((-2.0)*gconst14*gconst22*gconst4*sj1*sj2))+(((-2.0)*gconst18*gconst23*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst23*gconst6*sj1*sj2))+(((-2.0)*gconst14*gconst21*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst21*gconst8))+(((-2.0)*cj2*gconst12*gconst17*gconst8))+(((-2.0)*gconst10*gconst14*gconst16*sj1*sj2))+(((-2.0)*gconst15*gconst2*gconst21*sj1*sj2))+(((-2.0)*gconst11*gconst12*gconst17*sj1*sj2))+(((-2.0)*gconst11*gconst17*gconst18*sj1*sj2))+(((-2.0)*gconst14*gconst15*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst18*sj1*sj2))+(((2.0)*cj2*gconst12*gconst17*gconst6))+(((2.0)*gconst13*gconst22*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst23))+(((2.0)*gconst0*gconst17*gconst21*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst20*gconst9))+(((-2.0)*cj2*gconst12*gconst20*gconst5))+(((-2.0)*cj2*gconst10*gconst13*gconst18))+(((2.0)*gconst12*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst13*gconst17*gconst7))+(((2.0)*cj2*gconst15*gconst2*gconst20))+(((2.0)*gconst11*gconst14*gconst15*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst16*gconst7))+(((2.0)*cj2*gconst12*gconst23*gconst6))+(((-2.0)*gconst17*gconst23*gconst6*sj1*sj2))+(((2.0)*gconst18*gconst23*gconst3*sj1*sj2))+(((-2.0)*gconst15*gconst21*gconst8*sj1*sj2))+(((2.0)*cj2*gconst13*gconst19*gconst5))+(((2.0)*cj2*gconst13*gconst19*gconst9))+(((-2.0)*gconst0*gconst17*gconst23*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst23*gconst6))+(((-2.0)*cj2*gconst11*gconst14*gconst18))+(((-2.0)*cj2*gconst1*gconst18*gconst22))+(((2.0)*cj2*gconst11*gconst12*gconst18))+(((2.0)*gconst19*gconst21*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst19*gconst4))+(((2.0)*cj2*gconst14*gconst15*gconst8))+(((-2.0)*cj2*gconst14*gconst18*gconst3))+(((2.0)*gconst16*gconst21*gconst7*sj1*sj2))+(((2.0)*gconst16*gconst19*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst18))+(((-2.0)*cj2*gconst18*gconst2*gconst23))+(((-2.0)*gconst20*gconst21*gconst3*sj1*sj2))+(((2.0)*gconst17*gconst20*gconst9*sj1*sj2))+(((2.0)*gconst14*gconst23*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst15*gconst6))+(((2.0)*cj2*gconst2*gconst20*gconst21))+(((2.0)*gconst20*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst2*gconst23*sj1*sj2))+(((2.0)*cj2*gconst13*gconst21*gconst7))+(((2.0)*gconst12*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst18*sj1*sj2))+(((-2.0)*gconst16*gconst22*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst21)));
op[4]=((((4.0)*gconst21*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+((gconst14*gconst21*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-4.0)*gconst11*gconst17*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst12*gconst6*(cj2*cj2)))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((4.0)*gconst18*gconst2*(cj2*cj2)))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+((gconst14*gconst23*gconst3*gconst6))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+(((4.0)*cj2*gconst17*gconst6*sj1*sj2))+((gconst1*gconst10*gconst17*gconst18))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((-4.0)*cj2*gconst10*gconst13*sj1*sj2))+(((-4.0)*cj2*gconst2*gconst23*sj1*sj2))+((gconst13*gconst22*gconst5*gconst6))+((gconst12*gconst20*gconst5*gconst9))+(((-4.0)*cj2*gconst12*gconst9*sj1*sj2))+(((4.0)*cj2*gconst11*gconst12*sj1*sj2))+(((4.0)*gconst11*gconst15*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+((gconst0*gconst20*gconst21*gconst5))+(((-4.0)*cj2*gconst17*gconst8*sj1*sj2))+((gconst15*gconst2*gconst23*gconst6))+((gconst1*gconst18*gconst22*gconst5))+(((-4.0)*gconst15*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*cj2*gconst1*gconst22*sj1*sj2))+(((4.0)*cj2*gconst14*gconst9*sj1*sj2))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+((gconst14*gconst16*gconst7*gconst9))+(((-4.0)*gconst21*gconst3*(sj1*sj1)*(sj2*sj2)))+((gconst19*gconst2*gconst21*gconst4))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-4.0)*gconst23*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst22*gconst4*(sj1*sj1)*(sj2*sj2)))+(((4.0)*gconst0*gconst20*(cj2*cj2)))+(((-4.0)*cj2*gconst11*gconst14*sj1*sj2))+((gconst12*gconst21*gconst5*gconst8))+((gconst11*gconst15*gconst18*gconst2))+((gconst1*gconst17*gconst22*gconst6))+((gconst10*gconst13*gconst17*gconst6))+(((-4.0)*cj2*gconst18*gconst3*sj1*sj2))+(((-4.0)*gconst10*gconst16*(sj1*sj1)*(sj2*sj2)))+((gconst16*gconst19*gconst2*gconst9))+((gconst18*gconst2*gconst23*gconst3))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+(((-4.0)*gconst1*gconst19*(cj2*cj2)))+((gconst16*gconst2*gconst21*gconst7))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-4.0)*gconst13*gconst7*(cj2*cj2)))+(((4.0)*cj2*gconst15*gconst8*sj1*sj2))+(((-4.0)*cj2*gconst19*gconst4*sj1*sj2))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+(((-4.0)*cj2*gconst20*gconst5*sj1*sj2))+((gconst10*gconst13*gconst18*gconst5))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+(((-4.0)*cj2*gconst16*gconst7*sj1*sj2))+(((-4.0)*cj2*gconst15*gconst6*sj1*sj2))+(((4.0)*cj2*gconst0*gconst23*sj1*sj2))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((4.0)*gconst17*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-4.0)*gconst0*gconst18*(cj2*cj2)))+(((-4.0)*gconst14*gconst8*(cj2*cj2)))+(((4.0)*cj2*gconst18*gconst5*sj1*sj2))+((gconst11*gconst14*gconst15*gconst6))+((gconst12*gconst17*gconst8*gconst9))+(((-4.0)*gconst2*gconst20*(cj2*cj2)))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+((gconst14*gconst19*gconst4*gconst9))+((gconst11*gconst14*gconst18*gconst3))+(((4.0)*gconst14*gconst6*(cj2*cj2)))+((gconst0*gconst17*gconst20*gconst9))+(((4.0)*gconst12*gconst8*(cj2*cj2)))+(((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((4.0)*gconst23*gconst3*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-4.0)*cj2*gconst0*gconst21*sj1*sj2))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+(((4.0)*cj2*gconst2*gconst21*sj1*sj2))+((gconst0*gconst17*gconst21*gconst8))+(((4.0)*cj2*gconst20*gconst3*sj1*sj2)));
op[5]=((((2.0)*gconst23*gconst3*gconst6*sj1*sj2))+(((-2.0)*gconst11*gconst18*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst3*gconst8))+(((-2.0)*gconst0*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst22*gconst4*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst19*gconst2*gconst4))+(((-2.0)*cj2*gconst12*gconst5*gconst8))+(((2.0)*gconst1*gconst22*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst21*gconst5*sj1*sj2))+(((-2.0)*gconst14*gconst3*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst14*gconst6))+(((-2.0)*cj2*gconst14*gconst4*gconst7))+(((-2.0)*cj2*gconst1*gconst22*gconst6))+(((-2.0)*cj2*gconst14*gconst3*gconst6))+(((2.0)*gconst17*gconst8*gconst9*sj1*sj2))+(((2.0)*gconst21*gconst4*gconst7*sj1*sj2))+(((-2.0)*gconst0*gconst11*gconst17*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst8*gconst9))+(((-2.0)*gconst15*gconst2*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst1*gconst10*gconst18))+(((-2.0)*cj2*gconst0*gconst17*gconst8))+(((2.0)*gconst2*gconst23*gconst3*sj1*sj2))+(((2.0)*gconst21*gconst5*gconst8*sj1*sj2))+(((-2.0)*gconst23*gconst5*gconst6*sj1*sj2))+(((2.0)*gconst10*gconst13*gconst5*sj1*sj2))+(((2.0)*gconst1*gconst10*gconst17*sj1*sj2))+(((-2.0)*gconst20*gconst3*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst11*gconst18))+(((-2.0)*gconst11*gconst17*gconst6*sj1*sj2))+(((2.0)*cj2*gconst1*gconst17*gconst7))+(((2.0)*gconst11*gconst14*gconst3*sj1*sj2))+(((2.0)*cj2*gconst2*gconst20*gconst3))+(((2.0)*cj2*gconst2*gconst20*gconst9))+(((2.0)*cj2*gconst1*gconst19*gconst5))+(((2.0)*cj2*gconst1*gconst19*gconst9))+(((-2.0)*gconst21*gconst3*gconst8*sj1*sj2))+(((2.0)*gconst16*gconst7*gconst9*sj1*sj2))+(((-2.0)*gconst2*gconst21*gconst3*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst6))+(((2.0)*cj2*gconst13*gconst5*gconst7))+(((2.0)*cj2*gconst1*gconst21*gconst7))+(((2.0)*cj2*gconst14*gconst8*gconst9))+(((2.0)*cj2*gconst0*gconst23*gconst6))+(((2.0)*cj2*gconst2*gconst21*gconst8))+(((2.0)*cj2*gconst13*gconst7*gconst9))+(((-2.0)*gconst2*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst21*gconst8))+(((2.0)*cj2*gconst11*gconst12*gconst6))+(((2.0)*gconst12*gconst5*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst5))+(((-2.0)*cj2*gconst0*gconst20*gconst9))+(((-2.0)*cj2*gconst15*gconst2*gconst6))+(((-2.0)*cj2*gconst2*gconst23*gconst6))+(((2.0)*gconst19*gconst4*gconst9*sj1*sj2))+(((-2.0)*gconst15*gconst8*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst18*gconst2))+(((2.0)*gconst20*gconst5*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst14*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst2*gconst7))+(((-2.0)*gconst10*gconst18*gconst4*sj1*sj2))+(((2.0)*gconst11*gconst18*gconst3*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst10*gconst13*gconst6))+(((-2.0)*gconst11*gconst12*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst5))+(((2.0)*cj2*gconst15*gconst2*gconst8))+(((2.0)*cj2*gconst12*gconst5*gconst6))+(((-2.0)*cj2*gconst18*gconst2*gconst3)));
op[6]=((((-1.0)*x1712*x1713*x1714))+((gconst17*x1763))+((gconst2*gconst21*x1714))+(((-1.0)*gconst3*gconst6*x1712*x1713))+(((-1.0)*gconst14*x1721*x1723))+(((-1.0)*gconst20*x1708*x1724))+(((-1.0)*gconst11*gconst5*x1769))+((gconst3*gconst8*x1712*x1713))+(((-1.0)*x1723*x1769))+((x1709*x1710))+(((-1.0)*gconst2*gconst8*x1765))+(((-1.0)*x1707*x1762))+(((-1.0)*gconst4*x1751*x1760))+(((-1.0)*gconst7*x1703*x1734))+(((-1.0)*x1731*x1767))+(((-1.0)*gconst16*x1731*x1751))+((x1742*x1765))+((gconst11*gconst3*x1769))+(((-1.0)*x1712*x1713*x1730))+(((-1.0)*x1712*x1713*x1737))+(((-1.0)*gconst5*x1724*x1748))+((gconst10*gconst18*x1734))+((gconst12*gconst9*x1730))+(((-1.0)*gconst0*gconst6*x1765))+((x1712*x1713*x1727))+((x1712*x1713*x1722))+(((-1.0)*gconst8*x1703*x1708))+((x1709*x1712*x1713))+(((-1.0)*gconst7*x1724*x1725))+((gconst14*gconst3*x1711))+((x1736*x1769))+((x1708*x1749))+(((-1.0)*x1741*x1765))+(((-1.0)*gconst11*gconst2*x1712*x1713))+(((-1.0)*gconst17*x1711*x1750))+(((-1.0)*gconst10*gconst4*x1769))+((x1709*x1735))+(((-1.0)*gconst4*x1744*x1759))+(((-1.0)*gconst15*x1709*x1721))+(((-1.0)*x1712*x1713*x1745))+((gconst1*gconst22*x1722))+((gconst14*gconst9*x1714))+((x1728*x1742))+((x1722*x1752))+(((-1.0)*x1727*x1755))+((x1731*x1765))+((x1719*x1736))+((x1725*x1744))+((gconst15*gconst2*x1711))+(((-1.0)*gconst5*x1711*x1754))+((x1707*x1708))+(((-1.0)*gconst19*x1724*x1734)));
op[7]=(((x1712*x1726*x1745))+((gconst9*x1716*x1741))+((gconst0*x1711*x1716))+((gconst7*x1716*x1734))+((gconst8*x1709*x1716))+((x1712*x1726*x1737))+(((-1.0)*gconst2*x1714*x1716))+((gconst0*x1716*x1722))+(((-1.0)*x1712*x1726*x1727))+(((-2.0)*gconst8*x1712*x1723))+(((-1.0)*gconst6*x1716*x1737))+(((-1.0)*gconst2*x1711*x1716))+(((2.0)*gconst3*x1711*x1712))+(((-1.0)*x1708*x1712*x1740))+(((-1.0)*gconst6*x1708*x1716))+(((-1.0)*x1716*x1763))+(((-1.0)*gconst0*x1716*x1730))+(((-1.0)*gconst10*gconst2*x1712*x1747))+(((2.0)*gconst11*x1708*x1712))+((gconst8*x1708*x1716))+(((-1.0)*x1711*x1712*x1726))+(((-1.0)*x1712*x1744*x1747))+((x1712*x1714*x1740))+((gconst8*gconst9*x1712*x1726)));
op[8]=(((x1730*x1745))+((x1722*x1737))+(((-1.0)*gconst4*x1731*x1751))+((x1709*x1714))+(((-1.0)*x1711*x1762))+(((-1.0)*gconst7*x1724*x1734))+(((-1.0)*gconst9*x1708*x1721))+((x1708*x1711)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[2];
IkReal x1770=(py*r01);
IkReal x1771=(px*r00);
IkReal x1772=(pz*r00);
IkReal x1773=((-1.0)*r01);
IkReal x1774=(((px*r01))+((py*r00)));
IkReal x1775=(pz*x1773);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1773;
r11=r00;
npx=((((-1.0)*x1770))+x1771);
npy=x1774;
npz=(pz*r22);
rxp0_0=x1775;
rxp0_1=((-1.0)*x1772);
rxp0_2=x1774;
rxp1_0=x1772;
rxp1_1=x1775;
rxp1_2=((((-1.0)*x1771))+x1770);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1776=cj4*cj4;
IkReal x1777=cj5*cj5;
IkReal x1778=(x1777+x1776+(((-1.0)*x1776*x1777)));
j6eval[0]=x1778;
j6eval[1]=IKsign(x1778);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1779=(py*r01);
IkReal x1780=(px*r00);
IkReal x1781=(pz*r00);
IkReal x1782=((-1.0)*r01);
IkReal x1783=(((px*r01))+((py*r00)));
IkReal x1784=(pz*x1782);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1782;
r11=r00;
npx=((((-1.0)*x1779))+x1780);
npy=x1783;
npz=(pz*r22);
rxp0_0=x1784;
rxp0_1=((-1.0)*x1781);
rxp0_2=x1783;
rxp1_0=x1781;
rxp1_1=x1784;
rxp1_2=(x1779+(((-1.0)*x1780)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1785=((((-1.0)*cj5*sj3))+(((-1.0)*cj3*cj4*sj5)));
j6eval[0]=x1785;
j6eval[1]=IKsign(x1785);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1786=(py*r01);
IkReal x1787=(px*r00);
IkReal x1788=(pz*r00);
IkReal x1789=((-1.0)*r01);
IkReal x1790=(((px*r01))+((py*r00)));
IkReal x1791=(pz*x1789);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1789;
r11=r00;
npx=(x1787+(((-1.0)*x1786)));
npy=x1790;
npz=(pz*r22);
rxp0_0=x1791;
rxp0_1=((-1.0)*x1788);
rxp0_2=x1790;
rxp1_0=x1788;
rxp1_1=x1791;
rxp1_2=(x1786+(((-1.0)*x1787)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1792=((1.0)*sj4);
IkReal x1793=(cj4*sj3);
IkReal x1794=((((-1.0)*cj3*cj5*sj5*x1792))+(((-1.0)*x1792*x1793*(cj5*cj5)))+((sj4*x1793)));
j6eval[0]=x1794;
j6eval[1]=IKsign(x1794);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1795=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.37429)*r22))+(((-1.0)*pz))+(((-0.069)*x1795))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((cj3*r22)));
evalcond[4]=((((-1.0)*x1795))+(((-1.0)*r22*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1796=((100.0)*r00);
IkReal x1797=(cj0*r01);
IkReal x1798=((100.0)*r01);
IkReal x1799=(r00*sj0);
IkReal x1800=(cj0*r00);
IkReal x1801=(r01*sj0);
IkReal x1802=((6.9)*cj2*sj1);
if( IKabs((((x1800*x1802))+(((-6.9)*x1800))+(((-1.0)*py*x1798))+(((-1.0)*x1801*x1802))+(((6.9)*x1801))+((px*x1796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-6.9)*x1797))+(((-6.9)*x1799))+((x1799*x1802))+((py*x1796))+((x1797*x1802))+((px*x1798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1800*x1802))+(((-6.9)*x1800))+(((-1.0)*py*x1798))+(((-1.0)*x1801*x1802))+(((6.9)*x1801))+((px*x1796))))+IKsqr(((((-6.9)*x1797))+(((-6.9)*x1799))+((x1799*x1802))+((py*x1796))+((x1797*x1802))+((px*x1798))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((x1800*x1802))+(((-6.9)*x1800))+(((-1.0)*py*x1798))+(((-1.0)*x1801*x1802))+(((6.9)*x1801))+((px*x1796))), ((((-6.9)*x1797))+(((-6.9)*x1799))+((x1799*x1802))+((py*x1796))+((x1797*x1802))+((px*x1798))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1803=IKcos(j6);
IkReal x1804=IKsin(j6);
IkReal x1805=(r00*sj3);
IkReal x1806=((0.069)*cj0);
IkReal x1807=((0.01)*r01);
IkReal x1808=((1.0)*r00);
IkReal x1809=(cj2*sj1);
IkReal x1810=(r01*sj3);
IkReal x1811=((0.069)*sj0);
IkReal x1812=(cj3*r01);
IkReal x1813=(cj3*r00);
IkReal x1814=((1.0)*sj0);
IkReal x1815=((1.0)*r01);
IkReal x1816=(sj4*x1804);
IkReal x1817=(cj4*x1804);
IkReal x1818=(sj4*x1803);
IkReal x1819=(r00*x1803);
IkReal x1820=((1.0)*cj4*x1803);
evalcond[0]=((((0.01)*r00*x1804))+((x1803*x1807))+(((-1.0)*px))+x1806+(((-1.0)*x1806*x1809)));
evalcond[1]=((((0.01)*x1819))+(((-1.0)*x1809*x1811))+(((-1.0)*x1804*x1807))+(((-1.0)*py))+x1811);
evalcond[2]=(((x1805*x1816))+(((-1.0)*x1805*x1820))+((x1810*x1818))+((x1810*x1817)));
evalcond[3]=((((-1.0)*x1808*x1818))+(((-1.0)*x1808*x1817))+((cj0*cj2))+(((-1.0)*cj4*x1803*x1815))+((r01*x1816)));
evalcond[4]=((((-1.0)*cj2*x1814))+(((-1.0)*x1808*x1816))+(((-1.0)*x1815*x1818))+(((-1.0)*x1815*x1817))+((cj4*x1819)));
evalcond[5]=((((-1.0)*x1810*x1820))+(((-1.0)*x1805*x1817))+(((-1.0)*x1805*x1818))+((x1810*x1816)));
evalcond[6]=((((-1.0)*x1809*x1814))+((x1813*x1816))+((x1812*x1817))+((x1812*x1818))+(((-1.0)*cj3*cj4*x1803*x1808)));
evalcond[7]=((((-1.0)*cj3*x1808*x1817))+(((-1.0)*cj3*x1808*x1818))+(((-1.0)*x1812*x1820))+((x1812*x1816))+(((-1.0)*cj0*x1809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1821=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((-1.0)*pz))+(((-0.37429)*r22))+(((-0.069)*x1821))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*cj3*r22))+sj1);
evalcond[4]=((((-1.0)*x1821))+((r22*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1822=((100.0)*r00);
IkReal x1823=(cj0*r01);
IkReal x1824=((100.0)*r01);
IkReal x1825=(r00*sj0);
IkReal x1826=(cj0*r00);
IkReal x1827=(r01*sj0);
IkReal x1828=((6.9)*cj2*sj1);
if( IKabs((((py*x1824))+((x1827*x1828))+(((-1.0)*x1826*x1828))+(((-6.9)*x1827))+(((6.9)*x1826))+(((-1.0)*px*x1822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*py*x1822))+(((-1.0)*x1825*x1828))+(((-1.0)*x1823*x1828))+(((6.9)*x1825))+(((6.9)*x1823))+(((-1.0)*px*x1824)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x1824))+((x1827*x1828))+(((-1.0)*x1826*x1828))+(((-6.9)*x1827))+(((6.9)*x1826))+(((-1.0)*px*x1822))))+IKsqr(((((-1.0)*py*x1822))+(((-1.0)*x1825*x1828))+(((-1.0)*x1823*x1828))+(((6.9)*x1825))+(((6.9)*x1823))+(((-1.0)*px*x1824))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((py*x1824))+((x1827*x1828))+(((-1.0)*x1826*x1828))+(((-6.9)*x1827))+(((6.9)*x1826))+(((-1.0)*px*x1822))), ((((-1.0)*py*x1822))+(((-1.0)*x1825*x1828))+(((-1.0)*x1823*x1828))+(((6.9)*x1825))+(((6.9)*x1823))+(((-1.0)*px*x1824))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1829=IKsin(j6);
IkReal x1830=IKcos(j6);
IkReal x1831=((1.0)*r01);
IkReal x1832=((0.069)*cj0);
IkReal x1833=(r00*sj3);
IkReal x1834=(cj3*r00);
IkReal x1835=(r01*sj3);
IkReal x1836=(cj2*sj1);
IkReal x1837=((1.0)*sj0);
IkReal x1838=((0.069)*sj0);
IkReal x1839=(cj3*r01);
IkReal x1840=(cj4*x1830);
IkReal x1841=(sj4*x1829);
IkReal x1842=(r01*x1830);
IkReal x1843=(sj4*x1830);
IkReal x1844=(cj4*x1829);
IkReal x1845=((0.01)*x1829);
evalcond[0]=((((-1.0)*x1832*x1836))+(((-1.0)*r00*x1845))+(((-1.0)*px))+x1832+(((-0.01)*x1842)));
evalcond[1]=((((-1.0)*x1836*x1838))+(((-1.0)*py))+((r01*x1845))+x1838+(((-0.01)*r00*x1830)));
evalcond[2]=((((-1.0)*x1831*x1844))+((r00*x1841))+((r00*x1840))+((sj4*x1842))+(((-1.0)*cj2*x1837)));
evalcond[3]=(((x1833*x1844))+(((-1.0)*x1833*x1843))+((x1835*x1840))+((x1835*x1841)));
evalcond[4]=((((-1.0)*sj3*x1831*x1844))+((x1833*x1841))+((x1833*x1840))+((x1835*x1843)));
evalcond[5]=((((-1.0)*r00*x1844))+(((-1.0)*x1831*x1840))+(((-1.0)*x1831*x1841))+((cj0*cj2))+((r00*x1843)));
evalcond[6]=(((x1834*x1840))+((x1834*x1841))+(((-1.0)*x1836*x1837))+((x1839*x1843))+(((-1.0)*cj3*x1831*x1844)));
evalcond[7]=(((x1834*x1844))+((x1839*x1841))+((x1839*x1840))+(((-1.0)*cj0*x1836))+(((-1.0)*x1834*x1843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1846=(cj5*r22);
IkReal x1847=((1.0)*sj3);
IkReal x1848=(r22*sj5);
IkReal x1849=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.01)*x1848))+(((-1.0)*pz))+(((0.37429)*x1846))+(((-0.069)*x1849))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((cj3*x1846))+(((-1.0)*x1847*x1848)));
evalcond[4]=((((-1.0)*cj3*x1848))+(((-1.0)*x1849))+(((-1.0)*x1846*x1847)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1850=(cj2*r01);
IkReal x1851=(cj2*r00);
if( IKabs(((((-1.0)*sj0*x1850))+((cj0*x1851)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x1851))+((cj0*x1850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x1850))+((cj0*x1851))))+IKsqr((((sj0*x1851))+((cj0*x1850))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj0*x1850))+((cj0*x1851))), (((sj0*x1851))+((cj0*x1850))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1852=IKcos(j6);
IkReal x1853=IKsin(j6);
IkReal x1854=((0.01)*cj5);
IkReal x1855=((0.069)*cj0);
IkReal x1856=((1.0)*cj5);
IkReal x1857=(cj3*sj5);
IkReal x1858=((0.37429)*sj5);
IkReal x1859=((0.069)*sj0);
IkReal x1860=(cj2*sj1);
IkReal x1861=(sj3*sj5);
IkReal x1862=(r00*x1852);
IkReal x1863=(r00*x1853);
IkReal x1864=(r01*x1852);
IkReal x1865=(r01*x1853);
IkReal x1866=((1.0)*x1860);
evalcond[0]=(((cj0*cj2))+(((-1.0)*x1864))+(((-1.0)*x1863)));
evalcond[1]=((((-1.0)*cj2*sj0))+x1862+(((-1.0)*x1865)));
evalcond[2]=(((cj5*sj3*x1865))+(((-1.0)*sj3*x1856*x1862))+((x1857*x1865))+(((-1.0)*x1857*x1862)));
evalcond[3]=((((-1.0)*sj3*x1856*x1863))+(((-1.0)*sj3*x1856*x1864))+(((-1.0)*x1857*x1864))+(((-1.0)*x1857*x1863)));
evalcond[4]=((((-1.0)*x1861*x1865))+((cj3*cj5*x1865))+(((-1.0)*sj0*x1866))+((x1861*x1862))+(((-1.0)*cj3*x1856*x1862)));
evalcond[5]=((((-1.0)*cj0*x1866))+((x1861*x1863))+((x1861*x1864))+(((-1.0)*cj3*x1856*x1864))+(((-1.0)*cj3*x1856*x1863)));
evalcond[6]=((((-1.0)*x1855*x1860))+(((-1.0)*px))+x1855+((x1854*x1864))+((x1854*x1863))+(((-1.0)*x1858*x1863))+(((-1.0)*x1858*x1864)));
evalcond[7]=((((-1.0)*x1854*x1865))+((x1858*x1865))+(((-1.0)*py))+x1859+((x1854*x1862))+(((-1.0)*x1859*x1860))+(((-1.0)*x1858*x1862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1867=(r22*sj3);
IkReal x1868=(cj1*cj2);
IkReal x1869=(cj5*r22);
IkReal x1870=(r22*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.01)*x1870))+(((-1.0)*pz))+(((-0.069)*x1868))+(((0.37429)*x1869))+(((-0.36442)*sj1)));
evalcond[3]=(((cj3*x1869))+sj1+((sj5*x1867)));
evalcond[4]=(((cj3*x1870))+(((-1.0)*x1868))+(((-1.0)*cj5*x1867)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1871=(cj2*sj0);
IkReal x1872=((1.0)*r00);
IkReal x1873=(cj0*cj2);
if( IKabs(((((-1.0)*x1872*x1873))+((r01*x1871)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1873))+(((-1.0)*x1871*x1872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1872*x1873))+((r01*x1871))))+IKsqr(((((-1.0)*r01*x1873))+(((-1.0)*x1871*x1872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x1872*x1873))+((r01*x1871))), ((((-1.0)*r01*x1873))+(((-1.0)*x1871*x1872))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1874=IKsin(j6);
IkReal x1875=IKcos(j6);
IkReal x1876=((0.069)*cj0);
IkReal x1877=((1.0)*cj3);
IkReal x1878=(cj0*cj2);
IkReal x1879=(cj5*sj3);
IkReal x1880=((1.0)*sj1);
IkReal x1881=(cj2*sj0);
IkReal x1882=((0.01)*cj5);
IkReal x1883=(sj3*sj5);
IkReal x1884=((0.37429)*sj5);
IkReal x1885=(cj3*cj5);
IkReal x1886=(r01*x1874);
IkReal x1887=(r01*x1875);
IkReal x1888=(r00*x1875);
IkReal x1889=(r00*x1874);
IkReal x1890=(cj5*x1888);
IkReal x1891=(sj5*x1887);
IkReal x1892=(sj5*x1889);
evalcond[0]=(x1878+x1889+x1887);
evalcond[1]=(x1886+(((-1.0)*x1881))+(((-1.0)*x1888)));
evalcond[2]=(((x1879*x1887))+((x1879*x1889))+(((-1.0)*x1877*x1892))+(((-1.0)*x1877*x1891)));
evalcond[3]=(((x1879*x1888))+(((-1.0)*x1879*x1886))+((cj3*sj5*x1886))+(((-1.0)*sj5*x1877*x1888)));
evalcond[4]=(((x1883*x1887))+((x1883*x1889))+(((-1.0)*x1878*x1880))+((x1885*x1887))+((x1885*x1889)));
evalcond[5]=((((-1.0)*x1883*x1886))+(((-1.0)*x1880*x1881))+((x1883*x1888))+(((-1.0)*cj5*x1877*x1886))+((x1885*x1888)));
evalcond[6]=(((x1882*x1887))+((x1882*x1889))+(((-1.0)*px))+(((-1.0)*cj2*sj1*x1876))+(((-1.0)*x1884*x1887))+(((-1.0)*x1884*x1889))+x1876);
evalcond[7]=((((-1.0)*x1882*x1886))+(((-0.069)*sj1*x1881))+((x1882*x1888))+(((-1.0)*py))+(((-1.0)*x1884*x1888))+(((0.069)*sj0))+((x1884*x1886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1893=(cj1*cj2);
IkReal x1894=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22)));
evalcond[2]=((((-0.069)*x1893))+(((-1.0)*pz))+(((0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1894)));
evalcond[4]=((((-1.0)*cj2*sj0))+((cj0*x1894)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1893);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1895=((0.184349034171364)*cj0);
IkReal x1896=((2.67172513291833)*r00);
IkReal x1897=(r01*sj2);
IkReal x1898=((0.184349034171364)*sj0);
IkReal x1899=(r00*sj2);
IkReal x1900=((2.67172513291833)*r01);
if( IKabs(((((-1.0)*px*x1896))+((r00*x1895))+((py*x1900))+(((-1.0)*x1898*x1899))+(((-1.0)*x1895*x1897))+(((-1.0)*r01*x1898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1897*x1898))+((r01*x1895))+((r00*x1898))+(((-1.0)*px*x1900))+((x1895*x1899))+(((-1.0)*py*x1896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*px*x1896))+((r00*x1895))+((py*x1900))+(((-1.0)*x1898*x1899))+(((-1.0)*x1895*x1897))+(((-1.0)*r01*x1898))))+IKsqr(((((-1.0)*x1897*x1898))+((r01*x1895))+((r00*x1898))+(((-1.0)*px*x1900))+((x1895*x1899))+(((-1.0)*py*x1896))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*px*x1896))+((r00*x1895))+((py*x1900))+(((-1.0)*x1898*x1899))+(((-1.0)*x1895*x1897))+(((-1.0)*r01*x1898))), ((((-1.0)*x1897*x1898))+((r01*x1895))+((r00*x1898))+(((-1.0)*px*x1900))+((x1895*x1899))+(((-1.0)*py*x1896))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1901=IKsin(j6);
IkReal x1902=IKcos(j6);
IkReal x1903=((1.0)*r01);
IkReal x1904=((0.069)*sj2);
IkReal x1905=((0.37429)*r01);
IkReal x1906=((1.0)*r00);
IkReal x1907=((0.37429)*r00);
IkReal x1908=(cj3*x1902);
IkReal x1909=(sj3*x1901);
IkReal x1910=(sj3*x1902);
IkReal x1911=(cj3*r00*x1901);
IkReal x1912=(x1906*x1908);
IkReal x1913=(((r00*x1909))+((r01*x1910))+((cj3*r01*x1901)));
evalcond[0]=((((-1.0)*x1902*x1905))+(((-1.0)*x1901*x1907))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*sj0*x1904)));
evalcond[1]=((((-1.0)*x1902*x1907))+((x1901*x1905))+(((-1.0)*py))+((cj0*x1904))+(((0.069)*sj0)));
evalcond[2]=(x1913+(((-1.0)*x1912)));
evalcond[3]=((((-1.0)*cj3*x1901*x1906))+((r01*x1909))+(((-1.0)*x1903*x1908))+(((-1.0)*x1906*x1910)));
evalcond[4]=(((r01*x1908))+(((-1.0)*x1903*x1909))+((r00*x1910))+x1911+((cj0*sj2)));
evalcond[5]=(x1913+(((-1.0)*sj0*sj2))+(((-1.0)*x1912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1914=(cj1*cj2);
IkReal x1915=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+r22);
evalcond[2]=((((-1.0)*pz))+(((0.01)*r22))+(((-0.069)*x1914))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1915)));
evalcond[4]=((((-1.0)*cj2*sj0))+((cj0*x1915)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1914);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1916=((0.184349034171364)*cj0);
IkReal x1917=((2.67172513291833)*r00);
IkReal x1918=(r01*sj2);
IkReal x1919=((0.184349034171364)*sj0);
IkReal x1920=(r00*sj2);
IkReal x1921=((2.67172513291833)*r01);
if( IKabs(((((-1.0)*r01*x1919))+((r00*x1916))+(((-1.0)*px*x1917))+(((-1.0)*x1919*x1920))+(((-1.0)*x1916*x1918))+((py*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*py*x1917))+((r00*x1919))+((r01*x1916))+(((-1.0)*px*x1921))+((x1916*x1920))+(((-1.0)*x1918*x1919)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1919))+((r00*x1916))+(((-1.0)*px*x1917))+(((-1.0)*x1919*x1920))+(((-1.0)*x1916*x1918))+((py*x1921))))+IKsqr(((((-1.0)*py*x1917))+((r00*x1919))+((r01*x1916))+(((-1.0)*px*x1921))+((x1916*x1920))+(((-1.0)*x1918*x1919))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*r01*x1919))+((r00*x1916))+(((-1.0)*px*x1917))+(((-1.0)*x1919*x1920))+(((-1.0)*x1916*x1918))+((py*x1921))), ((((-1.0)*py*x1917))+((r00*x1919))+((r01*x1916))+(((-1.0)*px*x1921))+((x1916*x1920))+(((-1.0)*x1918*x1919))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1922=IKsin(j6);
IkReal x1923=IKcos(j6);
IkReal x1924=((1.0)*r01);
IkReal x1925=((0.069)*sj2);
IkReal x1926=((1.0)*r00);
IkReal x1927=((0.37429)*r01);
IkReal x1928=(cj3*x1923);
IkReal x1929=(r00*x1923);
IkReal x1930=(sj3*x1922);
IkReal x1931=(sj3*x1923);
IkReal x1932=(cj3*x1922);
IkReal x1933=(sj3*x1929);
IkReal x1934=(((x1924*x1930))+((x1926*x1932))+((x1924*x1928)));
evalcond[0]=((((-1.0)*sj0*x1925))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*x1923*x1927))+(((-0.37429)*r00*x1922)));
evalcond[1]=((((-0.37429)*x1929))+((cj0*x1925))+(((-1.0)*py))+(((0.069)*sj0))+((x1922*x1927)));
evalcond[2]=(x1933+(((-1.0)*x1934)));
evalcond[3]=(((r01*x1932))+(((-1.0)*x1924*x1931))+(((-1.0)*x1926*x1930))+(((-1.0)*x1926*x1928)));
evalcond[4]=(((r00*x1928))+((r00*x1930))+((r01*x1931))+(((-1.0)*x1924*x1932))+(((-1.0)*sj0*sj2)));
evalcond[5]=(x1933+((cj0*sj2))+(((-1.0)*x1934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1935=(cj1*cj2);
IkReal x1936=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+r22);
evalcond[2]=((((-1.0)*pz))+(((-0.01)*r22))+(((-0.069)*x1935))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1936)));
evalcond[4]=((((-1.0)*cj2*sj0))+((cj0*x1936)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1935);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1937=((0.184349034171364)*cj0);
IkReal x1938=((2.67172513291833)*r00);
IkReal x1939=(r01*sj2);
IkReal x1940=((0.184349034171364)*sj0);
IkReal x1941=(r00*sj2);
IkReal x1942=((2.67172513291833)*r01);
if( IKabs((((px*x1938))+((x1940*x1941))+(((-1.0)*py*x1942))+((r01*x1940))+((x1937*x1939))+(((-1.0)*r00*x1937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1937))+(((-1.0)*x1937*x1941))+((x1939*x1940))+((px*x1942))+((py*x1938))+(((-1.0)*r00*x1940)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1938))+((x1940*x1941))+(((-1.0)*py*x1942))+((r01*x1940))+((x1937*x1939))+(((-1.0)*r00*x1937))))+IKsqr(((((-1.0)*r01*x1937))+(((-1.0)*x1937*x1941))+((x1939*x1940))+((px*x1942))+((py*x1938))+(((-1.0)*r00*x1940))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((px*x1938))+((x1940*x1941))+(((-1.0)*py*x1942))+((r01*x1940))+((x1937*x1939))+(((-1.0)*r00*x1937))), ((((-1.0)*r01*x1937))+(((-1.0)*x1937*x1941))+((x1939*x1940))+((px*x1942))+((py*x1938))+(((-1.0)*r00*x1940))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1943=IKcos(j6);
IkReal x1944=IKsin(j6);
IkReal x1945=((0.069)*cj0);
IkReal x1946=((0.069)*sj0);
IkReal x1947=(cj3*r00);
IkReal x1948=(r01*sj3);
IkReal x1949=(cj3*r01);
IkReal x1950=((0.37429)*r00);
IkReal x1951=((0.37429)*r01);
IkReal x1952=((1.0)*x1943);
IkReal x1953=(x1943*x1949);
IkReal x1954=(x1944*x1948);
IkReal x1955=(x1944*x1947);
IkReal x1956=(r00*sj3*x1944);
IkReal x1957=(r00*sj3*x1952);
IkReal x1958=(x1955+x1954+x1953);
evalcond[0]=(((x1943*x1951))+(((-1.0)*sj2*x1946))+((x1944*x1950))+(((-1.0)*px))+x1945);
evalcond[1]=(((x1943*x1950))+((sj2*x1945))+(((-1.0)*x1944*x1951))+(((-1.0)*py))+x1946);
evalcond[2]=((((-1.0)*x1957))+x1958);
evalcond[3]=(((x1943*x1948))+((x1943*x1947))+(((-1.0)*x1944*x1949))+x1956);
evalcond[4]=((((-1.0)*x1957))+x1958+((cj0*sj2)));
evalcond[5]=((((-1.0)*x1948*x1952))+((x1944*x1949))+(((-1.0)*x1947*x1952))+(((-1.0)*x1956))+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1959=(cj1*cj2);
IkReal x1960=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22)));
evalcond[2]=((((-1.0)*pz))+(((-0.01)*r22))+(((-0.069)*x1959))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1960)));
evalcond[4]=(((cj0*x1960))+(((-1.0)*cj2*sj0)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1959);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1961=((0.184349034171364)*cj0);
IkReal x1962=((2.67172513291833)*r00);
IkReal x1963=(r01*sj2);
IkReal x1964=((0.184349034171364)*sj0);
IkReal x1965=(r00*sj2);
IkReal x1966=((2.67172513291833)*r01);
if( IKabs((((px*x1962))+((x1964*x1965))+(((-1.0)*r00*x1961))+((r01*x1964))+((x1961*x1963))+(((-1.0)*py*x1966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((px*x1966))+(((-1.0)*r00*x1964))+(((-1.0)*r01*x1961))+((py*x1962))+(((-1.0)*x1961*x1965))+((x1963*x1964)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1962))+((x1964*x1965))+(((-1.0)*r00*x1961))+((r01*x1964))+((x1961*x1963))+(((-1.0)*py*x1966))))+IKsqr((((px*x1966))+(((-1.0)*r00*x1964))+(((-1.0)*r01*x1961))+((py*x1962))+(((-1.0)*x1961*x1965))+((x1963*x1964))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((px*x1962))+((x1964*x1965))+(((-1.0)*r00*x1961))+((r01*x1964))+((x1961*x1963))+(((-1.0)*py*x1966))), (((px*x1966))+(((-1.0)*r00*x1964))+(((-1.0)*r01*x1961))+((py*x1962))+(((-1.0)*x1961*x1965))+((x1963*x1964))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1967=IKcos(j6);
IkReal x1968=IKsin(j6);
IkReal x1969=((0.069)*cj0);
IkReal x1970=((0.069)*sj0);
IkReal x1971=(cj3*x1967);
IkReal x1972=(r00*x1967);
IkReal x1973=(r01*x1968);
IkReal x1974=(r00*x1971);
IkReal x1975=((1.0)*sj3*x1968);
IkReal x1976=((1.0)*r01*x1967);
IkReal x1977=(cj3*r00*x1968);
IkReal x1978=(r00*x1975);
IkReal x1979=(sj3*x1976);
IkReal x1980=((1.0)*cj3*x1973);
IkReal x1981=(x1980+x1979+x1978);
evalcond[0]=((((0.37429)*r01*x1967))+(((-1.0)*sj2*x1970))+(((0.37429)*r00*x1968))+(((-1.0)*px))+x1969);
evalcond[1]=(((sj2*x1969))+(((-0.37429)*x1973))+(((-1.0)*py))+x1970+(((0.37429)*x1972)));
evalcond[2]=(((sj3*x1972))+x1977+((r01*x1971))+(((-1.0)*sj3*x1973)));
evalcond[3]=((((-1.0)*x1981))+x1974);
evalcond[4]=(((sj3*x1973))+(((-1.0)*x1977))+(((-1.0)*r01*x1971))+((cj0*sj2))+(((-1.0)*sj3*x1972)));
evalcond[5]=((((-1.0)*x1981))+x1974+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1982=((1.0)*r01);
IkReal x1983=(cj4*r00);
IkReal x1984=(cj1*sj0);
IkReal x1985=(cj4*r01);
IkReal x1986=(sj3*sj4);
IkReal x1987=(cj3*sj5);
IkReal x1988=((1.0)*cj5);
IkReal x1989=(r00*sj4);
IkReal x1990=((1.0)*r00);
IkReal x1991=(cj2*sj0);
IkReal x1992=(sj3*x1991);
IkReal x1993=(cj0*sj1*sj2);
CheckValue<IkReal> x1994=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*cj5*x1986*x1988))+((cj4*x1986))+(((-1.0)*sj4*x1987*x1988)))),-1);
if(!x1994.valid){
continue;
}
CheckValue<IkReal> x1995 = IKatan2WithCheck(IkReal((((r00*x1987*x1991))+(((-1.0)*x1987*x1990*x1993))+(((-1.0)*cj5*sj4*x1982*x1984))+(((-1.0)*x1982*x1986*x1991))+((r01*x1986*x1993))+((cj5*x1983*x1992))+((x1983*x1984))+(((-1.0)*sj3*x1983*x1988*x1993)))),((((-1.0)*x1986*x1990*x1993))+((x1984*x1985))+((r00*x1986*x1991))+(((-1.0)*x1982*x1987*x1993))+(((-1.0)*cj4*cj5*sj3*x1982*x1993))+((cj5*x1984*x1989))+((cj5*x1985*x1992))+((r01*x1987*x1991))),IKFAST_ATAN2_MAGTHRESH);
if(!x1995.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1994.value)))+(x1995.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1996=IKcos(j6);
IkReal x1997=IKsin(j6);
IkReal x1998=((1.0)*cj4);
IkReal x1999=((0.36442)*cj1);
IkReal x2000=((0.069)*cj0);
IkReal x2001=(r00*sj4);
IkReal x2002=(sj3*sj5);
IkReal x2003=((1.0)*cj0);
IkReal x2004=(cj0*sj2);
IkReal x2005=((1.0)*sj4);
IkReal x2006=((1.0)*cj3);
IkReal x2007=(r01*sj4);
IkReal x2008=(cj2*sj1);
IkReal x2009=((0.37429)*sj5);
IkReal x2010=((0.069)*sj0);
IkReal x2011=(r01*sj5);
IkReal x2012=((1.0)*sj0);
IkReal x2013=(r01*x1996);
IkReal x2014=(sj3*x1997);
IkReal x2015=(cj4*cj5*r01);
IkReal x2016=(cj5*x1997);
IkReal x2017=(cj3*x1997);
IkReal x2018=(r00*x1997);
IkReal x2019=(r00*x1996);
IkReal x2020=(r01*x1997);
IkReal x2021=(cj5*x2019);
evalcond[0]=(((cj0*cj2))+(((-1.0)*cj5*x1996*x2001))+(((-1.0)*x1998*x2018))+(((-1.0)*x1998*x2013))+((sj0*sj1*sj2))+((x2007*x2016)));
evalcond[1]=((((-1.0)*x1998*x2020))+(((-1.0)*cj5*x2005*x2013))+(((-1.0)*x2001*x2016))+((sj1*x2004))+(((-1.0)*cj2*x2012))+((cj4*x2019)));
evalcond[2]=((((-1.0)*x2009*x2018))+(((-1.0)*x2009*x2013))+((cj0*x1999))+x2000+(((0.01)*r00*x2016))+(((-1.0)*px))+(((-1.0)*x2000*x2008))+(((-1.0)*sj2*x2010))+(((0.01)*cj5*x2013)));
evalcond[3]=((((-1.0)*x2008*x2010))+((sj0*x1999))+(((-1.0)*x2009*x2019))+((sj2*x2000))+(((-0.01)*r01*x2016))+(((0.01)*x2021))+x2010+((x2009*x2020))+(((-1.0)*py)));
evalcond[4]=(((x2014*x2015))+((x2011*x2017))+(((-1.0)*cj1*x2012))+((sj3*x1996*x2007))+(((-1.0)*sj5*x2006*x2019))+((x2001*x2014))+(((-1.0)*sj3*x1998*x2021)));
evalcond[5]=((((-1.0)*x1996*x2006*x2011))+(((-1.0)*cj5*r00*x1998*x2014))+(((-1.0)*cj5*sj3*x1998*x2013))+(((-1.0)*sj3*x1996*x2001))+(((-1.0)*cj1*x2003))+(((-1.0)*sj5*x2006*x2018))+((x2007*x2014)));
evalcond[6]=((((-1.0)*x2008*x2012))+((x2015*x2017))+(((-1.0)*x2002*x2020))+x2004+((x2002*x2019))+(((-1.0)*cj3*x1998*x2021))+((x2001*x2017))+((cj3*x1996*x2007)));
evalcond[7]=((((-1.0)*cj3*r00*x1998*x2016))+(((-1.0)*x2003*x2008))+(((-1.0)*cj3*cj5*x1998*x2013))+((x2002*x2018))+((x2002*x2013))+(((-1.0)*x1996*x2001*x2006))+(((-1.0)*sj2*x2012))+((x2007*x2017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2022=(sj1*sj2);
IkReal x2023=(r01*sj0);
IkReal x2024=(sj3*sj4);
IkReal x2025=(cj0*cj2);
IkReal x2026=((1.0)*cj5*sj3);
IkReal x2027=(cj4*r00*sj0);
IkReal x2028=((1.0)*cj3*sj5);
IkReal x2029=((1.0)*r00*sj0);
IkReal x2030=(cj1*cj5*sj4);
CheckValue<IkReal> x2031=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*x2028))+(((-1.0)*x2026)))),-1);
if(!x2031.valid){
continue;
}
CheckValue<IkReal> x2032 = IKatan2WithCheck(IkReal((((x2022*x2023*x2024))+(((-1.0)*x2029*x2030))+(((-1.0)*cj1*cj4*x2023))+(((-1.0)*x2022*x2026*x2027))+(((-1.0)*r00*sj0*x2022*x2028))+(((-1.0)*r00*x2025*x2028))+(((-1.0)*cj4*r00*x2025*x2026))+((r01*x2024*x2025)))),((((-1.0)*cj4*r01*x2025*x2026))+(((-1.0)*cj4*x2022*x2023*x2026))+(((-1.0)*r00*x2024*x2025))+(((-1.0)*x2023*x2030))+(((-1.0)*x2022*x2023*x2028))+(((-1.0)*x2022*x2024*x2029))+((cj1*x2027))+(((-1.0)*r01*x2025*x2028))),IKFAST_ATAN2_MAGTHRESH);
if(!x2032.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2031.value)))+(x2032.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2033=IKcos(j6);
IkReal x2034=IKsin(j6);
IkReal x2035=((1.0)*cj4);
IkReal x2036=((0.36442)*cj1);
IkReal x2037=((0.069)*cj0);
IkReal x2038=(r00*sj4);
IkReal x2039=(sj3*sj5);
IkReal x2040=((1.0)*cj0);
IkReal x2041=(cj0*sj2);
IkReal x2042=((1.0)*sj4);
IkReal x2043=((1.0)*cj3);
IkReal x2044=(r01*sj4);
IkReal x2045=(cj2*sj1);
IkReal x2046=((0.37429)*sj5);
IkReal x2047=((0.069)*sj0);
IkReal x2048=(r01*sj5);
IkReal x2049=((1.0)*sj0);
IkReal x2050=(r01*x2033);
IkReal x2051=(sj3*x2034);
IkReal x2052=(cj4*cj5*r01);
IkReal x2053=(cj5*x2034);
IkReal x2054=(cj3*x2034);
IkReal x2055=(r00*x2034);
IkReal x2056=(r00*x2033);
IkReal x2057=(r01*x2034);
IkReal x2058=(cj5*x2056);
evalcond[0]=(((cj0*cj2))+((x2044*x2053))+((sj0*sj1*sj2))+(((-1.0)*cj5*x2033*x2038))+(((-1.0)*x2035*x2050))+(((-1.0)*x2035*x2055)));
evalcond[1]=((((-1.0)*cj2*x2049))+((cj4*x2056))+(((-1.0)*x2038*x2053))+((sj1*x2041))+(((-1.0)*x2035*x2057))+(((-1.0)*cj5*x2042*x2050)));
evalcond[2]=(x2037+(((-1.0)*sj2*x2047))+(((-1.0)*x2046*x2055))+(((-1.0)*x2046*x2050))+(((-1.0)*px))+((cj0*x2036))+(((0.01)*r00*x2053))+(((0.01)*cj5*x2050))+(((-1.0)*x2037*x2045)));
evalcond[3]=((((0.01)*x2058))+((sj2*x2037))+x2047+(((-1.0)*x2045*x2047))+(((-1.0)*x2046*x2056))+(((-1.0)*py))+((sj0*x2036))+((x2046*x2057))+(((-0.01)*r01*x2053)));
evalcond[4]=((((-1.0)*sj3*x2035*x2058))+((sj3*x2033*x2044))+((x2038*x2051))+(((-1.0)*sj5*x2043*x2056))+((x2048*x2054))+((x2051*x2052))+(((-1.0)*cj1*x2049)));
evalcond[5]=((((-1.0)*cj5*r00*x2035*x2051))+(((-1.0)*sj3*x2033*x2038))+(((-1.0)*x2033*x2043*x2048))+(((-1.0)*sj5*x2043*x2055))+((x2044*x2051))+(((-1.0)*cj5*sj3*x2035*x2050))+(((-1.0)*cj1*x2040)));
evalcond[6]=(((x2052*x2054))+x2041+(((-1.0)*x2045*x2049))+((x2038*x2054))+((cj3*x2033*x2044))+(((-1.0)*x2039*x2057))+((x2039*x2056))+(((-1.0)*cj3*x2035*x2058)));
evalcond[7]=((((-1.0)*cj3*r00*x2035*x2053))+(((-1.0)*sj2*x2049))+((x2044*x2054))+(((-1.0)*x2040*x2045))+(((-1.0)*x2033*x2038*x2043))+((x2039*x2050))+((x2039*x2055))+(((-1.0)*cj3*cj5*x2035*x2050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2059=cj4*cj4;
IkReal x2060=cj5*cj5;
IkReal x2061=(cj5*sj4);
IkReal x2062=((1.0)*r00);
IkReal x2063=(cj2*sj0);
IkReal x2064=(cj4*r01);
IkReal x2065=(cj4*r00);
IkReal x2066=(cj0*cj2);
IkReal x2067=((1.0)*r01);
IkReal x2068=(cj0*sj1*sj2);
IkReal x2069=(sj0*sj1*sj2);
CheckValue<IkReal> x2070=IKPowWithIntegerCheck(IKsign((x2060+x2059+(((-1.0)*x2059*x2060)))),-1);
if(!x2070.valid){
continue;
}
CheckValue<IkReal> x2071 = IKatan2WithCheck(IkReal((((r00*x2061*x2068))+(((-1.0)*x2063*x2064))+(((-1.0)*x2061*x2066*x2067))+(((-1.0)*x2061*x2067*x2069))+((x2064*x2068))+(((-1.0)*x2061*x2062*x2063))+((x2065*x2069))+((x2065*x2066)))),(((r00*x2061*x2069))+((r00*x2061*x2066))+((r01*x2061*x2068))+(((-1.0)*cj4*x2062*x2068))+(((-1.0)*x2061*x2063*x2067))+((x2063*x2065))+((x2064*x2069))+((x2064*x2066))),IKFAST_ATAN2_MAGTHRESH);
if(!x2071.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2070.value)))+(x2071.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2072=IKcos(j6);
IkReal x2073=IKsin(j6);
IkReal x2074=((1.0)*cj4);
IkReal x2075=((0.36442)*cj1);
IkReal x2076=((0.069)*cj0);
IkReal x2077=(r00*sj4);
IkReal x2078=(sj3*sj5);
IkReal x2079=((1.0)*cj0);
IkReal x2080=(cj0*sj2);
IkReal x2081=((1.0)*sj4);
IkReal x2082=((1.0)*cj3);
IkReal x2083=(r01*sj4);
IkReal x2084=(cj2*sj1);
IkReal x2085=((0.37429)*sj5);
IkReal x2086=((0.069)*sj0);
IkReal x2087=(r01*sj5);
IkReal x2088=((1.0)*sj0);
IkReal x2089=(r01*x2072);
IkReal x2090=(sj3*x2073);
IkReal x2091=(cj4*cj5*r01);
IkReal x2092=(cj5*x2073);
IkReal x2093=(cj3*x2073);
IkReal x2094=(r00*x2073);
IkReal x2095=(r00*x2072);
IkReal x2096=(r01*x2073);
IkReal x2097=(cj5*x2095);
evalcond[0]=((((-1.0)*cj5*x2072*x2077))+(((-1.0)*x2074*x2094))+(((-1.0)*x2074*x2089))+((cj0*cj2))+((x2083*x2092))+((sj0*sj1*sj2)));
evalcond[1]=((((-1.0)*x2074*x2096))+(((-1.0)*cj5*x2081*x2089))+((sj1*x2080))+(((-1.0)*cj2*x2088))+((cj4*x2095))+(((-1.0)*x2077*x2092)));
evalcond[2]=((((-1.0)*sj2*x2086))+(((0.01)*r00*x2092))+x2076+(((-1.0)*x2085*x2089))+(((-1.0)*x2076*x2084))+(((0.01)*cj5*x2089))+(((-1.0)*px))+(((-1.0)*x2085*x2094))+((cj0*x2075)));
evalcond[3]=(((sj2*x2076))+x2086+(((-1.0)*x2084*x2086))+(((-0.01)*r01*x2092))+(((-1.0)*py))+(((0.01)*x2097))+((sj0*x2075))+(((-1.0)*x2085*x2095))+((x2085*x2096)));
evalcond[4]=((((-1.0)*cj1*x2088))+((x2077*x2090))+((x2087*x2093))+(((-1.0)*sj3*x2074*x2097))+((sj3*x2072*x2083))+((x2090*x2091))+(((-1.0)*sj5*x2082*x2095)));
evalcond[5]=((((-1.0)*cj5*r00*x2074*x2090))+(((-1.0)*x2072*x2082*x2087))+(((-1.0)*sj5*x2082*x2094))+(((-1.0)*sj3*x2072*x2077))+((x2083*x2090))+(((-1.0)*cj5*sj3*x2074*x2089))+(((-1.0)*cj1*x2079)));
evalcond[6]=(((x2091*x2093))+x2080+(((-1.0)*x2084*x2088))+((x2077*x2093))+((x2078*x2095))+((cj3*x2072*x2083))+(((-1.0)*x2078*x2096))+(((-1.0)*cj3*x2074*x2097)));
evalcond[7]=((((-1.0)*sj2*x2088))+((x2078*x2089))+(((-1.0)*x2072*x2077*x2082))+((x2078*x2094))+(((-1.0)*cj3*cj5*x2074*x2089))+((x2083*x2093))+(((-1.0)*x2079*x2084))+(((-1.0)*cj3*r00*x2074*x2092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x2098=((0.37429)*sj5);
IkReal x2099=((0.01)*cj5);
IkReal x2100=((((-1.0)*r21*x2098))+((r21*x2099)));
IkReal x2101=(((r20*x2099))+(((-1.0)*r20*x2098)));
CheckValue<IkReal> x2104 = IKatan2WithCheck(IkReal(x2100),x2101,IKFAST_ATAN2_MAGTHRESH);
if(!x2104.valid){
continue;
}
IkReal x2102=((1.0)*(x2104.value));
if((((x2101*x2101)+(x2100*x2100))) < -0.00001)
continue;
CheckValue<IkReal> x2105=IKPowWithIntegerCheck(IKabs(IKsqrt(((x2101*x2101)+(x2100*x2100)))),-1);
if(!x2105.valid){
continue;
}
if( (((x2105.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x2105.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2103=IKasin(((x2105.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1))))));
j6array[0]=((((-1.0)*x2102))+(((-1.0)*x2103)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x2102))+x2103);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j4eval[2];
IkReal x2106=cj6*cj6;
IkReal x2107=cj5*cj5;
IkReal x2108=r21*r21;
IkReal x2109=r22*r22;
IkReal x2110=r20*r20;
IkReal x2111=(cj6*r21);
IkReal x2112=(sj3*x2108);
IkReal x2113=(cj5*r22*sj5);
IkReal x2114=(sj3*x2109);
IkReal x2115=((1.0)*x2107);
IkReal x2116=((2.0)*r20*sj3*sj6);
IkReal x2117=(sj3*x2106*x2110);
IkReal x2118=((((-1.0)*x2107*x2111*x2116))+((x2106*x2112))+((x2111*x2116))+((x2107*x2114))+((x2107*x2117))+(((-1.0)*sj3*x2110*x2115))+(((-2.0)*sj3*x2111*x2113))+(((-1.0)*x2106*x2112*x2115))+(((-1.0)*x2117))+(((-1.0)*x2112))+(((-1.0)*x2114))+(((-1.0)*x2113*x2116)));
j4eval[0]=x2118;
j4eval[1]=IKsign(x2118);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2119=cj5*cj5;
IkReal x2120=cj6*cj6;
IkReal x2121=r22*r22;
IkReal x2122=r20*r20;
IkReal x2123=r21*r21;
IkReal x2124=((1.0)*cj3);
IkReal x2125=(cj6*r21);
IkReal x2126=(r20*sj6);
IkReal x2127=(cj3*x2120);
IkReal x2128=((1.0)*x2122);
IkReal x2129=(cj3*x2119);
IkReal x2130=((2.0)*cj3*cj5*r22*sj5);
IkReal x2131=((((-1.0)*x2125*x2130))+((x2123*x2127))+(((-2.0)*x2125*x2126*x2129))+(((-1.0)*x2119*x2120*x2123*x2124))+((x2119*x2122*x2127))+(((2.0)*cj3*x2125*x2126))+(((-1.0)*x2121*x2124))+((x2121*x2129))+(((-1.0)*x2119*x2122*x2124))+(((-1.0)*x2120*x2122*x2124))+(((-1.0)*x2126*x2130))+(((-1.0)*x2123*x2124)));
j4eval[0]=x2131;
j4eval[1]=IKsign(x2131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x2132=cj1*cj1;
IkReal x2133=cj2*cj2;
IkReal x2134=(cj2*sj1);
IkReal x2135=((50289.96)*cj1);
IkReal x2136=((10.5628985507246)*cj1);
IkReal x2137=(x2132*x2133);
j0eval[0]=((2.0)+(((27.8937064482252)*x2132))+(((-1.0)*x2134*x2136))+x2136+(((-2.0)*x2134))+(((-1.0)*x2137)));
j0eval[1]=IKsign(((9522.0)+(((-1.0)*x2134*x2135))+x2135+(((-4761.0)*x2137))+(((-9522.0)*x2134))+(((132801.9364)*x2132))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x2138=(cj1*cj2);
IkReal x2139=(r20*sj6);
IkReal x2140=((0.01)*cj5);
IkReal x2141=(cj5*r22);
IkReal x2142=(cj6*r21);
IkReal x2143=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x2142*x2143))+(((0.01)*r22*sj5))+(((-0.069)*x2138))+(((-1.0)*pz))+((x2140*x2142))+(((0.37429)*x2141))+(((-1.0)*x2139*x2143))+(((-0.36442)*sj1))+((x2139*x2140)));
evalcond[2]=((((-1.0)*x2141))+((sj5*x2139))+(((-1.0)*x2138))+((sj5*x2142)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2144=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x2144;
j0eval[1]=IKsign(x2144);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2145=cj5*cj5;
IkReal x2146=cj6*cj6;
IkReal x2147=r20*r20;
IkReal x2148=r21*r21;
IkReal x2149=r22*r22;
IkReal x2150=(r22*sj5);
IkReal x2151=(cj6*r20);
IkReal x2152=(cj1*sj2);
IkReal x2153=(cj6*r21);
IkReal x2154=(cj5*sj1);
IkReal x2155=(r20*sj6);
IkReal x2156=(r21*sj6);
IkReal x2157=((2.0)*x2155);
IkReal x2158=((1.0)*x2145);
IkReal x2159=(x2146*x2147);
IkReal x2160=(x2146*x2148);
IkReal x2161=((((-1.0)*x2149*x2158))+(((2.0)*x2145*x2151*x2156))+(((-2.0)*x2151*x2156))+(((2.0)*cj5*x2150*x2153))+((x2145*x2147))+((x2145*x2160))+x2159+x2149+x2148+(((-1.0)*x2158*x2159))+(((-1.0)*x2160))+((cj5*x2150*x2157)));
j4eval[0]=x2161;
j4eval[1]=((IKabs((((x2154*x2155))+((x2152*x2156))+(((-1.0)*x2151*x2152))+((sj1*x2150))+((x2153*x2154)))))+(IKabs(((((-1.0)*sj1*x2156))+((x2150*x2152))+((sj1*x2151))+((cj5*x2152*x2153))+((cj5*x2152*x2155))))));
j4eval[2]=IKsign(x2161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2162=cj1*cj1;
IkReal x2163=cj2*cj2;
IkReal x2164=(cj2*sj1);
IkReal x2165=(x2162*x2163);
j0eval[0]=((-1.0)+x2165+x2164+(((5.28144927536232)*cj1*x2164)));
j0eval[1]=IKsign(((-69.0)+(((364.42)*cj1*x2164))+(((69.0)*x2165))+(((69.0)*x2164))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2166=(cj6*sj5);
IkReal x2167=(sj5*sj6);
IkReal x2168=((0.01)*cj5);
IkReal x2169=(cj5*r22);
IkReal x2170=((1.0)*cj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.069)+((cj6*r21*x2168))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((r20*sj6*x2168))+(((0.37429)*x2169))+(((-0.37429)*r21*x2166))+(((-0.37429)*r20*x2167)));
evalcond[2]=((-1.0)+((r21*x2166))+((r20*x2167))+(((-1.0)*x2169)));
evalcond[3]=(((r10*x2167))+((r11*x2166))+(((-1.0)*r12*x2170)));
evalcond[4]=(((r00*x2167))+((r01*x2166))+(((-1.0)*r02*x2170)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2171=(r10*sj6);
IkReal x2172=((0.863573439158322)*sj5);
IkReal x2173=((0.0230723086152)*cj5);
IkReal x2174=(cj6*r11);
IkReal x2175=(r00*sj6);
IkReal x2176=((0.0230723086152)*sj5);
IkReal x2177=((0.863573439158322)*cj5);
IkReal x2178=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*x2171*x2173))+((x2172*x2174))+((x2171*x2172))+(((-1.0)*x2173*x2174))+(((-1.0)*r12*x2177))+(((-1.0)*r12*x2176)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+((x2172*x2175))+((x2172*x2178))+(((-1.0)*r02*x2177))+(((-1.0)*r02*x2176))+(((-1.0)*x2173*x2178))+(((-1.0)*x2173*x2175)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*x2171*x2173))+((x2172*x2174))+((x2171*x2172))+(((-1.0)*x2173*x2174))+(((-1.0)*r12*x2177))+(((-1.0)*r12*x2176))))+IKsqr(((((2.30723086152)*px))+((x2172*x2175))+((x2172*x2178))+(((-1.0)*r02*x2177))+(((-1.0)*r02*x2176))+(((-1.0)*x2173*x2178))+(((-1.0)*x2173*x2175))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*x2171*x2173))+((x2172*x2174))+((x2171*x2172))+(((-1.0)*x2173*x2174))+(((-1.0)*r12*x2177))+(((-1.0)*r12*x2176))), ((((2.30723086152)*px))+((x2172*x2175))+((x2172*x2178))+(((-1.0)*r02*x2177))+(((-1.0)*r02*x2176))+(((-1.0)*x2173*x2178))+(((-1.0)*x2173*x2175))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2179=((0.01)*cj5);
IkReal x2180=(cj6*r01);
IkReal x2181=((0.37429)*sj5);
IkReal x2182=(cj6*r11);
IkReal x2183=((0.01)*sj5);
IkReal x2184=(r00*sj6);
IkReal x2185=((0.37429)*cj5);
IkReal x2186=(r10*sj6);
evalcond[0]=(((x2179*x2180))+((x2179*x2184))+(((-1.0)*x2180*x2181))+(((-1.0)*px))+(((-1.0)*x2181*x2184))+((r02*x2183))+((r02*x2185))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=(((x2179*x2186))+((x2179*x2182))+(((0.43342)*(IKsin(j0))))+((r12*x2185))+((r12*x2183))+(((-1.0)*py))+(((-1.0)*x2181*x2182))+(((-1.0)*x2181*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2187=(cj0*sj6);
IkReal x2188=(cj0*cj6);
IkReal x2189=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2189;
j4eval[1]=((IKabs((((r20*x2188))+(((-1.0)*r21*x2187)))))+(IKabs((((cj5*r21*x2188))+((cj5*r20*x2187))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x2189);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2190=(r21*sj0);
IkReal x2191=(r20*sj0);
IkReal x2192=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2192;
j4eval[1]=((IKabs((((cj5*sj6*x2191))+((r22*sj0*sj5))+((cj5*cj6*x2190)))))+(IKabs((((cj6*x2191))+(((-1.0)*sj6*x2190))))));
j4eval[2]=IKsign(x2192);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2193=cj6*cj6;
IkReal x2194=cj5*cj5;
IkReal x2195=(r02*r22);
IkReal x2196=(r22*sj5);
IkReal x2197=(r00*r20);
IkReal x2198=((1.0)*r21);
IkReal x2199=(r20*sj6);
IkReal x2200=(cj6*r01);
IkReal x2201=(cj0*cj5);
IkReal x2202=(r00*sj6);
IkReal x2203=((1.0)*cj5);
IkReal x2204=(cj6*r21);
IkReal x2205=(cj5*r02*sj5);
IkReal x2206=((1.0)*x2194);
IkReal x2207=(x2193*x2194);
IkReal x2208=(((x2202*x2204))+(((-1.0)*r01*x2198))+((r01*r21*x2193))+(((-1.0)*x2196*x2200*x2203))+(((-1.0)*x2196*x2202*x2203))+((x2194*x2195))+(((-1.0)*x2195))+(((-1.0)*x2193*x2197))+(((-1.0)*x2197*x2206))+(((-1.0)*cj6*x2198*x2205))+((x2199*x2200))+(((-1.0)*r01*x2198*x2207))+((x2197*x2207))+(((-1.0)*x2199*x2200*x2206))+(((-1.0)*cj6*x2194*x2198*x2202))+(((-1.0)*r02*sj5*x2199*x2203)));
j4eval[0]=x2208;
j4eval[1]=((IKabs((((x2201*x2204))+((x2199*x2201))+((cj0*x2196)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x2198))))));
j4eval[2]=IKsign(x2208);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2209=((1.0)*cj5);
IkReal x2210=((0.01)*cj5);
IkReal x2211=(cj6*r11);
IkReal x2212=(r20*sj6);
IkReal x2213=((0.01)*sj5);
IkReal x2214=(cj6*r01);
IkReal x2215=((0.37429)*cj5);
IkReal x2216=((0.37429)*sj5);
IkReal x2217=(cj6*r21);
IkReal x2218=(r10*sj5*sj6);
IkReal x2219=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x2210*x2217))+((x2210*x2212))+(((-1.0)*pz))+(((-1.0)*x2216*x2217))+((r22*x2213))+((r22*x2215))+(((-1.0)*x2212*x2216)));
evalcond[2]=((((-1.0)*x2214*x2216))+((x2210*x2214))+((r00*sj6*x2210))+(((-1.0)*px))+(((-1.0)*r00*sj6*x2216))+((r02*x2213))+((r02*x2215)));
evalcond[3]=((0.43342)+(((-1.0)*r10*sj6*x2216))+((x2210*x2211))+((r12*x2215))+((r12*x2213))+(((-1.0)*py))+(((-1.0)*x2211*x2216))+((r10*sj6*x2210)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x2209))+((sj5*x2212))+((sj5*x2217)));
evalcond[5]=(x2218+(((-1.0)*r12*x2209))+((sj5*x2211)));
evalcond[6]=(x2219+(((-1.0)*r02*x2209))+((sj5*x2214)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2220=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2220;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2220);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2221=((1.0)*sj5);
IkReal x2222=((((-1.0)*cj6*r21*x2221))+((cj5*r22))+(((-1.0)*r20*sj6*x2221)));
j4eval[0]=x2222;
j4eval[1]=IKsign(x2222);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2223=cj6*cj6;
IkReal x2224=cj5*cj5;
IkReal x2225=r10*r10;
IkReal x2226=r11*r11;
IkReal x2227=r12*r12;
IkReal x2228=(r10*sj6);
IkReal x2229=(r12*sj5);
IkReal x2230=((2.0)*cj6*r11);
IkReal x2231=((1.0)*x2225);
IkReal x2232=(x2223*x2226);
IkReal x2233=((((-1.0)*cj5*x2229*x2230))+((x2223*x2224*x2225))+((x2228*x2230))+x2232+(((-1.0)*x2224*x2231))+(((-1.0)*x2224*x2232))+(((-1.0)*x2223*x2231))+((x2224*x2227))+(((-1.0)*x2227))+(((-1.0)*x2226))+(((-2.0)*cj5*x2228*x2229))+(((-1.0)*x2224*x2228*x2230)));
j4eval[0]=x2233;
j4eval[1]=((IKabs((x2229+((cj5*x2228))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2233);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2234=cj6*cj6;
IkReal x2235=cj5*cj5;
IkReal x2236=r10*r10;
IkReal x2237=r11*r11;
IkReal x2238=r12*r12;
IkReal x2239=(r10*sj6);
IkReal x2240=(r12*sj5);
IkReal x2241=((2.0)*cj6*r11);
IkReal x2242=(x2234*x2237);
IkReal x2243=(x2235*x2236);
CheckValue<IkReal> x2244 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x2240+((cj5*x2239))+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x2244.valid){
continue;
}
CheckValue<IkReal> x2245=IKPowWithIntegerCheck(IKsign((((x2235*x2238))+x2242+(((-1.0)*x2243))+(((-1.0)*x2234*x2236))+((x2234*x2243))+(((-1.0)*x2235*x2239*x2241))+(((-1.0)*cj5*x2240*x2241))+(((-2.0)*cj5*x2239*x2240))+(((-1.0)*x2235*x2242))+(((-1.0)*x2238))+(((-1.0)*x2237))+((x2239*x2241)))),-1);
if(!x2245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2244.value)+(((1.5707963267949)*(x2245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2246=IKsin(j4);
IkReal x2247=IKcos(j4);
IkReal x2248=(cj5*cj6);
IkReal x2249=(r11*sj6);
IkReal x2250=(cj6*r20);
IkReal x2251=(cj6*r10);
IkReal x2252=(cj5*sj6);
IkReal x2253=(r01*sj6);
IkReal x2254=(r21*sj6);
IkReal x2255=(cj6*r00);
IkReal x2256=((1.0)*x2247);
IkReal x2257=((1.0)*x2246);
IkReal x2258=(sj5*x2257);
evalcond[0]=((((-1.0)*r21*x2248*x2257))+(((-1.0)*r22*x2258))+(((-1.0)*r20*x2252*x2257))+((x2247*x2250))+(((-1.0)*x2254*x2256)));
evalcond[1]=((((-1.0)*x2249*x2256))+(((-1.0)*r11*x2248*x2257))+(((-1.0)*r12*x2258))+((x2247*x2251))+(((-1.0)*r10*x2252*x2257)));
evalcond[2]=(((x2246*x2254))+(((-1.0)*r21*x2248*x2256))+(((-1.0)*r22*sj5*x2256))+(((-1.0)*r20*x2252*x2256))+(((-1.0)*x2250*x2257)));
evalcond[3]=(((x2246*x2253))+(((-1.0)*x2255*x2257))+(((-1.0)*r01*x2248*x2256))+(((-1.0)*r02*sj5*x2256))+(((-1.0)*r00*x2252*x2256)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x2258))+(((-1.0)*r01*x2248*x2257))+(((-1.0)*x2253*x2256))+((x2247*x2255))+(((-1.0)*r00*x2252*x2257)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x2248*x2256))+((x2246*x2249))+(((-1.0)*x2251*x2257))+(((-1.0)*r12*sj5*x2256))+(((-1.0)*r10*x2252*x2256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2259=((1.0)*sj5);
CheckValue<IkReal> x2260 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2260.valid){
continue;
}
CheckValue<IkReal> x2261=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x2259))+(((-1.0)*r20*sj6*x2259)))),-1);
if(!x2261.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2260.value)+(((1.5707963267949)*(x2261.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2262=IKsin(j4);
IkReal x2263=IKcos(j4);
IkReal x2264=(cj5*cj6);
IkReal x2265=(r11*sj6);
IkReal x2266=(cj6*r20);
IkReal x2267=(cj6*r10);
IkReal x2268=(cj5*sj6);
IkReal x2269=(r01*sj6);
IkReal x2270=(r21*sj6);
IkReal x2271=(cj6*r00);
IkReal x2272=((1.0)*x2263);
IkReal x2273=((1.0)*x2262);
IkReal x2274=(sj5*x2273);
evalcond[0]=(((x2263*x2266))+(((-1.0)*x2270*x2272))+(((-1.0)*r21*x2264*x2273))+(((-1.0)*r22*x2274))+(((-1.0)*r20*x2268*x2273)));
evalcond[1]=(((x2263*x2267))+(((-1.0)*r10*x2268*x2273))+(((-1.0)*r11*x2264*x2273))+(((-1.0)*x2265*x2272))+(((-1.0)*r12*x2274)));
evalcond[2]=((((-1.0)*r22*sj5*x2272))+(((-1.0)*x2266*x2273))+(((-1.0)*r21*x2264*x2272))+((x2262*x2270))+(((-1.0)*r20*x2268*x2272)));
evalcond[3]=((((-1.0)*r00*x2268*x2272))+(((-1.0)*r01*x2264*x2272))+((x2262*x2269))+(((-1.0)*r02*sj5*x2272))+(((-1.0)*x2271*x2273)));
evalcond[4]=((-1.0)+((x2263*x2271))+(((-1.0)*r00*x2268*x2273))+(((-1.0)*r01*x2264*x2273))+(((-1.0)*x2269*x2272))+(((-1.0)*r02*x2274)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x2272))+(((-1.0)*r10*x2268*x2272))+(((-1.0)*r11*x2264*x2272))+((x2262*x2265))+(((-1.0)*x2267*x2273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2275 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2275.valid){
continue;
}
CheckValue<IkReal> x2276=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x2276.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2275.value)+(((1.5707963267949)*(x2276.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2277=IKsin(j4);
IkReal x2278=IKcos(j4);
IkReal x2279=(cj5*cj6);
IkReal x2280=(r11*sj6);
IkReal x2281=(cj6*r20);
IkReal x2282=(cj6*r10);
IkReal x2283=(cj5*sj6);
IkReal x2284=(r01*sj6);
IkReal x2285=(r21*sj6);
IkReal x2286=(cj6*r00);
IkReal x2287=((1.0)*x2278);
IkReal x2288=((1.0)*x2277);
IkReal x2289=(sj5*x2288);
evalcond[0]=(((x2278*x2281))+(((-1.0)*r21*x2279*x2288))+(((-1.0)*x2285*x2287))+(((-1.0)*r20*x2283*x2288))+(((-1.0)*r22*x2289)));
evalcond[1]=((((-1.0)*x2280*x2287))+(((-1.0)*r12*x2289))+(((-1.0)*r10*x2283*x2288))+((x2278*x2282))+(((-1.0)*r11*x2279*x2288)));
evalcond[2]=((((-1.0)*r22*sj5*x2287))+((x2277*x2285))+(((-1.0)*r21*x2279*x2287))+(((-1.0)*x2281*x2288))+(((-1.0)*r20*x2283*x2287)));
evalcond[3]=((((-1.0)*r00*x2283*x2287))+((x2277*x2284))+(((-1.0)*r02*sj5*x2287))+(((-1.0)*r01*x2279*x2287))+(((-1.0)*x2286*x2288)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x2289))+(((-1.0)*x2284*x2287))+(((-1.0)*r00*x2283*x2288))+((x2278*x2286))+(((-1.0)*r01*x2279*x2288)));
evalcond[5]=((-1.0)+(((-1.0)*x2282*x2288))+(((-1.0)*r10*x2283*x2287))+((x2277*x2280))+(((-1.0)*r12*sj5*x2287))+(((-1.0)*r11*x2279*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2290=((1.0)*cj5);
IkReal x2291=((0.01)*cj5);
IkReal x2292=(cj6*r11);
IkReal x2293=(r20*sj6);
IkReal x2294=((0.01)*sj5);
IkReal x2295=(cj6*r01);
IkReal x2296=((0.37429)*cj5);
IkReal x2297=((0.37429)*sj5);
IkReal x2298=(cj6*r21);
IkReal x2299=(r10*sj5*sj6);
IkReal x2300=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x2293*x2297))+((r22*x2294))+((r22*x2296))+((x2291*x2293))+((x2291*x2298))+(((-1.0)*pz))+(((-1.0)*x2297*x2298)));
evalcond[2]=(((x2291*x2295))+(((-1.0)*r00*sj6*x2297))+((r02*x2296))+((r02*x2294))+(((-1.0)*px))+((r00*sj6*x2291))+(((-1.0)*x2295*x2297)));
evalcond[3]=((-0.43342)+(((-1.0)*x2292*x2297))+((x2291*x2292))+((r10*sj6*x2291))+(((-1.0)*r10*sj6*x2297))+(((-1.0)*py))+((r12*x2294))+((r12*x2296)));
evalcond[4]=((-1.0)+((sj5*x2298))+((sj5*x2293))+(((-1.0)*r22*x2290)));
evalcond[5]=(x2299+((sj5*x2292))+(((-1.0)*r12*x2290)));
evalcond[6]=(x2300+(((-1.0)*r02*x2290))+((sj5*x2295)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2301=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2301;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2301);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2302=((1.0)*sj6);
IkReal x2303=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2302)));
j4eval[0]=x2303;
j4eval[1]=IKsign(x2303);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2302))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2304=r11*r11;
IkReal x2305=cj5*cj5;
IkReal x2306=cj6*cj6;
IkReal x2307=r10*r10;
IkReal x2308=r12*r12;
IkReal x2309=(r12*sj5);
IkReal x2310=(cj6*r10);
IkReal x2311=((1.0)*x2306);
IkReal x2312=(cj5*cj6*r11);
IkReal x2313=(cj5*r10*sj6);
IkReal x2314=((2.0)*r11*sj6);
IkReal x2315=(x2305*x2307);
IkReal x2316=((((-1.0)*x2304*x2311))+(((-1.0)*x2311*x2315))+x2315+x2308+x2304+((x2306*x2307))+((x2304*x2305*x2306))+(((-1.0)*x2310*x2314))+(((-1.0)*x2305*x2308))+(((2.0)*x2309*x2312))+(((2.0)*x2309*x2313))+((x2305*x2310*x2314)));
j4eval[0]=x2316;
j4eval[1]=IKsign(x2316);
j4eval[2]=((IKabs((x2312+x2313+x2309)))+(IKabs((x2310+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2317=r11*r11;
IkReal x2318=cj5*cj5;
IkReal x2319=cj6*cj6;
IkReal x2320=r10*r10;
IkReal x2321=r12*r12;
IkReal x2322=(r10*sj6);
IkReal x2323=(r12*sj5);
IkReal x2324=((1.0)*x2319);
IkReal x2325=(cj5*cj6*r11);
IkReal x2326=((2.0)*cj6*r11);
IkReal x2327=(x2318*x2320);
CheckValue<IkReal> x2328 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x2323+x2325+((cj5*x2322))),IKFAST_ATAN2_MAGTHRESH);
if(!x2328.valid){
continue;
}
CheckValue<IkReal> x2329=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2324*x2327))+(((2.0)*x2323*x2325))+(((-1.0)*x2318*x2321))+((x2319*x2320))+x2321+x2327+x2317+((x2317*x2318*x2319))+(((-1.0)*x2322*x2326))+(((2.0)*cj5*x2322*x2323))+(((-1.0)*x2317*x2324))+((x2318*x2322*x2326)))),-1);
if(!x2329.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2328.value)+(((1.5707963267949)*(x2329.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2330=IKsin(j4);
IkReal x2331=IKcos(j4);
IkReal x2332=(cj5*cj6);
IkReal x2333=(r11*sj6);
IkReal x2334=(cj6*r20);
IkReal x2335=(cj6*r10);
IkReal x2336=(cj5*sj6);
IkReal x2337=(r01*sj6);
IkReal x2338=(r21*sj6);
IkReal x2339=(cj6*r00);
IkReal x2340=((1.0)*x2331);
IkReal x2341=((1.0)*x2330);
IkReal x2342=(sj5*x2341);
evalcond[0]=(((x2331*x2334))+(((-1.0)*r21*x2332*x2341))+(((-1.0)*r20*x2336*x2341))+(((-1.0)*r22*x2342))+(((-1.0)*x2338*x2340)));
evalcond[1]=(((x2331*x2335))+(((-1.0)*x2333*x2340))+(((-1.0)*r10*x2336*x2341))+(((-1.0)*r11*x2332*x2341))+(((-1.0)*r12*x2342)));
evalcond[2]=((((-1.0)*r22*sj5*x2340))+(((-1.0)*r21*x2332*x2340))+(((-1.0)*r20*x2336*x2340))+(((-1.0)*x2334*x2341))+((x2330*x2338)));
evalcond[3]=((((-1.0)*x2339*x2341))+(((-1.0)*r02*sj5*x2340))+(((-1.0)*r00*x2336*x2340))+(((-1.0)*r01*x2332*x2340))+((x2330*x2337)));
evalcond[4]=((1.0)+(((-1.0)*x2337*x2340))+((x2331*x2339))+(((-1.0)*r00*x2336*x2341))+(((-1.0)*r01*x2332*x2341))+(((-1.0)*r02*x2342)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x2340))+(((-1.0)*r10*x2336*x2340))+(((-1.0)*x2335*x2341))+(((-1.0)*r11*x2332*x2340))+((x2330*x2333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2343=((1.0)*sj6);
CheckValue<IkReal> x2344=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2343)))),-1);
if(!x2344.valid){
continue;
}
CheckValue<IkReal> x2345 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2343))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2344.value)))+(x2345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2346=IKsin(j4);
IkReal x2347=IKcos(j4);
IkReal x2348=(cj5*cj6);
IkReal x2349=(r11*sj6);
IkReal x2350=(cj6*r20);
IkReal x2351=(cj6*r10);
IkReal x2352=(cj5*sj6);
IkReal x2353=(r01*sj6);
IkReal x2354=(r21*sj6);
IkReal x2355=(cj6*r00);
IkReal x2356=((1.0)*x2347);
IkReal x2357=((1.0)*x2346);
IkReal x2358=(sj5*x2357);
evalcond[0]=((((-1.0)*x2354*x2356))+(((-1.0)*r21*x2348*x2357))+(((-1.0)*r20*x2352*x2357))+(((-1.0)*r22*x2358))+((x2347*x2350)));
evalcond[1]=((((-1.0)*r10*x2352*x2357))+(((-1.0)*r11*x2348*x2357))+(((-1.0)*r12*x2358))+((x2347*x2351))+(((-1.0)*x2349*x2356)));
evalcond[2]=(((x2346*x2354))+(((-1.0)*r22*sj5*x2356))+(((-1.0)*r21*x2348*x2356))+(((-1.0)*r20*x2352*x2356))+(((-1.0)*x2350*x2357)));
evalcond[3]=(((x2346*x2353))+(((-1.0)*x2355*x2357))+(((-1.0)*r02*sj5*x2356))+(((-1.0)*r00*x2352*x2356))+(((-1.0)*r01*x2348*x2356)));
evalcond[4]=((1.0)+(((-1.0)*x2353*x2356))+(((-1.0)*r02*x2358))+(((-1.0)*r00*x2352*x2357))+((x2347*x2355))+(((-1.0)*r01*x2348*x2357)));
evalcond[5]=((1.0)+((x2346*x2349))+(((-1.0)*r12*sj5*x2356))+(((-1.0)*r10*x2352*x2356))+(((-1.0)*r11*x2348*x2356))+(((-1.0)*x2351*x2357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2359=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2359.valid){
continue;
}
CheckValue<IkReal> x2360 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2359.value)))+(x2360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2361=IKsin(j4);
IkReal x2362=IKcos(j4);
IkReal x2363=(cj5*cj6);
IkReal x2364=(r11*sj6);
IkReal x2365=(cj6*r20);
IkReal x2366=(cj6*r10);
IkReal x2367=(cj5*sj6);
IkReal x2368=(r01*sj6);
IkReal x2369=(r21*sj6);
IkReal x2370=(cj6*r00);
IkReal x2371=((1.0)*x2362);
IkReal x2372=((1.0)*x2361);
IkReal x2373=(sj5*x2372);
evalcond[0]=((((-1.0)*r20*x2367*x2372))+(((-1.0)*x2369*x2371))+(((-1.0)*r21*x2363*x2372))+((x2362*x2365))+(((-1.0)*r22*x2373)));
evalcond[1]=((((-1.0)*r11*x2363*x2372))+(((-1.0)*r10*x2367*x2372))+(((-1.0)*x2364*x2371))+((x2362*x2366))+(((-1.0)*r12*x2373)));
evalcond[2]=((((-1.0)*r20*x2367*x2371))+(((-1.0)*x2365*x2372))+(((-1.0)*r21*x2363*x2371))+((x2361*x2369))+(((-1.0)*r22*sj5*x2371)));
evalcond[3]=((((-1.0)*r01*x2363*x2371))+(((-1.0)*r02*sj5*x2371))+(((-1.0)*r00*x2367*x2371))+((x2361*x2368))+(((-1.0)*x2370*x2372)));
evalcond[4]=((1.0)+(((-1.0)*r01*x2363*x2372))+(((-1.0)*r02*x2373))+(((-1.0)*x2368*x2371))+(((-1.0)*r00*x2367*x2372))+((x2362*x2370)));
evalcond[5]=((1.0)+(((-1.0)*r11*x2363*x2371))+(((-1.0)*r10*x2367*x2371))+((x2361*x2364))+(((-1.0)*x2366*x2372))+(((-1.0)*r12*sj5*x2371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2374=((1.0)*cj5);
IkReal x2375=((0.01)*cj5);
IkReal x2376=(cj6*r11);
IkReal x2377=(r20*sj6);
IkReal x2378=((0.01)*sj5);
IkReal x2379=(cj6*r01);
IkReal x2380=((0.37429)*cj5);
IkReal x2381=((0.37429)*sj5);
IkReal x2382=(cj6*r21);
IkReal x2383=(r10*sj5*sj6);
IkReal x2384=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x2375*x2377))+(((-1.0)*x2381*x2382))+((r22*x2378))+(((-1.0)*pz))+(((-1.0)*x2377*x2381))+((x2375*x2382))+((r22*x2380)));
evalcond[2]=((0.43342)+((x2375*x2379))+((r02*x2378))+((r02*x2380))+(((-1.0)*px))+(((-1.0)*x2379*x2381))+((r00*sj6*x2375))+(((-1.0)*r00*sj6*x2381)));
evalcond[3]=(((r10*sj6*x2375))+((x2375*x2376))+((r12*x2378))+(((-1.0)*x2376*x2381))+(((-1.0)*py))+(((-1.0)*r10*sj6*x2381))+((r12*x2380)));
evalcond[4]=((-1.0)+((sj5*x2377))+((sj5*x2382))+(((-1.0)*r22*x2374)));
evalcond[5]=(x2383+((sj5*x2376))+(((-1.0)*r12*x2374)));
evalcond[6]=((((-1.0)*r02*x2374))+x2384+((sj5*x2379)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2385=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2385;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2386=((1.0)*sj5);
IkReal x2387=((((-1.0)*r20*sj6*x2386))+((cj5*r22))+(((-1.0)*cj6*r21*x2386)));
j4eval[0]=x2387;
j4eval[1]=IKsign(x2387);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2388=cj6*cj6;
IkReal x2389=cj5*cj5;
IkReal x2390=r00*r00;
IkReal x2391=r01*r01;
IkReal x2392=r02*r02;
IkReal x2393=(cj6*r00);
IkReal x2394=(cj5*cj6*r01);
IkReal x2395=((2.0)*r02*sj5);
IkReal x2396=((1.0)*x2388);
IkReal x2397=((2.0)*r01*sj6);
IkReal x2398=(cj5*r00*sj6);
IkReal x2399=(x2389*x2390);
IkReal x2400=((((-1.0)*x2390*x2396))+((x2393*x2397))+(((-1.0)*x2399))+(((-1.0)*x2391))+(((-1.0)*x2392))+(((-1.0)*x2389*x2393*x2397))+(((-1.0)*x2394*x2395))+(((-1.0)*x2389*x2391*x2396))+((x2388*x2399))+((x2388*x2391))+((x2389*x2392))+(((-1.0)*x2395*x2398)));
j4eval[0]=x2400;
j4eval[1]=((IKabs((x2394+x2398+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x2393))));
j4eval[2]=IKsign(x2400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2401=cj6*cj6;
IkReal x2402=cj5*cj5;
IkReal x2403=r00*r00;
IkReal x2404=r01*r01;
IkReal x2405=r02*r02;
IkReal x2406=(cj6*r00);
IkReal x2407=(cj5*cj6*r01);
IkReal x2408=((2.0)*r02*sj5);
IkReal x2409=((1.0)*x2401);
IkReal x2410=((2.0)*r01*sj6);
IkReal x2411=(cj5*r00*sj6);
IkReal x2412=(x2402*x2403);
CheckValue<IkReal> x2413=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2404))+(((-1.0)*x2405))+(((-1.0)*x2407*x2408))+(((-1.0)*x2408*x2411))+(((-1.0)*x2412))+((x2406*x2410))+(((-1.0)*x2403*x2409))+((x2401*x2404))+((x2402*x2405))+((x2401*x2412))+(((-1.0)*x2402*x2406*x2410))+(((-1.0)*x2402*x2404*x2409)))),-1);
if(!x2413.valid){
continue;
}
CheckValue<IkReal> x2414 = IKatan2WithCheck(IkReal((x2406+(((-1.0)*r01*sj6)))),(x2407+x2411+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2414.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2413.value)))+(x2414.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2415=IKsin(j4);
IkReal x2416=IKcos(j4);
IkReal x2417=(cj5*cj6);
IkReal x2418=(r11*sj6);
IkReal x2419=(cj6*r20);
IkReal x2420=(cj6*r10);
IkReal x2421=(cj5*sj6);
IkReal x2422=(r21*sj6);
IkReal x2423=(cj6*r00);
IkReal x2424=(r01*sj6);
IkReal x2425=((1.0)*x2416);
IkReal x2426=((1.0)*x2415);
IkReal x2427=(sj5*x2426);
evalcond[0]=((((-1.0)*r21*x2417*x2426))+(((-1.0)*x2422*x2425))+((x2416*x2419))+(((-1.0)*r22*x2427))+(((-1.0)*r20*x2421*x2426)));
evalcond[1]=((((-1.0)*r02*x2427))+((x2416*x2423))+(((-1.0)*r00*x2421*x2426))+(((-1.0)*x2424*x2425))+(((-1.0)*r01*x2417*x2426)));
evalcond[2]=((((-1.0)*r21*x2417*x2425))+((x2415*x2422))+(((-1.0)*r20*x2421*x2425))+(((-1.0)*x2419*x2426))+(((-1.0)*r22*sj5*x2425)));
evalcond[3]=((((-1.0)*r10*x2421*x2425))+(((-1.0)*r12*sj5*x2425))+((x2415*x2418))+(((-1.0)*x2420*x2426))+(((-1.0)*r11*x2417*x2425)));
evalcond[4]=((1.0)+(((-1.0)*r10*x2421*x2426))+((x2416*x2420))+(((-1.0)*r12*x2427))+(((-1.0)*x2418*x2425))+(((-1.0)*r11*x2417*x2426)));
evalcond[5]=((-1.0)+(((-1.0)*x2423*x2426))+(((-1.0)*r00*x2421*x2425))+(((-1.0)*r02*sj5*x2425))+((x2415*x2424))+(((-1.0)*r01*x2417*x2425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2428=((1.0)*sj5);
CheckValue<IkReal> x2429 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x2429.valid){
continue;
}
CheckValue<IkReal> x2430=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x2428))+(((-1.0)*r20*sj6*x2428)))),-1);
if(!x2430.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2429.value)+(((1.5707963267949)*(x2430.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2431=IKsin(j4);
IkReal x2432=IKcos(j4);
IkReal x2433=(cj5*cj6);
IkReal x2434=(r11*sj6);
IkReal x2435=(cj6*r20);
IkReal x2436=(cj6*r10);
IkReal x2437=(cj5*sj6);
IkReal x2438=(r21*sj6);
IkReal x2439=(cj6*r00);
IkReal x2440=(r01*sj6);
IkReal x2441=((1.0)*x2432);
IkReal x2442=((1.0)*x2431);
IkReal x2443=(sj5*x2442);
evalcond[0]=((((-1.0)*r20*x2437*x2442))+(((-1.0)*r21*x2433*x2442))+((x2432*x2435))+(((-1.0)*x2438*x2441))+(((-1.0)*r22*x2443)));
evalcond[1]=((((-1.0)*r00*x2437*x2442))+((x2432*x2439))+(((-1.0)*r01*x2433*x2442))+(((-1.0)*x2440*x2441))+(((-1.0)*r02*x2443)));
evalcond[2]=((((-1.0)*r20*x2437*x2441))+(((-1.0)*r21*x2433*x2441))+((x2431*x2438))+(((-1.0)*x2435*x2442))+(((-1.0)*r22*sj5*x2441)));
evalcond[3]=((((-1.0)*r12*sj5*x2441))+(((-1.0)*r11*x2433*x2441))+(((-1.0)*x2436*x2442))+((x2431*x2434))+(((-1.0)*r10*x2437*x2441)));
evalcond[4]=((1.0)+(((-1.0)*r11*x2433*x2442))+((x2432*x2436))+(((-1.0)*r12*x2443))+(((-1.0)*x2434*x2441))+(((-1.0)*r10*x2437*x2442)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x2437*x2441))+((x2431*x2440))+(((-1.0)*r02*sj5*x2441))+(((-1.0)*x2439*x2442))+(((-1.0)*r01*x2433*x2441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2444.valid){
continue;
}
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2444.value)+(((1.5707963267949)*(x2445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2446=IKsin(j4);
IkReal x2447=IKcos(j4);
IkReal x2448=(cj5*cj6);
IkReal x2449=(r11*sj6);
IkReal x2450=(cj6*r20);
IkReal x2451=(cj6*r10);
IkReal x2452=(cj5*sj6);
IkReal x2453=(r21*sj6);
IkReal x2454=(cj6*r00);
IkReal x2455=(r01*sj6);
IkReal x2456=((1.0)*x2447);
IkReal x2457=((1.0)*x2446);
IkReal x2458=(sj5*x2457);
evalcond[0]=((((-1.0)*x2453*x2456))+((x2447*x2450))+(((-1.0)*r21*x2448*x2457))+(((-1.0)*r22*x2458))+(((-1.0)*r20*x2452*x2457)));
evalcond[1]=(((x2447*x2454))+(((-1.0)*r01*x2448*x2457))+(((-1.0)*r00*x2452*x2457))+(((-1.0)*x2455*x2456))+(((-1.0)*r02*x2458)));
evalcond[2]=((((-1.0)*x2450*x2457))+(((-1.0)*r21*x2448*x2456))+(((-1.0)*r22*sj5*x2456))+((x2446*x2453))+(((-1.0)*r20*x2452*x2456)));
evalcond[3]=((((-1.0)*r12*sj5*x2456))+((x2446*x2449))+(((-1.0)*r11*x2448*x2456))+(((-1.0)*x2451*x2457))+(((-1.0)*r10*x2452*x2456)));
evalcond[4]=((1.0)+((x2447*x2451))+(((-1.0)*r11*x2448*x2457))+(((-1.0)*x2449*x2456))+(((-1.0)*r12*x2458))+(((-1.0)*r10*x2452*x2457)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x2448*x2456))+(((-1.0)*r00*x2452*x2456))+(((-1.0)*x2454*x2457))+(((-1.0)*r02*sj5*x2456))+((x2446*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2459=((1.0)*cj5);
IkReal x2460=((0.01)*cj5);
IkReal x2461=(cj6*r11);
IkReal x2462=(r20*sj6);
IkReal x2463=((0.01)*sj5);
IkReal x2464=(cj6*r01);
IkReal x2465=((0.37429)*cj5);
IkReal x2466=((0.37429)*sj5);
IkReal x2467=(cj6*r21);
IkReal x2468=(r10*sj5*sj6);
IkReal x2469=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x2460*x2462))+((x2460*x2467))+(((-1.0)*x2466*x2467))+(((-1.0)*pz))+((r22*x2463))+((r22*x2465))+(((-1.0)*x2462*x2466)));
evalcond[2]=((-0.43342)+(((-1.0)*x2464*x2466))+((x2460*x2464))+(((-1.0)*px))+((r00*sj6*x2460))+((r02*x2465))+((r02*x2463))+(((-1.0)*r00*sj6*x2466)));
evalcond[3]=((((-1.0)*r10*sj6*x2466))+((x2460*x2461))+((r12*x2463))+((r12*x2465))+(((-1.0)*py))+(((-1.0)*x2461*x2466))+((r10*sj6*x2460)));
evalcond[4]=((-1.0)+((sj5*x2467))+((sj5*x2462))+(((-1.0)*r22*x2459)));
evalcond[5]=(x2468+((sj5*x2461))+(((-1.0)*r12*x2459)));
evalcond[6]=(x2469+((sj5*x2464))+(((-1.0)*r02*x2459)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2470=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2470;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x2470);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2471=((1.0)*sj6);
IkReal x2472=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x2471))+((cj5*r02)));
j4eval[0]=x2472;
j4eval[1]=IKsign(x2472);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2471))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2473=cj6*cj6;
IkReal x2474=r01*r01;
IkReal x2475=cj5*cj5;
IkReal x2476=r00*r00;
IkReal x2477=r02*r02;
IkReal x2478=(cj6*r00);
IkReal x2479=(r02*sj5);
IkReal x2480=(cj5*cj6*r01);
IkReal x2481=((2.0)*r01*sj6);
IkReal x2482=(cj5*r00*sj6);
IkReal x2483=((1.0)*x2475);
IkReal x2484=(x2473*x2476);
IkReal x2485=(x2473*x2474);
IkReal x2486=(x2484+x2477+x2474+(((2.0)*x2479*x2480))+(((2.0)*x2479*x2482))+(((-1.0)*x2485))+(((-1.0)*x2477*x2483))+((x2475*x2478*x2481))+((x2475*x2485))+(((-1.0)*x2478*x2481))+((x2475*x2476))+(((-1.0)*x2483*x2484)));
j4eval[0]=x2486;
j4eval[1]=((IKabs((x2478+(((-1.0)*r01*sj6)))))+(IKabs((x2482+x2480+x2479))));
j4eval[2]=IKsign(x2486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2487=cj6*cj6;
IkReal x2488=r01*r01;
IkReal x2489=cj5*cj5;
IkReal x2490=r00*r00;
IkReal x2491=r02*r02;
IkReal x2492=(cj6*r00);
IkReal x2493=((2.0)*r01);
IkReal x2494=(cj5*cj6);
IkReal x2495=(r02*sj5);
IkReal x2496=(cj5*r00*sj6);
IkReal x2497=(x2489*x2490);
IkReal x2498=(x2487*x2488);
CheckValue<IkReal> x2499=IKPowWithIntegerCheck(IKsign((x2488+x2491+x2497+(((-1.0)*x2487*x2497))+(((-1.0)*x2498))+((x2487*x2490))+((sj6*x2489*x2492*x2493))+(((-1.0)*sj6*x2492*x2493))+(((2.0)*x2495*x2496))+((x2493*x2494*x2495))+(((-1.0)*x2489*x2491))+((x2489*x2498)))),-1);
if(!x2499.valid){
continue;
}
CheckValue<IkReal> x2500 = IKatan2WithCheck(IkReal((x2492+(((-1.0)*r01*sj6)))),(x2495+x2496+((r01*x2494))),IKFAST_ATAN2_MAGTHRESH);
if(!x2500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2499.value)))+(x2500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2501=IKsin(j4);
IkReal x2502=IKcos(j4);
IkReal x2503=(cj5*cj6);
IkReal x2504=(r11*sj6);
IkReal x2505=(cj6*r20);
IkReal x2506=(cj6*r10);
IkReal x2507=(cj5*sj6);
IkReal x2508=(r21*sj6);
IkReal x2509=(cj6*r00);
IkReal x2510=(r01*sj6);
IkReal x2511=((1.0)*x2502);
IkReal x2512=((1.0)*x2501);
IkReal x2513=(sj5*x2512);
evalcond[0]=((((-1.0)*x2508*x2511))+(((-1.0)*r20*x2507*x2512))+(((-1.0)*r22*x2513))+(((-1.0)*r21*x2503*x2512))+((x2502*x2505)));
evalcond[1]=((((-1.0)*r00*x2507*x2512))+(((-1.0)*x2510*x2511))+(((-1.0)*r02*x2513))+(((-1.0)*r01*x2503*x2512))+((x2502*x2509)));
evalcond[2]=(((x2501*x2508))+(((-1.0)*r20*x2507*x2511))+(((-1.0)*r22*sj5*x2511))+(((-1.0)*r21*x2503*x2511))+(((-1.0)*x2505*x2512)));
evalcond[3]=((((-1.0)*r10*x2507*x2511))+(((-1.0)*x2506*x2512))+(((-1.0)*r12*sj5*x2511))+((x2501*x2504))+(((-1.0)*r11*x2503*x2511)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x2507*x2512))+(((-1.0)*x2504*x2511))+(((-1.0)*r12*x2513))+(((-1.0)*r11*x2503*x2512))+((x2502*x2506)));
evalcond[5]=((1.0)+(((-1.0)*r00*x2507*x2511))+((x2501*x2510))+(((-1.0)*x2509*x2512))+(((-1.0)*r02*sj5*x2511))+(((-1.0)*r01*x2503*x2511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2514=((1.0)*sj6);
CheckValue<IkReal> x2515=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x2514))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x2515.valid){
continue;
}
CheckValue<IkReal> x2516 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x2514)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2516.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2515.value)))+(x2516.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2517=IKsin(j4);
IkReal x2518=IKcos(j4);
IkReal x2519=(cj5*cj6);
IkReal x2520=(r11*sj6);
IkReal x2521=(cj6*r20);
IkReal x2522=(cj6*r10);
IkReal x2523=(cj5*sj6);
IkReal x2524=(r21*sj6);
IkReal x2525=(cj6*r00);
IkReal x2526=(r01*sj6);
IkReal x2527=((1.0)*x2518);
IkReal x2528=((1.0)*x2517);
IkReal x2529=(sj5*x2528);
evalcond[0]=((((-1.0)*x2524*x2527))+(((-1.0)*r20*x2523*x2528))+((x2518*x2521))+(((-1.0)*r21*x2519*x2528))+(((-1.0)*r22*x2529)));
evalcond[1]=((((-1.0)*r01*x2519*x2528))+(((-1.0)*r02*x2529))+((x2518*x2525))+(((-1.0)*r00*x2523*x2528))+(((-1.0)*x2526*x2527)));
evalcond[2]=((((-1.0)*r20*x2523*x2527))+((x2517*x2524))+(((-1.0)*r21*x2519*x2527))+(((-1.0)*x2521*x2528))+(((-1.0)*r22*sj5*x2527)));
evalcond[3]=(((x2517*x2520))+(((-1.0)*r10*x2523*x2527))+(((-1.0)*x2522*x2528))+(((-1.0)*r11*x2519*x2527))+(((-1.0)*r12*sj5*x2527)));
evalcond[4]=((-1.0)+(((-1.0)*x2520*x2527))+(((-1.0)*r12*x2529))+(((-1.0)*r10*x2523*x2528))+((x2518*x2522))+(((-1.0)*r11*x2519*x2528)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x2527))+((x2517*x2526))+(((-1.0)*r01*x2519*x2527))+(((-1.0)*r00*x2523*x2527))+(((-1.0)*x2525*x2528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2530=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2530.valid){
continue;
}
CheckValue<IkReal> x2531 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x2531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2530.value)))+(x2531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2532=IKsin(j4);
IkReal x2533=IKcos(j4);
IkReal x2534=(cj5*cj6);
IkReal x2535=(r11*sj6);
IkReal x2536=(cj6*r20);
IkReal x2537=(cj6*r10);
IkReal x2538=(cj5*sj6);
IkReal x2539=(r21*sj6);
IkReal x2540=(cj6*r00);
IkReal x2541=(r01*sj6);
IkReal x2542=((1.0)*x2533);
IkReal x2543=((1.0)*x2532);
IkReal x2544=(sj5*x2543);
evalcond[0]=((((-1.0)*r21*x2534*x2543))+(((-1.0)*x2539*x2542))+((x2533*x2536))+(((-1.0)*r22*x2544))+(((-1.0)*r20*x2538*x2543)));
evalcond[1]=((((-1.0)*x2541*x2542))+(((-1.0)*r00*x2538*x2543))+((x2533*x2540))+(((-1.0)*r01*x2534*x2543))+(((-1.0)*r02*x2544)));
evalcond[2]=((((-1.0)*x2536*x2543))+(((-1.0)*r22*sj5*x2542))+(((-1.0)*r21*x2534*x2542))+((x2532*x2539))+(((-1.0)*r20*x2538*x2542)));
evalcond[3]=((((-1.0)*r12*sj5*x2542))+(((-1.0)*r10*x2538*x2542))+((x2532*x2535))+(((-1.0)*r11*x2534*x2542))+(((-1.0)*x2537*x2543)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x2544))+(((-1.0)*r10*x2538*x2543))+((x2533*x2537))+(((-1.0)*x2535*x2542))+(((-1.0)*r11*x2534*x2543)));
evalcond[5]=((1.0)+(((-1.0)*r00*x2538*x2542))+(((-1.0)*r01*x2534*x2542))+(((-1.0)*x2540*x2543))+(((-1.0)*r02*sj5*x2542))+((x2532*x2541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2545=cj6*cj6;
IkReal x2546=cj5*cj5;
IkReal x2547=(r22*sj5);
IkReal x2548=(cj0*r20);
IkReal x2549=((1.0)*r21);
IkReal x2550=(cj5*sj6);
IkReal x2551=(r02*r22);
IkReal x2552=(cj5*cj6);
IkReal x2553=(r02*sj5);
IkReal x2554=(cj6*sj6);
IkReal x2555=((1.0)*r20);
IkReal x2556=(r01*x2549);
IkReal x2557=(r00*r20*x2546);
CheckValue<IkReal> x2558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2547*x2550))+(((-1.0)*r00*x2545*x2555))+(((-1.0)*r00*x2546*x2549*x2554))+(((-1.0)*x2550*x2553*x2555))+((r01*r20*x2554))+((r01*r21*x2545))+(((-1.0)*x2551))+(((-1.0)*r01*x2547*x2552))+(((-1.0)*x2545*x2546*x2556))+(((-1.0)*r01*x2546*x2554*x2555))+(((-1.0)*x2556))+(((-1.0)*r00*x2546*x2555))+(((-1.0)*x2549*x2552*x2553))+((x2545*x2557))+((r00*r21*x2554))+((x2546*x2551)))),-1);
if(!x2558.valid){
continue;
}
CheckValue<IkReal> x2559 = IKatan2WithCheck(IkReal((((cj6*x2548))+(((-1.0)*cj0*sj6*x2549)))),(((x2548*x2550))+((cj0*r21*x2552))+((cj0*x2547))),IKFAST_ATAN2_MAGTHRESH);
if(!x2559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2558.value)))+(x2559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2560=IKsin(j4);
IkReal x2561=IKcos(j4);
IkReal x2562=((1.0)*sj0);
IkReal x2563=((1.0)*cj6);
IkReal x2564=((1.0)*sj6);
IkReal x2565=(cj5*x2561);
IkReal x2566=(r20*x2560);
IkReal x2567=(cj6*x2561);
IkReal x2568=(r11*x2560);
IkReal x2569=(r21*x2560);
IkReal x2570=(r01*x2560);
IkReal x2571=((1.0)*sj5*x2560);
IkReal x2572=((1.0)*sj5*x2561);
IkReal x2573=(cj5*x2560*x2564);
evalcond[0]=((((-1.0)*cj5*x2564*x2566))+((r20*x2567))+(((-1.0)*r22*x2571))+(((-1.0)*r21*x2561*x2564))+(((-1.0)*cj5*x2563*x2569)));
evalcond[1]=((((-1.0)*x2563*x2566))+(((-1.0)*r21*x2563*x2565))+(((-1.0)*r20*x2564*x2565))+(((-1.0)*r22*x2572))+((sj6*x2569)));
evalcond[2]=((((-1.0)*r10*x2573))+(((-1.0)*r12*x2571))+cj0+((r10*x2567))+(((-1.0)*r11*x2561*x2564))+(((-1.0)*cj5*x2563*x2568)));
evalcond[3]=(((r00*x2567))+(((-1.0)*x2562))+(((-1.0)*cj5*x2563*x2570))+(((-1.0)*r02*x2571))+(((-1.0)*r00*x2573))+(((-1.0)*r01*x2561*x2564)));
evalcond[4]=((((-1.0)*r01*x2563*x2565))+(((-1.0)*r00*x2560*x2563))+((sj6*x2570))+(((-1.0)*r00*x2564*x2565))+(((-1.0)*r02*x2572))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*x2564*x2565))+(((-1.0)*r12*x2572))+(((-1.0)*r10*x2560*x2563))+(((-1.0)*r11*x2563*x2565))+(((-1.0)*x2562))+((sj6*x2568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2574=(cj5*sj0);
CheckValue<IkReal> x2575 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x2574))+((r22*sj0*sj5))+((cj6*r21*x2574))),IKFAST_ATAN2_MAGTHRESH);
if(!x2575.valid){
continue;
}
CheckValue<IkReal> x2576=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x2576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2575.value)+(((1.5707963267949)*(x2576.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2577=IKsin(j4);
IkReal x2578=IKcos(j4);
IkReal x2579=((1.0)*sj0);
IkReal x2580=((1.0)*cj6);
IkReal x2581=((1.0)*sj6);
IkReal x2582=(cj5*x2578);
IkReal x2583=(r20*x2577);
IkReal x2584=(cj6*x2578);
IkReal x2585=(r11*x2577);
IkReal x2586=(r21*x2577);
IkReal x2587=(r01*x2577);
IkReal x2588=((1.0)*sj5*x2577);
IkReal x2589=((1.0)*sj5*x2578);
IkReal x2590=(cj5*x2577*x2581);
evalcond[0]=((((-1.0)*cj5*x2580*x2586))+(((-1.0)*cj5*x2581*x2583))+((r20*x2584))+(((-1.0)*r21*x2578*x2581))+(((-1.0)*r22*x2588)));
evalcond[1]=((((-1.0)*r21*x2580*x2582))+((sj6*x2586))+(((-1.0)*x2580*x2583))+(((-1.0)*r22*x2589))+(((-1.0)*r20*x2581*x2582)));
evalcond[2]=((((-1.0)*cj5*x2580*x2585))+cj0+(((-1.0)*r11*x2578*x2581))+((r10*x2584))+(((-1.0)*r10*x2590))+(((-1.0)*r12*x2588)));
evalcond[3]=((((-1.0)*cj5*x2580*x2587))+(((-1.0)*r00*x2590))+((r00*x2584))+(((-1.0)*r02*x2588))+(((-1.0)*x2579))+(((-1.0)*r01*x2578*x2581)));
evalcond[4]=((((-1.0)*r00*x2581*x2582))+(((-1.0)*r02*x2589))+(((-1.0)*r00*x2577*x2580))+((sj6*x2587))+(((-1.0)*cj0))+(((-1.0)*r01*x2580*x2582)));
evalcond[5]=((((-1.0)*r10*x2577*x2580))+(((-1.0)*r11*x2580*x2582))+(((-1.0)*x2579))+(((-1.0)*r10*x2581*x2582))+((sj6*x2585))+(((-1.0)*r12*x2589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2591=(cj0*sj6);
IkReal x2592=(cj0*cj6);
CheckValue<IkReal> x2593 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2591))+((r20*x2592)))),(((cj5*r20*x2591))+((cj5*r21*x2592))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2593.valid){
continue;
}
CheckValue<IkReal> x2594=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2593.value)+(((1.5707963267949)*(x2594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2595=IKsin(j4);
IkReal x2596=IKcos(j4);
IkReal x2597=((1.0)*sj0);
IkReal x2598=((1.0)*cj6);
IkReal x2599=((1.0)*sj6);
IkReal x2600=(cj5*x2596);
IkReal x2601=(r20*x2595);
IkReal x2602=(cj6*x2596);
IkReal x2603=(r11*x2595);
IkReal x2604=(r21*x2595);
IkReal x2605=(r01*x2595);
IkReal x2606=((1.0)*sj5*x2595);
IkReal x2607=((1.0)*sj5*x2596);
IkReal x2608=(cj5*x2595*x2599);
evalcond[0]=((((-1.0)*r21*x2596*x2599))+(((-1.0)*cj5*x2598*x2604))+((r20*x2602))+(((-1.0)*cj5*x2599*x2601))+(((-1.0)*r22*x2606)));
evalcond[1]=(((sj6*x2604))+(((-1.0)*r20*x2599*x2600))+(((-1.0)*r22*x2607))+(((-1.0)*x2598*x2601))+(((-1.0)*r21*x2598*x2600)));
evalcond[2]=((((-1.0)*cj5*x2598*x2603))+cj0+(((-1.0)*r10*x2608))+(((-1.0)*r12*x2606))+((r10*x2602))+(((-1.0)*r11*x2596*x2599)));
evalcond[3]=((((-1.0)*cj5*x2598*x2605))+(((-1.0)*r01*x2596*x2599))+(((-1.0)*x2597))+(((-1.0)*r02*x2606))+((r00*x2602))+(((-1.0)*r00*x2608)));
evalcond[4]=((((-1.0)*r02*x2607))+((sj6*x2605))+(((-1.0)*r00*x2599*x2600))+(((-1.0)*r00*x2595*x2598))+(((-1.0)*r01*x2598*x2600))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x2597))+(((-1.0)*r12*x2607))+((sj6*x2603))+(((-1.0)*r11*x2598*x2600))+(((-1.0)*r10*x2595*x2598))+(((-1.0)*r10*x2599*x2600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2609=(cj6*sj5);
IkReal x2610=(sj5*sj6);
IkReal x2611=((0.01)*cj5);
IkReal x2612=(cj5*r22);
IkReal x2613=((1.0)*cj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.069)+((cj6*r21*x2611))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-0.37429)*r20*x2610))+((r20*sj6*x2611))+(((-0.37429)*r21*x2609))+(((0.37429)*x2612)));
evalcond[2]=((1.0)+((r20*x2610))+(((-1.0)*x2612))+((r21*x2609)));
evalcond[3]=((((-1.0)*r12*x2613))+((r10*x2610))+((r11*x2609)));
evalcond[4]=(((r00*x2610))+(((-1.0)*r02*x2613))+((r01*x2609)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2614=(r10*sj6);
IkReal x2615=((0.863573439158322)*sj5);
IkReal x2616=((0.0230723086152)*cj5);
IkReal x2617=(cj6*r11);
IkReal x2618=(r00*sj6);
IkReal x2619=((0.0230723086152)*sj5);
IkReal x2620=((0.863573439158322)*cj5);
IkReal x2621=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*r12*x2619))+(((-1.0)*r12*x2620))+((x2615*x2617))+((x2614*x2615))+(((-1.0)*x2616*x2617))+(((-1.0)*x2614*x2616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+((x2615*x2618))+((x2615*x2621))+(((-1.0)*r02*x2620))+(((-1.0)*r02*x2619))+(((-1.0)*x2616*x2618))+(((-1.0)*x2616*x2621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*r12*x2619))+(((-1.0)*r12*x2620))+((x2615*x2617))+((x2614*x2615))+(((-1.0)*x2616*x2617))+(((-1.0)*x2614*x2616))))+IKsqr(((((2.30723086152)*px))+((x2615*x2618))+((x2615*x2621))+(((-1.0)*r02*x2620))+(((-1.0)*r02*x2619))+(((-1.0)*x2616*x2618))+(((-1.0)*x2616*x2621))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*r12*x2619))+(((-1.0)*r12*x2620))+((x2615*x2617))+((x2614*x2615))+(((-1.0)*x2616*x2617))+(((-1.0)*x2614*x2616))), ((((2.30723086152)*px))+((x2615*x2618))+((x2615*x2621))+(((-1.0)*r02*x2620))+(((-1.0)*r02*x2619))+(((-1.0)*x2616*x2618))+(((-1.0)*x2616*x2621))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2622=((0.01)*cj5);
IkReal x2623=(cj6*r01);
IkReal x2624=((0.37429)*sj5);
IkReal x2625=(cj6*r11);
IkReal x2626=((0.01)*sj5);
IkReal x2627=(r00*sj6);
IkReal x2628=((0.37429)*cj5);
IkReal x2629=(r10*sj6);
evalcond[0]=((((-1.0)*x2623*x2624))+(((-1.0)*x2624*x2627))+(((-1.0)*px))+((r02*x2626))+((r02*x2628))+((x2622*x2627))+((x2622*x2623))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=((((0.43342)*(IKsin(j0))))+(((-1.0)*x2624*x2629))+(((-1.0)*x2624*x2625))+(((-1.0)*py))+((x2622*x2625))+((x2622*x2629))+((r12*x2628))+((r12*x2626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2630=(r20*sj0);
IkReal x2631=((1.0)*sj5);
IkReal x2632=(r21*sj0);
IkReal x2633=(((cj5*r12))+(((-1.0)*r10*sj6*x2631))+(((-1.0)*cj6*r11*x2631)));
j4eval[0]=x2633;
j4eval[1]=IKsign(x2633);
j4eval[2]=((IKabs(((((-1.0)*sj6*x2632))+((cj6*x2630)))))+(IKabs((((r22*sj0*sj5))+((cj5*sj6*x2630))+((cj5*cj6*x2632))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2634=(cj0*sj6);
IkReal x2635=((1.0)*sj5);
IkReal x2636=(cj0*cj6);
IkReal x2637=((((-1.0)*r00*sj6*x2635))+(((-1.0)*cj6*r01*x2635))+((cj5*r02)));
j4eval[0]=x2637;
j4eval[1]=IKsign(x2637);
j4eval[2]=((IKabs((((cj5*r20*x2634))+((cj5*r21*x2636))+((cj0*r22*sj5)))))+(IKabs(((((-1.0)*r21*x2634))+((r20*x2636))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2638=cj6*cj6;
IkReal x2639=cj5*cj5;
IkReal x2640=(r02*r22);
IkReal x2641=(r22*sj5);
IkReal x2642=(r00*r20);
IkReal x2643=((1.0)*r21);
IkReal x2644=(r20*sj6);
IkReal x2645=(cj6*r01);
IkReal x2646=(cj0*cj5);
IkReal x2647=(r00*sj6);
IkReal x2648=((1.0)*cj5);
IkReal x2649=(cj6*r21);
IkReal x2650=(cj5*r02*sj5);
IkReal x2651=((1.0)*x2639);
IkReal x2652=(x2638*x2639);
IkReal x2653=((((-1.0)*x2638*x2642))+(((-1.0)*cj6*x2639*x2643*x2647))+((r01*r21*x2638))+(((-1.0)*cj6*x2643*x2650))+((x2639*x2640))+(((-1.0)*r01*x2643))+(((-1.0)*r01*x2643*x2652))+((x2644*x2645))+(((-1.0)*x2642*x2651))+(((-1.0)*x2641*x2645*x2648))+(((-1.0)*r02*sj5*x2644*x2648))+((x2647*x2649))+((x2642*x2652))+(((-1.0)*x2640))+(((-1.0)*x2641*x2647*x2648))+(((-1.0)*x2644*x2645*x2651)));
j4eval[0]=x2653;
j4eval[1]=((IKabs((((x2644*x2646))+((cj0*x2641))+((x2646*x2649)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x2643))))));
j4eval[2]=IKsign(x2653);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2654=((1.0)*cj5);
IkReal x2655=((0.01)*cj5);
IkReal x2656=(cj6*r11);
IkReal x2657=(r20*sj6);
IkReal x2658=((0.01)*sj5);
IkReal x2659=(cj6*r01);
IkReal x2660=((0.37429)*cj5);
IkReal x2661=((0.37429)*sj5);
IkReal x2662=(cj6*r21);
IkReal x2663=(r10*sj5*sj6);
IkReal x2664=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x2655*x2657))+((x2655*x2662))+((r22*x2660))+(((-1.0)*pz))+(((-1.0)*x2657*x2661))+((r22*x2658))+(((-1.0)*x2661*x2662)));
evalcond[2]=(((x2655*x2659))+((r02*x2660))+((r02*x2658))+((r00*sj6*x2655))+(((-1.0)*px))+(((-1.0)*x2659*x2661))+(((-1.0)*r00*sj6*x2661)));
evalcond[3]=((0.43342)+((r12*x2658))+((r10*sj6*x2655))+((r12*x2660))+((x2655*x2656))+(((-1.0)*py))+(((-1.0)*r10*sj6*x2661))+(((-1.0)*x2656*x2661)));
evalcond[4]=((1.0)+(((-1.0)*r22*x2654))+((sj5*x2657))+((sj5*x2662)));
evalcond[5]=((((-1.0)*r12*x2654))+((sj5*x2656))+x2663);
evalcond[6]=((((-1.0)*r02*x2654))+((sj5*x2659))+x2664);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2665=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2665;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2665);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2666=((1.0)*sj6);
IkReal x2667=(((cj5*r12))+(((-1.0)*r10*sj5*x2666))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x2667;
j4eval[1]=IKsign(x2667);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x2666))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2668=cj6*cj6;
IkReal x2669=cj5*cj5;
IkReal x2670=r10*r10;
IkReal x2671=r11*r11;
IkReal x2672=r12*r12;
IkReal x2673=(r10*sj6);
IkReal x2674=(r12*sj5);
IkReal x2675=((2.0)*cj6*r11);
IkReal x2676=((1.0)*x2670);
IkReal x2677=(x2668*x2671);
IkReal x2678=((((-1.0)*x2669*x2677))+(((-1.0)*x2672))+(((-1.0)*x2671))+((x2673*x2675))+(((-1.0)*x2669*x2673*x2675))+((x2668*x2669*x2670))+(((-2.0)*cj5*x2673*x2674))+((x2669*x2672))+(((-1.0)*x2669*x2676))+(((-1.0)*cj5*x2674*x2675))+(((-1.0)*x2668*x2676))+x2677);
j4eval[0]=x2678;
j4eval[1]=((IKabs((((cj5*x2673))+((cj5*cj6*r11))+x2674)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2679=cj6*cj6;
IkReal x2680=cj5*cj5;
IkReal x2681=r10*r10;
IkReal x2682=r11*r11;
IkReal x2683=r12*r12;
IkReal x2684=(r10*sj6);
IkReal x2685=(r12*sj5);
IkReal x2686=((2.0)*cj6*r11);
IkReal x2687=(x2679*x2682);
IkReal x2688=(x2680*x2681);
CheckValue<IkReal> x2689=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2679*x2681))+(((-1.0)*x2680*x2684*x2686))+((x2684*x2686))+(((-1.0)*x2680*x2687))+(((-1.0)*x2688))+(((-1.0)*x2682))+(((-1.0)*x2683))+(((-2.0)*cj5*x2684*x2685))+((x2679*x2688))+((x2680*x2683))+(((-1.0)*cj5*x2685*x2686))+x2687)),-1);
if(!x2689.valid){
continue;
}
CheckValue<IkReal> x2690 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x2684))+((cj5*cj6*r11))+x2685),IKFAST_ATAN2_MAGTHRESH);
if(!x2690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2689.value)))+(x2690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2691=IKsin(j4);
IkReal x2692=IKcos(j4);
IkReal x2693=(cj5*cj6);
IkReal x2694=(r11*sj6);
IkReal x2695=(cj6*r20);
IkReal x2696=(cj6*r10);
IkReal x2697=(cj5*sj6);
IkReal x2698=(r01*sj6);
IkReal x2699=(r21*sj6);
IkReal x2700=(cj6*r00);
IkReal x2701=((1.0)*x2692);
IkReal x2702=((1.0)*x2691);
IkReal x2703=(sj5*x2702);
evalcond[0]=((((-1.0)*r22*x2703))+(((-1.0)*r21*x2693*x2702))+(((-1.0)*r20*x2697*x2702))+(((-1.0)*x2699*x2701))+((x2692*x2695)));
evalcond[1]=((((-1.0)*r12*x2703))+(((-1.0)*r11*x2693*x2702))+(((-1.0)*r10*x2697*x2702))+(((-1.0)*x2694*x2701))+((x2692*x2696)));
evalcond[2]=(((x2691*x2699))+(((-1.0)*x2695*x2702))+(((-1.0)*r21*x2693*x2701))+(((-1.0)*r20*x2697*x2701))+(((-1.0)*r22*sj5*x2701)));
evalcond[3]=(((x2691*x2698))+(((-1.0)*r00*x2697*x2701))+(((-1.0)*r01*x2693*x2701))+(((-1.0)*x2700*x2702))+(((-1.0)*r02*sj5*x2701)));
evalcond[4]=((1.0)+(((-1.0)*r00*x2697*x2702))+(((-1.0)*r02*x2703))+((x2692*x2700))+(((-1.0)*r01*x2693*x2702))+(((-1.0)*x2698*x2701)));
evalcond[5]=((-1.0)+((x2691*x2694))+(((-1.0)*r11*x2693*x2701))+(((-1.0)*r10*x2697*x2701))+(((-1.0)*x2696*x2702))+(((-1.0)*r12*sj5*x2701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2704=((1.0)*sj6);
CheckValue<IkReal> x2705=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2704)))),-1);
if(!x2705.valid){
continue;
}
CheckValue<IkReal> x2706 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2704))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2705.value)))+(x2706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2707=IKsin(j4);
IkReal x2708=IKcos(j4);
IkReal x2709=(cj5*cj6);
IkReal x2710=(r11*sj6);
IkReal x2711=(cj6*r20);
IkReal x2712=(cj6*r10);
IkReal x2713=(cj5*sj6);
IkReal x2714=(r01*sj6);
IkReal x2715=(r21*sj6);
IkReal x2716=(cj6*r00);
IkReal x2717=((1.0)*x2708);
IkReal x2718=((1.0)*x2707);
IkReal x2719=(sj5*x2718);
evalcond[0]=(((x2708*x2711))+(((-1.0)*x2715*x2717))+(((-1.0)*r21*x2709*x2718))+(((-1.0)*r22*x2719))+(((-1.0)*r20*x2713*x2718)));
evalcond[1]=(((x2708*x2712))+(((-1.0)*r11*x2709*x2718))+(((-1.0)*x2710*x2717))+(((-1.0)*r12*x2719))+(((-1.0)*r10*x2713*x2718)));
evalcond[2]=(((x2707*x2715))+(((-1.0)*r22*sj5*x2717))+(((-1.0)*r21*x2709*x2717))+(((-1.0)*x2711*x2718))+(((-1.0)*r20*x2713*x2717)));
evalcond[3]=((((-1.0)*r01*x2709*x2717))+((x2707*x2714))+(((-1.0)*r00*x2713*x2717))+(((-1.0)*x2716*x2718))+(((-1.0)*r02*sj5*x2717)));
evalcond[4]=((1.0)+((x2708*x2716))+(((-1.0)*r01*x2709*x2718))+(((-1.0)*r02*x2719))+(((-1.0)*r00*x2713*x2718))+(((-1.0)*x2714*x2717)));
evalcond[5]=((-1.0)+(((-1.0)*x2712*x2718))+((x2707*x2710))+(((-1.0)*r11*x2709*x2717))+(((-1.0)*r12*sj5*x2717))+(((-1.0)*r10*x2713*x2717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2720=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2720.valid){
continue;
}
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2720.value)))+(x2721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2722=IKsin(j4);
IkReal x2723=IKcos(j4);
IkReal x2724=(cj5*cj6);
IkReal x2725=(r11*sj6);
IkReal x2726=(cj6*r20);
IkReal x2727=(cj6*r10);
IkReal x2728=(cj5*sj6);
IkReal x2729=(r01*sj6);
IkReal x2730=(r21*sj6);
IkReal x2731=(cj6*r00);
IkReal x2732=((1.0)*x2723);
IkReal x2733=((1.0)*x2722);
IkReal x2734=(sj5*x2733);
evalcond[0]=((((-1.0)*x2730*x2732))+(((-1.0)*r20*x2728*x2733))+(((-1.0)*r22*x2734))+(((-1.0)*r21*x2724*x2733))+((x2723*x2726)));
evalcond[1]=((((-1.0)*r10*x2728*x2733))+(((-1.0)*x2725*x2732))+(((-1.0)*r12*x2734))+((x2723*x2727))+(((-1.0)*r11*x2724*x2733)));
evalcond[2]=((((-1.0)*x2726*x2733))+(((-1.0)*r20*x2728*x2732))+(((-1.0)*r22*sj5*x2732))+((x2722*x2730))+(((-1.0)*r21*x2724*x2732)));
evalcond[3]=((((-1.0)*r00*x2728*x2732))+(((-1.0)*x2731*x2733))+(((-1.0)*r02*sj5*x2732))+((x2722*x2729))+(((-1.0)*r01*x2724*x2732)));
evalcond[4]=((1.0)+(((-1.0)*r00*x2728*x2733))+((x2723*x2731))+(((-1.0)*r02*x2734))+(((-1.0)*x2729*x2732))+(((-1.0)*r01*x2724*x2733)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x2732))+(((-1.0)*r10*x2728*x2732))+(((-1.0)*x2727*x2733))+((x2722*x2725))+(((-1.0)*r11*x2724*x2732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2735=((1.0)*cj5);
IkReal x2736=((0.01)*cj5);
IkReal x2737=(cj6*r11);
IkReal x2738=(r20*sj6);
IkReal x2739=((0.01)*sj5);
IkReal x2740=(cj6*r01);
IkReal x2741=((0.37429)*cj5);
IkReal x2742=((0.37429)*sj5);
IkReal x2743=(cj6*r21);
IkReal x2744=(r10*sj5*sj6);
IkReal x2745=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x2741))+((r22*x2739))+(((-1.0)*x2738*x2742))+(((-1.0)*pz))+((x2736*x2738))+((x2736*x2743))+(((-1.0)*x2742*x2743)));
evalcond[2]=((((-1.0)*r00*sj6*x2742))+((r02*x2739))+(((-1.0)*x2740*x2742))+((r00*sj6*x2736))+(((-1.0)*px))+((x2736*x2740))+((r02*x2741)));
evalcond[3]=((-0.43342)+((r12*x2741))+(((-1.0)*r10*sj6*x2742))+(((-1.0)*py))+((x2736*x2737))+((r12*x2739))+((r10*sj6*x2736))+(((-1.0)*x2737*x2742)));
evalcond[4]=((1.0)+((sj5*x2743))+(((-1.0)*r22*x2735))+((sj5*x2738)));
evalcond[5]=(x2744+(((-1.0)*r12*x2735))+((sj5*x2737)));
evalcond[6]=(x2745+((sj5*x2740))+(((-1.0)*r02*x2735)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2746=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2746;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2747=((1.0)*sj5);
IkReal x2748=(((cj5*r22))+(((-1.0)*r20*sj6*x2747))+(((-1.0)*cj6*r21*x2747)));
j4eval[0]=x2748;
j4eval[1]=IKsign(x2748);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2749=r11*r11;
IkReal x2750=cj5*cj5;
IkReal x2751=cj6*cj6;
IkReal x2752=r10*r10;
IkReal x2753=r12*r12;
IkReal x2754=(r12*sj5);
IkReal x2755=(cj6*r10);
IkReal x2756=((1.0)*x2751);
IkReal x2757=(cj5*cj6*r11);
IkReal x2758=(cj5*r10*sj6);
IkReal x2759=((2.0)*r11*sj6);
IkReal x2760=(x2750*x2752);
IkReal x2761=(x2753+x2749+x2760+((x2749*x2750*x2751))+(((-1.0)*x2750*x2753))+(((-1.0)*x2756*x2760))+(((2.0)*x2754*x2757))+(((2.0)*x2754*x2758))+(((-1.0)*x2749*x2756))+(((-1.0)*x2755*x2759))+((x2750*x2755*x2759))+((x2751*x2752)));
j4eval[0]=x2761;
j4eval[1]=IKsign(x2761);
j4eval[2]=((IKabs((x2755+(((-1.0)*r11*sj6)))))+(IKabs((x2757+x2754+x2758))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2762=r11*r11;
IkReal x2763=cj5*cj5;
IkReal x2764=cj6*cj6;
IkReal x2765=r10*r10;
IkReal x2766=r12*r12;
IkReal x2767=(r10*sj6);
IkReal x2768=(r12*sj5);
IkReal x2769=((1.0)*x2764);
IkReal x2770=(cj5*cj6*r11);
IkReal x2771=((2.0)*cj6*r11);
IkReal x2772=(x2763*x2765);
CheckValue<IkReal> x2773=IKPowWithIntegerCheck(IKsign((x2772+x2762+x2766+(((-1.0)*x2763*x2766))+(((-1.0)*x2769*x2772))+((x2763*x2767*x2771))+((x2762*x2763*x2764))+(((-1.0)*x2762*x2769))+(((-1.0)*x2767*x2771))+(((2.0)*x2768*x2770))+(((2.0)*cj5*x2767*x2768))+((x2764*x2765)))),-1);
if(!x2773.valid){
continue;
}
CheckValue<IkReal> x2774 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x2770+x2768+((cj5*x2767))),IKFAST_ATAN2_MAGTHRESH);
if(!x2774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2773.value)))+(x2774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2775=IKsin(j4);
IkReal x2776=IKcos(j4);
IkReal x2777=(cj5*cj6);
IkReal x2778=(r11*sj6);
IkReal x2779=(cj6*r20);
IkReal x2780=(cj6*r10);
IkReal x2781=(cj5*sj6);
IkReal x2782=(r01*sj6);
IkReal x2783=(r21*sj6);
IkReal x2784=(cj6*r00);
IkReal x2785=((1.0)*x2776);
IkReal x2786=((1.0)*x2775);
IkReal x2787=(sj5*x2786);
evalcond[0]=((((-1.0)*r20*x2781*x2786))+(((-1.0)*x2783*x2785))+(((-1.0)*r22*x2787))+((x2776*x2779))+(((-1.0)*r21*x2777*x2786)));
evalcond[1]=((((-1.0)*r12*x2787))+(((-1.0)*r10*x2781*x2786))+((x2776*x2780))+(((-1.0)*r11*x2777*x2786))+(((-1.0)*x2778*x2785)));
evalcond[2]=((((-1.0)*r20*x2781*x2785))+(((-1.0)*r22*sj5*x2785))+(((-1.0)*x2779*x2786))+((x2775*x2783))+(((-1.0)*r21*x2777*x2785)));
evalcond[3]=((((-1.0)*x2784*x2786))+(((-1.0)*r02*sj5*x2785))+(((-1.0)*r00*x2781*x2785))+((x2775*x2782))+(((-1.0)*r01*x2777*x2785)));
evalcond[4]=((-1.0)+((x2776*x2784))+(((-1.0)*r00*x2781*x2786))+(((-1.0)*x2782*x2785))+(((-1.0)*r01*x2777*x2786))+(((-1.0)*r02*x2787)));
evalcond[5]=((1.0)+(((-1.0)*r10*x2781*x2785))+((x2775*x2778))+(((-1.0)*x2780*x2786))+(((-1.0)*r11*x2777*x2785))+(((-1.0)*r12*sj5*x2785)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2788=((1.0)*sj5);
CheckValue<IkReal> x2789=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x2788))+((cj5*r22))+(((-1.0)*cj6*r21*x2788)))),-1);
if(!x2789.valid){
continue;
}
CheckValue<IkReal> x2790 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2789.value)))+(x2790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2791=IKsin(j4);
IkReal x2792=IKcos(j4);
IkReal x2793=(cj5*cj6);
IkReal x2794=(r11*sj6);
IkReal x2795=(cj6*r20);
IkReal x2796=(cj6*r10);
IkReal x2797=(cj5*sj6);
IkReal x2798=(r01*sj6);
IkReal x2799=(r21*sj6);
IkReal x2800=(cj6*r00);
IkReal x2801=((1.0)*x2792);
IkReal x2802=((1.0)*x2791);
IkReal x2803=(sj5*x2802);
evalcond[0]=(((x2792*x2795))+(((-1.0)*x2799*x2801))+(((-1.0)*r22*x2803))+(((-1.0)*r20*x2797*x2802))+(((-1.0)*r21*x2793*x2802)));
evalcond[1]=((((-1.0)*r11*x2793*x2802))+((x2792*x2796))+(((-1.0)*r12*x2803))+(((-1.0)*r10*x2797*x2802))+(((-1.0)*x2794*x2801)));
evalcond[2]=((((-1.0)*r22*sj5*x2801))+((x2791*x2799))+(((-1.0)*x2795*x2802))+(((-1.0)*r20*x2797*x2801))+(((-1.0)*r21*x2793*x2801)));
evalcond[3]=((((-1.0)*x2800*x2802))+((x2791*x2798))+(((-1.0)*r02*sj5*x2801))+(((-1.0)*r01*x2793*x2801))+(((-1.0)*r00*x2797*x2801)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x2793*x2802))+((x2792*x2800))+(((-1.0)*x2798*x2801))+(((-1.0)*r02*x2803))+(((-1.0)*r00*x2797*x2802)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x2801))+(((-1.0)*r11*x2793*x2801))+((x2791*x2794))+(((-1.0)*r10*x2797*x2801))+(((-1.0)*x2796*x2802)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2804 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2804.valid){
continue;
}
CheckValue<IkReal> x2805=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x2805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2804.value)+(((1.5707963267949)*(x2805.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2806=IKsin(j4);
IkReal x2807=IKcos(j4);
IkReal x2808=(cj5*cj6);
IkReal x2809=(r11*sj6);
IkReal x2810=(cj6*r20);
IkReal x2811=(cj6*r10);
IkReal x2812=(cj5*sj6);
IkReal x2813=(r01*sj6);
IkReal x2814=(r21*sj6);
IkReal x2815=(cj6*r00);
IkReal x2816=((1.0)*x2807);
IkReal x2817=((1.0)*x2806);
IkReal x2818=(sj5*x2817);
evalcond[0]=((((-1.0)*r22*x2818))+(((-1.0)*r21*x2808*x2817))+(((-1.0)*r20*x2812*x2817))+(((-1.0)*x2814*x2816))+((x2807*x2810)));
evalcond[1]=((((-1.0)*r12*x2818))+(((-1.0)*x2809*x2816))+(((-1.0)*r11*x2808*x2817))+(((-1.0)*r10*x2812*x2817))+((x2807*x2811)));
evalcond[2]=((((-1.0)*x2810*x2817))+(((-1.0)*r21*x2808*x2816))+(((-1.0)*r20*x2812*x2816))+((x2806*x2814))+(((-1.0)*r22*sj5*x2816)));
evalcond[3]=((((-1.0)*r01*x2808*x2816))+(((-1.0)*r02*sj5*x2816))+(((-1.0)*x2815*x2817))+(((-1.0)*r00*x2812*x2816))+((x2806*x2813)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x2818))+(((-1.0)*x2813*x2816))+(((-1.0)*r01*x2808*x2817))+(((-1.0)*r00*x2812*x2817))+((x2807*x2815)));
evalcond[5]=((1.0)+(((-1.0)*r11*x2808*x2816))+(((-1.0)*r12*sj5*x2816))+((x2806*x2809))+(((-1.0)*r10*x2812*x2816))+(((-1.0)*x2811*x2817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2819=((1.0)*cj5);
IkReal x2820=((0.01)*cj5);
IkReal x2821=(cj6*r11);
IkReal x2822=(r20*sj6);
IkReal x2823=((0.01)*sj5);
IkReal x2824=(cj6*r01);
IkReal x2825=((0.37429)*cj5);
IkReal x2826=((0.37429)*sj5);
IkReal x2827=(cj6*r21);
IkReal x2828=(r10*sj5*sj6);
IkReal x2829=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x2822*x2826))+(((-1.0)*x2826*x2827))+(((-1.0)*pz))+((r22*x2825))+((r22*x2823))+((x2820*x2822))+((x2820*x2827)));
evalcond[2]=((0.43342)+((r02*x2825))+((r02*x2823))+(((-1.0)*x2824*x2826))+(((-1.0)*px))+(((-1.0)*r00*sj6*x2826))+((r00*sj6*x2820))+((x2820*x2824)));
evalcond[3]=((((-1.0)*r10*sj6*x2826))+(((-1.0)*x2821*x2826))+((r10*sj6*x2820))+(((-1.0)*py))+((x2820*x2821))+((r12*x2823))+((r12*x2825)));
evalcond[4]=((1.0)+((sj5*x2822))+((sj5*x2827))+(((-1.0)*r22*x2819)));
evalcond[5]=((((-1.0)*r12*x2819))+((sj5*x2821))+x2828);
evalcond[6]=((((-1.0)*r02*x2819))+((sj5*x2824))+x2829);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2830=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2830;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x2830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2831=((1.0)*sj6);
IkReal x2832=((((-1.0)*r00*sj5*x2831))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x2832;
j4eval[1]=IKsign(x2832);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2831))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2833=cj6*cj6;
IkReal x2834=cj5*cj5;
IkReal x2835=r00*r00;
IkReal x2836=r01*r01;
IkReal x2837=r02*r02;
IkReal x2838=(cj6*r00);
IkReal x2839=(cj5*cj6*r01);
IkReal x2840=((2.0)*r02*sj5);
IkReal x2841=((1.0)*x2833);
IkReal x2842=((2.0)*r01*sj6);
IkReal x2843=(cj5*r00*sj6);
IkReal x2844=(x2834*x2835);
IkReal x2845=((((-1.0)*x2837))+(((-1.0)*x2836))+((x2834*x2837))+(((-1.0)*x2840*x2843))+(((-1.0)*x2834*x2836*x2841))+((x2838*x2842))+(((-1.0)*x2834*x2838*x2842))+(((-1.0)*x2839*x2840))+((x2833*x2844))+(((-1.0)*x2835*x2841))+(((-1.0)*x2844))+((x2833*x2836)));
j4eval[0]=x2845;
j4eval[1]=((IKabs((((r02*sj5))+x2843+x2839)))+(IKabs(((((-1.0)*r01*sj6))+x2838))));
j4eval[2]=IKsign(x2845);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2846=cj6*cj6;
IkReal x2847=cj5*cj5;
IkReal x2848=r00*r00;
IkReal x2849=r01*r01;
IkReal x2850=r02*r02;
IkReal x2851=(cj6*r00);
IkReal x2852=(cj5*cj6*r01);
IkReal x2853=((2.0)*r02*sj5);
IkReal x2854=((1.0)*x2846);
IkReal x2855=((2.0)*r01*sj6);
IkReal x2856=(cj5*r00*sj6);
IkReal x2857=(x2847*x2848);
CheckValue<IkReal> x2858 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x2851)),(((r02*sj5))+x2852+x2856),IKFAST_ATAN2_MAGTHRESH);
if(!x2858.valid){
continue;
}
CheckValue<IkReal> x2859=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2847*x2851*x2855))+(((-1.0)*x2847*x2849*x2854))+((x2847*x2850))+((x2846*x2849))+((x2846*x2857))+((x2851*x2855))+(((-1.0)*x2848*x2854))+(((-1.0)*x2849))+(((-1.0)*x2857))+(((-1.0)*x2850))+(((-1.0)*x2852*x2853))+(((-1.0)*x2853*x2856)))),-1);
if(!x2859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2858.value)+(((1.5707963267949)*(x2859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2860=IKsin(j4);
IkReal x2861=IKcos(j4);
IkReal x2862=(cj5*cj6);
IkReal x2863=(r11*sj6);
IkReal x2864=(cj6*r20);
IkReal x2865=(cj6*r10);
IkReal x2866=(cj5*sj6);
IkReal x2867=(r21*sj6);
IkReal x2868=(cj6*r00);
IkReal x2869=(r01*sj6);
IkReal x2870=((1.0)*x2861);
IkReal x2871=((1.0)*x2860);
IkReal x2872=(sj5*x2871);
evalcond[0]=((((-1.0)*r21*x2862*x2871))+(((-1.0)*r22*x2872))+(((-1.0)*r20*x2866*x2871))+((x2861*x2864))+(((-1.0)*x2867*x2870)));
evalcond[1]=((((-1.0)*r02*x2872))+(((-1.0)*r00*x2866*x2871))+(((-1.0)*x2869*x2870))+(((-1.0)*r01*x2862*x2871))+((x2861*x2868)));
evalcond[2]=((((-1.0)*r22*sj5*x2870))+(((-1.0)*r21*x2862*x2870))+(((-1.0)*x2864*x2871))+(((-1.0)*r20*x2866*x2870))+((x2860*x2867)));
evalcond[3]=((((-1.0)*r11*x2862*x2870))+(((-1.0)*x2865*x2871))+(((-1.0)*r12*sj5*x2870))+(((-1.0)*r10*x2866*x2870))+((x2860*x2863)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x2862*x2871))+((x2861*x2865))+(((-1.0)*x2863*x2870))+(((-1.0)*r12*x2872))+(((-1.0)*r10*x2866*x2871)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x2870))+(((-1.0)*r00*x2866*x2870))+(((-1.0)*x2868*x2871))+(((-1.0)*r01*x2862*x2870))+((x2860*x2869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2873=((1.0)*sj6);
CheckValue<IkReal> x2874 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x2873)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2874.valid){
continue;
}
CheckValue<IkReal> x2875=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x2873))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x2875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2874.value)+(((1.5707963267949)*(x2875.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2876=IKsin(j4);
IkReal x2877=IKcos(j4);
IkReal x2878=(cj5*cj6);
IkReal x2879=(r11*sj6);
IkReal x2880=(cj6*r20);
IkReal x2881=(cj6*r10);
IkReal x2882=(cj5*sj6);
IkReal x2883=(r21*sj6);
IkReal x2884=(cj6*r00);
IkReal x2885=(r01*sj6);
IkReal x2886=((1.0)*x2877);
IkReal x2887=((1.0)*x2876);
IkReal x2888=(sj5*x2887);
evalcond[0]=(((x2877*x2880))+(((-1.0)*x2883*x2886))+(((-1.0)*r22*x2888))+(((-1.0)*r20*x2882*x2887))+(((-1.0)*r21*x2878*x2887)));
evalcond[1]=(((x2877*x2884))+(((-1.0)*r00*x2882*x2887))+(((-1.0)*r02*x2888))+(((-1.0)*x2885*x2886))+(((-1.0)*r01*x2878*x2887)));
evalcond[2]=(((x2876*x2883))+(((-1.0)*r22*sj5*x2886))+(((-1.0)*r20*x2882*x2886))+(((-1.0)*r21*x2878*x2886))+(((-1.0)*x2880*x2887)));
evalcond[3]=(((x2876*x2879))+(((-1.0)*r11*x2878*x2886))+(((-1.0)*r10*x2882*x2886))+(((-1.0)*r12*sj5*x2886))+(((-1.0)*x2881*x2887)));
evalcond[4]=((-1.0)+((x2877*x2881))+(((-1.0)*x2879*x2886))+(((-1.0)*r11*x2878*x2887))+(((-1.0)*r10*x2882*x2887))+(((-1.0)*r12*x2888)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x2882*x2886))+(((-1.0)*r02*sj5*x2886))+((x2876*x2885))+(((-1.0)*x2884*x2887))+(((-1.0)*r01*x2878*x2886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2889.valid){
continue;
}
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2889.value)))+(x2890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2891=IKsin(j4);
IkReal x2892=IKcos(j4);
IkReal x2893=(cj5*cj6);
IkReal x2894=(r11*sj6);
IkReal x2895=(cj6*r20);
IkReal x2896=(cj6*r10);
IkReal x2897=(cj5*sj6);
IkReal x2898=(r21*sj6);
IkReal x2899=(cj6*r00);
IkReal x2900=(r01*sj6);
IkReal x2901=((1.0)*x2892);
IkReal x2902=((1.0)*x2891);
IkReal x2903=(sj5*x2902);
evalcond[0]=((((-1.0)*x2898*x2901))+((x2892*x2895))+(((-1.0)*r20*x2897*x2902))+(((-1.0)*r21*x2893*x2902))+(((-1.0)*r22*x2903)));
evalcond[1]=((((-1.0)*r02*x2903))+(((-1.0)*x2900*x2901))+((x2892*x2899))+(((-1.0)*r01*x2893*x2902))+(((-1.0)*r00*x2897*x2902)));
evalcond[2]=(((x2891*x2898))+(((-1.0)*r20*x2897*x2901))+(((-1.0)*r22*sj5*x2901))+(((-1.0)*x2895*x2902))+(((-1.0)*r21*x2893*x2901)));
evalcond[3]=(((x2891*x2894))+(((-1.0)*r10*x2897*x2901))+(((-1.0)*r11*x2893*x2901))+(((-1.0)*x2896*x2902))+(((-1.0)*r12*sj5*x2901)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x2897*x2902))+((x2892*x2896))+(((-1.0)*x2894*x2901))+(((-1.0)*r11*x2893*x2902))+(((-1.0)*r12*x2903)));
evalcond[5]=((-1.0)+((x2891*x2900))+(((-1.0)*r02*sj5*x2901))+(((-1.0)*r01*x2893*x2901))+(((-1.0)*x2899*x2902))+(((-1.0)*r00*x2897*x2901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2904=((1.0)*cj5);
IkReal x2905=((0.01)*cj5);
IkReal x2906=(cj6*r11);
IkReal x2907=(r20*sj6);
IkReal x2908=((0.01)*sj5);
IkReal x2909=(cj6*r01);
IkReal x2910=((0.37429)*cj5);
IkReal x2911=((0.37429)*sj5);
IkReal x2912=(cj6*r21);
IkReal x2913=(r10*sj5*sj6);
IkReal x2914=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x2907*x2911))+((r22*x2908))+((x2905*x2907))+(((-1.0)*pz))+(((-1.0)*x2911*x2912))+((x2905*x2912))+((r22*x2910)));
evalcond[2]=((-0.43342)+((r02*x2908))+((x2905*x2909))+(((-1.0)*px))+((r02*x2910))+(((-1.0)*r00*sj6*x2911))+((r00*sj6*x2905))+(((-1.0)*x2909*x2911)));
evalcond[3]=(((r12*x2910))+(((-1.0)*r10*sj6*x2911))+((x2905*x2906))+(((-1.0)*py))+(((-1.0)*x2906*x2911))+((r12*x2908))+((r10*sj6*x2905)));
evalcond[4]=((1.0)+((sj5*x2912))+((sj5*x2907))+(((-1.0)*r22*x2904)));
evalcond[5]=(((sj5*x2906))+(((-1.0)*r12*x2904))+x2913);
evalcond[6]=((((-1.0)*r02*x2904))+((sj5*x2909))+x2914);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2915=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2915;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2915);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2916=((1.0)*sj5);
IkReal x2917=(((cj5*r22))+(((-1.0)*r20*sj6*x2916))+(((-1.0)*cj6*r21*x2916)));
j4eval[0]=x2917;
j4eval[1]=IKsign(x2917);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2918=cj6*cj6;
IkReal x2919=r01*r01;
IkReal x2920=cj5*cj5;
IkReal x2921=r00*r00;
IkReal x2922=r02*r02;
IkReal x2923=(cj6*r00);
IkReal x2924=(r02*sj5);
IkReal x2925=(cj5*cj6*r01);
IkReal x2926=((2.0)*r01*sj6);
IkReal x2927=(cj5*r00*sj6);
IkReal x2928=((1.0)*x2920);
IkReal x2929=(x2918*x2921);
IkReal x2930=(x2918*x2919);
IkReal x2931=(((x2920*x2930))+(((-1.0)*x2923*x2926))+(((2.0)*x2924*x2925))+(((2.0)*x2924*x2927))+((x2920*x2921))+(((-1.0)*x2930))+x2919+x2929+x2922+((x2920*x2923*x2926))+(((-1.0)*x2928*x2929))+(((-1.0)*x2922*x2928)));
j4eval[0]=x2931;
j4eval[1]=((IKabs((x2925+x2924+x2927)))+(IKabs(((((-1.0)*r01*sj6))+x2923))));
j4eval[2]=IKsign(x2931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2932=cj6*cj6;
IkReal x2933=r01*r01;
IkReal x2934=cj5*cj5;
IkReal x2935=r00*r00;
IkReal x2936=r02*r02;
IkReal x2937=(cj6*r00);
IkReal x2938=((2.0)*r01);
IkReal x2939=(cj5*cj6);
IkReal x2940=(r02*sj5);
IkReal x2941=(cj5*r00*sj6);
IkReal x2942=(x2934*x2935);
IkReal x2943=(x2932*x2933);
CheckValue<IkReal> x2944=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2943))+(((2.0)*x2940*x2941))+(((-1.0)*sj6*x2937*x2938))+(((-1.0)*x2934*x2936))+(((-1.0)*x2932*x2942))+((sj6*x2934*x2937*x2938))+((x2932*x2935))+((x2938*x2939*x2940))+x2936+x2933+x2942+((x2934*x2943)))),-1);
if(!x2944.valid){
continue;
}
CheckValue<IkReal> x2945 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x2937)),(((r01*x2939))+x2941+x2940),IKFAST_ATAN2_MAGTHRESH);
if(!x2945.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2944.value)))+(x2945.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2946=IKsin(j4);
IkReal x2947=IKcos(j4);
IkReal x2948=(cj5*cj6);
IkReal x2949=(r11*sj6);
IkReal x2950=(cj6*r20);
IkReal x2951=(cj6*r10);
IkReal x2952=(cj5*sj6);
IkReal x2953=(r21*sj6);
IkReal x2954=(cj6*r00);
IkReal x2955=(r01*sj6);
IkReal x2956=((1.0)*x2947);
IkReal x2957=((1.0)*x2946);
IkReal x2958=(sj5*x2957);
evalcond[0]=((((-1.0)*x2953*x2956))+(((-1.0)*r21*x2948*x2957))+((x2947*x2950))+(((-1.0)*r20*x2952*x2957))+(((-1.0)*r22*x2958)));
evalcond[1]=((((-1.0)*r02*x2958))+(((-1.0)*r01*x2948*x2957))+((x2947*x2954))+(((-1.0)*x2955*x2956))+(((-1.0)*r00*x2952*x2957)));
evalcond[2]=(((x2946*x2953))+(((-1.0)*r21*x2948*x2956))+(((-1.0)*r22*sj5*x2956))+(((-1.0)*r20*x2952*x2956))+(((-1.0)*x2950*x2957)));
evalcond[3]=(((x2946*x2949))+(((-1.0)*r10*x2952*x2956))+(((-1.0)*r11*x2948*x2956))+(((-1.0)*x2951*x2957))+(((-1.0)*r12*sj5*x2956)));
evalcond[4]=((1.0)+((x2947*x2951))+(((-1.0)*r10*x2952*x2957))+(((-1.0)*r11*x2948*x2957))+(((-1.0)*x2949*x2956))+(((-1.0)*r12*x2958)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x2956))+((x2946*x2955))+(((-1.0)*r01*x2948*x2956))+(((-1.0)*x2954*x2957))+(((-1.0)*r00*x2952*x2956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2959=((1.0)*sj5);
CheckValue<IkReal> x2960=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x2959))+(((-1.0)*cj6*r21*x2959)))),-1);
if(!x2960.valid){
continue;
}
CheckValue<IkReal> x2961 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x2961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2960.value)))+(x2961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2962=IKsin(j4);
IkReal x2963=IKcos(j4);
IkReal x2964=(cj5*cj6);
IkReal x2965=(r11*sj6);
IkReal x2966=(cj6*r20);
IkReal x2967=(cj6*r10);
IkReal x2968=(cj5*sj6);
IkReal x2969=(r21*sj6);
IkReal x2970=(cj6*r00);
IkReal x2971=(r01*sj6);
IkReal x2972=((1.0)*x2963);
IkReal x2973=((1.0)*x2962);
IkReal x2974=(sj5*x2973);
evalcond[0]=((((-1.0)*r20*x2968*x2973))+(((-1.0)*r21*x2964*x2973))+(((-1.0)*x2969*x2972))+(((-1.0)*r22*x2974))+((x2963*x2966)));
evalcond[1]=((((-1.0)*r02*x2974))+(((-1.0)*r00*x2968*x2973))+(((-1.0)*r01*x2964*x2973))+((x2963*x2970))+(((-1.0)*x2971*x2972)));
evalcond[2]=((((-1.0)*r20*x2968*x2972))+(((-1.0)*r21*x2964*x2972))+(((-1.0)*r22*sj5*x2972))+((x2962*x2969))+(((-1.0)*x2966*x2973)));
evalcond[3]=((((-1.0)*r12*sj5*x2972))+(((-1.0)*r11*x2964*x2972))+(((-1.0)*r10*x2968*x2972))+((x2962*x2965))+(((-1.0)*x2967*x2973)));
evalcond[4]=((1.0)+(((-1.0)*r12*x2974))+(((-1.0)*r11*x2964*x2973))+(((-1.0)*r10*x2968*x2973))+(((-1.0)*x2965*x2972))+((x2963*x2967)));
evalcond[5]=((1.0)+((x2962*x2971))+(((-1.0)*r00*x2968*x2972))+(((-1.0)*r01*x2964*x2972))+(((-1.0)*r02*sj5*x2972))+(((-1.0)*x2970*x2973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2975 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2975.valid){
continue;
}
CheckValue<IkReal> x2976=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2975.value)+(((1.5707963267949)*(x2976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2977=IKsin(j4);
IkReal x2978=IKcos(j4);
IkReal x2979=(cj5*cj6);
IkReal x2980=(r11*sj6);
IkReal x2981=(cj6*r20);
IkReal x2982=(cj6*r10);
IkReal x2983=(cj5*sj6);
IkReal x2984=(r21*sj6);
IkReal x2985=(cj6*r00);
IkReal x2986=(r01*sj6);
IkReal x2987=((1.0)*x2978);
IkReal x2988=((1.0)*x2977);
IkReal x2989=(sj5*x2988);
evalcond[0]=((((-1.0)*x2984*x2987))+(((-1.0)*r21*x2979*x2988))+((x2978*x2981))+(((-1.0)*r22*x2989))+(((-1.0)*r20*x2983*x2988)));
evalcond[1]=((((-1.0)*r00*x2983*x2988))+((x2978*x2985))+(((-1.0)*r01*x2979*x2988))+(((-1.0)*r02*x2989))+(((-1.0)*x2986*x2987)));
evalcond[2]=((((-1.0)*x2981*x2988))+(((-1.0)*r21*x2979*x2987))+((x2977*x2984))+(((-1.0)*r22*sj5*x2987))+(((-1.0)*r20*x2983*x2987)));
evalcond[3]=((((-1.0)*x2982*x2988))+((x2977*x2980))+(((-1.0)*r11*x2979*x2987))+(((-1.0)*r10*x2983*x2987))+(((-1.0)*r12*sj5*x2987)));
evalcond[4]=((1.0)+(((-1.0)*r12*x2989))+((x2978*x2982))+(((-1.0)*r11*x2979*x2988))+(((-1.0)*x2980*x2987))+(((-1.0)*r10*x2983*x2988)));
evalcond[5]=((1.0)+(((-1.0)*x2985*x2988))+(((-1.0)*r02*sj5*x2987))+(((-1.0)*r00*x2983*x2987))+((x2977*x2986))+(((-1.0)*r01*x2979*x2987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2990=cj6*cj6;
IkReal x2991=cj5*cj5;
IkReal x2992=(r22*sj5);
IkReal x2993=(cj0*r20);
IkReal x2994=((1.0)*r21);
IkReal x2995=(cj5*sj6);
IkReal x2996=(r02*r22);
IkReal x2997=(cj5*cj6);
IkReal x2998=(r02*sj5);
IkReal x2999=(cj6*sj6);
IkReal x3000=((1.0)*r20);
IkReal x3001=(r01*x2994);
IkReal x3002=(r00*r20*x2991);
CheckValue<IkReal> x3003 = IKatan2WithCheck(IkReal((((cj6*x2993))+(((-1.0)*cj0*sj6*x2994)))),(((cj0*x2992))+((x2993*x2995))+((cj0*r21*x2997))),IKFAST_ATAN2_MAGTHRESH);
if(!x3003.valid){
continue;
}
CheckValue<IkReal> x3004=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2991*x2994*x2999))+(((-1.0)*x2994*x2997*x2998))+(((-1.0)*r01*x2991*x2999*x3000))+(((-1.0)*x2990*x2991*x3001))+((r01*r20*x2999))+(((-1.0)*x3001))+((x2991*x2996))+((r01*r21*x2990))+((x2990*x3002))+(((-1.0)*x2996))+(((-1.0)*r00*x2990*x3000))+(((-1.0)*r01*x2992*x2997))+(((-1.0)*x2995*x2998*x3000))+(((-1.0)*r00*x2992*x2995))+(((-1.0)*r00*x2991*x3000))+((r00*r21*x2999)))),-1);
if(!x3004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3003.value)+(((1.5707963267949)*(x3004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3005=IKsin(j4);
IkReal x3006=IKcos(j4);
IkReal x3007=((1.0)*cj0);
IkReal x3008=(cj6*r20);
IkReal x3009=(cj5*sj6);
IkReal x3010=((1.0)*sj6);
IkReal x3011=(r21*sj6);
IkReal x3012=(cj6*r00);
IkReal x3013=((1.0)*cj5*cj6);
IkReal x3014=(r01*x3006);
IkReal x3015=(r11*x3005);
IkReal x3016=((1.0)*x3005);
IkReal x3017=(r11*x3006);
IkReal x3018=(r10*x3006);
IkReal x3019=((1.0)*x3006);
IkReal x3020=(r01*x3005);
IkReal x3021=(sj5*x3016);
evalcond[0]=((((-1.0)*r21*x3006*x3010))+(((-1.0)*r21*x3005*x3013))+(((-1.0)*r20*x3009*x3016))+(((-1.0)*r22*x3021))+((x3006*x3008)));
evalcond[1]=((((-1.0)*r21*x3006*x3013))+(((-1.0)*r22*sj5*x3019))+(((-1.0)*r20*x3009*x3019))+((x3005*x3011))+(((-1.0)*x3008*x3016)));
evalcond[2]=(sj0+(((-1.0)*r00*x3009*x3016))+(((-1.0)*x3010*x3014))+(((-1.0)*x3013*x3020))+((x3006*x3012))+(((-1.0)*r02*x3021)));
evalcond[3]=((((-1.0)*r12*x3021))+((cj6*x3018))+(((-1.0)*x3007))+(((-1.0)*x3010*x3017))+(((-1.0)*r10*x3009*x3016))+(((-1.0)*x3013*x3015)));
evalcond[4]=((((-1.0)*r00*x3009*x3019))+(((-1.0)*r02*sj5*x3019))+(((-1.0)*x3007))+((sj6*x3020))+(((-1.0)*x3012*x3016))+(((-1.0)*x3013*x3014)));
evalcond[5]=((((-1.0)*x3009*x3018))+(((-1.0)*sj0))+((sj6*x3015))+(((-1.0)*cj6*r10*x3016))+(((-1.0)*r12*sj5*x3019))+(((-1.0)*x3013*x3017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3022=(cj0*sj6);
IkReal x3023=((1.0)*sj5);
IkReal x3024=(cj0*cj6);
CheckValue<IkReal> x3025 = IKatan2WithCheck(IkReal((((r20*x3024))+(((-1.0)*r21*x3022)))),(((cj5*r21*x3024))+((cj0*r22*sj5))+((cj5*r20*x3022))),IKFAST_ATAN2_MAGTHRESH);
if(!x3025.valid){
continue;
}
CheckValue<IkReal> x3026=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x3023))+(((-1.0)*r00*sj6*x3023))+((cj5*r02)))),-1);
if(!x3026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3025.value)+(((1.5707963267949)*(x3026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3027=IKsin(j4);
IkReal x3028=IKcos(j4);
IkReal x3029=((1.0)*cj0);
IkReal x3030=(cj6*r20);
IkReal x3031=(cj5*sj6);
IkReal x3032=((1.0)*sj6);
IkReal x3033=(r21*sj6);
IkReal x3034=(cj6*r00);
IkReal x3035=((1.0)*cj5*cj6);
IkReal x3036=(r01*x3028);
IkReal x3037=(r11*x3027);
IkReal x3038=((1.0)*x3027);
IkReal x3039=(r11*x3028);
IkReal x3040=(r10*x3028);
IkReal x3041=((1.0)*x3028);
IkReal x3042=(r01*x3027);
IkReal x3043=(sj5*x3038);
evalcond[0]=(((x3028*x3030))+(((-1.0)*r21*x3027*x3035))+(((-1.0)*r22*x3043))+(((-1.0)*r20*x3031*x3038))+(((-1.0)*r21*x3028*x3032)));
evalcond[1]=((((-1.0)*x3030*x3038))+(((-1.0)*r22*sj5*x3041))+(((-1.0)*r20*x3031*x3041))+(((-1.0)*r21*x3028*x3035))+((x3027*x3033)));
evalcond[2]=(((x3028*x3034))+(((-1.0)*r00*x3031*x3038))+sj0+(((-1.0)*x3032*x3036))+(((-1.0)*x3035*x3042))+(((-1.0)*r02*x3043)));
evalcond[3]=((((-1.0)*x3029))+(((-1.0)*r12*x3043))+(((-1.0)*r10*x3031*x3038))+(((-1.0)*x3035*x3037))+((cj6*x3040))+(((-1.0)*x3032*x3039)));
evalcond[4]=((((-1.0)*x3029))+(((-1.0)*x3035*x3036))+((sj6*x3042))+(((-1.0)*r00*x3031*x3041))+(((-1.0)*r02*sj5*x3041))+(((-1.0)*x3034*x3038)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x3038))+(((-1.0)*x3035*x3039))+(((-1.0)*r12*sj5*x3041))+((sj6*x3037))+(((-1.0)*x3031*x3040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3044=(cj5*sj0);
IkReal x3045=((1.0)*sj5);
CheckValue<IkReal> x3046 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((cj6*r21*x3044))+((r22*sj0*sj5))+((r20*sj6*x3044))),IKFAST_ATAN2_MAGTHRESH);
if(!x3046.valid){
continue;
}
CheckValue<IkReal> x3047=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x3045))+(((-1.0)*cj6*r11*x3045)))),-1);
if(!x3047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3046.value)+(((1.5707963267949)*(x3047.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3048=IKsin(j4);
IkReal x3049=IKcos(j4);
IkReal x3050=((1.0)*cj0);
IkReal x3051=(cj6*r20);
IkReal x3052=(cj5*sj6);
IkReal x3053=((1.0)*sj6);
IkReal x3054=(r21*sj6);
IkReal x3055=(cj6*r00);
IkReal x3056=((1.0)*cj5*cj6);
IkReal x3057=(r01*x3049);
IkReal x3058=(r11*x3048);
IkReal x3059=((1.0)*x3048);
IkReal x3060=(r11*x3049);
IkReal x3061=(r10*x3049);
IkReal x3062=((1.0)*x3049);
IkReal x3063=(r01*x3048);
IkReal x3064=(sj5*x3059);
evalcond[0]=((((-1.0)*r22*x3064))+(((-1.0)*r20*x3052*x3059))+(((-1.0)*r21*x3048*x3056))+(((-1.0)*r21*x3049*x3053))+((x3049*x3051)));
evalcond[1]=(((x3048*x3054))+(((-1.0)*r20*x3052*x3062))+(((-1.0)*x3051*x3059))+(((-1.0)*r22*sj5*x3062))+(((-1.0)*r21*x3049*x3056)));
evalcond[2]=(sj0+(((-1.0)*x3053*x3057))+(((-1.0)*r02*x3064))+(((-1.0)*r00*x3052*x3059))+((x3049*x3055))+(((-1.0)*x3056*x3063)));
evalcond[3]=((((-1.0)*r10*x3052*x3059))+(((-1.0)*r12*x3064))+(((-1.0)*x3056*x3058))+(((-1.0)*x3053*x3060))+((cj6*x3061))+(((-1.0)*x3050)));
evalcond[4]=(((sj6*x3063))+(((-1.0)*x3055*x3059))+(((-1.0)*r02*sj5*x3062))+(((-1.0)*x3056*x3057))+(((-1.0)*r00*x3052*x3062))+(((-1.0)*x3050)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3052*x3061))+(((-1.0)*cj6*r10*x3059))+((sj6*x3058))+(((-1.0)*r12*sj5*x3062))+(((-1.0)*x3056*x3060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3065=(r10*sj6);
IkReal x3066=((0.37429)*sj5);
IkReal x3067=(cj5*r22);
IkReal x3068=((0.01)*cj5);
IkReal x3069=(cj6*r11);
IkReal x3070=(r00*sj6);
IkReal x3071=(r20*sj6);
IkReal x3072=((0.01)*sj5);
IkReal x3073=(cj6*r01);
IkReal x3074=((0.37429)*cj5);
IkReal x3075=(cj6*r21);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.36442)+(((-1.0)*x3066*x3075))+(((-1.0)*x3066*x3071))+((r22*x3072))+(((-1.0)*pz))+((x3068*x3071))+((x3068*x3075))+(((0.37429)*x3067)));
evalcond[2]=((((-1.0)*x3066*x3073))+(((-1.0)*x3066*x3070))+(((-1.0)*px))+((x3068*x3070))+((x3068*x3073))+((r02*x3072))+((r02*x3074)));
evalcond[3]=((((-1.0)*x3066*x3069))+((x3065*x3068))+(((-1.0)*py))+((r12*x3072))+((r12*x3074))+((x3068*x3069))+(((-1.0)*x3065*x3066)));
evalcond[4]=((((-1.0)*x3067))+((sj5*x3075))+((sj5*x3071)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3076=(cj6*sj5);
IkReal x3077=(sj5*sj6);
IkReal x3078=((1.0)*cj5);
if( IKabs((((r10*x3077))+(((-1.0)*r12*x3078))+((r11*x3076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x3076))+((r00*x3077))+(((-1.0)*r02*x3078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3077))+(((-1.0)*r12*x3078))+((r11*x3076))))+IKsqr((((r01*x3076))+((r00*x3077))+(((-1.0)*r02*x3078))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x3077))+(((-1.0)*r12*x3078))+((r11*x3076))), (((r01*x3076))+((r00*x3077))+(((-1.0)*r02*x3078))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3079=(cj6*sj5);
IkReal x3080=(sj5*sj6);
IkReal x3081=((1.0)*cj5);
evalcond[0]=((((-1.0)*(IKsin(j0))))+((r11*x3079))+(((-1.0)*r12*x3081))+((r10*x3080)));
evalcond[1]=(((r01*x3079))+((r00*x3080))+(((-1.0)*r02*x3081))+(((-1.0)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3082=((1.0)*cj5);
IkReal x3083=(((cj6*r11*sj5))+(((-1.0)*r12*x3082))+((r10*sj5*sj6)));
j4eval[0]=x3083;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs(((((-1.0)*cj6*r01*x3082))+(((-1.0)*r02*sj5))+(((-1.0)*r00*sj6*x3082))))));
j4eval[2]=IKsign(x3083);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3084=(cj0*sj6);
IkReal x3085=(cj0*cj6);
IkReal x3086=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3086;
j4eval[1]=((IKabs((((cj5*r20*x3084))+((cj5*r21*x3085))+((cj0*r22*sj5)))))+(IKabs((((r20*x3085))+(((-1.0)*r21*x3084))))));
j4eval[2]=IKsign(x3086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3087=cj5*cj5;
IkReal x3088=cj6*cj6;
IkReal x3089=r20*r20;
IkReal x3090=r21*r21;
IkReal x3091=r22*r22;
IkReal x3092=(r22*sj5);
IkReal x3093=(cj6*r21);
IkReal x3094=((2.0)*r20*sj6);
IkReal x3095=((1.0)*x3087);
IkReal x3096=(x3088*x3089);
IkReal x3097=(x3088*x3090);
IkReal x3098=(((x3087*x3093*x3094))+x3090+x3091+x3096+((cj5*x3092*x3094))+((x3087*x3097))+(((2.0)*cj5*x3092*x3093))+(((-1.0)*x3091*x3095))+(((-1.0)*x3093*x3094))+((x3087*x3089))+(((-1.0)*x3097))+(((-1.0)*x3095*x3096)));
j4eval[0]=x3098;
j4eval[1]=IKsign(x3098);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((x3092+((cj5*r20*sj6))+((cj5*x3093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3099=((1.0)*cj5);
IkReal x3100=((0.01)*cj5);
IkReal x3101=(cj6*r11);
IkReal x3102=(r20*sj6);
IkReal x3103=((0.01)*sj5);
IkReal x3104=(cj6*r01);
IkReal x3105=((0.37429)*cj5);
IkReal x3106=((0.37429)*sj5);
IkReal x3107=(cj6*r21);
IkReal x3108=(r10*sj5*sj6);
IkReal x3109=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-1.0)*x3102*x3106))+(((-1.0)*pz))+((r22*x3105))+((r22*x3103))+(((-1.0)*x3106*x3107))+((x3100*x3107))+((x3100*x3102)));
evalcond[2]=(((r02*x3105))+((r02*x3103))+(((-1.0)*px))+(((-1.0)*x3104*x3106))+((r00*sj6*x3100))+(((-1.0)*r00*sj6*x3106))+((x3100*x3104)));
evalcond[3]=((((-1.0)*r10*sj6*x3106))+(((-1.0)*py))+((r10*sj6*x3100))+(((-1.0)*x3101*x3106))+((r12*x3103))+((r12*x3105))+((x3100*x3101)));
evalcond[4]=((((-1.0)*r22*x3099))+((sj5*x3107))+((sj5*x3102)));
evalcond[5]=((-1.0)+x3108+(((-1.0)*r12*x3099))+((sj5*x3101)));
evalcond[6]=((((-1.0)*r02*x3099))+x3109+((sj5*x3104)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3110=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3110;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3110);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3111=((1.0)*sj5);
IkReal x3112=(((cj5*r22))+(((-1.0)*cj6*r21*x3111))+(((-1.0)*r20*sj6*x3111)));
j4eval[0]=x3112;
j4eval[1]=IKsign(x3112);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3113=cj5*cj5;
IkReal x3114=cj6*cj6;
IkReal x3115=r20*r20;
IkReal x3116=r21*r21;
IkReal x3117=r22*r22;
IkReal x3118=(r22*sj5);
IkReal x3119=(cj6*r21);
IkReal x3120=((2.0)*r20*sj6);
IkReal x3121=((1.0)*x3113);
IkReal x3122=(x3114*x3115);
IkReal x3123=(x3114*x3116);
IkReal x3124=(x3117+x3116+x3122+(((-1.0)*x3117*x3121))+((cj5*x3118*x3120))+(((-1.0)*x3123))+((x3113*x3119*x3120))+((x3113*x3115))+(((2.0)*cj5*x3118*x3119))+((x3113*x3123))+(((-1.0)*x3121*x3122))+(((-1.0)*x3119*x3120)));
j4eval[0]=x3124;
j4eval[1]=IKsign(x3124);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((x3118+((cj5*r20*sj6))+((cj5*x3119))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3125=cj5*cj5;
IkReal x3126=cj6*cj6;
IkReal x3127=r20*r20;
IkReal x3128=r21*r21;
IkReal x3129=r22*r22;
IkReal x3130=(cj6*r21);
IkReal x3131=(r22*sj5);
IkReal x3132=((1.0)*x3125);
IkReal x3133=((2.0)*r20*sj6);
IkReal x3134=(x3126*x3127);
IkReal x3135=(x3126*x3128);
CheckValue<IkReal> x3136=IKPowWithIntegerCheck(IKsign((x3128+x3129+x3134+(((-1.0)*x3130*x3133))+((x3125*x3135))+(((-1.0)*x3132*x3134))+(((-1.0)*x3135))+((x3125*x3127))+((cj5*x3131*x3133))+((x3125*x3130*x3133))+(((2.0)*cj5*x3130*x3131))+(((-1.0)*x3129*x3132)))),-1);
if(!x3136.valid){
continue;
}
CheckValue<IkReal> x3137 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(x3131+((cj5*r20*sj6))+((cj5*x3130))),IKFAST_ATAN2_MAGTHRESH);
if(!x3137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3136.value)))+(x3137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3138=IKsin(j4);
IkReal x3139=IKcos(j4);
IkReal x3140=(cj5*cj6);
IkReal x3141=(r11*sj6);
IkReal x3142=(cj6*r20);
IkReal x3143=(cj5*sj6);
IkReal x3144=(cj6*r10);
IkReal x3145=(r01*sj6);
IkReal x3146=(r21*sj6);
IkReal x3147=(cj6*r00);
IkReal x3148=((1.0)*x3139);
IkReal x3149=((1.0)*x3138);
IkReal x3150=(sj5*x3149);
evalcond[0]=((((-1.0)*r22*x3150))+(((-1.0)*x3146*x3148))+(((-1.0)*r20*x3143*x3149))+((x3139*x3142))+(((-1.0)*r21*x3140*x3149)));
evalcond[1]=((((-1.0)*r11*x3140*x3149))+(((-1.0)*x3141*x3148))+((x3139*x3144))+(((-1.0)*r12*x3150))+(((-1.0)*r10*x3143*x3149)));
evalcond[2]=((((-1.0)*x3147*x3149))+(((-1.0)*r02*sj5*x3148))+(((-1.0)*r00*x3143*x3148))+(((-1.0)*r01*x3140*x3148))+((x3138*x3145)));
evalcond[3]=((((-1.0)*r11*x3140*x3148))+(((-1.0)*r12*sj5*x3148))+(((-1.0)*x3144*x3149))+((x3138*x3141))+(((-1.0)*r10*x3143*x3148)));
evalcond[4]=((-1.0)+(((-1.0)*x3145*x3148))+(((-1.0)*r00*x3143*x3149))+((x3139*x3147))+(((-1.0)*r02*x3150))+(((-1.0)*r01*x3140*x3149)));
evalcond[5]=((1.0)+(((-1.0)*x3142*x3149))+(((-1.0)*r22*sj5*x3148))+(((-1.0)*r20*x3143*x3148))+(((-1.0)*r21*x3140*x3148))+((x3138*x3146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3151=((1.0)*sj5);
CheckValue<IkReal> x3152 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3152.valid){
continue;
}
CheckValue<IkReal> x3153=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21*x3151))+((cj5*r22))+(((-1.0)*r20*sj6*x3151)))),-1);
if(!x3153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3152.value)+(((1.5707963267949)*(x3153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3154=IKsin(j4);
IkReal x3155=IKcos(j4);
IkReal x3156=(cj5*cj6);
IkReal x3157=(r11*sj6);
IkReal x3158=(cj6*r20);
IkReal x3159=(cj5*sj6);
IkReal x3160=(cj6*r10);
IkReal x3161=(r01*sj6);
IkReal x3162=(r21*sj6);
IkReal x3163=(cj6*r00);
IkReal x3164=((1.0)*x3155);
IkReal x3165=((1.0)*x3154);
IkReal x3166=(sj5*x3165);
evalcond[0]=((((-1.0)*x3162*x3164))+((x3155*x3158))+(((-1.0)*r20*x3159*x3165))+(((-1.0)*r21*x3156*x3165))+(((-1.0)*r22*x3166)));
evalcond[1]=((((-1.0)*r12*x3166))+(((-1.0)*r11*x3156*x3165))+(((-1.0)*x3157*x3164))+((x3155*x3160))+(((-1.0)*r10*x3159*x3165)));
evalcond[2]=((((-1.0)*x3163*x3165))+(((-1.0)*r01*x3156*x3164))+(((-1.0)*r02*sj5*x3164))+((x3154*x3161))+(((-1.0)*r00*x3159*x3164)));
evalcond[3]=((((-1.0)*r11*x3156*x3164))+(((-1.0)*x3160*x3165))+(((-1.0)*r12*sj5*x3164))+((x3154*x3157))+(((-1.0)*r10*x3159*x3164)));
evalcond[4]=((-1.0)+(((-1.0)*x3161*x3164))+((x3155*x3163))+(((-1.0)*r01*x3156*x3165))+(((-1.0)*r02*x3166))+(((-1.0)*r00*x3159*x3165)));
evalcond[5]=((1.0)+(((-1.0)*r20*x3159*x3164))+(((-1.0)*x3158*x3165))+(((-1.0)*r21*x3156*x3164))+((x3154*x3162))+(((-1.0)*r22*sj5*x3164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3167 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3167.valid){
continue;
}
CheckValue<IkReal> x3168=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3167.value)+(((1.5707963267949)*(x3168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3169=IKsin(j4);
IkReal x3170=IKcos(j4);
IkReal x3171=(cj5*cj6);
IkReal x3172=(r11*sj6);
IkReal x3173=(cj6*r20);
IkReal x3174=(cj5*sj6);
IkReal x3175=(cj6*r10);
IkReal x3176=(r01*sj6);
IkReal x3177=(r21*sj6);
IkReal x3178=(cj6*r00);
IkReal x3179=((1.0)*x3170);
IkReal x3180=((1.0)*x3169);
IkReal x3181=(sj5*x3180);
evalcond[0]=((((-1.0)*r21*x3171*x3180))+(((-1.0)*r22*x3181))+((x3170*x3173))+(((-1.0)*x3177*x3179))+(((-1.0)*r20*x3174*x3180)));
evalcond[1]=((((-1.0)*r10*x3174*x3180))+((x3170*x3175))+(((-1.0)*r11*x3171*x3180))+(((-1.0)*x3172*x3179))+(((-1.0)*r12*x3181)));
evalcond[2]=((((-1.0)*r00*x3174*x3179))+(((-1.0)*r01*x3171*x3179))+(((-1.0)*r02*sj5*x3179))+(((-1.0)*x3178*x3180))+((x3169*x3176)));
evalcond[3]=((((-1.0)*r10*x3174*x3179))+(((-1.0)*r11*x3171*x3179))+(((-1.0)*x3175*x3180))+(((-1.0)*r12*sj5*x3179))+((x3169*x3172)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x3181))+((x3170*x3178))+(((-1.0)*r00*x3174*x3180))+(((-1.0)*r01*x3171*x3180))+(((-1.0)*x3176*x3179)));
evalcond[5]=((1.0)+(((-1.0)*r22*sj5*x3179))+(((-1.0)*r20*x3174*x3179))+(((-1.0)*r21*x3171*x3179))+((x3169*x3177))+(((-1.0)*x3173*x3180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3182=((1.0)*cj5);
IkReal x3183=((0.01)*cj5);
IkReal x3184=(cj6*r11);
IkReal x3185=(r20*sj6);
IkReal x3186=((0.01)*sj5);
IkReal x3187=(cj6*r01);
IkReal x3188=((0.37429)*cj5);
IkReal x3189=((0.37429)*sj5);
IkReal x3190=(cj6*r21);
IkReal x3191=(r10*sj5*sj6);
IkReal x3192=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((r22*x3186))+((r22*x3188))+(((-1.0)*x3185*x3189))+((x3183*x3190))+(((-1.0)*pz))+((x3183*x3185))+(((-1.0)*x3189*x3190)));
evalcond[2]=((((-1.0)*x3187*x3189))+((r00*sj6*x3183))+(((-1.0)*px))+(((-1.0)*r00*sj6*x3189))+((x3183*x3187))+((r02*x3186))+((r02*x3188)));
evalcond[3]=((((-1.0)*x3184*x3189))+((r10*sj6*x3183))+((r12*x3188))+((r12*x3186))+(((-1.0)*py))+(((-1.0)*r10*sj6*x3189))+((x3183*x3184)));
evalcond[4]=((((-1.0)*r22*x3182))+((sj5*x3185))+((sj5*x3190)));
evalcond[5]=((1.0)+x3191+((sj5*x3184))+(((-1.0)*r12*x3182)));
evalcond[6]=(x3192+(((-1.0)*r02*x3182))+((sj5*x3187)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3193=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3193;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3193);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3194=((1.0)*sj6);
IkReal x3195=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3194)));
j4eval[0]=x3195;
j4eval[1]=IKsign(x3195);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3194))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3196=cj5*cj5;
IkReal x3197=cj6*cj6;
IkReal x3198=r20*r20;
IkReal x3199=r21*r21;
IkReal x3200=r22*r22;
IkReal x3201=(r22*sj5);
IkReal x3202=(cj6*r21);
IkReal x3203=((2.0)*r20*sj6);
IkReal x3204=((1.0)*x3196);
IkReal x3205=(x3197*x3198);
IkReal x3206=(x3197*x3199);
IkReal x3207=(x3199+((x3196*x3202*x3203))+((x3196*x3206))+(((-1.0)*x3204*x3205))+(((-1.0)*x3200*x3204))+((cj5*x3201*x3203))+x3205+x3200+(((2.0)*cj5*x3201*x3202))+(((-1.0)*x3206))+(((-1.0)*x3202*x3203))+((x3196*x3198)));
j4eval[0]=x3207;
j4eval[1]=IKsign(x3207);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r20*sj6))+x3201+((cj5*x3202))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3208=cj5*cj5;
IkReal x3209=cj6*cj6;
IkReal x3210=r20*r20;
IkReal x3211=r21*r21;
IkReal x3212=r22*r22;
IkReal x3213=(cj6*r21);
IkReal x3214=(r22*sj5);
IkReal x3215=((1.0)*x3208);
IkReal x3216=((2.0)*r20*sj6);
IkReal x3217=(x3209*x3210);
IkReal x3218=(x3209*x3211);
CheckValue<IkReal> x3219=IKPowWithIntegerCheck(IKsign((((x3208*x3213*x3216))+(((-1.0)*x3215*x3217))+((x3208*x3210))+((x3208*x3218))+x3217+x3211+x3212+(((-1.0)*x3218))+((cj5*x3214*x3216))+(((2.0)*cj5*x3213*x3214))+(((-1.0)*x3212*x3215))+(((-1.0)*x3213*x3216)))),-1);
if(!x3219.valid){
continue;
}
CheckValue<IkReal> x3220 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*x3213))+((cj5*r20*sj6))+x3214),IKFAST_ATAN2_MAGTHRESH);
if(!x3220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3219.value)))+(x3220.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3221=IKsin(j4);
IkReal x3222=IKcos(j4);
IkReal x3223=(cj5*cj6);
IkReal x3224=(r11*sj6);
IkReal x3225=(cj6*r20);
IkReal x3226=(cj5*sj6);
IkReal x3227=(cj6*r10);
IkReal x3228=(r01*sj6);
IkReal x3229=(r21*sj6);
IkReal x3230=(cj6*r00);
IkReal x3231=((1.0)*x3222);
IkReal x3232=((1.0)*x3221);
IkReal x3233=(sj5*x3232);
evalcond[0]=((((-1.0)*x3229*x3231))+((x3222*x3225))+(((-1.0)*r21*x3223*x3232))+(((-1.0)*r22*x3233))+(((-1.0)*r20*x3226*x3232)));
evalcond[1]=(((x3222*x3227))+(((-1.0)*r10*x3226*x3232))+(((-1.0)*r11*x3223*x3232))+(((-1.0)*r12*x3233))+(((-1.0)*x3224*x3231)));
evalcond[2]=((((-1.0)*x3230*x3232))+(((-1.0)*r00*x3226*x3231))+((x3221*x3228))+(((-1.0)*r01*x3223*x3231))+(((-1.0)*r02*sj5*x3231)));
evalcond[3]=((((-1.0)*r10*x3226*x3231))+(((-1.0)*r11*x3223*x3231))+((x3221*x3224))+(((-1.0)*x3227*x3232))+(((-1.0)*r12*sj5*x3231)));
evalcond[4]=((1.0)+(((-1.0)*r02*x3233))+(((-1.0)*x3228*x3231))+(((-1.0)*r00*x3226*x3232))+((x3222*x3230))+(((-1.0)*r01*x3223*x3232)));
evalcond[5]=((1.0)+(((-1.0)*r21*x3223*x3231))+(((-1.0)*r22*sj5*x3231))+((x3221*x3229))+(((-1.0)*x3225*x3232))+(((-1.0)*r20*x3226*x3231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3234=((1.0)*sj6);
CheckValue<IkReal> x3235=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3234)))),-1);
if(!x3235.valid){
continue;
}
CheckValue<IkReal> x3236 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3234))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3235.value)))+(x3236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKsin(j4);
IkReal x3238=IKcos(j4);
IkReal x3239=(cj5*cj6);
IkReal x3240=(r11*sj6);
IkReal x3241=(cj6*r20);
IkReal x3242=(cj5*sj6);
IkReal x3243=(cj6*r10);
IkReal x3244=(r01*sj6);
IkReal x3245=(r21*sj6);
IkReal x3246=(cj6*r00);
IkReal x3247=((1.0)*x3238);
IkReal x3248=((1.0)*x3237);
IkReal x3249=(sj5*x3248);
evalcond[0]=((((-1.0)*r21*x3239*x3248))+((x3238*x3241))+(((-1.0)*x3245*x3247))+(((-1.0)*r20*x3242*x3248))+(((-1.0)*r22*x3249)));
evalcond[1]=((((-1.0)*x3240*x3247))+(((-1.0)*r12*x3249))+(((-1.0)*r11*x3239*x3248))+((x3238*x3243))+(((-1.0)*r10*x3242*x3248)));
evalcond[2]=((((-1.0)*r02*sj5*x3247))+((x3237*x3244))+(((-1.0)*r01*x3239*x3247))+(((-1.0)*r00*x3242*x3247))+(((-1.0)*x3246*x3248)));
evalcond[3]=((((-1.0)*x3243*x3248))+(((-1.0)*r12*sj5*x3247))+((x3237*x3240))+(((-1.0)*r11*x3239*x3247))+(((-1.0)*r10*x3242*x3247)));
evalcond[4]=((1.0)+(((-1.0)*r01*x3239*x3248))+(((-1.0)*r00*x3242*x3248))+(((-1.0)*x3244*x3247))+((x3238*x3246))+(((-1.0)*r02*x3249)));
evalcond[5]=((1.0)+((x3237*x3245))+(((-1.0)*r22*sj5*x3247))+(((-1.0)*r21*x3239*x3247))+(((-1.0)*x3241*x3248))+(((-1.0)*r20*x3242*x3247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3250=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3250.valid){
continue;
}
CheckValue<IkReal> x3251 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3251.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3250.value)))+(x3251.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3252=IKsin(j4);
IkReal x3253=IKcos(j4);
IkReal x3254=(cj5*cj6);
IkReal x3255=(r11*sj6);
IkReal x3256=(cj6*r20);
IkReal x3257=(cj5*sj6);
IkReal x3258=(cj6*r10);
IkReal x3259=(r01*sj6);
IkReal x3260=(r21*sj6);
IkReal x3261=(cj6*r00);
IkReal x3262=((1.0)*x3253);
IkReal x3263=((1.0)*x3252);
IkReal x3264=(sj5*x3263);
evalcond[0]=((((-1.0)*r20*x3257*x3263))+(((-1.0)*x3260*x3262))+(((-1.0)*r21*x3254*x3263))+(((-1.0)*r22*x3264))+((x3253*x3256)));
evalcond[1]=((((-1.0)*r12*x3264))+(((-1.0)*r10*x3257*x3263))+(((-1.0)*r11*x3254*x3263))+(((-1.0)*x3255*x3262))+((x3253*x3258)));
evalcond[2]=((((-1.0)*r02*sj5*x3262))+(((-1.0)*x3261*x3263))+(((-1.0)*r00*x3257*x3262))+(((-1.0)*r01*x3254*x3262))+((x3252*x3259)));
evalcond[3]=((((-1.0)*r12*sj5*x3262))+(((-1.0)*r10*x3257*x3262))+((x3252*x3255))+(((-1.0)*r11*x3254*x3262))+(((-1.0)*x3258*x3263)));
evalcond[4]=((1.0)+((x3253*x3261))+(((-1.0)*r00*x3257*x3263))+(((-1.0)*r01*x3254*x3263))+(((-1.0)*r02*x3264))+(((-1.0)*x3259*x3262)));
evalcond[5]=((1.0)+(((-1.0)*r20*x3257*x3262))+(((-1.0)*r21*x3254*x3262))+(((-1.0)*x3256*x3263))+(((-1.0)*r22*sj5*x3262))+((x3252*x3260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3265=cj5*cj5;
IkReal x3266=cj6*cj6;
IkReal x3267=r20*r20;
IkReal x3268=r21*r21;
IkReal x3269=r22*r22;
IkReal x3270=(cj6*r21);
IkReal x3271=(r22*sj5);
IkReal x3272=((1.0)*x3265);
IkReal x3273=((2.0)*r20*sj6);
IkReal x3274=(x3266*x3267);
IkReal x3275=(x3266*x3268);
CheckValue<IkReal> x3276=IKPowWithIntegerCheck(IKsign((((x3265*x3267))+((cj5*x3271*x3273))+(((-1.0)*x3272*x3274))+(((-1.0)*x3275))+((x3265*x3275))+((x3265*x3270*x3273))+x3274+x3269+x3268+(((2.0)*cj5*x3270*x3271))+(((-1.0)*x3269*x3272))+(((-1.0)*x3270*x3273)))),-1);
if(!x3276.valid){
continue;
}
CheckValue<IkReal> x3277 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*x3270))+((cj5*r20*sj6))+x3271),IKFAST_ATAN2_MAGTHRESH);
if(!x3277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3276.value)))+(x3277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3278=IKsin(j4);
IkReal x3279=IKcos(j4);
IkReal x3280=(cj5*cj6);
IkReal x3281=(r11*sj6);
IkReal x3282=(cj6*r20);
IkReal x3283=(cj6*r10);
IkReal x3284=(cj5*sj6);
IkReal x3285=(r01*sj6);
IkReal x3286=(r21*sj6);
IkReal x3287=(cj6*r00);
IkReal x3288=((1.0)*x3279);
IkReal x3289=((1.0)*x3278);
IkReal x3290=(sj5*x3289);
evalcond[0]=(((x3279*x3282))+(((-1.0)*r21*x3280*x3289))+(((-1.0)*r22*x3290))+(((-1.0)*r20*x3284*x3289))+(((-1.0)*x3286*x3288)));
evalcond[1]=((((-1.0)*r02*sj5*x3288))+(((-1.0)*x3287*x3289))+(((-1.0)*r00*x3284*x3288))+(((-1.0)*r01*x3280*x3288))+((x3278*x3285)));
evalcond[2]=((((-1.0)*r12*sj5*x3288))+(((-1.0)*r11*x3280*x3288))+(((-1.0)*x3283*x3289))+(((-1.0)*r10*x3284*x3288))+((x3278*x3281)));
evalcond[3]=(((x3279*x3283))+(((-1.0)*r12*x3290))+cj0+(((-1.0)*x3281*x3288))+(((-1.0)*r11*x3280*x3289))+(((-1.0)*r10*x3284*x3289)));
evalcond[4]=((1.0)+(((-1.0)*r21*x3280*x3288))+(((-1.0)*x3282*x3289))+(((-1.0)*r20*x3284*x3288))+(((-1.0)*r22*sj5*x3288))+((x3278*x3286)));
evalcond[5]=(((x3279*x3287))+(((-1.0)*sj0))+(((-1.0)*r02*x3290))+(((-1.0)*r00*x3284*x3289))+(((-1.0)*r01*x3280*x3289))+(((-1.0)*x3285*x3288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3291=(cj0*sj6);
IkReal x3292=(cj0*cj6);
CheckValue<IkReal> x3293 = IKatan2WithCheck(IkReal((((r20*x3292))+(((-1.0)*r21*x3291)))),(((cj5*r21*x3292))+((cj5*r20*x3291))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3293.valid){
continue;
}
CheckValue<IkReal> x3294=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3293.value)+(((1.5707963267949)*(x3294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3295=IKsin(j4);
IkReal x3296=IKcos(j4);
IkReal x3297=(cj5*cj6);
IkReal x3298=(r11*sj6);
IkReal x3299=(cj6*r20);
IkReal x3300=(cj6*r10);
IkReal x3301=(cj5*sj6);
IkReal x3302=(r01*sj6);
IkReal x3303=(r21*sj6);
IkReal x3304=(cj6*r00);
IkReal x3305=((1.0)*x3296);
IkReal x3306=((1.0)*x3295);
IkReal x3307=(sj5*x3306);
evalcond[0]=((((-1.0)*r21*x3297*x3306))+(((-1.0)*r20*x3301*x3306))+((x3296*x3299))+(((-1.0)*r22*x3307))+(((-1.0)*x3303*x3305)));
evalcond[1]=((((-1.0)*x3304*x3306))+(((-1.0)*r02*sj5*x3305))+((x3295*x3302))+(((-1.0)*r00*x3301*x3305))+(((-1.0)*r01*x3297*x3305)));
evalcond[2]=(((x3295*x3298))+(((-1.0)*r12*sj5*x3305))+(((-1.0)*r11*x3297*x3305))+(((-1.0)*r10*x3301*x3305))+(((-1.0)*x3300*x3306)));
evalcond[3]=(cj0+(((-1.0)*x3298*x3305))+((x3296*x3300))+(((-1.0)*r12*x3307))+(((-1.0)*r11*x3297*x3306))+(((-1.0)*r10*x3301*x3306)));
evalcond[4]=((1.0)+(((-1.0)*r21*x3297*x3305))+(((-1.0)*r20*x3301*x3305))+((x3295*x3303))+(((-1.0)*r22*sj5*x3305))+(((-1.0)*x3299*x3306)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3302*x3305))+(((-1.0)*r00*x3301*x3306))+((x3296*x3304))+(((-1.0)*r02*x3307))+(((-1.0)*r01*x3297*x3306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3308=((1.0)*cj5);
CheckValue<IkReal> x3309=IKPowWithIntegerCheck(IKsign((((cj6*r11*sj5))+(((-1.0)*r12*x3308))+((r10*sj5*sj6)))),-1);
if(!x3309.valid){
continue;
}
CheckValue<IkReal> x3310 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj5))+(((-1.0)*cj6*r01*x3308))+(((-1.0)*r00*sj6*x3308)))),((((-1.0)*r01*sj6))+((cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x3310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3309.value)))+(x3310.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3311=IKsin(j4);
IkReal x3312=IKcos(j4);
IkReal x3313=(cj5*cj6);
IkReal x3314=(r11*sj6);
IkReal x3315=(cj6*r20);
IkReal x3316=(cj6*r10);
IkReal x3317=(cj5*sj6);
IkReal x3318=(r01*sj6);
IkReal x3319=(r21*sj6);
IkReal x3320=(cj6*r00);
IkReal x3321=((1.0)*x3312);
IkReal x3322=((1.0)*x3311);
IkReal x3323=(sj5*x3322);
evalcond[0]=((((-1.0)*r21*x3313*x3322))+((x3312*x3315))+(((-1.0)*r20*x3317*x3322))+(((-1.0)*x3319*x3321))+(((-1.0)*r22*x3323)));
evalcond[1]=((((-1.0)*r00*x3317*x3321))+(((-1.0)*r02*sj5*x3321))+(((-1.0)*x3320*x3322))+(((-1.0)*r01*x3313*x3321))+((x3311*x3318)));
evalcond[2]=((((-1.0)*r11*x3313*x3321))+(((-1.0)*r10*x3317*x3321))+(((-1.0)*r12*sj5*x3321))+(((-1.0)*x3316*x3322))+((x3311*x3314)));
evalcond[3]=(cj0+(((-1.0)*r11*x3313*x3322))+((x3312*x3316))+(((-1.0)*r10*x3317*x3322))+(((-1.0)*r12*x3323))+(((-1.0)*x3314*x3321)));
evalcond[4]=((1.0)+(((-1.0)*r21*x3313*x3321))+(((-1.0)*r22*sj5*x3321))+(((-1.0)*r20*x3317*x3321))+(((-1.0)*x3315*x3322))+((x3311*x3319)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3323))+(((-1.0)*r00*x3317*x3322))+(((-1.0)*r01*x3313*x3322))+(((-1.0)*x3318*x3321))+((x3312*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3324=(cj6*sj5);
IkReal x3325=(sj5*sj6);
IkReal x3326=((0.01)*cj5);
IkReal x3327=(cj5*r22);
IkReal x3328=((1.0)*cj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.069)+((cj6*r21*x3326))+(((0.01)*r22*sj5))+((r20*sj6*x3326))+(((-1.0)*pz))+(((0.37429)*x3327))+(((-0.37429)*r20*x3325))+(((-0.37429)*r21*x3324)));
evalcond[2]=((1.0)+(((-1.0)*x3327))+((r20*x3325))+((r21*x3324)));
evalcond[3]=(((r11*x3324))+(((-1.0)*r12*x3328))+((r10*x3325)));
evalcond[4]=((((-1.0)*r02*x3328))+((r01*x3324))+((r00*x3325)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3329=((1.26697583102024)*cj5);
IkReal x3330=((0.0338501117053686)*cj5);
IkReal x3331=(r00*sj6);
IkReal x3332=(r10*sj6);
IkReal x3333=((1.26697583102024)*sj5);
IkReal x3334=(cj6*r11);
IkReal x3335=((0.0338501117053686)*sj5);
IkReal x3336=(cj6*r01);
if( IKabs((((r12*x3329))+(((-3.38501117053686)*py))+((x3330*x3334))+((x3330*x3332))+((r12*x3335))+(((-1.0)*x3332*x3333))+(((-1.0)*x3333*x3334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3331*x3333))+(((-3.38501117053686)*px))+((x3330*x3336))+((x3330*x3331))+((r02*x3335))+((r02*x3329))+(((-1.0)*x3333*x3336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x3329))+(((-3.38501117053686)*py))+((x3330*x3334))+((x3330*x3332))+((r12*x3335))+(((-1.0)*x3332*x3333))+(((-1.0)*x3333*x3334))))+IKsqr(((((-1.0)*x3331*x3333))+(((-3.38501117053686)*px))+((x3330*x3336))+((x3330*x3331))+((r02*x3335))+((r02*x3329))+(((-1.0)*x3333*x3336))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r12*x3329))+(((-3.38501117053686)*py))+((x3330*x3334))+((x3330*x3332))+((r12*x3335))+(((-1.0)*x3332*x3333))+(((-1.0)*x3333*x3334))), ((((-1.0)*x3331*x3333))+(((-3.38501117053686)*px))+((x3330*x3336))+((x3330*x3331))+((r02*x3335))+((r02*x3329))+(((-1.0)*x3333*x3336))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3337=((0.01)*cj5);
IkReal x3338=(cj6*r01);
IkReal x3339=(r00*sj6);
IkReal x3340=((0.01)*sj5);
IkReal x3341=((0.37429)*sj5);
IkReal x3342=((0.37429)*cj5);
IkReal x3343=(r10*sj6);
IkReal x3344=(cj6*r11);
evalcond[0]=(((r02*x3342))+((r02*x3340))+(((-1.0)*x3338*x3341))+(((-1.0)*px))+((x3337*x3338))+((x3337*x3339))+(((-0.29542)*(IKcos(j0))))+(((-1.0)*x3339*x3341)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+(((-1.0)*x3341*x3344))+(((-1.0)*x3341*x3343))+(((-1.0)*py))+((x3337*x3343))+((x3337*x3344))+((r12*x3342))+((r12*x3340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3345=(cj0*sj6);
IkReal x3346=(cj0*cj6);
IkReal x3347=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3347;
j4eval[1]=((IKabs((((cj5*r20*x3345))+((cj0*r22*sj5))+((cj5*r21*x3346)))))+(IKabs(((((-1.0)*r21*x3345))+((r20*x3346))))));
j4eval[2]=IKsign(x3347);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3348=cj5*cj5;
IkReal x3349=cj6*cj6;
IkReal x3350=(r00*r20);
IkReal x3351=(r02*r22);
IkReal x3352=(r22*sj5);
IkReal x3353=(cj6*r21);
IkReal x3354=(r00*sj6);
IkReal x3355=(r20*sj6);
IkReal x3356=(cj6*r01);
IkReal x3357=(cj0*cj5);
IkReal x3358=((1.0)*x3348);
IkReal x3359=(cj5*r02*sj5);
IkReal x3360=(r01*r21*x3349);
IkReal x3361=(((x3348*x3355*x3356))+x3351+(((-1.0)*x3349*x3350*x3358))+((x3348*x3360))+((x3348*x3353*x3354))+(((-1.0)*x3353*x3354))+(((-1.0)*x3360))+((r01*r21))+((cj5*x3352*x3354))+((cj5*x3352*x3356))+(((-1.0)*x3351*x3358))+((x3355*x3359))+(((-1.0)*x3355*x3356))+((x3348*x3350))+((x3353*x3359))+((x3349*x3350)));
j4eval[0]=x3361;
j4eval[1]=IKsign(x3361);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x3355*x3357))+((cj0*x3352))+((x3353*x3357))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3362=cj6*cj6;
IkReal x3363=cj5*cj5;
IkReal x3364=(r12*sj5);
IkReal x3365=(r22*sj5);
IkReal x3366=((1.0)*r11);
IkReal x3367=(r20*sj0);
IkReal x3368=(r10*r20);
IkReal x3369=(cj5*sj6);
IkReal x3370=(cj6*r10);
IkReal x3371=(r12*r22);
IkReal x3372=(cj5*cj6*r21);
IkReal x3373=(r21*x3362);
IkReal x3374=(cj6*r20*sj6);
IkReal x3375=(r11*x3363);
IkReal x3376=((1.0)*r21*sj6);
IkReal x3377=((1.0)*x3363);
IkReal x3378=(((x3363*x3368))+(((-1.0)*x3366*x3373))+(((-1.0)*x3366*x3374))+((x3362*x3368))+((x3364*x3372))+((r11*r21))+x3371+((x3373*x3375))+(((-1.0)*x3370*x3376))+((r10*x3365*x3369))+((x3374*x3375))+(((-1.0)*x3371*x3377))+(((-1.0)*x3362*x3368*x3377))+((cj5*cj6*r11*x3365))+((r20*x3364*x3369))+((r21*sj6*x3363*x3370)));
j4eval[0]=x3378;
j4eval[1]=IKsign(x3378);
j4eval[2]=((IKabs((((cj6*x3367))+(((-1.0)*sj0*x3376)))))+(IKabs((((x3367*x3369))+((sj0*x3372))+((sj0*x3365))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3379=((1.0)*cj5);
IkReal x3380=((0.01)*cj5);
IkReal x3381=(cj6*r11);
IkReal x3382=(r20*sj6);
IkReal x3383=((0.01)*sj5);
IkReal x3384=(cj6*r01);
IkReal x3385=((0.37429)*cj5);
IkReal x3386=((0.37429)*sj5);
IkReal x3387=(cj6*r21);
IkReal x3388=(r10*sj5*sj6);
IkReal x3389=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((x3380*x3382))+((x3380*x3387))+(((-1.0)*x3382*x3386))+(((-1.0)*pz))+((r22*x3385))+((r22*x3383))+(((-1.0)*x3386*x3387)));
evalcond[2]=((-0.29542)+((x3380*x3384))+(((-1.0)*r00*sj6*x3386))+(((-1.0)*x3384*x3386))+((r00*sj6*x3380))+(((-1.0)*px))+((r02*x3383))+((r02*x3385)));
evalcond[3]=(((x3380*x3381))+(((-1.0)*r10*sj6*x3386))+(((-1.0)*x3381*x3386))+(((-1.0)*py))+((r12*x3383))+((r12*x3385))+((r10*sj6*x3380)));
evalcond[4]=((1.0)+(((-1.0)*r22*x3379))+((sj5*x3387))+((sj5*x3382)));
evalcond[5]=(x3388+(((-1.0)*r12*x3379))+((sj5*x3381)));
evalcond[6]=(x3389+(((-1.0)*r02*x3379))+((sj5*x3384)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3390=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3390;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3391=((1.0)*sj5);
IkReal x3392=(((cj5*r22))+(((-1.0)*r20*sj6*x3391))+(((-1.0)*cj6*r21*x3391)));
j4eval[0]=x3392;
j4eval[1]=IKsign(x3392);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3393=cj6*cj6;
IkReal x3394=r01*r01;
IkReal x3395=cj5*cj5;
IkReal x3396=r00*r00;
IkReal x3397=r02*r02;
IkReal x3398=(cj6*r00);
IkReal x3399=(r02*sj5);
IkReal x3400=(cj5*cj6*r01);
IkReal x3401=((2.0)*r01*sj6);
IkReal x3402=(cj5*r00*sj6);
IkReal x3403=((1.0)*x3395);
IkReal x3404=(x3393*x3396);
IkReal x3405=(x3393*x3394);
IkReal x3406=((((2.0)*x3399*x3402))+(((2.0)*x3399*x3400))+(((-1.0)*x3405))+x3394+x3397+((x3395*x3398*x3401))+(((-1.0)*x3398*x3401))+x3404+((x3395*x3405))+(((-1.0)*x3397*x3403))+((x3395*x3396))+(((-1.0)*x3403*x3404)));
j4eval[0]=x3406;
j4eval[1]=((IKabs((x3399+x3400+x3402)))+(IKabs(((((-1.0)*r01*sj6))+x3398))));
j4eval[2]=IKsign(x3406);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3407=cj6*cj6;
IkReal x3408=r01*r01;
IkReal x3409=cj5*cj5;
IkReal x3410=r00*r00;
IkReal x3411=r02*r02;
IkReal x3412=(cj6*r00);
IkReal x3413=((2.0)*r01);
IkReal x3414=(cj5*cj6);
IkReal x3415=(r02*sj5);
IkReal x3416=(cj5*r00*sj6);
IkReal x3417=(x3409*x3410);
IkReal x3418=(x3407*x3408);
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(IKsign((((x3409*x3418))+(((-1.0)*sj6*x3412*x3413))+(((-1.0)*x3407*x3417))+(((-1.0)*x3409*x3411))+(((-1.0)*x3418))+x3417+x3411+x3408+((x3413*x3414*x3415))+((x3407*x3410))+(((2.0)*x3415*x3416))+((sj6*x3409*x3412*x3413)))),-1);
if(!x3419.valid){
continue;
}
CheckValue<IkReal> x3420 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3412)),(x3416+x3415+((r01*x3414))),IKFAST_ATAN2_MAGTHRESH);
if(!x3420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3419.value)))+(x3420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3421=IKsin(j4);
IkReal x3422=IKcos(j4);
IkReal x3423=(cj5*cj6);
IkReal x3424=(r11*sj6);
IkReal x3425=(cj6*r20);
IkReal x3426=(cj6*r10);
IkReal x3427=(cj5*sj6);
IkReal x3428=(r21*sj6);
IkReal x3429=(cj6*r00);
IkReal x3430=(r01*sj6);
IkReal x3431=((1.0)*x3422);
IkReal x3432=((1.0)*x3421);
IkReal x3433=(sj5*x3432);
evalcond[0]=((((-1.0)*x3428*x3431))+(((-1.0)*r21*x3423*x3432))+((x3422*x3425))+(((-1.0)*r20*x3427*x3432))+(((-1.0)*r22*x3433)));
evalcond[1]=((((-1.0)*x3430*x3431))+(((-1.0)*r00*x3427*x3432))+((x3422*x3429))+(((-1.0)*r01*x3423*x3432))+(((-1.0)*r02*x3433)));
evalcond[2]=((((-1.0)*x3425*x3432))+((x3421*x3428))+(((-1.0)*r21*x3423*x3431))+(((-1.0)*r20*x3427*x3431))+(((-1.0)*r22*sj5*x3431)));
evalcond[3]=((((-1.0)*r10*x3427*x3431))+(((-1.0)*r12*sj5*x3431))+(((-1.0)*r11*x3423*x3431))+(((-1.0)*x3426*x3432))+((x3421*x3424)));
evalcond[4]=((1.0)+(((-1.0)*r10*x3427*x3432))+(((-1.0)*r12*x3433))+(((-1.0)*r11*x3423*x3432))+(((-1.0)*x3424*x3431))+((x3422*x3426)));
evalcond[5]=((1.0)+(((-1.0)*r00*x3427*x3431))+((x3421*x3430))+(((-1.0)*r01*x3423*x3431))+(((-1.0)*r02*sj5*x3431))+(((-1.0)*x3429*x3432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3434=((1.0)*sj5);
CheckValue<IkReal> x3435=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3434))+(((-1.0)*r20*sj6*x3434)))),-1);
if(!x3435.valid){
continue;
}
CheckValue<IkReal> x3436 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x3436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3435.value)))+(x3436.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3437=IKsin(j4);
IkReal x3438=IKcos(j4);
IkReal x3439=(cj5*cj6);
IkReal x3440=(r11*sj6);
IkReal x3441=(cj6*r20);
IkReal x3442=(cj6*r10);
IkReal x3443=(cj5*sj6);
IkReal x3444=(r21*sj6);
IkReal x3445=(cj6*r00);
IkReal x3446=(r01*sj6);
IkReal x3447=((1.0)*x3438);
IkReal x3448=((1.0)*x3437);
IkReal x3449=(sj5*x3448);
evalcond[0]=(((x3438*x3441))+(((-1.0)*x3444*x3447))+(((-1.0)*r22*x3449))+(((-1.0)*r21*x3439*x3448))+(((-1.0)*r20*x3443*x3448)));
evalcond[1]=(((x3438*x3445))+(((-1.0)*r01*x3439*x3448))+(((-1.0)*r00*x3443*x3448))+(((-1.0)*x3446*x3447))+(((-1.0)*r02*x3449)));
evalcond[2]=((((-1.0)*r22*sj5*x3447))+(((-1.0)*x3441*x3448))+((x3437*x3444))+(((-1.0)*r21*x3439*x3447))+(((-1.0)*r20*x3443*x3447)));
evalcond[3]=((((-1.0)*r11*x3439*x3447))+(((-1.0)*r10*x3443*x3447))+((x3437*x3440))+(((-1.0)*x3442*x3448))+(((-1.0)*r12*sj5*x3447)));
evalcond[4]=((1.0)+((x3438*x3442))+(((-1.0)*r11*x3439*x3448))+(((-1.0)*r10*x3443*x3448))+(((-1.0)*r12*x3449))+(((-1.0)*x3440*x3447)));
evalcond[5]=((1.0)+(((-1.0)*r01*x3439*x3447))+(((-1.0)*r00*x3443*x3447))+((x3437*x3446))+(((-1.0)*x3445*x3448))+(((-1.0)*r02*sj5*x3447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3450 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3450.valid){
continue;
}
CheckValue<IkReal> x3451=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3451.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3450.value)+(((1.5707963267949)*(x3451.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3452=IKsin(j4);
IkReal x3453=IKcos(j4);
IkReal x3454=(cj5*cj6);
IkReal x3455=(r11*sj6);
IkReal x3456=(cj6*r20);
IkReal x3457=(cj6*r10);
IkReal x3458=(cj5*sj6);
IkReal x3459=(r21*sj6);
IkReal x3460=(cj6*r00);
IkReal x3461=(r01*sj6);
IkReal x3462=((1.0)*x3453);
IkReal x3463=((1.0)*x3452);
IkReal x3464=(sj5*x3463);
evalcond[0]=(((x3453*x3456))+(((-1.0)*r22*x3464))+(((-1.0)*x3459*x3462))+(((-1.0)*r21*x3454*x3463))+(((-1.0)*r20*x3458*x3463)));
evalcond[1]=((((-1.0)*r02*x3464))+(((-1.0)*r01*x3454*x3463))+(((-1.0)*x3461*x3462))+((x3453*x3460))+(((-1.0)*r00*x3458*x3463)));
evalcond[2]=((((-1.0)*r22*sj5*x3462))+(((-1.0)*r21*x3454*x3462))+(((-1.0)*x3456*x3463))+(((-1.0)*r20*x3458*x3462))+((x3452*x3459)));
evalcond[3]=((((-1.0)*r10*x3458*x3462))+(((-1.0)*r12*sj5*x3462))+(((-1.0)*r11*x3454*x3462))+((x3452*x3455))+(((-1.0)*x3457*x3463)));
evalcond[4]=((1.0)+(((-1.0)*r10*x3458*x3463))+((x3453*x3457))+(((-1.0)*r11*x3454*x3463))+(((-1.0)*r12*x3464))+(((-1.0)*x3455*x3462)));
evalcond[5]=((1.0)+(((-1.0)*x3460*x3463))+(((-1.0)*r01*x3454*x3462))+(((-1.0)*r02*sj5*x3462))+((x3452*x3461))+(((-1.0)*r00*x3458*x3462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3465=((1.0)*cj5);
IkReal x3466=((0.01)*cj5);
IkReal x3467=(cj6*r11);
IkReal x3468=(r20*sj6);
IkReal x3469=((0.01)*sj5);
IkReal x3470=(cj6*r01);
IkReal x3471=((0.37429)*cj5);
IkReal x3472=((0.37429)*sj5);
IkReal x3473=(cj6*r21);
IkReal x3474=(r10*sj5*sj6);
IkReal x3475=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x3472*x3473))+(((-1.0)*pz))+((x3466*x3468))+((x3466*x3473))+(((-1.0)*x3468*x3472))+((r22*x3469))+((r22*x3471)));
evalcond[2]=((0.29542)+((r00*sj6*x3466))+(((-1.0)*px))+((x3466*x3470))+(((-1.0)*x3470*x3472))+((r02*x3469))+((r02*x3471))+(((-1.0)*r00*sj6*x3472)));
evalcond[3]=((((-1.0)*x3467*x3472))+((r12*x3469))+((r12*x3471))+(((-1.0)*py))+((x3466*x3467))+(((-1.0)*r10*sj6*x3472))+((r10*sj6*x3466)));
evalcond[4]=((1.0)+((sj5*x3468))+((sj5*x3473))+(((-1.0)*r22*x3465)));
evalcond[5]=(((sj5*x3467))+x3474+(((-1.0)*r12*x3465)));
evalcond[6]=((((-1.0)*r02*x3465))+((sj5*x3470))+x3475);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3476=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3476;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3477=((1.0)*sj6);
IkReal x3478=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3477))+((cj5*r02)));
j4eval[0]=x3478;
j4eval[1]=IKsign(x3478);
j4eval[2]=((IKabs(((((-1.0)*r21*x3477))+((cj6*r20)))))+(IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3479=cj6*cj6;
IkReal x3480=cj5*cj5;
IkReal x3481=r00*r00;
IkReal x3482=r01*r01;
IkReal x3483=r02*r02;
IkReal x3484=(cj6*r00);
IkReal x3485=(cj5*cj6*r01);
IkReal x3486=((2.0)*r02*sj5);
IkReal x3487=((1.0)*x3479);
IkReal x3488=((2.0)*r01*sj6);
IkReal x3489=(cj5*r00*sj6);
IkReal x3490=(x3480*x3481);
IkReal x3491=(((x3479*x3490))+((x3484*x3488))+(((-1.0)*x3485*x3486))+(((-1.0)*x3481*x3487))+((x3479*x3482))+((x3480*x3483))+(((-1.0)*x3480*x3484*x3488))+(((-1.0)*x3483))+(((-1.0)*x3482))+(((-1.0)*x3490))+(((-1.0)*x3480*x3482*x3487))+(((-1.0)*x3486*x3489)));
j4eval[0]=x3491;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x3484)))+(IKabs((x3489+x3485+((r02*sj5))))));
j4eval[2]=IKsign(x3491);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3492=cj6*cj6;
IkReal x3493=cj5*cj5;
IkReal x3494=r00*r00;
IkReal x3495=r01*r01;
IkReal x3496=r02*r02;
IkReal x3497=(cj6*r00);
IkReal x3498=(cj5*cj6*r01);
IkReal x3499=((2.0)*r02*sj5);
IkReal x3500=((1.0)*x3492);
IkReal x3501=((2.0)*r01*sj6);
IkReal x3502=(cj5*r00*sj6);
IkReal x3503=(x3493*x3494);
CheckValue<IkReal> x3504=IKPowWithIntegerCheck(IKsign((((x3492*x3503))+(((-1.0)*x3498*x3499))+(((-1.0)*x3493*x3495*x3500))+((x3497*x3501))+(((-1.0)*x3499*x3502))+(((-1.0)*x3496))+(((-1.0)*x3495))+((x3493*x3496))+(((-1.0)*x3503))+((x3492*x3495))+(((-1.0)*x3494*x3500))+(((-1.0)*x3493*x3497*x3501)))),-1);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3497)),(x3502+x3498+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3504.value)))+(x3505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3506=IKsin(j4);
IkReal x3507=IKcos(j4);
IkReal x3508=(cj5*cj6);
IkReal x3509=(r11*sj6);
IkReal x3510=(cj6*r20);
IkReal x3511=(cj6*r10);
IkReal x3512=(cj5*sj6);
IkReal x3513=(r21*sj6);
IkReal x3514=(cj6*r00);
IkReal x3515=(r01*sj6);
IkReal x3516=((1.0)*x3507);
IkReal x3517=((1.0)*x3506);
IkReal x3518=(sj5*x3517);
evalcond[0]=(((x3507*x3510))+(((-1.0)*r20*x3512*x3517))+(((-1.0)*x3513*x3516))+(((-1.0)*r22*x3518))+(((-1.0)*r21*x3508*x3517)));
evalcond[1]=((((-1.0)*x3515*x3516))+((x3507*x3514))+(((-1.0)*r02*x3518))+(((-1.0)*r00*x3512*x3517))+(((-1.0)*r01*x3508*x3517)));
evalcond[2]=(((x3506*x3513))+(((-1.0)*r20*x3512*x3516))+(((-1.0)*r22*sj5*x3516))+(((-1.0)*x3510*x3517))+(((-1.0)*r21*x3508*x3516)));
evalcond[3]=(((x3506*x3509))+(((-1.0)*x3511*x3517))+(((-1.0)*r10*x3512*x3516))+(((-1.0)*r11*x3508*x3516))+(((-1.0)*r12*sj5*x3516)));
evalcond[4]=((-1.0)+((x3507*x3511))+(((-1.0)*x3509*x3516))+(((-1.0)*r10*x3512*x3517))+(((-1.0)*r11*x3508*x3517))+(((-1.0)*r12*x3518)));
evalcond[5]=((-1.0)+(((-1.0)*x3514*x3517))+(((-1.0)*r02*sj5*x3516))+((x3506*x3515))+(((-1.0)*r00*x3512*x3516))+(((-1.0)*r01*x3508*x3516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3519=((1.0)*sj6);
CheckValue<IkReal> x3520=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3519))+((cj5*r02)))),-1);
if(!x3520.valid){
continue;
}
CheckValue<IkReal> x3521 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x3519)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3520.value)))+(x3521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3522=IKsin(j4);
IkReal x3523=IKcos(j4);
IkReal x3524=(cj5*cj6);
IkReal x3525=(r11*sj6);
IkReal x3526=(cj6*r20);
IkReal x3527=(cj6*r10);
IkReal x3528=(cj5*sj6);
IkReal x3529=(r21*sj6);
IkReal x3530=(cj6*r00);
IkReal x3531=(r01*sj6);
IkReal x3532=((1.0)*x3523);
IkReal x3533=((1.0)*x3522);
IkReal x3534=(sj5*x3533);
evalcond[0]=(((x3523*x3526))+(((-1.0)*x3529*x3532))+(((-1.0)*r21*x3524*x3533))+(((-1.0)*r22*x3534))+(((-1.0)*r20*x3528*x3533)));
evalcond[1]=((((-1.0)*r01*x3524*x3533))+(((-1.0)*r02*x3534))+(((-1.0)*x3531*x3532))+(((-1.0)*r00*x3528*x3533))+((x3523*x3530)));
evalcond[2]=((((-1.0)*r22*sj5*x3532))+((x3522*x3529))+(((-1.0)*x3526*x3533))+(((-1.0)*r21*x3524*x3532))+(((-1.0)*r20*x3528*x3532)));
evalcond[3]=(((x3522*x3525))+(((-1.0)*x3527*x3533))+(((-1.0)*r12*sj5*x3532))+(((-1.0)*r10*x3528*x3532))+(((-1.0)*r11*x3524*x3532)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x3534))+(((-1.0)*x3525*x3532))+((x3523*x3527))+(((-1.0)*r10*x3528*x3533))+(((-1.0)*r11*x3524*x3533)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x3524*x3532))+(((-1.0)*r02*sj5*x3532))+(((-1.0)*x3530*x3533))+(((-1.0)*r00*x3528*x3532))+((x3522*x3531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3535=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3535.valid){
continue;
}
CheckValue<IkReal> x3536 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x3536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3535.value)))+(x3536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3537=IKsin(j4);
IkReal x3538=IKcos(j4);
IkReal x3539=(cj5*cj6);
IkReal x3540=(r11*sj6);
IkReal x3541=(cj6*r20);
IkReal x3542=(cj6*r10);
IkReal x3543=(cj5*sj6);
IkReal x3544=(r21*sj6);
IkReal x3545=(cj6*r00);
IkReal x3546=(r01*sj6);
IkReal x3547=((1.0)*x3538);
IkReal x3548=((1.0)*x3537);
IkReal x3549=(sj5*x3548);
evalcond[0]=(((x3538*x3541))+(((-1.0)*r22*x3549))+(((-1.0)*r21*x3539*x3548))+(((-1.0)*r20*x3543*x3548))+(((-1.0)*x3544*x3547)));
evalcond[1]=((((-1.0)*r02*x3549))+(((-1.0)*r00*x3543*x3548))+((x3538*x3545))+(((-1.0)*r01*x3539*x3548))+(((-1.0)*x3546*x3547)));
evalcond[2]=((((-1.0)*r22*sj5*x3547))+(((-1.0)*x3541*x3548))+(((-1.0)*r21*x3539*x3547))+((x3537*x3544))+(((-1.0)*r20*x3543*x3547)));
evalcond[3]=((((-1.0)*r12*sj5*x3547))+(((-1.0)*x3542*x3548))+((x3537*x3540))+(((-1.0)*r10*x3543*x3547))+(((-1.0)*r11*x3539*x3547)));
evalcond[4]=((-1.0)+((x3538*x3542))+(((-1.0)*r12*x3549))+(((-1.0)*x3540*x3547))+(((-1.0)*r10*x3543*x3548))+(((-1.0)*r11*x3539*x3548)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x3547))+(((-1.0)*x3545*x3548))+(((-1.0)*r00*x3543*x3547))+(((-1.0)*r01*x3539*x3547))+((x3537*x3546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3550=((1.0)*cj5);
IkReal x3551=((0.01)*cj5);
IkReal x3552=(cj6*r11);
IkReal x3553=(r20*sj6);
IkReal x3554=((0.01)*sj5);
IkReal x3555=(cj6*r01);
IkReal x3556=((0.37429)*cj5);
IkReal x3557=((0.37429)*sj5);
IkReal x3558=(cj6*r21);
IkReal x3559=(r10*sj5*sj6);
IkReal x3560=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x3557*x3558))+(((-1.0)*pz))+(((-1.0)*x3553*x3557))+((r22*x3556))+((r22*x3554))+((x3551*x3553))+((x3551*x3558)));
evalcond[2]=((((-1.0)*x3555*x3557))+((r00*sj6*x3551))+(((-1.0)*r00*sj6*x3557))+(((-1.0)*px))+((x3551*x3555))+((r02*x3556))+((r02*x3554)));
evalcond[3]=((-0.29542)+((r12*x3556))+((r12*x3554))+(((-1.0)*py))+((r10*sj6*x3551))+((x3551*x3552))+(((-1.0)*r10*sj6*x3557))+(((-1.0)*x3552*x3557)));
evalcond[4]=((1.0)+(((-1.0)*r22*x3550))+((sj5*x3558))+((sj5*x3553)));
evalcond[5]=(x3559+(((-1.0)*r12*x3550))+((sj5*x3552)));
evalcond[6]=(x3560+((sj5*x3555))+(((-1.0)*r02*x3550)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3561=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3561;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3562=((1.0)*sj5);
IkReal x3563=(((cj5*r22))+(((-1.0)*r20*sj6*x3562))+(((-1.0)*cj6*r21*x3562)));
j4eval[0]=x3563;
j4eval[1]=IKsign(x3563);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3564=r11*r11;
IkReal x3565=cj5*cj5;
IkReal x3566=cj6*cj6;
IkReal x3567=r10*r10;
IkReal x3568=r12*r12;
IkReal x3569=(r12*sj5);
IkReal x3570=(cj6*r10);
IkReal x3571=((1.0)*x3566);
IkReal x3572=(cj5*cj6*r11);
IkReal x3573=(cj5*r10*sj6);
IkReal x3574=((2.0)*r11*sj6);
IkReal x3575=(x3565*x3567);
IkReal x3576=(x3575+x3564+x3568+((x3566*x3567))+((x3564*x3565*x3566))+((x3565*x3570*x3574))+(((-1.0)*x3571*x3575))+(((-1.0)*x3564*x3571))+(((2.0)*x3569*x3572))+(((2.0)*x3569*x3573))+(((-1.0)*x3565*x3568))+(((-1.0)*x3570*x3574)));
j4eval[0]=x3576;
j4eval[1]=IKsign(x3576);
j4eval[2]=((IKabs((x3570+(((-1.0)*r11*sj6)))))+(IKabs((x3573+x3572+x3569))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3577=r11*r11;
IkReal x3578=cj5*cj5;
IkReal x3579=cj6*cj6;
IkReal x3580=r10*r10;
IkReal x3581=r12*r12;
IkReal x3582=(r10*sj6);
IkReal x3583=(r12*sj5);
IkReal x3584=((1.0)*x3579);
IkReal x3585=(cj5*cj6*r11);
IkReal x3586=((2.0)*cj6*r11);
IkReal x3587=(x3578*x3580);
CheckValue<IkReal> x3588=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3577*x3584))+(((2.0)*x3583*x3585))+((x3579*x3580))+x3577+x3581+x3587+(((2.0)*cj5*x3582*x3583))+((x3577*x3578*x3579))+(((-1.0)*x3582*x3586))+(((-1.0)*x3584*x3587))+((x3578*x3582*x3586))+(((-1.0)*x3578*x3581)))),-1);
if(!x3588.valid){
continue;
}
CheckValue<IkReal> x3589 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x3582))+x3583+x3585),IKFAST_ATAN2_MAGTHRESH);
if(!x3589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3588.value)))+(x3589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3590=IKsin(j4);
IkReal x3591=IKcos(j4);
IkReal x3592=(cj5*cj6);
IkReal x3593=(r11*sj6);
IkReal x3594=(cj6*r20);
IkReal x3595=(cj6*r10);
IkReal x3596=(cj5*sj6);
IkReal x3597=(r01*sj6);
IkReal x3598=(r21*sj6);
IkReal x3599=(cj6*r00);
IkReal x3600=((1.0)*x3591);
IkReal x3601=((1.0)*x3590);
IkReal x3602=(sj5*x3601);
evalcond[0]=(((x3591*x3594))+(((-1.0)*x3598*x3600))+(((-1.0)*r22*x3602))+(((-1.0)*r20*x3596*x3601))+(((-1.0)*r21*x3592*x3601)));
evalcond[1]=(((x3591*x3595))+(((-1.0)*r12*x3602))+(((-1.0)*x3593*x3600))+(((-1.0)*r10*x3596*x3601))+(((-1.0)*r11*x3592*x3601)));
evalcond[2]=((((-1.0)*x3594*x3601))+((x3590*x3598))+(((-1.0)*r22*sj5*x3600))+(((-1.0)*r20*x3596*x3600))+(((-1.0)*r21*x3592*x3600)));
evalcond[3]=((((-1.0)*r00*x3596*x3600))+(((-1.0)*r01*x3592*x3600))+((x3590*x3597))+(((-1.0)*x3599*x3601))+(((-1.0)*r02*sj5*x3600)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x3596*x3601))+(((-1.0)*r01*x3592*x3601))+((x3591*x3599))+(((-1.0)*r02*x3602))+(((-1.0)*x3597*x3600)));
evalcond[5]=((1.0)+((x3590*x3593))+(((-1.0)*r10*x3596*x3600))+(((-1.0)*x3595*x3601))+(((-1.0)*r11*x3592*x3600))+(((-1.0)*r12*sj5*x3600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3603=((1.0)*sj5);
CheckValue<IkReal> x3604=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x3603))+(((-1.0)*cj6*r21*x3603)))),-1);
if(!x3604.valid){
continue;
}
CheckValue<IkReal> x3605 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3604.value)))+(x3605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3606=IKsin(j4);
IkReal x3607=IKcos(j4);
IkReal x3608=(cj5*cj6);
IkReal x3609=(r11*sj6);
IkReal x3610=(cj6*r20);
IkReal x3611=(cj6*r10);
IkReal x3612=(cj5*sj6);
IkReal x3613=(r01*sj6);
IkReal x3614=(r21*sj6);
IkReal x3615=(cj6*r00);
IkReal x3616=((1.0)*x3607);
IkReal x3617=((1.0)*x3606);
IkReal x3618=(sj5*x3617);
evalcond[0]=((((-1.0)*r21*x3608*x3617))+((x3607*x3610))+(((-1.0)*x3614*x3616))+(((-1.0)*r22*x3618))+(((-1.0)*r20*x3612*x3617)));
evalcond[1]=((((-1.0)*r12*x3618))+(((-1.0)*r10*x3612*x3617))+((x3607*x3611))+(((-1.0)*r11*x3608*x3617))+(((-1.0)*x3609*x3616)));
evalcond[2]=((((-1.0)*r21*x3608*x3616))+(((-1.0)*r22*sj5*x3616))+(((-1.0)*x3610*x3617))+(((-1.0)*r20*x3612*x3616))+((x3606*x3614)));
evalcond[3]=((((-1.0)*r00*x3612*x3616))+(((-1.0)*x3615*x3617))+(((-1.0)*r02*sj5*x3616))+(((-1.0)*r01*x3608*x3616))+((x3606*x3613)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x3612*x3617))+((x3607*x3615))+(((-1.0)*r02*x3618))+(((-1.0)*x3613*x3616))+(((-1.0)*r01*x3608*x3617)));
evalcond[5]=((1.0)+((x3606*x3609))+(((-1.0)*r12*sj5*x3616))+(((-1.0)*x3611*x3617))+(((-1.0)*r10*x3612*x3616))+(((-1.0)*r11*x3608*x3616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3619 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3619.valid){
continue;
}
CheckValue<IkReal> x3620=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3619.value)+(((1.5707963267949)*(x3620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3621=IKsin(j4);
IkReal x3622=IKcos(j4);
IkReal x3623=(cj5*cj6);
IkReal x3624=(r11*sj6);
IkReal x3625=(cj6*r20);
IkReal x3626=(cj6*r10);
IkReal x3627=(cj5*sj6);
IkReal x3628=(r01*sj6);
IkReal x3629=(r21*sj6);
IkReal x3630=(cj6*r00);
IkReal x3631=((1.0)*x3622);
IkReal x3632=((1.0)*x3621);
IkReal x3633=(sj5*x3632);
evalcond[0]=((((-1.0)*r21*x3623*x3632))+(((-1.0)*r22*x3633))+(((-1.0)*r20*x3627*x3632))+((x3622*x3625))+(((-1.0)*x3629*x3631)));
evalcond[1]=((((-1.0)*r12*x3633))+(((-1.0)*r10*x3627*x3632))+((x3622*x3626))+(((-1.0)*x3624*x3631))+(((-1.0)*r11*x3623*x3632)));
evalcond[2]=((((-1.0)*r21*x3623*x3631))+((x3621*x3629))+(((-1.0)*r22*sj5*x3631))+(((-1.0)*r20*x3627*x3631))+(((-1.0)*x3625*x3632)));
evalcond[3]=((((-1.0)*x3630*x3632))+(((-1.0)*r00*x3627*x3631))+((x3621*x3628))+(((-1.0)*r02*sj5*x3631))+(((-1.0)*r01*x3623*x3631)));
evalcond[4]=((-1.0)+((x3622*x3630))+(((-1.0)*x3628*x3631))+(((-1.0)*r00*x3627*x3632))+(((-1.0)*r02*x3633))+(((-1.0)*r01*x3623*x3632)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x3631))+(((-1.0)*r10*x3627*x3631))+((x3621*x3624))+(((-1.0)*x3626*x3632))+(((-1.0)*r11*x3623*x3631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3634=((1.0)*cj5);
IkReal x3635=((0.01)*cj5);
IkReal x3636=(cj6*r11);
IkReal x3637=(r20*sj6);
IkReal x3638=((0.01)*sj5);
IkReal x3639=(cj6*r01);
IkReal x3640=((0.37429)*cj5);
IkReal x3641=((0.37429)*sj5);
IkReal x3642=(cj6*r21);
IkReal x3643=(r10*sj5*sj6);
IkReal x3644=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x3638))+((x3635*x3642))+((x3635*x3637))+(((-1.0)*pz))+(((-1.0)*x3637*x3641))+((r22*x3640))+(((-1.0)*x3641*x3642)));
evalcond[2]=(((r02*x3638))+(((-1.0)*r00*sj6*x3641))+(((-1.0)*x3639*x3641))+((x3635*x3639))+(((-1.0)*px))+((r00*sj6*x3635))+((r02*x3640)));
evalcond[3]=((0.29542)+((r12*x3638))+((r12*x3640))+((r10*sj6*x3635))+(((-1.0)*x3636*x3641))+((x3635*x3636))+(((-1.0)*py))+(((-1.0)*r10*sj6*x3641)));
evalcond[4]=((1.0)+((sj5*x3637))+(((-1.0)*r22*x3634))+((sj5*x3642)));
evalcond[5]=(((sj5*x3636))+(((-1.0)*r12*x3634))+x3643);
evalcond[6]=(((sj5*x3639))+x3644+(((-1.0)*r02*x3634)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3645=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3645;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3646=((1.0)*sj6);
IkReal x3647=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3646)));
j4eval[0]=x3647;
j4eval[1]=IKsign(x3647);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3646))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3648=cj6*cj6;
IkReal x3649=cj5*cj5;
IkReal x3650=r10*r10;
IkReal x3651=r11*r11;
IkReal x3652=r12*r12;
IkReal x3653=(r10*sj6);
IkReal x3654=(r12*sj5);
IkReal x3655=((2.0)*cj6*r11);
IkReal x3656=((1.0)*x3650);
IkReal x3657=(x3648*x3651);
IkReal x3658=(((x3653*x3655))+(((-2.0)*cj5*x3653*x3654))+((x3649*x3652))+x3657+(((-1.0)*x3649*x3657))+(((-1.0)*x3651))+(((-1.0)*x3652))+(((-1.0)*x3649*x3653*x3655))+((x3648*x3649*x3650))+(((-1.0)*x3648*x3656))+(((-1.0)*x3649*x3656))+(((-1.0)*cj5*x3654*x3655)));
j4eval[0]=x3658;
j4eval[1]=((IKabs((x3654+((cj5*cj6*r11))+((cj5*x3653)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3659=cj6*cj6;
IkReal x3660=cj5*cj5;
IkReal x3661=r10*r10;
IkReal x3662=r11*r11;
IkReal x3663=r12*r12;
IkReal x3664=(r10*sj6);
IkReal x3665=(r12*sj5);
IkReal x3666=((2.0)*cj6*r11);
IkReal x3667=(x3659*x3662);
IkReal x3668=(x3660*x3661);
CheckValue<IkReal> x3669 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x3664))+x3665+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x3669.valid){
continue;
}
CheckValue<IkReal> x3670=IKPowWithIntegerCheck(IKsign((((x3659*x3668))+(((-1.0)*x3668))+(((-1.0)*x3662))+(((-1.0)*x3663))+(((-1.0)*x3660*x3664*x3666))+((x3664*x3666))+(((-1.0)*x3659*x3661))+x3667+(((-2.0)*cj5*x3664*x3665))+(((-1.0)*x3660*x3667))+((x3660*x3663))+(((-1.0)*cj5*x3665*x3666)))),-1);
if(!x3670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3669.value)+(((1.5707963267949)*(x3670.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3671=IKsin(j4);
IkReal x3672=IKcos(j4);
IkReal x3673=(cj5*cj6);
IkReal x3674=(r11*sj6);
IkReal x3675=(cj6*r20);
IkReal x3676=(cj6*r10);
IkReal x3677=(cj5*sj6);
IkReal x3678=(r01*sj6);
IkReal x3679=(r21*sj6);
IkReal x3680=(cj6*r00);
IkReal x3681=((1.0)*x3672);
IkReal x3682=((1.0)*x3671);
IkReal x3683=(sj5*x3682);
evalcond[0]=((((-1.0)*r22*x3683))+(((-1.0)*x3679*x3681))+(((-1.0)*r20*x3677*x3682))+((x3672*x3675))+(((-1.0)*r21*x3673*x3682)));
evalcond[1]=((((-1.0)*r11*x3673*x3682))+(((-1.0)*x3674*x3681))+(((-1.0)*r12*x3683))+((x3672*x3676))+(((-1.0)*r10*x3677*x3682)));
evalcond[2]=((((-1.0)*x3675*x3682))+((x3671*x3679))+(((-1.0)*r20*x3677*x3681))+(((-1.0)*r22*sj5*x3681))+(((-1.0)*r21*x3673*x3681)));
evalcond[3]=((((-1.0)*r00*x3677*x3681))+(((-1.0)*r01*x3673*x3681))+(((-1.0)*r02*sj5*x3681))+(((-1.0)*x3680*x3682))+((x3671*x3678)));
evalcond[4]=((1.0)+((x3672*x3680))+(((-1.0)*r00*x3677*x3682))+(((-1.0)*r01*x3673*x3682))+(((-1.0)*x3678*x3681))+(((-1.0)*r02*x3683)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x3673*x3681))+(((-1.0)*x3676*x3682))+(((-1.0)*r12*sj5*x3681))+((x3671*x3674))+(((-1.0)*r10*x3677*x3681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3684=((1.0)*sj6);
CheckValue<IkReal> x3685 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3684))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3685.valid){
continue;
}
CheckValue<IkReal> x3686=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3684)))),-1);
if(!x3686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3685.value)+(((1.5707963267949)*(x3686.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3687=IKsin(j4);
IkReal x3688=IKcos(j4);
IkReal x3689=(cj5*cj6);
IkReal x3690=(r11*sj6);
IkReal x3691=(cj6*r20);
IkReal x3692=(cj6*r10);
IkReal x3693=(cj5*sj6);
IkReal x3694=(r01*sj6);
IkReal x3695=(r21*sj6);
IkReal x3696=(cj6*r00);
IkReal x3697=((1.0)*x3688);
IkReal x3698=((1.0)*x3687);
IkReal x3699=(sj5*x3698);
evalcond[0]=((((-1.0)*r22*x3699))+((x3688*x3691))+(((-1.0)*r20*x3693*x3698))+(((-1.0)*r21*x3689*x3698))+(((-1.0)*x3695*x3697)));
evalcond[1]=(((x3688*x3692))+(((-1.0)*r12*x3699))+(((-1.0)*r11*x3689*x3698))+(((-1.0)*r10*x3693*x3698))+(((-1.0)*x3690*x3697)));
evalcond[2]=(((x3687*x3695))+(((-1.0)*r22*sj5*x3697))+(((-1.0)*r20*x3693*x3697))+(((-1.0)*r21*x3689*x3697))+(((-1.0)*x3691*x3698)));
evalcond[3]=(((x3687*x3694))+(((-1.0)*r01*x3689*x3697))+(((-1.0)*x3696*x3698))+(((-1.0)*r02*sj5*x3697))+(((-1.0)*r00*x3693*x3697)));
evalcond[4]=((1.0)+((x3688*x3696))+(((-1.0)*r01*x3689*x3698))+(((-1.0)*r02*x3699))+(((-1.0)*x3694*x3697))+(((-1.0)*r00*x3693*x3698)));
evalcond[5]=((-1.0)+((x3687*x3690))+(((-1.0)*r12*sj5*x3697))+(((-1.0)*r11*x3689*x3697))+(((-1.0)*r10*x3693*x3697))+(((-1.0)*x3692*x3698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3700=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3700.valid){
continue;
}
CheckValue<IkReal> x3701 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3700.value)))+(x3701.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3702=IKsin(j4);
IkReal x3703=IKcos(j4);
IkReal x3704=(cj5*cj6);
IkReal x3705=(r11*sj6);
IkReal x3706=(cj6*r20);
IkReal x3707=(cj6*r10);
IkReal x3708=(cj5*sj6);
IkReal x3709=(r01*sj6);
IkReal x3710=(r21*sj6);
IkReal x3711=(cj6*r00);
IkReal x3712=((1.0)*x3703);
IkReal x3713=((1.0)*x3702);
IkReal x3714=(sj5*x3713);
evalcond[0]=((((-1.0)*r20*x3708*x3713))+(((-1.0)*x3710*x3712))+(((-1.0)*r21*x3704*x3713))+(((-1.0)*r22*x3714))+((x3703*x3706)));
evalcond[1]=((((-1.0)*r11*x3704*x3713))+(((-1.0)*x3705*x3712))+(((-1.0)*r12*x3714))+(((-1.0)*r10*x3708*x3713))+((x3703*x3707)));
evalcond[2]=((((-1.0)*r20*x3708*x3712))+(((-1.0)*r22*sj5*x3712))+(((-1.0)*r21*x3704*x3712))+((x3702*x3710))+(((-1.0)*x3706*x3713)));
evalcond[3]=((((-1.0)*r02*sj5*x3712))+(((-1.0)*r00*x3708*x3712))+((x3702*x3709))+(((-1.0)*x3711*x3713))+(((-1.0)*r01*x3704*x3712)));
evalcond[4]=((1.0)+(((-1.0)*r00*x3708*x3713))+(((-1.0)*r02*x3714))+(((-1.0)*r01*x3704*x3713))+(((-1.0)*x3709*x3712))+((x3703*x3711)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x3704*x3712))+(((-1.0)*r12*sj5*x3712))+(((-1.0)*x3707*x3713))+((x3702*x3705))+(((-1.0)*r10*x3708*x3712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3715=cj6*cj6;
IkReal x3716=cj5*cj5;
IkReal x3717=((1.0)*r11);
IkReal x3718=(cj5*sj0);
IkReal x3719=(cj6*r21);
IkReal x3720=(r22*sj5);
IkReal x3721=(r20*sj6);
IkReal x3722=(r12*r22);
IkReal x3723=((1.0)*sj6);
IkReal x3724=(r21*x3715);
IkReal x3725=(r10*x3716);
IkReal x3726=(r11*x3716);
IkReal x3727=(r20*x3715);
IkReal x3728=(cj5*r12*sj5);
CheckValue<IkReal> x3729=IKPowWithIntegerCheck(IKsign((((r20*x3725))+((x3719*x3728))+((cj5*cj6*r11*x3720))+(((-1.0)*r10*x3719*x3723))+((r11*r21))+((x3724*x3726))+x3722+((r10*x3727))+((sj6*x3719*x3725))+((cj5*r10*sj6*x3720))+((cj6*x3721*x3726))+((x3721*x3728))+(((-1.0)*cj6*x3717*x3721))+(((-1.0)*x3725*x3727))+(((-1.0)*x3717*x3724))+(((-1.0)*x3716*x3722)))),-1);
if(!x3729.valid){
continue;
}
CheckValue<IkReal> x3730 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x3723)))),(((x3718*x3721))+((x3718*x3719))+((sj0*x3720))),IKFAST_ATAN2_MAGTHRESH);
if(!x3730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3729.value)))+(x3730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3731=IKsin(j4);
IkReal x3732=IKcos(j4);
IkReal x3733=(cj5*cj6);
IkReal x3734=(r11*sj6);
IkReal x3735=(cj6*r20);
IkReal x3736=(cj5*sj6);
IkReal x3737=(cj6*r10);
IkReal x3738=(r01*sj6);
IkReal x3739=(r21*sj6);
IkReal x3740=(cj6*r00);
IkReal x3741=((1.0)*x3732);
IkReal x3742=((1.0)*x3731);
IkReal x3743=(sj5*x3742);
evalcond[0]=((((-1.0)*r22*x3743))+((x3732*x3735))+(((-1.0)*r20*x3736*x3742))+(((-1.0)*r21*x3733*x3742))+(((-1.0)*x3739*x3741)));
evalcond[1]=((((-1.0)*r22*sj5*x3741))+((x3731*x3739))+(((-1.0)*r20*x3736*x3741))+(((-1.0)*r21*x3733*x3741))+(((-1.0)*x3735*x3742)));
evalcond[2]=((((-1.0)*r10*x3736*x3742))+(((-1.0)*r11*x3733*x3742))+cj0+((x3732*x3737))+(((-1.0)*r12*x3743))+(((-1.0)*x3734*x3741)));
evalcond[3]=(cj0+(((-1.0)*x3740*x3742))+((x3731*x3738))+(((-1.0)*r01*x3733*x3741))+(((-1.0)*r00*x3736*x3741))+(((-1.0)*r02*sj5*x3741)));
evalcond[4]=((((-1.0)*r10*x3736*x3741))+(((-1.0)*r11*x3733*x3741))+sj0+((x3731*x3734))+(((-1.0)*x3737*x3742))+(((-1.0)*r12*sj5*x3741)));
evalcond[5]=((((-1.0)*sj0))+((x3732*x3740))+(((-1.0)*r01*x3733*x3742))+(((-1.0)*r00*x3736*x3742))+(((-1.0)*x3738*x3741))+(((-1.0)*r02*x3743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3744=cj5*cj5;
IkReal x3745=cj6*cj6;
IkReal x3746=(r22*sj5);
IkReal x3747=(cj6*r21);
IkReal x3748=(r20*sj6);
IkReal x3749=((1.0)*sj6);
IkReal x3750=(cj0*cj5);
IkReal x3751=(r02*r22);
IkReal x3752=(cj6*r01);
IkReal x3753=(r00*sj6);
IkReal x3754=(cj5*r02*sj5);
IkReal x3755=(r01*x3744);
IkReal x3756=(r21*x3745);
IkReal x3757=(r00*r20*x3744);
CheckValue<IkReal> x3758=IKPowWithIntegerCheck(IKsign((((x3755*x3756))+((x3744*x3747*x3753))+(((-1.0)*r01*x3756))+(((-1.0)*r00*x3747*x3749))+((x3744*x3748*x3752))+((r00*r20*x3745))+((cj5*x3746*x3752))+((cj5*x3746*x3753))+((r01*r21))+((x3748*x3754))+x3751+x3757+(((-1.0)*x3748*x3752))+((x3747*x3754))+(((-1.0)*x3745*x3757))+(((-1.0)*x3744*x3751)))),-1);
if(!x3758.valid){
continue;
}
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x3749)))),(((cj0*x3746))+((x3748*x3750))+((x3747*x3750))),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3758.value)))+(x3759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3760=IKsin(j4);
IkReal x3761=IKcos(j4);
IkReal x3762=(cj5*cj6);
IkReal x3763=(r11*sj6);
IkReal x3764=(cj6*r20);
IkReal x3765=(cj5*sj6);
IkReal x3766=(cj6*r10);
IkReal x3767=(r01*sj6);
IkReal x3768=(r21*sj6);
IkReal x3769=(cj6*r00);
IkReal x3770=((1.0)*x3761);
IkReal x3771=((1.0)*x3760);
IkReal x3772=(sj5*x3771);
evalcond[0]=((((-1.0)*r22*x3772))+(((-1.0)*r20*x3765*x3771))+((x3761*x3764))+(((-1.0)*x3768*x3770))+(((-1.0)*r21*x3762*x3771)));
evalcond[1]=((((-1.0)*x3764*x3771))+(((-1.0)*r20*x3765*x3770))+(((-1.0)*r22*sj5*x3770))+((x3760*x3768))+(((-1.0)*r21*x3762*x3770)));
evalcond[2]=(cj0+(((-1.0)*r10*x3765*x3771))+(((-1.0)*x3763*x3770))+((x3761*x3766))+(((-1.0)*r12*x3772))+(((-1.0)*r11*x3762*x3771)));
evalcond[3]=(cj0+(((-1.0)*r00*x3765*x3770))+(((-1.0)*r01*x3762*x3770))+(((-1.0)*r02*sj5*x3770))+((x3760*x3767))+(((-1.0)*x3769*x3771)));
evalcond[4]=(sj0+(((-1.0)*r10*x3765*x3770))+(((-1.0)*r12*sj5*x3770))+((x3760*x3763))+(((-1.0)*x3766*x3771))+(((-1.0)*r11*x3762*x3770)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x3765*x3771))+(((-1.0)*x3767*x3770))+(((-1.0)*r01*x3762*x3771))+((x3761*x3769))+(((-1.0)*r02*x3772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3773=(cj0*sj6);
IkReal x3774=(cj0*cj6);
CheckValue<IkReal> x3775=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3775.valid){
continue;
}
CheckValue<IkReal> x3776 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3773))+((r20*x3774)))),(((cj5*r20*x3773))+((cj0*r22*sj5))+((cj5*r21*x3774))),IKFAST_ATAN2_MAGTHRESH);
if(!x3776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3775.value)))+(x3776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3777=IKsin(j4);
IkReal x3778=IKcos(j4);
IkReal x3779=(cj5*cj6);
IkReal x3780=(r11*sj6);
IkReal x3781=(cj6*r20);
IkReal x3782=(cj5*sj6);
IkReal x3783=(cj6*r10);
IkReal x3784=(r01*sj6);
IkReal x3785=(r21*sj6);
IkReal x3786=(cj6*r00);
IkReal x3787=((1.0)*x3778);
IkReal x3788=((1.0)*x3777);
IkReal x3789=(sj5*x3788);
evalcond[0]=((((-1.0)*r21*x3779*x3788))+(((-1.0)*r22*x3789))+((x3778*x3781))+(((-1.0)*r20*x3782*x3788))+(((-1.0)*x3785*x3787)));
evalcond[1]=((((-1.0)*r21*x3779*x3787))+(((-1.0)*r22*sj5*x3787))+(((-1.0)*r20*x3782*x3787))+(((-1.0)*x3781*x3788))+((x3777*x3785)));
evalcond[2]=(cj0+(((-1.0)*r10*x3782*x3788))+((x3778*x3783))+(((-1.0)*r11*x3779*x3788))+(((-1.0)*x3780*x3787))+(((-1.0)*r12*x3789)));
evalcond[3]=(cj0+(((-1.0)*r01*x3779*x3787))+(((-1.0)*x3786*x3788))+((x3777*x3784))+(((-1.0)*r00*x3782*x3787))+(((-1.0)*r02*sj5*x3787)));
evalcond[4]=((((-1.0)*r12*sj5*x3787))+sj0+(((-1.0)*r10*x3782*x3787))+(((-1.0)*r11*x3779*x3787))+((x3777*x3780))+(((-1.0)*x3783*x3788)));
evalcond[5]=((((-1.0)*x3784*x3787))+(((-1.0)*sj0))+(((-1.0)*r01*x3779*x3788))+(((-1.0)*r02*x3789))+((x3778*x3786))+(((-1.0)*r00*x3782*x3788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3790=(cj6*sj5);
IkReal x3791=(sj5*sj6);
IkReal x3792=((0.01)*cj5);
IkReal x3793=(cj5*r22);
IkReal x3794=((1.0)*cj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.069)+(((0.37429)*x3793))+((r20*sj6*x3792))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((cj6*r21*x3792))+(((-0.37429)*r21*x3790))+(((-0.37429)*r20*x3791)));
evalcond[2]=((-1.0)+((r21*x3790))+(((-1.0)*x3793))+((r20*x3791)));
evalcond[3]=((((-1.0)*r12*x3794))+((r10*x3791))+((r11*x3790)));
evalcond[4]=((((-1.0)*r02*x3794))+((r00*x3791))+((r01*x3790)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3795=((1.26697583102024)*cj5);
IkReal x3796=((0.0338501117053686)*cj5);
IkReal x3797=(r00*sj6);
IkReal x3798=(r10*sj6);
IkReal x3799=((1.26697583102024)*sj5);
IkReal x3800=(cj6*r11);
IkReal x3801=((0.0338501117053686)*sj5);
IkReal x3802=(cj6*r01);
if( IKabs((((x3796*x3798))+(((-3.38501117053686)*py))+((r12*x3801))+(((-1.0)*x3798*x3799))+((x3796*x3800))+(((-1.0)*x3799*x3800))+((r12*x3795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x3797*x3799))+((x3796*x3797))+(((-3.38501117053686)*px))+((r02*x3795))+((r02*x3801))+((x3796*x3802))+(((-1.0)*x3799*x3802)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3796*x3798))+(((-3.38501117053686)*py))+((r12*x3801))+(((-1.0)*x3798*x3799))+((x3796*x3800))+(((-1.0)*x3799*x3800))+((r12*x3795))))+IKsqr(((((-1.0)*x3797*x3799))+((x3796*x3797))+(((-3.38501117053686)*px))+((r02*x3795))+((r02*x3801))+((x3796*x3802))+(((-1.0)*x3799*x3802))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x3796*x3798))+(((-3.38501117053686)*py))+((r12*x3801))+(((-1.0)*x3798*x3799))+((x3796*x3800))+(((-1.0)*x3799*x3800))+((r12*x3795))), ((((-1.0)*x3797*x3799))+((x3796*x3797))+(((-3.38501117053686)*px))+((r02*x3795))+((r02*x3801))+((x3796*x3802))+(((-1.0)*x3799*x3802))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3803=((0.01)*cj5);
IkReal x3804=(cj6*r01);
IkReal x3805=(r00*sj6);
IkReal x3806=((0.01)*sj5);
IkReal x3807=((0.37429)*sj5);
IkReal x3808=((0.37429)*cj5);
IkReal x3809=(r10*sj6);
IkReal x3810=(cj6*r11);
evalcond[0]=((((-1.0)*x3805*x3807))+((r02*x3808))+((r02*x3806))+(((-1.0)*px))+(((-0.29542)*(IKcos(j0))))+((x3803*x3804))+((x3803*x3805))+(((-1.0)*x3804*x3807)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+(((-1.0)*x3807*x3810))+((r12*x3806))+((r12*x3808))+(((-1.0)*py))+((x3803*x3809))+((x3803*x3810))+(((-1.0)*x3807*x3809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3811=(r20*sj0);
IkReal x3812=((1.0)*sj5);
IkReal x3813=(r21*sj0);
IkReal x3814=(((cj5*r12))+(((-1.0)*r10*sj6*x3812))+(((-1.0)*cj6*r11*x3812)));
j4eval[0]=x3814;
j4eval[1]=IKsign(x3814);
j4eval[2]=((IKabs((((cj5*sj6*x3811))+((r22*sj0*sj5))+((cj5*cj6*x3813)))))+(IKabs(((((-1.0)*sj6*x3813))+((cj6*x3811))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3815=cj5*cj5;
IkReal x3816=cj6*cj6;
IkReal x3817=(r00*r20);
IkReal x3818=(r02*r22);
IkReal x3819=(r22*sj5);
IkReal x3820=(cj6*r21);
IkReal x3821=(r00*sj6);
IkReal x3822=(r20*sj6);
IkReal x3823=(cj6*r01);
IkReal x3824=(cj0*cj5);
IkReal x3825=((1.0)*x3815);
IkReal x3826=(cj5*r02*sj5);
IkReal x3827=(r01*r21*x3816);
IkReal x3828=(((x3815*x3822*x3823))+((r01*r21))+((x3820*x3826))+((x3815*x3827))+((x3815*x3817))+(((-1.0)*x3827))+x3818+((x3815*x3820*x3821))+((x3816*x3817))+((x3822*x3826))+(((-1.0)*x3820*x3821))+(((-1.0)*x3818*x3825))+(((-1.0)*x3816*x3817*x3825))+(((-1.0)*x3822*x3823))+((cj5*x3819*x3823))+((cj5*x3819*x3821)));
j4eval[0]=x3828;
j4eval[1]=IKsign(x3828);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x3820*x3824))+((cj0*x3819))+((x3822*x3824))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3829=cj6*cj6;
IkReal x3830=cj5*cj5;
IkReal x3831=(r12*sj5);
IkReal x3832=(r22*sj5);
IkReal x3833=((1.0)*r11);
IkReal x3834=(r20*sj0);
IkReal x3835=(r10*r20);
IkReal x3836=(cj5*sj6);
IkReal x3837=(cj6*r10);
IkReal x3838=(r12*r22);
IkReal x3839=(cj5*cj6*r21);
IkReal x3840=(r21*x3829);
IkReal x3841=(cj6*r20*sj6);
IkReal x3842=(r11*x3830);
IkReal x3843=((1.0)*r21*sj6);
IkReal x3844=((1.0)*x3830);
IkReal x3845=(((r20*x3831*x3836))+((x3841*x3842))+((r11*r21))+((x3829*x3835))+((x3831*x3839))+(((-1.0)*x3838*x3844))+x3838+(((-1.0)*x3829*x3835*x3844))+((cj5*cj6*r11*x3832))+((x3840*x3842))+(((-1.0)*x3837*x3843))+(((-1.0)*x3833*x3840))+(((-1.0)*x3833*x3841))+((r21*sj6*x3830*x3837))+((x3830*x3835))+((r10*x3832*x3836)));
j4eval[0]=x3845;
j4eval[1]=IKsign(x3845);
j4eval[2]=((IKabs((((x3834*x3836))+((sj0*x3839))+((sj0*x3832)))))+(IKabs(((((-1.0)*sj0*x3843))+((cj6*x3834))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3846=((1.0)*cj5);
IkReal x3847=((0.01)*cj5);
IkReal x3848=(cj6*r11);
IkReal x3849=(r20*sj6);
IkReal x3850=((0.01)*sj5);
IkReal x3851=(cj6*r01);
IkReal x3852=((0.37429)*cj5);
IkReal x3853=((0.37429)*sj5);
IkReal x3854=(cj6*r21);
IkReal x3855=(r10*sj5*sj6);
IkReal x3856=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x3847*x3854))+((x3847*x3849))+(((-1.0)*pz))+(((-1.0)*x3853*x3854))+((r22*x3852))+((r22*x3850))+(((-1.0)*x3849*x3853)));
evalcond[2]=((-0.29542)+((r02*x3850))+((r02*x3852))+((x3847*x3851))+(((-1.0)*px))+(((-1.0)*x3851*x3853))+((r00*sj6*x3847))+(((-1.0)*r00*sj6*x3853)));
evalcond[3]=((((-1.0)*r10*sj6*x3853))+((r10*sj6*x3847))+(((-1.0)*x3848*x3853))+((x3847*x3848))+(((-1.0)*py))+((r12*x3852))+((r12*x3850)));
evalcond[4]=((-1.0)+((sj5*x3854))+((sj5*x3849))+(((-1.0)*r22*x3846)));
evalcond[5]=(((sj5*x3848))+(((-1.0)*r12*x3846))+x3855);
evalcond[6]=((((-1.0)*r02*x3846))+((sj5*x3851))+x3856);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3857=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3857;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3858=((1.0)*sj6);
IkReal x3859=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3858))+((cj5*r02)));
j4eval[0]=x3859;
j4eval[1]=IKsign(x3859);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3858))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3860=cj6*cj6;
IkReal x3861=r01*r01;
IkReal x3862=cj5*cj5;
IkReal x3863=r00*r00;
IkReal x3864=r02*r02;
IkReal x3865=(cj6*r00);
IkReal x3866=(r02*sj5);
IkReal x3867=(cj5*cj6*r01);
IkReal x3868=((2.0)*r01*sj6);
IkReal x3869=(cj5*r00*sj6);
IkReal x3870=((1.0)*x3862);
IkReal x3871=(x3860*x3863);
IkReal x3872=(x3860*x3861);
IkReal x3873=(((x3862*x3872))+(((-1.0)*x3865*x3868))+(((2.0)*x3866*x3867))+(((2.0)*x3866*x3869))+((x3862*x3865*x3868))+(((-1.0)*x3870*x3871))+x3861+x3864+x3871+(((-1.0)*x3872))+((x3862*x3863))+(((-1.0)*x3864*x3870)));
j4eval[0]=x3873;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x3865)))+(IKabs((x3869+x3867+x3866))));
j4eval[2]=IKsign(x3873);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3874=cj6*cj6;
IkReal x3875=r01*r01;
IkReal x3876=cj5*cj5;
IkReal x3877=r00*r00;
IkReal x3878=r02*r02;
IkReal x3879=(cj6*r00);
IkReal x3880=((2.0)*r01);
IkReal x3881=(cj5*cj6);
IkReal x3882=(r02*sj5);
IkReal x3883=(cj5*r00*sj6);
IkReal x3884=(x3876*x3877);
IkReal x3885=(x3874*x3875);
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3879)),(x3883+x3882+((r01*x3881))),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
CheckValue<IkReal> x3887=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x3879*x3880))+(((-1.0)*x3874*x3884))+(((-1.0)*x3885))+((x3876*x3885))+(((2.0)*x3882*x3883))+((x3874*x3877))+((x3880*x3881*x3882))+x3878+x3875+x3884+(((-1.0)*x3876*x3878))+((sj6*x3876*x3879*x3880)))),-1);
if(!x3887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3886.value)+(((1.5707963267949)*(x3887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3888=IKsin(j4);
IkReal x3889=IKcos(j4);
IkReal x3890=(cj5*cj6);
IkReal x3891=(r11*sj6);
IkReal x3892=(cj6*r20);
IkReal x3893=(cj6*r10);
IkReal x3894=(cj5*sj6);
IkReal x3895=(r21*sj6);
IkReal x3896=(cj6*r00);
IkReal x3897=(r01*sj6);
IkReal x3898=((1.0)*x3889);
IkReal x3899=((1.0)*x3888);
IkReal x3900=(sj5*x3899);
evalcond[0]=((((-1.0)*x3895*x3898))+(((-1.0)*r22*x3900))+((x3889*x3892))+(((-1.0)*r20*x3894*x3899))+(((-1.0)*r21*x3890*x3899)));
evalcond[1]=(((x3889*x3896))+(((-1.0)*r01*x3890*x3899))+(((-1.0)*x3897*x3898))+(((-1.0)*r02*x3900))+(((-1.0)*r00*x3894*x3899)));
evalcond[2]=(((x3888*x3895))+(((-1.0)*x3892*x3899))+(((-1.0)*r22*sj5*x3898))+(((-1.0)*r20*x3894*x3898))+(((-1.0)*r21*x3890*x3898)));
evalcond[3]=((((-1.0)*r12*sj5*x3898))+((x3888*x3891))+(((-1.0)*r11*x3890*x3898))+(((-1.0)*x3893*x3899))+(((-1.0)*r10*x3894*x3898)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x3900))+((x3889*x3893))+(((-1.0)*r11*x3890*x3899))+(((-1.0)*x3891*x3898))+(((-1.0)*r10*x3894*x3899)));
evalcond[5]=((1.0)+((x3888*x3897))+(((-1.0)*r01*x3890*x3898))+(((-1.0)*x3896*x3899))+(((-1.0)*r02*sj5*x3898))+(((-1.0)*r00*x3894*x3898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3901=((1.0)*sj6);
CheckValue<IkReal> x3902 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x3901)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3902.valid){
continue;
}
CheckValue<IkReal> x3903=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3901))+((cj5*r02)))),-1);
if(!x3903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3902.value)+(((1.5707963267949)*(x3903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3904=IKsin(j4);
IkReal x3905=IKcos(j4);
IkReal x3906=(cj5*cj6);
IkReal x3907=(r11*sj6);
IkReal x3908=(cj6*r20);
IkReal x3909=(cj6*r10);
IkReal x3910=(cj5*sj6);
IkReal x3911=(r21*sj6);
IkReal x3912=(cj6*r00);
IkReal x3913=(r01*sj6);
IkReal x3914=((1.0)*x3905);
IkReal x3915=((1.0)*x3904);
IkReal x3916=(sj5*x3915);
evalcond[0]=((((-1.0)*x3911*x3914))+(((-1.0)*r21*x3906*x3915))+(((-1.0)*r20*x3910*x3915))+(((-1.0)*r22*x3916))+((x3905*x3908)));
evalcond[1]=((((-1.0)*r02*x3916))+((x3905*x3912))+(((-1.0)*r00*x3910*x3915))+(((-1.0)*x3913*x3914))+(((-1.0)*r01*x3906*x3915)));
evalcond[2]=((((-1.0)*r21*x3906*x3914))+((x3904*x3911))+(((-1.0)*r20*x3910*x3914))+(((-1.0)*x3908*x3915))+(((-1.0)*r22*sj5*x3914)));
evalcond[3]=((((-1.0)*x3909*x3915))+(((-1.0)*r12*sj5*x3914))+((x3904*x3907))+(((-1.0)*r11*x3906*x3914))+(((-1.0)*r10*x3910*x3914)));
evalcond[4]=((-1.0)+((x3905*x3909))+(((-1.0)*x3907*x3914))+(((-1.0)*r11*x3906*x3915))+(((-1.0)*r10*x3910*x3915))+(((-1.0)*r12*x3916)));
evalcond[5]=((1.0)+(((-1.0)*x3912*x3915))+((x3904*x3913))+(((-1.0)*r00*x3910*x3914))+(((-1.0)*r02*sj5*x3914))+(((-1.0)*r01*x3906*x3914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3917=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3917.valid){
continue;
}
CheckValue<IkReal> x3918 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x3918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3917.value)))+(x3918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3919=IKsin(j4);
IkReal x3920=IKcos(j4);
IkReal x3921=(cj5*cj6);
IkReal x3922=(r11*sj6);
IkReal x3923=(cj6*r20);
IkReal x3924=(cj6*r10);
IkReal x3925=(cj5*sj6);
IkReal x3926=(r21*sj6);
IkReal x3927=(cj6*r00);
IkReal x3928=(r01*sj6);
IkReal x3929=((1.0)*x3920);
IkReal x3930=((1.0)*x3919);
IkReal x3931=(sj5*x3930);
evalcond[0]=((((-1.0)*r21*x3921*x3930))+((x3920*x3923))+(((-1.0)*r20*x3925*x3930))+(((-1.0)*x3926*x3929))+(((-1.0)*r22*x3931)));
evalcond[1]=(((x3920*x3927))+(((-1.0)*r01*x3921*x3930))+(((-1.0)*x3928*x3929))+(((-1.0)*r02*x3931))+(((-1.0)*r00*x3925*x3930)));
evalcond[2]=(((x3919*x3926))+(((-1.0)*r22*sj5*x3929))+(((-1.0)*x3923*x3930))+(((-1.0)*r21*x3921*x3929))+(((-1.0)*r20*x3925*x3929)));
evalcond[3]=(((x3919*x3922))+(((-1.0)*r11*x3921*x3929))+(((-1.0)*r10*x3925*x3929))+(((-1.0)*r12*sj5*x3929))+(((-1.0)*x3924*x3930)));
evalcond[4]=((-1.0)+((x3920*x3924))+(((-1.0)*x3922*x3929))+(((-1.0)*r12*x3931))+(((-1.0)*r10*x3925*x3930))+(((-1.0)*r11*x3921*x3930)));
evalcond[5]=((1.0)+((x3919*x3928))+(((-1.0)*r01*x3921*x3929))+(((-1.0)*r02*sj5*x3929))+(((-1.0)*r00*x3925*x3929))+(((-1.0)*x3927*x3930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3932=((1.0)*cj5);
IkReal x3933=((0.01)*cj5);
IkReal x3934=(cj6*r11);
IkReal x3935=(r20*sj6);
IkReal x3936=((0.01)*sj5);
IkReal x3937=(cj6*r01);
IkReal x3938=((0.37429)*cj5);
IkReal x3939=((0.37429)*sj5);
IkReal x3940=(cj6*r21);
IkReal x3941=(r10*sj5*sj6);
IkReal x3942=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x3938))+((r22*x3936))+((x3933*x3940))+((x3933*x3935))+(((-1.0)*pz))+(((-1.0)*x3939*x3940))+(((-1.0)*x3935*x3939)));
evalcond[2]=((0.29542)+(((-1.0)*r00*sj6*x3939))+((r00*sj6*x3933))+((x3933*x3937))+(((-1.0)*x3937*x3939))+(((-1.0)*px))+((r02*x3938))+((r02*x3936)));
evalcond[3]=((((-1.0)*x3934*x3939))+(((-1.0)*r10*sj6*x3939))+((x3933*x3934))+(((-1.0)*py))+((r10*sj6*x3933))+((r12*x3936))+((r12*x3938)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x3932))+((sj5*x3940))+((sj5*x3935)));
evalcond[5]=(x3941+(((-1.0)*r12*x3932))+((sj5*x3934)));
evalcond[6]=(x3942+(((-1.0)*r02*x3932))+((sj5*x3937)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3943=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3943;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3943);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3944=((1.0)*sj5);
IkReal x3945=((((-1.0)*r20*sj6*x3944))+((cj5*r22))+(((-1.0)*cj6*r21*x3944)));
j4eval[0]=x3945;
j4eval[1]=IKsign(x3945);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3946=cj6*cj6;
IkReal x3947=cj5*cj5;
IkReal x3948=r00*r00;
IkReal x3949=r01*r01;
IkReal x3950=r02*r02;
IkReal x3951=(cj6*r00);
IkReal x3952=(cj5*cj6*r01);
IkReal x3953=((2.0)*r02*sj5);
IkReal x3954=((1.0)*x3946);
IkReal x3955=((2.0)*r01*sj6);
IkReal x3956=(cj5*r00*sj6);
IkReal x3957=(x3947*x3948);
IkReal x3958=((((-1.0)*x3953*x3956))+(((-1.0)*x3948*x3954))+(((-1.0)*x3947*x3951*x3955))+(((-1.0)*x3949))+(((-1.0)*x3950))+(((-1.0)*x3957))+((x3946*x3949))+((x3946*x3957))+(((-1.0)*x3952*x3953))+(((-1.0)*x3947*x3949*x3954))+((x3947*x3950))+((x3951*x3955)));
j4eval[0]=x3958;
j4eval[1]=((IKabs((((r02*sj5))+x3952+x3956)))+(IKabs(((((-1.0)*r01*sj6))+x3951))));
j4eval[2]=IKsign(x3958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3959=cj6*cj6;
IkReal x3960=cj5*cj5;
IkReal x3961=r00*r00;
IkReal x3962=r01*r01;
IkReal x3963=r02*r02;
IkReal x3964=(cj6*r00);
IkReal x3965=(cj5*cj6*r01);
IkReal x3966=((2.0)*r02*sj5);
IkReal x3967=((1.0)*x3959);
IkReal x3968=((2.0)*r01*sj6);
IkReal x3969=(cj5*r00*sj6);
IkReal x3970=(x3960*x3961);
CheckValue<IkReal> x3971=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3960*x3962*x3967))+(((-1.0)*x3965*x3966))+((x3960*x3963))+((x3964*x3968))+(((-1.0)*x3961*x3967))+(((-1.0)*x3966*x3969))+((x3959*x3962))+((x3959*x3970))+(((-1.0)*x3962))+(((-1.0)*x3963))+(((-1.0)*x3970))+(((-1.0)*x3960*x3964*x3968)))),-1);
if(!x3971.valid){
continue;
}
CheckValue<IkReal> x3972 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3964)),(((r02*sj5))+x3965+x3969),IKFAST_ATAN2_MAGTHRESH);
if(!x3972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3971.value)))+(x3972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3973=IKsin(j4);
IkReal x3974=IKcos(j4);
IkReal x3975=(cj5*cj6);
IkReal x3976=(r11*sj6);
IkReal x3977=(cj6*r20);
IkReal x3978=(cj6*r10);
IkReal x3979=(cj5*sj6);
IkReal x3980=(r21*sj6);
IkReal x3981=(cj6*r00);
IkReal x3982=(r01*sj6);
IkReal x3983=((1.0)*x3974);
IkReal x3984=((1.0)*x3973);
IkReal x3985=(sj5*x3984);
evalcond[0]=((((-1.0)*r20*x3979*x3984))+(((-1.0)*r21*x3975*x3984))+(((-1.0)*r22*x3985))+((x3974*x3977))+(((-1.0)*x3980*x3983)));
evalcond[1]=((((-1.0)*r00*x3979*x3984))+(((-1.0)*x3982*x3983))+(((-1.0)*r01*x3975*x3984))+((x3974*x3981))+(((-1.0)*r02*x3985)));
evalcond[2]=((((-1.0)*r20*x3979*x3983))+(((-1.0)*x3977*x3984))+(((-1.0)*r21*x3975*x3983))+((x3973*x3980))+(((-1.0)*r22*sj5*x3983)));
evalcond[3]=((((-1.0)*r10*x3979*x3983))+((x3973*x3976))+(((-1.0)*r12*sj5*x3983))+(((-1.0)*x3978*x3984))+(((-1.0)*r11*x3975*x3983)));
evalcond[4]=((1.0)+(((-1.0)*r12*x3985))+(((-1.0)*x3976*x3983))+(((-1.0)*r10*x3979*x3984))+((x3974*x3978))+(((-1.0)*r11*x3975*x3984)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x3979*x3983))+(((-1.0)*x3981*x3984))+(((-1.0)*r01*x3975*x3983))+(((-1.0)*r02*sj5*x3983))+((x3973*x3982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3986=((1.0)*sj5);
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
CheckValue<IkReal> x3988=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x3986))+(((-1.0)*cj6*r21*x3986)))),-1);
if(!x3988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3987.value)+(((1.5707963267949)*(x3988.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3989=IKsin(j4);
IkReal x3990=IKcos(j4);
IkReal x3991=(cj5*cj6);
IkReal x3992=(r11*sj6);
IkReal x3993=(cj6*r20);
IkReal x3994=(cj6*r10);
IkReal x3995=(cj5*sj6);
IkReal x3996=(r21*sj6);
IkReal x3997=(cj6*r00);
IkReal x3998=(r01*sj6);
IkReal x3999=((1.0)*x3990);
IkReal x4000=((1.0)*x3989);
IkReal x4001=(sj5*x4000);
evalcond[0]=((((-1.0)*r22*x4001))+(((-1.0)*x3996*x3999))+(((-1.0)*r20*x3995*x4000))+((x3990*x3993))+(((-1.0)*r21*x3991*x4000)));
evalcond[1]=((((-1.0)*x3998*x3999))+(((-1.0)*r02*x4001))+((x3990*x3997))+(((-1.0)*r01*x3991*x4000))+(((-1.0)*r00*x3995*x4000)));
evalcond[2]=((((-1.0)*r21*x3991*x3999))+((x3989*x3996))+(((-1.0)*x3993*x4000))+(((-1.0)*r22*sj5*x3999))+(((-1.0)*r20*x3995*x3999)));
evalcond[3]=(((x3989*x3992))+(((-1.0)*r11*x3991*x3999))+(((-1.0)*x3994*x4000))+(((-1.0)*r10*x3995*x3999))+(((-1.0)*r12*sj5*x3999)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3991*x4000))+((x3990*x3994))+(((-1.0)*x3992*x3999))+(((-1.0)*r12*x4001))+(((-1.0)*r10*x3995*x4000)));
evalcond[5]=((-1.0)+((x3989*x3998))+(((-1.0)*r02*sj5*x3999))+(((-1.0)*x3997*x4000))+(((-1.0)*r01*x3991*x3999))+(((-1.0)*r00*x3995*x3999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4002 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4002.valid){
continue;
}
CheckValue<IkReal> x4003=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4002.value)+(((1.5707963267949)*(x4003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4004=IKsin(j4);
IkReal x4005=IKcos(j4);
IkReal x4006=(cj5*cj6);
IkReal x4007=(r11*sj6);
IkReal x4008=(cj6*r20);
IkReal x4009=(cj6*r10);
IkReal x4010=(cj5*sj6);
IkReal x4011=(r21*sj6);
IkReal x4012=(cj6*r00);
IkReal x4013=(r01*sj6);
IkReal x4014=((1.0)*x4005);
IkReal x4015=((1.0)*x4004);
IkReal x4016=(sj5*x4015);
evalcond[0]=((((-1.0)*r22*x4016))+(((-1.0)*x4011*x4014))+((x4005*x4008))+(((-1.0)*r20*x4010*x4015))+(((-1.0)*r21*x4006*x4015)));
evalcond[1]=((((-1.0)*r01*x4006*x4015))+((x4005*x4012))+(((-1.0)*x4013*x4014))+(((-1.0)*r02*x4016))+(((-1.0)*r00*x4010*x4015)));
evalcond[2]=(((x4004*x4011))+(((-1.0)*x4008*x4015))+(((-1.0)*r20*x4010*x4014))+(((-1.0)*r22*sj5*x4014))+(((-1.0)*r21*x4006*x4014)));
evalcond[3]=((((-1.0)*r11*x4006*x4014))+(((-1.0)*r12*sj5*x4014))+((x4004*x4007))+(((-1.0)*r10*x4010*x4014))+(((-1.0)*x4009*x4015)));
evalcond[4]=((1.0)+(((-1.0)*r12*x4016))+(((-1.0)*r11*x4006*x4015))+((x4005*x4009))+(((-1.0)*r10*x4010*x4015))+(((-1.0)*x4007*x4014)));
evalcond[5]=((-1.0)+((x4004*x4013))+(((-1.0)*x4012*x4015))+(((-1.0)*r01*x4006*x4014))+(((-1.0)*r02*sj5*x4014))+(((-1.0)*r00*x4010*x4014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4017=((1.0)*cj5);
IkReal x4018=((0.01)*cj5);
IkReal x4019=(cj6*r11);
IkReal x4020=(r20*sj6);
IkReal x4021=((0.01)*sj5);
IkReal x4022=(cj6*r01);
IkReal x4023=((0.37429)*cj5);
IkReal x4024=((0.37429)*sj5);
IkReal x4025=(cj6*r21);
IkReal x4026=(r10*sj5*sj6);
IkReal x4027=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x4024*x4025))+((x4018*x4020))+((x4018*x4025))+(((-1.0)*pz))+((r22*x4023))+((r22*x4021))+(((-1.0)*x4020*x4024)));
evalcond[2]=(((r00*sj6*x4018))+(((-1.0)*x4022*x4024))+((x4018*x4022))+(((-1.0)*px))+(((-1.0)*r00*sj6*x4024))+((r02*x4023))+((r02*x4021)));
evalcond[3]=((-0.29542)+(((-1.0)*r10*sj6*x4024))+((x4018*x4019))+(((-1.0)*py))+((r12*x4021))+((r12*x4023))+((r10*sj6*x4018))+(((-1.0)*x4019*x4024)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4017))+((sj5*x4025))+((sj5*x4020)));
evalcond[5]=((((-1.0)*r12*x4017))+x4026+((sj5*x4019)));
evalcond[6]=((((-1.0)*r02*x4017))+x4027+((sj5*x4022)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4028=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4028;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4029=((1.0)*sj6);
IkReal x4030=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4029)));
j4eval[0]=x4030;
j4eval[1]=IKsign(x4030);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x4029))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4031=r11*r11;
IkReal x4032=cj5*cj5;
IkReal x4033=cj6*cj6;
IkReal x4034=r10*r10;
IkReal x4035=r12*r12;
IkReal x4036=(r12*sj5);
IkReal x4037=(cj6*r10);
IkReal x4038=((1.0)*x4033);
IkReal x4039=(cj5*cj6*r11);
IkReal x4040=(cj5*r10*sj6);
IkReal x4041=((2.0)*r11*sj6);
IkReal x4042=(x4032*x4034);
IkReal x4043=(((x4032*x4037*x4041))+(((-1.0)*x4031*x4038))+(((-1.0)*x4032*x4035))+(((2.0)*x4036*x4040))+((x4033*x4034))+x4042+x4031+x4035+(((-1.0)*x4037*x4041))+((x4031*x4032*x4033))+(((2.0)*x4036*x4039))+(((-1.0)*x4038*x4042)));
j4eval[0]=x4043;
j4eval[1]=IKsign(x4043);
j4eval[2]=((IKabs((x4040+x4036+x4039)))+(IKabs((x4037+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4044=r11*r11;
IkReal x4045=cj5*cj5;
IkReal x4046=cj6*cj6;
IkReal x4047=r10*r10;
IkReal x4048=r12*r12;
IkReal x4049=(r10*sj6);
IkReal x4050=(r12*sj5);
IkReal x4051=((1.0)*x4046);
IkReal x4052=(cj5*cj6*r11);
IkReal x4053=((2.0)*cj6*r11);
IkReal x4054=(x4045*x4047);
CheckValue<IkReal> x4055 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x4052+x4050+((cj5*x4049))),IKFAST_ATAN2_MAGTHRESH);
if(!x4055.valid){
continue;
}
CheckValue<IkReal> x4056=IKPowWithIntegerCheck(IKsign((((x4044*x4045*x4046))+(((-1.0)*x4051*x4054))+(((-1.0)*x4045*x4048))+(((2.0)*x4050*x4052))+((x4046*x4047))+(((-1.0)*x4044*x4051))+((x4045*x4049*x4053))+x4044+x4048+x4054+(((-1.0)*x4049*x4053))+(((2.0)*cj5*x4049*x4050)))),-1);
if(!x4056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4055.value)+(((1.5707963267949)*(x4056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4057=IKsin(j4);
IkReal x4058=IKcos(j4);
IkReal x4059=(cj5*cj6);
IkReal x4060=(r11*sj6);
IkReal x4061=(cj6*r20);
IkReal x4062=(cj6*r10);
IkReal x4063=(cj5*sj6);
IkReal x4064=(r01*sj6);
IkReal x4065=(r21*sj6);
IkReal x4066=(cj6*r00);
IkReal x4067=((1.0)*x4058);
IkReal x4068=((1.0)*x4057);
IkReal x4069=(sj5*x4068);
evalcond[0]=((((-1.0)*x4065*x4067))+(((-1.0)*r21*x4059*x4068))+(((-1.0)*r20*x4063*x4068))+(((-1.0)*r22*x4069))+((x4058*x4061)));
evalcond[1]=((((-1.0)*x4060*x4067))+(((-1.0)*r12*x4069))+(((-1.0)*r11*x4059*x4068))+(((-1.0)*r10*x4063*x4068))+((x4058*x4062)));
evalcond[2]=((((-1.0)*x4061*x4068))+(((-1.0)*r21*x4059*x4067))+(((-1.0)*r20*x4063*x4067))+(((-1.0)*r22*sj5*x4067))+((x4057*x4065)));
evalcond[3]=((((-1.0)*x4066*x4068))+(((-1.0)*r01*x4059*x4067))+(((-1.0)*r00*x4063*x4067))+((x4057*x4064))+(((-1.0)*r02*sj5*x4067)));
evalcond[4]=((1.0)+(((-1.0)*x4064*x4067))+(((-1.0)*r01*x4059*x4068))+(((-1.0)*r00*x4063*x4068))+(((-1.0)*r02*x4069))+((x4058*x4066)));
evalcond[5]=((1.0)+(((-1.0)*r11*x4059*x4067))+(((-1.0)*x4062*x4068))+((x4057*x4060))+(((-1.0)*r12*sj5*x4067))+(((-1.0)*r10*x4063*x4067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4070=((1.0)*sj6);
CheckValue<IkReal> x4071 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4070))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4071.valid){
continue;
}
CheckValue<IkReal> x4072=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4070)))),-1);
if(!x4072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4071.value)+(((1.5707963267949)*(x4072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4073=IKsin(j4);
IkReal x4074=IKcos(j4);
IkReal x4075=(cj5*cj6);
IkReal x4076=(r11*sj6);
IkReal x4077=(cj6*r20);
IkReal x4078=(cj6*r10);
IkReal x4079=(cj5*sj6);
IkReal x4080=(r01*sj6);
IkReal x4081=(r21*sj6);
IkReal x4082=(cj6*r00);
IkReal x4083=((1.0)*x4074);
IkReal x4084=((1.0)*x4073);
IkReal x4085=(sj5*x4084);
evalcond[0]=(((x4074*x4077))+(((-1.0)*r22*x4085))+(((-1.0)*r21*x4075*x4084))+(((-1.0)*x4081*x4083))+(((-1.0)*r20*x4079*x4084)));
evalcond[1]=(((x4074*x4078))+(((-1.0)*r10*x4079*x4084))+(((-1.0)*r12*x4085))+(((-1.0)*r11*x4075*x4084))+(((-1.0)*x4076*x4083)));
evalcond[2]=((((-1.0)*r22*sj5*x4083))+(((-1.0)*r21*x4075*x4083))+(((-1.0)*x4077*x4084))+(((-1.0)*r20*x4079*x4083))+((x4073*x4081)));
evalcond[3]=((((-1.0)*r02*sj5*x4083))+(((-1.0)*x4082*x4084))+(((-1.0)*r01*x4075*x4083))+(((-1.0)*r00*x4079*x4083))+((x4073*x4080)));
evalcond[4]=((1.0)+(((-1.0)*r02*x4085))+(((-1.0)*r01*x4075*x4084))+(((-1.0)*r00*x4079*x4084))+(((-1.0)*x4080*x4083))+((x4074*x4082)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x4083))+(((-1.0)*r10*x4079*x4083))+((x4073*x4076))+(((-1.0)*r11*x4075*x4083))+(((-1.0)*x4078*x4084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4086=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4086.valid){
continue;
}
CheckValue<IkReal> x4087 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4086.value)))+(x4087.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4088=IKsin(j4);
IkReal x4089=IKcos(j4);
IkReal x4090=(cj5*cj6);
IkReal x4091=(r11*sj6);
IkReal x4092=(cj6*r20);
IkReal x4093=(cj6*r10);
IkReal x4094=(cj5*sj6);
IkReal x4095=(r01*sj6);
IkReal x4096=(r21*sj6);
IkReal x4097=(cj6*r00);
IkReal x4098=((1.0)*x4089);
IkReal x4099=((1.0)*x4088);
IkReal x4100=(sj5*x4099);
evalcond[0]=((((-1.0)*r22*x4100))+(((-1.0)*r21*x4090*x4099))+(((-1.0)*r20*x4094*x4099))+((x4089*x4092))+(((-1.0)*x4096*x4098)));
evalcond[1]=((((-1.0)*r11*x4090*x4099))+(((-1.0)*r12*x4100))+(((-1.0)*r10*x4094*x4099))+((x4089*x4093))+(((-1.0)*x4091*x4098)));
evalcond[2]=(((x4088*x4096))+(((-1.0)*r21*x4090*x4098))+(((-1.0)*r22*sj5*x4098))+(((-1.0)*r20*x4094*x4098))+(((-1.0)*x4092*x4099)));
evalcond[3]=(((x4088*x4095))+(((-1.0)*r01*x4090*x4098))+(((-1.0)*r02*sj5*x4098))+(((-1.0)*x4097*x4099))+(((-1.0)*r00*x4094*x4098)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4090*x4099))+((x4089*x4097))+(((-1.0)*x4095*x4098))+(((-1.0)*r00*x4094*x4099))+(((-1.0)*r02*x4100)));
evalcond[5]=((1.0)+((x4088*x4091))+(((-1.0)*r11*x4090*x4098))+(((-1.0)*r12*sj5*x4098))+(((-1.0)*x4093*x4099))+(((-1.0)*r10*x4094*x4098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4101=((1.0)*cj5);
IkReal x4102=((0.01)*cj5);
IkReal x4103=(cj6*r11);
IkReal x4104=(r20*sj6);
IkReal x4105=((0.01)*sj5);
IkReal x4106=(cj6*r01);
IkReal x4107=((0.37429)*cj5);
IkReal x4108=((0.37429)*sj5);
IkReal x4109=(cj6*r21);
IkReal x4110=(r10*sj5*sj6);
IkReal x4111=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x4105))+((r22*x4107))+(((-1.0)*x4104*x4108))+(((-1.0)*pz))+(((-1.0)*x4108*x4109))+((x4102*x4104))+((x4102*x4109)));
evalcond[2]=((((-1.0)*x4106*x4108))+(((-1.0)*r00*sj6*x4108))+(((-1.0)*px))+((r00*sj6*x4102))+((r02*x4105))+((r02*x4107))+((x4102*x4106)));
evalcond[3]=((0.29542)+(((-1.0)*py))+(((-1.0)*r10*sj6*x4108))+((r12*x4105))+((r12*x4107))+(((-1.0)*x4103*x4108))+((r10*sj6*x4102))+((x4102*x4103)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4101))+((sj5*x4104))+((sj5*x4109)));
evalcond[5]=((((-1.0)*r12*x4101))+((sj5*x4103))+x4110);
evalcond[6]=(((sj5*x4106))+x4111+(((-1.0)*r02*x4101)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4112=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4112;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4113=((1.0)*sj5);
IkReal x4114=(((cj5*r22))+(((-1.0)*cj6*r21*x4113))+(((-1.0)*r20*sj6*x4113)));
j4eval[0]=x4114;
j4eval[1]=IKsign(x4114);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4115=cj6*cj6;
IkReal x4116=cj5*cj5;
IkReal x4117=r10*r10;
IkReal x4118=r11*r11;
IkReal x4119=r12*r12;
IkReal x4120=(r10*sj6);
IkReal x4121=(r12*sj5);
IkReal x4122=((2.0)*cj6*r11);
IkReal x4123=((1.0)*x4117);
IkReal x4124=(x4115*x4118);
IkReal x4125=((((-1.0)*x4116*x4120*x4122))+((x4120*x4122))+(((-1.0)*x4116*x4124))+((x4116*x4119))+((x4115*x4116*x4117))+(((-1.0)*cj5*x4121*x4122))+(((-1.0)*x4116*x4123))+x4124+(((-1.0)*x4115*x4123))+(((-2.0)*cj5*x4120*x4121))+(((-1.0)*x4119))+(((-1.0)*x4118)));
j4eval[0]=x4125;
j4eval[1]=((IKabs((((cj5*x4120))+((cj5*cj6*r11))+x4121)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4126=cj6*cj6;
IkReal x4127=cj5*cj5;
IkReal x4128=r10*r10;
IkReal x4129=r11*r11;
IkReal x4130=r12*r12;
IkReal x4131=(r10*sj6);
IkReal x4132=(r12*sj5);
IkReal x4133=((2.0)*cj6*r11);
IkReal x4134=(x4126*x4129);
IkReal x4135=(x4127*x4128);
CheckValue<IkReal> x4136=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4126*x4128))+(((-1.0)*x4127*x4134))+(((-1.0)*cj5*x4132*x4133))+((x4131*x4133))+(((-1.0)*x4135))+(((-1.0)*x4130))+(((-1.0)*x4127*x4131*x4133))+((x4127*x4130))+x4134+((x4126*x4135))+(((-2.0)*cj5*x4131*x4132))+(((-1.0)*x4129)))),-1);
if(!x4136.valid){
continue;
}
CheckValue<IkReal> x4137 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*cj6*r11))+x4132+((cj5*x4131))),IKFAST_ATAN2_MAGTHRESH);
if(!x4137.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4136.value)))+(x4137.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4138=IKsin(j4);
IkReal x4139=IKcos(j4);
IkReal x4140=(cj5*cj6);
IkReal x4141=(r11*sj6);
IkReal x4142=(cj6*r20);
IkReal x4143=(cj6*r10);
IkReal x4144=(cj5*sj6);
IkReal x4145=(r01*sj6);
IkReal x4146=(r21*sj6);
IkReal x4147=(cj6*r00);
IkReal x4148=((1.0)*x4139);
IkReal x4149=((1.0)*x4138);
IkReal x4150=(sj5*x4149);
evalcond[0]=(((x4139*x4142))+(((-1.0)*x4146*x4148))+(((-1.0)*r21*x4140*x4149))+(((-1.0)*r20*x4144*x4149))+(((-1.0)*r22*x4150)));
evalcond[1]=(((x4139*x4143))+(((-1.0)*r11*x4140*x4149))+(((-1.0)*x4141*x4148))+(((-1.0)*r12*x4150))+(((-1.0)*r10*x4144*x4149)));
evalcond[2]=((((-1.0)*r22*sj5*x4148))+(((-1.0)*x4142*x4149))+(((-1.0)*r21*x4140*x4148))+((x4138*x4146))+(((-1.0)*r20*x4144*x4148)));
evalcond[3]=((((-1.0)*x4147*x4149))+((x4138*x4145))+(((-1.0)*r00*x4144*x4148))+(((-1.0)*r01*x4140*x4148))+(((-1.0)*r02*sj5*x4148)));
evalcond[4]=((-1.0)+((x4139*x4147))+(((-1.0)*r02*x4150))+(((-1.0)*r00*x4144*x4149))+(((-1.0)*r01*x4140*x4149))+(((-1.0)*x4145*x4148)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x4140*x4148))+((x4138*x4141))+(((-1.0)*x4143*x4149))+(((-1.0)*r12*sj5*x4148))+(((-1.0)*r10*x4144*x4148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4151=((1.0)*sj5);
CheckValue<IkReal> x4152 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4152.valid){
continue;
}
CheckValue<IkReal> x4153=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x4151))+(((-1.0)*cj6*r21*x4151)))),-1);
if(!x4153.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4152.value)+(((1.5707963267949)*(x4153.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4154=IKsin(j4);
IkReal x4155=IKcos(j4);
IkReal x4156=(cj5*cj6);
IkReal x4157=(r11*sj6);
IkReal x4158=(cj6*r20);
IkReal x4159=(cj6*r10);
IkReal x4160=(cj5*sj6);
IkReal x4161=(r01*sj6);
IkReal x4162=(r21*sj6);
IkReal x4163=(cj6*r00);
IkReal x4164=((1.0)*x4155);
IkReal x4165=((1.0)*x4154);
IkReal x4166=(sj5*x4165);
evalcond[0]=(((x4155*x4158))+(((-1.0)*r20*x4160*x4165))+(((-1.0)*x4162*x4164))+(((-1.0)*r21*x4156*x4165))+(((-1.0)*r22*x4166)));
evalcond[1]=(((x4155*x4159))+(((-1.0)*r12*x4166))+(((-1.0)*r11*x4156*x4165))+(((-1.0)*r10*x4160*x4165))+(((-1.0)*x4157*x4164)));
evalcond[2]=(((x4154*x4162))+(((-1.0)*r20*x4160*x4164))+(((-1.0)*x4158*x4165))+(((-1.0)*r21*x4156*x4164))+(((-1.0)*r22*sj5*x4164)));
evalcond[3]=(((x4154*x4161))+(((-1.0)*x4163*x4165))+(((-1.0)*r00*x4160*x4164))+(((-1.0)*r01*x4156*x4164))+(((-1.0)*r02*sj5*x4164)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x4166))+(((-1.0)*x4161*x4164))+(((-1.0)*r00*x4160*x4165))+((x4155*x4163))+(((-1.0)*r01*x4156*x4165)));
evalcond[5]=((-1.0)+(((-1.0)*x4159*x4165))+(((-1.0)*r12*sj5*x4164))+(((-1.0)*r11*x4156*x4164))+(((-1.0)*r10*x4160*x4164))+((x4154*x4157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4167 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4167.valid){
continue;
}
CheckValue<IkReal> x4168=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4167.value)+(((1.5707963267949)*(x4168.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4169=IKsin(j4);
IkReal x4170=IKcos(j4);
IkReal x4171=(cj5*cj6);
IkReal x4172=(r11*sj6);
IkReal x4173=(cj6*r20);
IkReal x4174=(cj6*r10);
IkReal x4175=(cj5*sj6);
IkReal x4176=(r01*sj6);
IkReal x4177=(r21*sj6);
IkReal x4178=(cj6*r00);
IkReal x4179=((1.0)*x4170);
IkReal x4180=((1.0)*x4169);
IkReal x4181=(sj5*x4180);
evalcond[0]=((((-1.0)*x4177*x4179))+((x4170*x4173))+(((-1.0)*r21*x4171*x4180))+(((-1.0)*r20*x4175*x4180))+(((-1.0)*r22*x4181)));
evalcond[1]=((((-1.0)*r12*x4181))+(((-1.0)*x4172*x4179))+((x4170*x4174))+(((-1.0)*r11*x4171*x4180))+(((-1.0)*r10*x4175*x4180)));
evalcond[2]=((((-1.0)*r22*sj5*x4179))+((x4169*x4177))+(((-1.0)*r20*x4175*x4179))+(((-1.0)*r21*x4171*x4179))+(((-1.0)*x4173*x4180)));
evalcond[3]=((((-1.0)*r01*x4171*x4179))+((x4169*x4176))+(((-1.0)*r02*sj5*x4179))+(((-1.0)*x4178*x4180))+(((-1.0)*r00*x4175*x4179)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4171*x4180))+(((-1.0)*x4176*x4179))+((x4170*x4178))+(((-1.0)*r02*x4181))+(((-1.0)*r00*x4175*x4180)));
evalcond[5]=((-1.0)+((x4169*x4172))+(((-1.0)*r12*sj5*x4179))+(((-1.0)*x4174*x4180))+(((-1.0)*r10*x4175*x4179))+(((-1.0)*r11*x4171*x4179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4182=cj6*cj6;
IkReal x4183=cj5*cj5;
IkReal x4184=((1.0)*r11);
IkReal x4185=(cj5*sj0);
IkReal x4186=(cj6*r21);
IkReal x4187=(r22*sj5);
IkReal x4188=(r20*sj6);
IkReal x4189=(r12*r22);
IkReal x4190=((1.0)*sj6);
IkReal x4191=(r21*x4182);
IkReal x4192=(r10*x4183);
IkReal x4193=(r11*x4183);
IkReal x4194=(r20*x4182);
IkReal x4195=(cj5*r12*sj5);
CheckValue<IkReal> x4196 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4190))+((cj6*r20*sj0)))),(((sj0*x4187))+((x4185*x4186))+((x4185*x4188))),IKFAST_ATAN2_MAGTHRESH);
if(!x4196.valid){
continue;
}
CheckValue<IkReal> x4197=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj6*x4187))+((r20*x4192))+((r11*r21))+((x4186*x4195))+((x4191*x4193))+((cj6*x4188*x4193))+((sj6*x4186*x4192))+(((-1.0)*r10*x4186*x4190))+((r10*x4194))+x4189+(((-1.0)*cj6*x4184*x4188))+((x4188*x4195))+((cj5*cj6*r11*x4187))+(((-1.0)*x4183*x4189))+(((-1.0)*x4184*x4191))+(((-1.0)*x4192*x4194)))),-1);
if(!x4197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4196.value)+(((1.5707963267949)*(x4197.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4198=IKsin(j4);
IkReal x4199=IKcos(j4);
IkReal x4200=(cj5*cj6);
IkReal x4201=(r11*sj6);
IkReal x4202=(cj6*r20);
IkReal x4203=(cj6*r10);
IkReal x4204=(cj5*sj6);
IkReal x4205=(r01*sj6);
IkReal x4206=(r21*sj6);
IkReal x4207=(cj6*r00);
IkReal x4208=((1.0)*x4199);
IkReal x4209=((1.0)*x4198);
IkReal x4210=(sj5*x4209);
evalcond[0]=(((x4199*x4202))+(((-1.0)*x4206*x4208))+(((-1.0)*r20*x4204*x4209))+(((-1.0)*r22*x4210))+(((-1.0)*r21*x4200*x4209)));
evalcond[1]=(((x4198*x4206))+(((-1.0)*r22*sj5*x4208))+(((-1.0)*r20*x4204*x4208))+(((-1.0)*x4202*x4209))+(((-1.0)*r21*x4200*x4208)));
evalcond[2]=(sj0+((x4199*x4207))+(((-1.0)*r02*x4210))+(((-1.0)*r01*x4200*x4209))+(((-1.0)*r00*x4204*x4209))+(((-1.0)*x4205*x4208)));
evalcond[3]=(((x4198*x4205))+cj0+(((-1.0)*x4207*x4209))+(((-1.0)*r01*x4200*x4208))+(((-1.0)*r00*x4204*x4208))+(((-1.0)*r02*sj5*x4208)));
evalcond[4]=(((x4198*x4201))+(((-1.0)*r10*x4204*x4208))+sj0+(((-1.0)*r12*sj5*x4208))+(((-1.0)*r11*x4200*x4208))+(((-1.0)*x4203*x4209)));
evalcond[5]=((((-1.0)*r10*x4204*x4209))+((x4199*x4203))+(((-1.0)*x4201*x4208))+(((-1.0)*r12*x4210))+(((-1.0)*r11*x4200*x4209))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4211=cj5*cj5;
IkReal x4212=cj6*cj6;
IkReal x4213=(r22*sj5);
IkReal x4214=(cj6*r21);
IkReal x4215=(r20*sj6);
IkReal x4216=((1.0)*sj6);
IkReal x4217=(cj0*cj5);
IkReal x4218=(r02*r22);
IkReal x4219=(cj6*r01);
IkReal x4220=(r00*sj6);
IkReal x4221=(cj5*r02*sj5);
IkReal x4222=(r01*x4211);
IkReal x4223=(r21*x4212);
IkReal x4224=(r00*r20*x4211);
CheckValue<IkReal> x4225 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x4216)))),(((x4214*x4217))+((x4215*x4217))+((cj0*x4213))),IKFAST_ATAN2_MAGTHRESH);
if(!x4225.valid){
continue;
}
CheckValue<IkReal> x4226=IKPowWithIntegerCheck(IKsign((((x4211*x4215*x4219))+((cj5*x4213*x4219))+(((-1.0)*r00*x4214*x4216))+(((-1.0)*x4211*x4218))+((x4211*x4214*x4220))+((cj5*x4213*x4220))+((r01*r21))+(((-1.0)*x4212*x4224))+x4218+x4224+((x4222*x4223))+((r00*r20*x4212))+(((-1.0)*r01*x4223))+((x4215*x4221))+((x4214*x4221))+(((-1.0)*x4215*x4219)))),-1);
if(!x4226.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4225.value)+(((1.5707963267949)*(x4226.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4227=IKsin(j4);
IkReal x4228=IKcos(j4);
IkReal x4229=(cj5*cj6);
IkReal x4230=(r11*sj6);
IkReal x4231=(cj6*r20);
IkReal x4232=(cj6*r10);
IkReal x4233=(cj5*sj6);
IkReal x4234=(r01*sj6);
IkReal x4235=(r21*sj6);
IkReal x4236=(cj6*r00);
IkReal x4237=((1.0)*x4228);
IkReal x4238=((1.0)*x4227);
IkReal x4239=(sj5*x4238);
evalcond[0]=((((-1.0)*r22*x4239))+(((-1.0)*r20*x4233*x4238))+((x4228*x4231))+(((-1.0)*r21*x4229*x4238))+(((-1.0)*x4235*x4237)));
evalcond[1]=((((-1.0)*x4231*x4238))+(((-1.0)*r22*sj5*x4237))+((x4227*x4235))+(((-1.0)*r20*x4233*x4237))+(((-1.0)*r21*x4229*x4237)));
evalcond[2]=(sj0+(((-1.0)*r01*x4229*x4238))+(((-1.0)*r02*x4239))+((x4228*x4236))+(((-1.0)*x4234*x4237))+(((-1.0)*r00*x4233*x4238)));
evalcond[3]=((((-1.0)*r01*x4229*x4237))+cj0+((x4227*x4234))+(((-1.0)*x4236*x4238))+(((-1.0)*r02*sj5*x4237))+(((-1.0)*r00*x4233*x4237)));
evalcond[4]=((((-1.0)*r10*x4233*x4237))+sj0+(((-1.0)*x4232*x4238))+(((-1.0)*r12*sj5*x4237))+((x4227*x4230))+(((-1.0)*r11*x4229*x4237)));
evalcond[5]=((((-1.0)*r10*x4233*x4238))+(((-1.0)*r12*x4239))+(((-1.0)*r11*x4229*x4238))+((x4228*x4232))+(((-1.0)*x4230*x4237))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4240=(cj5*sj0);
IkReal x4241=((1.0)*sj5);
CheckValue<IkReal> x4242=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x4241))+(((-1.0)*r10*sj6*x4241)))),-1);
if(!x4242.valid){
continue;
}
CheckValue<IkReal> x4243 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r22*sj0*sj5))+((r20*sj6*x4240))+((cj6*r21*x4240))),IKFAST_ATAN2_MAGTHRESH);
if(!x4243.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4242.value)))+(x4243.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4244=IKsin(j4);
IkReal x4245=IKcos(j4);
IkReal x4246=(cj5*cj6);
IkReal x4247=(r11*sj6);
IkReal x4248=(cj6*r20);
IkReal x4249=(cj6*r10);
IkReal x4250=(cj5*sj6);
IkReal x4251=(r01*sj6);
IkReal x4252=(r21*sj6);
IkReal x4253=(cj6*r00);
IkReal x4254=((1.0)*x4245);
IkReal x4255=((1.0)*x4244);
IkReal x4256=(sj5*x4255);
evalcond[0]=((((-1.0)*x4252*x4254))+(((-1.0)*r22*x4256))+((x4245*x4248))+(((-1.0)*r21*x4246*x4255))+(((-1.0)*r20*x4250*x4255)));
evalcond[1]=(((x4244*x4252))+(((-1.0)*r22*sj5*x4254))+(((-1.0)*r21*x4246*x4254))+(((-1.0)*x4248*x4255))+(((-1.0)*r20*x4250*x4254)));
evalcond[2]=(sj0+((x4245*x4253))+(((-1.0)*x4251*x4254))+(((-1.0)*r00*x4250*x4255))+(((-1.0)*r01*x4246*x4255))+(((-1.0)*r02*x4256)));
evalcond[3]=((((-1.0)*x4253*x4255))+cj0+((x4244*x4251))+(((-1.0)*r00*x4250*x4254))+(((-1.0)*r01*x4246*x4254))+(((-1.0)*r02*sj5*x4254)));
evalcond[4]=(sj0+(((-1.0)*r10*x4250*x4254))+((x4244*x4247))+(((-1.0)*r11*x4246*x4254))+(((-1.0)*x4249*x4255))+(((-1.0)*r12*sj5*x4254)));
evalcond[5]=((((-1.0)*r10*x4250*x4255))+(((-1.0)*x4247*x4254))+((x4245*x4249))+(((-1.0)*r11*x4246*x4255))+(((-1.0)*cj0))+(((-1.0)*r12*x4256)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4257=(r10*sj6);
IkReal x4258=((0.37429)*sj5);
IkReal x4259=(cj5*r22);
IkReal x4260=((0.01)*cj5);
IkReal x4261=(cj6*r11);
IkReal x4262=(r00*sj6);
IkReal x4263=(r20*sj6);
IkReal x4264=((0.01)*sj5);
IkReal x4265=(cj6*r01);
IkReal x4266=((0.37429)*cj5);
IkReal x4267=(cj6*r21);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((0.36442)+(((-1.0)*x4258*x4263))+(((-1.0)*x4258*x4267))+(((-1.0)*pz))+(((0.37429)*x4259))+((x4260*x4267))+((x4260*x4263))+((r22*x4264)));
evalcond[2]=(((r02*x4266))+((r02*x4264))+(((-1.0)*x4258*x4262))+(((-1.0)*x4258*x4265))+(((-1.0)*px))+((x4260*x4265))+((x4260*x4262)));
evalcond[3]=((((-1.0)*x4257*x4258))+((r12*x4264))+((r12*x4266))+((x4257*x4260))+(((-1.0)*x4258*x4261))+(((-1.0)*py))+((x4260*x4261)));
evalcond[4]=(((sj5*x4263))+((sj5*x4267))+(((-1.0)*x4259)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4268=(cj6*sj5);
IkReal x4269=(sj5*sj6);
IkReal x4270=((1.0)*cj5);
if( IKabs((((r11*x4268))+(((-1.0)*r12*x4270))+((r10*x4269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x4268))+(((-1.0)*r02*x4270))+((r00*x4269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x4268))+(((-1.0)*r12*x4270))+((r10*x4269))))+IKsqr((((r01*x4268))+(((-1.0)*r02*x4270))+((r00*x4269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x4268))+(((-1.0)*r12*x4270))+((r10*x4269))), (((r01*x4268))+(((-1.0)*r02*x4270))+((r00*x4269))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4271=(cj6*sj5);
IkReal x4272=(sj5*sj6);
IkReal x4273=((1.0)*cj5);
evalcond[0]=((((-1.0)*r12*x4273))+((r11*x4271))+(((-1.0)*(IKsin(j0))))+((r10*x4272)));
evalcond[1]=(((r00*x4272))+(((-1.0)*r02*x4273))+(((-1.0)*(IKcos(j0))))+((r01*x4271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4274=((1.0)*cj5);
IkReal x4275=((1.0)*sj5);
IkReal x4276=(((cj5*r12))+(((-1.0)*r10*sj6*x4275))+(((-1.0)*cj6*r11*x4275)));
j4eval[0]=x4276;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs(((((-1.0)*r02*x4275))+(((-1.0)*r00*sj6*x4274))+(((-1.0)*cj6*r01*x4274))))));
j4eval[2]=IKsign(x4276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4277=(r20*sj0);
IkReal x4278=((1.0)*sj5);
IkReal x4279=(r21*sj0);
IkReal x4280=(((cj5*r12))+(((-1.0)*r10*sj6*x4278))+(((-1.0)*cj6*r11*x4278)));
j4eval[0]=x4280;
j4eval[1]=IKsign(x4280);
j4eval[2]=((IKabs((((cj6*x4277))+(((-1.0)*sj6*x4279)))))+(IKabs((((cj5*cj6*x4279))+((cj5*sj6*x4277))+((r22*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4281=cj5*cj5;
IkReal x4282=cj6*cj6;
IkReal x4283=r22*r22;
IkReal x4284=r21*r21;
IkReal x4285=r20*r20;
IkReal x4286=(r22*sj5);
IkReal x4287=(r21*sj6);
IkReal x4288=(cj6*r20);
IkReal x4289=(cj5*r20*sj6);
IkReal x4290=((1.0)*x4281);
IkReal x4291=(cj5*cj6*r21);
IkReal x4292=(x4282*x4284);
IkReal x4293=(x4282*x4285);
IkReal x4294=(((x4281*x4283))+(((-1.0)*x4290*x4292))+(((2.0)*x4287*x4288))+(((-1.0)*x4293))+(((-1.0)*x4285*x4290))+x4292+((x4281*x4293))+(((-1.0)*x4283))+(((-1.0)*x4284))+(((-2.0)*x4286*x4289))+(((-2.0)*x4281*x4287*x4288))+(((-2.0)*x4286*x4291)));
j4eval[0]=x4294;
j4eval[1]=IKsign(x4294);
j4eval[2]=((IKabs((x4288+(((-1.0)*x4287)))))+(IKabs((x4291+x4286+x4289))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4295=((1.0)*cj5);
IkReal x4296=((0.01)*cj5);
IkReal x4297=(cj6*r11);
IkReal x4298=(r20*sj6);
IkReal x4299=((0.01)*sj5);
IkReal x4300=(cj6*r01);
IkReal x4301=((0.37429)*cj5);
IkReal x4302=((0.37429)*sj5);
IkReal x4303=(cj6*r21);
IkReal x4304=(r10*sj5*sj6);
IkReal x4305=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.36442)+((r22*x4301))+(((-1.0)*pz))+((x4296*x4298))+((r22*x4299))+(((-1.0)*x4298*x4302))+((x4296*x4303))+(((-1.0)*x4302*x4303)));
evalcond[2]=(((r02*x4301))+((r00*sj6*x4296))+(((-1.0)*px))+(((-1.0)*r00*sj6*x4302))+((x4296*x4300))+(((-1.0)*x4300*x4302))+((r02*x4299)));
evalcond[3]=(((r12*x4301))+((r10*sj6*x4296))+(((-1.0)*x4297*x4302))+(((-1.0)*py))+(((-1.0)*r10*sj6*x4302))+((x4296*x4297))+((r12*x4299)));
evalcond[4]=((((-1.0)*r22*x4295))+((sj5*x4298))+((sj5*x4303)));
evalcond[5]=((((-1.0)*r12*x4295))+x4304+((sj5*x4297)));
evalcond[6]=((-1.0)+x4305+(((-1.0)*r02*x4295))+((sj5*x4300)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4306=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4306;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x4306);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4307=((1.0)*sj6);
IkReal x4308=((((-1.0)*r00*sj5*x4307))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x4308;
j4eval[1]=IKsign(x4308);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4307))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4309=cj5*cj5;
IkReal x4310=cj6*cj6;
IkReal x4311=r22*r22;
IkReal x4312=r21*r21;
IkReal x4313=r20*r20;
IkReal x4314=(r22*sj5);
IkReal x4315=(r21*sj6);
IkReal x4316=(cj6*r20);
IkReal x4317=(cj5*r20*sj6);
IkReal x4318=((1.0)*x4309);
IkReal x4319=(cj5*cj6*r21);
IkReal x4320=(x4310*x4312);
IkReal x4321=(x4310*x4313);
IkReal x4322=((((-2.0)*x4314*x4317))+(((-2.0)*x4314*x4319))+((x4309*x4321))+(((-2.0)*x4309*x4315*x4316))+(((-1.0)*x4321))+(((2.0)*x4315*x4316))+x4320+(((-1.0)*x4311))+(((-1.0)*x4312))+((x4309*x4311))+(((-1.0)*x4313*x4318))+(((-1.0)*x4318*x4320)));
j4eval[0]=x4322;
j4eval[1]=IKsign(x4322);
j4eval[2]=((IKabs((x4316+(((-1.0)*x4315)))))+(IKabs((x4314+x4317+x4319))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4323=cj5*cj5;
IkReal x4324=cj6*cj6;
IkReal x4325=r22*r22;
IkReal x4326=r21*r21;
IkReal x4327=r20*r20;
IkReal x4328=(r21*sj6);
IkReal x4329=(cj6*r20);
IkReal x4330=(cj5*cj6*r21);
IkReal x4331=((1.0)*x4323);
IkReal x4332=(cj5*r20*sj6);
IkReal x4333=((2.0)*r22*sj5);
IkReal x4334=(x4324*x4326);
IkReal x4335=(x4324*x4327);
CheckValue<IkReal> x4336=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4332*x4333))+(((-1.0)*x4330*x4333))+(((2.0)*x4328*x4329))+(((-1.0)*x4335))+(((-1.0)*x4331*x4334))+(((-1.0)*x4327*x4331))+(((-1.0)*x4325))+(((-1.0)*x4326))+((x4323*x4335))+((x4323*x4325))+(((-2.0)*x4323*x4328*x4329))+x4334)),-1);
if(!x4336.valid){
continue;
}
CheckValue<IkReal> x4337 = IKatan2WithCheck(IkReal(((((-1.0)*x4328))+x4329)),(((r22*sj5))+x4332+x4330),IKFAST_ATAN2_MAGTHRESH);
if(!x4337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4336.value)))+(x4337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4338=IKsin(j4);
IkReal x4339=IKcos(j4);
IkReal x4340=(cj5*cj6);
IkReal x4341=(r11*sj6);
IkReal x4342=(cj6*r20);
IkReal x4343=(cj5*sj6);
IkReal x4344=(cj6*r10);
IkReal x4345=(r01*sj6);
IkReal x4346=(r21*sj6);
IkReal x4347=(cj6*r00);
IkReal x4348=((1.0)*x4339);
IkReal x4349=((1.0)*x4338);
IkReal x4350=(sj5*x4349);
evalcond[0]=((((-1.0)*x4346*x4348))+((x4339*x4342))+(((-1.0)*r22*x4350))+(((-1.0)*r21*x4340*x4349))+(((-1.0)*r20*x4343*x4349)));
evalcond[1]=((((-1.0)*r00*x4343*x4349))+(((-1.0)*r02*x4350))+((x4339*x4347))+(((-1.0)*r01*x4340*x4349))+(((-1.0)*x4345*x4348)));
evalcond[2]=((((-1.0)*r00*x4343*x4348))+(((-1.0)*r01*x4340*x4348))+(((-1.0)*r02*sj5*x4348))+((x4338*x4345))+(((-1.0)*x4347*x4349)));
evalcond[3]=((((-1.0)*x4344*x4349))+((x4338*x4341))+(((-1.0)*r12*sj5*x4348))+(((-1.0)*r10*x4343*x4348))+(((-1.0)*r11*x4340*x4348)));
evalcond[4]=((-1.0)+((x4339*x4344))+(((-1.0)*x4341*x4348))+(((-1.0)*r12*x4350))+(((-1.0)*r10*x4343*x4349))+(((-1.0)*r11*x4340*x4349)));
evalcond[5]=((-1.0)+(((-1.0)*x4342*x4349))+((x4338*x4346))+(((-1.0)*r22*sj5*x4348))+(((-1.0)*r21*x4340*x4348))+(((-1.0)*r20*x4343*x4348)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4351=((1.0)*sj6);
CheckValue<IkReal> x4352=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x4351))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x4352.valid){
continue;
}
CheckValue<IkReal> x4353 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4351))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4352.value)))+(x4353.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4354=IKsin(j4);
IkReal x4355=IKcos(j4);
IkReal x4356=(cj5*cj6);
IkReal x4357=(r11*sj6);
IkReal x4358=(cj6*r20);
IkReal x4359=(cj5*sj6);
IkReal x4360=(cj6*r10);
IkReal x4361=(r01*sj6);
IkReal x4362=(r21*sj6);
IkReal x4363=(cj6*r00);
IkReal x4364=((1.0)*x4355);
IkReal x4365=((1.0)*x4354);
IkReal x4366=(sj5*x4365);
evalcond[0]=((((-1.0)*r22*x4366))+(((-1.0)*x4362*x4364))+((x4355*x4358))+(((-1.0)*r21*x4356*x4365))+(((-1.0)*r20*x4359*x4365)));
evalcond[1]=((((-1.0)*x4361*x4364))+(((-1.0)*r01*x4356*x4365))+((x4355*x4363))+(((-1.0)*r00*x4359*x4365))+(((-1.0)*r02*x4366)));
evalcond[2]=((((-1.0)*r01*x4356*x4364))+((x4354*x4361))+(((-1.0)*r00*x4359*x4364))+(((-1.0)*r02*sj5*x4364))+(((-1.0)*x4363*x4365)));
evalcond[3]=((((-1.0)*r12*sj5*x4364))+(((-1.0)*x4360*x4365))+(((-1.0)*r11*x4356*x4364))+((x4354*x4357))+(((-1.0)*r10*x4359*x4364)));
evalcond[4]=((-1.0)+(((-1.0)*x4357*x4364))+(((-1.0)*r11*x4356*x4365))+((x4355*x4360))+(((-1.0)*r12*x4366))+(((-1.0)*r10*x4359*x4365)));
evalcond[5]=((-1.0)+((x4354*x4362))+(((-1.0)*x4358*x4365))+(((-1.0)*r22*sj5*x4364))+(((-1.0)*r21*x4356*x4364))+(((-1.0)*r20*x4359*x4364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4367=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4367.valid){
continue;
}
CheckValue<IkReal> x4368 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x4368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4367.value)))+(x4368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4369=IKsin(j4);
IkReal x4370=IKcos(j4);
IkReal x4371=(cj5*cj6);
IkReal x4372=(r11*sj6);
IkReal x4373=(cj6*r20);
IkReal x4374=(cj5*sj6);
IkReal x4375=(cj6*r10);
IkReal x4376=(r01*sj6);
IkReal x4377=(r21*sj6);
IkReal x4378=(cj6*r00);
IkReal x4379=((1.0)*x4370);
IkReal x4380=((1.0)*x4369);
IkReal x4381=(sj5*x4380);
evalcond[0]=((((-1.0)*r20*x4374*x4380))+((x4370*x4373))+(((-1.0)*x4377*x4379))+(((-1.0)*r22*x4381))+(((-1.0)*r21*x4371*x4380)));
evalcond[1]=(((x4370*x4378))+(((-1.0)*r02*x4381))+(((-1.0)*r00*x4374*x4380))+(((-1.0)*x4376*x4379))+(((-1.0)*r01*x4371*x4380)));
evalcond[2]=((((-1.0)*r00*x4374*x4379))+(((-1.0)*x4378*x4380))+(((-1.0)*r01*x4371*x4379))+((x4369*x4376))+(((-1.0)*r02*sj5*x4379)));
evalcond[3]=((((-1.0)*r10*x4374*x4379))+(((-1.0)*r11*x4371*x4379))+(((-1.0)*x4375*x4380))+(((-1.0)*r12*sj5*x4379))+((x4369*x4372)));
evalcond[4]=((-1.0)+((x4370*x4375))+(((-1.0)*r12*x4381))+(((-1.0)*r11*x4371*x4380))+(((-1.0)*r10*x4374*x4380))+(((-1.0)*x4372*x4379)));
evalcond[5]=((-1.0)+(((-1.0)*x4373*x4380))+(((-1.0)*r21*x4371*x4379))+(((-1.0)*r22*sj5*x4379))+(((-1.0)*r20*x4374*x4379))+((x4369*x4377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4382=((1.0)*cj5);
IkReal x4383=((0.01)*cj5);
IkReal x4384=(cj6*r11);
IkReal x4385=(r20*sj6);
IkReal x4386=((0.01)*sj5);
IkReal x4387=(cj6*r01);
IkReal x4388=((0.37429)*cj5);
IkReal x4389=((0.37429)*sj5);
IkReal x4390=(cj6*r21);
IkReal x4391=(r10*sj5*sj6);
IkReal x4392=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.36442)+(((-1.0)*x4389*x4390))+((x4383*x4390))+((x4383*x4385))+((r22*x4388))+((r22*x4386))+(((-1.0)*pz))+(((-1.0)*x4385*x4389)));
evalcond[2]=((((-1.0)*x4387*x4389))+((x4383*x4387))+((r02*x4386))+((r02*x4388))+(((-1.0)*px))+((r00*sj6*x4383))+(((-1.0)*r00*sj6*x4389)));
evalcond[3]=(((r10*sj6*x4383))+((x4383*x4384))+(((-1.0)*py))+(((-1.0)*r10*sj6*x4389))+(((-1.0)*x4384*x4389))+((r12*x4386))+((r12*x4388)));
evalcond[4]=(((sj5*x4390))+(((-1.0)*r22*x4382))+((sj5*x4385)));
evalcond[5]=((((-1.0)*r12*x4382))+x4391+((sj5*x4384)));
evalcond[6]=((1.0)+(((-1.0)*r02*x4382))+x4392+((sj5*x4387)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4393=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4393;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4393);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4394=((1.0)*sj5);
IkReal x4395=((((-1.0)*cj6*r21*x4394))+((cj5*r22))+(((-1.0)*r20*sj6*x4394)));
j4eval[0]=x4395;
j4eval[1]=IKsign(x4395);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4396=cj5*cj5;
IkReal x4397=cj6*cj6;
IkReal x4398=r22*r22;
IkReal x4399=r21*r21;
IkReal x4400=r20*r20;
IkReal x4401=(r22*sj5);
IkReal x4402=(r21*sj6);
IkReal x4403=(cj6*r20);
IkReal x4404=(cj5*r20*sj6);
IkReal x4405=((1.0)*x4396);
IkReal x4406=(cj5*cj6*r21);
IkReal x4407=(x4397*x4399);
IkReal x4408=(x4397*x4400);
IkReal x4409=((((-1.0)*x4398))+(((-1.0)*x4399))+x4407+(((-1.0)*x4400*x4405))+(((-1.0)*x4408))+(((2.0)*x4402*x4403))+(((-2.0)*x4396*x4402*x4403))+((x4396*x4408))+(((-1.0)*x4405*x4407))+((x4396*x4398))+(((-2.0)*x4401*x4404))+(((-2.0)*x4401*x4406)));
j4eval[0]=x4409;
j4eval[1]=IKsign(x4409);
j4eval[2]=((IKabs((x4404+x4406+x4401)))+(IKabs((x4403+(((-1.0)*x4402))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4410=cj5*cj5;
IkReal x4411=cj6*cj6;
IkReal x4412=r22*r22;
IkReal x4413=r21*r21;
IkReal x4414=r20*r20;
IkReal x4415=(r21*sj6);
IkReal x4416=(cj6*r20);
IkReal x4417=(cj5*cj6*r21);
IkReal x4418=((1.0)*x4410);
IkReal x4419=(cj5*r20*sj6);
IkReal x4420=((2.0)*r22*sj5);
IkReal x4421=(x4411*x4413);
IkReal x4422=(x4411*x4414);
CheckValue<IkReal> x4423 = IKatan2WithCheck(IkReal((x4416+(((-1.0)*x4415)))),(x4419+x4417+((r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4423.valid){
continue;
}
CheckValue<IkReal> x4424=IKPowWithIntegerCheck(IKsign((((x4410*x4412))+x4421+((x4410*x4422))+(((-1.0)*x4417*x4420))+(((-1.0)*x4414*x4418))+(((-2.0)*x4410*x4415*x4416))+(((-1.0)*x4413))+(((-1.0)*x4412))+(((-1.0)*x4422))+(((-1.0)*x4419*x4420))+(((-1.0)*x4418*x4421))+(((2.0)*x4415*x4416)))),-1);
if(!x4424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4423.value)+(((1.5707963267949)*(x4424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4425=IKsin(j4);
IkReal x4426=IKcos(j4);
IkReal x4427=(cj5*cj6);
IkReal x4428=(r11*sj6);
IkReal x4429=(cj6*r20);
IkReal x4430=(cj5*sj6);
IkReal x4431=(cj6*r10);
IkReal x4432=(r01*sj6);
IkReal x4433=(r21*sj6);
IkReal x4434=(cj6*r00);
IkReal x4435=((1.0)*x4426);
IkReal x4436=((1.0)*x4425);
IkReal x4437=(sj5*x4436);
evalcond[0]=((((-1.0)*r20*x4430*x4436))+(((-1.0)*x4433*x4435))+((x4426*x4429))+(((-1.0)*r21*x4427*x4436))+(((-1.0)*r22*x4437)));
evalcond[1]=((((-1.0)*r02*x4437))+(((-1.0)*x4432*x4435))+(((-1.0)*r00*x4430*x4436))+(((-1.0)*r01*x4427*x4436))+((x4426*x4434)));
evalcond[2]=((((-1.0)*x4434*x4436))+((x4425*x4432))+(((-1.0)*r00*x4430*x4435))+(((-1.0)*r01*x4427*x4435))+(((-1.0)*r02*sj5*x4435)));
evalcond[3]=(((x4425*x4428))+(((-1.0)*x4431*x4436))+(((-1.0)*r12*sj5*x4435))+(((-1.0)*r10*x4430*x4435))+(((-1.0)*r11*x4427*x4435)));
evalcond[4]=((1.0)+(((-1.0)*x4428*x4435))+(((-1.0)*r12*x4437))+((x4426*x4431))+(((-1.0)*r10*x4430*x4436))+(((-1.0)*r11*x4427*x4436)));
evalcond[5]=((-1.0)+(((-1.0)*r20*x4430*x4435))+(((-1.0)*x4429*x4436))+(((-1.0)*r21*x4427*x4435))+((x4425*x4433))+(((-1.0)*r22*sj5*x4435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4438=((1.0)*sj5);
CheckValue<IkReal> x4439 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x4439.valid){
continue;
}
CheckValue<IkReal> x4440=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x4438))+(((-1.0)*cj6*r21*x4438)))),-1);
if(!x4440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4439.value)+(((1.5707963267949)*(x4440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4441=IKsin(j4);
IkReal x4442=IKcos(j4);
IkReal x4443=(cj5*cj6);
IkReal x4444=(r11*sj6);
IkReal x4445=(cj6*r20);
IkReal x4446=(cj5*sj6);
IkReal x4447=(cj6*r10);
IkReal x4448=(r01*sj6);
IkReal x4449=(r21*sj6);
IkReal x4450=(cj6*r00);
IkReal x4451=((1.0)*x4442);
IkReal x4452=((1.0)*x4441);
IkReal x4453=(sj5*x4452);
evalcond[0]=((((-1.0)*r22*x4453))+((x4442*x4445))+(((-1.0)*x4449*x4451))+(((-1.0)*r20*x4446*x4452))+(((-1.0)*r21*x4443*x4452)));
evalcond[1]=((((-1.0)*r02*x4453))+((x4442*x4450))+(((-1.0)*r01*x4443*x4452))+(((-1.0)*x4448*x4451))+(((-1.0)*r00*x4446*x4452)));
evalcond[2]=(((x4441*x4448))+(((-1.0)*r01*x4443*x4451))+(((-1.0)*r02*sj5*x4451))+(((-1.0)*x4450*x4452))+(((-1.0)*r00*x4446*x4451)));
evalcond[3]=(((x4441*x4444))+(((-1.0)*r10*x4446*x4451))+(((-1.0)*r11*x4443*x4451))+(((-1.0)*x4447*x4452))+(((-1.0)*r12*sj5*x4451)));
evalcond[4]=((1.0)+(((-1.0)*x4444*x4451))+(((-1.0)*r12*x4453))+((x4442*x4447))+(((-1.0)*r10*x4446*x4452))+(((-1.0)*r11*x4443*x4452)));
evalcond[5]=((-1.0)+((x4441*x4449))+(((-1.0)*r20*x4446*x4451))+(((-1.0)*r21*x4443*x4451))+(((-1.0)*r22*sj5*x4451))+(((-1.0)*x4445*x4452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4454 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4454.valid){
continue;
}
CheckValue<IkReal> x4455=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4454.value)+(((1.5707963267949)*(x4455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4456=IKsin(j4);
IkReal x4457=IKcos(j4);
IkReal x4458=(cj5*cj6);
IkReal x4459=(r11*sj6);
IkReal x4460=(cj6*r20);
IkReal x4461=(cj5*sj6);
IkReal x4462=(cj6*r10);
IkReal x4463=(r01*sj6);
IkReal x4464=(r21*sj6);
IkReal x4465=(cj6*r00);
IkReal x4466=((1.0)*x4457);
IkReal x4467=((1.0)*x4456);
IkReal x4468=(sj5*x4467);
evalcond[0]=((((-1.0)*x4464*x4466))+(((-1.0)*r21*x4458*x4467))+(((-1.0)*r22*x4468))+(((-1.0)*r20*x4461*x4467))+((x4457*x4460)));
evalcond[1]=((((-1.0)*r00*x4461*x4467))+(((-1.0)*x4463*x4466))+(((-1.0)*r01*x4458*x4467))+(((-1.0)*r02*x4468))+((x4457*x4465)));
evalcond[2]=((((-1.0)*r00*x4461*x4466))+(((-1.0)*x4465*x4467))+(((-1.0)*r01*x4458*x4466))+(((-1.0)*r02*sj5*x4466))+((x4456*x4463)));
evalcond[3]=((((-1.0)*r12*sj5*x4466))+(((-1.0)*x4462*x4467))+((x4456*x4459))+(((-1.0)*r11*x4458*x4466))+(((-1.0)*r10*x4461*x4466)));
evalcond[4]=((1.0)+(((-1.0)*x4459*x4466))+(((-1.0)*r12*x4468))+(((-1.0)*r11*x4458*x4467))+(((-1.0)*r10*x4461*x4467))+((x4457*x4462)));
evalcond[5]=((-1.0)+(((-1.0)*r22*sj5*x4466))+(((-1.0)*r21*x4458*x4466))+(((-1.0)*r20*x4461*x4466))+(((-1.0)*x4460*x4467))+((x4456*x4464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4469=cj5*cj5;
IkReal x4470=cj6*cj6;
IkReal x4471=r22*r22;
IkReal x4472=r21*r21;
IkReal x4473=r20*r20;
IkReal x4474=(r21*sj6);
IkReal x4475=(cj6*r20);
IkReal x4476=(cj5*cj6*r21);
IkReal x4477=((1.0)*x4469);
IkReal x4478=(cj5*r20*sj6);
IkReal x4479=((2.0)*r22*sj5);
IkReal x4480=(x4470*x4472);
IkReal x4481=(x4470*x4473);
CheckValue<IkReal> x4482 = IKatan2WithCheck(IkReal((x4475+(((-1.0)*x4474)))),(x4478+x4476+((r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4482.valid){
continue;
}
CheckValue<IkReal> x4483=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4481))+(((-2.0)*x4469*x4474*x4475))+x4480+(((-1.0)*x4473*x4477))+(((-1.0)*x4476*x4479))+(((2.0)*x4474*x4475))+(((-1.0)*x4478*x4479))+(((-1.0)*x4477*x4480))+((x4469*x4481))+((x4469*x4471))+(((-1.0)*x4472))+(((-1.0)*x4471)))),-1);
if(!x4483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4482.value)+(((1.5707963267949)*(x4483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4484=IKsin(j4);
IkReal x4485=IKcos(j4);
IkReal x4486=(cj5*cj6);
IkReal x4487=(r11*sj6);
IkReal x4488=(cj6*r20);
IkReal x4489=(cj6*r10);
IkReal x4490=(cj5*sj6);
IkReal x4491=(r21*sj6);
IkReal x4492=(cj6*r00);
IkReal x4493=(r01*sj6);
IkReal x4494=((1.0)*x4485);
IkReal x4495=((1.0)*x4484);
IkReal x4496=(sj5*x4495);
evalcond[0]=((((-1.0)*r20*x4490*x4495))+((x4485*x4488))+(((-1.0)*r21*x4486*x4495))+(((-1.0)*r22*x4496))+(((-1.0)*x4491*x4494)));
evalcond[1]=((((-1.0)*x4492*x4495))+(((-1.0)*r00*x4490*x4494))+(((-1.0)*r02*sj5*x4494))+(((-1.0)*r01*x4486*x4494))+((x4484*x4493)));
evalcond[2]=((((-1.0)*x4489*x4495))+((x4484*x4487))+(((-1.0)*r10*x4490*x4494))+(((-1.0)*r11*x4486*x4494))+(((-1.0)*r12*sj5*x4494)));
evalcond[3]=((((-1.0)*r00*x4490*x4495))+(((-1.0)*r02*x4496))+sj0+(((-1.0)*r01*x4486*x4495))+((x4485*x4492))+(((-1.0)*x4493*x4494)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x4490*x4494))+(((-1.0)*r22*sj5*x4494))+((x4484*x4491))+(((-1.0)*x4488*x4495))+(((-1.0)*r21*x4486*x4494)));
evalcond[5]=(((x4485*x4489))+(((-1.0)*r10*x4490*x4495))+(((-1.0)*r11*x4486*x4495))+(((-1.0)*cj0))+(((-1.0)*x4487*x4494))+(((-1.0)*r12*x4496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4497=(cj5*sj0);
IkReal x4498=((1.0)*sj5);
CheckValue<IkReal> x4499 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x4497))+((r22*sj0*sj5))+((cj6*r21*x4497))),IKFAST_ATAN2_MAGTHRESH);
if(!x4499.valid){
continue;
}
CheckValue<IkReal> x4500=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x4498))+(((-1.0)*cj6*r11*x4498)))),-1);
if(!x4500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4499.value)+(((1.5707963267949)*(x4500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4501=IKsin(j4);
IkReal x4502=IKcos(j4);
IkReal x4503=(cj5*cj6);
IkReal x4504=(r11*sj6);
IkReal x4505=(cj6*r20);
IkReal x4506=(cj6*r10);
IkReal x4507=(cj5*sj6);
IkReal x4508=(r21*sj6);
IkReal x4509=(cj6*r00);
IkReal x4510=(r01*sj6);
IkReal x4511=((1.0)*x4502);
IkReal x4512=((1.0)*x4501);
IkReal x4513=(sj5*x4512);
evalcond[0]=((((-1.0)*r21*x4503*x4512))+(((-1.0)*r20*x4507*x4512))+((x4502*x4505))+(((-1.0)*r22*x4513))+(((-1.0)*x4508*x4511)));
evalcond[1]=((((-1.0)*r01*x4503*x4511))+((x4501*x4510))+(((-1.0)*r00*x4507*x4511))+(((-1.0)*r02*sj5*x4511))+(((-1.0)*x4509*x4512)));
evalcond[2]=((((-1.0)*r11*x4503*x4511))+(((-1.0)*x4506*x4512))+((x4501*x4504))+(((-1.0)*r12*sj5*x4511))+(((-1.0)*r10*x4507*x4511)));
evalcond[3]=(sj0+(((-1.0)*r02*x4513))+(((-1.0)*r01*x4503*x4512))+((x4502*x4509))+(((-1.0)*r00*x4507*x4512))+(((-1.0)*x4510*x4511)));
evalcond[4]=((-1.0)+(((-1.0)*r21*x4503*x4511))+((x4501*x4508))+(((-1.0)*x4505*x4512))+(((-1.0)*r20*x4507*x4511))+(((-1.0)*r22*sj5*x4511)));
evalcond[5]=((((-1.0)*r11*x4503*x4512))+(((-1.0)*r12*x4513))+(((-1.0)*x4504*x4511))+((x4502*x4506))+(((-1.0)*cj0))+(((-1.0)*r10*x4507*x4512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4514=((1.0)*cj5);
IkReal x4515=((1.0)*sj5);
CheckValue<IkReal> x4516=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x4515))+(((-1.0)*r10*sj6*x4515)))),-1);
if(!x4516.valid){
continue;
}
CheckValue<IkReal> x4517 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj6*x4514))+(((-1.0)*r02*x4515))+(((-1.0)*cj6*r01*x4514)))),((((-1.0)*r01*sj6))+((cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x4517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4516.value)))+(x4517.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4518=IKsin(j4);
IkReal x4519=IKcos(j4);
IkReal x4520=(cj5*cj6);
IkReal x4521=(r11*sj6);
IkReal x4522=(cj6*r20);
IkReal x4523=(cj6*r10);
IkReal x4524=(cj5*sj6);
IkReal x4525=(r21*sj6);
IkReal x4526=(cj6*r00);
IkReal x4527=(r01*sj6);
IkReal x4528=((1.0)*x4519);
IkReal x4529=((1.0)*x4518);
IkReal x4530=(sj5*x4529);
evalcond[0]=((((-1.0)*r21*x4520*x4529))+(((-1.0)*x4525*x4528))+(((-1.0)*r22*x4530))+(((-1.0)*r20*x4524*x4529))+((x4519*x4522)));
evalcond[1]=((((-1.0)*r02*sj5*x4528))+(((-1.0)*r00*x4524*x4528))+(((-1.0)*r01*x4520*x4528))+(((-1.0)*x4526*x4529))+((x4518*x4527)));
evalcond[2]=((((-1.0)*r11*x4520*x4528))+(((-1.0)*r12*sj5*x4528))+(((-1.0)*r10*x4524*x4528))+(((-1.0)*x4523*x4529))+((x4518*x4521)));
evalcond[3]=(sj0+(((-1.0)*r00*x4524*x4529))+(((-1.0)*r01*x4520*x4529))+(((-1.0)*x4527*x4528))+(((-1.0)*r02*x4530))+((x4519*x4526)));
evalcond[4]=((-1.0)+(((-1.0)*r21*x4520*x4528))+(((-1.0)*r22*sj5*x4528))+(((-1.0)*r20*x4524*x4528))+(((-1.0)*x4522*x4529))+((x4518*x4525)));
evalcond[5]=((((-1.0)*r11*x4520*x4529))+(((-1.0)*x4521*x4528))+(((-1.0)*r10*x4524*x4529))+(((-1.0)*r12*x4530))+((x4519*x4523))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4531=(cj2*sj1);
IkReal x4532=((364.42)*cj1);
IkReal x4533=((1000.0)*px);
IkReal x4534=(cj5*sj2);
IkReal x4535=(cj6*r01);
IkReal x4536=((69.0)*r12);
IkReal x4537=(sj5*sj6);
IkReal x4538=((69.0)*r10);
IkReal x4539=((374.29)*r00);
IkReal x4540=((374.29)*sj5);
IkReal x4541=((374.29)*r02);
IkReal x4542=((10.0)*r02*sj5);
IkReal x4543=((10.0)*r00*sj6);
IkReal x4544=(cj6*r11*sj5);
CheckValue<IkReal> x4545 = IKatan2WithCheck(IkReal((((sj2*x4535*x4540))+((x4532*x4544))+(((-1.0)*x4534*x4541))+(((-1.0)*x4534*x4543))+(((-1.0)*cj5*r12*x4532))+(((-69.0)*x4531*x4544))+(((-1.0)*cj5*x4536))+((cj5*x4531*x4536))+(((69.0)*x4544))+(((-10.0)*x4534*x4535))+((x4537*x4538))+((r10*x4532*x4537))+((sj2*x4537*x4539))+(((-1.0)*x4531*x4537*x4538))+((sj2*x4533))+(((-1.0)*sj2*x4542)))),(((x4531*x4533))+((x4531*x4535*x4540))+(((-1.0)*cj5*x4531*x4541))+(((-1.0)*cj5*x4531*x4543))+(((69.0)*sj2*x4544))+(((-1.0)*x4531*x4542))+(((-10.0)*cj5*x4531*x4535))+((sj2*x4537*x4538))+(((-1.0)*x4534*x4536))+((x4531*x4537*x4539))),IKFAST_ATAN2_MAGTHRESH);
if(!x4545.valid){
continue;
}
CheckValue<IkReal> x4546=IKPowWithIntegerCheck(IKsign(((-69.0)+((x4531*x4532))+(((69.0)*x4531))+(((69.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x4546.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4545.value)+(((1.5707963267949)*(x4546.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4547=IKsin(j0);
IkReal x4548=IKcos(j0);
IkReal x4549=(cj6*r11);
IkReal x4550=((0.01)*cj5);
IkReal x4551=(sj5*sj6);
IkReal x4552=((0.36442)*cj1);
IkReal x4553=(cj2*sj1);
IkReal x4554=(cj6*r01);
IkReal x4555=((0.37429)*sj5);
IkReal x4556=(cj5*r02);
IkReal x4557=((0.01)*sj5);
IkReal x4558=(cj5*r12);
IkReal x4559=((0.069)*x4547);
IkReal x4560=((0.069)*x4548);
IkReal x4561=((1.0)*x4547);
evalcond[0]=(((r10*x4551))+((sj5*x4549))+(((-1.0)*x4553*x4561))+((sj2*x4548))+(((-1.0)*x4558)));
evalcond[1]=((((-1.0)*sj2*x4561))+((sj5*x4554))+((r00*x4551))+(((-1.0)*x4548*x4553))+(((-1.0)*x4556)));
evalcond[2]=(((x4550*x4554))+x4560+(((0.37429)*x4556))+(((-1.0)*x4553*x4560))+(((-1.0)*px))+((r02*x4557))+((r00*sj6*x4550))+(((-0.37429)*r00*x4551))+(((-1.0)*x4554*x4555))+((x4548*x4552))+(((-1.0)*sj2*x4559)));
evalcond[3]=(((r10*sj6*x4550))+x4559+(((-1.0)*x4553*x4559))+(((0.37429)*x4558))+((x4547*x4552))+((r12*x4557))+(((-1.0)*py))+((sj2*x4560))+(((-1.0)*x4549*x4555))+(((-0.37429)*r10*x4551))+((x4549*x4550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4562=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4562;
j4eval[1]=IKsign(x4562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4563=((1.0)*sj5);
IkReal x4564=((((-1.0)*cj6*r01*x4563))+(((-1.0)*r00*sj6*x4563))+((cj5*r02)));
j4eval[0]=x4564;
j4eval[1]=IKsign(x4564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4565=cj5*cj5;
IkReal x4566=cj6*cj6;
IkReal x4567=r20*r20;
IkReal x4568=r21*r21;
IkReal x4569=r22*r22;
IkReal x4570=(r22*sj5);
IkReal x4571=(cj6*r20);
IkReal x4572=(cj1*sj2);
IkReal x4573=(cj6*r21);
IkReal x4574=(cj5*sj1);
IkReal x4575=(r20*sj6);
IkReal x4576=(r21*sj6);
IkReal x4577=((2.0)*x4575);
IkReal x4578=((1.0)*x4565);
IkReal x4579=(x4566*x4567);
IkReal x4580=(x4566*x4568);
IkReal x4581=(((x4565*x4567))+(((2.0)*x4565*x4571*x4576))+(((-1.0)*x4569*x4578))+x4579+x4569+x4568+(((-1.0)*x4580))+((x4565*x4580))+(((-2.0)*x4571*x4576))+((cj5*x4570*x4577))+(((-1.0)*x4578*x4579))+(((2.0)*cj5*x4570*x4573)));
j4eval[0]=x4581;
j4eval[1]=((IKabs((((sj1*x4571))+(((-1.0)*sj1*x4576))+((x4570*x4572))+((cj5*x4572*x4573))+((cj5*x4572*x4575)))))+(IKabs((((sj1*x4570))+((x4574*x4575))+((x4573*x4574))+(((-1.0)*x4571*x4572))+((x4572*x4576))))));
j4eval[2]=IKsign(x4581);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4582=((1.0)*cj5);
IkReal x4583=((0.01)*cj5);
IkReal x4584=(cj6*r11);
IkReal x4585=(r20*sj6);
IkReal x4586=((0.01)*sj5);
IkReal x4587=(cj6*r01);
IkReal x4588=((0.37429)*cj5);
IkReal x4589=((0.37429)*sj5);
IkReal x4590=(cj6*r21);
IkReal x4591=(r10*sj5*sj6);
IkReal x4592=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.069)+((r22*x4588))+((r22*x4586))+(((-1.0)*x4589*x4590))+((x4583*x4590))+((x4583*x4585))+(((-1.0)*pz))+(((-1.0)*x4585*x4589)));
evalcond[2]=(((r02*x4586))+((r02*x4588))+((x4583*x4587))+(((-1.0)*x4587*x4589))+(((-1.0)*px))+(((0.43342)*cj0))+(((-1.0)*r00*sj6*x4589))+((r00*sj6*x4583)));
evalcond[3]=(((x4583*x4584))+(((-1.0)*py))+(((0.43342)*sj0))+((r12*x4586))+((r12*x4588))+((r10*sj6*x4583))+(((-1.0)*x4584*x4589))+(((-1.0)*r10*sj6*x4589)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4582))+((sj5*x4585))+((sj5*x4590)));
evalcond[5]=(x4591+(((-1.0)*r12*x4582))+((sj5*x4584)));
evalcond[6]=(x4592+(((-1.0)*r02*x4582))+((sj5*x4587)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4593=(cj0*sj6);
IkReal x4594=(cj0*cj6);
IkReal x4595=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4595;
j4eval[1]=((IKabs(((((-1.0)*r21*x4593))+((r20*x4594)))))+(IKabs((((cj5*r21*x4594))+((cj5*r20*x4593))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x4595);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4596=(r21*sj0);
IkReal x4597=(r20*sj0);
IkReal x4598=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4598;
j4eval[1]=((IKabs(((((-1.0)*sj6*x4596))+((cj6*x4597)))))+(IKabs((((cj5*cj6*x4596))+((r22*sj0*sj5))+((cj5*sj6*x4597))))));
j4eval[2]=IKsign(x4598);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4599=cj6*cj6;
IkReal x4600=cj5*cj5;
IkReal x4601=(r02*r22);
IkReal x4602=(r22*sj5);
IkReal x4603=(r00*r20);
IkReal x4604=((1.0)*r21);
IkReal x4605=(r20*sj6);
IkReal x4606=(cj6*r01);
IkReal x4607=(cj0*cj5);
IkReal x4608=(r00*sj6);
IkReal x4609=((1.0)*cj5);
IkReal x4610=(cj6*r21);
IkReal x4611=(cj5*r02*sj5);
IkReal x4612=((1.0)*x4600);
IkReal x4613=(x4599*x4600);
IkReal x4614=(((r01*r21*x4599))+(((-1.0)*x4599*x4603))+((x4605*x4606))+((x4608*x4610))+(((-1.0)*x4603*x4612))+(((-1.0)*x4601))+(((-1.0)*x4602*x4606*x4609))+(((-1.0)*x4602*x4608*x4609))+(((-1.0)*x4605*x4606*x4612))+(((-1.0)*cj6*x4600*x4604*x4608))+(((-1.0)*r02*sj5*x4605*x4609))+((x4600*x4601))+(((-1.0)*r01*x4604*x4613))+((x4603*x4613))+(((-1.0)*r01*x4604))+(((-1.0)*cj6*x4604*x4611)));
j4eval[0]=x4614;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x4604)))))+(IKabs((((x4605*x4607))+((cj0*x4602))+((x4607*x4610))))));
j4eval[2]=IKsign(x4614);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4615=((1.0)*cj5);
IkReal x4616=((0.01)*cj5);
IkReal x4617=(cj6*r11);
IkReal x4618=(r20*sj6);
IkReal x4619=((0.01)*sj5);
IkReal x4620=(cj6*r01);
IkReal x4621=((0.37429)*cj5);
IkReal x4622=((0.37429)*sj5);
IkReal x4623=(cj6*r21);
IkReal x4624=(r10*sj5*sj6);
IkReal x4625=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x4618*x4622))+(((-1.0)*pz))+((r22*x4619))+((x4616*x4623))+((x4616*x4618))+((r22*x4621))+(((-1.0)*x4622*x4623)));
evalcond[2]=((((-1.0)*r00*sj6*x4622))+((r00*sj6*x4616))+((r02*x4619))+((r02*x4621))+(((-1.0)*px))+((x4616*x4620))+(((-1.0)*x4620*x4622)));
evalcond[3]=((0.43342)+(((-1.0)*r10*sj6*x4622))+((r12*x4621))+((r10*sj6*x4616))+((r12*x4619))+(((-1.0)*py))+((x4616*x4617))+(((-1.0)*x4617*x4622)));
evalcond[4]=((-1.0)+((sj5*x4623))+(((-1.0)*r22*x4615))+((sj5*x4618)));
evalcond[5]=(x4624+(((-1.0)*r12*x4615))+((sj5*x4617)));
evalcond[6]=((((-1.0)*r02*x4615))+((sj5*x4620))+x4625);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4626=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4626;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4627=((1.0)*sj5);
IkReal x4628=(((cj5*r22))+(((-1.0)*r20*sj6*x4627))+(((-1.0)*cj6*r21*x4627)));
j4eval[0]=x4628;
j4eval[1]=IKsign(x4628);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4629=cj6*cj6;
IkReal x4630=cj5*cj5;
IkReal x4631=r10*r10;
IkReal x4632=r11*r11;
IkReal x4633=r12*r12;
IkReal x4634=(r10*sj6);
IkReal x4635=(r12*sj5);
IkReal x4636=((2.0)*cj6*r11);
IkReal x4637=((1.0)*x4631);
IkReal x4638=(x4629*x4632);
IkReal x4639=((((-1.0)*x4630*x4638))+(((-1.0)*x4630*x4634*x4636))+(((-1.0)*x4633))+(((-1.0)*x4632))+(((-2.0)*cj5*x4634*x4635))+((x4630*x4633))+x4638+(((-1.0)*x4630*x4637))+(((-1.0)*cj5*x4635*x4636))+((x4629*x4630*x4631))+((x4634*x4636))+(((-1.0)*x4629*x4637)));
j4eval[0]=x4639;
j4eval[1]=((IKabs((((cj5*x4634))+x4635+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4640=cj6*cj6;
IkReal x4641=cj5*cj5;
IkReal x4642=r10*r10;
IkReal x4643=r11*r11;
IkReal x4644=r12*r12;
IkReal x4645=(r10*sj6);
IkReal x4646=(r12*sj5);
IkReal x4647=((2.0)*cj6*r11);
IkReal x4648=(x4640*x4643);
IkReal x4649=(x4641*x4642);
CheckValue<IkReal> x4650 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x4646+((cj5*cj6*r11))+((cj5*x4645))),IKFAST_ATAN2_MAGTHRESH);
if(!x4650.valid){
continue;
}
CheckValue<IkReal> x4651=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4641*x4645*x4647))+((x4641*x4644))+x4648+(((-1.0)*x4641*x4648))+(((-1.0)*x4644))+(((-1.0)*x4643))+(((-1.0)*x4649))+((x4645*x4647))+(((-1.0)*x4640*x4642))+(((-1.0)*cj5*x4646*x4647))+((x4640*x4649))+(((-2.0)*cj5*x4645*x4646)))),-1);
if(!x4651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4650.value)+(((1.5707963267949)*(x4651.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4652=IKsin(j4);
IkReal x4653=IKcos(j4);
IkReal x4654=(cj5*cj6);
IkReal x4655=(r11*sj6);
IkReal x4656=(cj6*r20);
IkReal x4657=(cj6*r10);
IkReal x4658=(cj5*sj6);
IkReal x4659=(r01*sj6);
IkReal x4660=(r21*sj6);
IkReal x4661=(cj6*r00);
IkReal x4662=((1.0)*x4653);
IkReal x4663=((1.0)*x4652);
IkReal x4664=(sj5*x4663);
evalcond[0]=(((x4653*x4656))+(((-1.0)*r21*x4654*x4663))+(((-1.0)*x4660*x4662))+(((-1.0)*r20*x4658*x4663))+(((-1.0)*r22*x4664)));
evalcond[1]=((((-1.0)*r10*x4658*x4663))+((x4653*x4657))+(((-1.0)*r12*x4664))+(((-1.0)*r11*x4654*x4663))+(((-1.0)*x4655*x4662)));
evalcond[2]=(((x4652*x4660))+(((-1.0)*x4656*x4663))+(((-1.0)*r21*x4654*x4662))+(((-1.0)*r22*sj5*x4662))+(((-1.0)*r20*x4658*x4662)));
evalcond[3]=((((-1.0)*r01*x4654*x4662))+(((-1.0)*x4661*x4663))+(((-1.0)*r02*sj5*x4662))+((x4652*x4659))+(((-1.0)*r00*x4658*x4662)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x4654*x4663))+(((-1.0)*x4659*x4662))+((x4653*x4661))+(((-1.0)*r00*x4658*x4663))+(((-1.0)*r02*x4664)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x4658*x4662))+(((-1.0)*r12*sj5*x4662))+((x4652*x4655))+(((-1.0)*r11*x4654*x4662))+(((-1.0)*x4657*x4663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4665=((1.0)*sj5);
CheckValue<IkReal> x4666 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4666.valid){
continue;
}
CheckValue<IkReal> x4667=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x4665))+(((-1.0)*r20*sj6*x4665)))),-1);
if(!x4667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4666.value)+(((1.5707963267949)*(x4667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4668=IKsin(j4);
IkReal x4669=IKcos(j4);
IkReal x4670=(cj5*cj6);
IkReal x4671=(r11*sj6);
IkReal x4672=(cj6*r20);
IkReal x4673=(cj6*r10);
IkReal x4674=(cj5*sj6);
IkReal x4675=(r01*sj6);
IkReal x4676=(r21*sj6);
IkReal x4677=(cj6*r00);
IkReal x4678=((1.0)*x4669);
IkReal x4679=((1.0)*x4668);
IkReal x4680=(sj5*x4679);
evalcond[0]=((((-1.0)*r21*x4670*x4679))+(((-1.0)*r20*x4674*x4679))+(((-1.0)*x4676*x4678))+((x4669*x4672))+(((-1.0)*r22*x4680)));
evalcond[1]=((((-1.0)*r10*x4674*x4679))+((x4669*x4673))+(((-1.0)*x4671*x4678))+(((-1.0)*r11*x4670*x4679))+(((-1.0)*r12*x4680)));
evalcond[2]=((((-1.0)*r21*x4670*x4678))+(((-1.0)*r20*x4674*x4678))+((x4668*x4676))+(((-1.0)*r22*sj5*x4678))+(((-1.0)*x4672*x4679)));
evalcond[3]=((((-1.0)*r00*x4674*x4678))+(((-1.0)*r01*x4670*x4678))+((x4668*x4675))+(((-1.0)*r02*sj5*x4678))+(((-1.0)*x4677*x4679)));
evalcond[4]=((-1.0)+(((-1.0)*x4675*x4678))+(((-1.0)*r00*x4674*x4679))+((x4669*x4677))+(((-1.0)*r01*x4670*x4679))+(((-1.0)*r02*x4680)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x4674*x4678))+((x4668*x4671))+(((-1.0)*r12*sj5*x4678))+(((-1.0)*r11*x4670*x4678))+(((-1.0)*x4673*x4679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4681 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4681.valid){
continue;
}
CheckValue<IkReal> x4682=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4681.value)+(((1.5707963267949)*(x4682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4683=IKsin(j4);
IkReal x4684=IKcos(j4);
IkReal x4685=(cj5*cj6);
IkReal x4686=(r11*sj6);
IkReal x4687=(cj6*r20);
IkReal x4688=(cj6*r10);
IkReal x4689=(cj5*sj6);
IkReal x4690=(r01*sj6);
IkReal x4691=(r21*sj6);
IkReal x4692=(cj6*r00);
IkReal x4693=((1.0)*x4684);
IkReal x4694=((1.0)*x4683);
IkReal x4695=(sj5*x4694);
evalcond[0]=((((-1.0)*r20*x4689*x4694))+(((-1.0)*r21*x4685*x4694))+(((-1.0)*r22*x4695))+(((-1.0)*x4691*x4693))+((x4684*x4687)));
evalcond[1]=((((-1.0)*r12*x4695))+(((-1.0)*x4686*x4693))+(((-1.0)*r11*x4685*x4694))+(((-1.0)*r10*x4689*x4694))+((x4684*x4688)));
evalcond[2]=(((x4683*x4691))+(((-1.0)*r22*sj5*x4693))+(((-1.0)*x4687*x4694))+(((-1.0)*r20*x4689*x4693))+(((-1.0)*r21*x4685*x4693)));
evalcond[3]=(((x4683*x4690))+(((-1.0)*r02*sj5*x4693))+(((-1.0)*r00*x4689*x4693))+(((-1.0)*x4692*x4694))+(((-1.0)*r01*x4685*x4693)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x4689*x4694))+(((-1.0)*x4690*x4693))+(((-1.0)*r02*x4695))+(((-1.0)*r01*x4685*x4694))+((x4684*x4692)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x4693))+((x4683*x4686))+(((-1.0)*r11*x4685*x4693))+(((-1.0)*x4688*x4694))+(((-1.0)*r10*x4689*x4693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4696=((1.0)*cj5);
IkReal x4697=((0.01)*cj5);
IkReal x4698=(cj6*r11);
IkReal x4699=(r20*sj6);
IkReal x4700=((0.01)*sj5);
IkReal x4701=(cj6*r01);
IkReal x4702=((0.37429)*cj5);
IkReal x4703=((0.37429)*sj5);
IkReal x4704=(cj6*r21);
IkReal x4705=(r10*sj5*sj6);
IkReal x4706=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x4697*x4699))+(((-1.0)*x4703*x4704))+((x4697*x4704))+(((-1.0)*pz))+(((-1.0)*x4699*x4703))+((r22*x4702))+((r22*x4700)));
evalcond[2]=(((r00*sj6*x4697))+(((-1.0)*r00*sj6*x4703))+((x4697*x4701))+(((-1.0)*px))+((r02*x4702))+((r02*x4700))+(((-1.0)*x4701*x4703)));
evalcond[3]=((-0.43342)+(((-1.0)*r10*sj6*x4703))+((x4697*x4698))+((r10*sj6*x4697))+(((-1.0)*x4698*x4703))+(((-1.0)*py))+((r12*x4702))+((r12*x4700)));
evalcond[4]=((-1.0)+((sj5*x4699))+(((-1.0)*r22*x4696))+((sj5*x4704)));
evalcond[5]=((((-1.0)*r12*x4696))+((sj5*x4698))+x4705);
evalcond[6]=(x4706+(((-1.0)*r02*x4696))+((sj5*x4701)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4707=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4707;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4708=((1.0)*sj6);
IkReal x4709=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4708)));
j4eval[0]=x4709;
j4eval[1]=IKsign(x4709);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4708))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4710=r11*r11;
IkReal x4711=cj5*cj5;
IkReal x4712=cj6*cj6;
IkReal x4713=r10*r10;
IkReal x4714=r12*r12;
IkReal x4715=(r12*sj5);
IkReal x4716=(cj6*r10);
IkReal x4717=((1.0)*x4712);
IkReal x4718=(cj5*cj6*r11);
IkReal x4719=(cj5*r10*sj6);
IkReal x4720=((2.0)*r11*sj6);
IkReal x4721=(x4711*x4713);
IkReal x4722=((((-1.0)*x4711*x4714))+(((-1.0)*x4710*x4717))+(((-1.0)*x4716*x4720))+x4714+x4710+x4721+(((-1.0)*x4717*x4721))+((x4711*x4716*x4720))+((x4710*x4711*x4712))+(((2.0)*x4715*x4718))+(((2.0)*x4715*x4719))+((x4712*x4713)));
j4eval[0]=x4722;
j4eval[1]=IKsign(x4722);
j4eval[2]=((IKabs((x4716+(((-1.0)*r11*sj6)))))+(IKabs((x4715+x4718+x4719))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4723=r11*r11;
IkReal x4724=cj5*cj5;
IkReal x4725=cj6*cj6;
IkReal x4726=r10*r10;
IkReal x4727=r12*r12;
IkReal x4728=(r10*sj6);
IkReal x4729=(r12*sj5);
IkReal x4730=((1.0)*x4725);
IkReal x4731=(cj5*cj6*r11);
IkReal x4732=((2.0)*cj6*r11);
IkReal x4733=(x4724*x4726);
CheckValue<IkReal> x4734=IKPowWithIntegerCheck(IKsign(((((2.0)*x4729*x4731))+((x4725*x4726))+(((-1.0)*x4723*x4730))+(((-1.0)*x4730*x4733))+(((-1.0)*x4724*x4727))+(((-1.0)*x4728*x4732))+((x4724*x4728*x4732))+(((2.0)*cj5*x4728*x4729))+x4733+x4727+x4723+((x4723*x4724*x4725)))),-1);
if(!x4734.valid){
continue;
}
CheckValue<IkReal> x4735 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x4728))+x4731+x4729),IKFAST_ATAN2_MAGTHRESH);
if(!x4735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4734.value)))+(x4735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4736=IKsin(j4);
IkReal x4737=IKcos(j4);
IkReal x4738=(cj5*cj6);
IkReal x4739=(r11*sj6);
IkReal x4740=(cj6*r20);
IkReal x4741=(cj6*r10);
IkReal x4742=(cj5*sj6);
IkReal x4743=(r01*sj6);
IkReal x4744=(r21*sj6);
IkReal x4745=(cj6*r00);
IkReal x4746=((1.0)*x4737);
IkReal x4747=((1.0)*x4736);
IkReal x4748=(sj5*x4747);
evalcond[0]=(((x4737*x4740))+(((-1.0)*r20*x4742*x4747))+(((-1.0)*x4744*x4746))+(((-1.0)*r22*x4748))+(((-1.0)*r21*x4738*x4747)));
evalcond[1]=(((x4737*x4741))+(((-1.0)*r12*x4748))+(((-1.0)*r11*x4738*x4747))+(((-1.0)*r10*x4742*x4747))+(((-1.0)*x4739*x4746)));
evalcond[2]=((((-1.0)*r20*x4742*x4746))+((x4736*x4744))+(((-1.0)*x4740*x4747))+(((-1.0)*r22*sj5*x4746))+(((-1.0)*r21*x4738*x4746)));
evalcond[3]=((((-1.0)*r00*x4742*x4746))+(((-1.0)*r02*sj5*x4746))+(((-1.0)*x4745*x4747))+((x4736*x4743))+(((-1.0)*r01*x4738*x4746)));
evalcond[4]=((1.0)+((x4737*x4745))+(((-1.0)*r00*x4742*x4747))+(((-1.0)*r01*x4738*x4747))+(((-1.0)*x4743*x4746))+(((-1.0)*r02*x4748)));
evalcond[5]=((1.0)+(((-1.0)*r11*x4738*x4746))+((x4736*x4739))+(((-1.0)*r12*sj5*x4746))+(((-1.0)*r10*x4742*x4746))+(((-1.0)*x4741*x4747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4749=((1.0)*sj6);
CheckValue<IkReal> x4750=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4749)))),-1);
if(!x4750.valid){
continue;
}
CheckValue<IkReal> x4751 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4749))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4750.value)))+(x4751.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4752=IKsin(j4);
IkReal x4753=IKcos(j4);
IkReal x4754=(cj5*cj6);
IkReal x4755=(r11*sj6);
IkReal x4756=(cj6*r20);
IkReal x4757=(cj6*r10);
IkReal x4758=(cj5*sj6);
IkReal x4759=(r01*sj6);
IkReal x4760=(r21*sj6);
IkReal x4761=(cj6*r00);
IkReal x4762=((1.0)*x4753);
IkReal x4763=((1.0)*x4752);
IkReal x4764=(sj5*x4763);
evalcond[0]=((((-1.0)*x4760*x4762))+(((-1.0)*r21*x4754*x4763))+((x4753*x4756))+(((-1.0)*r22*x4764))+(((-1.0)*r20*x4758*x4763)));
evalcond[1]=(((x4753*x4757))+(((-1.0)*x4755*x4762))+(((-1.0)*r10*x4758*x4763))+(((-1.0)*r11*x4754*x4763))+(((-1.0)*r12*x4764)));
evalcond[2]=((((-1.0)*r22*sj5*x4762))+(((-1.0)*r21*x4754*x4762))+((x4752*x4760))+(((-1.0)*x4756*x4763))+(((-1.0)*r20*x4758*x4762)));
evalcond[3]=((((-1.0)*x4761*x4763))+(((-1.0)*r02*sj5*x4762))+(((-1.0)*r01*x4754*x4762))+(((-1.0)*r00*x4758*x4762))+((x4752*x4759)));
evalcond[4]=((1.0)+((x4753*x4761))+(((-1.0)*r02*x4764))+(((-1.0)*r01*x4754*x4763))+(((-1.0)*x4759*x4762))+(((-1.0)*r00*x4758*x4763)));
evalcond[5]=((1.0)+(((-1.0)*r10*x4758*x4762))+(((-1.0)*r11*x4754*x4762))+(((-1.0)*x4757*x4763))+(((-1.0)*r12*sj5*x4762))+((x4752*x4755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4765=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4765.valid){
continue;
}
CheckValue<IkReal> x4766 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4765.value)))+(x4766.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4767=IKsin(j4);
IkReal x4768=IKcos(j4);
IkReal x4769=(cj5*cj6);
IkReal x4770=(r11*sj6);
IkReal x4771=(cj6*r20);
IkReal x4772=(cj6*r10);
IkReal x4773=(cj5*sj6);
IkReal x4774=(r01*sj6);
IkReal x4775=(r21*sj6);
IkReal x4776=(cj6*r00);
IkReal x4777=((1.0)*x4768);
IkReal x4778=((1.0)*x4767);
IkReal x4779=(sj5*x4778);
evalcond[0]=(((x4768*x4771))+(((-1.0)*r20*x4773*x4778))+(((-1.0)*r22*x4779))+(((-1.0)*x4775*x4777))+(((-1.0)*r21*x4769*x4778)));
evalcond[1]=((((-1.0)*r11*x4769*x4778))+(((-1.0)*r12*x4779))+((x4768*x4772))+(((-1.0)*x4770*x4777))+(((-1.0)*r10*x4773*x4778)));
evalcond[2]=((((-1.0)*r20*x4773*x4777))+((x4767*x4775))+(((-1.0)*x4771*x4778))+(((-1.0)*r22*sj5*x4777))+(((-1.0)*r21*x4769*x4777)));
evalcond[3]=((((-1.0)*x4776*x4778))+(((-1.0)*r02*sj5*x4777))+((x4767*x4774))+(((-1.0)*r00*x4773*x4777))+(((-1.0)*r01*x4769*x4777)));
evalcond[4]=((1.0)+((x4768*x4776))+(((-1.0)*x4774*x4777))+(((-1.0)*r00*x4773*x4778))+(((-1.0)*r01*x4769*x4778))+(((-1.0)*r02*x4779)));
evalcond[5]=((1.0)+(((-1.0)*r11*x4769*x4777))+(((-1.0)*r12*sj5*x4777))+((x4767*x4770))+(((-1.0)*x4772*x4778))+(((-1.0)*r10*x4773*x4777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4780=((1.0)*cj5);
IkReal x4781=((0.01)*cj5);
IkReal x4782=(cj6*r11);
IkReal x4783=(r20*sj6);
IkReal x4784=((0.01)*sj5);
IkReal x4785=(cj6*r01);
IkReal x4786=((0.37429)*cj5);
IkReal x4787=((0.37429)*sj5);
IkReal x4788=(cj6*r21);
IkReal x4789=(r10*sj5*sj6);
IkReal x4790=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x4787*x4788))+((r22*x4786))+((r22*x4784))+(((-1.0)*x4783*x4787))+(((-1.0)*pz))+((x4781*x4783))+((x4781*x4788)));
evalcond[2]=((0.43342)+((r02*x4786))+((r02*x4784))+((r00*sj6*x4781))+(((-1.0)*px))+(((-1.0)*r00*sj6*x4787))+(((-1.0)*x4785*x4787))+((x4781*x4785)));
evalcond[3]=(((r10*sj6*x4781))+((r12*x4786))+((r12*x4784))+(((-1.0)*x4782*x4787))+(((-1.0)*py))+(((-1.0)*r10*sj6*x4787))+((x4781*x4782)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4780))+((sj5*x4783))+((sj5*x4788)));
evalcond[5]=(x4789+((sj5*x4782))+(((-1.0)*r12*x4780)));
evalcond[6]=(x4790+(((-1.0)*r02*x4780))+((sj5*x4785)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4791=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4791;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4791);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4792=((1.0)*sj5);
IkReal x4793=(((cj5*r22))+(((-1.0)*cj6*r21*x4792))+(((-1.0)*r20*sj6*x4792)));
j4eval[0]=x4793;
j4eval[1]=IKsign(x4793);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4794=cj6*cj6;
IkReal x4795=cj5*cj5;
IkReal x4796=r00*r00;
IkReal x4797=r01*r01;
IkReal x4798=r02*r02;
IkReal x4799=(cj6*r00);
IkReal x4800=(cj5*cj6*r01);
IkReal x4801=((2.0)*r02*sj5);
IkReal x4802=((1.0)*x4794);
IkReal x4803=((2.0)*r01*sj6);
IkReal x4804=(cj5*r00*sj6);
IkReal x4805=(x4795*x4796);
IkReal x4806=(((x4795*x4798))+(((-1.0)*x4801*x4804))+(((-1.0)*x4800*x4801))+(((-1.0)*x4796*x4802))+(((-1.0)*x4795*x4799*x4803))+(((-1.0)*x4797))+(((-1.0)*x4798))+(((-1.0)*x4805))+(((-1.0)*x4795*x4797*x4802))+((x4794*x4797))+((x4794*x4805))+((x4799*x4803)));
j4eval[0]=x4806;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x4799)))+(IKabs((((r02*sj5))+x4800+x4804))));
j4eval[2]=IKsign(x4806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4807=cj6*cj6;
IkReal x4808=cj5*cj5;
IkReal x4809=r00*r00;
IkReal x4810=r01*r01;
IkReal x4811=r02*r02;
IkReal x4812=(cj6*r00);
IkReal x4813=(cj5*cj6*r01);
IkReal x4814=((2.0)*r02*sj5);
IkReal x4815=((1.0)*x4807);
IkReal x4816=((2.0)*r01*sj6);
IkReal x4817=(cj5*r00*sj6);
IkReal x4818=(x4808*x4809);
CheckValue<IkReal> x4819 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4812)),(((r02*sj5))+x4813+x4817),IKFAST_ATAN2_MAGTHRESH);
if(!x4819.valid){
continue;
}
CheckValue<IkReal> x4820=IKPowWithIntegerCheck(IKsign((((x4812*x4816))+((x4807*x4818))+((x4807*x4810))+(((-1.0)*x4814*x4817))+(((-1.0)*x4809*x4815))+(((-1.0)*x4808*x4810*x4815))+((x4808*x4811))+(((-1.0)*x4818))+(((-1.0)*x4811))+(((-1.0)*x4810))+(((-1.0)*x4808*x4812*x4816))+(((-1.0)*x4813*x4814)))),-1);
if(!x4820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4819.value)+(((1.5707963267949)*(x4820.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4821=IKsin(j4);
IkReal x4822=IKcos(j4);
IkReal x4823=(cj5*cj6);
IkReal x4824=(r11*sj6);
IkReal x4825=(cj6*r20);
IkReal x4826=(cj6*r10);
IkReal x4827=(cj5*sj6);
IkReal x4828=(r21*sj6);
IkReal x4829=(cj6*r00);
IkReal x4830=(r01*sj6);
IkReal x4831=((1.0)*x4822);
IkReal x4832=((1.0)*x4821);
IkReal x4833=(sj5*x4832);
evalcond[0]=((((-1.0)*r20*x4827*x4832))+((x4822*x4825))+(((-1.0)*r22*x4833))+(((-1.0)*x4828*x4831))+(((-1.0)*r21*x4823*x4832)));
evalcond[1]=((((-1.0)*x4830*x4831))+(((-1.0)*r01*x4823*x4832))+((x4822*x4829))+(((-1.0)*r00*x4827*x4832))+(((-1.0)*r02*x4833)));
evalcond[2]=((((-1.0)*r22*sj5*x4831))+((x4821*x4828))+(((-1.0)*r20*x4827*x4831))+(((-1.0)*x4825*x4832))+(((-1.0)*r21*x4823*x4831)));
evalcond[3]=(((x4821*x4824))+(((-1.0)*r10*x4827*x4831))+(((-1.0)*x4826*x4832))+(((-1.0)*r12*sj5*x4831))+(((-1.0)*r11*x4823*x4831)));
evalcond[4]=((1.0)+(((-1.0)*x4824*x4831))+(((-1.0)*r12*x4833))+(((-1.0)*r10*x4827*x4832))+((x4822*x4826))+(((-1.0)*r11*x4823*x4832)));
evalcond[5]=((-1.0)+((x4821*x4830))+(((-1.0)*r02*sj5*x4831))+(((-1.0)*x4829*x4832))+(((-1.0)*r01*x4823*x4831))+(((-1.0)*r00*x4827*x4831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4834=((1.0)*sj5);
CheckValue<IkReal> x4835 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x4835.valid){
continue;
}
CheckValue<IkReal> x4836=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x4834))+((cj5*r22))+(((-1.0)*cj6*r21*x4834)))),-1);
if(!x4836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4835.value)+(((1.5707963267949)*(x4836.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4837=IKsin(j4);
IkReal x4838=IKcos(j4);
IkReal x4839=(cj5*cj6);
IkReal x4840=(r11*sj6);
IkReal x4841=(cj6*r20);
IkReal x4842=(cj6*r10);
IkReal x4843=(cj5*sj6);
IkReal x4844=(r21*sj6);
IkReal x4845=(cj6*r00);
IkReal x4846=(r01*sj6);
IkReal x4847=((1.0)*x4838);
IkReal x4848=((1.0)*x4837);
IkReal x4849=(sj5*x4848);
evalcond[0]=((((-1.0)*x4844*x4847))+(((-1.0)*r20*x4843*x4848))+(((-1.0)*r21*x4839*x4848))+((x4838*x4841))+(((-1.0)*r22*x4849)));
evalcond[1]=((((-1.0)*r02*x4849))+(((-1.0)*r01*x4839*x4848))+(((-1.0)*x4846*x4847))+((x4838*x4845))+(((-1.0)*r00*x4843*x4848)));
evalcond[2]=((((-1.0)*x4841*x4848))+(((-1.0)*r22*sj5*x4847))+(((-1.0)*r20*x4843*x4847))+(((-1.0)*r21*x4839*x4847))+((x4837*x4844)));
evalcond[3]=((((-1.0)*x4842*x4848))+(((-1.0)*r11*x4839*x4847))+(((-1.0)*r12*sj5*x4847))+(((-1.0)*r10*x4843*x4847))+((x4837*x4840)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4839*x4848))+(((-1.0)*x4840*x4847))+((x4838*x4842))+(((-1.0)*r12*x4849))+(((-1.0)*r10*x4843*x4848)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x4839*x4847))+(((-1.0)*r02*sj5*x4847))+(((-1.0)*x4845*x4848))+(((-1.0)*r00*x4843*x4847))+((x4837*x4846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4850 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4850.valid){
continue;
}
CheckValue<IkReal> x4851=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4850.value)+(((1.5707963267949)*(x4851.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4852=IKsin(j4);
IkReal x4853=IKcos(j4);
IkReal x4854=(cj5*cj6);
IkReal x4855=(r11*sj6);
IkReal x4856=(cj6*r20);
IkReal x4857=(cj6*r10);
IkReal x4858=(cj5*sj6);
IkReal x4859=(r21*sj6);
IkReal x4860=(cj6*r00);
IkReal x4861=(r01*sj6);
IkReal x4862=((1.0)*x4853);
IkReal x4863=((1.0)*x4852);
IkReal x4864=(sj5*x4863);
evalcond[0]=(((x4853*x4856))+(((-1.0)*r22*x4864))+(((-1.0)*x4859*x4862))+(((-1.0)*r20*x4858*x4863))+(((-1.0)*r21*x4854*x4863)));
evalcond[1]=(((x4853*x4860))+(((-1.0)*r02*x4864))+(((-1.0)*r00*x4858*x4863))+(((-1.0)*x4861*x4862))+(((-1.0)*r01*x4854*x4863)));
evalcond[2]=((((-1.0)*x4856*x4863))+(((-1.0)*r22*sj5*x4862))+(((-1.0)*r20*x4858*x4862))+(((-1.0)*r21*x4854*x4862))+((x4852*x4859)));
evalcond[3]=((((-1.0)*r10*x4858*x4862))+(((-1.0)*x4857*x4863))+(((-1.0)*r11*x4854*x4862))+(((-1.0)*r12*sj5*x4862))+((x4852*x4855)));
evalcond[4]=((1.0)+(((-1.0)*x4855*x4862))+((x4853*x4857))+(((-1.0)*r12*x4864))+(((-1.0)*r10*x4858*x4863))+(((-1.0)*r11*x4854*x4863)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x4858*x4862))+(((-1.0)*x4860*x4863))+((x4852*x4861))+(((-1.0)*r01*x4854*x4862))+(((-1.0)*r02*sj5*x4862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4865=((1.0)*cj5);
IkReal x4866=((0.01)*cj5);
IkReal x4867=(cj6*r11);
IkReal x4868=(r20*sj6);
IkReal x4869=((0.01)*sj5);
IkReal x4870=(cj6*r01);
IkReal x4871=((0.37429)*cj5);
IkReal x4872=((0.37429)*sj5);
IkReal x4873=(cj6*r21);
IkReal x4874=(r10*sj5*sj6);
IkReal x4875=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x4868*x4872))+((r22*x4869))+(((-1.0)*pz))+((x4866*x4873))+((x4866*x4868))+((r22*x4871))+(((-1.0)*x4872*x4873)));
evalcond[2]=((-0.43342)+((r02*x4871))+(((-1.0)*px))+((x4866*x4870))+(((-1.0)*x4870*x4872))+((r02*x4869))+(((-1.0)*r00*sj6*x4872))+((r00*sj6*x4866)));
evalcond[3]=(((r12*x4869))+(((-1.0)*py))+(((-1.0)*r10*sj6*x4872))+((x4866*x4867))+((r12*x4871))+(((-1.0)*x4867*x4872))+((r10*sj6*x4866)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4865))+((sj5*x4868))+((sj5*x4873)));
evalcond[5]=((((-1.0)*r12*x4865))+((sj5*x4867))+x4874);
evalcond[6]=((((-1.0)*r02*x4865))+((sj5*x4870))+x4875);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4876=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4876;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x4876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4877=((1.0)*sj6);
IkReal x4878=((((-1.0)*cj6*r01*sj5))+((cj5*r02))+(((-1.0)*r00*sj5*x4877)));
j4eval[0]=x4878;
j4eval[1]=IKsign(x4878);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4877))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4879=cj6*cj6;
IkReal x4880=r01*r01;
IkReal x4881=cj5*cj5;
IkReal x4882=r00*r00;
IkReal x4883=r02*r02;
IkReal x4884=(cj6*r00);
IkReal x4885=(r02*sj5);
IkReal x4886=(cj5*cj6*r01);
IkReal x4887=((2.0)*r01*sj6);
IkReal x4888=(cj5*r00*sj6);
IkReal x4889=((1.0)*x4881);
IkReal x4890=(x4879*x4882);
IkReal x4891=(x4879*x4880);
IkReal x4892=(((x4881*x4884*x4887))+(((-1.0)*x4883*x4889))+(((2.0)*x4885*x4888))+(((2.0)*x4885*x4886))+(((-1.0)*x4891))+(((-1.0)*x4884*x4887))+((x4881*x4882))+(((-1.0)*x4889*x4890))+((x4881*x4891))+x4880+x4883+x4890);
j4eval[0]=x4892;
j4eval[1]=((IKabs((x4888+x4885+x4886)))+(IKabs(((((-1.0)*r01*sj6))+x4884))));
j4eval[2]=IKsign(x4892);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4893=cj6*cj6;
IkReal x4894=r01*r01;
IkReal x4895=cj5*cj5;
IkReal x4896=r00*r00;
IkReal x4897=r02*r02;
IkReal x4898=(cj6*r00);
IkReal x4899=((2.0)*r01);
IkReal x4900=(cj5*cj6);
IkReal x4901=(r02*sj5);
IkReal x4902=(cj5*r00*sj6);
IkReal x4903=(x4895*x4896);
IkReal x4904=(x4893*x4894);
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(IKsign((x4903+((x4895*x4904))+(((-1.0)*x4895*x4897))+(((-1.0)*x4893*x4903))+(((-1.0)*x4904))+(((-1.0)*sj6*x4898*x4899))+((x4893*x4896))+((sj6*x4895*x4898*x4899))+(((2.0)*x4901*x4902))+((x4899*x4900*x4901))+x4897+x4894)),-1);
if(!x4905.valid){
continue;
}
CheckValue<IkReal> x4906 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4898)),(x4901+x4902+((r01*x4900))),IKFAST_ATAN2_MAGTHRESH);
if(!x4906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4905.value)))+(x4906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4907=IKsin(j4);
IkReal x4908=IKcos(j4);
IkReal x4909=(cj5*cj6);
IkReal x4910=(r11*sj6);
IkReal x4911=(cj6*r20);
IkReal x4912=(cj6*r10);
IkReal x4913=(cj5*sj6);
IkReal x4914=(r21*sj6);
IkReal x4915=(cj6*r00);
IkReal x4916=(r01*sj6);
IkReal x4917=((1.0)*x4908);
IkReal x4918=((1.0)*x4907);
IkReal x4919=(sj5*x4918);
evalcond[0]=(((x4908*x4911))+(((-1.0)*r20*x4913*x4918))+(((-1.0)*r22*x4919))+(((-1.0)*r21*x4909*x4918))+(((-1.0)*x4914*x4917)));
evalcond[1]=((((-1.0)*r02*x4919))+(((-1.0)*r01*x4909*x4918))+((x4908*x4915))+(((-1.0)*r00*x4913*x4918))+(((-1.0)*x4916*x4917)));
evalcond[2]=((((-1.0)*x4911*x4918))+(((-1.0)*r22*sj5*x4917))+((x4907*x4914))+(((-1.0)*r20*x4913*x4917))+(((-1.0)*r21*x4909*x4917)));
evalcond[3]=((((-1.0)*x4912*x4918))+(((-1.0)*r10*x4913*x4917))+(((-1.0)*r12*sj5*x4917))+((x4907*x4910))+(((-1.0)*r11*x4909*x4917)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x4913*x4918))+(((-1.0)*r12*x4919))+(((-1.0)*x4910*x4917))+((x4908*x4912))+(((-1.0)*r11*x4909*x4918)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x4917))+(((-1.0)*x4915*x4918))+(((-1.0)*r01*x4909*x4917))+((x4907*x4916))+(((-1.0)*r00*x4913*x4917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4920=((1.0)*sj6);
CheckValue<IkReal> x4921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x4920))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x4921.valid){
continue;
}
CheckValue<IkReal> x4922 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4920))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4921.value)))+(x4922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4923=IKsin(j4);
IkReal x4924=IKcos(j4);
IkReal x4925=(cj5*cj6);
IkReal x4926=(r11*sj6);
IkReal x4927=(cj6*r20);
IkReal x4928=(cj6*r10);
IkReal x4929=(cj5*sj6);
IkReal x4930=(r21*sj6);
IkReal x4931=(cj6*r00);
IkReal x4932=(r01*sj6);
IkReal x4933=((1.0)*x4924);
IkReal x4934=((1.0)*x4923);
IkReal x4935=(sj5*x4934);
evalcond[0]=(((x4924*x4927))+(((-1.0)*x4930*x4933))+(((-1.0)*r21*x4925*x4934))+(((-1.0)*r22*x4935))+(((-1.0)*r20*x4929*x4934)));
evalcond[1]=(((x4924*x4931))+(((-1.0)*r02*x4935))+(((-1.0)*x4932*x4933))+(((-1.0)*r00*x4929*x4934))+(((-1.0)*r01*x4925*x4934)));
evalcond[2]=((((-1.0)*r21*x4925*x4933))+((x4923*x4930))+(((-1.0)*x4927*x4934))+(((-1.0)*r22*sj5*x4933))+(((-1.0)*r20*x4929*x4933)));
evalcond[3]=((((-1.0)*r12*sj5*x4933))+(((-1.0)*r10*x4929*x4933))+((x4923*x4926))+(((-1.0)*x4928*x4934))+(((-1.0)*r11*x4925*x4933)));
evalcond[4]=((-1.0)+((x4924*x4928))+(((-1.0)*r10*x4929*x4934))+(((-1.0)*x4926*x4933))+(((-1.0)*r12*x4935))+(((-1.0)*r11*x4925*x4934)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x4933))+(((-1.0)*x4931*x4934))+((x4923*x4932))+(((-1.0)*r00*x4929*x4933))+(((-1.0)*r01*x4925*x4933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4936=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4936.valid){
continue;
}
CheckValue<IkReal> x4937 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x4937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4936.value)))+(x4937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4938=IKsin(j4);
IkReal x4939=IKcos(j4);
IkReal x4940=(cj5*cj6);
IkReal x4941=(r11*sj6);
IkReal x4942=(cj6*r20);
IkReal x4943=(cj6*r10);
IkReal x4944=(cj5*sj6);
IkReal x4945=(r21*sj6);
IkReal x4946=(cj6*r00);
IkReal x4947=(r01*sj6);
IkReal x4948=((1.0)*x4939);
IkReal x4949=((1.0)*x4938);
IkReal x4950=(sj5*x4949);
evalcond[0]=((((-1.0)*r21*x4940*x4949))+((x4939*x4942))+(((-1.0)*x4945*x4948))+(((-1.0)*r22*x4950))+(((-1.0)*r20*x4944*x4949)));
evalcond[1]=((((-1.0)*x4947*x4948))+(((-1.0)*r01*x4940*x4949))+((x4939*x4946))+(((-1.0)*r02*x4950))+(((-1.0)*r00*x4944*x4949)));
evalcond[2]=((((-1.0)*x4942*x4949))+(((-1.0)*r21*x4940*x4948))+(((-1.0)*r22*sj5*x4948))+((x4938*x4945))+(((-1.0)*r20*x4944*x4948)));
evalcond[3]=((((-1.0)*x4943*x4949))+(((-1.0)*r11*x4940*x4948))+(((-1.0)*r10*x4944*x4948))+((x4938*x4941))+(((-1.0)*r12*sj5*x4948)));
evalcond[4]=((-1.0)+(((-1.0)*x4941*x4948))+(((-1.0)*r11*x4940*x4949))+(((-1.0)*r10*x4944*x4949))+((x4939*x4943))+(((-1.0)*r12*x4950)));
evalcond[5]=((1.0)+(((-1.0)*x4946*x4949))+(((-1.0)*r01*x4940*x4948))+(((-1.0)*r00*x4944*x4948))+((x4938*x4947))+(((-1.0)*r02*sj5*x4948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4951=cj6*cj6;
IkReal x4952=cj5*cj5;
IkReal x4953=(r22*sj5);
IkReal x4954=(cj0*r20);
IkReal x4955=((1.0)*r21);
IkReal x4956=(cj5*sj6);
IkReal x4957=(r02*r22);
IkReal x4958=(cj5*cj6);
IkReal x4959=(r02*sj5);
IkReal x4960=(cj6*sj6);
IkReal x4961=((1.0)*r20);
IkReal x4962=(r01*x4955);
IkReal x4963=(r00*r20*x4952);
CheckValue<IkReal> x4964=IKPowWithIntegerCheck(IKsign((((r00*r21*x4960))+(((-1.0)*x4956*x4959*x4961))+(((-1.0)*r00*x4953*x4956))+(((-1.0)*x4951*x4952*x4962))+((r01*r21*x4951))+(((-1.0)*x4962))+(((-1.0)*r01*x4952*x4960*x4961))+(((-1.0)*x4957))+((x4952*x4957))+((r01*r20*x4960))+(((-1.0)*r00*x4952*x4955*x4960))+(((-1.0)*r00*x4952*x4961))+(((-1.0)*x4955*x4958*x4959))+(((-1.0)*r00*x4951*x4961))+((x4951*x4963))+(((-1.0)*r01*x4953*x4958)))),-1);
if(!x4964.valid){
continue;
}
CheckValue<IkReal> x4965 = IKatan2WithCheck(IkReal((((cj6*x4954))+(((-1.0)*cj0*sj6*x4955)))),(((x4954*x4956))+((cj0*r21*x4958))+((cj0*x4953))),IKFAST_ATAN2_MAGTHRESH);
if(!x4965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4964.value)))+(x4965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4966=IKsin(j4);
IkReal x4967=IKcos(j4);
IkReal x4968=((1.0)*sj0);
IkReal x4969=((1.0)*cj6);
IkReal x4970=((1.0)*sj6);
IkReal x4971=(cj5*x4967);
IkReal x4972=(r20*x4966);
IkReal x4973=(cj6*x4967);
IkReal x4974=(r11*x4966);
IkReal x4975=(r21*x4966);
IkReal x4976=(r01*x4966);
IkReal x4977=((1.0)*sj5*x4966);
IkReal x4978=((1.0)*sj5*x4967);
IkReal x4979=(cj5*x4966*x4970);
evalcond[0]=((((-1.0)*cj5*x4970*x4972))+(((-1.0)*cj5*x4969*x4975))+(((-1.0)*r22*x4977))+((r20*x4973))+(((-1.0)*r21*x4967*x4970)));
evalcond[1]=((((-1.0)*r21*x4969*x4971))+((sj6*x4975))+(((-1.0)*r22*x4978))+(((-1.0)*r20*x4970*x4971))+(((-1.0)*x4969*x4972)));
evalcond[2]=((((-1.0)*r10*x4979))+cj0+((r10*x4973))+(((-1.0)*r12*x4977))+(((-1.0)*cj5*x4969*x4974))+(((-1.0)*r11*x4967*x4970)));
evalcond[3]=((((-1.0)*r01*x4967*x4970))+(((-1.0)*x4968))+(((-1.0)*cj5*x4969*x4976))+(((-1.0)*r02*x4977))+(((-1.0)*r00*x4979))+((r00*x4973)));
evalcond[4]=((((-1.0)*r01*x4969*x4971))+(((-1.0)*r00*x4970*x4971))+(((-1.0)*r00*x4966*x4969))+((sj6*x4976))+(((-1.0)*r02*x4978))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*x4966*x4969))+(((-1.0)*x4968))+(((-1.0)*r12*x4978))+((sj6*x4974))+(((-1.0)*r11*x4969*x4971))+(((-1.0)*r10*x4970*x4971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4980=(cj5*sj0);
CheckValue<IkReal> x4981 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x4980))+((r22*sj0*sj5))+((cj6*r21*x4980))),IKFAST_ATAN2_MAGTHRESH);
if(!x4981.valid){
continue;
}
CheckValue<IkReal> x4982=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4981.value)+(((1.5707963267949)*(x4982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4983=IKsin(j4);
IkReal x4984=IKcos(j4);
IkReal x4985=((1.0)*sj0);
IkReal x4986=((1.0)*cj6);
IkReal x4987=((1.0)*sj6);
IkReal x4988=(cj5*x4984);
IkReal x4989=(r20*x4983);
IkReal x4990=(cj6*x4984);
IkReal x4991=(r11*x4983);
IkReal x4992=(r21*x4983);
IkReal x4993=(r01*x4983);
IkReal x4994=((1.0)*sj5*x4983);
IkReal x4995=((1.0)*sj5*x4984);
IkReal x4996=(cj5*x4983*x4987);
evalcond[0]=((((-1.0)*cj5*x4987*x4989))+(((-1.0)*r22*x4994))+((r20*x4990))+(((-1.0)*r21*x4984*x4987))+(((-1.0)*cj5*x4986*x4992)));
evalcond[1]=((((-1.0)*r22*x4995))+(((-1.0)*x4986*x4989))+(((-1.0)*r21*x4986*x4988))+((sj6*x4992))+(((-1.0)*r20*x4987*x4988)));
evalcond[2]=(cj0+(((-1.0)*r12*x4994))+((r10*x4990))+(((-1.0)*r11*x4984*x4987))+(((-1.0)*r10*x4996))+(((-1.0)*cj5*x4986*x4991)));
evalcond[3]=((((-1.0)*r00*x4996))+(((-1.0)*r01*x4984*x4987))+(((-1.0)*r02*x4994))+(((-1.0)*x4985))+(((-1.0)*cj5*x4986*x4993))+((r00*x4990)));
evalcond[4]=(((sj6*x4993))+(((-1.0)*r02*x4995))+(((-1.0)*r00*x4987*x4988))+(((-1.0)*r00*x4983*x4986))+(((-1.0)*r01*x4986*x4988))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x4995))+((sj6*x4991))+(((-1.0)*x4985))+(((-1.0)*r10*x4987*x4988))+(((-1.0)*r10*x4983*x4986))+(((-1.0)*r11*x4986*x4988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4997=(cj0*sj6);
IkReal x4998=(cj0*cj6);
CheckValue<IkReal> x4999=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4999.valid){
continue;
}
CheckValue<IkReal> x5000 = IKatan2WithCheck(IkReal((((r20*x4998))+(((-1.0)*r21*x4997)))),(((cj5*r21*x4998))+((cj5*r20*x4997))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4999.value)))+(x5000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5001=IKsin(j4);
IkReal x5002=IKcos(j4);
IkReal x5003=((1.0)*sj0);
IkReal x5004=((1.0)*cj6);
IkReal x5005=((1.0)*sj6);
IkReal x5006=(cj5*x5002);
IkReal x5007=(r20*x5001);
IkReal x5008=(cj6*x5002);
IkReal x5009=(r11*x5001);
IkReal x5010=(r21*x5001);
IkReal x5011=(r01*x5001);
IkReal x5012=((1.0)*sj5*x5001);
IkReal x5013=((1.0)*sj5*x5002);
IkReal x5014=(cj5*x5001*x5005);
evalcond[0]=(((r20*x5008))+(((-1.0)*r21*x5002*x5005))+(((-1.0)*r22*x5012))+(((-1.0)*cj5*x5005*x5007))+(((-1.0)*cj5*x5004*x5010)));
evalcond[1]=((((-1.0)*r21*x5004*x5006))+(((-1.0)*x5004*x5007))+(((-1.0)*r22*x5013))+((sj6*x5010))+(((-1.0)*r20*x5005*x5006)));
evalcond[2]=(cj0+(((-1.0)*r11*x5002*x5005))+((r10*x5008))+(((-1.0)*r10*x5014))+(((-1.0)*cj5*x5004*x5009))+(((-1.0)*r12*x5012)));
evalcond[3]=((((-1.0)*r02*x5012))+((r00*x5008))+(((-1.0)*r01*x5002*x5005))+(((-1.0)*cj5*x5004*x5011))+(((-1.0)*r00*x5014))+(((-1.0)*x5003)));
evalcond[4]=((((-1.0)*r00*x5001*x5004))+(((-1.0)*r00*x5005*x5006))+(((-1.0)*r02*x5013))+((sj6*x5011))+(((-1.0)*cj0))+(((-1.0)*r01*x5004*x5006)));
evalcond[5]=(((sj6*x5009))+(((-1.0)*r10*x5001*x5004))+(((-1.0)*r10*x5005*x5006))+(((-1.0)*r11*x5004*x5006))+(((-1.0)*r12*x5013))+(((-1.0)*x5003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5015=((1.0)*cj5);
IkReal x5016=((0.01)*cj5);
IkReal x5017=(cj6*r11);
IkReal x5018=(r20*sj6);
IkReal x5019=((0.01)*sj5);
IkReal x5020=(cj6*r01);
IkReal x5021=((0.37429)*cj5);
IkReal x5022=((0.37429)*sj5);
IkReal x5023=(cj6*r21);
IkReal x5024=(r10*sj5*sj6);
IkReal x5025=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.069)+((x5016*x5018))+(((-1.0)*pz))+((r22*x5021))+((x5016*x5023))+(((-1.0)*x5018*x5022))+(((-1.0)*x5022*x5023))+((r22*x5019)));
evalcond[2]=((((-1.0)*r00*sj6*x5022))+((r02*x5021))+((r00*sj6*x5016))+((r02*x5019))+(((-1.0)*px))+((x5016*x5020))+(((-1.0)*x5020*x5022))+(((0.43342)*cj0)));
evalcond[3]=((((-1.0)*r10*sj6*x5022))+((x5016*x5017))+((r12*x5021))+((r10*sj6*x5016))+(((-1.0)*py))+(((0.43342)*sj0))+(((-1.0)*x5017*x5022))+((r12*x5019)));
evalcond[4]=((1.0)+((sj5*x5018))+(((-1.0)*r22*x5015))+((sj5*x5023)));
evalcond[5]=(((sj5*x5017))+x5024+(((-1.0)*r12*x5015)));
evalcond[6]=((((-1.0)*r02*x5015))+x5025+((sj5*x5020)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5026=(r20*sj0);
IkReal x5027=((1.0)*sj5);
IkReal x5028=(r21*sj0);
IkReal x5029=(((cj5*r12))+(((-1.0)*r10*sj6*x5027))+(((-1.0)*cj6*r11*x5027)));
j4eval[0]=x5029;
j4eval[1]=IKsign(x5029);
j4eval[2]=((IKabs(((((-1.0)*sj6*x5028))+((cj6*x5026)))))+(IKabs((((cj5*cj6*x5028))+((cj5*sj6*x5026))+((r22*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5030=(cj0*sj6);
IkReal x5031=((1.0)*sj5);
IkReal x5032=(cj0*cj6);
IkReal x5033=((((-1.0)*cj6*r01*x5031))+(((-1.0)*r00*sj6*x5031))+((cj5*r02)));
j4eval[0]=x5033;
j4eval[1]=IKsign(x5033);
j4eval[2]=((IKabs((((r20*x5032))+(((-1.0)*r21*x5030)))))+(IKabs((((cj5*r20*x5030))+((cj5*r21*x5032))+((cj0*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5034=cj6*cj6;
IkReal x5035=cj5*cj5;
IkReal x5036=(r02*r22);
IkReal x5037=(r22*sj5);
IkReal x5038=(r00*r20);
IkReal x5039=((1.0)*r21);
IkReal x5040=(r20*sj6);
IkReal x5041=(cj6*r01);
IkReal x5042=(cj0*cj5);
IkReal x5043=(r00*sj6);
IkReal x5044=((1.0)*cj5);
IkReal x5045=(cj6*r21);
IkReal x5046=(cj5*r02*sj5);
IkReal x5047=((1.0)*x5035);
IkReal x5048=(x5034*x5035);
IkReal x5049=((((-1.0)*x5037*x5041*x5044))+(((-1.0)*cj6*x5035*x5039*x5043))+((x5040*x5041))+(((-1.0)*x5036))+((x5038*x5048))+((x5035*x5036))+((x5043*x5045))+(((-1.0)*x5040*x5041*x5047))+(((-1.0)*cj6*x5039*x5046))+(((-1.0)*x5037*x5043*x5044))+(((-1.0)*x5038*x5047))+(((-1.0)*x5034*x5038))+(((-1.0)*r02*sj5*x5040*x5044))+(((-1.0)*r01*x5039*x5048))+(((-1.0)*r01*x5039))+((r01*r21*x5034)));
j4eval[0]=x5049;
j4eval[1]=((IKabs((((x5040*x5042))+((x5042*x5045))+((cj0*x5037)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x5039))))));
j4eval[2]=IKsign(x5049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5050=((1.0)*cj5);
IkReal x5051=((0.01)*cj5);
IkReal x5052=(cj6*r11);
IkReal x5053=(r20*sj6);
IkReal x5054=((0.01)*sj5);
IkReal x5055=(cj6*r01);
IkReal x5056=((0.37429)*cj5);
IkReal x5057=((0.37429)*sj5);
IkReal x5058=(cj6*r21);
IkReal x5059=(r10*sj5*sj6);
IkReal x5060=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x5054))+((r22*x5056))+(((-1.0)*x5053*x5057))+(((-1.0)*pz))+((x5051*x5053))+((x5051*x5058))+(((-1.0)*x5057*x5058)));
evalcond[2]=((((-1.0)*r00*sj6*x5057))+(((-1.0)*x5055*x5057))+(((-1.0)*px))+((r00*sj6*x5051))+((x5051*x5055))+((r02*x5056))+((r02*x5054)));
evalcond[3]=((0.43342)+(((-1.0)*r10*sj6*x5057))+((r12*x5054))+((r12*x5056))+(((-1.0)*py))+(((-1.0)*x5052*x5057))+((x5051*x5052))+((r10*sj6*x5051)));
evalcond[4]=((1.0)+(((-1.0)*r22*x5050))+((sj5*x5053))+((sj5*x5058)));
evalcond[5]=((((-1.0)*r12*x5050))+x5059+((sj5*x5052)));
evalcond[6]=(x5060+((sj5*x5055))+(((-1.0)*r02*x5050)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5061=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5061;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5061);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5062=((1.0)*sj6);
IkReal x5063=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x5062)));
j4eval[0]=x5063;
j4eval[1]=IKsign(x5063);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5062))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5064=cj6*cj6;
IkReal x5065=cj5*cj5;
IkReal x5066=r10*r10;
IkReal x5067=r11*r11;
IkReal x5068=r12*r12;
IkReal x5069=(r10*sj6);
IkReal x5070=(r12*sj5);
IkReal x5071=((2.0)*cj6*r11);
IkReal x5072=((1.0)*x5066);
IkReal x5073=(x5064*x5067);
IkReal x5074=((((-2.0)*cj5*x5069*x5070))+(((-1.0)*x5064*x5072))+(((-1.0)*x5065*x5073))+((x5064*x5065*x5066))+x5073+(((-1.0)*x5065*x5072))+(((-1.0)*x5065*x5069*x5071))+(((-1.0)*cj5*x5070*x5071))+(((-1.0)*x5067))+(((-1.0)*x5068))+((x5069*x5071))+((x5065*x5068)));
j4eval[0]=x5074;
j4eval[1]=((IKabs((x5070+((cj5*cj6*r11))+((cj5*x5069)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5075=cj6*cj6;
IkReal x5076=cj5*cj5;
IkReal x5077=r10*r10;
IkReal x5078=r11*r11;
IkReal x5079=r12*r12;
IkReal x5080=(r10*sj6);
IkReal x5081=(r12*sj5);
IkReal x5082=((2.0)*cj6*r11);
IkReal x5083=(x5075*x5078);
IkReal x5084=(x5076*x5077);
CheckValue<IkReal> x5085=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5084))+((x5080*x5082))+(((-1.0)*x5076*x5080*x5082))+(((-1.0)*x5076*x5083))+((x5076*x5079))+x5083+(((-1.0)*x5078))+(((-1.0)*x5079))+(((-1.0)*x5075*x5077))+(((-2.0)*cj5*x5080*x5081))+(((-1.0)*cj5*x5081*x5082))+((x5075*x5084)))),-1);
if(!x5085.valid){
continue;
}
CheckValue<IkReal> x5086 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x5080))+x5081+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5085.value)))+(x5086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5087=IKsin(j4);
IkReal x5088=IKcos(j4);
IkReal x5089=(cj5*cj6);
IkReal x5090=(r11*sj6);
IkReal x5091=(cj6*r20);
IkReal x5092=(cj6*r10);
IkReal x5093=(cj5*sj6);
IkReal x5094=(r01*sj6);
IkReal x5095=(r21*sj6);
IkReal x5096=(cj6*r00);
IkReal x5097=((1.0)*x5088);
IkReal x5098=((1.0)*x5087);
IkReal x5099=(sj5*x5098);
evalcond[0]=((((-1.0)*r22*x5099))+(((-1.0)*r20*x5093*x5098))+(((-1.0)*r21*x5089*x5098))+((x5088*x5091))+(((-1.0)*x5095*x5097)));
evalcond[1]=((((-1.0)*r10*x5093*x5098))+(((-1.0)*r11*x5089*x5098))+(((-1.0)*x5090*x5097))+((x5088*x5092))+(((-1.0)*r12*x5099)));
evalcond[2]=(((x5087*x5095))+(((-1.0)*x5091*x5098))+(((-1.0)*r20*x5093*x5097))+(((-1.0)*r21*x5089*x5097))+(((-1.0)*r22*sj5*x5097)));
evalcond[3]=(((x5087*x5094))+(((-1.0)*x5096*x5098))+(((-1.0)*r01*x5089*x5097))+(((-1.0)*r00*x5093*x5097))+(((-1.0)*r02*sj5*x5097)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5089*x5098))+((x5088*x5096))+(((-1.0)*r00*x5093*x5098))+(((-1.0)*r02*x5099))+(((-1.0)*x5094*x5097)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x5093*x5097))+((x5087*x5090))+(((-1.0)*r12*sj5*x5097))+(((-1.0)*r11*x5089*x5097))+(((-1.0)*x5092*x5098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5100=((1.0)*sj6);
CheckValue<IkReal> x5101 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5100))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5101.valid){
continue;
}
CheckValue<IkReal> x5102=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x5100)))),-1);
if(!x5102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5101.value)+(((1.5707963267949)*(x5102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5103=IKsin(j4);
IkReal x5104=IKcos(j4);
IkReal x5105=(cj5*cj6);
IkReal x5106=(r11*sj6);
IkReal x5107=(cj6*r20);
IkReal x5108=(cj6*r10);
IkReal x5109=(cj5*sj6);
IkReal x5110=(r01*sj6);
IkReal x5111=(r21*sj6);
IkReal x5112=(cj6*r00);
IkReal x5113=((1.0)*x5104);
IkReal x5114=((1.0)*x5103);
IkReal x5115=(sj5*x5114);
evalcond[0]=((((-1.0)*r22*x5115))+((x5104*x5107))+(((-1.0)*r21*x5105*x5114))+(((-1.0)*r20*x5109*x5114))+(((-1.0)*x5111*x5113)));
evalcond[1]=((((-1.0)*r10*x5109*x5114))+((x5104*x5108))+(((-1.0)*x5106*x5113))+(((-1.0)*r11*x5105*x5114))+(((-1.0)*r12*x5115)));
evalcond[2]=((((-1.0)*r21*x5105*x5113))+(((-1.0)*r20*x5109*x5113))+(((-1.0)*x5107*x5114))+((x5103*x5111))+(((-1.0)*r22*sj5*x5113)));
evalcond[3]=((((-1.0)*x5112*x5114))+(((-1.0)*r00*x5109*x5113))+(((-1.0)*r02*sj5*x5113))+((x5103*x5110))+(((-1.0)*r01*x5105*x5113)));
evalcond[4]=((1.0)+((x5104*x5112))+(((-1.0)*r02*x5115))+(((-1.0)*x5110*x5113))+(((-1.0)*r00*x5109*x5114))+(((-1.0)*r01*x5105*x5114)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x5109*x5113))+(((-1.0)*x5108*x5114))+(((-1.0)*r11*x5105*x5113))+((x5103*x5106))+(((-1.0)*r12*sj5*x5113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5116=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5116.valid){
continue;
}
CheckValue<IkReal> x5117 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5117.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5116.value)))+(x5117.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5118=IKsin(j4);
IkReal x5119=IKcos(j4);
IkReal x5120=(cj5*cj6);
IkReal x5121=(r11*sj6);
IkReal x5122=(cj6*r20);
IkReal x5123=(cj6*r10);
IkReal x5124=(cj5*sj6);
IkReal x5125=(r01*sj6);
IkReal x5126=(r21*sj6);
IkReal x5127=(cj6*r00);
IkReal x5128=((1.0)*x5119);
IkReal x5129=((1.0)*x5118);
IkReal x5130=(sj5*x5129);
evalcond[0]=(((x5119*x5122))+(((-1.0)*r20*x5124*x5129))+(((-1.0)*x5126*x5128))+(((-1.0)*r22*x5130))+(((-1.0)*r21*x5120*x5129)));
evalcond[1]=(((x5119*x5123))+(((-1.0)*r10*x5124*x5129))+(((-1.0)*x5121*x5128))+(((-1.0)*r12*x5130))+(((-1.0)*r11*x5120*x5129)));
evalcond[2]=((((-1.0)*r20*x5124*x5128))+(((-1.0)*r22*sj5*x5128))+(((-1.0)*x5122*x5129))+((x5118*x5126))+(((-1.0)*r21*x5120*x5128)));
evalcond[3]=((((-1.0)*r02*sj5*x5128))+(((-1.0)*r00*x5124*x5128))+((x5118*x5125))+(((-1.0)*x5127*x5129))+(((-1.0)*r01*x5120*x5128)));
evalcond[4]=((1.0)+(((-1.0)*x5125*x5128))+((x5119*x5127))+(((-1.0)*r02*x5130))+(((-1.0)*r00*x5124*x5129))+(((-1.0)*r01*x5120*x5129)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x5124*x5128))+(((-1.0)*x5123*x5129))+(((-1.0)*r12*sj5*x5128))+((x5118*x5121))+(((-1.0)*r11*x5120*x5128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5131=((1.0)*cj5);
IkReal x5132=((0.01)*cj5);
IkReal x5133=(cj6*r11);
IkReal x5134=(r20*sj6);
IkReal x5135=((0.01)*sj5);
IkReal x5136=(cj6*r01);
IkReal x5137=((0.37429)*cj5);
IkReal x5138=((0.37429)*sj5);
IkReal x5139=(cj6*r21);
IkReal x5140=(r10*sj5*sj6);
IkReal x5141=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x5132*x5139))+((x5132*x5134))+((r22*x5137))+((r22*x5135))+(((-1.0)*pz))+(((-1.0)*x5138*x5139))+(((-1.0)*x5134*x5138)));
evalcond[2]=(((x5132*x5136))+(((-1.0)*x5136*x5138))+(((-1.0)*r00*sj6*x5138))+(((-1.0)*px))+((r00*sj6*x5132))+((r02*x5137))+((r02*x5135)));
evalcond[3]=((-0.43342)+((x5132*x5133))+((r12*x5137))+((r12*x5135))+(((-1.0)*py))+(((-1.0)*r10*sj6*x5138))+(((-1.0)*x5133*x5138))+((r10*sj6*x5132)));
evalcond[4]=((1.0)+((sj5*x5134))+((sj5*x5139))+(((-1.0)*r22*x5131)));
evalcond[5]=(((sj5*x5133))+x5140+(((-1.0)*r12*x5131)));
evalcond[6]=(((sj5*x5136))+x5141+(((-1.0)*r02*x5131)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5142=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5142;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5142);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5143=((1.0)*sj5);
IkReal x5144=(((cj5*r22))+(((-1.0)*cj6*r21*x5143))+(((-1.0)*r20*sj6*x5143)));
j4eval[0]=x5144;
j4eval[1]=IKsign(x5144);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5145=r11*r11;
IkReal x5146=cj5*cj5;
IkReal x5147=cj6*cj6;
IkReal x5148=r10*r10;
IkReal x5149=r12*r12;
IkReal x5150=(r12*sj5);
IkReal x5151=(cj6*r10);
IkReal x5152=((1.0)*x5147);
IkReal x5153=(cj5*cj6*r11);
IkReal x5154=(cj5*r10*sj6);
IkReal x5155=((2.0)*r11*sj6);
IkReal x5156=(x5146*x5148);
IkReal x5157=(((x5147*x5148))+((x5145*x5146*x5147))+(((-1.0)*x5151*x5155))+x5156+x5149+x5145+(((-1.0)*x5145*x5152))+(((2.0)*x5150*x5153))+(((2.0)*x5150*x5154))+(((-1.0)*x5152*x5156))+(((-1.0)*x5146*x5149))+((x5146*x5151*x5155)));
j4eval[0]=x5157;
j4eval[1]=IKsign(x5157);
j4eval[2]=((IKabs((x5151+(((-1.0)*r11*sj6)))))+(IKabs((x5150+x5153+x5154))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5158=r11*r11;
IkReal x5159=cj5*cj5;
IkReal x5160=cj6*cj6;
IkReal x5161=r10*r10;
IkReal x5162=r12*r12;
IkReal x5163=(r10*sj6);
IkReal x5164=(r12*sj5);
IkReal x5165=((1.0)*x5160);
IkReal x5166=(cj5*cj6*r11);
IkReal x5167=((2.0)*cj6*r11);
IkReal x5168=(x5159*x5161);
CheckValue<IkReal> x5169 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x5164+x5166+((cj5*x5163))),IKFAST_ATAN2_MAGTHRESH);
if(!x5169.valid){
continue;
}
CheckValue<IkReal> x5170=IKPowWithIntegerCheck(IKsign((((x5160*x5161))+((x5158*x5159*x5160))+(((2.0)*cj5*x5163*x5164))+x5158+x5162+x5168+(((2.0)*x5164*x5166))+(((-1.0)*x5158*x5165))+(((-1.0)*x5159*x5162))+(((-1.0)*x5163*x5167))+(((-1.0)*x5165*x5168))+((x5159*x5163*x5167)))),-1);
if(!x5170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5169.value)+(((1.5707963267949)*(x5170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5171=IKsin(j4);
IkReal x5172=IKcos(j4);
IkReal x5173=(cj5*cj6);
IkReal x5174=(r11*sj6);
IkReal x5175=(cj6*r20);
IkReal x5176=(cj6*r10);
IkReal x5177=(cj5*sj6);
IkReal x5178=(r01*sj6);
IkReal x5179=(r21*sj6);
IkReal x5180=(cj6*r00);
IkReal x5181=((1.0)*x5172);
IkReal x5182=((1.0)*x5171);
IkReal x5183=(sj5*x5182);
evalcond[0]=((((-1.0)*r22*x5183))+(((-1.0)*r21*x5173*x5182))+(((-1.0)*x5179*x5181))+(((-1.0)*r20*x5177*x5182))+((x5172*x5175)));
evalcond[1]=((((-1.0)*r10*x5177*x5182))+(((-1.0)*r11*x5173*x5182))+(((-1.0)*r12*x5183))+((x5172*x5176))+(((-1.0)*x5174*x5181)));
evalcond[2]=((((-1.0)*x5175*x5182))+(((-1.0)*r21*x5173*x5181))+(((-1.0)*r22*sj5*x5181))+((x5171*x5179))+(((-1.0)*r20*x5177*x5181)));
evalcond[3]=((((-1.0)*r02*sj5*x5181))+(((-1.0)*r01*x5173*x5181))+(((-1.0)*x5180*x5182))+((x5171*x5178))+(((-1.0)*r00*x5177*x5181)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5183))+(((-1.0)*r01*x5173*x5182))+((x5172*x5180))+(((-1.0)*x5178*x5181))+(((-1.0)*r00*x5177*x5182)));
evalcond[5]=((1.0)+(((-1.0)*x5176*x5182))+(((-1.0)*r10*x5177*x5181))+(((-1.0)*r12*sj5*x5181))+(((-1.0)*r11*x5173*x5181))+((x5171*x5174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5184=((1.0)*sj5);
CheckValue<IkReal> x5185 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5185.valid){
continue;
}
CheckValue<IkReal> x5186=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x5184))+(((-1.0)*r20*sj6*x5184)))),-1);
if(!x5186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5185.value)+(((1.5707963267949)*(x5186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5187=IKsin(j4);
IkReal x5188=IKcos(j4);
IkReal x5189=(cj5*cj6);
IkReal x5190=(r11*sj6);
IkReal x5191=(cj6*r20);
IkReal x5192=(cj6*r10);
IkReal x5193=(cj5*sj6);
IkReal x5194=(r01*sj6);
IkReal x5195=(r21*sj6);
IkReal x5196=(cj6*r00);
IkReal x5197=((1.0)*x5188);
IkReal x5198=((1.0)*x5187);
IkReal x5199=(sj5*x5198);
evalcond[0]=(((x5188*x5191))+(((-1.0)*r22*x5199))+(((-1.0)*r20*x5193*x5198))+(((-1.0)*r21*x5189*x5198))+(((-1.0)*x5195*x5197)));
evalcond[1]=((((-1.0)*r11*x5189*x5198))+(((-1.0)*r12*x5199))+((x5188*x5192))+(((-1.0)*r10*x5193*x5198))+(((-1.0)*x5190*x5197)));
evalcond[2]=((((-1.0)*x5191*x5198))+(((-1.0)*r20*x5193*x5197))+(((-1.0)*r21*x5189*x5197))+(((-1.0)*r22*sj5*x5197))+((x5187*x5195)));
evalcond[3]=((((-1.0)*r01*x5189*x5197))+(((-1.0)*x5196*x5198))+(((-1.0)*r00*x5193*x5197))+(((-1.0)*r02*sj5*x5197))+((x5187*x5194)));
evalcond[4]=((-1.0)+((x5188*x5196))+(((-1.0)*r01*x5189*x5198))+(((-1.0)*r02*x5199))+(((-1.0)*r00*x5193*x5198))+(((-1.0)*x5194*x5197)));
evalcond[5]=((1.0)+(((-1.0)*r11*x5189*x5197))+(((-1.0)*x5192*x5198))+(((-1.0)*r12*sj5*x5197))+(((-1.0)*r10*x5193*x5197))+((x5187*x5190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5200 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5200.valid){
continue;
}
CheckValue<IkReal> x5201=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5200.value)+(((1.5707963267949)*(x5201.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5202=IKsin(j4);
IkReal x5203=IKcos(j4);
IkReal x5204=(cj5*cj6);
IkReal x5205=(r11*sj6);
IkReal x5206=(cj6*r20);
IkReal x5207=(cj6*r10);
IkReal x5208=(cj5*sj6);
IkReal x5209=(r01*sj6);
IkReal x5210=(r21*sj6);
IkReal x5211=(cj6*r00);
IkReal x5212=((1.0)*x5203);
IkReal x5213=((1.0)*x5202);
IkReal x5214=(sj5*x5213);
evalcond[0]=(((x5203*x5206))+(((-1.0)*r22*x5214))+(((-1.0)*r21*x5204*x5213))+(((-1.0)*r20*x5208*x5213))+(((-1.0)*x5210*x5212)));
evalcond[1]=(((x5203*x5207))+(((-1.0)*r11*x5204*x5213))+(((-1.0)*r10*x5208*x5213))+(((-1.0)*x5205*x5212))+(((-1.0)*r12*x5214)));
evalcond[2]=((((-1.0)*r22*sj5*x5212))+(((-1.0)*x5206*x5213))+((x5202*x5210))+(((-1.0)*r21*x5204*x5212))+(((-1.0)*r20*x5208*x5212)));
evalcond[3]=((((-1.0)*r00*x5208*x5212))+((x5202*x5209))+(((-1.0)*r01*x5204*x5212))+(((-1.0)*r02*sj5*x5212))+(((-1.0)*x5211*x5213)));
evalcond[4]=((-1.0)+((x5203*x5211))+(((-1.0)*r00*x5208*x5213))+(((-1.0)*r01*x5204*x5213))+(((-1.0)*x5209*x5212))+(((-1.0)*r02*x5214)));
evalcond[5]=((1.0)+((x5202*x5205))+(((-1.0)*r11*x5204*x5212))+(((-1.0)*r12*sj5*x5212))+(((-1.0)*r10*x5208*x5212))+(((-1.0)*x5207*x5213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5215=((1.0)*cj5);
IkReal x5216=((0.01)*cj5);
IkReal x5217=(cj6*r11);
IkReal x5218=(r20*sj6);
IkReal x5219=((0.01)*sj5);
IkReal x5220=(cj6*r01);
IkReal x5221=((0.37429)*cj5);
IkReal x5222=((0.37429)*sj5);
IkReal x5223=(cj6*r21);
IkReal x5224=(r10*sj5*sj6);
IkReal x5225=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x5221))+(((-1.0)*x5222*x5223))+((x5216*x5218))+(((-1.0)*pz))+((x5216*x5223))+(((-1.0)*x5218*x5222))+((r22*x5219)));
evalcond[2]=((0.43342)+(((-1.0)*r00*sj6*x5222))+((r02*x5221))+(((-1.0)*px))+((x5216*x5220))+(((-1.0)*x5220*x5222))+((r02*x5219))+((r00*sj6*x5216)));
evalcond[3]=(((r10*sj6*x5216))+(((-1.0)*x5217*x5222))+((x5216*x5217))+((r12*x5219))+(((-1.0)*py))+((r12*x5221))+(((-1.0)*r10*sj6*x5222)));
evalcond[4]=((1.0)+((sj5*x5223))+(((-1.0)*r22*x5215))+((sj5*x5218)));
evalcond[5]=(x5224+((sj5*x5217))+(((-1.0)*r12*x5215)));
evalcond[6]=(x5225+((sj5*x5220))+(((-1.0)*r02*x5215)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5226=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5226;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5227=((1.0)*sj6);
IkReal x5228=((((-1.0)*r00*sj5*x5227))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x5228;
j4eval[1]=IKsign(x5228);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5227))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5229=cj6*cj6;
IkReal x5230=cj5*cj5;
IkReal x5231=r00*r00;
IkReal x5232=r01*r01;
IkReal x5233=r02*r02;
IkReal x5234=(cj6*r00);
IkReal x5235=(cj5*cj6*r01);
IkReal x5236=((2.0)*r02*sj5);
IkReal x5237=((1.0)*x5229);
IkReal x5238=((2.0)*r01*sj6);
IkReal x5239=(cj5*r00*sj6);
IkReal x5240=(x5230*x5231);
IkReal x5241=((((-1.0)*x5236*x5239))+(((-1.0)*x5235*x5236))+(((-1.0)*x5240))+(((-1.0)*x5232))+(((-1.0)*x5233))+((x5229*x5240))+((x5229*x5232))+(((-1.0)*x5231*x5237))+((x5230*x5233))+((x5234*x5238))+(((-1.0)*x5230*x5232*x5237))+(((-1.0)*x5230*x5234*x5238)));
j4eval[0]=x5241;
j4eval[1]=((IKabs((x5239+x5235+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x5234))));
j4eval[2]=IKsign(x5241);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5242=cj6*cj6;
IkReal x5243=cj5*cj5;
IkReal x5244=r00*r00;
IkReal x5245=r01*r01;
IkReal x5246=r02*r02;
IkReal x5247=(cj6*r00);
IkReal x5248=(cj5*cj6*r01);
IkReal x5249=((2.0)*r02*sj5);
IkReal x5250=((1.0)*x5242);
IkReal x5251=((2.0)*r01*sj6);
IkReal x5252=(cj5*r00*sj6);
IkReal x5253=(x5243*x5244);
CheckValue<IkReal> x5254 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x5247)),(x5252+x5248+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5254.valid){
continue;
}
CheckValue<IkReal> x5255=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5243*x5247*x5251))+(((-1.0)*x5253))+(((-1.0)*x5249*x5252))+(((-1.0)*x5246))+(((-1.0)*x5245))+(((-1.0)*x5248*x5249))+((x5247*x5251))+((x5243*x5246))+((x5242*x5245))+((x5242*x5253))+(((-1.0)*x5243*x5245*x5250))+(((-1.0)*x5244*x5250)))),-1);
if(!x5255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5254.value)+(((1.5707963267949)*(x5255.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5256=IKsin(j4);
IkReal x5257=IKcos(j4);
IkReal x5258=(cj5*cj6);
IkReal x5259=(r11*sj6);
IkReal x5260=(cj6*r20);
IkReal x5261=(cj6*r10);
IkReal x5262=(cj5*sj6);
IkReal x5263=(r21*sj6);
IkReal x5264=(cj6*r00);
IkReal x5265=(r01*sj6);
IkReal x5266=((1.0)*x5257);
IkReal x5267=((1.0)*x5256);
IkReal x5268=(sj5*x5267);
evalcond[0]=((((-1.0)*x5263*x5266))+(((-1.0)*r21*x5258*x5267))+(((-1.0)*r22*x5268))+((x5257*x5260))+(((-1.0)*r20*x5262*x5267)));
evalcond[1]=((((-1.0)*r02*x5268))+(((-1.0)*r01*x5258*x5267))+(((-1.0)*r00*x5262*x5267))+((x5257*x5264))+(((-1.0)*x5265*x5266)));
evalcond[2]=((((-1.0)*r22*sj5*x5266))+(((-1.0)*r21*x5258*x5266))+((x5256*x5263))+(((-1.0)*r20*x5262*x5266))+(((-1.0)*x5260*x5267)));
evalcond[3]=((((-1.0)*r12*sj5*x5266))+(((-1.0)*r11*x5258*x5266))+((x5256*x5259))+(((-1.0)*r10*x5262*x5266))+(((-1.0)*x5261*x5267)));
evalcond[4]=((-1.0)+(((-1.0)*x5259*x5266))+(((-1.0)*r12*x5268))+(((-1.0)*r11*x5258*x5267))+((x5257*x5261))+(((-1.0)*r10*x5262*x5267)));
evalcond[5]=((-1.0)+(((-1.0)*x5264*x5267))+(((-1.0)*r02*sj5*x5266))+(((-1.0)*r01*x5258*x5266))+((x5256*x5265))+(((-1.0)*r00*x5262*x5266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5269=((1.0)*sj6);
CheckValue<IkReal> x5270=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x5269))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x5270.valid){
continue;
}
CheckValue<IkReal> x5271 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5269))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5270.value)))+(x5271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5272=IKsin(j4);
IkReal x5273=IKcos(j4);
IkReal x5274=(cj5*cj6);
IkReal x5275=(r11*sj6);
IkReal x5276=(cj6*r20);
IkReal x5277=(cj6*r10);
IkReal x5278=(cj5*sj6);
IkReal x5279=(r21*sj6);
IkReal x5280=(cj6*r00);
IkReal x5281=(r01*sj6);
IkReal x5282=((1.0)*x5273);
IkReal x5283=((1.0)*x5272);
IkReal x5284=(sj5*x5283);
evalcond[0]=((((-1.0)*r22*x5284))+((x5273*x5276))+(((-1.0)*x5279*x5282))+(((-1.0)*r20*x5278*x5283))+(((-1.0)*r21*x5274*x5283)));
evalcond[1]=(((x5273*x5280))+(((-1.0)*x5281*x5282))+(((-1.0)*r02*x5284))+(((-1.0)*r01*x5274*x5283))+(((-1.0)*r00*x5278*x5283)));
evalcond[2]=(((x5272*x5279))+(((-1.0)*r20*x5278*x5282))+(((-1.0)*r21*x5274*x5282))+(((-1.0)*x5276*x5283))+(((-1.0)*r22*sj5*x5282)));
evalcond[3]=(((x5272*x5275))+(((-1.0)*r12*sj5*x5282))+(((-1.0)*r10*x5278*x5282))+(((-1.0)*x5277*x5283))+(((-1.0)*r11*x5274*x5282)));
evalcond[4]=((-1.0)+((x5273*x5277))+(((-1.0)*x5275*x5282))+(((-1.0)*r12*x5284))+(((-1.0)*r10*x5278*x5283))+(((-1.0)*r11*x5274*x5283)));
evalcond[5]=((-1.0)+((x5272*x5281))+(((-1.0)*r01*x5274*x5282))+(((-1.0)*r02*sj5*x5282))+(((-1.0)*r00*x5278*x5282))+(((-1.0)*x5280*x5283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5285=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5285.valid){
continue;
}
CheckValue<IkReal> x5286 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x5286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5285.value)))+(x5286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5287=IKsin(j4);
IkReal x5288=IKcos(j4);
IkReal x5289=(cj5*cj6);
IkReal x5290=(r11*sj6);
IkReal x5291=(cj6*r20);
IkReal x5292=(cj6*r10);
IkReal x5293=(cj5*sj6);
IkReal x5294=(r21*sj6);
IkReal x5295=(cj6*r00);
IkReal x5296=(r01*sj6);
IkReal x5297=((1.0)*x5288);
IkReal x5298=((1.0)*x5287);
IkReal x5299=(sj5*x5298);
evalcond[0]=((((-1.0)*r22*x5299))+((x5288*x5291))+(((-1.0)*x5294*x5297))+(((-1.0)*r21*x5289*x5298))+(((-1.0)*r20*x5293*x5298)));
evalcond[1]=((((-1.0)*r00*x5293*x5298))+(((-1.0)*x5296*x5297))+((x5288*x5295))+(((-1.0)*r01*x5289*x5298))+(((-1.0)*r02*x5299)));
evalcond[2]=(((x5287*x5294))+(((-1.0)*r21*x5289*x5297))+(((-1.0)*x5291*x5298))+(((-1.0)*r20*x5293*x5297))+(((-1.0)*r22*sj5*x5297)));
evalcond[3]=((((-1.0)*r11*x5289*x5297))+(((-1.0)*r10*x5293*x5297))+(((-1.0)*x5292*x5298))+(((-1.0)*r12*sj5*x5297))+((x5287*x5290)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5289*x5298))+(((-1.0)*r10*x5293*x5298))+(((-1.0)*r12*x5299))+((x5288*x5292))+(((-1.0)*x5290*x5297)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x5293*x5297))+(((-1.0)*x5295*x5298))+(((-1.0)*r01*x5289*x5297))+((x5287*x5296))+(((-1.0)*r02*sj5*x5297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5300=((1.0)*cj5);
IkReal x5301=((0.01)*cj5);
IkReal x5302=(cj6*r11);
IkReal x5303=(r20*sj6);
IkReal x5304=((0.01)*sj5);
IkReal x5305=(cj6*r01);
IkReal x5306=((0.37429)*cj5);
IkReal x5307=((0.37429)*sj5);
IkReal x5308=(cj6*r21);
IkReal x5309=(r10*sj5*sj6);
IkReal x5310=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x5301*x5308))+((x5301*x5303))+(((-1.0)*x5303*x5307))+((r22*x5304))+((r22*x5306))+(((-1.0)*pz))+(((-1.0)*x5307*x5308)));
evalcond[2]=((-0.43342)+((x5301*x5305))+(((-1.0)*x5305*x5307))+(((-1.0)*r00*sj6*x5307))+((r02*x5304))+((r02*x5306))+(((-1.0)*px))+((r00*sj6*x5301)));
evalcond[3]=(((x5301*x5302))+((r10*sj6*x5301))+(((-1.0)*x5302*x5307))+(((-1.0)*py))+((r12*x5304))+((r12*x5306))+(((-1.0)*r10*sj6*x5307)));
evalcond[4]=((1.0)+((sj5*x5303))+((sj5*x5308))+(((-1.0)*r22*x5300)));
evalcond[5]=(((sj5*x5302))+x5309+(((-1.0)*r12*x5300)));
evalcond[6]=(((sj5*x5305))+x5310+(((-1.0)*r02*x5300)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5311=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5311;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5311);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5312=((1.0)*sj5);
IkReal x5313=(((cj5*r22))+(((-1.0)*r20*sj6*x5312))+(((-1.0)*cj6*r21*x5312)));
j4eval[0]=x5313;
j4eval[1]=IKsign(x5313);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5314=cj6*cj6;
IkReal x5315=r01*r01;
IkReal x5316=cj5*cj5;
IkReal x5317=r00*r00;
IkReal x5318=r02*r02;
IkReal x5319=(cj6*r00);
IkReal x5320=(r02*sj5);
IkReal x5321=(cj5*cj6*r01);
IkReal x5322=((2.0)*r01*sj6);
IkReal x5323=(cj5*r00*sj6);
IkReal x5324=((1.0)*x5316);
IkReal x5325=(x5314*x5317);
IkReal x5326=(x5314*x5315);
IkReal x5327=((((-1.0)*x5318*x5324))+(((-1.0)*x5326))+(((2.0)*x5320*x5323))+(((2.0)*x5320*x5321))+x5325+x5318+x5315+((x5316*x5319*x5322))+((x5316*x5317))+(((-1.0)*x5324*x5325))+(((-1.0)*x5319*x5322))+((x5316*x5326)));
j4eval[0]=x5327;
j4eval[1]=((IKabs((x5323+x5320+x5321)))+(IKabs(((((-1.0)*r01*sj6))+x5319))));
j4eval[2]=IKsign(x5327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5328=cj6*cj6;
IkReal x5329=r01*r01;
IkReal x5330=cj5*cj5;
IkReal x5331=r00*r00;
IkReal x5332=r02*r02;
IkReal x5333=(cj6*r00);
IkReal x5334=((2.0)*r01);
IkReal x5335=(cj5*cj6);
IkReal x5336=(r02*sj5);
IkReal x5337=(cj5*r00*sj6);
IkReal x5338=(x5330*x5331);
IkReal x5339=(x5328*x5329);
CheckValue<IkReal> x5340=IKPowWithIntegerCheck(IKsign((((x5328*x5331))+(((-1.0)*sj6*x5333*x5334))+(((-1.0)*x5339))+(((-1.0)*x5330*x5332))+((x5334*x5335*x5336))+x5329+x5332+x5338+(((-1.0)*x5328*x5338))+(((2.0)*x5336*x5337))+((sj6*x5330*x5333*x5334))+((x5330*x5339)))),-1);
if(!x5340.valid){
continue;
}
CheckValue<IkReal> x5341 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x5333)),(x5337+x5336+((r01*x5335))),IKFAST_ATAN2_MAGTHRESH);
if(!x5341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5340.value)))+(x5341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5342=IKsin(j4);
IkReal x5343=IKcos(j4);
IkReal x5344=(cj5*cj6);
IkReal x5345=(r11*sj6);
IkReal x5346=(cj6*r20);
IkReal x5347=(cj6*r10);
IkReal x5348=(cj5*sj6);
IkReal x5349=(r21*sj6);
IkReal x5350=(cj6*r00);
IkReal x5351=(r01*sj6);
IkReal x5352=((1.0)*x5343);
IkReal x5353=((1.0)*x5342);
IkReal x5354=(sj5*x5353);
evalcond[0]=(((x5343*x5346))+(((-1.0)*r20*x5348*x5353))+(((-1.0)*x5349*x5352))+(((-1.0)*r22*x5354))+(((-1.0)*r21*x5344*x5353)));
evalcond[1]=((((-1.0)*x5351*x5352))+(((-1.0)*r02*x5354))+((x5343*x5350))+(((-1.0)*r00*x5348*x5353))+(((-1.0)*r01*x5344*x5353)));
evalcond[2]=((((-1.0)*r22*sj5*x5352))+(((-1.0)*x5346*x5353))+((x5342*x5349))+(((-1.0)*r20*x5348*x5352))+(((-1.0)*r21*x5344*x5352)));
evalcond[3]=((((-1.0)*r10*x5348*x5352))+((x5342*x5345))+(((-1.0)*r11*x5344*x5352))+(((-1.0)*r12*sj5*x5352))+(((-1.0)*x5347*x5353)));
evalcond[4]=((1.0)+(((-1.0)*r10*x5348*x5353))+((x5343*x5347))+(((-1.0)*x5345*x5352))+(((-1.0)*r11*x5344*x5353))+(((-1.0)*r12*x5354)));
evalcond[5]=((1.0)+((x5342*x5351))+(((-1.0)*r02*sj5*x5352))+(((-1.0)*x5350*x5353))+(((-1.0)*r00*x5348*x5352))+(((-1.0)*r01*x5344*x5352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5355=((1.0)*sj5);
CheckValue<IkReal> x5356 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x5356.valid){
continue;
}
CheckValue<IkReal> x5357=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5355))+(((-1.0)*cj6*r21*x5355)))),-1);
if(!x5357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5356.value)+(((1.5707963267949)*(x5357.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5358=IKsin(j4);
IkReal x5359=IKcos(j4);
IkReal x5360=(cj5*cj6);
IkReal x5361=(r11*sj6);
IkReal x5362=(cj6*r20);
IkReal x5363=(cj6*r10);
IkReal x5364=(cj5*sj6);
IkReal x5365=(r21*sj6);
IkReal x5366=(cj6*r00);
IkReal x5367=(r01*sj6);
IkReal x5368=((1.0)*x5359);
IkReal x5369=((1.0)*x5358);
IkReal x5370=(sj5*x5369);
evalcond[0]=((((-1.0)*r22*x5370))+(((-1.0)*x5365*x5368))+(((-1.0)*r21*x5360*x5369))+((x5359*x5362))+(((-1.0)*r20*x5364*x5369)));
evalcond[1]=((((-1.0)*x5367*x5368))+(((-1.0)*r01*x5360*x5369))+(((-1.0)*r02*x5370))+((x5359*x5366))+(((-1.0)*r00*x5364*x5369)));
evalcond[2]=((((-1.0)*r22*sj5*x5368))+(((-1.0)*x5362*x5369))+((x5358*x5365))+(((-1.0)*r21*x5360*x5368))+(((-1.0)*r20*x5364*x5368)));
evalcond[3]=((((-1.0)*r12*sj5*x5368))+(((-1.0)*r10*x5364*x5368))+(((-1.0)*r11*x5360*x5368))+(((-1.0)*x5363*x5369))+((x5358*x5361)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5370))+(((-1.0)*r10*x5364*x5369))+(((-1.0)*r11*x5360*x5369))+(((-1.0)*x5361*x5368))+((x5359*x5363)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x5368))+(((-1.0)*x5366*x5369))+(((-1.0)*r01*x5360*x5368))+((x5358*x5367))+(((-1.0)*r00*x5364*x5368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5371 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5371.valid){
continue;
}
CheckValue<IkReal> x5372=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5371.value)+(((1.5707963267949)*(x5372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5373=IKsin(j4);
IkReal x5374=IKcos(j4);
IkReal x5375=(cj5*cj6);
IkReal x5376=(r11*sj6);
IkReal x5377=(cj6*r20);
IkReal x5378=(cj6*r10);
IkReal x5379=(cj5*sj6);
IkReal x5380=(r21*sj6);
IkReal x5381=(cj6*r00);
IkReal x5382=(r01*sj6);
IkReal x5383=((1.0)*x5374);
IkReal x5384=((1.0)*x5373);
IkReal x5385=(sj5*x5384);
evalcond[0]=((((-1.0)*r20*x5379*x5384))+(((-1.0)*r21*x5375*x5384))+(((-1.0)*x5380*x5383))+(((-1.0)*r22*x5385))+((x5374*x5377)));
evalcond[1]=((((-1.0)*x5382*x5383))+((x5374*x5381))+(((-1.0)*r00*x5379*x5384))+(((-1.0)*r02*x5385))+(((-1.0)*r01*x5375*x5384)));
evalcond[2]=((((-1.0)*r20*x5379*x5383))+(((-1.0)*r21*x5375*x5383))+(((-1.0)*r22*sj5*x5383))+(((-1.0)*x5377*x5384))+((x5373*x5380)));
evalcond[3]=((((-1.0)*r12*sj5*x5383))+(((-1.0)*r11*x5375*x5383))+((x5373*x5376))+(((-1.0)*r10*x5379*x5383))+(((-1.0)*x5378*x5384)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5375*x5384))+(((-1.0)*x5376*x5383))+(((-1.0)*r12*x5385))+(((-1.0)*r10*x5379*x5384))+((x5374*x5378)));
evalcond[5]=((1.0)+(((-1.0)*r00*x5379*x5383))+(((-1.0)*r02*sj5*x5383))+(((-1.0)*r01*x5375*x5383))+(((-1.0)*x5381*x5384))+((x5373*x5382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5386=cj6*cj6;
IkReal x5387=cj5*cj5;
IkReal x5388=(r22*sj5);
IkReal x5389=(cj0*r20);
IkReal x5390=((1.0)*r21);
IkReal x5391=(cj5*sj6);
IkReal x5392=(r02*r22);
IkReal x5393=(cj5*cj6);
IkReal x5394=(r02*sj5);
IkReal x5395=(cj6*sj6);
IkReal x5396=((1.0)*r20);
IkReal x5397=(r01*x5390);
IkReal x5398=(r00*r20*x5387);
CheckValue<IkReal> x5399 = IKatan2WithCheck(IkReal((((cj6*x5389))+(((-1.0)*cj0*sj6*x5390)))),(((x5389*x5391))+((cj0*r21*x5393))+((cj0*x5388))),IKFAST_ATAN2_MAGTHRESH);
if(!x5399.valid){
continue;
}
CheckValue<IkReal> x5400=IKPowWithIntegerCheck(IKsign((((x5386*x5398))+(((-1.0)*r00*x5387*x5396))+(((-1.0)*r00*x5386*x5396))+((r01*r20*x5395))+((r01*r21*x5386))+(((-1.0)*r00*x5388*x5391))+(((-1.0)*r01*x5388*x5393))+(((-1.0)*r00*x5387*x5390*x5395))+(((-1.0)*x5390*x5393*x5394))+(((-1.0)*x5397))+(((-1.0)*r01*x5387*x5395*x5396))+((r00*r21*x5395))+(((-1.0)*x5391*x5394*x5396))+((x5387*x5392))+(((-1.0)*x5392))+(((-1.0)*x5386*x5387*x5397)))),-1);
if(!x5400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5399.value)+(((1.5707963267949)*(x5400.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5401=IKsin(j4);
IkReal x5402=IKcos(j4);
IkReal x5403=((1.0)*cj0);
IkReal x5404=(cj6*r20);
IkReal x5405=(cj5*sj6);
IkReal x5406=((1.0)*sj6);
IkReal x5407=(r21*sj6);
IkReal x5408=(cj6*r00);
IkReal x5409=((1.0)*cj5*cj6);
IkReal x5410=(r01*x5402);
IkReal x5411=(r11*x5401);
IkReal x5412=((1.0)*x5401);
IkReal x5413=(r11*x5402);
IkReal x5414=(r10*x5402);
IkReal x5415=((1.0)*x5402);
IkReal x5416=(r01*x5401);
IkReal x5417=(sj5*x5412);
evalcond[0]=((((-1.0)*r21*x5401*x5409))+(((-1.0)*r21*x5402*x5406))+((x5402*x5404))+(((-1.0)*r20*x5405*x5412))+(((-1.0)*r22*x5417)));
evalcond[1]=((((-1.0)*r22*sj5*x5415))+(((-1.0)*x5404*x5412))+((x5401*x5407))+(((-1.0)*r21*x5402*x5409))+(((-1.0)*r20*x5405*x5415)));
evalcond[2]=((((-1.0)*r02*x5417))+sj0+(((-1.0)*x5406*x5410))+((x5402*x5408))+(((-1.0)*r00*x5405*x5412))+(((-1.0)*x5409*x5416)));
evalcond[3]=((((-1.0)*x5406*x5413))+(((-1.0)*r10*x5405*x5412))+(((-1.0)*x5403))+(((-1.0)*r12*x5417))+(((-1.0)*x5409*x5411))+((cj6*x5414)));
evalcond[4]=(((sj6*x5416))+(((-1.0)*x5403))+(((-1.0)*r02*sj5*x5415))+(((-1.0)*r00*x5405*x5415))+(((-1.0)*x5408*x5412))+(((-1.0)*x5409*x5410)));
evalcond[5]=((((-1.0)*sj0))+((sj6*x5411))+(((-1.0)*x5405*x5414))+(((-1.0)*cj6*r10*x5412))+(((-1.0)*r12*sj5*x5415))+(((-1.0)*x5409*x5413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5418=(cj0*sj6);
IkReal x5419=((1.0)*sj5);
IkReal x5420=(cj0*cj6);
CheckValue<IkReal> x5421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x5419))+(((-1.0)*cj6*r01*x5419))+((cj5*r02)))),-1);
if(!x5421.valid){
continue;
}
CheckValue<IkReal> x5422 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5418))+((r20*x5420)))),(((cj5*r21*x5420))+((cj5*r20*x5418))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5421.value)))+(x5422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5423=IKsin(j4);
IkReal x5424=IKcos(j4);
IkReal x5425=((1.0)*cj0);
IkReal x5426=(cj6*r20);
IkReal x5427=(cj5*sj6);
IkReal x5428=((1.0)*sj6);
IkReal x5429=(r21*sj6);
IkReal x5430=(cj6*r00);
IkReal x5431=((1.0)*cj5*cj6);
IkReal x5432=(r01*x5424);
IkReal x5433=(r11*x5423);
IkReal x5434=((1.0)*x5423);
IkReal x5435=(r11*x5424);
IkReal x5436=(r10*x5424);
IkReal x5437=((1.0)*x5424);
IkReal x5438=(r01*x5423);
IkReal x5439=(sj5*x5434);
evalcond[0]=((((-1.0)*r21*x5423*x5431))+(((-1.0)*r21*x5424*x5428))+(((-1.0)*r20*x5427*x5434))+((x5424*x5426))+(((-1.0)*r22*x5439)));
evalcond[1]=((((-1.0)*x5426*x5434))+(((-1.0)*r22*sj5*x5437))+(((-1.0)*r20*x5427*x5437))+((x5423*x5429))+(((-1.0)*r21*x5424*x5431)));
evalcond[2]=((((-1.0)*x5428*x5432))+sj0+(((-1.0)*x5431*x5438))+(((-1.0)*r02*x5439))+((x5424*x5430))+(((-1.0)*r00*x5427*x5434)));
evalcond[3]=((((-1.0)*x5425))+((cj6*x5436))+(((-1.0)*x5428*x5435))+(((-1.0)*x5431*x5433))+(((-1.0)*r12*x5439))+(((-1.0)*r10*x5427*x5434)));
evalcond[4]=((((-1.0)*x5425))+(((-1.0)*x5431*x5432))+(((-1.0)*r02*sj5*x5437))+(((-1.0)*r00*x5427*x5437))+(((-1.0)*x5430*x5434))+((sj6*x5438)));
evalcond[5]=((((-1.0)*r12*sj5*x5437))+(((-1.0)*sj0))+(((-1.0)*x5427*x5436))+(((-1.0)*x5431*x5435))+(((-1.0)*cj6*r10*x5434))+((sj6*x5433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5440=(cj5*sj0);
IkReal x5441=((1.0)*sj5);
CheckValue<IkReal> x5442=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x5441))+(((-1.0)*cj6*r11*x5441)))),-1);
if(!x5442.valid){
continue;
}
CheckValue<IkReal> x5443 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x5440))+((cj6*r21*x5440))+((r22*sj0*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5443.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5442.value)))+(x5443.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5444=IKsin(j4);
IkReal x5445=IKcos(j4);
IkReal x5446=((1.0)*cj0);
IkReal x5447=(cj6*r20);
IkReal x5448=(cj5*sj6);
IkReal x5449=((1.0)*sj6);
IkReal x5450=(r21*sj6);
IkReal x5451=(cj6*r00);
IkReal x5452=((1.0)*cj5*cj6);
IkReal x5453=(r01*x5445);
IkReal x5454=(r11*x5444);
IkReal x5455=((1.0)*x5444);
IkReal x5456=(r11*x5445);
IkReal x5457=(r10*x5445);
IkReal x5458=((1.0)*x5445);
IkReal x5459=(r01*x5444);
IkReal x5460=(sj5*x5455);
evalcond[0]=((((-1.0)*r21*x5445*x5449))+(((-1.0)*r21*x5444*x5452))+((x5445*x5447))+(((-1.0)*r20*x5448*x5455))+(((-1.0)*r22*x5460)));
evalcond[1]=((((-1.0)*r22*sj5*x5458))+((x5444*x5450))+(((-1.0)*r20*x5448*x5458))+(((-1.0)*x5447*x5455))+(((-1.0)*r21*x5445*x5452)));
evalcond[2]=((((-1.0)*x5452*x5459))+sj0+(((-1.0)*r02*x5460))+(((-1.0)*r00*x5448*x5455))+(((-1.0)*x5449*x5453))+((x5445*x5451)));
evalcond[3]=((((-1.0)*r10*x5448*x5455))+(((-1.0)*x5452*x5454))+(((-1.0)*x5446))+(((-1.0)*r12*x5460))+((cj6*x5457))+(((-1.0)*x5449*x5456)));
evalcond[4]=((((-1.0)*x5452*x5453))+(((-1.0)*x5451*x5455))+(((-1.0)*x5446))+((sj6*x5459))+(((-1.0)*r00*x5448*x5458))+(((-1.0)*r02*sj5*x5458)));
evalcond[5]=((((-1.0)*x5452*x5456))+(((-1.0)*x5448*x5457))+(((-1.0)*sj0))+(((-1.0)*r12*sj5*x5458))+((sj6*x5454))+(((-1.0)*cj6*r10*x5455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5461=((0.01)*cj5);
IkReal x5462=(cj6*r11);
IkReal x5463=((1.0)*cj5);
IkReal x5464=(r20*sj6);
IkReal x5465=((0.01)*sj5);
IkReal x5466=(cj6*r01);
IkReal x5467=((0.37429)*cj5);
IkReal x5468=((0.37429)*sj5);
IkReal x5469=(cj6*r21);
IkReal x5470=(r10*sj5*sj6);
IkReal x5471=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.069)+(((-1.0)*x5464*x5468))+((r22*x5465))+((r22*x5467))+(((-1.0)*x5468*x5469))+((x5461*x5469))+((x5461*x5464))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x5466*x5468))+(((-1.0)*r00*sj6*x5468))+((r02*x5465))+((r02*x5467))+((x5461*x5466))+((r00*sj6*x5461))+(((-0.29542)*cj0))+(((-1.0)*px)));
evalcond[3]=(((x5461*x5462))+((r10*sj6*x5461))+(((-1.0)*r10*sj6*x5468))+((r12*x5465))+((r12*x5467))+(((-0.29542)*sj0))+(((-1.0)*py))+(((-1.0)*x5462*x5468)));
evalcond[4]=((1.0)+((sj5*x5464))+((sj5*x5469))+(((-1.0)*r22*x5463)));
evalcond[5]=(x5470+((sj5*x5462))+(((-1.0)*r12*x5463)));
evalcond[6]=(x5471+((sj5*x5466))+(((-1.0)*r02*x5463)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5472=(cj0*sj6);
IkReal x5473=(cj0*cj6);
IkReal x5474=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5474;
j4eval[1]=((IKabs((((cj5*r21*x5473))+((cj0*r22*sj5))+((cj5*r20*x5472)))))+(IKabs((((r20*x5473))+(((-1.0)*r21*x5472))))));
j4eval[2]=IKsign(x5474);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5475=cj5*cj5;
IkReal x5476=cj6*cj6;
IkReal x5477=(r00*r20);
IkReal x5478=(r02*r22);
IkReal x5479=(r22*sj5);
IkReal x5480=(cj6*r21);
IkReal x5481=(r00*sj6);
IkReal x5482=(r20*sj6);
IkReal x5483=(cj6*r01);
IkReal x5484=(cj0*cj5);
IkReal x5485=((1.0)*x5475);
IkReal x5486=(cj5*r02*sj5);
IkReal x5487=(r01*r21*x5476);
IkReal x5488=(((x5480*x5486))+x5478+((x5482*x5486))+(((-1.0)*x5482*x5483))+(((-1.0)*x5476*x5477*x5485))+((x5475*x5477))+((r01*r21))+((x5475*x5482*x5483))+((x5475*x5480*x5481))+(((-1.0)*x5478*x5485))+(((-1.0)*x5487))+((cj5*x5479*x5481))+((cj5*x5479*x5483))+(((-1.0)*x5480*x5481))+((x5476*x5477))+((x5475*x5487)));
j4eval[0]=x5488;
j4eval[1]=IKsign(x5488);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x5480*x5484))+((x5482*x5484))+((cj0*x5479))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5489=cj6*cj6;
IkReal x5490=cj5*cj5;
IkReal x5491=(r12*sj5);
IkReal x5492=(r22*sj5);
IkReal x5493=((1.0)*r11);
IkReal x5494=(r20*sj0);
IkReal x5495=(r10*r20);
IkReal x5496=(cj5*sj6);
IkReal x5497=(cj6*r10);
IkReal x5498=(r12*r22);
IkReal x5499=(cj5*cj6*r21);
IkReal x5500=(r21*x5489);
IkReal x5501=(cj6*r20*sj6);
IkReal x5502=(r11*x5490);
IkReal x5503=((1.0)*r21*sj6);
IkReal x5504=((1.0)*x5490);
IkReal x5505=(((x5489*x5495))+x5498+(((-1.0)*x5489*x5495*x5504))+(((-1.0)*x5497*x5503))+(((-1.0)*x5498*x5504))+((r11*r21))+((r20*x5491*x5496))+((x5491*x5499))+((x5500*x5502))+((x5501*x5502))+((r21*sj6*x5490*x5497))+((cj5*cj6*r11*x5492))+((x5490*x5495))+(((-1.0)*x5493*x5501))+(((-1.0)*x5493*x5500))+((r10*x5492*x5496)));
j4eval[0]=x5505;
j4eval[1]=IKsign(x5505);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5503))+((cj6*x5494)))))+(IKabs((((x5494*x5496))+((sj0*x5499))+((sj0*x5492))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5506=((1.0)*cj5);
IkReal x5507=((0.01)*cj5);
IkReal x5508=(cj6*r11);
IkReal x5509=(r20*sj6);
IkReal x5510=((0.01)*sj5);
IkReal x5511=(cj6*r01);
IkReal x5512=((0.37429)*cj5);
IkReal x5513=((0.37429)*sj5);
IkReal x5514=(cj6*r21);
IkReal x5515=(r10*sj5*sj6);
IkReal x5516=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x5513*x5514))+(((-1.0)*pz))+((r22*x5510))+((r22*x5512))+((x5507*x5514))+((x5507*x5509))+(((-1.0)*x5509*x5513)));
evalcond[2]=((-0.29542)+((r02*x5510))+((r02*x5512))+(((-1.0)*x5511*x5513))+((r00*sj6*x5507))+(((-1.0)*px))+(((-1.0)*r00*sj6*x5513))+((x5507*x5511)));
evalcond[3]=((((-1.0)*r10*sj6*x5513))+((r12*x5510))+((r12*x5512))+(((-1.0)*py))+((r10*sj6*x5507))+(((-1.0)*x5508*x5513))+((x5507*x5508)));
evalcond[4]=((1.0)+((sj5*x5514))+(((-1.0)*r22*x5506))+((sj5*x5509)));
evalcond[5]=(x5515+((sj5*x5508))+(((-1.0)*r12*x5506)));
evalcond[6]=(x5516+((sj5*x5511))+(((-1.0)*r02*x5506)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5517=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5517;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5517);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5518=((1.0)*sj5);
IkReal x5519=(((cj5*r22))+(((-1.0)*r20*sj6*x5518))+(((-1.0)*cj6*r21*x5518)));
j4eval[0]=x5519;
j4eval[1]=IKsign(x5519);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5520=cj6*cj6;
IkReal x5521=r01*r01;
IkReal x5522=cj5*cj5;
IkReal x5523=r00*r00;
IkReal x5524=r02*r02;
IkReal x5525=(cj6*r00);
IkReal x5526=(r02*sj5);
IkReal x5527=(cj5*cj6*r01);
IkReal x5528=((2.0)*r01*sj6);
IkReal x5529=(cj5*r00*sj6);
IkReal x5530=((1.0)*x5522);
IkReal x5531=(x5520*x5523);
IkReal x5532=(x5520*x5521);
IkReal x5533=(((x5522*x5532))+x5521+x5524+x5531+((x5522*x5523))+((x5522*x5525*x5528))+(((-1.0)*x5530*x5531))+(((-1.0)*x5532))+(((2.0)*x5526*x5529))+(((2.0)*x5526*x5527))+(((-1.0)*x5525*x5528))+(((-1.0)*x5524*x5530)));
j4eval[0]=x5533;
j4eval[1]=((IKabs((x5526+x5527+x5529)))+(IKabs((x5525+(((-1.0)*r01*sj6))))));
j4eval[2]=IKsign(x5533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5534=cj6*cj6;
IkReal x5535=r01*r01;
IkReal x5536=cj5*cj5;
IkReal x5537=r00*r00;
IkReal x5538=r02*r02;
IkReal x5539=(cj6*r00);
IkReal x5540=((2.0)*r01);
IkReal x5541=(cj5*cj6);
IkReal x5542=(r02*sj5);
IkReal x5543=(cj5*r00*sj6);
IkReal x5544=(x5536*x5537);
IkReal x5545=(x5534*x5535);
CheckValue<IkReal> x5546 = IKatan2WithCheck(IkReal((x5539+(((-1.0)*r01*sj6)))),(x5542+x5543+((r01*x5541))),IKFAST_ATAN2_MAGTHRESH);
if(!x5546.valid){
continue;
}
CheckValue<IkReal> x5547=IKPowWithIntegerCheck(IKsign((x5535+x5538+x5544+((x5534*x5537))+(((-1.0)*sj6*x5539*x5540))+((x5540*x5541*x5542))+((x5536*x5545))+((sj6*x5536*x5539*x5540))+(((-1.0)*x5534*x5544))+(((-1.0)*x5545))+(((-1.0)*x5536*x5538))+(((2.0)*x5542*x5543)))),-1);
if(!x5547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5546.value)+(((1.5707963267949)*(x5547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5548=IKsin(j4);
IkReal x5549=IKcos(j4);
IkReal x5550=(cj5*cj6);
IkReal x5551=(r11*sj6);
IkReal x5552=(cj6*r20);
IkReal x5553=(cj6*r10);
IkReal x5554=(cj5*sj6);
IkReal x5555=(r21*sj6);
IkReal x5556=(cj6*r00);
IkReal x5557=(r01*sj6);
IkReal x5558=((1.0)*x5549);
IkReal x5559=((1.0)*x5548);
IkReal x5560=(sj5*x5559);
evalcond[0]=((((-1.0)*r22*x5560))+(((-1.0)*x5555*x5558))+(((-1.0)*r21*x5550*x5559))+(((-1.0)*r20*x5554*x5559))+((x5549*x5552)));
evalcond[1]=((((-1.0)*r01*x5550*x5559))+((x5549*x5556))+(((-1.0)*r02*x5560))+(((-1.0)*x5557*x5558))+(((-1.0)*r00*x5554*x5559)));
evalcond[2]=((((-1.0)*r21*x5550*x5558))+(((-1.0)*r20*x5554*x5558))+(((-1.0)*x5552*x5559))+((x5548*x5555))+(((-1.0)*r22*sj5*x5558)));
evalcond[3]=((((-1.0)*x5553*x5559))+(((-1.0)*r11*x5550*x5558))+(((-1.0)*r10*x5554*x5558))+((x5548*x5551))+(((-1.0)*r12*sj5*x5558)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5560))+(((-1.0)*x5551*x5558))+(((-1.0)*r11*x5550*x5559))+((x5549*x5553))+(((-1.0)*r10*x5554*x5559)));
evalcond[5]=((1.0)+(((-1.0)*x5556*x5559))+(((-1.0)*r01*x5550*x5558))+((x5548*x5557))+(((-1.0)*r02*sj5*x5558))+(((-1.0)*r00*x5554*x5558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5561=((1.0)*sj5);
CheckValue<IkReal> x5562=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5561))+(((-1.0)*cj6*r21*x5561)))),-1);
if(!x5562.valid){
continue;
}
CheckValue<IkReal> x5563 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x5563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5562.value)))+(x5563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5564=IKsin(j4);
IkReal x5565=IKcos(j4);
IkReal x5566=(cj5*cj6);
IkReal x5567=(r11*sj6);
IkReal x5568=(cj6*r20);
IkReal x5569=(cj6*r10);
IkReal x5570=(cj5*sj6);
IkReal x5571=(r21*sj6);
IkReal x5572=(cj6*r00);
IkReal x5573=(r01*sj6);
IkReal x5574=((1.0)*x5565);
IkReal x5575=((1.0)*x5564);
IkReal x5576=(sj5*x5575);
evalcond[0]=((((-1.0)*r20*x5570*x5575))+((x5565*x5568))+(((-1.0)*x5571*x5574))+(((-1.0)*r22*x5576))+(((-1.0)*r21*x5566*x5575)));
evalcond[1]=((((-1.0)*r01*x5566*x5575))+((x5565*x5572))+(((-1.0)*r02*x5576))+(((-1.0)*r00*x5570*x5575))+(((-1.0)*x5573*x5574)));
evalcond[2]=((((-1.0)*r22*sj5*x5574))+(((-1.0)*r20*x5570*x5574))+((x5564*x5571))+(((-1.0)*x5568*x5575))+(((-1.0)*r21*x5566*x5574)));
evalcond[3]=(((x5564*x5567))+(((-1.0)*r10*x5570*x5574))+(((-1.0)*r11*x5566*x5574))+(((-1.0)*x5569*x5575))+(((-1.0)*r12*sj5*x5574)));
evalcond[4]=((1.0)+((x5565*x5569))+(((-1.0)*r10*x5570*x5575))+(((-1.0)*r11*x5566*x5575))+(((-1.0)*r12*x5576))+(((-1.0)*x5567*x5574)));
evalcond[5]=((1.0)+(((-1.0)*r01*x5566*x5574))+((x5564*x5573))+(((-1.0)*x5572*x5575))+(((-1.0)*r00*x5570*x5574))+(((-1.0)*r02*sj5*x5574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5577 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5577.valid){
continue;
}
CheckValue<IkReal> x5578=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5577.value)+(((1.5707963267949)*(x5578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5579=IKsin(j4);
IkReal x5580=IKcos(j4);
IkReal x5581=(cj5*cj6);
IkReal x5582=(r11*sj6);
IkReal x5583=(cj6*r20);
IkReal x5584=(cj6*r10);
IkReal x5585=(cj5*sj6);
IkReal x5586=(r21*sj6);
IkReal x5587=(cj6*r00);
IkReal x5588=(r01*sj6);
IkReal x5589=((1.0)*x5580);
IkReal x5590=((1.0)*x5579);
IkReal x5591=(sj5*x5590);
evalcond[0]=((((-1.0)*x5586*x5589))+(((-1.0)*r20*x5585*x5590))+((x5580*x5583))+(((-1.0)*r22*x5591))+(((-1.0)*r21*x5581*x5590)));
evalcond[1]=((((-1.0)*x5588*x5589))+(((-1.0)*r00*x5585*x5590))+(((-1.0)*r02*x5591))+(((-1.0)*r01*x5581*x5590))+((x5580*x5587)));
evalcond[2]=((((-1.0)*r20*x5585*x5589))+((x5579*x5586))+(((-1.0)*r22*sj5*x5589))+(((-1.0)*x5583*x5590))+(((-1.0)*r21*x5581*x5589)));
evalcond[3]=((((-1.0)*r12*sj5*x5589))+(((-1.0)*x5584*x5590))+((x5579*x5582))+(((-1.0)*r10*x5585*x5589))+(((-1.0)*r11*x5581*x5589)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5591))+(((-1.0)*r10*x5585*x5590))+(((-1.0)*x5582*x5589))+((x5580*x5584))+(((-1.0)*r11*x5581*x5590)));
evalcond[5]=((1.0)+(((-1.0)*r00*x5585*x5589))+(((-1.0)*r02*sj5*x5589))+(((-1.0)*r01*x5581*x5589))+((x5579*x5588))+(((-1.0)*x5587*x5590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5592=((1.0)*cj5);
IkReal x5593=((0.01)*cj5);
IkReal x5594=(cj6*r11);
IkReal x5595=(r20*sj6);
IkReal x5596=((0.01)*sj5);
IkReal x5597=(cj6*r01);
IkReal x5598=((0.37429)*cj5);
IkReal x5599=((0.37429)*sj5);
IkReal x5600=(cj6*r21);
IkReal x5601=(r10*sj5*sj6);
IkReal x5602=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x5595*x5599))+((x5593*x5600))+((x5593*x5595))+(((-1.0)*x5599*x5600))+(((-1.0)*pz))+((r22*x5596))+((r22*x5598)));
evalcond[2]=((0.29542)+(((-1.0)*r00*sj6*x5599))+((x5593*x5597))+((r02*x5598))+((r02*x5596))+((r00*sj6*x5593))+(((-1.0)*px))+(((-1.0)*x5597*x5599)));
evalcond[3]=(((x5593*x5594))+((r12*x5596))+((r12*x5598))+(((-1.0)*x5594*x5599))+(((-1.0)*py))+(((-1.0)*r10*sj6*x5599))+((r10*sj6*x5593)));
evalcond[4]=((1.0)+((sj5*x5595))+(((-1.0)*r22*x5592))+((sj5*x5600)));
evalcond[5]=(x5601+(((-1.0)*r12*x5592))+((sj5*x5594)));
evalcond[6]=(x5602+(((-1.0)*r02*x5592))+((sj5*x5597)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5603=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5603;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5604=((1.0)*sj6);
IkReal x5605=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x5604))+((cj5*r02)));
j4eval[0]=x5605;
j4eval[1]=IKsign(x5605);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x5604))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5606=cj6*cj6;
IkReal x5607=cj5*cj5;
IkReal x5608=r00*r00;
IkReal x5609=r01*r01;
IkReal x5610=r02*r02;
IkReal x5611=(cj6*r00);
IkReal x5612=(cj5*cj6*r01);
IkReal x5613=((2.0)*r02*sj5);
IkReal x5614=((1.0)*x5606);
IkReal x5615=((2.0)*r01*sj6);
IkReal x5616=(cj5*r00*sj6);
IkReal x5617=(x5607*x5608);
IkReal x5618=((((-1.0)*x5613*x5616))+(((-1.0)*x5617))+(((-1.0)*x5610))+(((-1.0)*x5609))+(((-1.0)*x5612*x5613))+((x5607*x5610))+(((-1.0)*x5608*x5614))+((x5611*x5615))+(((-1.0)*x5607*x5609*x5614))+((x5606*x5617))+((x5606*x5609))+(((-1.0)*x5607*x5611*x5615)));
j4eval[0]=x5618;
j4eval[1]=((IKabs((x5611+(((-1.0)*r01*sj6)))))+(IKabs((x5612+x5616+((r02*sj5))))));
j4eval[2]=IKsign(x5618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5619=cj6*cj6;
IkReal x5620=cj5*cj5;
IkReal x5621=r00*r00;
IkReal x5622=r01*r01;
IkReal x5623=r02*r02;
IkReal x5624=(cj6*r00);
IkReal x5625=(cj5*cj6*r01);
IkReal x5626=((2.0)*r02*sj5);
IkReal x5627=((1.0)*x5619);
IkReal x5628=((2.0)*r01*sj6);
IkReal x5629=(cj5*r00*sj6);
IkReal x5630=(x5620*x5621);
CheckValue<IkReal> x5631=IKPowWithIntegerCheck(IKsign((((x5624*x5628))+((x5619*x5622))+(((-1.0)*x5626*x5629))+(((-1.0)*x5620*x5624*x5628))+(((-1.0)*x5625*x5626))+(((-1.0)*x5630))+((x5619*x5630))+((x5620*x5623))+(((-1.0)*x5620*x5622*x5627))+(((-1.0)*x5621*x5627))+(((-1.0)*x5623))+(((-1.0)*x5622)))),-1);
if(!x5631.valid){
continue;
}
CheckValue<IkReal> x5632 = IKatan2WithCheck(IkReal((x5624+(((-1.0)*r01*sj6)))),(x5629+x5625+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5631.value)))+(x5632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5633=IKsin(j4);
IkReal x5634=IKcos(j4);
IkReal x5635=(cj5*cj6);
IkReal x5636=(r11*sj6);
IkReal x5637=(cj6*r20);
IkReal x5638=(cj6*r10);
IkReal x5639=(cj5*sj6);
IkReal x5640=(r21*sj6);
IkReal x5641=(cj6*r00);
IkReal x5642=(r01*sj6);
IkReal x5643=((1.0)*x5634);
IkReal x5644=((1.0)*x5633);
IkReal x5645=(sj5*x5644);
evalcond[0]=((((-1.0)*r22*x5645))+(((-1.0)*r20*x5639*x5644))+(((-1.0)*r21*x5635*x5644))+(((-1.0)*x5640*x5643))+((x5634*x5637)));
evalcond[1]=((((-1.0)*x5642*x5643))+(((-1.0)*r02*x5645))+((x5634*x5641))+(((-1.0)*r01*x5635*x5644))+(((-1.0)*r00*x5639*x5644)));
evalcond[2]=(((x5633*x5640))+(((-1.0)*r20*x5639*x5643))+(((-1.0)*r22*sj5*x5643))+(((-1.0)*r21*x5635*x5643))+(((-1.0)*x5637*x5644)));
evalcond[3]=((((-1.0)*r10*x5639*x5643))+(((-1.0)*x5638*x5644))+(((-1.0)*r11*x5635*x5643))+((x5633*x5636))+(((-1.0)*r12*sj5*x5643)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x5645))+(((-1.0)*r10*x5639*x5644))+(((-1.0)*r11*x5635*x5644))+(((-1.0)*x5636*x5643))+((x5634*x5638)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x5635*x5643))+((x5633*x5642))+(((-1.0)*r02*sj5*x5643))+(((-1.0)*x5641*x5644))+(((-1.0)*r00*x5639*x5643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5646=((1.0)*sj6);
CheckValue<IkReal> x5647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x5646))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x5647.valid){
continue;
}
CheckValue<IkReal> x5648 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5646))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5647.value)))+(x5648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5649=IKsin(j4);
IkReal x5650=IKcos(j4);
IkReal x5651=(cj5*cj6);
IkReal x5652=(r11*sj6);
IkReal x5653=(cj6*r20);
IkReal x5654=(cj6*r10);
IkReal x5655=(cj5*sj6);
IkReal x5656=(r21*sj6);
IkReal x5657=(cj6*r00);
IkReal x5658=(r01*sj6);
IkReal x5659=((1.0)*x5650);
IkReal x5660=((1.0)*x5649);
IkReal x5661=(sj5*x5660);
evalcond[0]=((((-1.0)*r22*x5661))+(((-1.0)*r20*x5655*x5660))+(((-1.0)*r21*x5651*x5660))+((x5650*x5653))+(((-1.0)*x5656*x5659)));
evalcond[1]=((((-1.0)*r00*x5655*x5660))+(((-1.0)*r02*x5661))+(((-1.0)*r01*x5651*x5660))+((x5650*x5657))+(((-1.0)*x5658*x5659)));
evalcond[2]=(((x5649*x5656))+(((-1.0)*x5653*x5660))+(((-1.0)*r22*sj5*x5659))+(((-1.0)*r21*x5651*x5659))+(((-1.0)*r20*x5655*x5659)));
evalcond[3]=(((x5649*x5652))+(((-1.0)*r10*x5655*x5659))+(((-1.0)*r11*x5651*x5659))+(((-1.0)*x5654*x5660))+(((-1.0)*r12*sj5*x5659)));
evalcond[4]=((-1.0)+(((-1.0)*x5652*x5659))+(((-1.0)*r10*x5655*x5660))+((x5650*x5654))+(((-1.0)*r11*x5651*x5660))+(((-1.0)*r12*x5661)));
evalcond[5]=((-1.0)+(((-1.0)*x5657*x5660))+((x5649*x5658))+(((-1.0)*r00*x5655*x5659))+(((-1.0)*r02*sj5*x5659))+(((-1.0)*r01*x5651*x5659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5662=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5662.valid){
continue;
}
CheckValue<IkReal> x5663 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x5663.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5662.value)))+(x5663.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5664=IKsin(j4);
IkReal x5665=IKcos(j4);
IkReal x5666=(cj5*cj6);
IkReal x5667=(r11*sj6);
IkReal x5668=(cj6*r20);
IkReal x5669=(cj6*r10);
IkReal x5670=(cj5*sj6);
IkReal x5671=(r21*sj6);
IkReal x5672=(cj6*r00);
IkReal x5673=(r01*sj6);
IkReal x5674=((1.0)*x5665);
IkReal x5675=((1.0)*x5664);
IkReal x5676=(sj5*x5675);
evalcond[0]=((((-1.0)*r22*x5676))+(((-1.0)*x5671*x5674))+(((-1.0)*r20*x5670*x5675))+(((-1.0)*r21*x5666*x5675))+((x5665*x5668)));
evalcond[1]=((((-1.0)*r00*x5670*x5675))+(((-1.0)*r01*x5666*x5675))+(((-1.0)*x5673*x5674))+((x5665*x5672))+(((-1.0)*r02*x5676)));
evalcond[2]=((((-1.0)*r22*sj5*x5674))+(((-1.0)*r20*x5670*x5674))+(((-1.0)*x5668*x5675))+((x5664*x5671))+(((-1.0)*r21*x5666*x5674)));
evalcond[3]=(((x5664*x5667))+(((-1.0)*r12*sj5*x5674))+(((-1.0)*x5669*x5675))+(((-1.0)*r10*x5670*x5674))+(((-1.0)*r11*x5666*x5674)));
evalcond[4]=((-1.0)+(((-1.0)*x5667*x5674))+(((-1.0)*r12*x5676))+(((-1.0)*r10*x5670*x5675))+(((-1.0)*r11*x5666*x5675))+((x5665*x5669)));
evalcond[5]=((-1.0)+(((-1.0)*x5672*x5675))+(((-1.0)*r00*x5670*x5674))+(((-1.0)*r02*sj5*x5674))+(((-1.0)*r01*x5666*x5674))+((x5664*x5673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5677=((1.0)*cj5);
IkReal x5678=((0.01)*cj5);
IkReal x5679=(cj6*r11);
IkReal x5680=(r20*sj6);
IkReal x5681=((0.01)*sj5);
IkReal x5682=(cj6*r01);
IkReal x5683=((0.37429)*cj5);
IkReal x5684=((0.37429)*sj5);
IkReal x5685=(cj6*r21);
IkReal x5686=(r10*sj5*sj6);
IkReal x5687=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x5681))+((r22*x5683))+(((-1.0)*x5680*x5684))+(((-1.0)*x5684*x5685))+(((-1.0)*pz))+((x5678*x5680))+((x5678*x5685)));
evalcond[2]=(((r02*x5681))+((r02*x5683))+(((-1.0)*px))+(((-1.0)*r00*sj6*x5684))+((r00*sj6*x5678))+((x5678*x5682))+(((-1.0)*x5682*x5684)));
evalcond[3]=((-0.29542)+(((-1.0)*x5679*x5684))+(((-1.0)*py))+((x5678*x5679))+((r12*x5681))+((r12*x5683))+((r10*sj6*x5678))+(((-1.0)*r10*sj6*x5684)));
evalcond[4]=((1.0)+(((-1.0)*r22*x5677))+((sj5*x5685))+((sj5*x5680)));
evalcond[5]=(x5686+((sj5*x5679))+(((-1.0)*r12*x5677)));
evalcond[6]=(x5687+((sj5*x5682))+(((-1.0)*r02*x5677)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5688=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5688;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5689=((1.0)*sj5);
IkReal x5690=(((cj5*r22))+(((-1.0)*r20*sj6*x5689))+(((-1.0)*cj6*r21*x5689)));
j4eval[0]=x5690;
j4eval[1]=IKsign(x5690);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5691=r11*r11;
IkReal x5692=cj5*cj5;
IkReal x5693=cj6*cj6;
IkReal x5694=r10*r10;
IkReal x5695=r12*r12;
IkReal x5696=(r12*sj5);
IkReal x5697=(cj6*r10);
IkReal x5698=((1.0)*x5693);
IkReal x5699=(cj5*cj6*r11);
IkReal x5700=(cj5*r10*sj6);
IkReal x5701=((2.0)*r11*sj6);
IkReal x5702=(x5692*x5694);
IkReal x5703=(x5691+x5695+(((-1.0)*x5691*x5698))+((x5693*x5694))+(((-1.0)*x5697*x5701))+(((-1.0)*x5692*x5695))+(((2.0)*x5696*x5700))+((x5692*x5697*x5701))+(((-1.0)*x5698*x5702))+(((2.0)*x5696*x5699))+((x5691*x5692*x5693))+x5702);
j4eval[0]=x5703;
j4eval[1]=IKsign(x5703);
j4eval[2]=((IKabs((x5696+x5699+x5700)))+(IKabs((x5697+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5704=r11*r11;
IkReal x5705=cj5*cj5;
IkReal x5706=cj6*cj6;
IkReal x5707=r10*r10;
IkReal x5708=r12*r12;
IkReal x5709=(r10*sj6);
IkReal x5710=(r12*sj5);
IkReal x5711=((1.0)*x5706);
IkReal x5712=(cj5*cj6*r11);
IkReal x5713=((2.0)*cj6*r11);
IkReal x5714=(x5705*x5707);
CheckValue<IkReal> x5715 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x5709))+x5712+x5710),IKFAST_ATAN2_MAGTHRESH);
if(!x5715.valid){
continue;
}
CheckValue<IkReal> x5716=IKPowWithIntegerCheck(IKsign((((x5706*x5707))+((x5705*x5709*x5713))+(((-1.0)*x5709*x5713))+(((2.0)*x5710*x5712))+(((2.0)*cj5*x5709*x5710))+(((-1.0)*x5711*x5714))+(((-1.0)*x5705*x5708))+(((-1.0)*x5704*x5711))+((x5704*x5705*x5706))+x5708+x5704+x5714)),-1);
if(!x5716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5715.value)+(((1.5707963267949)*(x5716.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5717=IKsin(j4);
IkReal x5718=IKcos(j4);
IkReal x5719=(cj5*cj6);
IkReal x5720=(r11*sj6);
IkReal x5721=(cj6*r20);
IkReal x5722=(cj6*r10);
IkReal x5723=(cj5*sj6);
IkReal x5724=(r01*sj6);
IkReal x5725=(r21*sj6);
IkReal x5726=(cj6*r00);
IkReal x5727=((1.0)*x5718);
IkReal x5728=((1.0)*x5717);
IkReal x5729=(sj5*x5728);
evalcond[0]=((((-1.0)*r20*x5723*x5728))+(((-1.0)*x5725*x5727))+(((-1.0)*r21*x5719*x5728))+((x5718*x5721))+(((-1.0)*r22*x5729)));
evalcond[1]=((((-1.0)*r12*x5729))+((x5718*x5722))+(((-1.0)*r11*x5719*x5728))+(((-1.0)*x5720*x5727))+(((-1.0)*r10*x5723*x5728)));
evalcond[2]=((((-1.0)*r20*x5723*x5727))+(((-1.0)*r21*x5719*x5727))+((x5717*x5725))+(((-1.0)*r22*sj5*x5727))+(((-1.0)*x5721*x5728)));
evalcond[3]=((((-1.0)*r00*x5723*x5727))+((x5717*x5724))+(((-1.0)*x5726*x5728))+(((-1.0)*r01*x5719*x5727))+(((-1.0)*r02*sj5*x5727)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x5723*x5728))+(((-1.0)*x5724*x5727))+((x5718*x5726))+(((-1.0)*r02*x5729))+(((-1.0)*r01*x5719*x5728)));
evalcond[5]=((1.0)+((x5717*x5720))+(((-1.0)*r12*sj5*x5727))+(((-1.0)*x5722*x5728))+(((-1.0)*r11*x5719*x5727))+(((-1.0)*r10*x5723*x5727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5730=((1.0)*sj5);
CheckValue<IkReal> x5731 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5731.valid){
continue;
}
CheckValue<IkReal> x5732=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x5730))+((cj5*r22))+(((-1.0)*cj6*r21*x5730)))),-1);
if(!x5732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5731.value)+(((1.5707963267949)*(x5732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5733=IKsin(j4);
IkReal x5734=IKcos(j4);
IkReal x5735=(cj5*cj6);
IkReal x5736=(r11*sj6);
IkReal x5737=(cj6*r20);
IkReal x5738=(cj6*r10);
IkReal x5739=(cj5*sj6);
IkReal x5740=(r01*sj6);
IkReal x5741=(r21*sj6);
IkReal x5742=(cj6*r00);
IkReal x5743=((1.0)*x5734);
IkReal x5744=((1.0)*x5733);
IkReal x5745=(sj5*x5744);
evalcond[0]=((((-1.0)*r20*x5739*x5744))+((x5734*x5737))+(((-1.0)*x5741*x5743))+(((-1.0)*r21*x5735*x5744))+(((-1.0)*r22*x5745)));
evalcond[1]=((((-1.0)*r11*x5735*x5744))+((x5734*x5738))+(((-1.0)*x5736*x5743))+(((-1.0)*r12*x5745))+(((-1.0)*r10*x5739*x5744)));
evalcond[2]=((((-1.0)*r20*x5739*x5743))+(((-1.0)*x5737*x5744))+((x5733*x5741))+(((-1.0)*r22*sj5*x5743))+(((-1.0)*r21*x5735*x5743)));
evalcond[3]=((((-1.0)*r01*x5735*x5743))+(((-1.0)*r00*x5739*x5743))+((x5733*x5740))+(((-1.0)*r02*sj5*x5743))+(((-1.0)*x5742*x5744)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5735*x5744))+(((-1.0)*r00*x5739*x5744))+((x5734*x5742))+(((-1.0)*r02*x5745))+(((-1.0)*x5740*x5743)));
evalcond[5]=((1.0)+(((-1.0)*r11*x5735*x5743))+((x5733*x5736))+(((-1.0)*r12*sj5*x5743))+(((-1.0)*x5738*x5744))+(((-1.0)*r10*x5739*x5743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
CheckValue<IkReal> x5747=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5746.value)+(((1.5707963267949)*(x5747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5748=IKsin(j4);
IkReal x5749=IKcos(j4);
IkReal x5750=(cj5*cj6);
IkReal x5751=(r11*sj6);
IkReal x5752=(cj6*r20);
IkReal x5753=(cj6*r10);
IkReal x5754=(cj5*sj6);
IkReal x5755=(r01*sj6);
IkReal x5756=(r21*sj6);
IkReal x5757=(cj6*r00);
IkReal x5758=((1.0)*x5749);
IkReal x5759=((1.0)*x5748);
IkReal x5760=(sj5*x5759);
evalcond[0]=((((-1.0)*r20*x5754*x5759))+(((-1.0)*r21*x5750*x5759))+((x5749*x5752))+(((-1.0)*r22*x5760))+(((-1.0)*x5756*x5758)));
evalcond[1]=((((-1.0)*r11*x5750*x5759))+(((-1.0)*r12*x5760))+(((-1.0)*x5751*x5758))+(((-1.0)*r10*x5754*x5759))+((x5749*x5753)));
evalcond[2]=((((-1.0)*x5752*x5759))+(((-1.0)*r20*x5754*x5758))+((x5748*x5756))+(((-1.0)*r21*x5750*x5758))+(((-1.0)*r22*sj5*x5758)));
evalcond[3]=(((x5748*x5755))+(((-1.0)*r00*x5754*x5758))+(((-1.0)*r02*sj5*x5758))+(((-1.0)*x5757*x5759))+(((-1.0)*r01*x5750*x5758)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x5754*x5759))+((x5749*x5757))+(((-1.0)*r02*x5760))+(((-1.0)*r01*x5750*x5759))+(((-1.0)*x5755*x5758)));
evalcond[5]=((1.0)+(((-1.0)*r11*x5750*x5758))+((x5748*x5751))+(((-1.0)*r10*x5754*x5758))+(((-1.0)*r12*sj5*x5758))+(((-1.0)*x5753*x5759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5761=((1.0)*cj5);
IkReal x5762=((0.01)*cj5);
IkReal x5763=(cj6*r11);
IkReal x5764=(r20*sj6);
IkReal x5765=((0.01)*sj5);
IkReal x5766=(cj6*r01);
IkReal x5767=((0.37429)*cj5);
IkReal x5768=((0.37429)*sj5);
IkReal x5769=(cj6*r21);
IkReal x5770=(r10*sj5*sj6);
IkReal x5771=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x5767))+((r22*x5765))+(((-1.0)*pz))+(((-1.0)*x5768*x5769))+(((-1.0)*x5764*x5768))+((x5762*x5769))+((x5762*x5764)));
evalcond[2]=(((r00*sj6*x5762))+(((-1.0)*x5766*x5768))+(((-1.0)*r00*sj6*x5768))+(((-1.0)*px))+((r02*x5767))+((r02*x5765))+((x5762*x5766)));
evalcond[3]=((0.29542)+(((-1.0)*r10*sj6*x5768))+(((-1.0)*py))+(((-1.0)*x5763*x5768))+((r12*x5765))+((r12*x5767))+((r10*sj6*x5762))+((x5762*x5763)));
evalcond[4]=((1.0)+((sj5*x5764))+((sj5*x5769))+(((-1.0)*r22*x5761)));
evalcond[5]=((((-1.0)*r12*x5761))+((sj5*x5763))+x5770);
evalcond[6]=(((sj5*x5766))+(((-1.0)*r02*x5761))+x5771);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5772=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5772;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5772);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5773=((1.0)*sj6);
IkReal x5774=(((cj5*r12))+(((-1.0)*r10*sj5*x5773))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x5774;
j4eval[1]=IKsign(x5774);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5773))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5775=cj6*cj6;
IkReal x5776=cj5*cj5;
IkReal x5777=r10*r10;
IkReal x5778=r11*r11;
IkReal x5779=r12*r12;
IkReal x5780=(r10*sj6);
IkReal x5781=(r12*sj5);
IkReal x5782=((2.0)*cj6*r11);
IkReal x5783=((1.0)*x5777);
IkReal x5784=(x5775*x5778);
IkReal x5785=(((x5776*x5779))+(((-1.0)*x5775*x5783))+(((-2.0)*cj5*x5780*x5781))+(((-1.0)*cj5*x5781*x5782))+(((-1.0)*x5776*x5784))+((x5775*x5776*x5777))+(((-1.0)*x5776*x5783))+(((-1.0)*x5776*x5780*x5782))+(((-1.0)*x5779))+(((-1.0)*x5778))+((x5780*x5782))+x5784);
j4eval[0]=x5785;
j4eval[1]=((IKabs((((cj5*x5780))+((cj5*cj6*r11))+x5781)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5786=cj6*cj6;
IkReal x5787=cj5*cj5;
IkReal x5788=r10*r10;
IkReal x5789=r11*r11;
IkReal x5790=r12*r12;
IkReal x5791=(r10*sj6);
IkReal x5792=(r12*sj5);
IkReal x5793=((2.0)*cj6*r11);
IkReal x5794=(x5786*x5789);
IkReal x5795=(x5787*x5788);
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*cj6*r11))+((cj5*x5791))+x5792),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
CheckValue<IkReal> x5797=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5786*x5788))+(((-1.0)*x5787*x5794))+((x5791*x5793))+(((-2.0)*cj5*x5791*x5792))+(((-1.0)*x5789))+(((-1.0)*cj5*x5792*x5793))+(((-1.0)*x5790))+(((-1.0)*x5795))+(((-1.0)*x5787*x5791*x5793))+((x5787*x5790))+((x5786*x5795))+x5794)),-1);
if(!x5797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5796.value)+(((1.5707963267949)*(x5797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5798=IKsin(j4);
IkReal x5799=IKcos(j4);
IkReal x5800=(cj5*cj6);
IkReal x5801=(r11*sj6);
IkReal x5802=(cj6*r20);
IkReal x5803=(cj6*r10);
IkReal x5804=(cj5*sj6);
IkReal x5805=(r01*sj6);
IkReal x5806=(r21*sj6);
IkReal x5807=(cj6*r00);
IkReal x5808=((1.0)*x5799);
IkReal x5809=((1.0)*x5798);
IkReal x5810=(sj5*x5809);
evalcond[0]=(((x5799*x5802))+(((-1.0)*r21*x5800*x5809))+(((-1.0)*x5806*x5808))+(((-1.0)*r20*x5804*x5809))+(((-1.0)*r22*x5810)));
evalcond[1]=((((-1.0)*r12*x5810))+(((-1.0)*r10*x5804*x5809))+(((-1.0)*r11*x5800*x5809))+((x5799*x5803))+(((-1.0)*x5801*x5808)));
evalcond[2]=((((-1.0)*r22*sj5*x5808))+(((-1.0)*r21*x5800*x5808))+(((-1.0)*r20*x5804*x5808))+(((-1.0)*x5802*x5809))+((x5798*x5806)));
evalcond[3]=((((-1.0)*r02*sj5*x5808))+(((-1.0)*r00*x5804*x5808))+(((-1.0)*r01*x5800*x5808))+(((-1.0)*x5807*x5809))+((x5798*x5805)));
evalcond[4]=((1.0)+(((-1.0)*r00*x5804*x5809))+(((-1.0)*r01*x5800*x5809))+((x5799*x5807))+(((-1.0)*x5805*x5808))+(((-1.0)*r02*x5810)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x5804*x5808))+(((-1.0)*r11*x5800*x5808))+(((-1.0)*r12*sj5*x5808))+(((-1.0)*x5803*x5809))+((x5798*x5801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5811=((1.0)*sj6);
CheckValue<IkReal> x5812 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x5811)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5812.valid){
continue;
}
CheckValue<IkReal> x5813=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x5811))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x5813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5812.value)+(((1.5707963267949)*(x5813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5814=IKsin(j4);
IkReal x5815=IKcos(j4);
IkReal x5816=(cj5*cj6);
IkReal x5817=(r11*sj6);
IkReal x5818=(cj6*r20);
IkReal x5819=(cj6*r10);
IkReal x5820=(cj5*sj6);
IkReal x5821=(r01*sj6);
IkReal x5822=(r21*sj6);
IkReal x5823=(cj6*r00);
IkReal x5824=((1.0)*x5815);
IkReal x5825=((1.0)*x5814);
IkReal x5826=(sj5*x5825);
evalcond[0]=((((-1.0)*r22*x5826))+((x5815*x5818))+(((-1.0)*r20*x5820*x5825))+(((-1.0)*r21*x5816*x5825))+(((-1.0)*x5822*x5824)));
evalcond[1]=(((x5815*x5819))+(((-1.0)*r10*x5820*x5825))+(((-1.0)*x5817*x5824))+(((-1.0)*r11*x5816*x5825))+(((-1.0)*r12*x5826)));
evalcond[2]=((((-1.0)*r20*x5820*x5824))+(((-1.0)*x5818*x5825))+(((-1.0)*r21*x5816*x5824))+(((-1.0)*r22*sj5*x5824))+((x5814*x5822)));
evalcond[3]=((((-1.0)*x5823*x5825))+(((-1.0)*r01*x5816*x5824))+(((-1.0)*r00*x5820*x5824))+((x5814*x5821))+(((-1.0)*r02*sj5*x5824)));
evalcond[4]=((1.0)+(((-1.0)*r02*x5826))+(((-1.0)*x5821*x5824))+(((-1.0)*r01*x5816*x5825))+(((-1.0)*r00*x5820*x5825))+((x5815*x5823)));
evalcond[5]=((-1.0)+((x5814*x5817))+(((-1.0)*r10*x5820*x5824))+(((-1.0)*r12*sj5*x5824))+(((-1.0)*r11*x5816*x5824))+(((-1.0)*x5819*x5825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5827=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5827.valid){
continue;
}
CheckValue<IkReal> x5828 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5827.value)))+(x5828.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5829=IKsin(j4);
IkReal x5830=IKcos(j4);
IkReal x5831=(cj5*cj6);
IkReal x5832=(r11*sj6);
IkReal x5833=(cj6*r20);
IkReal x5834=(cj6*r10);
IkReal x5835=(cj5*sj6);
IkReal x5836=(r01*sj6);
IkReal x5837=(r21*sj6);
IkReal x5838=(cj6*r00);
IkReal x5839=((1.0)*x5830);
IkReal x5840=((1.0)*x5829);
IkReal x5841=(sj5*x5840);
evalcond[0]=((((-1.0)*r20*x5835*x5840))+((x5830*x5833))+(((-1.0)*r21*x5831*x5840))+(((-1.0)*r22*x5841))+(((-1.0)*x5837*x5839)));
evalcond[1]=((((-1.0)*r10*x5835*x5840))+(((-1.0)*x5832*x5839))+((x5830*x5834))+(((-1.0)*r11*x5831*x5840))+(((-1.0)*r12*x5841)));
evalcond[2]=((((-1.0)*r20*x5835*x5839))+((x5829*x5837))+(((-1.0)*x5833*x5840))+(((-1.0)*r22*sj5*x5839))+(((-1.0)*r21*x5831*x5839)));
evalcond[3]=(((x5829*x5836))+(((-1.0)*x5838*x5840))+(((-1.0)*r01*x5831*x5839))+(((-1.0)*r00*x5835*x5839))+(((-1.0)*r02*sj5*x5839)));
evalcond[4]=((1.0)+(((-1.0)*r02*x5841))+(((-1.0)*r01*x5831*x5840))+((x5830*x5838))+(((-1.0)*r00*x5835*x5840))+(((-1.0)*x5836*x5839)));
evalcond[5]=((-1.0)+(((-1.0)*x5834*x5840))+((x5829*x5832))+(((-1.0)*r12*sj5*x5839))+(((-1.0)*r11*x5831*x5839))+(((-1.0)*r10*x5835*x5839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5842=cj6*cj6;
IkReal x5843=cj5*cj5;
IkReal x5844=((1.0)*r11);
IkReal x5845=(cj5*sj0);
IkReal x5846=(cj6*r21);
IkReal x5847=(r22*sj5);
IkReal x5848=(r20*sj6);
IkReal x5849=(r12*r22);
IkReal x5850=((1.0)*sj6);
IkReal x5851=(r21*x5842);
IkReal x5852=(r10*x5843);
IkReal x5853=(r11*x5843);
IkReal x5854=(r20*x5842);
IkReal x5855=(cj5*r12*sj5);
CheckValue<IkReal> x5856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x5846*x5850))+(((-1.0)*x5852*x5854))+((sj6*x5846*x5852))+(((-1.0)*x5844*x5851))+((r11*r21))+((r10*x5854))+(((-1.0)*cj6*x5844*x5848))+((cj5*cj6*r11*x5847))+((x5848*x5855))+((x5851*x5853))+(((-1.0)*x5843*x5849))+((cj6*x5848*x5853))+((cj5*r10*sj6*x5847))+((r20*x5852))+((x5846*x5855))+x5849)),-1);
if(!x5856.valid){
continue;
}
CheckValue<IkReal> x5857 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x5850)))),(((x5845*x5848))+((x5845*x5846))+((sj0*x5847))),IKFAST_ATAN2_MAGTHRESH);
if(!x5857.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5856.value)))+(x5857.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5858=IKsin(j4);
IkReal x5859=IKcos(j4);
IkReal x5860=(cj5*cj6);
IkReal x5861=(r11*sj6);
IkReal x5862=(cj6*r20);
IkReal x5863=(cj5*sj6);
IkReal x5864=(cj6*r10);
IkReal x5865=(r01*sj6);
IkReal x5866=(r21*sj6);
IkReal x5867=(cj6*r00);
IkReal x5868=((1.0)*x5859);
IkReal x5869=((1.0)*x5858);
IkReal x5870=(sj5*x5869);
evalcond[0]=((((-1.0)*r20*x5863*x5869))+(((-1.0)*r22*x5870))+(((-1.0)*x5866*x5868))+(((-1.0)*r21*x5860*x5869))+((x5859*x5862)));
evalcond[1]=((((-1.0)*r20*x5863*x5868))+(((-1.0)*r22*sj5*x5868))+(((-1.0)*x5862*x5869))+((x5858*x5866))+(((-1.0)*r21*x5860*x5868)));
evalcond[2]=((((-1.0)*r12*x5870))+cj0+(((-1.0)*x5861*x5868))+(((-1.0)*r10*x5863*x5869))+(((-1.0)*r11*x5860*x5869))+((x5859*x5864)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x5868))+(((-1.0)*r00*x5863*x5868))+((x5858*x5865))+(((-1.0)*x5867*x5869))+(((-1.0)*r01*x5860*x5868)));
evalcond[4]=(sj0+(((-1.0)*r10*x5863*x5868))+(((-1.0)*r11*x5860*x5868))+((x5858*x5861))+(((-1.0)*x5864*x5869))+(((-1.0)*r12*sj5*x5868)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5870))+(((-1.0)*r00*x5863*x5869))+((x5859*x5867))+(((-1.0)*x5865*x5868))+(((-1.0)*r01*x5860*x5869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5871=cj5*cj5;
IkReal x5872=cj6*cj6;
IkReal x5873=(r22*sj5);
IkReal x5874=(cj6*r21);
IkReal x5875=(r20*sj6);
IkReal x5876=((1.0)*sj6);
IkReal x5877=(cj0*cj5);
IkReal x5878=(r02*r22);
IkReal x5879=(cj6*r01);
IkReal x5880=(r00*sj6);
IkReal x5881=(cj5*r02*sj5);
IkReal x5882=(r01*x5871);
IkReal x5883=(r21*x5872);
IkReal x5884=(r00*r20*x5871);
CheckValue<IkReal> x5885 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x5876))+((cj0*cj6*r20)))),(((x5874*x5877))+((cj0*x5873))+((x5875*x5877))),IKFAST_ATAN2_MAGTHRESH);
if(!x5885.valid){
continue;
}
CheckValue<IkReal> x5886=IKPowWithIntegerCheck(IKsign((((x5875*x5881))+(((-1.0)*r00*x5874*x5876))+(((-1.0)*x5871*x5878))+((x5871*x5874*x5880))+((r01*r21))+((cj5*x5873*x5879))+((x5871*x5875*x5879))+((x5874*x5881))+(((-1.0)*x5872*x5884))+(((-1.0)*x5875*x5879))+((x5882*x5883))+((cj5*x5873*x5880))+((r00*r20*x5872))+x5878+x5884+(((-1.0)*r01*x5883)))),-1);
if(!x5886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5885.value)+(((1.5707963267949)*(x5886.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5887=IKsin(j4);
IkReal x5888=IKcos(j4);
IkReal x5889=(cj5*cj6);
IkReal x5890=(r11*sj6);
IkReal x5891=(cj6*r20);
IkReal x5892=(cj5*sj6);
IkReal x5893=(cj6*r10);
IkReal x5894=(r01*sj6);
IkReal x5895=(r21*sj6);
IkReal x5896=(cj6*r00);
IkReal x5897=((1.0)*x5888);
IkReal x5898=((1.0)*x5887);
IkReal x5899=(sj5*x5898);
evalcond[0]=((((-1.0)*r22*x5899))+(((-1.0)*x5895*x5897))+((x5888*x5891))+(((-1.0)*r21*x5889*x5898))+(((-1.0)*r20*x5892*x5898)));
evalcond[1]=((((-1.0)*r22*sj5*x5897))+((x5887*x5895))+(((-1.0)*x5891*x5898))+(((-1.0)*r21*x5889*x5897))+(((-1.0)*r20*x5892*x5897)));
evalcond[2]=((((-1.0)*r12*x5899))+cj0+(((-1.0)*x5890*x5897))+(((-1.0)*r11*x5889*x5898))+(((-1.0)*r10*x5892*x5898))+((x5888*x5893)));
evalcond[3]=((((-1.0)*x5896*x5898))+cj0+(((-1.0)*r00*x5892*x5897))+((x5887*x5894))+(((-1.0)*r01*x5889*x5897))+(((-1.0)*r02*sj5*x5897)));
evalcond[4]=((((-1.0)*x5893*x5898))+sj0+(((-1.0)*r11*x5889*x5897))+(((-1.0)*r10*x5892*x5897))+((x5887*x5890))+(((-1.0)*r12*sj5*x5897)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x5892*x5898))+(((-1.0)*r02*x5899))+(((-1.0)*x5894*x5897))+((x5888*x5896))+(((-1.0)*r01*x5889*x5898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5900=(cj0*sj6);
IkReal x5901=(cj0*cj6);
CheckValue<IkReal> x5902 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5900))+((r20*x5901)))),(((cj5*r21*x5901))+((cj5*r20*x5900))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5902.valid){
continue;
}
CheckValue<IkReal> x5903=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5902.value)+(((1.5707963267949)*(x5903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5904=IKsin(j4);
IkReal x5905=IKcos(j4);
IkReal x5906=(cj5*cj6);
IkReal x5907=(r11*sj6);
IkReal x5908=(cj6*r20);
IkReal x5909=(cj5*sj6);
IkReal x5910=(cj6*r10);
IkReal x5911=(r01*sj6);
IkReal x5912=(r21*sj6);
IkReal x5913=(cj6*r00);
IkReal x5914=((1.0)*x5905);
IkReal x5915=((1.0)*x5904);
IkReal x5916=(sj5*x5915);
evalcond[0]=((((-1.0)*r21*x5906*x5915))+(((-1.0)*x5912*x5914))+(((-1.0)*r22*x5916))+((x5905*x5908))+(((-1.0)*r20*x5909*x5915)));
evalcond[1]=((((-1.0)*r21*x5906*x5914))+(((-1.0)*x5908*x5915))+(((-1.0)*r22*sj5*x5914))+((x5904*x5912))+(((-1.0)*r20*x5909*x5914)));
evalcond[2]=((((-1.0)*r12*x5916))+(((-1.0)*x5907*x5914))+cj0+(((-1.0)*r11*x5906*x5915))+(((-1.0)*r10*x5909*x5915))+((x5905*x5910)));
evalcond[3]=((((-1.0)*r00*x5909*x5914))+cj0+(((-1.0)*r02*sj5*x5914))+(((-1.0)*r01*x5906*x5914))+(((-1.0)*x5913*x5915))+((x5904*x5911)));
evalcond[4]=((((-1.0)*r12*sj5*x5914))+sj0+(((-1.0)*r11*x5906*x5914))+(((-1.0)*r10*x5909*x5914))+(((-1.0)*x5910*x5915))+((x5904*x5907)));
evalcond[5]=((((-1.0)*r00*x5909*x5915))+(((-1.0)*sj0))+(((-1.0)*r01*x5906*x5915))+((x5905*x5913))+(((-1.0)*r02*x5916))+(((-1.0)*x5911*x5914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5917=((0.01)*cj5);
IkReal x5918=(cj6*r11);
IkReal x5919=((1.0)*cj5);
IkReal x5920=(r20*sj6);
IkReal x5921=((0.01)*sj5);
IkReal x5922=(cj6*r01);
IkReal x5923=((0.37429)*cj5);
IkReal x5924=((0.37429)*sj5);
IkReal x5925=(cj6*r21);
IkReal x5926=(r10*sj5*sj6);
IkReal x5927=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.069)+((x5917*x5920))+((x5917*x5925))+((r22*x5921))+((r22*x5923))+(((-1.0)*x5920*x5924))+(((-1.0)*pz))+(((-1.0)*x5924*x5925)));
evalcond[2]=(((r00*sj6*x5917))+((x5917*x5922))+(((-0.29542)*cj0))+(((-1.0)*r00*sj6*x5924))+(((-1.0)*px))+(((-1.0)*x5922*x5924))+((r02*x5921))+((r02*x5923)));
evalcond[3]=((((-1.0)*x5918*x5924))+(((-0.29542)*sj0))+(((-1.0)*py))+((r10*sj6*x5917))+((r12*x5921))+((r12*x5923))+((x5917*x5918))+(((-1.0)*r10*sj6*x5924)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x5919))+((sj5*x5925))+((sj5*x5920)));
evalcond[5]=((((-1.0)*r12*x5919))+((sj5*x5918))+x5926);
evalcond[6]=(((sj5*x5922))+(((-1.0)*r02*x5919))+x5927);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5928=(r20*sj0);
IkReal x5929=((1.0)*sj5);
IkReal x5930=(r21*sj0);
IkReal x5931=(((cj5*r12))+(((-1.0)*r10*sj6*x5929))+(((-1.0)*cj6*r11*x5929)));
j4eval[0]=x5931;
j4eval[1]=IKsign(x5931);
j4eval[2]=((IKabs(((((-1.0)*sj6*x5930))+((cj6*x5928)))))+(IKabs((((cj5*sj6*x5928))+((r22*sj0*sj5))+((cj5*cj6*x5930))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5932=cj5*cj5;
IkReal x5933=cj6*cj6;
IkReal x5934=(r00*r20);
IkReal x5935=(r02*r22);
IkReal x5936=(r22*sj5);
IkReal x5937=(cj6*r21);
IkReal x5938=(r00*sj6);
IkReal x5939=(r20*sj6);
IkReal x5940=(cj6*r01);
IkReal x5941=(cj0*cj5);
IkReal x5942=((1.0)*x5932);
IkReal x5943=(cj5*r02*sj5);
IkReal x5944=(r01*r21*x5933);
IkReal x5945=(((x5939*x5943))+((x5932*x5944))+((x5932*x5939*x5940))+((x5932*x5934))+(((-1.0)*x5944))+(((-1.0)*x5935*x5942))+((x5933*x5934))+(((-1.0)*x5937*x5938))+((r01*r21))+(((-1.0)*x5939*x5940))+((x5937*x5943))+((cj5*x5936*x5938))+((x5932*x5937*x5938))+((cj5*x5936*x5940))+x5935+(((-1.0)*x5933*x5934*x5942)));
j4eval[0]=x5945;
j4eval[1]=IKsign(x5945);
j4eval[2]=((IKabs((((x5939*x5941))+((x5937*x5941))+((cj0*x5936)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5946=cj6*cj6;
IkReal x5947=cj5*cj5;
IkReal x5948=(r12*sj5);
IkReal x5949=(r22*sj5);
IkReal x5950=((1.0)*r11);
IkReal x5951=(r20*sj0);
IkReal x5952=(r10*r20);
IkReal x5953=(cj5*sj6);
IkReal x5954=(cj6*r10);
IkReal x5955=(r12*r22);
IkReal x5956=(cj5*cj6*r21);
IkReal x5957=(r21*x5946);
IkReal x5958=(cj6*r20*sj6);
IkReal x5959=(r11*x5947);
IkReal x5960=((1.0)*r21*sj6);
IkReal x5961=((1.0)*x5947);
IkReal x5962=(((x5947*x5952))+((x5946*x5952))+(((-1.0)*x5954*x5960))+((r11*r21))+((x5957*x5959))+((r20*x5948*x5953))+((r21*sj6*x5947*x5954))+((x5958*x5959))+((x5948*x5956))+((cj5*cj6*r11*x5949))+(((-1.0)*x5950*x5957))+(((-1.0)*x5950*x5958))+(((-1.0)*x5955*x5961))+(((-1.0)*x5946*x5952*x5961))+x5955+((r10*x5949*x5953)));
j4eval[0]=x5962;
j4eval[1]=IKsign(x5962);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5960))+((cj6*x5951)))))+(IKabs((((sj0*x5956))+((x5951*x5953))+((sj0*x5949))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5963=((1.0)*cj5);
IkReal x5964=((0.01)*cj5);
IkReal x5965=(cj6*r11);
IkReal x5966=(r20*sj6);
IkReal x5967=((0.01)*sj5);
IkReal x5968=(cj6*r01);
IkReal x5969=((0.37429)*cj5);
IkReal x5970=((0.37429)*sj5);
IkReal x5971=(cj6*r21);
IkReal x5972=(r10*sj5*sj6);
IkReal x5973=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x5964*x5966))+((r22*x5969))+((r22*x5967))+((x5964*x5971))+(((-1.0)*pz))+(((-1.0)*x5966*x5970))+(((-1.0)*x5970*x5971)));
evalcond[2]=((-0.29542)+((r02*x5969))+((r02*x5967))+((x5964*x5968))+(((-1.0)*px))+((r00*sj6*x5964))+(((-1.0)*r00*sj6*x5970))+(((-1.0)*x5968*x5970)));
evalcond[3]=(((x5964*x5965))+(((-1.0)*r10*sj6*x5970))+(((-1.0)*py))+((r12*x5969))+((r12*x5967))+(((-1.0)*x5965*x5970))+((r10*sj6*x5964)));
evalcond[4]=((-1.0)+((sj5*x5966))+((sj5*x5971))+(((-1.0)*r22*x5963)));
evalcond[5]=(((sj5*x5965))+(((-1.0)*r12*x5963))+x5972);
evalcond[6]=(((sj5*x5968))+x5973+(((-1.0)*r02*x5963)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5974=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5974;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5975=((1.0)*sj6);
IkReal x5976=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x5975))+((cj5*r02)));
j4eval[0]=x5976;
j4eval[1]=IKsign(x5976);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5975))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5977=cj6*cj6;
IkReal x5978=r01*r01;
IkReal x5979=cj5*cj5;
IkReal x5980=r00*r00;
IkReal x5981=r02*r02;
IkReal x5982=(cj6*r00);
IkReal x5983=(r02*sj5);
IkReal x5984=(cj5*cj6*r01);
IkReal x5985=((2.0)*r01*sj6);
IkReal x5986=(cj5*r00*sj6);
IkReal x5987=((1.0)*x5979);
IkReal x5988=(x5977*x5980);
IkReal x5989=(x5977*x5978);
IkReal x5990=(((x5979*x5982*x5985))+(((2.0)*x5983*x5986))+(((2.0)*x5983*x5984))+((x5979*x5989))+((x5979*x5980))+(((-1.0)*x5987*x5988))+(((-1.0)*x5989))+(((-1.0)*x5981*x5987))+x5978+x5988+x5981+(((-1.0)*x5982*x5985)));
j4eval[0]=x5990;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x5982)))+(IKabs((x5983+x5986+x5984))));
j4eval[2]=IKsign(x5990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5991=cj6*cj6;
IkReal x5992=r01*r01;
IkReal x5993=cj5*cj5;
IkReal x5994=r00*r00;
IkReal x5995=r02*r02;
IkReal x5996=(cj6*r00);
IkReal x5997=((2.0)*r01);
IkReal x5998=(cj5*cj6);
IkReal x5999=(r02*sj5);
IkReal x6000=(cj5*r00*sj6);
IkReal x6001=(x5993*x5994);
IkReal x6002=(x5991*x5992);
CheckValue<IkReal> x6003 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x5996)),(x6000+((r01*x5998))+x5999),IKFAST_ATAN2_MAGTHRESH);
if(!x6003.valid){
continue;
}
CheckValue<IkReal> x6004=IKPowWithIntegerCheck(IKsign((((sj6*x5993*x5996*x5997))+(((-1.0)*x5991*x6001))+(((-1.0)*x5993*x5995))+x6001+((x5997*x5998*x5999))+(((-1.0)*sj6*x5996*x5997))+(((2.0)*x5999*x6000))+x5995+x5992+((x5991*x5994))+((x5993*x6002))+(((-1.0)*x6002)))),-1);
if(!x6004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6003.value)+(((1.5707963267949)*(x6004.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6005=IKsin(j4);
IkReal x6006=IKcos(j4);
IkReal x6007=(cj5*cj6);
IkReal x6008=(r11*sj6);
IkReal x6009=(cj6*r20);
IkReal x6010=(cj6*r10);
IkReal x6011=(cj5*sj6);
IkReal x6012=(r21*sj6);
IkReal x6013=(cj6*r00);
IkReal x6014=(r01*sj6);
IkReal x6015=((1.0)*x6006);
IkReal x6016=((1.0)*x6005);
IkReal x6017=(sj5*x6016);
evalcond[0]=((((-1.0)*r21*x6007*x6016))+((x6006*x6009))+(((-1.0)*r20*x6011*x6016))+(((-1.0)*r22*x6017))+(((-1.0)*x6012*x6015)));
evalcond[1]=((((-1.0)*r02*x6017))+((x6006*x6013))+(((-1.0)*r00*x6011*x6016))+(((-1.0)*r01*x6007*x6016))+(((-1.0)*x6014*x6015)));
evalcond[2]=((((-1.0)*r22*sj5*x6015))+(((-1.0)*r21*x6007*x6015))+(((-1.0)*r20*x6011*x6015))+(((-1.0)*x6009*x6016))+((x6005*x6012)));
evalcond[3]=((((-1.0)*x6010*x6016))+(((-1.0)*r12*sj5*x6015))+(((-1.0)*r11*x6007*x6015))+((x6005*x6008))+(((-1.0)*r10*x6011*x6015)));
evalcond[4]=((-1.0)+((x6006*x6010))+(((-1.0)*r12*x6017))+(((-1.0)*x6008*x6015))+(((-1.0)*r11*x6007*x6016))+(((-1.0)*r10*x6011*x6016)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x6015))+(((-1.0)*r00*x6011*x6015))+(((-1.0)*x6013*x6016))+((x6005*x6014))+(((-1.0)*r01*x6007*x6015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6018=((1.0)*sj6);
CheckValue<IkReal> x6019 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6018))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x6019.valid){
continue;
}
CheckValue<IkReal> x6020=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x6018))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x6020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6019.value)+(((1.5707963267949)*(x6020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6021=IKsin(j4);
IkReal x6022=IKcos(j4);
IkReal x6023=(cj5*cj6);
IkReal x6024=(r11*sj6);
IkReal x6025=(cj6*r20);
IkReal x6026=(cj6*r10);
IkReal x6027=(cj5*sj6);
IkReal x6028=(r21*sj6);
IkReal x6029=(cj6*r00);
IkReal x6030=(r01*sj6);
IkReal x6031=((1.0)*x6022);
IkReal x6032=((1.0)*x6021);
IkReal x6033=(sj5*x6032);
evalcond[0]=((((-1.0)*r20*x6027*x6032))+(((-1.0)*r21*x6023*x6032))+(((-1.0)*r22*x6033))+(((-1.0)*x6028*x6031))+((x6022*x6025)));
evalcond[1]=((((-1.0)*r01*x6023*x6032))+(((-1.0)*x6030*x6031))+((x6022*x6029))+(((-1.0)*r02*x6033))+(((-1.0)*r00*x6027*x6032)));
evalcond[2]=((((-1.0)*r20*x6027*x6031))+(((-1.0)*r21*x6023*x6031))+((x6021*x6028))+(((-1.0)*x6025*x6032))+(((-1.0)*r22*sj5*x6031)));
evalcond[3]=((((-1.0)*r11*x6023*x6031))+(((-1.0)*r10*x6027*x6031))+((x6021*x6024))+(((-1.0)*r12*sj5*x6031))+(((-1.0)*x6026*x6032)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x6023*x6032))+(((-1.0)*r12*x6033))+(((-1.0)*r10*x6027*x6032))+(((-1.0)*x6024*x6031))+((x6022*x6026)));
evalcond[5]=((1.0)+(((-1.0)*x6029*x6032))+(((-1.0)*r01*x6023*x6031))+(((-1.0)*r02*sj5*x6031))+((x6021*x6030))+(((-1.0)*r00*x6027*x6031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6034=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6034.valid){
continue;
}
CheckValue<IkReal> x6035 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x6035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6034.value)))+(x6035.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6036=IKsin(j4);
IkReal x6037=IKcos(j4);
IkReal x6038=(cj5*cj6);
IkReal x6039=(r11*sj6);
IkReal x6040=(cj6*r20);
IkReal x6041=(cj6*r10);
IkReal x6042=(cj5*sj6);
IkReal x6043=(r21*sj6);
IkReal x6044=(cj6*r00);
IkReal x6045=(r01*sj6);
IkReal x6046=((1.0)*x6037);
IkReal x6047=((1.0)*x6036);
IkReal x6048=(sj5*x6047);
evalcond[0]=(((x6037*x6040))+(((-1.0)*r20*x6042*x6047))+(((-1.0)*r21*x6038*x6047))+(((-1.0)*x6043*x6046))+(((-1.0)*r22*x6048)));
evalcond[1]=(((x6037*x6044))+(((-1.0)*r02*x6048))+(((-1.0)*r01*x6038*x6047))+(((-1.0)*r00*x6042*x6047))+(((-1.0)*x6045*x6046)));
evalcond[2]=((((-1.0)*r20*x6042*x6046))+((x6036*x6043))+(((-1.0)*r21*x6038*x6046))+(((-1.0)*x6040*x6047))+(((-1.0)*r22*sj5*x6046)));
evalcond[3]=((((-1.0)*r12*sj5*x6046))+(((-1.0)*r11*x6038*x6046))+(((-1.0)*x6041*x6047))+(((-1.0)*r10*x6042*x6046))+((x6036*x6039)));
evalcond[4]=((-1.0)+((x6037*x6041))+(((-1.0)*x6039*x6046))+(((-1.0)*r11*x6038*x6047))+(((-1.0)*r12*x6048))+(((-1.0)*r10*x6042*x6047)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x6046))+((x6036*x6045))+(((-1.0)*r01*x6038*x6046))+(((-1.0)*r00*x6042*x6046))+(((-1.0)*x6044*x6047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6049=((1.0)*cj5);
IkReal x6050=((0.01)*cj5);
IkReal x6051=(cj6*r11);
IkReal x6052=(r20*sj6);
IkReal x6053=((0.01)*sj5);
IkReal x6054=(cj6*r01);
IkReal x6055=((0.37429)*cj5);
IkReal x6056=((0.37429)*sj5);
IkReal x6057=(cj6*r21);
IkReal x6058=(r10*sj5*sj6);
IkReal x6059=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x6052*x6056))+((r22*x6055))+((r22*x6053))+(((-1.0)*pz))+(((-1.0)*x6056*x6057))+((x6050*x6057))+((x6050*x6052)));
evalcond[2]=((0.29542)+(((-1.0)*x6054*x6056))+(((-1.0)*px))+(((-1.0)*r00*sj6*x6056))+((r02*x6053))+((r02*x6055))+((r00*sj6*x6050))+((x6050*x6054)));
evalcond[3]=(((r12*x6055))+((r12*x6053))+(((-1.0)*x6051*x6056))+((r10*sj6*x6050))+(((-1.0)*py))+((x6050*x6051))+(((-1.0)*r10*sj6*x6056)));
evalcond[4]=((-1.0)+((sj5*x6057))+((sj5*x6052))+(((-1.0)*r22*x6049)));
evalcond[5]=(x6058+((sj5*x6051))+(((-1.0)*r12*x6049)));
evalcond[6]=(x6059+((sj5*x6054))+(((-1.0)*r02*x6049)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6060=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6060;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6061=((1.0)*sj5);
IkReal x6062=(((cj5*r22))+(((-1.0)*cj6*r21*x6061))+(((-1.0)*r20*sj6*x6061)));
j4eval[0]=x6062;
j4eval[1]=IKsign(x6062);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6063=cj6*cj6;
IkReal x6064=cj5*cj5;
IkReal x6065=r00*r00;
IkReal x6066=r01*r01;
IkReal x6067=r02*r02;
IkReal x6068=(cj6*r00);
IkReal x6069=(cj5*cj6*r01);
IkReal x6070=((2.0)*r02*sj5);
IkReal x6071=((1.0)*x6063);
IkReal x6072=((2.0)*r01*sj6);
IkReal x6073=(cj5*r00*sj6);
IkReal x6074=(x6064*x6065);
IkReal x6075=((((-1.0)*x6074))+((x6068*x6072))+(((-1.0)*x6065*x6071))+(((-1.0)*x6064*x6068*x6072))+((x6063*x6066))+((x6063*x6074))+(((-1.0)*x6066))+(((-1.0)*x6067))+(((-1.0)*x6064*x6066*x6071))+((x6064*x6067))+(((-1.0)*x6070*x6073))+(((-1.0)*x6069*x6070)));
j4eval[0]=x6075;
j4eval[1]=((IKabs((x6073+x6069+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x6068))));
j4eval[2]=IKsign(x6075);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6076=cj6*cj6;
IkReal x6077=cj5*cj5;
IkReal x6078=r00*r00;
IkReal x6079=r01*r01;
IkReal x6080=r02*r02;
IkReal x6081=(cj6*r00);
IkReal x6082=(cj5*cj6*r01);
IkReal x6083=((2.0)*r02*sj5);
IkReal x6084=((1.0)*x6076);
IkReal x6085=((2.0)*r01*sj6);
IkReal x6086=(cj5*r00*sj6);
IkReal x6087=(x6077*x6078);
CheckValue<IkReal> x6088=IKPowWithIntegerCheck(IKsign((((x6076*x6079))+(((-1.0)*x6079))+(((-1.0)*x6077*x6081*x6085))+(((-1.0)*x6083*x6086))+(((-1.0)*x6080))+(((-1.0)*x6087))+(((-1.0)*x6077*x6079*x6084))+(((-1.0)*x6082*x6083))+((x6076*x6087))+(((-1.0)*x6078*x6084))+((x6077*x6080))+((x6081*x6085)))),-1);
if(!x6088.valid){
continue;
}
CheckValue<IkReal> x6089 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6081)),(x6086+x6082+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x6089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6088.value)))+(x6089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6090=IKsin(j4);
IkReal x6091=IKcos(j4);
IkReal x6092=(cj5*cj6);
IkReal x6093=(r11*sj6);
IkReal x6094=(cj6*r20);
IkReal x6095=(cj6*r10);
IkReal x6096=(cj5*sj6);
IkReal x6097=(r21*sj6);
IkReal x6098=(cj6*r00);
IkReal x6099=(r01*sj6);
IkReal x6100=((1.0)*x6091);
IkReal x6101=((1.0)*x6090);
IkReal x6102=(sj5*x6101);
evalcond[0]=((((-1.0)*r22*x6102))+((x6091*x6094))+(((-1.0)*r20*x6096*x6101))+(((-1.0)*r21*x6092*x6101))+(((-1.0)*x6097*x6100)));
evalcond[1]=((((-1.0)*r02*x6102))+(((-1.0)*x6099*x6100))+(((-1.0)*r00*x6096*x6101))+((x6091*x6098))+(((-1.0)*r01*x6092*x6101)));
evalcond[2]=(((x6090*x6097))+(((-1.0)*r20*x6096*x6100))+(((-1.0)*r22*sj5*x6100))+(((-1.0)*x6094*x6101))+(((-1.0)*r21*x6092*x6100)));
evalcond[3]=(((x6090*x6093))+(((-1.0)*r10*x6096*x6100))+(((-1.0)*x6095*x6101))+(((-1.0)*r11*x6092*x6100))+(((-1.0)*r12*sj5*x6100)));
evalcond[4]=((1.0)+(((-1.0)*r10*x6096*x6101))+(((-1.0)*x6093*x6100))+(((-1.0)*r11*x6092*x6101))+((x6091*x6095))+(((-1.0)*r12*x6102)));
evalcond[5]=((-1.0)+((x6090*x6099))+(((-1.0)*x6098*x6101))+(((-1.0)*r00*x6096*x6100))+(((-1.0)*r02*sj5*x6100))+(((-1.0)*r01*x6092*x6100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6103=((1.0)*sj5);
CheckValue<IkReal> x6104 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x6104.valid){
continue;
}
CheckValue<IkReal> x6105=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x6103))+(((-1.0)*cj6*r21*x6103)))),-1);
if(!x6105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6104.value)+(((1.5707963267949)*(x6105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6106=IKsin(j4);
IkReal x6107=IKcos(j4);
IkReal x6108=(cj5*cj6);
IkReal x6109=(r11*sj6);
IkReal x6110=(cj6*r20);
IkReal x6111=(cj6*r10);
IkReal x6112=(cj5*sj6);
IkReal x6113=(r21*sj6);
IkReal x6114=(cj6*r00);
IkReal x6115=(r01*sj6);
IkReal x6116=((1.0)*x6107);
IkReal x6117=((1.0)*x6106);
IkReal x6118=(sj5*x6117);
evalcond[0]=((((-1.0)*r20*x6112*x6117))+(((-1.0)*r22*x6118))+(((-1.0)*x6113*x6116))+(((-1.0)*r21*x6108*x6117))+((x6107*x6110)));
evalcond[1]=((((-1.0)*r00*x6112*x6117))+(((-1.0)*x6115*x6116))+(((-1.0)*r01*x6108*x6117))+(((-1.0)*r02*x6118))+((x6107*x6114)));
evalcond[2]=((((-1.0)*r20*x6112*x6116))+((x6106*x6113))+(((-1.0)*r21*x6108*x6116))+(((-1.0)*x6110*x6117))+(((-1.0)*r22*sj5*x6116)));
evalcond[3]=(((x6106*x6109))+(((-1.0)*r12*sj5*x6116))+(((-1.0)*x6111*x6117))+(((-1.0)*r10*x6112*x6116))+(((-1.0)*r11*x6108*x6116)));
evalcond[4]=((1.0)+(((-1.0)*x6109*x6116))+(((-1.0)*r12*x6118))+(((-1.0)*r10*x6112*x6117))+(((-1.0)*r11*x6108*x6117))+((x6107*x6111)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x6112*x6116))+(((-1.0)*r02*sj5*x6116))+(((-1.0)*r01*x6108*x6116))+((x6106*x6115))+(((-1.0)*x6114*x6117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6119 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x6119.valid){
continue;
}
CheckValue<IkReal> x6120=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6119.value)+(((1.5707963267949)*(x6120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6121=IKsin(j4);
IkReal x6122=IKcos(j4);
IkReal x6123=(cj5*cj6);
IkReal x6124=(r11*sj6);
IkReal x6125=(cj6*r20);
IkReal x6126=(cj6*r10);
IkReal x6127=(cj5*sj6);
IkReal x6128=(r21*sj6);
IkReal x6129=(cj6*r00);
IkReal x6130=(r01*sj6);
IkReal x6131=((1.0)*x6122);
IkReal x6132=((1.0)*x6121);
IkReal x6133=(sj5*x6132);
evalcond[0]=((((-1.0)*r20*x6127*x6132))+(((-1.0)*x6128*x6131))+(((-1.0)*r22*x6133))+((x6122*x6125))+(((-1.0)*r21*x6123*x6132)));
evalcond[1]=((((-1.0)*x6130*x6131))+(((-1.0)*r01*x6123*x6132))+((x6122*x6129))+(((-1.0)*r00*x6127*x6132))+(((-1.0)*r02*x6133)));
evalcond[2]=((((-1.0)*x6125*x6132))+(((-1.0)*r20*x6127*x6131))+((x6121*x6128))+(((-1.0)*r22*sj5*x6131))+(((-1.0)*r21*x6123*x6131)));
evalcond[3]=((((-1.0)*r10*x6127*x6131))+(((-1.0)*x6126*x6132))+((x6121*x6124))+(((-1.0)*r12*sj5*x6131))+(((-1.0)*r11*x6123*x6131)));
evalcond[4]=((1.0)+(((-1.0)*r10*x6127*x6132))+(((-1.0)*x6124*x6131))+((x6122*x6126))+(((-1.0)*r12*x6133))+(((-1.0)*r11*x6123*x6132)));
evalcond[5]=((-1.0)+((x6121*x6130))+(((-1.0)*x6129*x6132))+(((-1.0)*r01*x6123*x6131))+(((-1.0)*r00*x6127*x6131))+(((-1.0)*r02*sj5*x6131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6134=((1.0)*cj5);
IkReal x6135=((0.01)*cj5);
IkReal x6136=(cj6*r11);
IkReal x6137=(r20*sj6);
IkReal x6138=((0.01)*sj5);
IkReal x6139=(cj6*r01);
IkReal x6140=((0.37429)*cj5);
IkReal x6141=((0.37429)*sj5);
IkReal x6142=(cj6*r21);
IkReal x6143=(r10*sj5*sj6);
IkReal x6144=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x6138))+(((-1.0)*x6137*x6141))+((r22*x6140))+((x6135*x6137))+(((-1.0)*pz))+(((-1.0)*x6141*x6142))+((x6135*x6142)));
evalcond[2]=((((-1.0)*x6139*x6141))+((r00*sj6*x6135))+(((-1.0)*r00*sj6*x6141))+((x6135*x6139))+(((-1.0)*px))+((r02*x6138))+((r02*x6140)));
evalcond[3]=((-0.29542)+(((-1.0)*r10*sj6*x6141))+(((-1.0)*x6136*x6141))+((r10*sj6*x6135))+((x6135*x6136))+(((-1.0)*py))+((r12*x6140))+((r12*x6138)));
evalcond[4]=((-1.0)+((sj5*x6137))+(((-1.0)*r22*x6134))+((sj5*x6142)));
evalcond[5]=(((sj5*x6136))+x6143+(((-1.0)*r12*x6134)));
evalcond[6]=(((sj5*x6139))+x6144+(((-1.0)*r02*x6134)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6145=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6145;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6145);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6146=((1.0)*sj6);
IkReal x6147=(((cj5*r12))+(((-1.0)*r10*sj5*x6146))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x6147;
j4eval[1]=IKsign(x6147);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x6146))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6148=r11*r11;
IkReal x6149=cj5*cj5;
IkReal x6150=cj6*cj6;
IkReal x6151=r10*r10;
IkReal x6152=r12*r12;
IkReal x6153=(r12*sj5);
IkReal x6154=(cj6*r10);
IkReal x6155=((1.0)*x6150);
IkReal x6156=(cj5*cj6*r11);
IkReal x6157=(cj5*r10*sj6);
IkReal x6158=((2.0)*r11*sj6);
IkReal x6159=(x6149*x6151);
IkReal x6160=(((x6148*x6149*x6150))+((x6149*x6154*x6158))+(((2.0)*x6153*x6156))+(((2.0)*x6153*x6157))+x6148+x6152+x6159+(((-1.0)*x6149*x6152))+(((-1.0)*x6155*x6159))+(((-1.0)*x6154*x6158))+((x6150*x6151))+(((-1.0)*x6148*x6155)));
j4eval[0]=x6160;
j4eval[1]=IKsign(x6160);
j4eval[2]=((IKabs((x6153+x6156+x6157)))+(IKabs((x6154+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6161=r11*r11;
IkReal x6162=cj5*cj5;
IkReal x6163=cj6*cj6;
IkReal x6164=r10*r10;
IkReal x6165=r12*r12;
IkReal x6166=(r10*sj6);
IkReal x6167=(r12*sj5);
IkReal x6168=((1.0)*x6163);
IkReal x6169=(cj5*cj6*r11);
IkReal x6170=((2.0)*cj6*r11);
IkReal x6171=(x6162*x6164);
CheckValue<IkReal> x6172 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x6169+x6167+((cj5*x6166))),IKFAST_ATAN2_MAGTHRESH);
if(!x6172.valid){
continue;
}
CheckValue<IkReal> x6173=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6168*x6171))+((x6161*x6162*x6163))+(((-1.0)*x6166*x6170))+(((2.0)*x6167*x6169))+x6171+x6161+x6165+(((2.0)*cj5*x6166*x6167))+((x6162*x6166*x6170))+((x6163*x6164))+(((-1.0)*x6161*x6168))+(((-1.0)*x6162*x6165)))),-1);
if(!x6173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6172.value)+(((1.5707963267949)*(x6173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6174=IKsin(j4);
IkReal x6175=IKcos(j4);
IkReal x6176=(cj5*cj6);
IkReal x6177=(r11*sj6);
IkReal x6178=(cj6*r20);
IkReal x6179=(cj6*r10);
IkReal x6180=(cj5*sj6);
IkReal x6181=(r01*sj6);
IkReal x6182=(r21*sj6);
IkReal x6183=(cj6*r00);
IkReal x6184=((1.0)*x6175);
IkReal x6185=((1.0)*x6174);
IkReal x6186=(sj5*x6185);
evalcond[0]=((((-1.0)*r22*x6186))+((x6175*x6178))+(((-1.0)*x6182*x6184))+(((-1.0)*r21*x6176*x6185))+(((-1.0)*r20*x6180*x6185)));
evalcond[1]=(((x6175*x6179))+(((-1.0)*r10*x6180*x6185))+(((-1.0)*r11*x6176*x6185))+(((-1.0)*r12*x6186))+(((-1.0)*x6177*x6184)));
evalcond[2]=((((-1.0)*r21*x6176*x6184))+(((-1.0)*x6178*x6185))+(((-1.0)*r20*x6180*x6184))+((x6174*x6182))+(((-1.0)*r22*sj5*x6184)));
evalcond[3]=((((-1.0)*r01*x6176*x6184))+(((-1.0)*r00*x6180*x6184))+(((-1.0)*r02*sj5*x6184))+((x6174*x6181))+(((-1.0)*x6183*x6185)));
evalcond[4]=((1.0)+(((-1.0)*r01*x6176*x6185))+(((-1.0)*r00*x6180*x6185))+(((-1.0)*r02*x6186))+((x6175*x6183))+(((-1.0)*x6181*x6184)));
evalcond[5]=((1.0)+((x6174*x6177))+(((-1.0)*r10*x6180*x6184))+(((-1.0)*r11*x6176*x6184))+(((-1.0)*x6179*x6185))+(((-1.0)*r12*sj5*x6184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6187=((1.0)*sj6);
CheckValue<IkReal> x6188 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x6187)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x6188.valid){
continue;
}
CheckValue<IkReal> x6189=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x6187)))),-1);
if(!x6189.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6188.value)+(((1.5707963267949)*(x6189.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6190=IKsin(j4);
IkReal x6191=IKcos(j4);
IkReal x6192=(cj5*cj6);
IkReal x6193=(r11*sj6);
IkReal x6194=(cj6*r20);
IkReal x6195=(cj6*r10);
IkReal x6196=(cj5*sj6);
IkReal x6197=(r01*sj6);
IkReal x6198=(r21*sj6);
IkReal x6199=(cj6*r00);
IkReal x6200=((1.0)*x6191);
IkReal x6201=((1.0)*x6190);
IkReal x6202=(sj5*x6201);
evalcond[0]=(((x6191*x6194))+(((-1.0)*r21*x6192*x6201))+(((-1.0)*x6198*x6200))+(((-1.0)*r20*x6196*x6201))+(((-1.0)*r22*x6202)));
evalcond[1]=(((x6191*x6195))+(((-1.0)*r10*x6196*x6201))+(((-1.0)*r11*x6192*x6201))+(((-1.0)*x6193*x6200))+(((-1.0)*r12*x6202)));
evalcond[2]=(((x6190*x6198))+(((-1.0)*r22*sj5*x6200))+(((-1.0)*r21*x6192*x6200))+(((-1.0)*r20*x6196*x6200))+(((-1.0)*x6194*x6201)));
evalcond[3]=(((x6190*x6197))+(((-1.0)*x6199*x6201))+(((-1.0)*r02*sj5*x6200))+(((-1.0)*r00*x6196*x6200))+(((-1.0)*r01*x6192*x6200)));
evalcond[4]=((1.0)+((x6191*x6199))+(((-1.0)*x6197*x6200))+(((-1.0)*r02*x6202))+(((-1.0)*r00*x6196*x6201))+(((-1.0)*r01*x6192*x6201)));
evalcond[5]=((1.0)+((x6190*x6193))+(((-1.0)*r10*x6196*x6200))+(((-1.0)*r11*x6192*x6200))+(((-1.0)*x6195*x6201))+(((-1.0)*r12*sj5*x6200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6203=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6203.valid){
continue;
}
CheckValue<IkReal> x6204 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x6204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6203.value)))+(x6204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6205=IKsin(j4);
IkReal x6206=IKcos(j4);
IkReal x6207=(cj5*cj6);
IkReal x6208=(r11*sj6);
IkReal x6209=(cj6*r20);
IkReal x6210=(cj6*r10);
IkReal x6211=(cj5*sj6);
IkReal x6212=(r01*sj6);
IkReal x6213=(r21*sj6);
IkReal x6214=(cj6*r00);
IkReal x6215=((1.0)*x6206);
IkReal x6216=((1.0)*x6205);
IkReal x6217=(sj5*x6216);
evalcond[0]=((((-1.0)*x6213*x6215))+(((-1.0)*r20*x6211*x6216))+((x6206*x6209))+(((-1.0)*r22*x6217))+(((-1.0)*r21*x6207*x6216)));
evalcond[1]=((((-1.0)*r12*x6217))+(((-1.0)*r10*x6211*x6216))+(((-1.0)*x6208*x6215))+(((-1.0)*r11*x6207*x6216))+((x6206*x6210)));
evalcond[2]=((((-1.0)*x6209*x6216))+(((-1.0)*r22*sj5*x6215))+(((-1.0)*r20*x6211*x6215))+((x6205*x6213))+(((-1.0)*r21*x6207*x6215)));
evalcond[3]=((((-1.0)*r02*sj5*x6215))+(((-1.0)*r00*x6211*x6215))+((x6205*x6212))+(((-1.0)*x6214*x6216))+(((-1.0)*r01*x6207*x6215)));
evalcond[4]=((1.0)+(((-1.0)*r00*x6211*x6216))+(((-1.0)*x6212*x6215))+(((-1.0)*r02*x6217))+((x6206*x6214))+(((-1.0)*r01*x6207*x6216)));
evalcond[5]=((1.0)+(((-1.0)*x6210*x6216))+(((-1.0)*r10*x6211*x6215))+(((-1.0)*r12*sj5*x6215))+(((-1.0)*r11*x6207*x6215))+((x6205*x6208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6218=((1.0)*cj5);
IkReal x6219=((0.01)*cj5);
IkReal x6220=(cj6*r11);
IkReal x6221=(r20*sj6);
IkReal x6222=((0.01)*sj5);
IkReal x6223=(cj6*r01);
IkReal x6224=((0.37429)*cj5);
IkReal x6225=((0.37429)*sj5);
IkReal x6226=(cj6*r21);
IkReal x6227=(r10*sj5*sj6);
IkReal x6228=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x6219*x6226))+((x6219*x6221))+(((-1.0)*pz))+((r22*x6224))+((r22*x6222))+(((-1.0)*x6225*x6226))+(((-1.0)*x6221*x6225)));
evalcond[2]=(((r00*sj6*x6219))+((r02*x6222))+((r02*x6224))+((x6219*x6223))+(((-1.0)*r00*sj6*x6225))+(((-1.0)*px))+(((-1.0)*x6223*x6225)));
evalcond[3]=((0.29542)+((r10*sj6*x6219))+((x6219*x6220))+(((-1.0)*py))+(((-1.0)*r10*sj6*x6225))+(((-1.0)*x6220*x6225))+((r12*x6224))+((r12*x6222)));
evalcond[4]=((-1.0)+((sj5*x6226))+((sj5*x6221))+(((-1.0)*r22*x6218)));
evalcond[5]=(x6227+(((-1.0)*r12*x6218))+((sj5*x6220)));
evalcond[6]=(x6228+(((-1.0)*r02*x6218))+((sj5*x6223)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6229=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x6229;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6229);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6230=((1.0)*sj5);
IkReal x6231=((((-1.0)*r20*sj6*x6230))+(((-1.0)*cj6*r21*x6230))+((cj5*r22)));
j4eval[0]=x6231;
j4eval[1]=IKsign(x6231);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6232=cj6*cj6;
IkReal x6233=cj5*cj5;
IkReal x6234=r10*r10;
IkReal x6235=r11*r11;
IkReal x6236=r12*r12;
IkReal x6237=(r10*sj6);
IkReal x6238=(r12*sj5);
IkReal x6239=((2.0)*cj6*r11);
IkReal x6240=((1.0)*x6234);
IkReal x6241=(x6232*x6235);
IkReal x6242=(((x6233*x6236))+x6241+(((-1.0)*x6232*x6240))+(((-1.0)*cj5*x6238*x6239))+(((-2.0)*cj5*x6237*x6238))+(((-1.0)*x6236))+(((-1.0)*x6235))+((x6237*x6239))+((x6232*x6233*x6234))+(((-1.0)*x6233*x6240))+(((-1.0)*x6233*x6241))+(((-1.0)*x6233*x6237*x6239)));
j4eval[0]=x6242;
j4eval[1]=((IKabs((x6238+((cj5*x6237))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6243=cj6*cj6;
IkReal x6244=cj5*cj5;
IkReal x6245=r10*r10;
IkReal x6246=r11*r11;
IkReal x6247=r12*r12;
IkReal x6248=(r10*sj6);
IkReal x6249=(r12*sj5);
IkReal x6250=((2.0)*cj6*r11);
IkReal x6251=(x6243*x6246);
IkReal x6252=(x6244*x6245);
CheckValue<IkReal> x6253=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6244*x6251))+x6251+((x6243*x6252))+(((-1.0)*cj5*x6249*x6250))+(((-1.0)*x6246))+(((-1.0)*x6247))+((x6244*x6247))+(((-1.0)*x6252))+(((-1.0)*x6244*x6248*x6250))+(((-2.0)*cj5*x6248*x6249))+(((-1.0)*x6243*x6245))+((x6248*x6250)))),-1);
if(!x6253.valid){
continue;
}
CheckValue<IkReal> x6254 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x6249+((cj5*x6248))+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x6254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6253.value)))+(x6254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6255=IKsin(j4);
IkReal x6256=IKcos(j4);
IkReal x6257=(cj5*cj6);
IkReal x6258=(r11*sj6);
IkReal x6259=(cj6*r20);
IkReal x6260=(cj6*r10);
IkReal x6261=(cj5*sj6);
IkReal x6262=(r01*sj6);
IkReal x6263=(r21*sj6);
IkReal x6264=(cj6*r00);
IkReal x6265=((1.0)*x6256);
IkReal x6266=((1.0)*x6255);
IkReal x6267=(sj5*x6266);
evalcond[0]=((((-1.0)*r20*x6261*x6266))+(((-1.0)*x6263*x6265))+((x6256*x6259))+(((-1.0)*r22*x6267))+(((-1.0)*r21*x6257*x6266)));
evalcond[1]=((((-1.0)*r11*x6257*x6266))+(((-1.0)*x6258*x6265))+((x6256*x6260))+(((-1.0)*r10*x6261*x6266))+(((-1.0)*r12*x6267)));
evalcond[2]=((((-1.0)*r20*x6261*x6265))+(((-1.0)*x6259*x6266))+((x6255*x6263))+(((-1.0)*r21*x6257*x6265))+(((-1.0)*r22*sj5*x6265)));
evalcond[3]=((((-1.0)*r01*x6257*x6265))+(((-1.0)*r02*sj5*x6265))+(((-1.0)*r00*x6261*x6265))+((x6255*x6262))+(((-1.0)*x6264*x6266)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x6267))+(((-1.0)*r01*x6257*x6266))+((x6256*x6264))+(((-1.0)*r00*x6261*x6266))+(((-1.0)*x6262*x6265)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x6257*x6265))+(((-1.0)*r12*sj5*x6265))+(((-1.0)*x6260*x6266))+((x6255*x6258))+(((-1.0)*r10*x6261*x6265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6268=((1.0)*sj5);
CheckValue<IkReal> x6269 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x6269.valid){
continue;
}
CheckValue<IkReal> x6270=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x6268))+(((-1.0)*r20*sj6*x6268)))),-1);
if(!x6270.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6269.value)+(((1.5707963267949)*(x6270.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6271=IKsin(j4);
IkReal x6272=IKcos(j4);
IkReal x6273=(cj5*cj6);
IkReal x6274=(r11*sj6);
IkReal x6275=(cj6*r20);
IkReal x6276=(cj6*r10);
IkReal x6277=(cj5*sj6);
IkReal x6278=(r01*sj6);
IkReal x6279=(r21*sj6);
IkReal x6280=(cj6*r00);
IkReal x6281=((1.0)*x6272);
IkReal x6282=((1.0)*x6271);
IkReal x6283=(sj5*x6282);
evalcond[0]=((((-1.0)*x6279*x6281))+(((-1.0)*r22*x6283))+(((-1.0)*r20*x6277*x6282))+((x6272*x6275))+(((-1.0)*r21*x6273*x6282)));
evalcond[1]=((((-1.0)*r10*x6277*x6282))+(((-1.0)*r11*x6273*x6282))+(((-1.0)*x6274*x6281))+(((-1.0)*r12*x6283))+((x6272*x6276)));
evalcond[2]=((((-1.0)*r22*sj5*x6281))+(((-1.0)*x6275*x6282))+(((-1.0)*r20*x6277*x6281))+(((-1.0)*r21*x6273*x6281))+((x6271*x6279)));
evalcond[3]=((((-1.0)*r01*x6273*x6281))+(((-1.0)*r00*x6277*x6281))+(((-1.0)*r02*sj5*x6281))+(((-1.0)*x6280*x6282))+((x6271*x6278)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x6283))+(((-1.0)*r01*x6273*x6282))+((x6272*x6280))+(((-1.0)*r00*x6277*x6282))+(((-1.0)*x6278*x6281)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x6281))+(((-1.0)*r10*x6277*x6281))+(((-1.0)*r11*x6273*x6281))+(((-1.0)*x6276*x6282))+((x6271*x6274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6284 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x6284.valid){
continue;
}
CheckValue<IkReal> x6285=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x6285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6284.value)+(((1.5707963267949)*(x6285.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6286=IKsin(j4);
IkReal x6287=IKcos(j4);
IkReal x6288=(cj5*cj6);
IkReal x6289=(r11*sj6);
IkReal x6290=(cj6*r20);
IkReal x6291=(cj6*r10);
IkReal x6292=(cj5*sj6);
IkReal x6293=(r01*sj6);
IkReal x6294=(r21*sj6);
IkReal x6295=(cj6*r00);
IkReal x6296=((1.0)*x6287);
IkReal x6297=((1.0)*x6286);
IkReal x6298=(sj5*x6297);
evalcond[0]=((((-1.0)*r20*x6292*x6297))+(((-1.0)*x6294*x6296))+(((-1.0)*r21*x6288*x6297))+(((-1.0)*r22*x6298))+((x6287*x6290)));
evalcond[1]=((((-1.0)*x6289*x6296))+(((-1.0)*r12*x6298))+(((-1.0)*r10*x6292*x6297))+((x6287*x6291))+(((-1.0)*r11*x6288*x6297)));
evalcond[2]=((((-1.0)*r20*x6292*x6296))+(((-1.0)*r22*sj5*x6296))+(((-1.0)*r21*x6288*x6296))+(((-1.0)*x6290*x6297))+((x6286*x6294)));
evalcond[3]=((((-1.0)*r00*x6292*x6296))+(((-1.0)*r02*sj5*x6296))+(((-1.0)*r01*x6288*x6296))+(((-1.0)*x6295*x6297))+((x6286*x6293)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x6298))+(((-1.0)*r00*x6292*x6297))+(((-1.0)*x6293*x6296))+(((-1.0)*r01*x6288*x6297))+((x6287*x6295)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x6296))+(((-1.0)*x6291*x6297))+((x6286*x6289))+(((-1.0)*r10*x6292*x6296))+(((-1.0)*r11*x6288*x6296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6299=cj6*cj6;
IkReal x6300=cj5*cj5;
IkReal x6301=((1.0)*r11);
IkReal x6302=(cj5*sj0);
IkReal x6303=(cj6*r21);
IkReal x6304=(r22*sj5);
IkReal x6305=(r20*sj6);
IkReal x6306=(r12*r22);
IkReal x6307=((1.0)*sj6);
IkReal x6308=(r21*x6299);
IkReal x6309=(r10*x6300);
IkReal x6310=(r11*x6300);
IkReal x6311=(r20*x6299);
IkReal x6312=(cj5*r12*sj5);
CheckValue<IkReal> x6313 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x6307)))),(((x6302*x6305))+((x6302*x6303))+((sj0*x6304))),IKFAST_ATAN2_MAGTHRESH);
if(!x6313.valid){
continue;
}
CheckValue<IkReal> x6314=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6300*x6306))+((x6308*x6310))+x6306+((x6303*x6312))+((cj5*cj6*r11*x6304))+((r11*r21))+(((-1.0)*x6309*x6311))+((cj6*x6305*x6310))+(((-1.0)*cj6*x6301*x6305))+((x6305*x6312))+((cj5*r10*sj6*x6304))+((r10*x6311))+(((-1.0)*r10*x6303*x6307))+(((-1.0)*x6301*x6308))+((r20*x6309))+((sj6*x6303*x6309)))),-1);
if(!x6314.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6313.value)+(((1.5707963267949)*(x6314.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6315=IKsin(j4);
IkReal x6316=IKcos(j4);
IkReal x6317=(cj5*cj6);
IkReal x6318=(r11*sj6);
IkReal x6319=(cj6*r20);
IkReal x6320=(cj6*r10);
IkReal x6321=(cj5*sj6);
IkReal x6322=(r01*sj6);
IkReal x6323=(r21*sj6);
IkReal x6324=(cj6*r00);
IkReal x6325=((1.0)*x6316);
IkReal x6326=((1.0)*x6315);
IkReal x6327=(sj5*x6326);
evalcond[0]=((((-1.0)*r21*x6317*x6326))+(((-1.0)*r20*x6321*x6326))+((x6316*x6319))+(((-1.0)*r22*x6327))+(((-1.0)*x6323*x6325)));
evalcond[1]=((((-1.0)*r21*x6317*x6325))+(((-1.0)*r20*x6321*x6325))+(((-1.0)*r22*sj5*x6325))+((x6315*x6323))+(((-1.0)*x6319*x6326)));
evalcond[2]=((((-1.0)*r01*x6317*x6326))+sj0+(((-1.0)*r00*x6321*x6326))+(((-1.0)*x6322*x6325))+(((-1.0)*r02*x6327))+((x6316*x6324)));
evalcond[3]=((((-1.0)*r01*x6317*x6325))+cj0+(((-1.0)*r00*x6321*x6325))+(((-1.0)*x6324*x6326))+((x6315*x6322))+(((-1.0)*r02*sj5*x6325)));
evalcond[4]=(sj0+(((-1.0)*x6320*x6326))+(((-1.0)*r10*x6321*x6325))+((x6315*x6318))+(((-1.0)*r12*sj5*x6325))+(((-1.0)*r11*x6317*x6325)));
evalcond[5]=((((-1.0)*x6318*x6325))+(((-1.0)*r10*x6321*x6326))+(((-1.0)*r11*x6317*x6326))+(((-1.0)*r12*x6327))+(((-1.0)*cj0))+((x6316*x6320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6328=cj5*cj5;
IkReal x6329=cj6*cj6;
IkReal x6330=(r22*sj5);
IkReal x6331=(cj6*r21);
IkReal x6332=(r20*sj6);
IkReal x6333=((1.0)*sj6);
IkReal x6334=(cj0*cj5);
IkReal x6335=(r02*r22);
IkReal x6336=(cj6*r01);
IkReal x6337=(r00*sj6);
IkReal x6338=(cj5*r02*sj5);
IkReal x6339=(r01*x6328);
IkReal x6340=(r21*x6329);
IkReal x6341=(r00*r20*x6328);
CheckValue<IkReal> x6342 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x6333)))),(((x6331*x6334))+((x6332*x6334))+((cj0*x6330))),IKFAST_ATAN2_MAGTHRESH);
if(!x6342.valid){
continue;
}
CheckValue<IkReal> x6343=IKPowWithIntegerCheck(IKsign((((cj5*x6330*x6336))+((cj5*x6330*x6337))+x6341+x6335+(((-1.0)*x6332*x6336))+((x6331*x6338))+((r01*r21))+((x6339*x6340))+(((-1.0)*x6328*x6335))+((x6332*x6338))+(((-1.0)*r01*x6340))+((x6328*x6331*x6337))+(((-1.0)*x6329*x6341))+((x6328*x6332*x6336))+((r00*r20*x6329))+(((-1.0)*r00*x6331*x6333)))),-1);
if(!x6343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6342.value)+(((1.5707963267949)*(x6343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6344=IKsin(j4);
IkReal x6345=IKcos(j4);
IkReal x6346=(cj5*cj6);
IkReal x6347=(r11*sj6);
IkReal x6348=(cj6*r20);
IkReal x6349=(cj6*r10);
IkReal x6350=(cj5*sj6);
IkReal x6351=(r01*sj6);
IkReal x6352=(r21*sj6);
IkReal x6353=(cj6*r00);
IkReal x6354=((1.0)*x6345);
IkReal x6355=((1.0)*x6344);
IkReal x6356=(sj5*x6355);
evalcond[0]=((((-1.0)*r20*x6350*x6355))+((x6345*x6348))+(((-1.0)*r22*x6356))+(((-1.0)*r21*x6346*x6355))+(((-1.0)*x6352*x6354)));
evalcond[1]=((((-1.0)*r20*x6350*x6354))+(((-1.0)*r22*sj5*x6354))+((x6344*x6352))+(((-1.0)*r21*x6346*x6354))+(((-1.0)*x6348*x6355)));
evalcond[2]=(((x6345*x6353))+sj0+(((-1.0)*x6351*x6354))+(((-1.0)*r02*x6356))+(((-1.0)*r01*x6346*x6355))+(((-1.0)*r00*x6350*x6355)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x6354))+(((-1.0)*x6353*x6355))+(((-1.0)*r01*x6346*x6354))+((x6344*x6351))+(((-1.0)*r00*x6350*x6354)));
evalcond[4]=(((x6344*x6347))+(((-1.0)*x6349*x6355))+(((-1.0)*r12*sj5*x6354))+sj0+(((-1.0)*r11*x6346*x6354))+(((-1.0)*r10*x6350*x6354)));
evalcond[5]=((((-1.0)*r11*x6346*x6355))+(((-1.0)*x6347*x6354))+((x6345*x6349))+(((-1.0)*r12*x6356))+(((-1.0)*r10*x6350*x6355))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6357=(cj5*sj0);
IkReal x6358=((1.0)*sj5);
CheckValue<IkReal> x6359 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((cj6*r21*x6357))+((r22*sj0*sj5))+((r20*sj6*x6357))),IKFAST_ATAN2_MAGTHRESH);
if(!x6359.valid){
continue;
}
CheckValue<IkReal> x6360=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x6358))+(((-1.0)*cj6*r11*x6358)))),-1);
if(!x6360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6359.value)+(((1.5707963267949)*(x6360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6361=IKsin(j4);
IkReal x6362=IKcos(j4);
IkReal x6363=(cj5*cj6);
IkReal x6364=(r11*sj6);
IkReal x6365=(cj6*r20);
IkReal x6366=(cj6*r10);
IkReal x6367=(cj5*sj6);
IkReal x6368=(r01*sj6);
IkReal x6369=(r21*sj6);
IkReal x6370=(cj6*r00);
IkReal x6371=((1.0)*x6362);
IkReal x6372=((1.0)*x6361);
IkReal x6373=(sj5*x6372);
evalcond[0]=(((x6362*x6365))+(((-1.0)*r21*x6363*x6372))+(((-1.0)*r20*x6367*x6372))+(((-1.0)*r22*x6373))+(((-1.0)*x6369*x6371)));
evalcond[1]=((((-1.0)*x6365*x6372))+((x6361*x6369))+(((-1.0)*r22*sj5*x6371))+(((-1.0)*r21*x6363*x6371))+(((-1.0)*r20*x6367*x6371)));
evalcond[2]=((((-1.0)*x6368*x6371))+(((-1.0)*r01*x6363*x6372))+sj0+((x6362*x6370))+(((-1.0)*r02*x6373))+(((-1.0)*r00*x6367*x6372)));
evalcond[3]=((((-1.0)*r01*x6363*x6371))+cj0+((x6361*x6368))+(((-1.0)*r02*sj5*x6371))+(((-1.0)*r00*x6367*x6371))+(((-1.0)*x6370*x6372)));
evalcond[4]=((((-1.0)*x6366*x6372))+sj0+(((-1.0)*r11*x6363*x6371))+((x6361*x6364))+(((-1.0)*r10*x6367*x6371))+(((-1.0)*r12*sj5*x6371)));
evalcond[5]=((((-1.0)*r11*x6363*x6372))+((x6362*x6366))+(((-1.0)*r10*x6367*x6372))+(((-1.0)*r12*x6373))+(((-1.0)*x6364*x6371))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6374=cj5*cj5;
IkReal x6375=cj6*cj6;
IkReal x6376=r20*r20;
IkReal x6377=r21*r21;
IkReal x6378=r22*r22;
IkReal x6379=(r22*sj5);
IkReal x6380=(cj6*r20);
IkReal x6381=(cj1*sj2);
IkReal x6382=(r21*sj6);
IkReal x6383=(cj5*r20*sj6);
IkReal x6384=(cj5*cj6*r21);
IkReal x6385=((1.0)*x6374);
IkReal x6386=(x6375*x6376);
IkReal x6387=(x6375*x6377);
CheckValue<IkReal> x6388=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6387))+x6378+x6377+x6386+(((-1.0)*x6378*x6385))+(((-2.0)*x6380*x6382))+((x6374*x6376))+(((-1.0)*x6385*x6386))+(((2.0)*x6374*x6380*x6382))+((x6374*x6387))+(((2.0)*x6379*x6384))+(((2.0)*x6379*x6383)))),-1);
if(!x6388.valid){
continue;
}
CheckValue<IkReal> x6389 = IKatan2WithCheck(IkReal((((x6381*x6384))+((x6381*x6383))+((x6379*x6381))+(((-1.0)*sj1*x6382))+((sj1*x6380)))),((((-1.0)*x6380*x6381))+((x6381*x6382))+((sj1*x6379))+((sj1*x6383))+((sj1*x6384))),IKFAST_ATAN2_MAGTHRESH);
if(!x6389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6388.value)))+(x6389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6390=IKsin(j4);
IkReal x6391=IKcos(j4);
IkReal x6392=(cj5*cj6);
IkReal x6393=((1.0)*cj1);
IkReal x6394=(sj1*sj2);
IkReal x6395=(r11*sj6);
IkReal x6396=(cj6*r20);
IkReal x6397=(cj6*r10);
IkReal x6398=(cj5*sj6);
IkReal x6399=(r01*sj6);
IkReal x6400=(r21*sj6);
IkReal x6401=(cj6*r00);
IkReal x6402=((1.0)*x6391);
IkReal x6403=((1.0)*x6390);
IkReal x6404=(sj5*x6403);
evalcond[0]=(sj1+(((-1.0)*x6396*x6403))+((x6390*x6400))+(((-1.0)*r22*sj5*x6402))+(((-1.0)*r20*x6398*x6402))+(((-1.0)*r21*x6392*x6402)));
evalcond[1]=(((x6391*x6396))+(((-1.0)*x6400*x6402))+((cj1*sj2))+(((-1.0)*r20*x6398*x6403))+(((-1.0)*r21*x6392*x6403))+(((-1.0)*r22*x6404)));
evalcond[2]=(((x6390*x6399))+(((-1.0)*x6401*x6403))+(((-1.0)*r02*sj5*x6402))+(((-1.0)*cj0*x6393))+(((-1.0)*r00*x6398*x6402))+(((-1.0)*r01*x6392*x6402)));
evalcond[3]=((((-1.0)*sj0*x6393))+((x6390*x6395))+(((-1.0)*r11*x6392*x6402))+(((-1.0)*r12*sj5*x6402))+(((-1.0)*x6397*x6403))+(((-1.0)*r10*x6398*x6402)));
evalcond[4]=(((x6391*x6397))+(((-1.0)*r11*x6392*x6403))+((cj0*cj2))+((sj0*x6394))+(((-1.0)*r12*x6404))+(((-1.0)*x6395*x6402))+(((-1.0)*r10*x6398*x6403)));
evalcond[5]=(((cj0*x6394))+((x6391*x6401))+(((-1.0)*cj2*sj0))+(((-1.0)*r00*x6398*x6403))+(((-1.0)*r01*x6392*x6403))+(((-1.0)*r02*x6404))+(((-1.0)*x6399*x6402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6405=(cj6*sj1);
IkReal x6406=((1.0)*cj5);
IkReal x6407=((1.0)*sj5);
IkReal x6408=(cj1*sj0);
IkReal x6409=((1.0)*sj6);
CheckValue<IkReal> x6410 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x6406*x6408))+(((-1.0)*r10*sj1*sj6*x6406))+(((-1.0)*r12*sj1*x6407))+(((-1.0)*r11*x6405*x6406))+(((-1.0)*cj6*r21*x6406*x6408))+(((-1.0)*r22*x6407*x6408)))),(((r10*x6405))+((cj6*r20*x6408))+(((-1.0)*r11*sj1*x6409))+(((-1.0)*r21*x6408*x6409))),IKFAST_ATAN2_MAGTHRESH);
if(!x6410.valid){
continue;
}
CheckValue<IkReal> x6411=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x6407))+(((-1.0)*cj6*r01*x6407))+((cj5*r02)))),-1);
if(!x6411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6410.value)+(((1.5707963267949)*(x6411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6412=IKsin(j4);
IkReal x6413=IKcos(j4);
IkReal x6414=(cj5*cj6);
IkReal x6415=((1.0)*cj1);
IkReal x6416=(sj1*sj2);
IkReal x6417=(r11*sj6);
IkReal x6418=(cj6*r20);
IkReal x6419=(cj6*r10);
IkReal x6420=(cj5*sj6);
IkReal x6421=(r01*sj6);
IkReal x6422=(r21*sj6);
IkReal x6423=(cj6*r00);
IkReal x6424=((1.0)*x6413);
IkReal x6425=((1.0)*x6412);
IkReal x6426=(sj5*x6425);
evalcond[0]=((((-1.0)*x6418*x6425))+sj1+(((-1.0)*r22*sj5*x6424))+((x6412*x6422))+(((-1.0)*r20*x6420*x6424))+(((-1.0)*r21*x6414*x6424)));
evalcond[1]=((((-1.0)*x6422*x6424))+(((-1.0)*r22*x6426))+((cj1*sj2))+((x6413*x6418))+(((-1.0)*r20*x6420*x6425))+(((-1.0)*r21*x6414*x6425)));
evalcond[2]=((((-1.0)*r01*x6414*x6424))+((x6412*x6421))+(((-1.0)*r02*sj5*x6424))+(((-1.0)*cj0*x6415))+(((-1.0)*r00*x6420*x6424))+(((-1.0)*x6423*x6425)));
evalcond[3]=((((-1.0)*r11*x6414*x6424))+(((-1.0)*x6419*x6425))+(((-1.0)*r10*x6420*x6424))+(((-1.0)*sj0*x6415))+(((-1.0)*r12*sj5*x6424))+((x6412*x6417)));
evalcond[4]=((((-1.0)*x6417*x6424))+((sj0*x6416))+(((-1.0)*r11*x6414*x6425))+(((-1.0)*r10*x6420*x6425))+((cj0*cj2))+((x6413*x6419))+(((-1.0)*r12*x6426)));
evalcond[5]=((((-1.0)*x6421*x6424))+(((-1.0)*r01*x6414*x6425))+((x6413*x6423))+(((-1.0)*cj2*sj0))+((cj0*x6416))+(((-1.0)*r02*x6426))+(((-1.0)*r00*x6420*x6425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6427=(cj0*cj1);
IkReal x6428=((1.0)*sj1);
IkReal x6429=((1.0)*cj5);
IkReal x6430=(cj5*x6428);
CheckValue<IkReal> x6431=IKPowWithIntegerCheck(IKsign((((cj6*r11*sj5))+((r10*sj5*sj6))+(((-1.0)*r12*x6429)))),-1);
if(!x6431.valid){
continue;
}
CheckValue<IkReal> x6432 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r21*x6427*x6429))+(((-1.0)*r00*sj6*x6430))+(((-1.0)*r02*sj5*x6428))+(((-1.0)*r22*sj5*x6427))+(((-1.0)*r20*sj6*x6427*x6429))+(((-1.0)*cj6*r01*x6430)))),((((-1.0)*r01*sj6*x6428))+((cj6*r00*sj1))+(((-1.0)*r21*sj6*x6427))+((cj6*r20*x6427))),IKFAST_ATAN2_MAGTHRESH);
if(!x6432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6431.value)))+(x6432.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6433=IKsin(j4);
IkReal x6434=IKcos(j4);
IkReal x6435=(cj5*cj6);
IkReal x6436=((1.0)*cj1);
IkReal x6437=(sj1*sj2);
IkReal x6438=(r11*sj6);
IkReal x6439=(cj6*r20);
IkReal x6440=(cj6*r10);
IkReal x6441=(cj5*sj6);
IkReal x6442=(r01*sj6);
IkReal x6443=(r21*sj6);
IkReal x6444=(cj6*r00);
IkReal x6445=((1.0)*x6434);
IkReal x6446=((1.0)*x6433);
IkReal x6447=(sj5*x6446);
evalcond[0]=(sj1+(((-1.0)*x6439*x6446))+(((-1.0)*r22*sj5*x6445))+(((-1.0)*r21*x6435*x6445))+((x6433*x6443))+(((-1.0)*r20*x6441*x6445)));
evalcond[1]=(((x6434*x6439))+((cj1*sj2))+(((-1.0)*r21*x6435*x6446))+(((-1.0)*x6443*x6445))+(((-1.0)*r22*x6447))+(((-1.0)*r20*x6441*x6446)));
evalcond[2]=((((-1.0)*x6444*x6446))+(((-1.0)*cj0*x6436))+(((-1.0)*r02*sj5*x6445))+(((-1.0)*r01*x6435*x6445))+((x6433*x6442))+(((-1.0)*r00*x6441*x6445)));
evalcond[3]=((((-1.0)*r12*sj5*x6445))+(((-1.0)*r11*x6435*x6445))+(((-1.0)*sj0*x6436))+((x6433*x6438))+(((-1.0)*x6440*x6446))+(((-1.0)*r10*x6441*x6445)));
evalcond[4]=((((-1.0)*r11*x6435*x6446))+(((-1.0)*x6438*x6445))+((cj0*cj2))+(((-1.0)*r12*x6447))+((sj0*x6437))+((x6434*x6440))+(((-1.0)*r10*x6441*x6446)));
evalcond[5]=(((cj0*x6437))+(((-1.0)*r02*x6447))+(((-1.0)*cj2*sj0))+(((-1.0)*r01*x6435*x6446))+(((-1.0)*x6442*x6445))+((x6434*x6444))+(((-1.0)*r00*x6441*x6446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6448=cj5*cj5;
IkReal x6449=cj6*cj6;
IkReal x6450=r20*r20;
IkReal x6451=r21*r21;
IkReal x6452=r22*r22;
IkReal x6453=(r22*sj5);
IkReal x6454=(cj6*r20);
IkReal x6455=(cj1*sj2);
IkReal x6456=(r21*sj6);
IkReal x6457=(cj5*r20*sj6);
IkReal x6458=(cj5*cj6*r21);
IkReal x6459=((1.0)*x6448);
IkReal x6460=(x6449*x6450);
IkReal x6461=(x6449*x6451);
CheckValue<IkReal> x6462=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6452*x6459))+x6451+x6452+x6460+(((2.0)*x6453*x6458))+(((2.0)*x6453*x6457))+(((2.0)*x6448*x6454*x6456))+((x6448*x6450))+(((-2.0)*x6454*x6456))+(((-1.0)*x6461))+((x6448*x6461))+(((-1.0)*x6459*x6460)))),-1);
if(!x6462.valid){
continue;
}
CheckValue<IkReal> x6463 = IKatan2WithCheck(IkReal((((x6453*x6455))+((x6455*x6457))+((x6455*x6458))+((sj1*x6454))+(((-1.0)*sj1*x6456)))),(((x6455*x6456))+((sj1*x6458))+((sj1*x6457))+((sj1*x6453))+(((-1.0)*x6454*x6455))),IKFAST_ATAN2_MAGTHRESH);
if(!x6463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6462.value)))+(x6463.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6464=IKsin(j4);
IkReal x6465=IKcos(j4);
IkReal x6466=((1.0)*r21);
IkReal x6467=(r22*sj5);
IkReal x6468=(cj5*cj6);
IkReal x6469=(cj6*r20);
IkReal x6470=(cj5*r20);
IkReal x6471=(sj6*x6465);
IkReal x6472=((1.0)*x6464);
evalcond[0]=(sj1+(((-1.0)*x6470*x6471))+(((-1.0)*x6465*x6466*x6468))+((r21*sj6*x6464))+(((-1.0)*x6469*x6472))+(((-1.0)*x6465*x6467)));
evalcond[1]=((((-1.0)*x6467*x6472))+(((-1.0)*x6464*x6466*x6468))+((cj1*sj2))+(((-1.0)*sj6*x6470*x6472))+((x6465*x6469))+(((-1.0)*x6466*x6471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6473=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x6473;
j0eval[1]=IKsign(x6473);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6474=((1.0)*cj5);
IkReal x6475=(cj4*sj6);
IkReal x6476=((0.01)*cj5);
IkReal x6477=(r20*sj6);
IkReal x6478=(cj6*r21);
IkReal x6479=(sj4*sj6);
IkReal x6480=(r22*sj5);
IkReal x6481=(cj4*cj6);
IkReal x6482=((0.37429)*sj5);
IkReal x6483=((1.0)*cj6*sj4);
IkReal x6484=((1.0)*cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*x6475))+(((-1.0)*sj4*x6474*x6478))+(((-1.0)*sj4*x6474*x6477))+((r20*x6481))+(((-1.0)*sj4*x6480)));
evalcond[2]=((-0.36442)+((x6476*x6477))+((x6476*x6478))+(((-1.0)*x6478*x6482))+(((-1.0)*pz))+(((-1.0)*x6477*x6482))+(((0.01)*x6480))+(((0.37429)*cj5*r22)));
evalcond[3]=((1.0)+(((-1.0)*r20*x6474*x6475))+(((-1.0)*cj4*x6474*x6478))+(((-1.0)*cj4*x6480))+((r21*x6479))+(((-1.0)*r20*x6483)));
evalcond[4]=(((sj5*x6478))+((sj5*x6477))+(((-1.0)*r22*x6474)));
evalcond[5]=((((-1.0)*r00*x6483))+(((-1.0)*r02*x6484))+(((-1.0)*r00*x6474*x6475))+((r01*x6479))+(((-1.0)*r01*x6474*x6481)));
evalcond[6]=((((-1.0)*r12*x6484))+(((-1.0)*r10*x6474*x6475))+(((-1.0)*r11*x6474*x6481))+(((-1.0)*r10*x6483))+((r11*x6479)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6485=(sj2*sj5);
IkReal x6486=(cj6*r01);
IkReal x6487=(r00*sj6);
IkReal x6488=(cj6*r11);
IkReal x6489=(cj2*sj5);
IkReal x6490=(r10*sj6);
IkReal x6491=(cj5*sj2);
IkReal x6492=((1.0)*cj2*cj5);
if( IKabs((((x6488*x6489))+(((-1.0)*r02*x6491))+(((-1.0)*r12*x6492))+((x6489*x6490))+((x6485*x6487))+((x6485*x6486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x6486*x6489))+(((-1.0)*r02*x6492))+((r12*x6491))+((x6487*x6489))+(((-1.0)*x6485*x6490))+(((-1.0)*x6485*x6488)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x6488*x6489))+(((-1.0)*r02*x6491))+(((-1.0)*r12*x6492))+((x6489*x6490))+((x6485*x6487))+((x6485*x6486))))+IKsqr((((x6486*x6489))+(((-1.0)*r02*x6492))+((r12*x6491))+((x6487*x6489))+(((-1.0)*x6485*x6490))+(((-1.0)*x6485*x6488))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x6488*x6489))+(((-1.0)*r02*x6491))+(((-1.0)*r12*x6492))+((x6489*x6490))+((x6485*x6487))+((x6485*x6486))), (((x6486*x6489))+(((-1.0)*r02*x6492))+((r12*x6491))+((x6487*x6489))+(((-1.0)*x6485*x6490))+(((-1.0)*x6485*x6488))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6493=IKcos(j0);
IkReal x6494=IKsin(j0);
IkReal x6495=((1.0)*sj4);
IkReal x6496=((0.37429)*sj5);
IkReal x6497=(r10*sj6);
IkReal x6498=(cj5*r12);
IkReal x6499=(cj6*r01);
IkReal x6500=(r00*sj6);
IkReal x6501=(r12*sj5);
IkReal x6502=(cj6*r11);
IkReal x6503=(r02*sj5);
IkReal x6504=((0.01)*cj5);
IkReal x6505=(cj4*cj6);
IkReal x6506=(cj5*r02);
IkReal x6507=(sj2*x6493);
IkReal x6508=(cj5*x6502);
IkReal x6509=((0.069)*x6494);
IkReal x6510=(cj2*x6493);
IkReal x6511=((0.069)*x6493);
IkReal x6512=(sj2*x6494);
IkReal x6513=((1.0)*cj4*sj6);
IkReal x6514=((1.0)*cj2*x6494);
evalcond[0]=((((-1.0)*x6498))+x6507+((sj5*x6497))+(((-1.0)*x6514))+((sj5*x6502)));
evalcond[1]=((((-1.0)*x6506))+((sj5*x6499))+((sj5*x6500))+(((-1.0)*x6512))+(((-1.0)*x6510)));
evalcond[2]=(((r10*x6505))+x6510+x6512+(((-1.0)*cj5*x6495*x6497))+(((-1.0)*r11*x6513))+(((-1.0)*x6495*x6508))+(((-1.0)*x6495*x6501)));
evalcond[3]=(x6507+(((-1.0)*x6514))+((r00*x6505))+(((-1.0)*cj5*x6495*x6500))+(((-1.0)*cj5*x6495*x6499))+(((-1.0)*r01*x6513))+(((-1.0)*x6495*x6503)));
evalcond[4]=((((0.01)*x6503))+((x6500*x6504))+x6511+(((-1.0)*px))+(((-1.0)*x6496*x6500))+(((-0.069)*x6510))+((x6499*x6504))+(((-1.0)*x6496*x6499))+(((-1.0)*sj2*x6509))+(((0.37429)*x6506)));
evalcond[5]=((((0.01)*x6501))+((x6502*x6504))+(((0.37429)*x6498))+(((0.069)*x6507))+x6509+(((-1.0)*py))+(((-1.0)*cj2*x6509))+(((-1.0)*x6496*x6502))+((x6497*x6504))+(((-1.0)*x6496*x6497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6515=((1.0)*cj5);
IkReal x6516=(cj4*sj6);
IkReal x6517=((0.01)*cj5);
IkReal x6518=(r20*sj6);
IkReal x6519=(cj6*r21);
IkReal x6520=(sj4*sj6);
IkReal x6521=(r22*sj5);
IkReal x6522=(cj4*cj6);
IkReal x6523=((0.37429)*sj5);
IkReal x6524=((1.0)*cj6*sj4);
IkReal x6525=((1.0)*cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x6515*x6518))+(((-1.0)*sj4*x6515*x6519))+(((-1.0)*r21*x6516))+((r20*x6522))+(((-1.0)*sj4*x6521)));
evalcond[2]=((0.36442)+(((-1.0)*x6519*x6523))+(((-1.0)*x6518*x6523))+((x6517*x6519))+((x6517*x6518))+(((-1.0)*pz))+(((0.01)*x6521))+(((0.37429)*cj5*r22)));
evalcond[3]=((-1.0)+(((-1.0)*r20*x6515*x6516))+(((-1.0)*cj4*x6521))+(((-1.0)*r20*x6524))+(((-1.0)*cj4*x6515*x6519))+((r21*x6520)));
evalcond[4]=((((-1.0)*r22*x6515))+((sj5*x6519))+((sj5*x6518)));
evalcond[5]=((((-1.0)*r01*x6515*x6522))+(((-1.0)*r00*x6515*x6516))+(((-1.0)*r02*x6525))+((r01*x6520))+(((-1.0)*r00*x6524)));
evalcond[6]=((((-1.0)*r10*x6515*x6516))+(((-1.0)*r12*x6525))+(((-1.0)*r11*x6515*x6522))+(((-1.0)*r10*x6524))+((r11*x6520)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6526=(cj5*r02);
IkReal x6527=(sj2*sj5);
IkReal x6528=(cj6*r01);
IkReal x6529=(cj5*r12);
IkReal x6530=(cj2*sj5);
IkReal x6531=((1.0)*cj6*r11);
IkReal x6532=((1.0)*sj6*x6530);
if( IKabs(((((-1.0)*r10*x6532))+(((-1.0)*sj2*x6526))+((x6527*x6528))+((r00*sj6*x6527))+((cj2*x6529))+(((-1.0)*x6530*x6531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x6528*x6530))+((sj2*x6529))+(((-1.0)*r00*x6532))+((cj2*x6526))+(((-1.0)*r10*sj6*x6527))+(((-1.0)*x6527*x6531)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6532))+(((-1.0)*sj2*x6526))+((x6527*x6528))+((r00*sj6*x6527))+((cj2*x6529))+(((-1.0)*x6530*x6531))))+IKsqr(((((-1.0)*x6528*x6530))+((sj2*x6529))+(((-1.0)*r00*x6532))+((cj2*x6526))+(((-1.0)*r10*sj6*x6527))+(((-1.0)*x6527*x6531))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6532))+(((-1.0)*sj2*x6526))+((x6527*x6528))+((r00*sj6*x6527))+((cj2*x6529))+(((-1.0)*x6530*x6531))), ((((-1.0)*x6528*x6530))+((sj2*x6529))+(((-1.0)*r00*x6532))+((cj2*x6526))+(((-1.0)*r10*sj6*x6527))+(((-1.0)*x6527*x6531))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6533=IKcos(j0);
IkReal x6534=IKsin(j0);
IkReal x6535=((1.0)*sj4);
IkReal x6536=((0.37429)*sj5);
IkReal x6537=(r10*sj6);
IkReal x6538=(cj5*r12);
IkReal x6539=(cj6*r01);
IkReal x6540=(r00*sj6);
IkReal x6541=(r12*sj5);
IkReal x6542=(cj6*r11);
IkReal x6543=(r02*sj5);
IkReal x6544=((0.01)*cj5);
IkReal x6545=(cj4*cj6);
IkReal x6546=(cj5*r02);
IkReal x6547=(cj2*x6533);
IkReal x6548=(cj5*x6542);
IkReal x6549=((0.069)*x6534);
IkReal x6550=(sj2*x6533);
IkReal x6551=(cj2*x6534);
IkReal x6552=((1.0)*cj4*sj6);
IkReal x6553=((1.0)*sj2*x6534);
evalcond[0]=(((sj5*x6542))+x6550+x6551+(((-1.0)*x6538))+((sj5*x6537)));
evalcond[1]=(((sj5*x6540))+(((-1.0)*x6553))+x6547+(((-1.0)*x6546))+((sj5*x6539)));
evalcond[2]=((((-1.0)*cj5*x6535*x6537))+(((-1.0)*x6553))+(((-1.0)*r11*x6552))+x6547+((r10*x6545))+(((-1.0)*x6535*x6541))+(((-1.0)*x6535*x6548)));
evalcond[3]=((((-1.0)*cj5*x6535*x6539))+(((-1.0)*cj5*x6535*x6540))+(((-1.0)*x6550))+(((-1.0)*x6551))+(((-1.0)*x6535*x6543))+((r00*x6545))+(((-1.0)*r01*x6552)));
evalcond[4]=(((x6539*x6544))+(((0.37429)*x6546))+(((0.069)*x6547))+(((-1.0)*sj2*x6549))+(((-1.0)*x6536*x6539))+(((0.01)*x6543))+(((0.069)*x6533))+((x6540*x6544))+(((-1.0)*px))+(((-1.0)*x6536*x6540)));
evalcond[5]=((((0.069)*x6550))+((x6537*x6544))+(((-1.0)*x6536*x6537))+(((0.01)*x6541))+x6549+(((-1.0)*py))+((cj2*x6549))+((x6542*x6544))+(((-1.0)*x6536*x6542))+(((0.37429)*x6538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6554=(cj6*r21);
IkReal x6555=((1.0)*cj5);
IkReal x6556=(r21*sj6);
IkReal x6557=(r22*sj5);
IkReal x6558=((0.37429)*sj5);
IkReal x6559=((1.0)*sj4);
IkReal x6560=((1.0)*cj4);
IkReal x6561=((0.01)*cj5);
IkReal x6562=(cj4*r20);
IkReal x6563=(r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj1+((cj6*x6562))+(((-1.0)*x6556*x6560))+(((-1.0)*sj4*x6554*x6555))+(((-1.0)*sj4*x6555*x6563))+(((-1.0)*x6557*x6559)));
evalcond[2]=(((x6561*x6563))+(((0.01)*x6557))+(((-1.0)*pz))+(((-1.0)*x6554*x6558))+(((-1.0)*x6558*x6563))+(((0.37429)*cj5*r22))+((x6554*x6561))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*sj6*x6555*x6562))+((sj4*x6556))+(((-1.0)*x6557*x6560))+(((-1.0)*cj4*x6554*x6555))+(((-1.0)*cj6*r20*x6559)));
evalcond[4]=(((sj5*x6554))+((sj5*x6563))+(((-1.0)*r22*x6555)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6564=(cj6*sj5);
IkReal x6565=(sj5*sj6);
if( IKabs((((r00*x6565))+((r01*x6564))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x6565))+(((-1.0)*r11*x6564)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x6565))+((r01*x6564))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x6565))+(((-1.0)*r11*x6564))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x6565))+((r01*x6564))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x6565))+(((-1.0)*r11*x6564))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6566=IKsin(j0);
IkReal x6567=IKcos(j0);
IkReal x6568=((1.0)*cj5);
IkReal x6569=(r11*sj4);
IkReal x6570=(r00*sj6);
IkReal x6571=((0.37429)*sj5);
IkReal x6572=(r10*sj6);
IkReal x6573=(cj6*sj4);
IkReal x6574=((0.36442)*cj1);
IkReal x6575=(cj6*r01);
IkReal x6576=(cj6*r11);
IkReal x6577=((0.01)*cj5);
IkReal x6578=(cj4*cj6);
IkReal x6579=((0.37429)*cj5);
IkReal x6580=((1.0)*cj4);
IkReal x6581=(r12*sj5);
IkReal x6582=(r01*sj6);
IkReal x6583=(r02*sj5);
IkReal x6584=((0.069)*x6566);
IkReal x6585=((0.069)*x6567);
IkReal x6586=((1.0)*sj4*sj5);
IkReal x6587=((1.0)*x6566);
evalcond[0]=(((sj5*x6572))+((sj5*x6576))+x6567+(((-1.0)*r12*x6568)));
evalcond[1]=(((sj5*x6570))+((sj5*x6575))+(((-1.0)*r02*x6568))+(((-1.0)*x6587)));
evalcond[2]=((((-1.0)*cj6*x6568*x6569))+(((-1.0)*sj4*x6581))+(((-1.0)*r11*sj6*x6580))+((sj1*x6566))+((r10*x6578))+(((-1.0)*sj4*x6568*x6572)));
evalcond[3]=((((-1.0)*r01*x6568*x6573))+(((-1.0)*sj4*x6583))+((sj1*x6567))+(((-1.0)*sj4*x6568*x6570))+((r00*x6578))+(((-1.0)*x6580*x6582)));
evalcond[4]=((((-1.0)*r00*x6573))+((sj4*x6582))+(((-1.0)*cj4*x6568*x6575))+(((-1.0)*cj4*x6568*x6570))+(((-1.0)*cj1*x6567))+(((-1.0)*x6580*x6583)));
evalcond[5]=((((-1.0)*cj4*x6568*x6572))+(((-1.0)*cj4*x6568*x6576))+((sj6*x6569))+(((-1.0)*r10*x6573))+(((-1.0)*cj1*x6587))+(((-1.0)*x6580*x6581)));
evalcond[6]=((((-1.0)*x6571*x6575))+(((0.01)*x6583))+((x6567*x6574))+x6585+(((-1.0)*px))+((x6570*x6577))+((x6575*x6577))+((r02*x6579))+(((-1.0)*x6584))+(((-1.0)*x6570*x6571)));
evalcond[7]=((((-1.0)*x6571*x6576))+(((-1.0)*x6571*x6572))+(((0.01)*x6581))+((x6572*x6577))+((r12*x6579))+((x6566*x6574))+x6585+x6584+(((-1.0)*py))+((x6576*x6577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6588=((1.0)*cj5);
IkReal x6589=(r20*sj6);
IkReal x6590=((0.01)*cj5);
IkReal x6591=(cj6*r21);
IkReal x6592=(r22*sj5);
IkReal x6593=(r21*sj6);
IkReal x6594=((1.0)*cj4);
IkReal x6595=((1.0)*sj4);
IkReal x6596=(cj6*r20);
IkReal x6597=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x6592*x6595))+(((-1.0)*sj4*x6588*x6591))+(((-1.0)*x6593*x6594))+(((-1.0)*sj4*x6588*x6589))+((cj4*x6596))+(((-1.0)*cj1)));
evalcond[2]=((((0.01)*x6592))+(((-1.0)*x6589*x6597))+(((-1.0)*x6591*x6597))+(((-1.0)*pz))+((x6589*x6590))+((x6590*x6591))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((sj4*x6593))+sj1+(((-1.0)*cj4*x6588*x6589))+(((-1.0)*cj4*x6588*x6591))+(((-1.0)*x6592*x6594))+(((-1.0)*x6595*x6596)));
evalcond[4]=(((sj5*x6589))+((sj5*x6591))+(((-1.0)*r22*x6588)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6598=(sj5*sj6);
IkReal x6599=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x6598))+(((-1.0)*r01*x6599))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x6599))+((r10*x6598)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6598))+(((-1.0)*r01*x6599))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x6599))+((r10*x6598))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x6598))+(((-1.0)*r01*x6599))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x6599))+((r10*x6598))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6600=IKsin(j0);
IkReal x6601=IKcos(j0);
IkReal x6602=((1.0)*cj5);
IkReal x6603=(r11*sj4);
IkReal x6604=(r00*sj6);
IkReal x6605=((0.37429)*sj5);
IkReal x6606=(r10*sj6);
IkReal x6607=(cj6*sj4);
IkReal x6608=((0.36442)*cj1);
IkReal x6609=(cj6*r01);
IkReal x6610=(cj6*r11);
IkReal x6611=((0.01)*cj5);
IkReal x6612=(cj4*cj6);
IkReal x6613=((0.37429)*cj5);
IkReal x6614=((1.0)*cj4);
IkReal x6615=(r12*sj5);
IkReal x6616=(r01*sj6);
IkReal x6617=(r02*sj5);
IkReal x6618=((0.069)*x6600);
IkReal x6619=((0.069)*x6601);
IkReal x6620=((1.0)*sj4*sj5);
IkReal x6621=((1.0)*x6601);
IkReal x6622=((1.0)*x6600);
evalcond[0]=(x6600+((sj5*x6604))+((sj5*x6609))+(((-1.0)*r02*x6602)));
evalcond[1]=((((-1.0)*x6621))+((sj5*x6606))+((sj5*x6610))+(((-1.0)*r12*x6602)));
evalcond[2]=((((-1.0)*sj4*x6602*x6606))+((r10*x6612))+(((-1.0)*cj6*x6602*x6603))+(((-1.0)*sj4*x6615))+(((-1.0)*sj1*x6622))+(((-1.0)*r11*sj6*x6614)));
evalcond[3]=((((-1.0)*sj4*x6602*x6604))+(((-1.0)*r01*x6602*x6607))+((r00*x6612))+(((-1.0)*x6614*x6616))+(((-1.0)*sj4*x6617))+(((-1.0)*sj1*x6621)));
evalcond[4]=(((sj4*x6616))+(((-1.0)*x6614*x6617))+(((-1.0)*r00*x6607))+(((-1.0)*cj4*x6602*x6604))+(((-1.0)*cj4*x6602*x6609))+(((-1.0)*cj1*x6621)));
evalcond[5]=((((-1.0)*x6614*x6615))+((sj6*x6603))+(((-1.0)*r10*x6607))+(((-1.0)*cj4*x6602*x6610))+(((-1.0)*cj4*x6602*x6606))+(((-1.0)*cj1*x6622)));
evalcond[6]=(((r02*x6613))+((x6609*x6611))+((x6604*x6611))+x6619+x6618+((x6601*x6608))+(((-1.0)*px))+(((-1.0)*x6604*x6605))+(((-1.0)*x6605*x6609))+(((0.01)*x6617)));
evalcond[7]=((((-1.0)*x6605*x6610))+(((-1.0)*x6619))+x6618+((x6606*x6611))+(((-1.0)*py))+((r12*x6613))+((x6600*x6608))+((x6610*x6611))+(((-1.0)*x6605*x6606))+(((0.01)*x6615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6623=((1.0)*cj5);
IkReal x6624=(r20*sj6);
IkReal x6625=((0.01)*cj5);
IkReal x6626=(cj6*r21);
IkReal x6627=(r22*sj5);
IkReal x6628=(r21*sj6);
IkReal x6629=((1.0)*cj4);
IkReal x6630=((1.0)*sj4);
IkReal x6631=(cj6*r20);
IkReal x6632=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*x6628*x6629))+((cj4*x6631))+(((-1.0)*x6627*x6630))+(((-1.0)*sj4*x6623*x6624))+(((-1.0)*sj4*x6623*x6626)));
evalcond[2]=((((0.01)*x6627))+((x6624*x6625))+(((-0.069)*cj2))+(((-1.0)*pz))+((x6625*x6626))+(((-1.0)*x6626*x6632))+(((0.37429)*cj5*r22))+(((-1.0)*x6624*x6632)));
evalcond[3]=(((sj4*x6628))+(((-1.0)*x6630*x6631))+(((-1.0)*cj4*x6623*x6624))+(((-1.0)*cj4*x6623*x6626))+(((-1.0)*x6627*x6629)));
evalcond[4]=((((-1.0)*r22*x6623))+((sj5*x6626))+((sj5*x6624))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6633=(cj6*sj5);
IkReal x6634=(sj5*sj6);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x6634))+(((-1.0)*r11*x6633)))))+(IKabs((((r00*x6634))+((r01*x6633))+(((-1.0)*cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6635=((1.0)*cj5);
IkReal x6636=(r20*sj6);
IkReal x6637=(sj5*sj6);
IkReal x6638=(cj6*sj5);
IkReal x6639=((0.01)*cj5);
IkReal x6640=(cj6*r21);
IkReal x6641=(r22*sj5);
IkReal x6642=(r21*sj6);
IkReal x6643=((1.0)*cj4);
IkReal x6644=((1.0)*sj4);
IkReal x6645=(cj6*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x6635*x6636))+(((-1.0)*sj4*x6635*x6640))+(((-1.0)*x6642*x6643))+(((-1.0)*x6641*x6644))+((cj4*x6645)));
evalcond[2]=((-0.069)+((x6639*x6640))+((x6636*x6639))+(((-1.0)*pz))+(((0.01)*x6641))+(((-0.37429)*r21*x6638))+(((-0.37429)*sj5*x6636))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*cj4*x6635*x6636))+(((-1.0)*cj4*x6635*x6640))+(((-1.0)*x6641*x6643))+(((-1.0)*x6644*x6645))+((sj4*x6642)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x6635))+((r21*x6638))+((sj5*x6636)));
evalcond[5]=(((r10*x6637))+((r11*x6638))+(((-1.0)*r12*x6635)));
evalcond[6]=(((r00*x6637))+((r01*x6638))+(((-1.0)*r02*x6635)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6646=(cj4*sj6);
IkReal x6647=((1.0)*r01);
IkReal x6648=(cj5*sj4);
IkReal x6649=(sj4*sj5);
IkReal x6650=(cj4*cj6);
if( IKabs(((((-1.0)*x6646*x6647))+((r00*x6650))+(((-1.0)*r02*x6649))+(((-1.0)*r00*sj6*x6648))+(((-1.0)*cj6*x6647*x6648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x6650))+((cj6*r11*x6648))+((r11*x6646))+((r12*x6649))+((r10*sj6*x6648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6646*x6647))+((r00*x6650))+(((-1.0)*r02*x6649))+(((-1.0)*r00*sj6*x6648))+(((-1.0)*cj6*x6647*x6648))))+IKsqr(((((-1.0)*r10*x6650))+((cj6*r11*x6648))+((r11*x6646))+((r12*x6649))+((r10*sj6*x6648))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x6646*x6647))+((r00*x6650))+(((-1.0)*r02*x6649))+(((-1.0)*r00*sj6*x6648))+(((-1.0)*cj6*x6647*x6648))), ((((-1.0)*r10*x6650))+((cj6*r11*x6648))+((r11*x6646))+((r12*x6649))+((r10*sj6*x6648))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6651=IKcos(j0);
IkReal x6652=IKsin(j0);
IkReal x6653=((1.0)*sj4);
IkReal x6654=(r10*sj6);
IkReal x6655=((0.37429)*sj5);
IkReal x6656=(cj6*r00);
IkReal x6657=((0.37429)*cj5);
IkReal x6658=((0.01)*cj5);
IkReal x6659=((1.0)*cj4);
IkReal x6660=(r00*sj6);
IkReal x6661=(r02*sj5);
IkReal x6662=(r12*sj5);
IkReal x6663=(cj6*r10);
IkReal x6664=(r01*sj6);
IkReal x6665=(r11*sj6);
IkReal x6666=((1.0)*x6652);
IkReal x6667=(cj5*cj6*r11);
IkReal x6668=(cj5*cj6*r01);
evalcond[0]=(x6651+((cj4*x6663))+(((-1.0)*x6659*x6665))+(((-1.0)*cj5*x6653*x6654))+(((-1.0)*x6653*x6667))+(((-1.0)*x6653*x6662)));
evalcond[1]=((((-1.0)*x6666))+((cj4*x6656))+(((-1.0)*cj5*x6653*x6660))+(((-1.0)*x6659*x6664))+(((-1.0)*x6653*x6668))+(((-1.0)*x6653*x6661)));
evalcond[2]=((((-1.0)*x6653*x6656))+(((-1.0)*x6651))+(((-1.0)*cj5*x6659*x6660))+((sj4*x6664))+(((-1.0)*x6659*x6661))+(((-1.0)*x6659*x6668)));
evalcond[3]=((((-1.0)*x6666))+((sj4*x6665))+(((-1.0)*x6659*x6662))+(((-1.0)*x6659*x6667))+(((-1.0)*cj5*x6654*x6659))+(((-1.0)*x6653*x6663)));
evalcond[4]=((((0.01)*x6661))+((r02*x6657))+(((0.43342)*x6651))+(((-1.0)*px))+(((-1.0)*x6655*x6660))+(((-1.0)*cj6*r01*x6655))+((x6658*x6660))+((cj6*r01*x6658)));
evalcond[5]=(((cj6*r11*x6658))+((r12*x6657))+(((0.01)*x6662))+(((0.43342)*x6652))+(((-1.0)*py))+(((-1.0)*x6654*x6655))+(((-1.0)*cj6*r11*x6655))+((x6654*x6658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6669=((1.0)*cj5);
IkReal x6670=(r20*sj6);
IkReal x6671=(sj5*sj6);
IkReal x6672=(cj6*sj5);
IkReal x6673=((0.01)*cj5);
IkReal x6674=(cj6*r21);
IkReal x6675=(r22*sj5);
IkReal x6676=(r21*sj6);
IkReal x6677=((1.0)*cj4);
IkReal x6678=((1.0)*sj4);
IkReal x6679=(cj6*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x6669*x6674))+(((-1.0)*sj4*x6669*x6670))+((cj4*x6679))+(((-1.0)*x6676*x6677))+(((-1.0)*x6675*x6678)));
evalcond[2]=((0.069)+(((0.01)*x6675))+(((-0.37429)*sj5*x6670))+(((-1.0)*pz))+(((-0.37429)*r21*x6672))+((x6670*x6673))+((x6673*x6674))+(((0.37429)*cj5*r22)));
evalcond[3]=(((sj4*x6676))+(((-1.0)*x6678*x6679))+(((-1.0)*cj4*x6669*x6674))+(((-1.0)*cj4*x6669*x6670))+(((-1.0)*x6675*x6677)));
evalcond[4]=((1.0)+((sj5*x6670))+(((-1.0)*r22*x6669))+((r21*x6672)));
evalcond[5]=(((r11*x6672))+(((-1.0)*r12*x6669))+((r10*x6671)));
evalcond[6]=(((r00*x6671))+((r01*x6672))+(((-1.0)*r02*x6669)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6680=((1.0)*cj4);
IkReal x6681=(sj4*sj5);
IkReal x6682=(cj5*sj4*sj6);
IkReal x6683=(cj5*cj6*sj4);
if( IKabs((((r02*x6681))+((r01*x6683))+((r00*x6682))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x6680)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x6682))+(((-1.0)*r11*sj6*x6680))+((cj4*cj6*r10))+(((-1.0)*r12*x6681))+(((-1.0)*r11*x6683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x6681))+((r01*x6683))+((r00*x6682))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x6680))))+IKsqr(((((-1.0)*r10*x6682))+(((-1.0)*r11*sj6*x6680))+((cj4*cj6*r10))+(((-1.0)*r12*x6681))+(((-1.0)*r11*x6683))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*x6681))+((r01*x6683))+((r00*x6682))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x6680))), ((((-1.0)*r10*x6682))+(((-1.0)*r11*sj6*x6680))+((cj4*cj6*r10))+(((-1.0)*r12*x6681))+(((-1.0)*r11*x6683))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6684=IKsin(j0);
IkReal x6685=IKcos(j0);
IkReal x6686=((1.0)*sj4);
IkReal x6687=(r10*sj6);
IkReal x6688=((0.37429)*sj5);
IkReal x6689=(cj6*r00);
IkReal x6690=((0.37429)*cj5);
IkReal x6691=((0.01)*cj5);
IkReal x6692=((1.0)*cj4);
IkReal x6693=(r00*sj6);
IkReal x6694=(r02*sj5);
IkReal x6695=(r12*sj5);
IkReal x6696=(cj6*r10);
IkReal x6697=(r01*sj6);
IkReal x6698=(r11*sj6);
IkReal x6699=((1.0)*x6685);
IkReal x6700=(cj5*cj6*r11);
IkReal x6701=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*cj5*x6686*x6693))+(((-1.0)*x6686*x6694))+x6684+((cj4*x6689))+(((-1.0)*x6692*x6697))+(((-1.0)*x6686*x6701)));
evalcond[1]=((((-1.0)*x6686*x6695))+((cj4*x6696))+(((-1.0)*cj5*x6686*x6687))+(((-1.0)*x6699))+(((-1.0)*x6692*x6698))+(((-1.0)*x6686*x6700)));
evalcond[2]=((((-1.0)*x6692*x6701))+(((-1.0)*cj5*x6692*x6693))+(((-1.0)*x6699))+(((-1.0)*x6692*x6694))+((sj4*x6697))+(((-1.0)*x6686*x6689)));
evalcond[3]=((((-1.0)*x6692*x6700))+(((-1.0)*x6686*x6696))+(((-1.0)*cj5*x6687*x6692))+(((-1.0)*x6692*x6695))+((sj4*x6698))+(((-1.0)*x6684)));
evalcond[4]=((((-1.0)*cj6*r01*x6688))+((cj6*r01*x6691))+(((-1.0)*x6688*x6693))+(((-1.0)*px))+(((0.01)*x6694))+((x6691*x6693))+(((0.43342)*x6685))+((r02*x6690)));
evalcond[5]=((((-1.0)*cj6*r11*x6688))+((cj6*r11*x6691))+((r12*x6690))+((x6687*x6691))+(((-1.0)*py))+(((0.01)*x6695))+(((0.43342)*x6684))+(((-1.0)*x6687*x6688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6702=((1.0)*cj5);
IkReal x6703=(r20*sj6);
IkReal x6704=((0.01)*cj5);
IkReal x6705=(cj4*cj6);
IkReal x6706=(r22*sj5);
IkReal x6707=(r21*sj6);
IkReal x6708=((1.0)*cj4);
IkReal x6709=(cj6*r21);
IkReal x6710=(sj4*sj6);
IkReal x6711=((0.37429)*sj5);
IkReal x6712=((1.0)*sj4*sj5);
IkReal x6713=(cj6*sj4*x6702);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj4*x6706))+((r20*x6705))+(((-1.0)*sj4*x6702*x6703))+(((-1.0)*sj4*x6702*x6709))+(((-1.0)*x6707*x6708)));
evalcond[2]=((((0.01)*x6706))+(((-1.0)*pz))+((x6703*x6704))+(((-1.0)*x6703*x6711))+((x6704*x6709))+(((-1.0)*x6709*x6711))+(((0.37429)*cj5*r22)));
evalcond[3]=(((r10*x6705))+(((-1.0)*r10*x6702*x6710))+(((-1.0)*r11*sj6*x6708))+(((-1.0)*r11*x6713))+(((-1.0)*r12*x6712)));
evalcond[4]=(((r00*x6705))+(((-1.0)*r01*sj6*x6708))+(((-1.0)*r02*x6712))+(((-1.0)*r01*x6713))+(((-1.0)*r00*x6702*x6710)));
evalcond[5]=(((sj4*x6707))+(((-1.0)*x6706*x6708))+(((-1.0)*cj4*x6702*x6703))+(((-1.0)*cj6*r20*sj4))+(((-1.0)*r21*x6702*x6705)));
evalcond[6]=((((-1.0)*r22*x6702))+((sj5*x6709))+((sj5*x6703)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6714=(cj6*sj5);
IkReal x6715=(sj5*sj6);
if( IKabs((((r01*x6714))+(((-1.0)*cj5*r02))+((r00*x6715)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x6714))+(((-1.0)*r10*x6715)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x6714))+(((-1.0)*cj5*r02))+((r00*x6715))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x6714))+(((-1.0)*r10*x6715))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x6714))+(((-1.0)*cj5*r02))+((r00*x6715))), (((cj5*r12))+(((-1.0)*r11*x6714))+(((-1.0)*r10*x6715))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6716=IKcos(j0);
IkReal x6717=IKsin(j0);
IkReal x6718=((1.0)*cj5);
IkReal x6719=(sj5*sj6);
IkReal x6720=(r10*sj6);
IkReal x6721=(cj6*r11);
IkReal x6722=((0.01)*cj5);
IkReal x6723=(cj6*r01);
IkReal x6724=((0.37429)*cj5);
IkReal x6725=(r12*sj5);
IkReal x6726=((1.0)*cj4);
IkReal x6727=(r00*sj6);
IkReal x6728=((0.37429)*sj5);
IkReal x6729=(r02*sj5);
IkReal x6730=(sj4*sj6);
IkReal x6731=((1.0)*x6717);
IkReal x6732=((1.0)*cj6*sj4);
evalcond[0]=(((sj5*x6721))+x6716+(((-1.0)*r12*x6718))+((r10*x6719)));
evalcond[1]=(((sj5*x6723))+(((-1.0)*r02*x6718))+(((-1.0)*x6731))+((r00*x6719)));
evalcond[2]=((((-1.0)*r00*x6732))+(((-1.0)*x6716))+(((-1.0)*cj4*x6718*x6723))+(((-1.0)*cj4*x6718*x6727))+((r01*x6730))+(((-1.0)*x6726*x6729)));
evalcond[3]=((((-1.0)*r10*x6732))+((r11*x6730))+(((-1.0)*cj4*x6718*x6721))+(((-1.0)*cj4*x6718*x6720))+(((-1.0)*x6731))+(((-1.0)*x6725*x6726)));
evalcond[4]=((((-1.0)*x6723*x6728))+((r02*x6724))+(((-1.0)*px))+(((0.43342)*x6716))+(((0.01)*x6729))+(((-0.069)*x6717))+(((-0.37429)*r00*x6719))+((x6722*x6727))+((x6722*x6723)));
evalcond[5]=(((r12*x6724))+(((-1.0)*py))+(((-1.0)*x6721*x6728))+(((0.43342)*x6717))+((x6721*x6722))+((x6720*x6722))+(((0.01)*x6725))+(((-0.37429)*r10*x6719))+(((0.069)*x6716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6733=((1.0)*cj5);
IkReal x6734=(r20*sj6);
IkReal x6735=((0.01)*cj5);
IkReal x6736=(cj4*cj6);
IkReal x6737=(r22*sj5);
IkReal x6738=(r21*sj6);
IkReal x6739=((1.0)*cj4);
IkReal x6740=(cj6*r21);
IkReal x6741=(sj4*sj6);
IkReal x6742=((0.37429)*sj5);
IkReal x6743=((1.0)*sj4*sj5);
IkReal x6744=(cj6*sj4*x6733);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x6737))+(((-1.0)*sj4*x6733*x6740))+(((-1.0)*sj4*x6733*x6734))+(((-1.0)*x6738*x6739))+((r20*x6736)));
evalcond[2]=(((x6734*x6735))+(((0.01)*x6737))+(((-1.0)*pz))+((x6735*x6740))+(((-1.0)*x6740*x6742))+(((0.37429)*cj5*r22))+(((-1.0)*x6734*x6742)));
evalcond[3]=((((-1.0)*r12*x6743))+(((-1.0)*r11*x6744))+(((-1.0)*r11*sj6*x6739))+(((-1.0)*r10*x6733*x6741))+((r10*x6736)));
evalcond[4]=((((-1.0)*r00*x6733*x6741))+(((-1.0)*r01*x6744))+(((-1.0)*r02*x6743))+(((-1.0)*r01*sj6*x6739))+((r00*x6736)));
evalcond[5]=((((-1.0)*r21*x6733*x6736))+((sj4*x6738))+(((-1.0)*x6737*x6739))+(((-1.0)*cj6*r20*sj4))+(((-1.0)*cj4*x6733*x6734)));
evalcond[6]=(((sj5*x6740))+(((-1.0)*r22*x6733))+((sj5*x6734)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6745=(sj5*sj6);
IkReal x6746=(cj6*sj5);
if( IKabs(((((-1.0)*r01*x6746))+(((-1.0)*r00*x6745))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x6746))+((r10*x6745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x6746))+(((-1.0)*r00*x6745))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x6746))+((r10*x6745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x6746))+(((-1.0)*r00*x6745))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x6746))+((r10*x6745))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6747=IKsin(j0);
IkReal x6748=IKcos(j0);
IkReal x6749=((1.0)*cj5);
IkReal x6750=(sj5*sj6);
IkReal x6751=(r10*sj6);
IkReal x6752=(cj6*r11);
IkReal x6753=((0.01)*cj5);
IkReal x6754=(cj6*r01);
IkReal x6755=((0.37429)*cj5);
IkReal x6756=(r12*sj5);
IkReal x6757=((1.0)*cj4);
IkReal x6758=(r00*sj6);
IkReal x6759=((0.37429)*sj5);
IkReal x6760=(r02*sj5);
IkReal x6761=(sj4*sj6);
IkReal x6762=((1.0)*x6748);
IkReal x6763=((1.0)*cj6*sj4);
evalcond[0]=(((r00*x6750))+x6747+(((-1.0)*r02*x6749))+((sj5*x6754)));
evalcond[1]=((((-1.0)*r12*x6749))+(((-1.0)*x6762))+((sj5*x6752))+((r10*x6750)));
evalcond[2]=(((r01*x6761))+(((-1.0)*cj4*x6749*x6758))+(((-1.0)*cj4*x6749*x6754))+(((-1.0)*x6762))+(((-1.0)*r00*x6763))+(((-1.0)*x6757*x6760)));
evalcond[3]=((((-1.0)*x6747))+((r11*x6761))+(((-1.0)*cj4*x6749*x6752))+(((-1.0)*cj4*x6749*x6751))+(((-1.0)*r10*x6763))+(((-1.0)*x6756*x6757)));
evalcond[4]=((((0.43342)*x6748))+(((-1.0)*px))+((x6753*x6758))+((x6753*x6754))+(((-0.37429)*r00*x6750))+((r02*x6755))+(((0.01)*x6760))+(((-1.0)*x6754*x6759))+(((0.069)*x6747)));
evalcond[5]=((((-0.37429)*r10*x6750))+(((0.43342)*x6747))+((x6751*x6753))+((r12*x6755))+(((-0.069)*x6748))+(((-1.0)*py))+((x6752*x6753))+(((-1.0)*x6752*x6759))+(((0.01)*x6756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6764=(cj5*sj4);
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(sj2,-1);
if(!x6765.valid){
continue;
}
CheckValue<IkReal> x6766=IKPowWithIntegerCheck(cj2,-1);
if(!x6766.valid){
continue;
}
if( IKabs(((x6765.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6766.value)*((((cj6*r11*x6764))+(((-1.0)*cj4*cj6*r10))+((r10*sj6*x6764))+((cj4*r11*sj6))+((r12*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6765.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))+IKsqr(((x6766.value)*((((cj6*r11*x6764))+(((-1.0)*cj4*cj6*r10))+((r10*sj6*x6764))+((cj4*r11*sj6))+((r12*sj4*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6765.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))), ((x6766.value)*((((cj6*r11*x6764))+(((-1.0)*cj4*cj6*r10))+((r10*sj6*x6764))+((cj4*r11*sj6))+((r12*sj4*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6767=IKcos(j0);
IkReal x6768=IKsin(j0);
IkReal x6769=((1.0)*cj5);
IkReal x6770=(cj6*sj4);
IkReal x6771=((0.37429)*sj5);
IkReal x6772=(r10*sj6);
IkReal x6773=((0.069)*sj2);
IkReal x6774=(cj6*r01);
IkReal x6775=(r00*sj6);
IkReal x6776=(cj6*r11);
IkReal x6777=((0.01)*cj5);
IkReal x6778=(sj4*sj6);
IkReal x6779=(cj4*cj6);
IkReal x6780=((0.37429)*cj5);
IkReal x6781=(r12*sj5);
IkReal x6782=((1.0)*cj4);
IkReal x6783=(r02*sj5);
IkReal x6784=((1.0)*sj4*sj5);
IkReal x6785=((1.0)*x6768);
evalcond[0]=(((sj5*x6776))+((sj5*x6772))+((sj2*x6767))+(((-1.0)*r12*x6769)));
evalcond[1]=(((sj5*x6774))+((sj5*x6775))+(((-1.0)*r02*x6769))+(((-1.0)*sj2*x6785)));
evalcond[2]=((((-1.0)*sj4*x6781))+(((-1.0)*r11*x6769*x6770))+(((-1.0)*sj4*x6769*x6772))+((cj2*x6767))+(((-1.0)*r11*sj6*x6782))+((r10*x6779)));
evalcond[3]=((((-1.0)*x6782*x6783))+(((-1.0)*cj4*x6769*x6774))+(((-1.0)*cj4*x6769*x6775))+(((-1.0)*x6767))+(((-1.0)*r00*x6770))+((r01*x6778)));
evalcond[4]=(((r11*x6778))+(((-1.0)*x6785))+(((-1.0)*cj4*x6769*x6776))+(((-1.0)*cj4*x6769*x6772))+(((-1.0)*r10*x6770))+(((-1.0)*x6781*x6782)));
evalcond[5]=((((-1.0)*sj4*x6783))+(((-1.0)*r01*x6769*x6770))+(((-1.0)*sj4*x6769*x6775))+(((-1.0)*cj2*x6785))+(((-1.0)*r01*sj6*x6782))+((r00*x6779)));
evalcond[6]=((((-1.0)*x6768*x6773))+(((0.43342)*x6767))+((x6775*x6777))+(((-1.0)*px))+((r02*x6780))+(((0.01)*x6783))+(((-1.0)*x6771*x6775))+(((-1.0)*x6771*x6774))+((x6774*x6777)));
evalcond[7]=((((0.43342)*x6768))+((r12*x6780))+((x6776*x6777))+((x6772*x6777))+(((-1.0)*py))+(((0.01)*x6781))+(((-1.0)*x6771*x6772))+(((-1.0)*x6771*x6776))+((x6767*x6773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6786=((1.0)*cj6);
IkReal x6787=((1.0)*sj5);
IkReal x6788=(r10*sj6);
IkReal x6789=(cj4*cj5);
CheckValue<IkReal> x6790=IKPowWithIntegerCheck(sj2,-1);
if(!x6790.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*r12*x6787))+(((-1.0)*x6788*x6789))+(((-1.0)*r11*x6786*x6789))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x6786)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6790.value)*((((cj5*r12))+(((-1.0)*x6787*x6788))+(((-1.0)*r11*sj5*x6786)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x6787))+(((-1.0)*x6788*x6789))+(((-1.0)*r11*x6786*x6789))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x6786))))+IKsqr(((x6790.value)*((((cj5*r12))+(((-1.0)*x6787*x6788))+(((-1.0)*r11*sj5*x6786))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r12*x6787))+(((-1.0)*x6788*x6789))+(((-1.0)*r11*x6786*x6789))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x6786))), ((x6790.value)*((((cj5*r12))+(((-1.0)*x6787*x6788))+(((-1.0)*r11*sj5*x6786))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6791=IKcos(j0);
IkReal x6792=IKsin(j0);
IkReal x6793=((1.0)*cj5);
IkReal x6794=(cj6*sj4);
IkReal x6795=((0.37429)*sj5);
IkReal x6796=(r10*sj6);
IkReal x6797=((0.069)*sj2);
IkReal x6798=(cj6*r01);
IkReal x6799=(r00*sj6);
IkReal x6800=(cj6*r11);
IkReal x6801=((0.01)*cj5);
IkReal x6802=(sj4*sj6);
IkReal x6803=(cj4*cj6);
IkReal x6804=((0.37429)*cj5);
IkReal x6805=(r12*sj5);
IkReal x6806=((1.0)*cj4);
IkReal x6807=(r02*sj5);
IkReal x6808=((1.0)*sj4*sj5);
IkReal x6809=((1.0)*x6792);
evalcond[0]=(((sj5*x6800))+((sj5*x6796))+((sj2*x6791))+(((-1.0)*r12*x6793)));
evalcond[1]=((((-1.0)*sj2*x6809))+((sj5*x6798))+((sj5*x6799))+(((-1.0)*r02*x6793)));
evalcond[2]=(((cj2*x6791))+((r10*x6803))+(((-1.0)*sj4*x6805))+(((-1.0)*r11*sj6*x6806))+(((-1.0)*sj4*x6793*x6796))+(((-1.0)*r11*x6793*x6794)));
evalcond[3]=(((r01*x6802))+(((-1.0)*r00*x6794))+(((-1.0)*cj4*x6793*x6798))+(((-1.0)*cj4*x6793*x6799))+(((-1.0)*x6791))+(((-1.0)*x6806*x6807)));
evalcond[4]=((((-1.0)*cj4*x6793*x6800))+(((-1.0)*r10*x6794))+((r11*x6802))+(((-1.0)*x6805*x6806))+(((-1.0)*cj4*x6793*x6796))+(((-1.0)*x6809)));
evalcond[5]=((((-1.0)*cj2*x6809))+(((-1.0)*r01*x6793*x6794))+((r00*x6803))+(((-1.0)*sj4*x6807))+(((-1.0)*sj4*x6793*x6799))+(((-1.0)*r01*sj6*x6806)));
evalcond[6]=((((0.43342)*x6791))+(((-1.0)*x6792*x6797))+(((-1.0)*x6795*x6798))+(((-1.0)*x6795*x6799))+((x6799*x6801))+(((-1.0)*px))+((x6798*x6801))+((r02*x6804))+(((0.01)*x6807)));
evalcond[7]=((((0.43342)*x6792))+((x6796*x6801))+((x6800*x6801))+(((-1.0)*x6795*x6796))+(((-1.0)*x6795*x6800))+(((-1.0)*py))+((r12*x6804))+((x6791*x6797))+(((0.01)*x6805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6810=(cj6*sj5);
IkReal x6811=(sj5*sj6);
CheckValue<IkReal> x6812 = IKatan2WithCheck(IkReal((((r01*x6810))+(((-1.0)*cj5*r02))+((r00*x6811)))),(((cj5*r12))+(((-1.0)*r11*x6810))+(((-1.0)*r10*x6811))),IKFAST_ATAN2_MAGTHRESH);
if(!x6812.valid){
continue;
}
CheckValue<IkReal> x6813=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x6813.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6812.value)+(((1.5707963267949)*(x6813.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6814=IKcos(j0);
IkReal x6815=IKsin(j0);
IkReal x6816=((1.0)*cj5);
IkReal x6817=(cj6*sj4);
IkReal x6818=((0.37429)*sj5);
IkReal x6819=(r10*sj6);
IkReal x6820=((0.069)*sj2);
IkReal x6821=(cj6*r01);
IkReal x6822=(r00*sj6);
IkReal x6823=(cj6*r11);
IkReal x6824=((0.01)*cj5);
IkReal x6825=(sj4*sj6);
IkReal x6826=(cj4*cj6);
IkReal x6827=((0.37429)*cj5);
IkReal x6828=(r12*sj5);
IkReal x6829=((1.0)*cj4);
IkReal x6830=(r02*sj5);
IkReal x6831=((1.0)*sj4*sj5);
IkReal x6832=((1.0)*x6815);
evalcond[0]=(((sj5*x6823))+(((-1.0)*r12*x6816))+((sj2*x6814))+((sj5*x6819)));
evalcond[1]=((((-1.0)*sj2*x6832))+((sj5*x6821))+((sj5*x6822))+(((-1.0)*r02*x6816)));
evalcond[2]=((((-1.0)*sj4*x6816*x6819))+((r10*x6826))+(((-1.0)*r11*sj6*x6829))+(((-1.0)*sj4*x6828))+((cj2*x6814))+(((-1.0)*r11*x6816*x6817)));
evalcond[3]=((((-1.0)*x6814))+(((-1.0)*cj4*x6816*x6822))+(((-1.0)*cj4*x6816*x6821))+((r01*x6825))+(((-1.0)*x6829*x6830))+(((-1.0)*r00*x6817)));
evalcond[4]=((((-1.0)*cj4*x6816*x6823))+((r11*x6825))+(((-1.0)*x6828*x6829))+(((-1.0)*r10*x6817))+(((-1.0)*cj4*x6816*x6819))+(((-1.0)*x6832)));
evalcond[5]=((((-1.0)*cj2*x6832))+(((-1.0)*r01*x6816*x6817))+((r00*x6826))+(((-1.0)*r01*sj6*x6829))+(((-1.0)*sj4*x6830))+(((-1.0)*sj4*x6816*x6822)));
evalcond[6]=(((r02*x6827))+(((-1.0)*x6815*x6820))+(((-1.0)*x6818*x6822))+(((-1.0)*x6818*x6821))+(((-1.0)*px))+(((0.43342)*x6814))+(((0.01)*x6830))+((x6821*x6824))+((x6822*x6824)));
evalcond[7]=(((x6814*x6820))+(((-1.0)*x6818*x6823))+((r12*x6827))+(((-1.0)*py))+((x6819*x6824))+((x6823*x6824))+(((0.43342)*x6815))+(((-1.0)*x6818*x6819))+(((0.01)*x6828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6833=((1.0)*cj5);
IkReal x6834=(r20*sj6);
IkReal x6835=((0.01)*cj5);
IkReal x6836=(cj6*r21);
IkReal x6837=(r22*sj5);
IkReal x6838=(r21*sj6);
IkReal x6839=((1.0)*cj4);
IkReal x6840=((1.0)*sj4);
IkReal x6841=(cj6*r20);
IkReal x6842=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x6838*x6839))+(((-1.0)*sj2))+(((-1.0)*sj4*x6833*x6836))+(((-1.0)*sj4*x6833*x6834))+(((-1.0)*x6837*x6840))+((cj4*x6841)));
evalcond[2]=((((0.069)*cj2))+(((-1.0)*x6834*x6842))+(((-1.0)*pz))+(((-1.0)*x6836*x6842))+((x6834*x6835))+((x6835*x6836))+(((0.01)*x6837))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*cj4*x6833*x6836))+(((-1.0)*cj4*x6833*x6834))+((sj4*x6838))+(((-1.0)*x6837*x6839))+(((-1.0)*x6840*x6841)));
evalcond[4]=(cj2+((sj5*x6836))+((sj5*x6834))+(((-1.0)*r22*x6833)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6843=(cj6*sj5);
IkReal x6844=(sj5*sj6);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*r10*x6844))+((cj5*r12))+(((-1.0)*r11*x6843)))))+(IKabs((((r01*x6843))+((r00*x6844))+(((-1.0)*cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6845=((1.0)*cj5);
IkReal x6846=(r20*sj6);
IkReal x6847=((0.01)*cj5);
IkReal x6848=(cj4*cj6);
IkReal x6849=(r22*sj5);
IkReal x6850=(r21*sj6);
IkReal x6851=((1.0)*cj4);
IkReal x6852=(cj6*r21);
IkReal x6853=(sj4*sj6);
IkReal x6854=((0.37429)*sj5);
IkReal x6855=((1.0)*sj4*sj5);
IkReal x6856=(cj6*sj4*x6845);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x6845*x6846))+(((-1.0)*sj4*x6849))+(((-1.0)*sj4*x6845*x6852))+((r20*x6848))+(((-1.0)*x6850*x6851)));
evalcond[2]=((((-1.0)*x6846*x6854))+((x6846*x6847))+(((-1.0)*pz))+(((-1.0)*x6852*x6854))+((x6847*x6852))+(((0.37429)*cj5*r22))+(((0.01)*x6849)));
evalcond[3]=((((-1.0)*r12*x6855))+(((-1.0)*r11*x6856))+(((-1.0)*r10*x6845*x6853))+(((-1.0)*r11*sj6*x6851))+((r10*x6848)));
evalcond[4]=((((-1.0)*r02*x6855))+(((-1.0)*r01*x6856))+(((-1.0)*r00*x6845*x6853))+(((-1.0)*r01*sj6*x6851))+((r00*x6848)));
evalcond[5]=((((-1.0)*r21*x6845*x6848))+(((-1.0)*cj4*x6845*x6846))+(((-1.0)*cj6*r20*sj4))+(((-1.0)*x6849*x6851))+((sj4*x6850)));
evalcond[6]=((((-1.0)*r22*x6845))+((sj5*x6852))+((sj5*x6846)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6857=(cj6*sj5);
IkReal x6858=(sj5*sj6);
if( IKabs((((r00*x6858))+((r01*x6857))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x6858))+(((-1.0)*r11*x6857)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x6858))+((r01*x6857))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x6858))+(((-1.0)*r11*x6857))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x6858))+((r01*x6857))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x6858))+(((-1.0)*r11*x6857))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6859=IKcos(j0);
IkReal x6860=IKsin(j0);
IkReal x6861=((1.0)*cj5);
IkReal x6862=(sj5*sj6);
IkReal x6863=((0.37429)*cj5);
IkReal x6864=(r10*sj6);
IkReal x6865=(cj6*r11);
IkReal x6866=((0.01)*cj5);
IkReal x6867=(cj6*r01);
IkReal x6868=(r12*sj5);
IkReal x6869=((1.0)*cj4);
IkReal x6870=(r00*sj6);
IkReal x6871=((0.37429)*sj5);
IkReal x6872=(r02*sj5);
IkReal x6873=(sj4*sj6);
IkReal x6874=((1.0)*cj6*sj4);
evalcond[0]=((((-1.0)*r12*x6861))+x6859+((sj5*x6865))+((r10*x6862)));
evalcond[1]=((((-1.0)*x6860))+(((-1.0)*r02*x6861))+((r00*x6862))+((sj5*x6867)));
evalcond[2]=((((-1.0)*r00*x6874))+(((-1.0)*x6869*x6872))+(((-1.0)*cj4*x6861*x6867))+(((-1.0)*cj4*x6861*x6870))+x6859+((r01*x6873)));
evalcond[3]=(((r11*x6873))+(((-1.0)*x6868*x6869))+(((-1.0)*cj4*x6861*x6864))+(((-1.0)*cj4*x6861*x6865))+x6860+(((-1.0)*r10*x6874)));
evalcond[4]=(((r02*x6863))+((x6866*x6867))+((x6866*x6870))+(((-0.37429)*r00*x6862))+(((-1.0)*px))+(((-0.29542)*x6859))+(((-1.0)*x6867*x6871))+(((-0.069)*x6860))+(((0.01)*x6872)));
evalcond[5]=((((-1.0)*x6865*x6871))+(((-0.37429)*r10*x6862))+((x6864*x6866))+((r12*x6863))+((x6865*x6866))+(((-1.0)*py))+(((-0.29542)*x6860))+(((0.069)*x6859))+(((0.01)*x6868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6875=((1.0)*cj5);
IkReal x6876=(r20*sj6);
IkReal x6877=((0.01)*cj5);
IkReal x6878=(cj4*cj6);
IkReal x6879=(r22*sj5);
IkReal x6880=(r21*sj6);
IkReal x6881=((1.0)*cj4);
IkReal x6882=(cj6*r21);
IkReal x6883=(sj4*sj6);
IkReal x6884=((0.37429)*sj5);
IkReal x6885=((1.0)*sj4*sj5);
IkReal x6886=(cj6*sj4*x6875);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj4*x6875*x6882))+(((-1.0)*sj4*x6879))+(((-1.0)*sj4*x6875*x6876))+((r20*x6878))+(((-1.0)*x6880*x6881)));
evalcond[2]=((((-1.0)*x6876*x6884))+((x6877*x6882))+(((-1.0)*pz))+((x6876*x6877))+(((-1.0)*x6882*x6884))+(((0.01)*x6879))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj6*x6881))+(((-1.0)*r10*x6875*x6883))+(((-1.0)*r11*x6886))+((r10*x6878))+(((-1.0)*r12*x6885)));
evalcond[4]=((((-1.0)*r01*sj6*x6881))+(((-1.0)*r00*x6875*x6883))+(((-1.0)*r02*x6885))+((r00*x6878))+(((-1.0)*r01*x6886)));
evalcond[5]=(((sj4*x6880))+(((-1.0)*x6879*x6881))+(((-1.0)*r21*x6875*x6878))+(((-1.0)*cj6*r20*sj4))+(((-1.0)*cj4*x6875*x6876)));
evalcond[6]=((((-1.0)*r22*x6875))+((sj5*x6882))+((sj5*x6876)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6887=(sj5*sj6);
IkReal x6888=(cj6*sj5);
if( IKabs(((((-1.0)*r01*x6888))+(((-1.0)*r00*x6887))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x6888))+((r10*x6887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x6888))+(((-1.0)*r00*x6887))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x6888))+((r10*x6887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x6888))+(((-1.0)*r00*x6887))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x6888))+((r10*x6887))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6889=IKcos(j0);
IkReal x6890=IKsin(j0);
IkReal x6891=((1.0)*cj5);
IkReal x6892=(sj5*sj6);
IkReal x6893=((0.37429)*cj5);
IkReal x6894=(r10*sj6);
IkReal x6895=(cj6*r11);
IkReal x6896=((0.01)*cj5);
IkReal x6897=(cj6*r01);
IkReal x6898=(r12*sj5);
IkReal x6899=((1.0)*cj4);
IkReal x6900=(r00*sj6);
IkReal x6901=((0.37429)*sj5);
IkReal x6902=(r02*sj5);
IkReal x6903=(sj4*sj6);
IkReal x6904=((1.0)*cj6*sj4);
evalcond[0]=(x6890+(((-1.0)*r02*x6891))+((sj5*x6897))+((r00*x6892)));
evalcond[1]=(((r10*x6892))+(((-1.0)*r12*x6891))+(((-1.0)*x6889))+((sj5*x6895)));
evalcond[2]=(((r01*x6903))+(((-1.0)*cj4*x6891*x6900))+x6889+(((-1.0)*x6899*x6902))+(((-1.0)*r00*x6904))+(((-1.0)*cj4*x6891*x6897)));
evalcond[3]=(((r11*x6903))+x6890+(((-1.0)*x6898*x6899))+(((-1.0)*r10*x6904))+(((-1.0)*cj4*x6891*x6894))+(((-1.0)*cj4*x6891*x6895)));
evalcond[4]=((((-0.29542)*x6889))+(((0.069)*x6890))+((x6896*x6900))+((r02*x6893))+(((-1.0)*px))+(((-0.37429)*r00*x6892))+(((0.01)*x6902))+((x6896*x6897))+(((-1.0)*x6897*x6901)));
evalcond[5]=(((x6895*x6896))+((x6894*x6896))+((r12*x6893))+(((-0.069)*x6889))+(((-0.29542)*x6890))+(((0.01)*x6898))+(((-1.0)*py))+(((-0.37429)*r10*x6892))+(((-1.0)*x6895*x6901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6905=((1.0)*cj5);
IkReal x6906=(r20*sj6);
IkReal x6907=(sj5*sj6);
IkReal x6908=(cj6*sj5);
IkReal x6909=((0.01)*cj5);
IkReal x6910=(cj6*r21);
IkReal x6911=(r22*sj5);
IkReal x6912=(r21*sj6);
IkReal x6913=((1.0)*cj4);
IkReal x6914=((1.0)*sj4);
IkReal x6915=(cj6*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x6912*x6913))+((cj4*x6915))+(((-1.0)*x6911*x6914))+(((-1.0)*sj4*x6905*x6906))+(((-1.0)*sj4*x6905*x6910)));
evalcond[2]=((0.069)+(((-0.37429)*r21*x6908))+((x6909*x6910))+(((-1.0)*pz))+(((-0.37429)*sj5*x6906))+((x6906*x6909))+(((0.37429)*cj5*r22))+(((0.01)*x6911)));
evalcond[3]=((((-1.0)*cj4*x6905*x6910))+(((-1.0)*x6911*x6913))+(((-1.0)*cj4*x6905*x6906))+((sj4*x6912))+(((-1.0)*x6914*x6915)));
evalcond[4]=((1.0)+((sj5*x6906))+(((-1.0)*r22*x6905))+((r21*x6908)));
evalcond[5]=((((-1.0)*r12*x6905))+((r11*x6908))+((r10*x6907)));
evalcond[6]=((((-1.0)*r02*x6905))+((r00*x6907))+((r01*x6908)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6916=(r11*sj6);
IkReal x6917=(cj6*r10);
IkReal x6918=(r12*sj5);
IkReal x6919=(cj5*cj6*r11);
IkReal x6920=(cj5*r10*sj6);
if( IKabs((((cj4*x6918))+((cj4*x6919))+(((-1.0)*sj4*x6916))+((sj4*x6917))+((cj4*x6920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x6916))+(((-1.0)*cj4*x6917))+((sj4*x6918))+((sj4*x6919))+((sj4*x6920)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x6918))+((cj4*x6919))+(((-1.0)*sj4*x6916))+((sj4*x6917))+((cj4*x6920))))+IKsqr((((cj4*x6916))+(((-1.0)*cj4*x6917))+((sj4*x6918))+((sj4*x6919))+((sj4*x6920))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*x6918))+((cj4*x6919))+(((-1.0)*sj4*x6916))+((sj4*x6917))+((cj4*x6920))), (((cj4*x6916))+(((-1.0)*cj4*x6917))+((sj4*x6918))+((sj4*x6919))+((sj4*x6920))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6921=IKcos(j0);
IkReal x6922=IKsin(j0);
IkReal x6923=((1.0)*sj4);
IkReal x6924=(r10*sj6);
IkReal x6925=((0.37429)*sj5);
IkReal x6926=(cj6*r00);
IkReal x6927=((0.01)*cj5);
IkReal x6928=((1.0)*cj4);
IkReal x6929=(r00*sj6);
IkReal x6930=(r02*sj5);
IkReal x6931=(r12*sj5);
IkReal x6932=((0.37429)*cj5);
IkReal x6933=(cj6*r10);
IkReal x6934=(r01*sj6);
IkReal x6935=(r11*sj6);
IkReal x6936=(cj5*cj6*r11);
IkReal x6937=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*cj5*x6923*x6924))+x6921+(((-1.0)*x6928*x6935))+((cj4*x6933))+(((-1.0)*x6923*x6936))+(((-1.0)*x6923*x6931)));
evalcond[1]=((((-1.0)*cj5*x6928*x6929))+x6921+(((-1.0)*x6928*x6930))+(((-1.0)*x6928*x6937))+((sj4*x6934))+(((-1.0)*x6923*x6926)));
evalcond[2]=((((-1.0)*cj5*x6924*x6928))+x6922+(((-1.0)*x6928*x6931))+(((-1.0)*x6928*x6936))+((sj4*x6935))+(((-1.0)*x6923*x6933)));
evalcond[3]=((((-1.0)*x6922))+((cj4*x6926))+(((-1.0)*cj5*x6923*x6929))+(((-1.0)*x6928*x6934))+(((-1.0)*x6923*x6930))+(((-1.0)*x6923*x6937)));
evalcond[4]=(((x6927*x6929))+(((-0.29542)*x6921))+(((0.01)*x6930))+(((-1.0)*x6925*x6929))+(((-1.0)*px))+((r02*x6932))+(((-1.0)*cj6*r01*x6925))+((cj6*r01*x6927)));
evalcond[5]=((((-0.29542)*x6922))+(((0.01)*x6931))+(((-1.0)*x6924*x6925))+((cj6*r11*x6927))+(((-1.0)*py))+(((-1.0)*cj6*r11*x6925))+((x6924*x6927))+((r12*x6932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6938=((1.0)*cj5);
IkReal x6939=(r20*sj6);
IkReal x6940=(sj5*sj6);
IkReal x6941=(cj6*sj5);
IkReal x6942=((0.01)*cj5);
IkReal x6943=(cj6*r21);
IkReal x6944=(r22*sj5);
IkReal x6945=(r21*sj6);
IkReal x6946=((1.0)*cj4);
IkReal x6947=((1.0)*sj4);
IkReal x6948=(cj6*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x6938*x6939))+((cj4*x6948))+(((-1.0)*x6945*x6946))+(((-1.0)*x6944*x6947))+(((-1.0)*sj4*x6938*x6943)));
evalcond[2]=((-0.069)+((x6939*x6942))+(((-0.37429)*sj5*x6939))+((x6942*x6943))+(((-1.0)*pz))+(((-0.37429)*r21*x6941))+(((0.01)*x6944))+(((0.37429)*cj5*r22)));
evalcond[3]=(((sj4*x6945))+(((-1.0)*cj4*x6938*x6939))+(((-1.0)*x6947*x6948))+(((-1.0)*cj4*x6938*x6943))+(((-1.0)*x6944*x6946)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x6938))+((sj5*x6939))+((r21*x6941)));
evalcond[5]=(((r10*x6940))+(((-1.0)*r12*x6938))+((r11*x6941)));
evalcond[6]=((((-1.0)*r02*x6938))+((r01*x6941))+((r00*x6940)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6949=(cj6*r00);
IkReal x6950=(r02*sj5);
IkReal x6951=(r01*sj6);
IkReal x6952=(cj5*r00*sj6);
IkReal x6953=(cj5*cj6*r01);
if( IKabs((((sj4*x6953))+((sj4*x6952))+((sj4*x6950))+((cj4*x6951))+(((-1.0)*cj4*x6949)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x6949))+((cj4*x6953))+((cj4*x6952))+((cj4*x6950))+(((-1.0)*sj4*x6951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x6953))+((sj4*x6952))+((sj4*x6950))+((cj4*x6951))+(((-1.0)*cj4*x6949))))+IKsqr((((sj4*x6949))+((cj4*x6953))+((cj4*x6952))+((cj4*x6950))+(((-1.0)*sj4*x6951))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x6953))+((sj4*x6952))+((sj4*x6950))+((cj4*x6951))+(((-1.0)*cj4*x6949))), (((sj4*x6949))+((cj4*x6953))+((cj4*x6952))+((cj4*x6950))+(((-1.0)*sj4*x6951))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6954=IKsin(j0);
IkReal x6955=IKcos(j0);
IkReal x6956=((1.0)*sj4);
IkReal x6957=(r10*sj6);
IkReal x6958=((0.37429)*sj5);
IkReal x6959=(cj6*r00);
IkReal x6960=((0.01)*cj5);
IkReal x6961=(r12*sj5);
IkReal x6962=(r00*sj6);
IkReal x6963=(r02*sj5);
IkReal x6964=(sj4*sj6);
IkReal x6965=((1.0)*cj4);
IkReal x6966=((0.37429)*cj5);
IkReal x6967=(cj6*r10);
IkReal x6968=(cj5*cj6*r11);
IkReal x6969=(cj5*cj6*r01);
evalcond[0]=(((cj4*x6959))+(((-1.0)*r01*sj6*x6965))+x6954+(((-1.0)*x6956*x6969))+(((-1.0)*x6956*x6963))+(((-1.0)*cj5*x6956*x6962)));
evalcond[1]=((((-1.0)*x6965*x6969))+(((-1.0)*x6956*x6959))+((r01*x6964))+(((-1.0)*cj5*x6962*x6965))+x6955+(((-1.0)*x6963*x6965)));
evalcond[2]=((((-1.0)*x6965*x6968))+(((-1.0)*x6961*x6965))+(((-1.0)*cj5*x6957*x6965))+x6954+((r11*x6964))+(((-1.0)*x6956*x6967)));
evalcond[3]=((((-1.0)*x6955))+(((-1.0)*r11*sj6*x6965))+(((-1.0)*x6956*x6968))+(((-1.0)*x6956*x6961))+(((-1.0)*cj5*x6956*x6957))+((cj4*x6967)));
evalcond[4]=((((-0.29542)*x6955))+(((-1.0)*x6958*x6962))+(((0.01)*x6963))+((r02*x6966))+(((-1.0)*px))+((cj6*r01*x6960))+(((-1.0)*cj6*r01*x6958))+((x6960*x6962)));
evalcond[5]=((((-0.29542)*x6954))+(((0.01)*x6961))+(((-1.0)*py))+(((-1.0)*x6957*x6958))+((cj6*r11*x6960))+(((-1.0)*cj6*r11*x6958))+((r12*x6966))+((x6957*x6960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6970=((1.0)*sj6);
IkReal x6971=(cj5*sj4);
IkReal x6972=((1.0)*sj5);
CheckValue<IkReal> x6973=IKPowWithIntegerCheck(cj2,-1);
if(!x6973.valid){
continue;
}
CheckValue<IkReal> x6974=IKPowWithIntegerCheck(sj2,-1);
if(!x6974.valid){
continue;
}
if( IKabs(((x6973.value)*(((((-1.0)*cj4*r01*x6970))+(((-1.0)*r02*sj4*x6972))+((cj4*cj6*r00))+(((-1.0)*cj6*r01*x6971))+(((-1.0)*r00*x6970*x6971)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6974.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x6970))+(((-1.0)*cj6*r11*x6972)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6973.value)*(((((-1.0)*cj4*r01*x6970))+(((-1.0)*r02*sj4*x6972))+((cj4*cj6*r00))+(((-1.0)*cj6*r01*x6971))+(((-1.0)*r00*x6970*x6971))))))+IKsqr(((x6974.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x6970))+(((-1.0)*cj6*r11*x6972))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6973.value)*(((((-1.0)*cj4*r01*x6970))+(((-1.0)*r02*sj4*x6972))+((cj4*cj6*r00))+(((-1.0)*cj6*r01*x6971))+(((-1.0)*r00*x6970*x6971))))), ((x6974.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x6970))+(((-1.0)*cj6*r11*x6972))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6975=IKcos(j0);
IkReal x6976=IKsin(j0);
IkReal x6977=((1.0)*cj5);
IkReal x6978=(cj6*sj4);
IkReal x6979=((0.37429)*sj5);
IkReal x6980=(r10*sj6);
IkReal x6981=((0.37429)*cj5);
IkReal x6982=((0.069)*sj2);
IkReal x6983=(cj6*r01);
IkReal x6984=(r00*sj6);
IkReal x6985=(cj6*r11);
IkReal x6986=((0.01)*cj5);
IkReal x6987=(r12*sj5);
IkReal x6988=(cj4*cj6);
IkReal x6989=((1.0)*cj4);
IkReal x6990=(r01*sj6);
IkReal x6991=(r02*sj5);
IkReal x6992=(r11*sj6);
IkReal x6993=((1.0)*sj4*sj5);
IkReal x6994=((1.0)*x6976);
evalcond[0]=(((sj2*x6975))+(((-1.0)*r12*x6977))+((sj5*x6985))+((sj5*x6980)));
evalcond[1]=((((-1.0)*r02*x6977))+(((-1.0)*sj2*x6994))+((sj5*x6984))+((sj5*x6983)));
evalcond[2]=((((-1.0)*r00*x6978))+x6975+(((-1.0)*x6989*x6991))+(((-1.0)*cj4*x6977*x6983))+(((-1.0)*cj4*x6977*x6984))+((sj4*x6990)));
evalcond[3]=((((-1.0)*x6987*x6989))+(((-1.0)*r10*x6978))+x6976+(((-1.0)*cj4*x6977*x6980))+(((-1.0)*cj4*x6977*x6985))+((sj4*x6992)));
evalcond[4]=((((-1.0)*sj4*x6977*x6980))+((r10*x6988))+(((-1.0)*sj4*x6987))+((cj2*x6975))+(((-1.0)*r11*x6977*x6978))+(((-1.0)*x6989*x6992)));
evalcond[5]=((((-1.0)*sj4*x6977*x6984))+(((-1.0)*r01*x6977*x6978))+((r00*x6988))+(((-1.0)*cj2*x6994))+(((-1.0)*x6989*x6990))+(((-1.0)*sj4*x6991)));
evalcond[6]=((((0.01)*x6991))+((x6983*x6986))+(((-1.0)*px))+((r02*x6981))+(((-1.0)*x6979*x6984))+(((-1.0)*x6979*x6983))+(((-0.29542)*x6975))+(((-1.0)*x6976*x6982))+((x6984*x6986)));
evalcond[7]=(((x6980*x6986))+(((0.01)*x6987))+(((-1.0)*py))+(((-1.0)*x6979*x6985))+(((-1.0)*x6979*x6980))+(((-0.29542)*x6976))+((x6985*x6986))+((r12*x6981))+((x6975*x6982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6995=(cj6*r01);
IkReal x6996=(r00*sj6);
IkReal x6997=(cj4*cj5);
CheckValue<IkReal> x6998=IKPowWithIntegerCheck(sj2,-1);
if(!x6998.valid){
continue;
}
if( IKabs(((x6998.value)*((((sj5*x6996))+((sj5*x6995))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x6995*x6997))+((x6996*x6997)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6998.value)*((((sj5*x6996))+((sj5*x6995))+(((-1.0)*cj5*r02))))))+IKsqr((((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x6995*x6997))+((x6996*x6997))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6998.value)*((((sj5*x6996))+((sj5*x6995))+(((-1.0)*cj5*r02))))), (((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x6995*x6997))+((x6996*x6997))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6999=IKcos(j0);
IkReal x7000=IKsin(j0);
IkReal x7001=((1.0)*cj5);
IkReal x7002=(cj6*sj4);
IkReal x7003=((0.37429)*sj5);
IkReal x7004=(r10*sj6);
IkReal x7005=((0.37429)*cj5);
IkReal x7006=((0.069)*sj2);
IkReal x7007=(cj6*r01);
IkReal x7008=(r00*sj6);
IkReal x7009=(cj6*r11);
IkReal x7010=((0.01)*cj5);
IkReal x7011=(r12*sj5);
IkReal x7012=(cj4*cj6);
IkReal x7013=((1.0)*cj4);
IkReal x7014=(r01*sj6);
IkReal x7015=(r02*sj5);
IkReal x7016=(r11*sj6);
IkReal x7017=((1.0)*sj4*sj5);
IkReal x7018=((1.0)*x7000);
evalcond[0]=((((-1.0)*r12*x7001))+((sj2*x6999))+((sj5*x7004))+((sj5*x7009)));
evalcond[1]=((((-1.0)*r02*x7001))+(((-1.0)*sj2*x7018))+((sj5*x7007))+((sj5*x7008)));
evalcond[2]=((((-1.0)*cj4*x7001*x7007))+(((-1.0)*cj4*x7001*x7008))+(((-1.0)*x7013*x7015))+(((-1.0)*r00*x7002))+x6999+((sj4*x7014)));
evalcond[3]=((((-1.0)*x7011*x7013))+x7000+(((-1.0)*r10*x7002))+(((-1.0)*cj4*x7001*x7004))+(((-1.0)*cj4*x7001*x7009))+((sj4*x7016)));
evalcond[4]=(((cj2*x6999))+(((-1.0)*sj4*x7001*x7004))+(((-1.0)*sj4*x7011))+(((-1.0)*x7013*x7016))+((r10*x7012))+(((-1.0)*r11*x7001*x7002)));
evalcond[5]=((((-1.0)*r01*x7001*x7002))+(((-1.0)*sj4*x7001*x7008))+(((-1.0)*sj4*x7015))+(((-1.0)*x7013*x7014))+(((-1.0)*cj2*x7018))+((r00*x7012)));
evalcond[6]=((((-1.0)*x7003*x7008))+(((-1.0)*x7003*x7007))+((x7008*x7010))+(((0.01)*x7015))+(((-0.29542)*x6999))+(((-1.0)*px))+((x7007*x7010))+((r02*x7005))+(((-1.0)*x7000*x7006)));
evalcond[7]=((((-0.29542)*x7000))+(((-1.0)*x7003*x7009))+(((-1.0)*x7003*x7004))+(((0.01)*x7011))+((x7009*x7010))+(((-1.0)*py))+((r12*x7005))+((x7004*x7010))+((x6999*x7006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7019=(cj6*sj5);
IkReal x7020=(sj5*sj6);
CheckValue<IkReal> x7021=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x7021.valid){
continue;
}
CheckValue<IkReal> x7022 = IKatan2WithCheck(IkReal((((r00*x7020))+((r01*x7019))+(((-1.0)*cj5*r02)))),((((-1.0)*r10*x7020))+((cj5*r12))+(((-1.0)*r11*x7019))),IKFAST_ATAN2_MAGTHRESH);
if(!x7022.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7021.value)))+(x7022.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7023=IKcos(j0);
IkReal x7024=IKsin(j0);
IkReal x7025=((1.0)*cj5);
IkReal x7026=(cj6*sj4);
IkReal x7027=((0.37429)*sj5);
IkReal x7028=(r10*sj6);
IkReal x7029=((0.37429)*cj5);
IkReal x7030=((0.069)*sj2);
IkReal x7031=(cj6*r01);
IkReal x7032=(r00*sj6);
IkReal x7033=(cj6*r11);
IkReal x7034=((0.01)*cj5);
IkReal x7035=(r12*sj5);
IkReal x7036=(cj4*cj6);
IkReal x7037=((1.0)*cj4);
IkReal x7038=(r01*sj6);
IkReal x7039=(r02*sj5);
IkReal x7040=(r11*sj6);
IkReal x7041=((1.0)*sj4*sj5);
IkReal x7042=((1.0)*x7024);
evalcond[0]=((((-1.0)*r12*x7025))+((sj5*x7028))+((sj5*x7033))+((sj2*x7023)));
evalcond[1]=((((-1.0)*sj2*x7042))+(((-1.0)*r02*x7025))+((sj5*x7032))+((sj5*x7031)));
evalcond[2]=((((-1.0)*cj4*x7025*x7031))+(((-1.0)*cj4*x7025*x7032))+x7023+(((-1.0)*x7037*x7039))+(((-1.0)*r00*x7026))+((sj4*x7038)));
evalcond[3]=((((-1.0)*r10*x7026))+(((-1.0)*cj4*x7025*x7033))+x7024+(((-1.0)*x7035*x7037))+(((-1.0)*cj4*x7025*x7028))+((sj4*x7040)));
evalcond[4]=(((cj2*x7023))+((r10*x7036))+(((-1.0)*x7037*x7040))+(((-1.0)*sj4*x7025*x7028))+(((-1.0)*r11*x7025*x7026))+(((-1.0)*sj4*x7035)));
evalcond[5]=(((r00*x7036))+(((-1.0)*cj2*x7042))+(((-1.0)*x7037*x7038))+(((-1.0)*sj4*x7025*x7032))+(((-1.0)*sj4*x7039))+(((-1.0)*r01*x7025*x7026)));
evalcond[6]=((((-0.29542)*x7023))+((x7032*x7034))+((r02*x7029))+(((-1.0)*px))+((x7031*x7034))+(((-1.0)*x7027*x7031))+(((-1.0)*x7027*x7032))+(((-1.0)*x7024*x7030))+(((0.01)*x7039)));
evalcond[7]=((((-0.29542)*x7024))+((r12*x7029))+((x7023*x7030))+(((-1.0)*x7027*x7028))+(((-1.0)*py))+((x7028*x7034))+(((-1.0)*x7027*x7033))+((x7033*x7034))+(((0.01)*x7035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7043=((1.0)*cj5);
IkReal x7044=(r20*sj6);
IkReal x7045=((0.01)*cj5);
IkReal x7046=(cj6*r21);
IkReal x7047=(r22*sj5);
IkReal x7048=(r21*sj6);
IkReal x7049=((1.0)*cj4);
IkReal x7050=((1.0)*sj4);
IkReal x7051=(cj6*r20);
IkReal x7052=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x7048*x7049))+(((-1.0)*x7047*x7050))+(((-1.0)*sj4*x7043*x7044))+(((-1.0)*sj4*x7043*x7046))+((cj4*x7051)));
evalcond[2]=((((-1.0)*x7046*x7052))+(((-1.0)*x7044*x7052))+(((-0.069)*cj1))+((x7045*x7046))+(((-1.0)*pz))+(((0.01)*x7047))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1))+((x7044*x7045)));
evalcond[3]=(sj1+(((-1.0)*cj4*x7043*x7044))+(((-1.0)*cj4*x7043*x7046))+((sj4*x7048))+(((-1.0)*x7047*x7049))+(((-1.0)*x7050*x7051)));
evalcond[4]=((((-1.0)*r22*x7043))+((sj5*x7044))+((sj5*x7046))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x7053=(cj6*sj5);
IkReal x7054=(sj5*sj6);
IkReal x7055=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs((((r10*x7054))+((r11*x7053))+(((-1.0)*r12*x7055)))))+(IKabs((((r01*x7053))+((r00*x7054))+(((-1.0)*r02*x7055))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x7056=(r20*sj6);
IkReal x7057=((1.0)*cj5);
IkReal x7058=((0.01)*cj5);
IkReal x7059=(cj6*r11);
IkReal x7060=(r10*sj6);
IkReal x7061=((0.37429)*sj5);
IkReal x7062=(r00*sj6);
IkReal x7063=(cj6*r21);
IkReal x7064=(sj4*sj6);
IkReal x7065=((0.01)*sj5);
IkReal x7066=(cj6*r01);
IkReal x7067=((0.37429)*cj5);
IkReal x7068=((1.0)*cj4);
IkReal x7069=(r22*sj5);
IkReal x7070=((1.0)*cj6*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*sj6*x7068))+((cj4*cj6*r20))+(((-1.0)*sj4*x7069))+(((-1.0)*sj4*x7056*x7057))+(((-1.0)*sj4*x7057*x7063)));
evalcond[2]=((-0.36442)+(((-1.0)*x7056*x7061))+((x7056*x7058))+((r22*x7067))+((r22*x7065))+(((-1.0)*pz))+(((-1.0)*x7061*x7063))+((x7058*x7063)));
evalcond[3]=((((-1.0)*px))+(((-1.0)*x7061*x7062))+(((-1.0)*x7061*x7066))+((x7058*x7062))+((x7058*x7066))+((r02*x7067))+((r02*x7065)));
evalcond[4]=(((r12*x7067))+((r12*x7065))+(((-1.0)*x7059*x7061))+((x7058*x7059))+(((-1.0)*py))+(((-1.0)*x7060*x7061))+((x7058*x7060)));
evalcond[5]=((1.0)+(((-1.0)*r20*x7070))+(((-1.0)*x7068*x7069))+((r21*x7064))+(((-1.0)*cj4*x7057*x7063))+(((-1.0)*cj4*x7056*x7057)));
evalcond[6]=((((-1.0)*r22*x7057))+((sj5*x7063))+((sj5*x7056)));
evalcond[7]=((((-1.0)*r00*x7070))+(((-1.0)*r02*sj5*x7068))+((r01*x7064))+(((-1.0)*cj4*x7057*x7062))+(((-1.0)*cj4*x7057*x7066)));
evalcond[8]=((((-1.0)*r12*sj5*x7068))+(((-1.0)*r10*x7070))+(((-1.0)*cj4*x7057*x7060))+(((-1.0)*cj4*x7057*x7059))+((r11*x7064)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7071=(cj6*sj5);
IkReal x7072=(sj5*sj6);
IkReal x7073=((1.0)*cj5);
if( IKabs((((r11*x7071))+(((-1.0)*r12*x7073))+((r10*x7072)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x7071))+((r00*x7072))+(((-1.0)*r02*x7073)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x7071))+(((-1.0)*r12*x7073))+((r10*x7072))))+IKsqr((((r01*x7071))+((r00*x7072))+(((-1.0)*r02*x7073))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x7071))+(((-1.0)*r12*x7073))+((r10*x7072))), (((r01*x7071))+((r00*x7072))+(((-1.0)*r02*x7073))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7074=IKcos(j0);
IkReal x7075=(cj6*sj5);
IkReal x7076=((1.0)*sj6);
IkReal x7077=(sj5*sj6);
IkReal x7078=(cj4*cj6);
IkReal x7079=(cj5*sj4);
IkReal x7080=((1.0)*r02);
IkReal x7081=(sj4*sj5);
IkReal x7082=((1.0)*r12);
IkReal x7083=((1.0)*cj6);
IkReal x7084=((1.0)*(IKsin(j0)));
evalcond[0]=(((r11*x7075))+(((-1.0)*cj5*x7082))+((r10*x7077))+(((-1.0)*x7084)));
evalcond[1]=(((r01*x7075))+(((-1.0)*cj5*x7080))+((r00*x7077))+(((-1.0)*x7074)));
evalcond[2]=((((-1.0)*r11*x7079*x7083))+x7074+(((-1.0)*cj4*r11*x7076))+(((-1.0)*r10*x7076*x7079))+((r10*x7078))+(((-1.0)*x7081*x7082)));
evalcond[3]=(((r00*x7078))+(((-1.0)*r00*x7076*x7079))+(((-1.0)*cj4*r01*x7076))+(((-1.0)*x7080*x7081))+(((-1.0)*r01*x7079*x7083))+(((-1.0)*x7084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7085=((1.0)*cj5);
IkReal x7086=(cj4*sj6);
IkReal x7087=((0.01)*cj5);
IkReal x7088=(r20*sj6);
IkReal x7089=(cj6*r21);
IkReal x7090=(sj4*sj6);
IkReal x7091=(r22*sj5);
IkReal x7092=(cj4*cj6);
IkReal x7093=((0.37429)*sj5);
IkReal x7094=((1.0)*cj6*sj4);
IkReal x7095=((1.0)*cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x7085*x7088))+(((-1.0)*sj4*x7085*x7089))+(((-1.0)*r21*x7086))+(((-1.0)*sj4*x7091))+((r20*x7092)));
evalcond[2]=((0.36442)+(((-1.0)*x7088*x7093))+(((-1.0)*x7089*x7093))+(((0.01)*x7091))+(((-1.0)*pz))+((x7087*x7089))+((x7087*x7088))+(((0.37429)*cj5*r22)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x7091))+((r21*x7090))+(((-1.0)*r20*x7085*x7086))+(((-1.0)*r20*x7094))+(((-1.0)*cj4*x7085*x7089)));
evalcond[4]=(((sj5*x7088))+((sj5*x7089))+(((-1.0)*r22*x7085)));
evalcond[5]=((((-1.0)*r00*x7085*x7086))+((r01*x7090))+(((-1.0)*r01*x7085*x7092))+(((-1.0)*r00*x7094))+(((-1.0)*r02*x7095)));
evalcond[6]=(((r11*x7090))+(((-1.0)*r10*x7085*x7086))+(((-1.0)*r10*x7094))+(((-1.0)*r12*x7095))+(((-1.0)*r11*x7085*x7092)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7096=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x7096))+(((-1.0)*r10*sj6*x7096)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x7096))+(((-1.0)*cj6*r01*x7096))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x7096))+(((-1.0)*r10*sj6*x7096))))+IKsqr(((((-1.0)*r00*sj6*x7096))+(((-1.0)*cj6*r01*x7096))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x7096))+(((-1.0)*r10*sj6*x7096))), ((((-1.0)*r00*sj6*x7096))+(((-1.0)*cj6*r01*x7096))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7097=IKcos(j0);
IkReal x7098=IKsin(j0);
IkReal x7099=((1.0)*sj4);
IkReal x7100=(sj5*sj6);
IkReal x7101=(cj5*r12);
IkReal x7102=(r12*sj5);
IkReal x7103=(cj6*sj5);
IkReal x7104=(r02*sj5);
IkReal x7105=(cj4*cj6);
IkReal x7106=(cj5*r02);
IkReal x7107=(cj5*sj6);
IkReal x7108=(cj5*cj6*r11);
IkReal x7109=(cj5*cj6*r01);
IkReal x7110=((0.01)*x7107);
IkReal x7111=((1.0)*cj4*sj6);
evalcond[0]=(x7098+(((-1.0)*x7101))+((r10*x7100))+((r11*x7103)));
evalcond[1]=(x7097+(((-1.0)*x7106))+((r00*x7100))+((r01*x7103)));
evalcond[2]=(x7097+(((-1.0)*r11*x7111))+((r10*x7105))+(((-1.0)*x7099*x7108))+(((-1.0)*x7099*x7102))+(((-1.0)*r10*x7099*x7107)));
evalcond[3]=((((-1.0)*x7098))+(((-1.0)*r00*x7099*x7107))+(((-1.0)*x7099*x7109))+(((-1.0)*x7099*x7104))+(((-1.0)*r01*x7111))+((r00*x7105)));
evalcond[4]=((((-0.37429)*r00*x7100))+(((0.01)*x7104))+(((0.01)*x7109))+(((-1.0)*px))+(((0.37429)*x7106))+(((0.138)*x7097))+((r00*x7110))+(((-0.37429)*r01*x7103)));
evalcond[5]=((((-0.37429)*r10*x7100))+(((0.01)*x7102))+(((0.01)*x7108))+(((-1.0)*py))+((r10*x7110))+(((-0.37429)*r11*x7103))+(((0.37429)*x7101))+(((0.138)*x7098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7112=((1.0)*cj6);
IkReal x7113=(cj4*cj5);
CheckValue<IkReal> x7114=IKPowWithIntegerCheck(sj1,-1);
if(!x7114.valid){
continue;
}
CheckValue<IkReal> x7115=IKPowWithIntegerCheck(cj1,-1);
if(!x7115.valid){
continue;
}
if( IKabs(((x7114.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7115.value)*(((((-1.0)*r00*sj4*x7112))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7112*x7113))+(((-1.0)*r00*sj6*x7113)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7114.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))+IKsqr(((x7115.value)*(((((-1.0)*r00*sj4*x7112))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7112*x7113))+(((-1.0)*r00*sj6*x7113))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7114.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))), ((x7115.value)*(((((-1.0)*r00*sj4*x7112))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7112*x7113))+(((-1.0)*r00*sj6*x7113))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7116=IKcos(j0);
IkReal x7117=IKsin(j0);
IkReal x7118=((1.0)*cj5);
IkReal x7119=(r11*sj4);
IkReal x7120=(r00*sj6);
IkReal x7121=((0.37429)*sj5);
IkReal x7122=(r10*sj6);
IkReal x7123=(cj6*sj4);
IkReal x7124=((0.36442)*cj1);
IkReal x7125=(cj6*r01);
IkReal x7126=(cj6*r11);
IkReal x7127=((0.01)*cj5);
IkReal x7128=(cj4*cj6);
IkReal x7129=((0.37429)*cj5);
IkReal x7130=((1.0)*cj4);
IkReal x7131=(r12*sj5);
IkReal x7132=(r01*sj6);
IkReal x7133=(r02*sj5);
IkReal x7134=((1.0)*sj4*sj5);
IkReal x7135=((0.069)*x7117);
IkReal x7136=((1.0)*x7117);
IkReal x7137=((1.0)*x7116);
IkReal x7138=((0.069)*x7116);
evalcond[0]=(((sj5*x7126))+((sj5*x7122))+(((-1.0)*r12*x7118))+(((-1.0)*sj1*x7136)));
evalcond[1]=(((sj5*x7125))+((sj5*x7120))+(((-1.0)*r02*x7118))+(((-1.0)*sj1*x7137)));
evalcond[2]=(x7116+(((-1.0)*cj6*x7118*x7119))+(((-1.0)*r11*sj6*x7130))+(((-1.0)*sj4*x7118*x7122))+((r10*x7128))+(((-1.0)*sj4*x7131)));
evalcond[3]=((((-1.0)*x7130*x7132))+((r00*x7128))+(((-1.0)*r01*x7118*x7123))+(((-1.0)*sj4*x7118*x7120))+(((-1.0)*x7136))+(((-1.0)*sj4*x7133)));
evalcond[4]=((((-1.0)*x7130*x7133))+((sj4*x7132))+(((-1.0)*r00*x7123))+(((-1.0)*cj1*x7137))+(((-1.0)*cj4*x7118*x7120))+(((-1.0)*cj4*x7118*x7125)));
evalcond[5]=((((-1.0)*x7130*x7131))+((sj6*x7119))+(((-1.0)*r10*x7123))+(((-1.0)*cj1*x7136))+(((-1.0)*cj4*x7118*x7126))+(((-1.0)*cj4*x7118*x7122)));
evalcond[6]=(x7138+(((-1.0)*x7120*x7121))+(((-1.0)*x7121*x7125))+((x7120*x7127))+(((-1.0)*px))+((x7116*x7124))+(((0.01)*x7133))+((r02*x7129))+(((-1.0)*sj1*x7138))+((x7125*x7127)));
evalcond[7]=(x7135+(((-1.0)*x7121*x7126))+(((-1.0)*x7121*x7122))+((x7117*x7124))+(((-1.0)*py))+(((0.01)*x7131))+((r12*x7129))+((x7126*x7127))+(((-1.0)*sj1*x7135))+((x7122*x7127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7139=(cj6*r11);
IkReal x7140=(cj5*sj4);
IkReal x7141=(r10*sj6);
CheckValue<IkReal> x7142=IKPowWithIntegerCheck(sj1,-1);
if(!x7142.valid){
continue;
}
if( IKabs(((x7142.value)*(((((-1.0)*cj5*r12))+((sj5*x7141))+((sj5*x7139)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x7140*x7141))+((x7139*x7140))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7142.value)*(((((-1.0)*cj5*r12))+((sj5*x7141))+((sj5*x7139))))))+IKsqr((((x7140*x7141))+((x7139*x7140))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7142.value)*(((((-1.0)*cj5*r12))+((sj5*x7141))+((sj5*x7139))))), (((x7140*x7141))+((x7139*x7140))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7143=IKcos(j0);
IkReal x7144=IKsin(j0);
IkReal x7145=((1.0)*cj5);
IkReal x7146=(r11*sj4);
IkReal x7147=(r00*sj6);
IkReal x7148=((0.37429)*sj5);
IkReal x7149=(r10*sj6);
IkReal x7150=(cj6*sj4);
IkReal x7151=((0.36442)*cj1);
IkReal x7152=(cj6*r01);
IkReal x7153=(cj6*r11);
IkReal x7154=((0.01)*cj5);
IkReal x7155=(cj4*cj6);
IkReal x7156=((0.37429)*cj5);
IkReal x7157=((1.0)*cj4);
IkReal x7158=(r12*sj5);
IkReal x7159=(r01*sj6);
IkReal x7160=(r02*sj5);
IkReal x7161=((1.0)*sj4*sj5);
IkReal x7162=((0.069)*x7144);
IkReal x7163=((1.0)*x7144);
IkReal x7164=((1.0)*x7143);
IkReal x7165=((0.069)*x7143);
evalcond[0]=(((sj5*x7149))+((sj5*x7153))+(((-1.0)*r12*x7145))+(((-1.0)*sj1*x7163)));
evalcond[1]=(((sj5*x7147))+((sj5*x7152))+(((-1.0)*r02*x7145))+(((-1.0)*sj1*x7164)));
evalcond[2]=(x7143+(((-1.0)*cj6*x7145*x7146))+(((-1.0)*sj4*x7145*x7149))+(((-1.0)*sj4*x7158))+((r10*x7155))+(((-1.0)*r11*sj6*x7157)));
evalcond[3]=((((-1.0)*r01*x7145*x7150))+(((-1.0)*x7157*x7159))+((r00*x7155))+(((-1.0)*sj4*x7145*x7147))+(((-1.0)*x7163))+(((-1.0)*sj4*x7160)));
evalcond[4]=((((-1.0)*cj1*x7164))+((sj4*x7159))+(((-1.0)*x7157*x7160))+(((-1.0)*cj4*x7145*x7152))+(((-1.0)*cj4*x7145*x7147))+(((-1.0)*r00*x7150)));
evalcond[5]=((((-1.0)*cj1*x7163))+(((-1.0)*x7157*x7158))+(((-1.0)*cj4*x7145*x7153))+(((-1.0)*cj4*x7145*x7149))+(((-1.0)*r10*x7150))+((sj6*x7146)));
evalcond[6]=(((r02*x7156))+x7165+(((-1.0)*x7148*x7152))+(((-1.0)*px))+((x7147*x7154))+(((-1.0)*x7147*x7148))+((x7152*x7154))+(((-1.0)*sj1*x7165))+(((0.01)*x7160))+((x7143*x7151)));
evalcond[7]=(x7162+((x7149*x7154))+(((-1.0)*x7148*x7149))+(((0.01)*x7158))+((r12*x7156))+(((-1.0)*x7148*x7153))+(((-1.0)*py))+((x7144*x7151))+((x7153*x7154))+(((-1.0)*sj1*x7162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7166=(cj6*sj5);
IkReal x7167=(sj5*sj6);
IkReal x7168=((1.0)*cj5);
CheckValue<IkReal> x7169=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7169.valid){
continue;
}
CheckValue<IkReal> x7170 = IKatan2WithCheck(IkReal((((r11*x7166))+(((-1.0)*r12*x7168))+((r10*x7167)))),((((-1.0)*r02*x7168))+((r00*x7167))+((r01*x7166))),IKFAST_ATAN2_MAGTHRESH);
if(!x7170.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7169.value)))+(x7170.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7171=IKcos(j0);
IkReal x7172=IKsin(j0);
IkReal x7173=((1.0)*cj5);
IkReal x7174=(r11*sj4);
IkReal x7175=(r00*sj6);
IkReal x7176=((0.37429)*sj5);
IkReal x7177=(r10*sj6);
IkReal x7178=(cj6*sj4);
IkReal x7179=((0.36442)*cj1);
IkReal x7180=(cj6*r01);
IkReal x7181=(cj6*r11);
IkReal x7182=((0.01)*cj5);
IkReal x7183=(cj4*cj6);
IkReal x7184=((0.37429)*cj5);
IkReal x7185=((1.0)*cj4);
IkReal x7186=(r12*sj5);
IkReal x7187=(r01*sj6);
IkReal x7188=(r02*sj5);
IkReal x7189=((1.0)*sj4*sj5);
IkReal x7190=((0.069)*x7172);
IkReal x7191=((1.0)*x7172);
IkReal x7192=((1.0)*x7171);
IkReal x7193=((0.069)*x7171);
evalcond[0]=(((sj5*x7181))+(((-1.0)*sj1*x7191))+(((-1.0)*r12*x7173))+((sj5*x7177)));
evalcond[1]=(((sj5*x7180))+(((-1.0)*sj1*x7192))+(((-1.0)*r02*x7173))+((sj5*x7175)));
evalcond[2]=(x7171+(((-1.0)*r11*sj6*x7185))+(((-1.0)*sj4*x7186))+((r10*x7183))+(((-1.0)*cj6*x7173*x7174))+(((-1.0)*sj4*x7173*x7177)));
evalcond[3]=(((r00*x7183))+(((-1.0)*sj4*x7188))+(((-1.0)*x7185*x7187))+(((-1.0)*x7191))+(((-1.0)*r01*x7173*x7178))+(((-1.0)*sj4*x7173*x7175)));
evalcond[4]=((((-1.0)*cj4*x7173*x7180))+(((-1.0)*cj4*x7173*x7175))+(((-1.0)*x7185*x7188))+(((-1.0)*r00*x7178))+(((-1.0)*cj1*x7192))+((sj4*x7187)));
evalcond[5]=((((-1.0)*cj4*x7173*x7181))+(((-1.0)*r10*x7178))+(((-1.0)*cj4*x7173*x7177))+(((-1.0)*x7185*x7186))+((sj6*x7174))+(((-1.0)*cj1*x7191)));
evalcond[6]=(x7193+(((0.01)*x7188))+(((-1.0)*sj1*x7193))+(((-1.0)*px))+((x7180*x7182))+((r02*x7184))+((x7175*x7182))+(((-1.0)*x7175*x7176))+((x7171*x7179))+(((-1.0)*x7176*x7180)));
evalcond[7]=(x7190+((r12*x7184))+((x7181*x7182))+(((0.01)*x7186))+(((-1.0)*sj1*x7190))+(((-1.0)*py))+((x7172*x7179))+((x7177*x7182))+(((-1.0)*x7176*x7177))+(((-1.0)*x7176*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7194=((1.0)*cj5);
IkReal x7195=(r20*sj6);
IkReal x7196=((0.01)*cj5);
IkReal x7197=(cj6*r21);
IkReal x7198=(r22*sj5);
IkReal x7199=(r21*sj6);
IkReal x7200=((1.0)*cj4);
IkReal x7201=((1.0)*sj4);
IkReal x7202=(cj6*r20);
IkReal x7203=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*x7202))+(((-1.0)*x7199*x7200))+(((-1.0)*x7198*x7201))+(((-1.0)*sj4*x7194*x7195))+(((-1.0)*sj4*x7194*x7197)));
evalcond[2]=((((0.01)*x7198))+(((-1.0)*x7195*x7203))+(((0.069)*cj1))+((x7195*x7196))+((x7196*x7197))+(((-1.0)*pz))+(((-1.0)*x7197*x7203))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*cj4*x7194*x7195))+(((-1.0)*cj4*x7194*x7197))+(((-1.0)*x7198*x7200))+((sj4*x7199))+(((-1.0)*x7201*x7202)));
evalcond[4]=(cj1+((sj5*x7197))+((sj5*x7195))+(((-1.0)*r22*x7194)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x7204=((1.0)*cj6*sj5);
IkReal x7205=((1.0)*sj5*sj6);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x7205))+(((-1.0)*r11*x7204)))))+(IKabs(((((-1.0)*r00*x7205))+(((-1.0)*r01*x7204))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x7206=((1.0)*cj5);
IkReal x7207=(cj4*sj6);
IkReal x7208=((0.01)*cj5);
IkReal x7209=(r20*sj6);
IkReal x7210=(cj6*r21);
IkReal x7211=(sj4*sj6);
IkReal x7212=(r22*sj5);
IkReal x7213=(cj4*cj6);
IkReal x7214=((0.37429)*sj5);
IkReal x7215=((1.0)*cj6*sj4);
IkReal x7216=((1.0)*cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x7212))+(((-1.0)*sj4*x7206*x7210))+(((-1.0)*sj4*x7206*x7209))+(((-1.0)*r21*x7207))+((r20*x7213)));
evalcond[2]=((-0.36442)+((x7208*x7210))+(((0.01)*x7212))+(((-1.0)*pz))+(((-1.0)*x7209*x7214))+(((-1.0)*x7210*x7214))+((x7208*x7209))+(((0.37429)*cj5*r22)));
evalcond[3]=((1.0)+(((-1.0)*cj4*x7206*x7210))+((r21*x7211))+(((-1.0)*cj4*x7212))+(((-1.0)*r20*x7206*x7207))+(((-1.0)*r20*x7215)));
evalcond[4]=(((sj5*x7209))+(((-1.0)*r22*x7206))+((sj5*x7210)));
evalcond[5]=((((-1.0)*r00*x7206*x7207))+(((-1.0)*r00*x7215))+(((-1.0)*r02*x7216))+((r01*x7211))+(((-1.0)*r01*x7206*x7213)));
evalcond[6]=((((-1.0)*r11*x7206*x7213))+((r11*x7211))+(((-1.0)*r10*x7206*x7207))+(((-1.0)*r10*x7215))+(((-1.0)*r12*x7216)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7217=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x7217))+(((-1.0)*cj6*r11*x7217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x7217))+(((-1.0)*r00*sj6*x7217))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x7217))+(((-1.0)*cj6*r11*x7217))))+IKsqr(((((-1.0)*cj6*r01*x7217))+(((-1.0)*r00*sj6*x7217))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x7217))+(((-1.0)*cj6*r11*x7217))), ((((-1.0)*cj6*r01*x7217))+(((-1.0)*r00*sj6*x7217))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7218=IKsin(j0);
IkReal x7219=IKcos(j0);
IkReal x7220=((1.0)*sj4);
IkReal x7221=(sj5*sj6);
IkReal x7222=(cj5*r12);
IkReal x7223=(r12*sj5);
IkReal x7224=(cj6*sj5);
IkReal x7225=(r02*sj5);
IkReal x7226=(cj4*cj6);
IkReal x7227=(cj5*r02);
IkReal x7228=(cj5*sj6);
IkReal x7229=(cj5*cj6*r11);
IkReal x7230=(cj5*cj6*r01);
IkReal x7231=((0.01)*x7228);
IkReal x7232=((1.0)*cj4*sj6);
evalcond[0]=(x7218+((r10*x7221))+((r11*x7224))+(((-1.0)*x7222)));
evalcond[1]=(x7219+((r00*x7221))+((r01*x7224))+(((-1.0)*x7227)));
evalcond[2]=(x7218+((r00*x7226))+(((-1.0)*r00*x7220*x7228))+(((-1.0)*x7220*x7225))+(((-1.0)*r01*x7232))+(((-1.0)*x7220*x7230)));
evalcond[3]=(((r10*x7226))+(((-1.0)*r10*x7220*x7228))+(((-1.0)*x7219))+(((-1.0)*x7220*x7229))+(((-1.0)*x7220*x7223))+(((-1.0)*r11*x7232)));
evalcond[4]=(((r00*x7231))+(((0.37429)*x7227))+(((-1.0)*px))+(((-0.37429)*r01*x7224))+(((-0.37429)*r00*x7221))+(((0.01)*x7225))+(((0.01)*x7230))+(((0.138)*x7219)));
evalcond[5]=(((r10*x7231))+(((0.37429)*x7222))+(((-1.0)*py))+(((0.01)*x7229))+(((0.01)*x7223))+(((-0.37429)*r10*x7221))+(((-0.37429)*r11*x7224))+(((0.138)*x7218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7233=(r20*sj6);
IkReal x7234=((1.0)*cj5);
IkReal x7235=((0.01)*cj5);
IkReal x7236=(cj6*r11);
IkReal x7237=(r10*sj6);
IkReal x7238=((0.37429)*sj5);
IkReal x7239=(r00*sj6);
IkReal x7240=(cj6*r21);
IkReal x7241=(sj4*sj6);
IkReal x7242=((0.01)*sj5);
IkReal x7243=(cj6*r01);
IkReal x7244=((0.37429)*cj5);
IkReal x7245=((1.0)*cj4);
IkReal x7246=(r22*sj5);
IkReal x7247=((1.0)*cj6*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x7233*x7234))+((cj4*cj6*r20))+(((-1.0)*sj4*x7234*x7240))+(((-1.0)*r21*sj6*x7245))+(((-1.0)*sj4*x7246)));
evalcond[2]=((0.36442)+((x7233*x7235))+((x7235*x7240))+(((-1.0)*pz))+(((-1.0)*x7233*x7238))+(((-1.0)*x7238*x7240))+((r22*x7244))+((r22*x7242)));
evalcond[3]=(((r02*x7244))+((r02*x7242))+((x7235*x7243))+((x7235*x7239))+(((-1.0)*px))+(((-1.0)*x7238*x7239))+(((-1.0)*x7238*x7243)));
evalcond[4]=(((x7235*x7236))+((x7235*x7237))+(((-1.0)*x7237*x7238))+(((-1.0)*py))+(((-1.0)*x7236*x7238))+((r12*x7244))+((r12*x7242)));
evalcond[5]=((-1.0)+(((-1.0)*x7245*x7246))+(((-1.0)*r20*x7247))+(((-1.0)*cj4*x7234*x7240))+(((-1.0)*cj4*x7233*x7234))+((r21*x7241)));
evalcond[6]=(((sj5*x7233))+((sj5*x7240))+(((-1.0)*r22*x7234)));
evalcond[7]=((((-1.0)*cj4*x7234*x7239))+(((-1.0)*cj4*x7234*x7243))+(((-1.0)*r00*x7247))+((r01*x7241))+(((-1.0)*r02*sj5*x7245)));
evalcond[8]=((((-1.0)*cj4*x7234*x7237))+(((-1.0)*cj4*x7234*x7236))+(((-1.0)*r10*x7247))+((r11*x7241))+(((-1.0)*r12*sj5*x7245)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7248=(cj6*sj5);
IkReal x7249=(sj5*sj6);
IkReal x7250=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x7250))+((r10*x7249))+((r11*x7248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x7250))+((r00*x7249))+((r01*x7248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x7250))+((r10*x7249))+((r11*x7248))))+IKsqr(((((-1.0)*r02*x7250))+((r00*x7249))+((r01*x7248))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x7250))+((r10*x7249))+((r11*x7248))), ((((-1.0)*r02*x7250))+((r00*x7249))+((r01*x7248))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7251=IKsin(j0);
IkReal x7252=(cj6*sj5);
IkReal x7253=((1.0)*sj6);
IkReal x7254=(sj5*sj6);
IkReal x7255=(cj5*sj4);
IkReal x7256=((1.0)*r02);
IkReal x7257=(sj4*sj5);
IkReal x7258=(cj4*cj6);
IkReal x7259=((1.0)*r12);
IkReal x7260=((1.0)*cj6);
IkReal x7261=((1.0)*(IKcos(j0)));
evalcond[0]=((((-1.0)*cj5*x7259))+((r10*x7254))+((r11*x7252))+(((-1.0)*x7251)));
evalcond[1]=((((-1.0)*cj5*x7256))+(((-1.0)*x7261))+((r00*x7254))+((r01*x7252)));
evalcond[2]=((((-1.0)*r01*x7255*x7260))+x7251+((r00*x7258))+(((-1.0)*cj4*r01*x7253))+(((-1.0)*x7256*x7257))+(((-1.0)*r00*x7253*x7255)));
evalcond[3]=(((r10*x7258))+(((-1.0)*x7261))+(((-1.0)*r11*x7255*x7260))+(((-1.0)*cj4*r11*x7253))+(((-1.0)*r10*x7253*x7255))+(((-1.0)*x7257*x7259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7262=((1.0)*cj6);
IkReal x7263=(cj4*cj5);
IkReal x7264=((1.0)*sj6);
CheckValue<IkReal> x7265=IKPowWithIntegerCheck(sj1,-1);
if(!x7265.valid){
continue;
}
CheckValue<IkReal> x7266=IKPowWithIntegerCheck(cj1,-1);
if(!x7266.valid){
continue;
}
if( IKabs(((x7265.value)*(((((-1.0)*r10*sj5*x7264))+(((-1.0)*r11*sj5*x7262))+((cj5*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7266.value)*(((((-1.0)*r00*sj4*x7262))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7262*x7263))+(((-1.0)*r00*x7263*x7264)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7265.value)*(((((-1.0)*r10*sj5*x7264))+(((-1.0)*r11*sj5*x7262))+((cj5*r12))))))+IKsqr(((x7266.value)*(((((-1.0)*r00*sj4*x7262))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7262*x7263))+(((-1.0)*r00*x7263*x7264))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7265.value)*(((((-1.0)*r10*sj5*x7264))+(((-1.0)*r11*sj5*x7262))+((cj5*r12))))), ((x7266.value)*(((((-1.0)*r00*sj4*x7262))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7262*x7263))+(((-1.0)*r00*x7263*x7264))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7267=IKsin(j0);
IkReal x7268=IKcos(j0);
IkReal x7269=((1.0)*cj5);
IkReal x7270=(r11*sj4);
IkReal x7271=(r00*sj6);
IkReal x7272=((0.37429)*sj5);
IkReal x7273=(r10*sj6);
IkReal x7274=(cj6*sj4);
IkReal x7275=((0.36442)*cj1);
IkReal x7276=(cj6*r01);
IkReal x7277=(cj6*r11);
IkReal x7278=((0.01)*cj5);
IkReal x7279=(cj4*cj6);
IkReal x7280=((0.37429)*cj5);
IkReal x7281=((1.0)*cj4);
IkReal x7282=(r12*sj5);
IkReal x7283=(r01*sj6);
IkReal x7284=(r02*sj5);
IkReal x7285=((1.0)*sj4*sj5);
IkReal x7286=((0.069)*x7267);
IkReal x7287=((1.0)*x7268);
IkReal x7288=((0.069)*x7268);
evalcond[0]=(((sj1*x7267))+((sj5*x7273))+((sj5*x7277))+(((-1.0)*r12*x7269)));
evalcond[1]=(((sj1*x7268))+((sj5*x7271))+((sj5*x7276))+(((-1.0)*r02*x7269)));
evalcond[2]=((((-1.0)*r01*x7269*x7274))+(((-1.0)*sj4*x7269*x7271))+x7267+(((-1.0)*sj4*x7284))+((r00*x7279))+(((-1.0)*x7281*x7283)));
evalcond[3]=((((-1.0)*sj4*x7269*x7273))+(((-1.0)*x7287))+((r10*x7279))+(((-1.0)*sj4*x7282))+(((-1.0)*cj6*x7269*x7270))+(((-1.0)*r11*sj6*x7281)));
evalcond[4]=((((-1.0)*cj1*x7287))+((sj4*x7283))+(((-1.0)*cj4*x7269*x7271))+(((-1.0)*cj4*x7269*x7276))+(((-1.0)*r00*x7274))+(((-1.0)*x7281*x7284)));
evalcond[5]=(((sj6*x7270))+(((-1.0)*cj1*x7267))+(((-1.0)*cj4*x7269*x7273))+(((-1.0)*cj4*x7269*x7277))+(((-1.0)*r10*x7274))+(((-1.0)*x7281*x7282)));
evalcond[6]=(((x7271*x7278))+x7288+(((0.01)*x7284))+((r02*x7280))+((x7268*x7275))+(((-1.0)*x7272*x7276))+((sj1*x7288))+((x7276*x7278))+(((-1.0)*px))+(((-1.0)*x7271*x7272)));
evalcond[7]=(((x7267*x7275))+x7286+(((0.01)*x7282))+((r12*x7280))+((x7277*x7278))+(((-1.0)*x7272*x7277))+(((-1.0)*x7272*x7273))+((sj1*x7286))+(((-1.0)*py))+((x7273*x7278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7289=((1.0)*r00);
IkReal x7290=(cj6*r01);
IkReal x7291=(cj5*sj4);
CheckValue<IkReal> x7292=IKPowWithIntegerCheck(sj1,-1);
if(!x7292.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj6*x7289))+((r00*sj6*x7291))+((x7290*x7291))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7292.value)*(((((-1.0)*sj5*sj6*x7289))+(((-1.0)*sj5*x7290))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj6*x7289))+((r00*sj6*x7291))+((x7290*x7291))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x7292.value)*(((((-1.0)*sj5*sj6*x7289))+(((-1.0)*sj5*x7290))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj6*x7289))+((r00*sj6*x7291))+((x7290*x7291))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x7292.value)*(((((-1.0)*sj5*sj6*x7289))+(((-1.0)*sj5*x7290))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7293=IKsin(j0);
IkReal x7294=IKcos(j0);
IkReal x7295=((1.0)*cj5);
IkReal x7296=(r11*sj4);
IkReal x7297=(r00*sj6);
IkReal x7298=((0.37429)*sj5);
IkReal x7299=(r10*sj6);
IkReal x7300=(cj6*sj4);
IkReal x7301=((0.36442)*cj1);
IkReal x7302=(cj6*r01);
IkReal x7303=(cj6*r11);
IkReal x7304=((0.01)*cj5);
IkReal x7305=(cj4*cj6);
IkReal x7306=((0.37429)*cj5);
IkReal x7307=((1.0)*cj4);
IkReal x7308=(r12*sj5);
IkReal x7309=(r01*sj6);
IkReal x7310=(r02*sj5);
IkReal x7311=((1.0)*sj4*sj5);
IkReal x7312=((0.069)*x7293);
IkReal x7313=((1.0)*x7294);
IkReal x7314=((0.069)*x7294);
evalcond[0]=(((sj1*x7293))+((sj5*x7299))+(((-1.0)*r12*x7295))+((sj5*x7303)));
evalcond[1]=(((sj1*x7294))+((sj5*x7297))+(((-1.0)*r02*x7295))+((sj5*x7302)));
evalcond[2]=((((-1.0)*sj4*x7310))+x7293+(((-1.0)*sj4*x7295*x7297))+(((-1.0)*x7307*x7309))+(((-1.0)*r01*x7295*x7300))+((r00*x7305)));
evalcond[3]=(((r10*x7305))+(((-1.0)*sj4*x7295*x7299))+(((-1.0)*r11*sj6*x7307))+(((-1.0)*x7313))+(((-1.0)*cj6*x7295*x7296))+(((-1.0)*sj4*x7308)));
evalcond[4]=((((-1.0)*r00*x7300))+(((-1.0)*cj4*x7295*x7302))+(((-1.0)*cj4*x7295*x7297))+(((-1.0)*x7307*x7310))+(((-1.0)*cj1*x7313))+((sj4*x7309)));
evalcond[5]=((((-1.0)*cj4*x7295*x7303))+(((-1.0)*r10*x7300))+(((-1.0)*cj1*x7293))+(((-1.0)*cj4*x7295*x7299))+(((-1.0)*x7307*x7308))+((sj6*x7296)));
evalcond[6]=(x7314+((r02*x7306))+((x7302*x7304))+(((0.01)*x7310))+((sj1*x7314))+((x7294*x7301))+(((-1.0)*px))+(((-1.0)*x7297*x7298))+((x7297*x7304))+(((-1.0)*x7298*x7302)));
evalcond[7]=(x7312+((r12*x7306))+((x7293*x7301))+(((-1.0)*x7298*x7299))+((x7303*x7304))+(((0.01)*x7308))+((sj1*x7312))+(((-1.0)*py))+((x7299*x7304))+(((-1.0)*x7298*x7303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7315=((1.0)*sj5);
CheckValue<IkReal> x7316=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7316.valid){
continue;
}
CheckValue<IkReal> x7317 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*cj6*r11*x7315))+(((-1.0)*r10*sj6*x7315)))),((((-1.0)*r00*sj6*x7315))+(((-1.0)*cj6*r01*x7315))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x7317.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7316.value)))+(x7317.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7318=IKsin(j0);
IkReal x7319=IKcos(j0);
IkReal x7320=((1.0)*cj5);
IkReal x7321=(r11*sj4);
IkReal x7322=(r00*sj6);
IkReal x7323=((0.37429)*sj5);
IkReal x7324=(r10*sj6);
IkReal x7325=(cj6*sj4);
IkReal x7326=((0.36442)*cj1);
IkReal x7327=(cj6*r01);
IkReal x7328=(cj6*r11);
IkReal x7329=((0.01)*cj5);
IkReal x7330=(cj4*cj6);
IkReal x7331=((0.37429)*cj5);
IkReal x7332=((1.0)*cj4);
IkReal x7333=(r12*sj5);
IkReal x7334=(r01*sj6);
IkReal x7335=(r02*sj5);
IkReal x7336=((1.0)*sj4*sj5);
IkReal x7337=((0.069)*x7318);
IkReal x7338=((1.0)*x7319);
IkReal x7339=((0.069)*x7319);
evalcond[0]=(((sj5*x7328))+((sj5*x7324))+((sj1*x7318))+(((-1.0)*r12*x7320)));
evalcond[1]=(((sj5*x7327))+((sj5*x7322))+((sj1*x7319))+(((-1.0)*r02*x7320)));
evalcond[2]=(x7318+(((-1.0)*r01*x7320*x7325))+(((-1.0)*x7332*x7334))+((r00*x7330))+(((-1.0)*sj4*x7320*x7322))+(((-1.0)*sj4*x7335)));
evalcond[3]=(((r10*x7330))+(((-1.0)*cj6*x7320*x7321))+(((-1.0)*r11*sj6*x7332))+(((-1.0)*x7338))+(((-1.0)*sj4*x7320*x7324))+(((-1.0)*sj4*x7333)));
evalcond[4]=((((-1.0)*cj4*x7320*x7322))+(((-1.0)*cj4*x7320*x7327))+(((-1.0)*r00*x7325))+(((-1.0)*x7332*x7335))+(((-1.0)*cj1*x7338))+((sj4*x7334)));
evalcond[5]=((((-1.0)*cj4*x7320*x7328))+(((-1.0)*cj4*x7320*x7324))+(((-1.0)*cj1*x7318))+((sj6*x7321))+(((-1.0)*r10*x7325))+(((-1.0)*x7332*x7333)));
evalcond[6]=(x7339+((x7327*x7329))+((r02*x7331))+(((0.01)*x7335))+((sj1*x7339))+(((-1.0)*x7323*x7327))+(((-1.0)*x7322*x7323))+(((-1.0)*px))+((x7319*x7326))+((x7322*x7329)));
evalcond[7]=(x7337+((r12*x7331))+(((0.01)*x7333))+((sj1*x7337))+(((-1.0)*x7323*x7324))+(((-1.0)*x7323*x7328))+(((-1.0)*py))+((x7328*x7329))+((x7318*x7326))+((x7324*x7329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7348=IKPowWithIntegerCheck(cj1,-1);
if(!x7348.valid){
continue;
}
IkReal x7340=x7348.value;
IkReal x7341=(cj1*sj5);
IkReal x7342=((1.0)*cj6);
IkReal x7343=(r00*sj2);
IkReal x7344=(cj4*cj5);
IkReal x7345=((1.0)*sj6);
IkReal x7346=(r01*sj4*sj6);
IkReal x7347=((1.0)*cj4*r02*sj5);
CheckValue<IkReal> x7349=IKPowWithIntegerCheck(cj2,-1);
if(!x7349.valid){
continue;
}
CheckValue<IkReal> x7350=IKPowWithIntegerCheck(sj1,-1);
if(!x7350.valid){
continue;
}
if( IKabs((x7340*(x7349.value)*(x7350.value)*(((((-1.0)*x7343*x7344*x7345))+((sj2*x7346))+((cj6*r11*x7341))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*r01*sj2*x7342*x7344))+((r10*sj6*x7341))+(((-1.0)*sj4*x7342*x7343))+(((-1.0)*sj2*x7347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7340*((x7346+(((-1.0)*r00*sj4*x7342))+(((-1.0)*r00*x7344*x7345))+(((-1.0)*x7347))+(((-1.0)*r01*x7342*x7344)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7340*(x7349.value)*(x7350.value)*(((((-1.0)*x7343*x7344*x7345))+((sj2*x7346))+((cj6*r11*x7341))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*r01*sj2*x7342*x7344))+((r10*sj6*x7341))+(((-1.0)*sj4*x7342*x7343))+(((-1.0)*sj2*x7347))))))+IKsqr((x7340*((x7346+(((-1.0)*r00*sj4*x7342))+(((-1.0)*r00*x7344*x7345))+(((-1.0)*x7347))+(((-1.0)*r01*x7342*x7344))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x7340*(x7349.value)*(x7350.value)*(((((-1.0)*x7343*x7344*x7345))+((sj2*x7346))+((cj6*r11*x7341))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*r01*sj2*x7342*x7344))+((r10*sj6*x7341))+(((-1.0)*sj4*x7342*x7343))+(((-1.0)*sj2*x7347))))), (x7340*((x7346+(((-1.0)*r00*sj4*x7342))+(((-1.0)*r00*x7344*x7345))+(((-1.0)*x7347))+(((-1.0)*r01*x7342*x7344))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7351=IKsin(j0);
IkReal x7352=IKcos(j0);
IkReal x7353=((1.0)*cj5);
IkReal x7354=(cj6*sj4);
IkReal x7355=((0.37429)*sj5);
IkReal x7356=(r10*sj6);
IkReal x7357=((0.36442)*cj1);
IkReal x7358=((0.069)*sj2);
IkReal x7359=(cj6*r01);
IkReal x7360=(r00*sj6);
IkReal x7361=(cj6*r11);
IkReal x7362=((1.0)*sj1);
IkReal x7363=((0.01)*cj5);
IkReal x7364=((1.0)*cj1);
IkReal x7365=(r12*sj5);
IkReal x7366=(cj4*cj6);
IkReal x7367=((0.37429)*cj5);
IkReal x7368=((1.0)*cj4);
IkReal x7369=(r02*sj5);
IkReal x7370=(r01*sj6);
IkReal x7371=(r11*sj6);
IkReal x7372=(cj2*x7352);
IkReal x7373=((0.069)*x7351);
IkReal x7374=((1.0)*sj4*sj5);
IkReal x7375=(sj2*x7352);
IkReal x7376=((1.0)*x7351);
evalcond[0]=(x7375+(((-1.0)*cj2*x7351*x7362))+(((-1.0)*r12*x7353))+((sj5*x7356))+((sj5*x7361)));
evalcond[1]=((((-1.0)*sj2*x7376))+(((-1.0)*x7362*x7372))+((sj5*x7359))+(((-1.0)*r02*x7353))+((sj5*x7360)));
evalcond[2]=((((-1.0)*cj4*x7353*x7359))+(((-1.0)*x7368*x7369))+(((-1.0)*cj4*x7353*x7360))+(((-1.0)*r00*x7354))+((sj4*x7370))+(((-1.0)*x7352*x7364)));
evalcond[3]=((((-1.0)*cj4*x7353*x7356))+(((-1.0)*x7351*x7364))+(((-1.0)*x7365*x7368))+(((-1.0)*r10*x7354))+(((-1.0)*cj4*x7353*x7361))+((sj4*x7371)));
evalcond[4]=(x7372+(((-1.0)*sj4*x7365))+((sj1*sj2*x7351))+(((-1.0)*sj4*x7353*x7356))+(((-1.0)*x7368*x7371))+(((-1.0)*r11*x7353*x7354))+((r10*x7366)));
evalcond[5]=(((r00*x7366))+(((-1.0)*sj4*x7353*x7360))+(((-1.0)*sj4*x7369))+(((-1.0)*r01*x7353*x7354))+((sj1*x7375))+(((-1.0)*cj2*x7376))+(((-1.0)*x7368*x7370)));
evalcond[6]=((((-1.0)*x7351*x7358))+(((0.069)*x7352))+((x7352*x7357))+((x7359*x7363))+(((-0.069)*sj1*x7372))+(((-1.0)*px))+(((0.01)*x7369))+((x7360*x7363))+(((-1.0)*x7355*x7359))+((r02*x7367))+(((-1.0)*x7355*x7360)));
evalcond[7]=(((r12*x7367))+x7373+((x7352*x7358))+(((-1.0)*cj2*sj1*x7373))+(((-1.0)*py))+(((0.01)*x7365))+(((-1.0)*x7355*x7356))+((x7361*x7363))+((x7356*x7363))+((x7351*x7357))+(((-1.0)*x7355*x7361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7388=IKPowWithIntegerCheck(cj1,-1);
if(!x7388.valid){
continue;
}
IkReal x7377=x7388.value;
IkReal x7378=(r02*sj5);
IkReal x7379=((1.0)*sj4);
IkReal x7380=(cj2*sj1);
IkReal x7381=(r01*sj6);
IkReal x7382=((1.0)*cj4);
IkReal x7383=(r00*sj6);
IkReal x7384=(cj1*sj5);
IkReal x7385=(cj6*r00);
IkReal x7386=(cj4*x7380);
IkReal x7387=(cj5*cj6*r01);
CheckValue<IkReal> x7389=IKPowWithIntegerCheck(sj2,-1);
if(!x7389.valid){
continue;
}
if( IKabs((x7377*(x7389.value)*((((x7386*x7387))+(((-1.0)*cj1*cj5*r02))+((x7378*x7386))+(((-1.0)*x7379*x7380*x7381))+((sj4*x7380*x7385))+((cj5*x7383*x7386))+((x7383*x7384))+((cj6*r01*x7384)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7377*(((((-1.0)*x7378*x7382))+(((-1.0)*cj5*x7382*x7383))+(((-1.0)*x7379*x7385))+((sj4*x7381))+(((-1.0)*x7382*x7387)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7377*(x7389.value)*((((x7386*x7387))+(((-1.0)*cj1*cj5*r02))+((x7378*x7386))+(((-1.0)*x7379*x7380*x7381))+((sj4*x7380*x7385))+((cj5*x7383*x7386))+((x7383*x7384))+((cj6*r01*x7384))))))+IKsqr((x7377*(((((-1.0)*x7378*x7382))+(((-1.0)*cj5*x7382*x7383))+(((-1.0)*x7379*x7385))+((sj4*x7381))+(((-1.0)*x7382*x7387))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x7377*(x7389.value)*((((x7386*x7387))+(((-1.0)*cj1*cj5*r02))+((x7378*x7386))+(((-1.0)*x7379*x7380*x7381))+((sj4*x7380*x7385))+((cj5*x7383*x7386))+((x7383*x7384))+((cj6*r01*x7384))))), (x7377*(((((-1.0)*x7378*x7382))+(((-1.0)*cj5*x7382*x7383))+(((-1.0)*x7379*x7385))+((sj4*x7381))+(((-1.0)*x7382*x7387))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7390=IKsin(j0);
IkReal x7391=IKcos(j0);
IkReal x7392=((1.0)*cj5);
IkReal x7393=(cj6*sj4);
IkReal x7394=((0.37429)*sj5);
IkReal x7395=(r10*sj6);
IkReal x7396=((0.36442)*cj1);
IkReal x7397=((0.069)*sj2);
IkReal x7398=(cj6*r01);
IkReal x7399=(r00*sj6);
IkReal x7400=(cj6*r11);
IkReal x7401=((1.0)*sj1);
IkReal x7402=((0.01)*cj5);
IkReal x7403=((1.0)*cj1);
IkReal x7404=(r12*sj5);
IkReal x7405=(cj4*cj6);
IkReal x7406=((0.37429)*cj5);
IkReal x7407=((1.0)*cj4);
IkReal x7408=(r02*sj5);
IkReal x7409=(r01*sj6);
IkReal x7410=(r11*sj6);
IkReal x7411=(cj2*x7391);
IkReal x7412=((0.069)*x7390);
IkReal x7413=((1.0)*sj4*sj5);
IkReal x7414=(sj2*x7391);
IkReal x7415=((1.0)*x7390);
evalcond[0]=((((-1.0)*r12*x7392))+((sj5*x7395))+(((-1.0)*cj2*x7390*x7401))+((sj5*x7400))+x7414);
evalcond[1]=((((-1.0)*r02*x7392))+(((-1.0)*sj2*x7415))+((sj5*x7399))+((sj5*x7398))+(((-1.0)*x7401*x7411)));
evalcond[2]=((((-1.0)*cj4*x7392*x7398))+(((-1.0)*cj4*x7392*x7399))+((sj4*x7409))+(((-1.0)*x7407*x7408))+(((-1.0)*r00*x7393))+(((-1.0)*x7391*x7403)));
evalcond[3]=((((-1.0)*cj4*x7392*x7395))+((sj4*x7410))+(((-1.0)*cj4*x7392*x7400))+(((-1.0)*r10*x7393))+(((-1.0)*x7404*x7407))+(((-1.0)*x7390*x7403)));
evalcond[4]=((((-1.0)*r11*x7392*x7393))+(((-1.0)*sj4*x7392*x7395))+((sj1*sj2*x7390))+(((-1.0)*x7407*x7410))+(((-1.0)*sj4*x7404))+x7411+((r10*x7405)));
evalcond[5]=((((-1.0)*cj2*x7415))+(((-1.0)*sj4*x7392*x7399))+(((-1.0)*x7407*x7409))+((r00*x7405))+(((-1.0)*sj4*x7408))+(((-1.0)*r01*x7392*x7393))+((sj1*x7414)));
evalcond[6]=((((-1.0)*x7390*x7397))+((r02*x7406))+(((-1.0)*x7394*x7398))+(((-1.0)*x7394*x7399))+(((0.069)*x7391))+(((-0.069)*sj1*x7411))+((x7399*x7402))+(((-1.0)*px))+((x7398*x7402))+((x7391*x7396))+(((0.01)*x7408)));
evalcond[7]=((((-1.0)*x7394*x7400))+(((-1.0)*x7394*x7395))+((x7400*x7402))+(((-1.0)*py))+((x7391*x7397))+((x7390*x7396))+(((-1.0)*cj2*sj1*x7412))+x7412+((r12*x7406))+((x7395*x7402))+(((0.01)*x7404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7416=(r10*sj6);
IkReal x7417=(cj6*r11);
IkReal x7418=(sj2*sj5);
IkReal x7419=(cj6*r01);
IkReal x7420=(r00*sj6);
IkReal x7421=(cj5*sj2);
IkReal x7422=(cj2*sj1*sj5);
IkReal x7423=((1.0)*cj2*cj5*sj1);
CheckValue<IkReal> x7424=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x7424.valid){
continue;
}
CheckValue<IkReal> x7425 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7421))+((x7418*x7420))+(((-1.0)*r12*x7423))+((x7418*x7419))+((x7417*x7422))+((x7416*x7422)))),((((-1.0)*x7416*x7418))+((x7419*x7422))+(((-1.0)*x7417*x7418))+(((-1.0)*r02*x7423))+((x7420*x7422))+((r12*x7421))),IKFAST_ATAN2_MAGTHRESH);
if(!x7425.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7424.value)))+(x7425.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7426=IKsin(j0);
IkReal x7427=IKcos(j0);
IkReal x7428=((1.0)*cj5);
IkReal x7429=(cj6*sj4);
IkReal x7430=((0.37429)*sj5);
IkReal x7431=(r10*sj6);
IkReal x7432=((0.36442)*cj1);
IkReal x7433=((0.069)*sj2);
IkReal x7434=(cj6*r01);
IkReal x7435=(r00*sj6);
IkReal x7436=(cj6*r11);
IkReal x7437=((1.0)*sj1);
IkReal x7438=((0.01)*cj5);
IkReal x7439=((1.0)*cj1);
IkReal x7440=(r12*sj5);
IkReal x7441=(cj4*cj6);
IkReal x7442=((0.37429)*cj5);
IkReal x7443=((1.0)*cj4);
IkReal x7444=(r02*sj5);
IkReal x7445=(r01*sj6);
IkReal x7446=(r11*sj6);
IkReal x7447=(cj2*x7427);
IkReal x7448=((0.069)*x7426);
IkReal x7449=((1.0)*sj4*sj5);
IkReal x7450=(sj2*x7427);
IkReal x7451=((1.0)*x7426);
evalcond[0]=(((sj5*x7436))+((sj5*x7431))+(((-1.0)*r12*x7428))+x7450+(((-1.0)*cj2*x7426*x7437)));
evalcond[1]=(((sj5*x7434))+((sj5*x7435))+(((-1.0)*x7437*x7447))+(((-1.0)*sj2*x7451))+(((-1.0)*r02*x7428)));
evalcond[2]=(((sj4*x7445))+(((-1.0)*x7427*x7439))+(((-1.0)*cj4*x7428*x7434))+(((-1.0)*cj4*x7428*x7435))+(((-1.0)*r00*x7429))+(((-1.0)*x7443*x7444)));
evalcond[3]=((((-1.0)*x7440*x7443))+((sj4*x7446))+(((-1.0)*cj4*x7428*x7436))+(((-1.0)*cj4*x7428*x7431))+(((-1.0)*r10*x7429))+(((-1.0)*x7426*x7439)));
evalcond[4]=((((-1.0)*sj4*x7440))+((sj1*sj2*x7426))+(((-1.0)*sj4*x7428*x7431))+(((-1.0)*r11*x7428*x7429))+((r10*x7441))+x7447+(((-1.0)*x7443*x7446)));
evalcond[5]=((((-1.0)*sj4*x7444))+((sj1*x7450))+(((-1.0)*sj4*x7428*x7435))+(((-1.0)*cj2*x7451))+((r00*x7441))+(((-1.0)*r01*x7428*x7429))+(((-1.0)*x7443*x7445)));
evalcond[6]=((((-1.0)*x7430*x7435))+(((-1.0)*x7430*x7434))+(((-0.069)*sj1*x7447))+((x7435*x7438))+(((0.069)*x7427))+(((-1.0)*px))+((x7427*x7432))+(((0.01)*x7444))+((x7434*x7438))+(((-1.0)*x7426*x7433))+((r02*x7442)));
evalcond[7]=((((-1.0)*x7430*x7436))+(((-1.0)*x7430*x7431))+((r12*x7442))+((x7436*x7438))+((x7426*x7432))+(((-1.0)*py))+((x7427*x7433))+((x7431*x7438))+(((0.01)*x7440))+x7448+(((-1.0)*cj2*sj1*x7448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7452=(r10*sj6);
IkReal x7453=(cj6*r11);
IkReal x7454=(sj2*sj5);
IkReal x7455=(cj6*r01);
IkReal x7456=(r00*sj6);
IkReal x7457=(cj5*sj2);
IkReal x7458=(cj2*sj1*sj5);
IkReal x7459=((1.0)*cj2*cj5*sj1);
CheckValue<IkReal> x7460=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x7460.valid){
continue;
}
CheckValue<IkReal> x7461 = IKatan2WithCheck(IkReal((((x7454*x7456))+((x7454*x7455))+(((-1.0)*r02*x7457))+(((-1.0)*r12*x7459))+((x7452*x7458))+((x7453*x7458)))),(((r12*x7457))+((x7455*x7458))+(((-1.0)*x7452*x7454))+((x7456*x7458))+(((-1.0)*x7453*x7454))+(((-1.0)*r02*x7459))),IKFAST_ATAN2_MAGTHRESH);
if(!x7461.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7460.value)))+(x7461.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7462=IKsin(j0);
IkReal x7463=IKcos(j0);
IkReal x7464=(cj6*r11);
IkReal x7465=((0.01)*cj5);
IkReal x7466=(sj5*sj6);
IkReal x7467=((0.36442)*cj1);
IkReal x7468=(cj2*sj1);
IkReal x7469=(cj6*r01);
IkReal x7470=((0.37429)*sj5);
IkReal x7471=(cj5*r02);
IkReal x7472=((0.01)*sj5);
IkReal x7473=(cj5*r12);
IkReal x7474=((0.069)*x7462);
IkReal x7475=((0.069)*x7463);
IkReal x7476=((1.0)*x7462);
evalcond[0]=(((sj5*x7464))+((r10*x7466))+((sj2*x7463))+(((-1.0)*x7473))+(((-1.0)*x7468*x7476)));
evalcond[1]=(((sj5*x7469))+(((-1.0)*sj2*x7476))+(((-1.0)*x7463*x7468))+(((-1.0)*x7471))+((r00*x7466)));
evalcond[2]=((((-0.37429)*r00*x7466))+((r02*x7472))+((x7463*x7467))+(((-1.0)*sj2*x7474))+(((0.37429)*x7471))+(((-1.0)*px))+((x7465*x7469))+x7475+(((-1.0)*x7469*x7470))+(((-1.0)*x7468*x7475))+((r00*sj6*x7465)));
evalcond[3]=((((-1.0)*x7464*x7470))+(((0.37429)*x7473))+((x7464*x7465))+((r10*sj6*x7465))+(((-1.0)*py))+((x7462*x7467))+((sj2*x7475))+x7474+(((-1.0)*x7468*x7474))+(((-0.37429)*r10*x7466))+((r12*x7472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7477=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7477;
j4eval[1]=IKsign(x7477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7478=((1.0)*sj5);
IkReal x7479=((((-1.0)*cj6*r01*x7478))+(((-1.0)*r00*sj6*x7478))+((cj5*r02)));
j4eval[0]=x7479;
j4eval[1]=IKsign(x7479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7480=cj5*cj5;
IkReal x7481=cj6*cj6;
IkReal x7482=r20*r20;
IkReal x7483=r21*r21;
IkReal x7484=r22*r22;
IkReal x7485=(r22*sj5);
IkReal x7486=(cj6*r20);
IkReal x7487=(cj1*sj2);
IkReal x7488=(cj6*r21);
IkReal x7489=(cj5*sj1);
IkReal x7490=(r20*sj6);
IkReal x7491=(r21*sj6);
IkReal x7492=((2.0)*x7490);
IkReal x7493=((1.0)*x7480);
IkReal x7494=(x7481*x7482);
IkReal x7495=(x7481*x7483);
IkReal x7496=(((x7480*x7482))+((x7480*x7495))+(((-1.0)*x7495))+(((2.0)*cj5*x7485*x7488))+(((-2.0)*x7486*x7491))+((cj5*x7485*x7492))+(((2.0)*x7480*x7486*x7491))+(((-1.0)*x7493*x7494))+x7494+x7484+x7483+(((-1.0)*x7484*x7493)));
j4eval[0]=x7496;
j4eval[1]=((IKabs((((cj5*x7487*x7490))+((cj5*x7487*x7488))+(((-1.0)*sj1*x7491))+((sj1*x7486))+((x7485*x7487)))))+(IKabs(((((-1.0)*x7486*x7487))+((x7487*x7491))+((sj1*x7485))+((x7488*x7489))+((x7489*x7490))))));
j4eval[2]=IKsign(x7496);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7497=((1.0)*cj5);
IkReal x7498=((0.01)*cj5);
IkReal x7499=(cj6*r11);
IkReal x7500=(r20*sj6);
IkReal x7501=((0.01)*sj5);
IkReal x7502=(cj6*r01);
IkReal x7503=((0.37429)*cj5);
IkReal x7504=((0.37429)*sj5);
IkReal x7505=(cj6*r21);
IkReal x7506=(r10*sj5*sj6);
IkReal x7507=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.069)+(((-1.0)*x7500*x7504))+((x7498*x7505))+((x7498*x7500))+(((-1.0)*pz))+(((-1.0)*x7504*x7505))+((r22*x7501))+((r22*x7503)));
evalcond[2]=((((-1.0)*x7502*x7504))+(((-1.0)*r00*sj6*x7504))+((x7498*x7502))+((r02*x7501))+((r02*x7503))+(((-1.0)*px))+((r00*sj6*x7498))+(((0.43342)*cj0)));
evalcond[3]=((((-1.0)*x7499*x7504))+((r12*x7503))+((r12*x7501))+(((-1.0)*py))+(((0.43342)*sj0))+(((-1.0)*r10*sj6*x7504))+((r10*sj6*x7498))+((x7498*x7499)));
evalcond[4]=((-1.0)+((sj5*x7505))+((sj5*x7500))+(((-1.0)*r22*x7497)));
evalcond[5]=(((sj5*x7499))+x7506+(((-1.0)*r12*x7497)));
evalcond[6]=(((sj5*x7502))+x7507+(((-1.0)*r02*x7497)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7508=(cj0*sj6);
IkReal x7509=(cj0*cj6);
IkReal x7510=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x7510;
j4eval[1]=((IKabs((((cj5*r20*x7508))+((cj5*r21*x7509))+((cj0*r22*sj5)))))+(IKabs(((((-1.0)*r21*x7508))+((r20*x7509))))));
j4eval[2]=IKsign(x7510);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7511=(r21*sj0);
IkReal x7512=(r20*sj0);
IkReal x7513=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7513;
j4eval[1]=((IKabs((((cj5*cj6*x7511))+((r22*sj0*sj5))+((cj5*sj6*x7512)))))+(IKabs((((cj6*x7512))+(((-1.0)*sj6*x7511))))));
j4eval[2]=IKsign(x7513);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7514=cj6*cj6;
IkReal x7515=cj5*cj5;
IkReal x7516=(r02*r22);
IkReal x7517=(r22*sj5);
IkReal x7518=(r00*r20);
IkReal x7519=((1.0)*r21);
IkReal x7520=(r20*sj6);
IkReal x7521=(cj6*r01);
IkReal x7522=(cj0*cj5);
IkReal x7523=(r00*sj6);
IkReal x7524=((1.0)*cj5);
IkReal x7525=(cj6*r21);
IkReal x7526=(cj5*r02*sj5);
IkReal x7527=((1.0)*x7515);
IkReal x7528=(x7514*x7515);
IkReal x7529=(((x7515*x7516))+(((-1.0)*x7517*x7523*x7524))+((x7518*x7528))+(((-1.0)*r01*x7519*x7528))+((x7520*x7521))+(((-1.0)*x7520*x7521*x7527))+(((-1.0)*r01*x7519))+(((-1.0)*r02*sj5*x7520*x7524))+((r01*r21*x7514))+(((-1.0)*x7517*x7521*x7524))+(((-1.0)*x7518*x7527))+(((-1.0)*cj6*x7519*x7526))+(((-1.0)*x7516))+((x7523*x7525))+(((-1.0)*cj6*x7515*x7519*x7523))+(((-1.0)*x7514*x7518)));
j4eval[0]=x7529;
j4eval[1]=((IKabs((((x7520*x7522))+((cj0*x7517))+((x7522*x7525)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x7519))))));
j4eval[2]=IKsign(x7529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7530=((1.0)*cj5);
IkReal x7531=((0.01)*cj5);
IkReal x7532=(cj6*r11);
IkReal x7533=(r20*sj6);
IkReal x7534=((0.01)*sj5);
IkReal x7535=(cj6*r01);
IkReal x7536=((0.37429)*cj5);
IkReal x7537=((0.37429)*sj5);
IkReal x7538=(cj6*r21);
IkReal x7539=(r10*sj5*sj6);
IkReal x7540=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x7534))+((r22*x7536))+((x7531*x7533))+((x7531*x7538))+(((-1.0)*x7533*x7537))+(((-1.0)*x7537*x7538))+(((-1.0)*pz)));
evalcond[2]=(((x7531*x7535))+(((-1.0)*px))+((r00*sj6*x7531))+(((-1.0)*x7535*x7537))+((r02*x7534))+((r02*x7536))+(((-1.0)*r00*sj6*x7537)));
evalcond[3]=((0.43342)+(((-1.0)*x7532*x7537))+((x7531*x7532))+(((-1.0)*py))+((r12*x7534))+((r12*x7536))+((r10*sj6*x7531))+(((-1.0)*r10*sj6*x7537)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7530))+((sj5*x7538))+((sj5*x7533)));
evalcond[5]=((((-1.0)*r12*x7530))+x7539+((sj5*x7532)));
evalcond[6]=(x7540+(((-1.0)*r02*x7530))+((sj5*x7535)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7541=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7541;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x7541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7542=((1.0)*sj5);
IkReal x7543=(((cj5*r22))+(((-1.0)*cj6*r21*x7542))+(((-1.0)*r20*sj6*x7542)));
j4eval[0]=x7543;
j4eval[1]=IKsign(x7543);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7544=cj6*cj6;
IkReal x7545=cj5*cj5;
IkReal x7546=r10*r10;
IkReal x7547=r11*r11;
IkReal x7548=r12*r12;
IkReal x7549=(r10*sj6);
IkReal x7550=(r12*sj5);
IkReal x7551=((2.0)*cj6*r11);
IkReal x7552=((1.0)*x7546);
IkReal x7553=(x7544*x7547);
IkReal x7554=(((x7545*x7548))+(((-1.0)*x7545*x7553))+(((-1.0)*x7544*x7552))+((x7549*x7551))+(((-1.0)*cj5*x7550*x7551))+(((-1.0)*x7547))+(((-1.0)*x7548))+(((-1.0)*x7545*x7549*x7551))+((x7544*x7545*x7546))+x7553+(((-1.0)*x7545*x7552))+(((-2.0)*cj5*x7549*x7550)));
j4eval[0]=x7554;
j4eval[1]=((IKabs((((cj5*x7549))+((cj5*cj6*r11))+x7550)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7555=cj6*cj6;
IkReal x7556=cj5*cj5;
IkReal x7557=r10*r10;
IkReal x7558=r11*r11;
IkReal x7559=r12*r12;
IkReal x7560=(r10*sj6);
IkReal x7561=(r12*sj5);
IkReal x7562=((2.0)*cj6*r11);
IkReal x7563=(x7555*x7558);
IkReal x7564=(x7556*x7557);
CheckValue<IkReal> x7565=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*x7560*x7561))+((x7556*x7559))+((x7560*x7562))+(((-1.0)*x7558))+(((-1.0)*x7559))+(((-1.0)*x7556*x7563))+(((-1.0)*cj5*x7561*x7562))+(((-1.0)*x7556*x7560*x7562))+(((-1.0)*x7564))+x7563+(((-1.0)*x7555*x7557))+((x7555*x7564)))),-1);
if(!x7565.valid){
continue;
}
CheckValue<IkReal> x7566 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*cj6*r11))+x7561+((cj5*x7560))),IKFAST_ATAN2_MAGTHRESH);
if(!x7566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7565.value)))+(x7566.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7567=IKsin(j4);
IkReal x7568=IKcos(j4);
IkReal x7569=(cj5*cj6);
IkReal x7570=(r11*sj6);
IkReal x7571=(cj6*r20);
IkReal x7572=(cj6*r10);
IkReal x7573=(cj5*sj6);
IkReal x7574=(r01*sj6);
IkReal x7575=(r21*sj6);
IkReal x7576=(cj6*r00);
IkReal x7577=((1.0)*x7568);
IkReal x7578=((1.0)*x7567);
IkReal x7579=(sj5*x7578);
evalcond[0]=((((-1.0)*r21*x7569*x7578))+((x7568*x7571))+(((-1.0)*x7575*x7577))+(((-1.0)*r22*x7579))+(((-1.0)*r20*x7573*x7578)));
evalcond[1]=((((-1.0)*r11*x7569*x7578))+((x7568*x7572))+(((-1.0)*r10*x7573*x7578))+(((-1.0)*r12*x7579))+(((-1.0)*x7570*x7577)));
evalcond[2]=((((-1.0)*x7571*x7578))+(((-1.0)*r22*sj5*x7577))+(((-1.0)*r21*x7569*x7577))+((x7567*x7575))+(((-1.0)*r20*x7573*x7577)));
evalcond[3]=((((-1.0)*r02*sj5*x7577))+(((-1.0)*x7576*x7578))+(((-1.0)*r00*x7573*x7577))+((x7567*x7574))+(((-1.0)*r01*x7569*x7577)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x7573*x7578))+(((-1.0)*x7574*x7577))+((x7568*x7576))+(((-1.0)*r02*x7579))+(((-1.0)*r01*x7569*x7578)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x7577))+(((-1.0)*r11*x7569*x7577))+((x7567*x7570))+(((-1.0)*r10*x7573*x7577))+(((-1.0)*x7572*x7578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7580=((1.0)*sj5);
CheckValue<IkReal> x7581 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x7581.valid){
continue;
}
CheckValue<IkReal> x7582=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x7580))+(((-1.0)*r20*sj6*x7580)))),-1);
if(!x7582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7581.value)+(((1.5707963267949)*(x7582.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7583=IKsin(j4);
IkReal x7584=IKcos(j4);
IkReal x7585=(cj5*cj6);
IkReal x7586=(r11*sj6);
IkReal x7587=(cj6*r20);
IkReal x7588=(cj6*r10);
IkReal x7589=(cj5*sj6);
IkReal x7590=(r01*sj6);
IkReal x7591=(r21*sj6);
IkReal x7592=(cj6*r00);
IkReal x7593=((1.0)*x7584);
IkReal x7594=((1.0)*x7583);
IkReal x7595=(sj5*x7594);
evalcond[0]=((((-1.0)*x7591*x7593))+(((-1.0)*r21*x7585*x7594))+(((-1.0)*r22*x7595))+((x7584*x7587))+(((-1.0)*r20*x7589*x7594)));
evalcond[1]=((((-1.0)*r10*x7589*x7594))+(((-1.0)*x7586*x7593))+(((-1.0)*r12*x7595))+(((-1.0)*r11*x7585*x7594))+((x7584*x7588)));
evalcond[2]=((((-1.0)*r21*x7585*x7593))+(((-1.0)*x7587*x7594))+(((-1.0)*r22*sj5*x7593))+(((-1.0)*r20*x7589*x7593))+((x7583*x7591)));
evalcond[3]=((((-1.0)*x7592*x7594))+(((-1.0)*r02*sj5*x7593))+(((-1.0)*r01*x7585*x7593))+(((-1.0)*r00*x7589*x7593))+((x7583*x7590)));
evalcond[4]=((-1.0)+(((-1.0)*x7590*x7593))+((x7584*x7592))+(((-1.0)*r02*x7595))+(((-1.0)*r01*x7585*x7594))+(((-1.0)*r00*x7589*x7594)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x7593))+(((-1.0)*r10*x7589*x7593))+((x7583*x7586))+(((-1.0)*r11*x7585*x7593))+(((-1.0)*x7588*x7594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7596 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x7596.valid){
continue;
}
CheckValue<IkReal> x7597=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7597.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7596.value)+(((1.5707963267949)*(x7597.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7598=IKsin(j4);
IkReal x7599=IKcos(j4);
IkReal x7600=(cj5*cj6);
IkReal x7601=(r11*sj6);
IkReal x7602=(cj6*r20);
IkReal x7603=(cj6*r10);
IkReal x7604=(cj5*sj6);
IkReal x7605=(r01*sj6);
IkReal x7606=(r21*sj6);
IkReal x7607=(cj6*r00);
IkReal x7608=((1.0)*x7599);
IkReal x7609=((1.0)*x7598);
IkReal x7610=(sj5*x7609);
evalcond[0]=(((x7599*x7602))+(((-1.0)*r20*x7604*x7609))+(((-1.0)*x7606*x7608))+(((-1.0)*r22*x7610))+(((-1.0)*r21*x7600*x7609)));
evalcond[1]=(((x7599*x7603))+(((-1.0)*r12*x7610))+(((-1.0)*x7601*x7608))+(((-1.0)*r10*x7604*x7609))+(((-1.0)*r11*x7600*x7609)));
evalcond[2]=((((-1.0)*r20*x7604*x7608))+((x7598*x7606))+(((-1.0)*r21*x7600*x7608))+(((-1.0)*r22*sj5*x7608))+(((-1.0)*x7602*x7609)));
evalcond[3]=((((-1.0)*r01*x7600*x7608))+(((-1.0)*x7607*x7609))+((x7598*x7605))+(((-1.0)*r02*sj5*x7608))+(((-1.0)*r00*x7604*x7608)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x7600*x7609))+((x7599*x7607))+(((-1.0)*x7605*x7608))+(((-1.0)*r02*x7610))+(((-1.0)*r00*x7604*x7609)));
evalcond[5]=((-1.0)+((x7598*x7601))+(((-1.0)*r12*sj5*x7608))+(((-1.0)*x7603*x7609))+(((-1.0)*r10*x7604*x7608))+(((-1.0)*r11*x7600*x7608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7611=((1.0)*cj5);
IkReal x7612=((0.01)*cj5);
IkReal x7613=(cj6*r11);
IkReal x7614=(r20*sj6);
IkReal x7615=((0.01)*sj5);
IkReal x7616=(cj6*r01);
IkReal x7617=((0.37429)*cj5);
IkReal x7618=((0.37429)*sj5);
IkReal x7619=(cj6*r21);
IkReal x7620=(r10*sj5*sj6);
IkReal x7621=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x7612*x7619))+((x7612*x7614))+(((-1.0)*x7618*x7619))+(((-1.0)*x7614*x7618))+(((-1.0)*pz))+((r22*x7615))+((r22*x7617)));
evalcond[2]=(((x7612*x7616))+(((-1.0)*px))+((r00*sj6*x7612))+((r02*x7617))+((r02*x7615))+(((-1.0)*r00*sj6*x7618))+(((-1.0)*x7616*x7618)));
evalcond[3]=((-0.43342)+((x7612*x7613))+((r12*x7615))+((r12*x7617))+(((-1.0)*py))+(((-1.0)*x7613*x7618))+(((-1.0)*r10*sj6*x7618))+((r10*sj6*x7612)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7611))+((sj5*x7619))+((sj5*x7614)));
evalcond[5]=((((-1.0)*r12*x7611))+((sj5*x7613))+x7620);
evalcond[6]=(((sj5*x7616))+(((-1.0)*r02*x7611))+x7621);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7622=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7622;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7623=((1.0)*sj6);
IkReal x7624=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x7623)));
j4eval[0]=x7624;
j4eval[1]=IKsign(x7624);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x7623))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7625=r11*r11;
IkReal x7626=cj5*cj5;
IkReal x7627=cj6*cj6;
IkReal x7628=r10*r10;
IkReal x7629=r12*r12;
IkReal x7630=(r12*sj5);
IkReal x7631=(cj6*r10);
IkReal x7632=((1.0)*x7627);
IkReal x7633=(cj5*cj6*r11);
IkReal x7634=(cj5*r10*sj6);
IkReal x7635=((2.0)*r11*sj6);
IkReal x7636=(x7626*x7628);
IkReal x7637=(((x7626*x7631*x7635))+((x7627*x7628))+(((-1.0)*x7626*x7629))+(((2.0)*x7630*x7634))+(((2.0)*x7630*x7633))+(((-1.0)*x7631*x7635))+(((-1.0)*x7632*x7636))+(((-1.0)*x7625*x7632))+((x7625*x7626*x7627))+x7636+x7625+x7629);
j4eval[0]=x7637;
j4eval[1]=IKsign(x7637);
j4eval[2]=((IKabs((x7633+x7630+x7634)))+(IKabs(((((-1.0)*r11*sj6))+x7631))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7638=r11*r11;
IkReal x7639=cj5*cj5;
IkReal x7640=cj6*cj6;
IkReal x7641=r10*r10;
IkReal x7642=r12*r12;
IkReal x7643=(r10*sj6);
IkReal x7644=(r12*sj5);
IkReal x7645=((1.0)*x7640);
IkReal x7646=(cj5*cj6*r11);
IkReal x7647=((2.0)*cj6*r11);
IkReal x7648=(x7639*x7641);
CheckValue<IkReal> x7649=IKPowWithIntegerCheck(IKsign((((x7638*x7639*x7640))+(((-1.0)*x7639*x7642))+((x7640*x7641))+(((-1.0)*x7645*x7648))+(((2.0)*x7644*x7646))+(((-1.0)*x7638*x7645))+((x7639*x7643*x7647))+(((-1.0)*x7643*x7647))+(((2.0)*cj5*x7643*x7644))+x7642+x7648+x7638)),-1);
if(!x7649.valid){
continue;
}
CheckValue<IkReal> x7650 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x7643))+x7646+x7644),IKFAST_ATAN2_MAGTHRESH);
if(!x7650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7649.value)))+(x7650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7651=IKsin(j4);
IkReal x7652=IKcos(j4);
IkReal x7653=(cj5*cj6);
IkReal x7654=(r11*sj6);
IkReal x7655=(cj6*r20);
IkReal x7656=(cj6*r10);
IkReal x7657=(cj5*sj6);
IkReal x7658=(r01*sj6);
IkReal x7659=(r21*sj6);
IkReal x7660=(cj6*r00);
IkReal x7661=((1.0)*x7652);
IkReal x7662=((1.0)*x7651);
IkReal x7663=(sj5*x7662);
evalcond[0]=((((-1.0)*r22*x7663))+(((-1.0)*r21*x7653*x7662))+(((-1.0)*r20*x7657*x7662))+(((-1.0)*x7659*x7661))+((x7652*x7655)));
evalcond[1]=((((-1.0)*r12*x7663))+(((-1.0)*r11*x7653*x7662))+(((-1.0)*r10*x7657*x7662))+(((-1.0)*x7654*x7661))+((x7652*x7656)));
evalcond[2]=(((x7651*x7659))+(((-1.0)*r21*x7653*x7661))+(((-1.0)*r22*sj5*x7661))+(((-1.0)*r20*x7657*x7661))+(((-1.0)*x7655*x7662)));
evalcond[3]=((((-1.0)*r01*x7653*x7661))+((x7651*x7658))+(((-1.0)*r02*sj5*x7661))+(((-1.0)*x7660*x7662))+(((-1.0)*r00*x7657*x7661)));
evalcond[4]=((1.0)+(((-1.0)*r01*x7653*x7662))+(((-1.0)*r02*x7663))+(((-1.0)*r00*x7657*x7662))+(((-1.0)*x7658*x7661))+((x7652*x7660)));
evalcond[5]=((1.0)+((x7651*x7654))+(((-1.0)*r11*x7653*x7661))+(((-1.0)*r12*sj5*x7661))+(((-1.0)*r10*x7657*x7661))+(((-1.0)*x7656*x7662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7664=((1.0)*sj6);
CheckValue<IkReal> x7665=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x7664))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x7665.valid){
continue;
}
CheckValue<IkReal> x7666 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x7664)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x7666.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7665.value)))+(x7666.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7667=IKsin(j4);
IkReal x7668=IKcos(j4);
IkReal x7669=(cj5*cj6);
IkReal x7670=(r11*sj6);
IkReal x7671=(cj6*r20);
IkReal x7672=(cj6*r10);
IkReal x7673=(cj5*sj6);
IkReal x7674=(r01*sj6);
IkReal x7675=(r21*sj6);
IkReal x7676=(cj6*r00);
IkReal x7677=((1.0)*x7668);
IkReal x7678=((1.0)*x7667);
IkReal x7679=(sj5*x7678);
evalcond[0]=(((x7668*x7671))+(((-1.0)*r20*x7673*x7678))+(((-1.0)*r21*x7669*x7678))+(((-1.0)*x7675*x7677))+(((-1.0)*r22*x7679)));
evalcond[1]=(((x7668*x7672))+(((-1.0)*x7670*x7677))+(((-1.0)*r12*x7679))+(((-1.0)*r10*x7673*x7678))+(((-1.0)*r11*x7669*x7678)));
evalcond[2]=((((-1.0)*r22*sj5*x7677))+(((-1.0)*r20*x7673*x7677))+((x7667*x7675))+(((-1.0)*r21*x7669*x7677))+(((-1.0)*x7671*x7678)));
evalcond[3]=((((-1.0)*r00*x7673*x7677))+(((-1.0)*r02*sj5*x7677))+((x7667*x7674))+(((-1.0)*x7676*x7678))+(((-1.0)*r01*x7669*x7677)));
evalcond[4]=((1.0)+((x7668*x7676))+(((-1.0)*x7674*x7677))+(((-1.0)*r00*x7673*x7678))+(((-1.0)*r02*x7679))+(((-1.0)*r01*x7669*x7678)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x7677))+((x7667*x7670))+(((-1.0)*x7672*x7678))+(((-1.0)*r10*x7673*x7677))+(((-1.0)*r11*x7669*x7677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7680=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x7680.valid){
continue;
}
CheckValue<IkReal> x7681 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x7681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7680.value)))+(x7681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7682=IKsin(j4);
IkReal x7683=IKcos(j4);
IkReal x7684=(cj5*cj6);
IkReal x7685=(r11*sj6);
IkReal x7686=(cj6*r20);
IkReal x7687=(cj6*r10);
IkReal x7688=(cj5*sj6);
IkReal x7689=(r01*sj6);
IkReal x7690=(r21*sj6);
IkReal x7691=(cj6*r00);
IkReal x7692=((1.0)*x7683);
IkReal x7693=((1.0)*x7682);
IkReal x7694=(sj5*x7693);
evalcond[0]=(((x7683*x7686))+(((-1.0)*r22*x7694))+(((-1.0)*r21*x7684*x7693))+(((-1.0)*r20*x7688*x7693))+(((-1.0)*x7690*x7692)));
evalcond[1]=(((x7683*x7687))+(((-1.0)*r10*x7688*x7693))+(((-1.0)*r12*x7694))+(((-1.0)*x7685*x7692))+(((-1.0)*r11*x7684*x7693)));
evalcond[2]=(((x7682*x7690))+(((-1.0)*r22*sj5*x7692))+(((-1.0)*x7686*x7693))+(((-1.0)*r21*x7684*x7692))+(((-1.0)*r20*x7688*x7692)));
evalcond[3]=((((-1.0)*x7691*x7693))+(((-1.0)*r00*x7688*x7692))+(((-1.0)*r01*x7684*x7692))+(((-1.0)*r02*sj5*x7692))+((x7682*x7689)));
evalcond[4]=((1.0)+(((-1.0)*r00*x7688*x7693))+(((-1.0)*r02*x7694))+(((-1.0)*r01*x7684*x7693))+((x7683*x7691))+(((-1.0)*x7689*x7692)));
evalcond[5]=((1.0)+(((-1.0)*x7687*x7693))+(((-1.0)*r10*x7688*x7692))+(((-1.0)*r11*x7684*x7692))+(((-1.0)*r12*sj5*x7692))+((x7682*x7685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7695=((1.0)*cj5);
IkReal x7696=((0.01)*cj5);
IkReal x7697=(cj6*r11);
IkReal x7698=(r20*sj6);
IkReal x7699=((0.01)*sj5);
IkReal x7700=(cj6*r01);
IkReal x7701=((0.37429)*cj5);
IkReal x7702=((0.37429)*sj5);
IkReal x7703=(cj6*r21);
IkReal x7704=(r10*sj5*sj6);
IkReal x7705=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x7698*x7702))+((x7696*x7703))+(((-1.0)*x7702*x7703))+((x7696*x7698))+(((-1.0)*pz))+((r22*x7701))+((r22*x7699)));
evalcond[2]=((0.43342)+((r02*x7699))+(((-1.0)*r00*sj6*x7702))+((r00*sj6*x7696))+((r02*x7701))+((x7696*x7700))+(((-1.0)*px))+(((-1.0)*x7700*x7702)));
evalcond[3]=((((-1.0)*x7697*x7702))+((r12*x7701))+((r12*x7699))+((x7696*x7697))+(((-1.0)*py))+((r10*sj6*x7696))+(((-1.0)*r10*sj6*x7702)));
evalcond[4]=((-1.0)+((sj5*x7698))+(((-1.0)*r22*x7695))+((sj5*x7703)));
evalcond[5]=(((sj5*x7697))+(((-1.0)*r12*x7695))+x7704);
evalcond[6]=((((-1.0)*r02*x7695))+((sj5*x7700))+x7705);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7706=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x7706;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x7706);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7707=((1.0)*sj5);
IkReal x7708=(((cj5*r22))+(((-1.0)*r20*sj6*x7707))+(((-1.0)*cj6*r21*x7707)));
j4eval[0]=x7708;
j4eval[1]=IKsign(x7708);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7709=cj6*cj6;
IkReal x7710=cj5*cj5;
IkReal x7711=r00*r00;
IkReal x7712=r01*r01;
IkReal x7713=r02*r02;
IkReal x7714=(cj6*r00);
IkReal x7715=(cj5*cj6*r01);
IkReal x7716=((2.0)*r02*sj5);
IkReal x7717=((1.0)*x7709);
IkReal x7718=((2.0)*r01*sj6);
IkReal x7719=(cj5*r00*sj6);
IkReal x7720=(x7710*x7711);
IkReal x7721=((((-1.0)*x7711*x7717))+(((-1.0)*x7710*x7714*x7718))+(((-1.0)*x7712))+(((-1.0)*x7713))+((x7709*x7720))+((x7710*x7713))+((x7714*x7718))+(((-1.0)*x7720))+(((-1.0)*x7715*x7716))+(((-1.0)*x7716*x7719))+((x7709*x7712))+(((-1.0)*x7710*x7712*x7717)));
j4eval[0]=x7721;
j4eval[1]=((IKabs((((r02*sj5))+x7715+x7719)))+(IKabs(((((-1.0)*r01*sj6))+x7714))));
j4eval[2]=IKsign(x7721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7722=cj6*cj6;
IkReal x7723=cj5*cj5;
IkReal x7724=r00*r00;
IkReal x7725=r01*r01;
IkReal x7726=r02*r02;
IkReal x7727=(cj6*r00);
IkReal x7728=(cj5*cj6*r01);
IkReal x7729=((2.0)*r02*sj5);
IkReal x7730=((1.0)*x7722);
IkReal x7731=((2.0)*r01*sj6);
IkReal x7732=(cj5*r00*sj6);
IkReal x7733=(x7723*x7724);
CheckValue<IkReal> x7734=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7733))+((x7727*x7731))+(((-1.0)*x7724*x7730))+((x7722*x7725))+((x7723*x7726))+(((-1.0)*x7723*x7727*x7731))+(((-1.0)*x7723*x7725*x7730))+(((-1.0)*x7728*x7729))+(((-1.0)*x7725))+(((-1.0)*x7726))+(((-1.0)*x7729*x7732))+((x7722*x7733)))),-1);
if(!x7734.valid){
continue;
}
CheckValue<IkReal> x7735 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x7727)),(((r02*sj5))+x7732+x7728),IKFAST_ATAN2_MAGTHRESH);
if(!x7735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7734.value)))+(x7735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7736=IKsin(j4);
IkReal x7737=IKcos(j4);
IkReal x7738=(cj5*cj6);
IkReal x7739=(r11*sj6);
IkReal x7740=(cj6*r20);
IkReal x7741=(cj6*r10);
IkReal x7742=(cj5*sj6);
IkReal x7743=(r21*sj6);
IkReal x7744=(cj6*r00);
IkReal x7745=(r01*sj6);
IkReal x7746=((1.0)*x7737);
IkReal x7747=((1.0)*x7736);
IkReal x7748=(sj5*x7747);
evalcond[0]=((((-1.0)*r22*x7748))+((x7737*x7740))+(((-1.0)*x7743*x7746))+(((-1.0)*r20*x7742*x7747))+(((-1.0)*r21*x7738*x7747)));
evalcond[1]=((((-1.0)*r02*x7748))+((x7737*x7744))+(((-1.0)*r01*x7738*x7747))+(((-1.0)*r00*x7742*x7747))+(((-1.0)*x7745*x7746)));
evalcond[2]=((((-1.0)*x7740*x7747))+(((-1.0)*r22*sj5*x7746))+(((-1.0)*r20*x7742*x7746))+(((-1.0)*r21*x7738*x7746))+((x7736*x7743)));
evalcond[3]=((((-1.0)*x7741*x7747))+((x7736*x7739))+(((-1.0)*r11*x7738*x7746))+(((-1.0)*r10*x7742*x7746))+(((-1.0)*r12*sj5*x7746)));
evalcond[4]=((1.0)+((x7737*x7741))+(((-1.0)*x7739*x7746))+(((-1.0)*r12*x7748))+(((-1.0)*r11*x7738*x7747))+(((-1.0)*r10*x7742*x7747)));
evalcond[5]=((-1.0)+(((-1.0)*x7744*x7747))+(((-1.0)*r02*sj5*x7746))+(((-1.0)*r01*x7738*x7746))+(((-1.0)*r00*x7742*x7746))+((x7736*x7745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7749=((1.0)*sj5);
CheckValue<IkReal> x7750 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x7750.valid){
continue;
}
CheckValue<IkReal> x7751=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x7749))+(((-1.0)*cj6*r21*x7749)))),-1);
if(!x7751.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7750.value)+(((1.5707963267949)*(x7751.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7752=IKsin(j4);
IkReal x7753=IKcos(j4);
IkReal x7754=(cj5*cj6);
IkReal x7755=(r11*sj6);
IkReal x7756=(cj6*r20);
IkReal x7757=(cj6*r10);
IkReal x7758=(cj5*sj6);
IkReal x7759=(r21*sj6);
IkReal x7760=(cj6*r00);
IkReal x7761=(r01*sj6);
IkReal x7762=((1.0)*x7753);
IkReal x7763=((1.0)*x7752);
IkReal x7764=(sj5*x7763);
evalcond[0]=((((-1.0)*r20*x7758*x7763))+(((-1.0)*r22*x7764))+(((-1.0)*x7759*x7762))+((x7753*x7756))+(((-1.0)*r21*x7754*x7763)));
evalcond[1]=((((-1.0)*r02*x7764))+(((-1.0)*r01*x7754*x7763))+(((-1.0)*x7761*x7762))+((x7753*x7760))+(((-1.0)*r00*x7758*x7763)));
evalcond[2]=((((-1.0)*r20*x7758*x7762))+((x7752*x7759))+(((-1.0)*r22*sj5*x7762))+(((-1.0)*r21*x7754*x7762))+(((-1.0)*x7756*x7763)));
evalcond[3]=(((x7752*x7755))+(((-1.0)*x7757*x7763))+(((-1.0)*r12*sj5*x7762))+(((-1.0)*r10*x7758*x7762))+(((-1.0)*r11*x7754*x7762)));
evalcond[4]=((1.0)+(((-1.0)*x7755*x7762))+((x7753*x7757))+(((-1.0)*r10*x7758*x7763))+(((-1.0)*r12*x7764))+(((-1.0)*r11*x7754*x7763)));
evalcond[5]=((-1.0)+(((-1.0)*x7760*x7763))+(((-1.0)*r01*x7754*x7762))+((x7752*x7761))+(((-1.0)*r02*sj5*x7762))+(((-1.0)*r00*x7758*x7762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7765 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x7765.valid){
continue;
}
CheckValue<IkReal> x7766=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x7766.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7765.value)+(((1.5707963267949)*(x7766.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7767=IKsin(j4);
IkReal x7768=IKcos(j4);
IkReal x7769=(cj5*cj6);
IkReal x7770=(r11*sj6);
IkReal x7771=(cj6*r20);
IkReal x7772=(cj6*r10);
IkReal x7773=(cj5*sj6);
IkReal x7774=(r21*sj6);
IkReal x7775=(cj6*r00);
IkReal x7776=(r01*sj6);
IkReal x7777=((1.0)*x7768);
IkReal x7778=((1.0)*x7767);
IkReal x7779=(sj5*x7778);
evalcond[0]=((((-1.0)*r22*x7779))+((x7768*x7771))+(((-1.0)*r21*x7769*x7778))+(((-1.0)*r20*x7773*x7778))+(((-1.0)*x7774*x7777)));
evalcond[1]=((((-1.0)*r02*x7779))+(((-1.0)*x7776*x7777))+((x7768*x7775))+(((-1.0)*r00*x7773*x7778))+(((-1.0)*r01*x7769*x7778)));
evalcond[2]=((((-1.0)*x7771*x7778))+((x7767*x7774))+(((-1.0)*r22*sj5*x7777))+(((-1.0)*r21*x7769*x7777))+(((-1.0)*r20*x7773*x7777)));
evalcond[3]=((((-1.0)*r11*x7769*x7777))+((x7767*x7770))+(((-1.0)*x7772*x7778))+(((-1.0)*r10*x7773*x7777))+(((-1.0)*r12*sj5*x7777)));
evalcond[4]=((1.0)+(((-1.0)*r11*x7769*x7778))+(((-1.0)*r10*x7773*x7778))+((x7768*x7772))+(((-1.0)*x7770*x7777))+(((-1.0)*r12*x7779)));
evalcond[5]=((-1.0)+((x7767*x7776))+(((-1.0)*r02*sj5*x7777))+(((-1.0)*x7775*x7778))+(((-1.0)*r00*x7773*x7777))+(((-1.0)*r01*x7769*x7777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7780=((1.0)*cj5);
IkReal x7781=((0.01)*cj5);
IkReal x7782=(cj6*r11);
IkReal x7783=(r20*sj6);
IkReal x7784=((0.01)*sj5);
IkReal x7785=(cj6*r01);
IkReal x7786=((0.37429)*cj5);
IkReal x7787=((0.37429)*sj5);
IkReal x7788=(cj6*r21);
IkReal x7789=(r10*sj5*sj6);
IkReal x7790=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x7783*x7787))+((r22*x7786))+((r22*x7784))+((x7781*x7788))+((x7781*x7783))+(((-1.0)*x7787*x7788))+(((-1.0)*pz)));
evalcond[2]=((-0.43342)+(((-1.0)*x7785*x7787))+((x7781*x7785))+(((-1.0)*px))+(((-1.0)*r00*sj6*x7787))+((r02*x7784))+((r02*x7786))+((r00*sj6*x7781)));
evalcond[3]=((((-1.0)*x7782*x7787))+((r10*sj6*x7781))+((x7781*x7782))+(((-1.0)*r10*sj6*x7787))+(((-1.0)*py))+((r12*x7786))+((r12*x7784)));
evalcond[4]=((-1.0)+((sj5*x7788))+((sj5*x7783))+(((-1.0)*r22*x7780)));
evalcond[5]=(((sj5*x7782))+(((-1.0)*r12*x7780))+x7789);
evalcond[6]=(((sj5*x7785))+(((-1.0)*r02*x7780))+x7790);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7791=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7791;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x7791);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7792=((1.0)*sj6);
IkReal x7793=((((-1.0)*r00*sj5*x7792))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x7793;
j4eval[1]=IKsign(x7793);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x7792))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7794=cj6*cj6;
IkReal x7795=r01*r01;
IkReal x7796=cj5*cj5;
IkReal x7797=r00*r00;
IkReal x7798=r02*r02;
IkReal x7799=(cj6*r00);
IkReal x7800=(r02*sj5);
IkReal x7801=(cj5*cj6*r01);
IkReal x7802=((2.0)*r01*sj6);
IkReal x7803=(cj5*r00*sj6);
IkReal x7804=((1.0)*x7796);
IkReal x7805=(x7794*x7797);
IkReal x7806=(x7794*x7795);
IkReal x7807=((((2.0)*x7800*x7801))+(((2.0)*x7800*x7803))+(((-1.0)*x7806))+((x7796*x7799*x7802))+((x7796*x7806))+x7805+(((-1.0)*x7798*x7804))+((x7796*x7797))+(((-1.0)*x7799*x7802))+x7798+x7795+(((-1.0)*x7804*x7805)));
j4eval[0]=x7807;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x7799)))+(IKabs((x7801+x7800+x7803))));
j4eval[2]=IKsign(x7807);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7808=cj6*cj6;
IkReal x7809=r01*r01;
IkReal x7810=cj5*cj5;
IkReal x7811=r00*r00;
IkReal x7812=r02*r02;
IkReal x7813=(cj6*r00);
IkReal x7814=((2.0)*r01);
IkReal x7815=(cj5*cj6);
IkReal x7816=(r02*sj5);
IkReal x7817=(cj5*r00*sj6);
IkReal x7818=(x7810*x7811);
IkReal x7819=(x7808*x7809);
CheckValue<IkReal> x7820=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7819))+(((-1.0)*x7808*x7818))+((x7810*x7819))+x7809+x7812+x7818+(((-1.0)*x7810*x7812))+((x7808*x7811))+(((-1.0)*sj6*x7813*x7814))+(((2.0)*x7816*x7817))+((x7814*x7815*x7816))+((sj6*x7810*x7813*x7814)))),-1);
if(!x7820.valid){
continue;
}
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x7813)),(x7816+x7817+((r01*x7815))),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7820.value)))+(x7821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7822=IKsin(j4);
IkReal x7823=IKcos(j4);
IkReal x7824=(cj5*cj6);
IkReal x7825=(r11*sj6);
IkReal x7826=(cj6*r20);
IkReal x7827=(cj6*r10);
IkReal x7828=(cj5*sj6);
IkReal x7829=(r21*sj6);
IkReal x7830=(cj6*r00);
IkReal x7831=(r01*sj6);
IkReal x7832=((1.0)*x7823);
IkReal x7833=((1.0)*x7822);
IkReal x7834=(sj5*x7833);
evalcond[0]=((((-1.0)*x7829*x7832))+(((-1.0)*r22*x7834))+((x7823*x7826))+(((-1.0)*r20*x7828*x7833))+(((-1.0)*r21*x7824*x7833)));
evalcond[1]=((((-1.0)*r01*x7824*x7833))+(((-1.0)*x7831*x7832))+((x7823*x7830))+(((-1.0)*r02*x7834))+(((-1.0)*r00*x7828*x7833)));
evalcond[2]=((((-1.0)*r22*sj5*x7832))+((x7822*x7829))+(((-1.0)*r20*x7828*x7832))+(((-1.0)*r21*x7824*x7832))+(((-1.0)*x7826*x7833)));
evalcond[3]=((((-1.0)*r11*x7824*x7832))+(((-1.0)*r10*x7828*x7832))+((x7822*x7825))+(((-1.0)*r12*sj5*x7832))+(((-1.0)*x7827*x7833)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x7824*x7833))+(((-1.0)*r10*x7828*x7833))+((x7823*x7827))+(((-1.0)*r12*x7834))+(((-1.0)*x7825*x7832)));
evalcond[5]=((1.0)+(((-1.0)*r01*x7824*x7832))+((x7822*x7831))+(((-1.0)*r02*sj5*x7832))+(((-1.0)*x7830*x7833))+(((-1.0)*r00*x7828*x7832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7835=((1.0)*sj6);
CheckValue<IkReal> x7836 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7835))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x7836.valid){
continue;
}
CheckValue<IkReal> x7837=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x7835))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x7837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7836.value)+(((1.5707963267949)*(x7837.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7838=IKsin(j4);
IkReal x7839=IKcos(j4);
IkReal x7840=(cj5*cj6);
IkReal x7841=(r11*sj6);
IkReal x7842=(cj6*r20);
IkReal x7843=(cj6*r10);
IkReal x7844=(cj5*sj6);
IkReal x7845=(r21*sj6);
IkReal x7846=(cj6*r00);
IkReal x7847=(r01*sj6);
IkReal x7848=((1.0)*x7839);
IkReal x7849=((1.0)*x7838);
IkReal x7850=(sj5*x7849);
evalcond[0]=((((-1.0)*r20*x7844*x7849))+(((-1.0)*r21*x7840*x7849))+(((-1.0)*x7845*x7848))+((x7839*x7842))+(((-1.0)*r22*x7850)));
evalcond[1]=(((x7839*x7846))+(((-1.0)*x7847*x7848))+(((-1.0)*r02*x7850))+(((-1.0)*r01*x7840*x7849))+(((-1.0)*r00*x7844*x7849)));
evalcond[2]=((((-1.0)*x7842*x7849))+(((-1.0)*r20*x7844*x7848))+(((-1.0)*r21*x7840*x7848))+((x7838*x7845))+(((-1.0)*r22*sj5*x7848)));
evalcond[3]=((((-1.0)*r10*x7844*x7848))+(((-1.0)*x7843*x7849))+((x7838*x7841))+(((-1.0)*r12*sj5*x7848))+(((-1.0)*r11*x7840*x7848)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x7844*x7849))+((x7839*x7843))+(((-1.0)*x7841*x7848))+(((-1.0)*r12*x7850))+(((-1.0)*r11*x7840*x7849)));
evalcond[5]=((1.0)+((x7838*x7847))+(((-1.0)*r02*sj5*x7848))+(((-1.0)*x7846*x7849))+(((-1.0)*r01*x7840*x7848))+(((-1.0)*r00*x7844*x7848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7851=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x7851.valid){
continue;
}
CheckValue<IkReal> x7852 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x7852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7851.value)))+(x7852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7853=IKsin(j4);
IkReal x7854=IKcos(j4);
IkReal x7855=(cj5*cj6);
IkReal x7856=(r11*sj6);
IkReal x7857=(cj6*r20);
IkReal x7858=(cj6*r10);
IkReal x7859=(cj5*sj6);
IkReal x7860=(r21*sj6);
IkReal x7861=(cj6*r00);
IkReal x7862=(r01*sj6);
IkReal x7863=((1.0)*x7854);
IkReal x7864=((1.0)*x7853);
IkReal x7865=(sj5*x7864);
evalcond[0]=((((-1.0)*r20*x7859*x7864))+(((-1.0)*r21*x7855*x7864))+((x7854*x7857))+(((-1.0)*x7860*x7863))+(((-1.0)*r22*x7865)));
evalcond[1]=((((-1.0)*x7862*x7863))+(((-1.0)*r00*x7859*x7864))+(((-1.0)*r01*x7855*x7864))+(((-1.0)*r02*x7865))+((x7854*x7861)));
evalcond[2]=(((x7853*x7860))+(((-1.0)*r20*x7859*x7863))+(((-1.0)*r21*x7855*x7863))+(((-1.0)*x7857*x7864))+(((-1.0)*r22*sj5*x7863)));
evalcond[3]=((((-1.0)*r10*x7859*x7863))+(((-1.0)*x7858*x7864))+(((-1.0)*r12*sj5*x7863))+((x7853*x7856))+(((-1.0)*r11*x7855*x7863)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x7859*x7864))+(((-1.0)*r12*x7865))+(((-1.0)*x7856*x7863))+(((-1.0)*r11*x7855*x7864))+((x7854*x7858)));
evalcond[5]=((1.0)+((x7853*x7862))+(((-1.0)*r00*x7859*x7863))+(((-1.0)*r01*x7855*x7863))+(((-1.0)*r02*sj5*x7863))+(((-1.0)*x7861*x7864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7866=cj6*cj6;
IkReal x7867=cj5*cj5;
IkReal x7868=(r22*sj5);
IkReal x7869=(cj0*r20);
IkReal x7870=((1.0)*r21);
IkReal x7871=(cj5*sj6);
IkReal x7872=(r02*r22);
IkReal x7873=(cj5*cj6);
IkReal x7874=(r02*sj5);
IkReal x7875=(cj6*sj6);
IkReal x7876=((1.0)*r20);
IkReal x7877=(r01*x7870);
IkReal x7878=(r00*r20*x7867);
CheckValue<IkReal> x7879 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*sj6*x7870))+((cj6*x7869)))),(((cj0*x7868))+((x7869*x7871))+((cj0*r21*x7873))),IKFAST_ATAN2_MAGTHRESH);
if(!x7879.valid){
continue;
}
CheckValue<IkReal> x7880=IKPowWithIntegerCheck(IKsign((((x7866*x7878))+(((-1.0)*x7871*x7874*x7876))+(((-1.0)*r01*x7868*x7873))+(((-1.0)*r01*x7867*x7875*x7876))+(((-1.0)*x7866*x7867*x7877))+(((-1.0)*x7872))+((r01*r20*x7875))+((r00*r21*x7875))+(((-1.0)*x7877))+(((-1.0)*r00*x7867*x7876))+(((-1.0)*x7870*x7873*x7874))+(((-1.0)*r00*x7866*x7876))+((r01*r21*x7866))+(((-1.0)*r00*x7868*x7871))+(((-1.0)*r00*x7867*x7870*x7875))+((x7867*x7872)))),-1);
if(!x7880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7879.value)+(((1.5707963267949)*(x7880.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7881=IKsin(j4);
IkReal x7882=IKcos(j4);
IkReal x7883=((1.0)*sj0);
IkReal x7884=((1.0)*cj6);
IkReal x7885=((1.0)*sj6);
IkReal x7886=(cj5*x7882);
IkReal x7887=(r20*x7881);
IkReal x7888=(cj6*x7882);
IkReal x7889=(r11*x7881);
IkReal x7890=(r21*x7881);
IkReal x7891=(r01*x7881);
IkReal x7892=((1.0)*sj5*x7881);
IkReal x7893=((1.0)*sj5*x7882);
IkReal x7894=(cj5*x7881*x7885);
evalcond[0]=((((-1.0)*r21*x7882*x7885))+((r20*x7888))+(((-1.0)*cj5*x7884*x7890))+(((-1.0)*r22*x7892))+(((-1.0)*cj5*x7885*x7887)));
evalcond[1]=((((-1.0)*r21*x7884*x7886))+((sj6*x7890))+(((-1.0)*r20*x7885*x7886))+(((-1.0)*x7884*x7887))+(((-1.0)*r22*x7893)));
evalcond[2]=(cj0+(((-1.0)*r11*x7882*x7885))+(((-1.0)*r12*x7892))+((r10*x7888))+(((-1.0)*r10*x7894))+(((-1.0)*cj5*x7884*x7889)));
evalcond[3]=((((-1.0)*r01*x7882*x7885))+((r00*x7888))+(((-1.0)*cj5*x7884*x7891))+(((-1.0)*x7883))+(((-1.0)*r00*x7894))+(((-1.0)*r02*x7892)));
evalcond[4]=((((-1.0)*r01*x7884*x7886))+((sj6*x7891))+(((-1.0)*r00*x7881*x7884))+(((-1.0)*r00*x7885*x7886))+(((-1.0)*cj0))+(((-1.0)*r02*x7893)));
evalcond[5]=((((-1.0)*r11*x7884*x7886))+(((-1.0)*r12*x7893))+(((-1.0)*x7883))+((sj6*x7889))+(((-1.0)*r10*x7885*x7886))+(((-1.0)*r10*x7881*x7884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7895=(cj5*sj0);
CheckValue<IkReal> x7896 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r22*sj0*sj5))+((r20*sj6*x7895))+((cj6*r21*x7895))),IKFAST_ATAN2_MAGTHRESH);
if(!x7896.valid){
continue;
}
CheckValue<IkReal> x7897=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7897.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7896.value)+(((1.5707963267949)*(x7897.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7898=IKsin(j4);
IkReal x7899=IKcos(j4);
IkReal x7900=((1.0)*sj0);
IkReal x7901=((1.0)*cj6);
IkReal x7902=((1.0)*sj6);
IkReal x7903=(cj5*x7899);
IkReal x7904=(r20*x7898);
IkReal x7905=(cj6*x7899);
IkReal x7906=(r11*x7898);
IkReal x7907=(r21*x7898);
IkReal x7908=(r01*x7898);
IkReal x7909=((1.0)*sj5*x7898);
IkReal x7910=((1.0)*sj5*x7899);
IkReal x7911=(cj5*x7898*x7902);
evalcond[0]=((((-1.0)*r21*x7899*x7902))+(((-1.0)*cj5*x7901*x7907))+(((-1.0)*r22*x7909))+(((-1.0)*cj5*x7902*x7904))+((r20*x7905)));
evalcond[1]=(((sj6*x7907))+(((-1.0)*r22*x7910))+(((-1.0)*r21*x7901*x7903))+(((-1.0)*r20*x7902*x7903))+(((-1.0)*x7901*x7904)));
evalcond[2]=((((-1.0)*r12*x7909))+(((-1.0)*r11*x7899*x7902))+cj0+((r10*x7905))+(((-1.0)*cj5*x7901*x7906))+(((-1.0)*r10*x7911)));
evalcond[3]=((((-1.0)*r01*x7899*x7902))+(((-1.0)*cj5*x7901*x7908))+((r00*x7905))+(((-1.0)*x7900))+(((-1.0)*r00*x7911))+(((-1.0)*r02*x7909)));
evalcond[4]=((((-1.0)*r01*x7901*x7903))+((sj6*x7908))+(((-1.0)*r00*x7898*x7901))+(((-1.0)*r02*x7910))+(((-1.0)*r00*x7902*x7903))+(((-1.0)*cj0)));
evalcond[5]=(((sj6*x7906))+(((-1.0)*r10*x7902*x7903))+(((-1.0)*r12*x7910))+(((-1.0)*x7900))+(((-1.0)*r10*x7898*x7901))+(((-1.0)*r11*x7901*x7903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7912=(cj0*sj6);
IkReal x7913=(cj0*cj6);
CheckValue<IkReal> x7914 = IKatan2WithCheck(IkReal((((r20*x7913))+(((-1.0)*r21*x7912)))),(((cj5*r20*x7912))+((cj5*r21*x7913))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x7914.valid){
continue;
}
CheckValue<IkReal> x7915=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x7915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7914.value)+(((1.5707963267949)*(x7915.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7916=IKsin(j4);
IkReal x7917=IKcos(j4);
IkReal x7918=((1.0)*sj0);
IkReal x7919=((1.0)*cj6);
IkReal x7920=((1.0)*sj6);
IkReal x7921=(cj5*x7917);
IkReal x7922=(r20*x7916);
IkReal x7923=(cj6*x7917);
IkReal x7924=(r11*x7916);
IkReal x7925=(r21*x7916);
IkReal x7926=(r01*x7916);
IkReal x7927=((1.0)*sj5*x7916);
IkReal x7928=((1.0)*sj5*x7917);
IkReal x7929=(cj5*x7916*x7920);
evalcond[0]=((((-1.0)*cj5*x7919*x7925))+(((-1.0)*r22*x7927))+((r20*x7923))+(((-1.0)*cj5*x7920*x7922))+(((-1.0)*r21*x7917*x7920)));
evalcond[1]=((((-1.0)*r22*x7928))+(((-1.0)*r20*x7920*x7921))+(((-1.0)*r21*x7919*x7921))+((sj6*x7925))+(((-1.0)*x7919*x7922)));
evalcond[2]=((((-1.0)*r11*x7917*x7920))+cj0+(((-1.0)*cj5*x7919*x7924))+((r10*x7923))+(((-1.0)*r10*x7929))+(((-1.0)*r12*x7927)));
evalcond[3]=((((-1.0)*r02*x7927))+(((-1.0)*x7918))+(((-1.0)*cj5*x7919*x7926))+((r00*x7923))+(((-1.0)*r01*x7917*x7920))+(((-1.0)*r00*x7929)));
evalcond[4]=((((-1.0)*r02*x7928))+(((-1.0)*r01*x7919*x7921))+(((-1.0)*r00*x7920*x7921))+(((-1.0)*r00*x7916*x7919))+(((-1.0)*cj0))+((sj6*x7926)));
evalcond[5]=((((-1.0)*x7918))+(((-1.0)*r10*x7916*x7919))+(((-1.0)*r11*x7919*x7921))+(((-1.0)*r12*x7928))+(((-1.0)*r10*x7920*x7921))+((sj6*x7924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7930=((1.0)*cj5);
IkReal x7931=((0.01)*cj5);
IkReal x7932=(cj6*r11);
IkReal x7933=(r20*sj6);
IkReal x7934=((0.01)*sj5);
IkReal x7935=(cj6*r01);
IkReal x7936=((0.37429)*cj5);
IkReal x7937=((0.37429)*sj5);
IkReal x7938=(cj6*r21);
IkReal x7939=(r10*sj5*sj6);
IkReal x7940=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.069)+(((-1.0)*x7937*x7938))+(((-1.0)*pz))+((x7931*x7938))+((x7931*x7933))+(((-1.0)*x7933*x7937))+((r22*x7934))+((r22*x7936)));
evalcond[2]=((((-1.0)*x7935*x7937))+((r02*x7934))+((r02*x7936))+(((-1.0)*r00*sj6*x7937))+(((-1.0)*px))+((x7931*x7935))+(((0.43342)*cj0))+((r00*sj6*x7931)));
evalcond[3]=((((-1.0)*x7932*x7937))+(((-1.0)*py))+(((0.43342)*sj0))+((r10*sj6*x7931))+((r12*x7936))+((r12*x7934))+((x7931*x7932))+(((-1.0)*r10*sj6*x7937)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7930))+((sj5*x7933))+((sj5*x7938)));
evalcond[5]=((((-1.0)*r12*x7930))+((sj5*x7932))+x7939);
evalcond[6]=((((-1.0)*r02*x7930))+((sj5*x7935))+x7940);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7941=(r20*sj0);
IkReal x7942=((1.0)*sj5);
IkReal x7943=(r21*sj0);
IkReal x7944=((((-1.0)*cj6*r11*x7942))+((cj5*r12))+(((-1.0)*r10*sj6*x7942)));
j4eval[0]=x7944;
j4eval[1]=IKsign(x7944);
j4eval[2]=((IKabs(((((-1.0)*sj6*x7943))+((cj6*x7941)))))+(IKabs((((cj5*cj6*x7943))+((r22*sj0*sj5))+((cj5*sj6*x7941))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7945=(cj0*sj6);
IkReal x7946=((1.0)*sj5);
IkReal x7947=(cj0*cj6);
IkReal x7948=((((-1.0)*cj6*r01*x7946))+(((-1.0)*r00*sj6*x7946))+((cj5*r02)));
j4eval[0]=x7948;
j4eval[1]=IKsign(x7948);
j4eval[2]=((IKabs((((cj5*r20*x7945))+((cj5*r21*x7947))+((cj0*r22*sj5)))))+(IKabs((((r20*x7947))+(((-1.0)*r21*x7945))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7949=cj6*cj6;
IkReal x7950=cj5*cj5;
IkReal x7951=(r02*r22);
IkReal x7952=(r22*sj5);
IkReal x7953=(r00*r20);
IkReal x7954=((1.0)*r21);
IkReal x7955=(r20*sj6);
IkReal x7956=(cj6*r01);
IkReal x7957=(cj0*cj5);
IkReal x7958=(r00*sj6);
IkReal x7959=((1.0)*cj5);
IkReal x7960=(cj6*r21);
IkReal x7961=(cj5*r02*sj5);
IkReal x7962=((1.0)*x7950);
IkReal x7963=(x7949*x7950);
IkReal x7964=((((-1.0)*x7952*x7958*x7959))+(((-1.0)*x7953*x7962))+((x7955*x7956))+((r01*r21*x7949))+((x7950*x7951))+(((-1.0)*cj6*x7954*x7961))+(((-1.0)*x7951))+((x7958*x7960))+(((-1.0)*r01*x7954))+(((-1.0)*x7949*x7953))+(((-1.0)*x7952*x7956*x7959))+(((-1.0)*r01*x7954*x7963))+(((-1.0)*cj6*x7950*x7954*x7958))+(((-1.0)*r02*sj5*x7955*x7959))+(((-1.0)*x7955*x7956*x7962))+((x7953*x7963)));
j4eval[0]=x7964;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x7954)))))+(IKabs((((x7957*x7960))+((x7955*x7957))+((cj0*x7952))))));
j4eval[2]=IKsign(x7964);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7965=((1.0)*cj5);
IkReal x7966=((0.01)*cj5);
IkReal x7967=(cj6*r11);
IkReal x7968=(r20*sj6);
IkReal x7969=((0.01)*sj5);
IkReal x7970=(cj6*r01);
IkReal x7971=((0.37429)*cj5);
IkReal x7972=((0.37429)*sj5);
IkReal x7973=(cj6*r21);
IkReal x7974=(r10*sj5*sj6);
IkReal x7975=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x7968*x7972))+(((-1.0)*pz))+((x7966*x7973))+(((-1.0)*x7972*x7973))+((x7966*x7968))+((r22*x7969))+((r22*x7971)));
evalcond[2]=((((-1.0)*r00*sj6*x7972))+((r02*x7971))+((r02*x7969))+(((-1.0)*x7970*x7972))+(((-1.0)*px))+((r00*sj6*x7966))+((x7966*x7970)));
evalcond[3]=((0.43342)+(((-1.0)*r10*sj6*x7972))+((r12*x7971))+((r12*x7969))+(((-1.0)*py))+(((-1.0)*x7967*x7972))+((r10*sj6*x7966))+((x7966*x7967)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7965))+((sj5*x7973))+((sj5*x7968)));
evalcond[5]=(x7974+(((-1.0)*r12*x7965))+((sj5*x7967)));
evalcond[6]=(x7975+((sj5*x7970))+(((-1.0)*r02*x7965)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7976=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7976;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7977=((1.0)*sj6);
IkReal x7978=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x7977)));
j4eval[0]=x7978;
j4eval[1]=IKsign(x7978);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x7977))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7979=cj6*cj6;
IkReal x7980=cj5*cj5;
IkReal x7981=r10*r10;
IkReal x7982=r11*r11;
IkReal x7983=r12*r12;
IkReal x7984=(r10*sj6);
IkReal x7985=(r12*sj5);
IkReal x7986=((2.0)*cj6*r11);
IkReal x7987=((1.0)*x7981);
IkReal x7988=(x7979*x7982);
IkReal x7989=((((-1.0)*x7979*x7987))+(((-1.0)*x7980*x7987))+(((-1.0)*cj5*x7985*x7986))+x7988+((x7984*x7986))+((x7979*x7980*x7981))+(((-1.0)*x7980*x7984*x7986))+(((-1.0)*x7980*x7988))+((x7980*x7983))+(((-1.0)*x7982))+(((-1.0)*x7983))+(((-2.0)*cj5*x7984*x7985)));
j4eval[0]=x7989;
j4eval[1]=((IKabs((x7985+((cj5*cj6*r11))+((cj5*x7984)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7990=cj6*cj6;
IkReal x7991=cj5*cj5;
IkReal x7992=r10*r10;
IkReal x7993=r11*r11;
IkReal x7994=r12*r12;
IkReal x7995=(r10*sj6);
IkReal x7996=(r12*sj5);
IkReal x7997=((2.0)*cj6*r11);
IkReal x7998=(x7990*x7993);
IkReal x7999=(x7991*x7992);
CheckValue<IkReal> x8000 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x7996+((cj5*cj6*r11))+((cj5*x7995))),IKFAST_ATAN2_MAGTHRESH);
if(!x8000.valid){
continue;
}
CheckValue<IkReal> x8001=IKPowWithIntegerCheck(IKsign((((x7990*x7999))+(((-1.0)*x7990*x7992))+((x7995*x7997))+(((-2.0)*cj5*x7995*x7996))+x7998+(((-1.0)*cj5*x7996*x7997))+(((-1.0)*x7994))+(((-1.0)*x7993))+(((-1.0)*x7999))+(((-1.0)*x7991*x7995*x7997))+(((-1.0)*x7991*x7998))+((x7991*x7994)))),-1);
if(!x8001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8000.value)+(((1.5707963267949)*(x8001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8002=IKsin(j4);
IkReal x8003=IKcos(j4);
IkReal x8004=(cj5*cj6);
IkReal x8005=(r11*sj6);
IkReal x8006=(cj6*r20);
IkReal x8007=(cj6*r10);
IkReal x8008=(cj5*sj6);
IkReal x8009=(r01*sj6);
IkReal x8010=(r21*sj6);
IkReal x8011=(cj6*r00);
IkReal x8012=((1.0)*x8003);
IkReal x8013=((1.0)*x8002);
IkReal x8014=(sj5*x8013);
evalcond[0]=((((-1.0)*r22*x8014))+(((-1.0)*x8010*x8012))+(((-1.0)*r21*x8004*x8013))+(((-1.0)*r20*x8008*x8013))+((x8003*x8006)));
evalcond[1]=((((-1.0)*r11*x8004*x8013))+(((-1.0)*r10*x8008*x8013))+(((-1.0)*x8005*x8012))+(((-1.0)*r12*x8014))+((x8003*x8007)));
evalcond[2]=((((-1.0)*r22*sj5*x8012))+(((-1.0)*r21*x8004*x8012))+(((-1.0)*r20*x8008*x8012))+((x8002*x8010))+(((-1.0)*x8006*x8013)));
evalcond[3]=((((-1.0)*x8011*x8013))+(((-1.0)*r00*x8008*x8012))+(((-1.0)*r02*sj5*x8012))+(((-1.0)*r01*x8004*x8012))+((x8002*x8009)));
evalcond[4]=((1.0)+(((-1.0)*x8009*x8012))+(((-1.0)*r02*x8014))+(((-1.0)*r00*x8008*x8013))+((x8003*x8011))+(((-1.0)*r01*x8004*x8013)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x8004*x8012))+(((-1.0)*r10*x8008*x8012))+(((-1.0)*r12*sj5*x8012))+(((-1.0)*x8007*x8013))+((x8002*x8005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8015=((1.0)*sj6);
CheckValue<IkReal> x8016 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8015))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8016.valid){
continue;
}
CheckValue<IkReal> x8017=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8015)))),-1);
if(!x8017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8016.value)+(((1.5707963267949)*(x8017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8018=IKsin(j4);
IkReal x8019=IKcos(j4);
IkReal x8020=(cj5*cj6);
IkReal x8021=(r11*sj6);
IkReal x8022=(cj6*r20);
IkReal x8023=(cj6*r10);
IkReal x8024=(cj5*sj6);
IkReal x8025=(r01*sj6);
IkReal x8026=(r21*sj6);
IkReal x8027=(cj6*r00);
IkReal x8028=((1.0)*x8019);
IkReal x8029=((1.0)*x8018);
IkReal x8030=(sj5*x8029);
evalcond[0]=((((-1.0)*r21*x8020*x8029))+(((-1.0)*r22*x8030))+(((-1.0)*r20*x8024*x8029))+(((-1.0)*x8026*x8028))+((x8019*x8022)));
evalcond[1]=((((-1.0)*r12*x8030))+(((-1.0)*r11*x8020*x8029))+(((-1.0)*r10*x8024*x8029))+(((-1.0)*x8021*x8028))+((x8019*x8023)));
evalcond[2]=(((x8018*x8026))+(((-1.0)*x8022*x8029))+(((-1.0)*r22*sj5*x8028))+(((-1.0)*r21*x8020*x8028))+(((-1.0)*r20*x8024*x8028)));
evalcond[3]=(((x8018*x8025))+(((-1.0)*r02*sj5*x8028))+(((-1.0)*x8027*x8029))+(((-1.0)*r01*x8020*x8028))+(((-1.0)*r00*x8024*x8028)));
evalcond[4]=((1.0)+(((-1.0)*x8025*x8028))+(((-1.0)*r02*x8030))+(((-1.0)*r01*x8020*x8029))+((x8019*x8027))+(((-1.0)*r00*x8024*x8029)));
evalcond[5]=((-1.0)+((x8018*x8021))+(((-1.0)*x8023*x8029))+(((-1.0)*r12*sj5*x8028))+(((-1.0)*r11*x8020*x8028))+(((-1.0)*r10*x8024*x8028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8031=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8031.valid){
continue;
}
CheckValue<IkReal> x8032 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8031.value)))+(x8032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8033=IKsin(j4);
IkReal x8034=IKcos(j4);
IkReal x8035=(cj5*cj6);
IkReal x8036=(r11*sj6);
IkReal x8037=(cj6*r20);
IkReal x8038=(cj6*r10);
IkReal x8039=(cj5*sj6);
IkReal x8040=(r01*sj6);
IkReal x8041=(r21*sj6);
IkReal x8042=(cj6*r00);
IkReal x8043=((1.0)*x8034);
IkReal x8044=((1.0)*x8033);
IkReal x8045=(sj5*x8044);
evalcond[0]=(((x8034*x8037))+(((-1.0)*x8041*x8043))+(((-1.0)*r22*x8045))+(((-1.0)*r21*x8035*x8044))+(((-1.0)*r20*x8039*x8044)));
evalcond[1]=((((-1.0)*x8036*x8043))+((x8034*x8038))+(((-1.0)*r11*x8035*x8044))+(((-1.0)*r10*x8039*x8044))+(((-1.0)*r12*x8045)));
evalcond[2]=((((-1.0)*x8037*x8044))+(((-1.0)*r22*sj5*x8043))+((x8033*x8041))+(((-1.0)*r21*x8035*x8043))+(((-1.0)*r20*x8039*x8043)));
evalcond[3]=((((-1.0)*x8042*x8044))+(((-1.0)*r01*x8035*x8043))+(((-1.0)*r02*sj5*x8043))+(((-1.0)*r00*x8039*x8043))+((x8033*x8040)));
evalcond[4]=((1.0)+((x8034*x8042))+(((-1.0)*r01*x8035*x8044))+(((-1.0)*x8040*x8043))+(((-1.0)*r00*x8039*x8044))+(((-1.0)*r02*x8045)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x8035*x8043))+(((-1.0)*r10*x8039*x8043))+((x8033*x8036))+(((-1.0)*r12*sj5*x8043))+(((-1.0)*x8038*x8044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8046=((1.0)*cj5);
IkReal x8047=((0.01)*cj5);
IkReal x8048=(cj6*r11);
IkReal x8049=(r20*sj6);
IkReal x8050=((0.01)*sj5);
IkReal x8051=(cj6*r01);
IkReal x8052=((0.37429)*cj5);
IkReal x8053=((0.37429)*sj5);
IkReal x8054=(cj6*r21);
IkReal x8055=(r10*sj5*sj6);
IkReal x8056=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x8047*x8049))+((x8047*x8054))+(((-1.0)*pz))+(((-1.0)*x8053*x8054))+(((-1.0)*x8049*x8053))+((r22*x8052))+((r22*x8050)));
evalcond[2]=(((x8047*x8051))+((r02*x8050))+((r02*x8052))+(((-1.0)*r00*sj6*x8053))+(((-1.0)*x8051*x8053))+(((-1.0)*px))+((r00*sj6*x8047)));
evalcond[3]=((-0.43342)+((x8047*x8048))+(((-1.0)*r10*sj6*x8053))+(((-1.0)*py))+((r10*sj6*x8047))+((r12*x8052))+((r12*x8050))+(((-1.0)*x8048*x8053)));
evalcond[4]=((1.0)+((sj5*x8054))+((sj5*x8049))+(((-1.0)*r22*x8046)));
evalcond[5]=(((sj5*x8048))+x8055+(((-1.0)*r12*x8046)));
evalcond[6]=(((sj5*x8051))+(((-1.0)*r02*x8046))+x8056);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8057=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x8057;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8058=((1.0)*sj5);
IkReal x8059=((((-1.0)*r20*sj6*x8058))+((cj5*r22))+(((-1.0)*cj6*r21*x8058)));
j4eval[0]=x8059;
j4eval[1]=IKsign(x8059);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8060=r11*r11;
IkReal x8061=cj5*cj5;
IkReal x8062=cj6*cj6;
IkReal x8063=r10*r10;
IkReal x8064=r12*r12;
IkReal x8065=(r12*sj5);
IkReal x8066=(cj6*r10);
IkReal x8067=((1.0)*x8062);
IkReal x8068=(cj5*cj6*r11);
IkReal x8069=(cj5*r10*sj6);
IkReal x8070=((2.0)*r11*sj6);
IkReal x8071=(x8061*x8063);
IkReal x8072=((((2.0)*x8065*x8069))+(((2.0)*x8065*x8068))+(((-1.0)*x8061*x8064))+(((-1.0)*x8067*x8071))+((x8060*x8061*x8062))+((x8062*x8063))+((x8061*x8066*x8070))+(((-1.0)*x8060*x8067))+x8064+x8060+x8071+(((-1.0)*x8066*x8070)));
j4eval[0]=x8072;
j4eval[1]=IKsign(x8072);
j4eval[2]=((IKabs((x8068+x8069+x8065)))+(IKabs(((((-1.0)*r11*sj6))+x8066))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8073=r11*r11;
IkReal x8074=cj5*cj5;
IkReal x8075=cj6*cj6;
IkReal x8076=r10*r10;
IkReal x8077=r12*r12;
IkReal x8078=(r10*sj6);
IkReal x8079=(r12*sj5);
IkReal x8080=((1.0)*x8075);
IkReal x8081=(cj5*cj6*r11);
IkReal x8082=((2.0)*cj6*r11);
IkReal x8083=(x8074*x8076);
CheckValue<IkReal> x8084 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x8078))+x8079+x8081),IKFAST_ATAN2_MAGTHRESH);
if(!x8084.valid){
continue;
}
CheckValue<IkReal> x8085=IKPowWithIntegerCheck(IKsign((((x8075*x8076))+(((-1.0)*x8080*x8083))+(((-1.0)*x8074*x8077))+(((2.0)*cj5*x8078*x8079))+(((-1.0)*x8078*x8082))+((x8074*x8078*x8082))+(((2.0)*x8079*x8081))+(((-1.0)*x8073*x8080))+((x8073*x8074*x8075))+x8073+x8077+x8083)),-1);
if(!x8085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8084.value)+(((1.5707963267949)*(x8085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8086=IKsin(j4);
IkReal x8087=IKcos(j4);
IkReal x8088=(cj5*cj6);
IkReal x8089=(r11*sj6);
IkReal x8090=(cj6*r20);
IkReal x8091=(cj6*r10);
IkReal x8092=(cj5*sj6);
IkReal x8093=(r01*sj6);
IkReal x8094=(r21*sj6);
IkReal x8095=(cj6*r00);
IkReal x8096=((1.0)*x8087);
IkReal x8097=((1.0)*x8086);
IkReal x8098=(sj5*x8097);
evalcond[0]=((((-1.0)*x8094*x8096))+(((-1.0)*r20*x8092*x8097))+((x8087*x8090))+(((-1.0)*r21*x8088*x8097))+(((-1.0)*r22*x8098)));
evalcond[1]=(((x8087*x8091))+(((-1.0)*x8089*x8096))+(((-1.0)*r12*x8098))+(((-1.0)*r10*x8092*x8097))+(((-1.0)*r11*x8088*x8097)));
evalcond[2]=(((x8086*x8094))+(((-1.0)*r20*x8092*x8096))+(((-1.0)*r22*sj5*x8096))+(((-1.0)*r21*x8088*x8096))+(((-1.0)*x8090*x8097)));
evalcond[3]=(((x8086*x8093))+(((-1.0)*r00*x8092*x8096))+(((-1.0)*x8095*x8097))+(((-1.0)*r02*sj5*x8096))+(((-1.0)*r01*x8088*x8096)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x8092*x8097))+(((-1.0)*x8093*x8096))+((x8087*x8095))+(((-1.0)*r02*x8098))+(((-1.0)*r01*x8088*x8097)));
evalcond[5]=((1.0)+((x8086*x8089))+(((-1.0)*x8091*x8097))+(((-1.0)*r12*sj5*x8096))+(((-1.0)*r10*x8092*x8096))+(((-1.0)*r11*x8088*x8096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8099=((1.0)*sj5);
CheckValue<IkReal> x8100 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8100.valid){
continue;
}
CheckValue<IkReal> x8101=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x8099))+(((-1.0)*cj6*r21*x8099)))),-1);
if(!x8101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8100.value)+(((1.5707963267949)*(x8101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8102=IKsin(j4);
IkReal x8103=IKcos(j4);
IkReal x8104=(cj5*cj6);
IkReal x8105=(r11*sj6);
IkReal x8106=(cj6*r20);
IkReal x8107=(cj6*r10);
IkReal x8108=(cj5*sj6);
IkReal x8109=(r01*sj6);
IkReal x8110=(r21*sj6);
IkReal x8111=(cj6*r00);
IkReal x8112=((1.0)*x8103);
IkReal x8113=((1.0)*x8102);
IkReal x8114=(sj5*x8113);
evalcond[0]=((((-1.0)*x8110*x8112))+(((-1.0)*r22*x8114))+(((-1.0)*r21*x8104*x8113))+((x8103*x8106))+(((-1.0)*r20*x8108*x8113)));
evalcond[1]=((((-1.0)*r11*x8104*x8113))+(((-1.0)*x8105*x8112))+(((-1.0)*r12*x8114))+(((-1.0)*r10*x8108*x8113))+((x8103*x8107)));
evalcond[2]=(((x8102*x8110))+(((-1.0)*r22*sj5*x8112))+(((-1.0)*r21*x8104*x8112))+(((-1.0)*x8106*x8113))+(((-1.0)*r20*x8108*x8112)));
evalcond[3]=(((x8102*x8109))+(((-1.0)*r00*x8108*x8112))+(((-1.0)*r01*x8104*x8112))+(((-1.0)*x8111*x8113))+(((-1.0)*r02*sj5*x8112)));
evalcond[4]=((-1.0)+(((-1.0)*x8109*x8112))+(((-1.0)*r00*x8108*x8113))+(((-1.0)*r01*x8104*x8113))+(((-1.0)*r02*x8114))+((x8103*x8111)));
evalcond[5]=((1.0)+(((-1.0)*r11*x8104*x8112))+(((-1.0)*r12*sj5*x8112))+((x8102*x8105))+(((-1.0)*r10*x8108*x8112))+(((-1.0)*x8107*x8113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8115 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8115.value)+(((1.5707963267949)*(x8116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKsin(j4);
IkReal x8118=IKcos(j4);
IkReal x8119=(cj5*cj6);
IkReal x8120=(r11*sj6);
IkReal x8121=(cj6*r20);
IkReal x8122=(cj6*r10);
IkReal x8123=(cj5*sj6);
IkReal x8124=(r01*sj6);
IkReal x8125=(r21*sj6);
IkReal x8126=(cj6*r00);
IkReal x8127=((1.0)*x8118);
IkReal x8128=((1.0)*x8117);
IkReal x8129=(sj5*x8128);
evalcond[0]=(((x8118*x8121))+(((-1.0)*r21*x8119*x8128))+(((-1.0)*r20*x8123*x8128))+(((-1.0)*x8125*x8127))+(((-1.0)*r22*x8129)));
evalcond[1]=((((-1.0)*r10*x8123*x8128))+((x8118*x8122))+(((-1.0)*r12*x8129))+(((-1.0)*r11*x8119*x8128))+(((-1.0)*x8120*x8127)));
evalcond[2]=((((-1.0)*x8121*x8128))+(((-1.0)*r21*x8119*x8127))+(((-1.0)*r20*x8123*x8127))+(((-1.0)*r22*sj5*x8127))+((x8117*x8125)));
evalcond[3]=((((-1.0)*r00*x8123*x8127))+(((-1.0)*r01*x8119*x8127))+((x8117*x8124))+(((-1.0)*r02*sj5*x8127))+(((-1.0)*x8126*x8128)));
evalcond[4]=((-1.0)+((x8118*x8126))+(((-1.0)*r00*x8123*x8128))+(((-1.0)*r01*x8119*x8128))+(((-1.0)*x8124*x8127))+(((-1.0)*r02*x8129)));
evalcond[5]=((1.0)+(((-1.0)*r10*x8123*x8127))+(((-1.0)*x8122*x8128))+(((-1.0)*r12*sj5*x8127))+(((-1.0)*r11*x8119*x8127))+((x8117*x8120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8130=((1.0)*cj5);
IkReal x8131=((0.01)*cj5);
IkReal x8132=(cj6*r11);
IkReal x8133=(r20*sj6);
IkReal x8134=((0.01)*sj5);
IkReal x8135=(cj6*r01);
IkReal x8136=((0.37429)*cj5);
IkReal x8137=((0.37429)*sj5);
IkReal x8138=(cj6*r21);
IkReal x8139=(r10*sj5*sj6);
IkReal x8140=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x8134))+((r22*x8136))+((x8131*x8133))+((x8131*x8138))+(((-1.0)*x8137*x8138))+(((-1.0)*pz))+(((-1.0)*x8133*x8137)));
evalcond[2]=((0.43342)+((r02*x8134))+((r02*x8136))+((x8131*x8135))+(((-1.0)*r00*sj6*x8137))+(((-1.0)*px))+((r00*sj6*x8131))+(((-1.0)*x8135*x8137)));
evalcond[3]=((((-1.0)*r10*sj6*x8137))+(((-1.0)*x8132*x8137))+((r12*x8134))+((r12*x8136))+((x8131*x8132))+((r10*sj6*x8131))+(((-1.0)*py)));
evalcond[4]=((1.0)+((sj5*x8133))+((sj5*x8138))+(((-1.0)*r22*x8130)));
evalcond[5]=(((sj5*x8132))+(((-1.0)*r12*x8130))+x8139);
evalcond[6]=(((sj5*x8135))+(((-1.0)*r02*x8130))+x8140);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8141=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8141;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8142=((1.0)*sj6);
IkReal x8143=((((-1.0)*r00*sj5*x8142))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x8143;
j4eval[1]=IKsign(x8143);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8142))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8144=cj6*cj6;
IkReal x8145=cj5*cj5;
IkReal x8146=r00*r00;
IkReal x8147=r01*r01;
IkReal x8148=r02*r02;
IkReal x8149=(cj6*r00);
IkReal x8150=(cj5*cj6*r01);
IkReal x8151=((2.0)*r02*sj5);
IkReal x8152=((1.0)*x8144);
IkReal x8153=((2.0)*r01*sj6);
IkReal x8154=(cj5*r00*sj6);
IkReal x8155=(x8145*x8146);
IkReal x8156=((((-1.0)*x8150*x8151))+(((-1.0)*x8145*x8149*x8153))+(((-1.0)*x8146*x8152))+((x8149*x8153))+((x8145*x8148))+(((-1.0)*x8145*x8147*x8152))+((x8144*x8147))+(((-1.0)*x8155))+(((-1.0)*x8148))+(((-1.0)*x8147))+((x8144*x8155))+(((-1.0)*x8151*x8154)));
j4eval[0]=x8156;
j4eval[1]=((IKabs((((r02*sj5))+x8154+x8150)))+(IKabs(((((-1.0)*r01*sj6))+x8149))));
j4eval[2]=IKsign(x8156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8157=cj6*cj6;
IkReal x8158=cj5*cj5;
IkReal x8159=r00*r00;
IkReal x8160=r01*r01;
IkReal x8161=r02*r02;
IkReal x8162=(cj6*r00);
IkReal x8163=(cj5*cj6*r01);
IkReal x8164=((2.0)*r02*sj5);
IkReal x8165=((1.0)*x8157);
IkReal x8166=((2.0)*r01*sj6);
IkReal x8167=(cj5*r00*sj6);
IkReal x8168=(x8158*x8159);
CheckValue<IkReal> x8169=IKPowWithIntegerCheck(IKsign((((x8158*x8161))+(((-1.0)*x8159*x8165))+(((-1.0)*x8163*x8164))+((x8162*x8166))+(((-1.0)*x8160))+(((-1.0)*x8161))+(((-1.0)*x8168))+(((-1.0)*x8158*x8160*x8165))+(((-1.0)*x8158*x8162*x8166))+((x8157*x8168))+((x8157*x8160))+(((-1.0)*x8164*x8167)))),-1);
if(!x8169.valid){
continue;
}
CheckValue<IkReal> x8170 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8162)),(((r02*sj5))+x8163+x8167),IKFAST_ATAN2_MAGTHRESH);
if(!x8170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8169.value)))+(x8170.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8171=IKsin(j4);
IkReal x8172=IKcos(j4);
IkReal x8173=(cj5*cj6);
IkReal x8174=(r11*sj6);
IkReal x8175=(cj6*r20);
IkReal x8176=(cj6*r10);
IkReal x8177=(cj5*sj6);
IkReal x8178=(r21*sj6);
IkReal x8179=(cj6*r00);
IkReal x8180=(r01*sj6);
IkReal x8181=((1.0)*x8172);
IkReal x8182=((1.0)*x8171);
IkReal x8183=(sj5*x8182);
evalcond[0]=((((-1.0)*r22*x8183))+(((-1.0)*r20*x8177*x8182))+((x8172*x8175))+(((-1.0)*r21*x8173*x8182))+(((-1.0)*x8178*x8181)));
evalcond[1]=((((-1.0)*r02*x8183))+(((-1.0)*r00*x8177*x8182))+(((-1.0)*r01*x8173*x8182))+((x8172*x8179))+(((-1.0)*x8180*x8181)));
evalcond[2]=((((-1.0)*r20*x8177*x8181))+(((-1.0)*x8175*x8182))+(((-1.0)*r22*sj5*x8181))+((x8171*x8178))+(((-1.0)*r21*x8173*x8181)));
evalcond[3]=((((-1.0)*r10*x8177*x8181))+(((-1.0)*x8176*x8182))+(((-1.0)*r12*sj5*x8181))+(((-1.0)*r11*x8173*x8181))+((x8171*x8174)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8177*x8182))+(((-1.0)*x8174*x8181))+(((-1.0)*r11*x8173*x8182))+(((-1.0)*r12*x8183))+((x8172*x8176)));
evalcond[5]=((-1.0)+(((-1.0)*x8179*x8182))+(((-1.0)*r00*x8177*x8181))+((x8171*x8180))+(((-1.0)*r01*x8173*x8181))+(((-1.0)*r02*sj5*x8181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8184=((1.0)*sj6);
CheckValue<IkReal> x8185=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x8184))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x8185.valid){
continue;
}
CheckValue<IkReal> x8186 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x8184)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8185.value)))+(x8186.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8187=IKsin(j4);
IkReal x8188=IKcos(j4);
IkReal x8189=(cj5*cj6);
IkReal x8190=(r11*sj6);
IkReal x8191=(cj6*r20);
IkReal x8192=(cj6*r10);
IkReal x8193=(cj5*sj6);
IkReal x8194=(r21*sj6);
IkReal x8195=(cj6*r00);
IkReal x8196=(r01*sj6);
IkReal x8197=((1.0)*x8188);
IkReal x8198=((1.0)*x8187);
IkReal x8199=(sj5*x8198);
evalcond[0]=((((-1.0)*r22*x8199))+(((-1.0)*x8194*x8197))+(((-1.0)*r20*x8193*x8198))+((x8188*x8191))+(((-1.0)*r21*x8189*x8198)));
evalcond[1]=((((-1.0)*x8196*x8197))+(((-1.0)*r02*x8199))+(((-1.0)*r00*x8193*x8198))+((x8188*x8195))+(((-1.0)*r01*x8189*x8198)));
evalcond[2]=(((x8187*x8194))+(((-1.0)*r20*x8193*x8197))+(((-1.0)*r21*x8189*x8197))+(((-1.0)*r22*sj5*x8197))+(((-1.0)*x8191*x8198)));
evalcond[3]=(((x8187*x8190))+(((-1.0)*r12*sj5*x8197))+(((-1.0)*x8192*x8198))+(((-1.0)*r11*x8189*x8197))+(((-1.0)*r10*x8193*x8197)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x8199))+((x8188*x8192))+(((-1.0)*r11*x8189*x8198))+(((-1.0)*x8190*x8197))+(((-1.0)*r10*x8193*x8198)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x8193*x8197))+((x8187*x8196))+(((-1.0)*x8195*x8198))+(((-1.0)*r02*sj5*x8197))+(((-1.0)*r01*x8189*x8197)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8200=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8200.valid){
continue;
}
CheckValue<IkReal> x8201 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8200.value)))+(x8201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8202=IKsin(j4);
IkReal x8203=IKcos(j4);
IkReal x8204=(cj5*cj6);
IkReal x8205=(r11*sj6);
IkReal x8206=(cj6*r20);
IkReal x8207=(cj6*r10);
IkReal x8208=(cj5*sj6);
IkReal x8209=(r21*sj6);
IkReal x8210=(cj6*r00);
IkReal x8211=(r01*sj6);
IkReal x8212=((1.0)*x8203);
IkReal x8213=((1.0)*x8202);
IkReal x8214=(sj5*x8213);
evalcond[0]=((((-1.0)*r20*x8208*x8213))+(((-1.0)*x8209*x8212))+((x8203*x8206))+(((-1.0)*r22*x8214))+(((-1.0)*r21*x8204*x8213)));
evalcond[1]=((((-1.0)*r01*x8204*x8213))+(((-1.0)*r02*x8214))+((x8203*x8210))+(((-1.0)*x8211*x8212))+(((-1.0)*r00*x8208*x8213)));
evalcond[2]=((((-1.0)*r20*x8208*x8212))+((x8202*x8209))+(((-1.0)*r22*sj5*x8212))+(((-1.0)*x8206*x8213))+(((-1.0)*r21*x8204*x8212)));
evalcond[3]=(((x8202*x8205))+(((-1.0)*x8207*x8213))+(((-1.0)*r10*x8208*x8212))+(((-1.0)*r11*x8204*x8212))+(((-1.0)*r12*sj5*x8212)));
evalcond[4]=((-1.0)+(((-1.0)*x8205*x8212))+((x8203*x8207))+(((-1.0)*r12*x8214))+(((-1.0)*r10*x8208*x8213))+(((-1.0)*r11*x8204*x8213)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x8212))+(((-1.0)*r01*x8204*x8212))+((x8202*x8211))+(((-1.0)*x8210*x8213))+(((-1.0)*r00*x8208*x8212)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8215=((1.0)*cj5);
IkReal x8216=((0.01)*cj5);
IkReal x8217=(cj6*r11);
IkReal x8218=(r20*sj6);
IkReal x8219=((0.01)*sj5);
IkReal x8220=(cj6*r01);
IkReal x8221=((0.37429)*cj5);
IkReal x8222=((0.37429)*sj5);
IkReal x8223=(cj6*r21);
IkReal x8224=(r10*sj5*sj6);
IkReal x8225=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x8216*x8218))+((r22*x8219))+((r22*x8221))+(((-1.0)*x8218*x8222))+(((-1.0)*pz))+((x8216*x8223))+(((-1.0)*x8222*x8223)));
evalcond[2]=((-0.43342)+(((-1.0)*x8220*x8222))+((r02*x8221))+(((-1.0)*px))+((r00*sj6*x8216))+(((-1.0)*r00*sj6*x8222))+((x8216*x8220))+((r02*x8219)));
evalcond[3]=(((x8216*x8217))+((r12*x8221))+((r12*x8219))+(((-1.0)*r10*sj6*x8222))+(((-1.0)*py))+((r10*sj6*x8216))+(((-1.0)*x8217*x8222)));
evalcond[4]=((1.0)+((sj5*x8223))+((sj5*x8218))+(((-1.0)*r22*x8215)));
evalcond[5]=(((sj5*x8217))+(((-1.0)*r12*x8215))+x8224);
evalcond[6]=(((sj5*x8220))+(((-1.0)*r02*x8215))+x8225);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8226=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8226;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8226);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8227=((1.0)*sj5);
IkReal x8228=((((-1.0)*cj6*r21*x8227))+((cj5*r22))+(((-1.0)*r20*sj6*x8227)));
j4eval[0]=x8228;
j4eval[1]=IKsign(x8228);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8229=cj6*cj6;
IkReal x8230=r01*r01;
IkReal x8231=cj5*cj5;
IkReal x8232=r00*r00;
IkReal x8233=r02*r02;
IkReal x8234=(cj6*r00);
IkReal x8235=(r02*sj5);
IkReal x8236=(cj5*cj6*r01);
IkReal x8237=((2.0)*r01*sj6);
IkReal x8238=(cj5*r00*sj6);
IkReal x8239=((1.0)*x8231);
IkReal x8240=(x8229*x8232);
IkReal x8241=(x8229*x8230);
IkReal x8242=(((x8231*x8232))+(((-1.0)*x8233*x8239))+(((-1.0)*x8234*x8237))+(((-1.0)*x8239*x8240))+(((2.0)*x8235*x8238))+(((2.0)*x8235*x8236))+((x8231*x8234*x8237))+((x8231*x8241))+(((-1.0)*x8241))+x8233+x8230+x8240);
j4eval[0]=x8242;
j4eval[1]=((IKabs((x8236+x8235+x8238)))+(IKabs(((((-1.0)*r01*sj6))+x8234))));
j4eval[2]=IKsign(x8242);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8243=cj6*cj6;
IkReal x8244=r01*r01;
IkReal x8245=cj5*cj5;
IkReal x8246=r00*r00;
IkReal x8247=r02*r02;
IkReal x8248=(cj6*r00);
IkReal x8249=((2.0)*r01);
IkReal x8250=(cj5*cj6);
IkReal x8251=(r02*sj5);
IkReal x8252=(cj5*r00*sj6);
IkReal x8253=(x8245*x8246);
IkReal x8254=(x8243*x8244);
CheckValue<IkReal> x8255=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8254))+(((-1.0)*x8243*x8253))+((x8249*x8250*x8251))+((x8245*x8254))+((x8243*x8246))+((sj6*x8245*x8248*x8249))+(((-1.0)*sj6*x8248*x8249))+(((2.0)*x8251*x8252))+(((-1.0)*x8245*x8247))+x8247+x8244+x8253)),-1);
if(!x8255.valid){
continue;
}
CheckValue<IkReal> x8256 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8248)),(((r01*x8250))+x8251+x8252),IKFAST_ATAN2_MAGTHRESH);
if(!x8256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8255.value)))+(x8256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8257=IKsin(j4);
IkReal x8258=IKcos(j4);
IkReal x8259=(cj5*cj6);
IkReal x8260=(r11*sj6);
IkReal x8261=(cj6*r20);
IkReal x8262=(cj6*r10);
IkReal x8263=(cj5*sj6);
IkReal x8264=(r21*sj6);
IkReal x8265=(cj6*r00);
IkReal x8266=(r01*sj6);
IkReal x8267=((1.0)*x8258);
IkReal x8268=((1.0)*x8257);
IkReal x8269=(sj5*x8268);
evalcond[0]=((((-1.0)*x8264*x8267))+(((-1.0)*r21*x8259*x8268))+(((-1.0)*r22*x8269))+((x8258*x8261))+(((-1.0)*r20*x8263*x8268)));
evalcond[1]=((((-1.0)*r01*x8259*x8268))+(((-1.0)*r00*x8263*x8268))+(((-1.0)*r02*x8269))+((x8258*x8265))+(((-1.0)*x8266*x8267)));
evalcond[2]=(((x8257*x8264))+(((-1.0)*x8261*x8268))+(((-1.0)*r22*sj5*x8267))+(((-1.0)*r21*x8259*x8267))+(((-1.0)*r20*x8263*x8267)));
evalcond[3]=((((-1.0)*r10*x8263*x8267))+(((-1.0)*r12*sj5*x8267))+((x8257*x8260))+(((-1.0)*x8262*x8268))+(((-1.0)*r11*x8259*x8267)));
evalcond[4]=((1.0)+(((-1.0)*r12*x8269))+(((-1.0)*r10*x8263*x8268))+(((-1.0)*x8260*x8267))+((x8258*x8262))+(((-1.0)*r11*x8259*x8268)));
evalcond[5]=((1.0)+(((-1.0)*r01*x8259*x8267))+((x8257*x8266))+(((-1.0)*r00*x8263*x8267))+(((-1.0)*x8265*x8268))+(((-1.0)*r02*sj5*x8267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8270=((1.0)*sj5);
CheckValue<IkReal> x8271 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8271.valid){
continue;
}
CheckValue<IkReal> x8272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x8270))+((cj5*r22))+(((-1.0)*cj6*r21*x8270)))),-1);
if(!x8272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8271.value)+(((1.5707963267949)*(x8272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8273=IKsin(j4);
IkReal x8274=IKcos(j4);
IkReal x8275=(cj5*cj6);
IkReal x8276=(r11*sj6);
IkReal x8277=(cj6*r20);
IkReal x8278=(cj6*r10);
IkReal x8279=(cj5*sj6);
IkReal x8280=(r21*sj6);
IkReal x8281=(cj6*r00);
IkReal x8282=(r01*sj6);
IkReal x8283=((1.0)*x8274);
IkReal x8284=((1.0)*x8273);
IkReal x8285=(sj5*x8284);
evalcond[0]=((((-1.0)*x8280*x8283))+(((-1.0)*r21*x8275*x8284))+(((-1.0)*r22*x8285))+((x8274*x8277))+(((-1.0)*r20*x8279*x8284)));
evalcond[1]=((((-1.0)*r02*x8285))+(((-1.0)*r00*x8279*x8284))+((x8274*x8281))+(((-1.0)*x8282*x8283))+(((-1.0)*r01*x8275*x8284)));
evalcond[2]=((((-1.0)*x8277*x8284))+(((-1.0)*r21*x8275*x8283))+((x8273*x8280))+(((-1.0)*r20*x8279*x8283))+(((-1.0)*r22*sj5*x8283)));
evalcond[3]=((((-1.0)*r10*x8279*x8283))+(((-1.0)*r11*x8275*x8283))+(((-1.0)*r12*sj5*x8283))+(((-1.0)*x8278*x8284))+((x8273*x8276)));
evalcond[4]=((1.0)+(((-1.0)*r12*x8285))+(((-1.0)*r10*x8279*x8284))+(((-1.0)*r11*x8275*x8284))+(((-1.0)*x8276*x8283))+((x8274*x8278)));
evalcond[5]=((1.0)+(((-1.0)*x8281*x8284))+(((-1.0)*r02*sj5*x8283))+(((-1.0)*r00*x8279*x8283))+((x8273*x8282))+(((-1.0)*r01*x8275*x8283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8286 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8286.valid){
continue;
}
CheckValue<IkReal> x8287=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8286.value)+(((1.5707963267949)*(x8287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8288=IKsin(j4);
IkReal x8289=IKcos(j4);
IkReal x8290=(cj5*cj6);
IkReal x8291=(r11*sj6);
IkReal x8292=(cj6*r20);
IkReal x8293=(cj6*r10);
IkReal x8294=(cj5*sj6);
IkReal x8295=(r21*sj6);
IkReal x8296=(cj6*r00);
IkReal x8297=(r01*sj6);
IkReal x8298=((1.0)*x8289);
IkReal x8299=((1.0)*x8288);
IkReal x8300=(sj5*x8299);
evalcond[0]=((((-1.0)*r22*x8300))+((x8289*x8292))+(((-1.0)*r20*x8294*x8299))+(((-1.0)*x8295*x8298))+(((-1.0)*r21*x8290*x8299)));
evalcond[1]=((((-1.0)*x8297*x8298))+((x8289*x8296))+(((-1.0)*r02*x8300))+(((-1.0)*r01*x8290*x8299))+(((-1.0)*r00*x8294*x8299)));
evalcond[2]=((((-1.0)*r20*x8294*x8298))+((x8288*x8295))+(((-1.0)*x8292*x8299))+(((-1.0)*r21*x8290*x8298))+(((-1.0)*r22*sj5*x8298)));
evalcond[3]=((((-1.0)*r11*x8290*x8298))+(((-1.0)*x8293*x8299))+(((-1.0)*r10*x8294*x8298))+((x8288*x8291))+(((-1.0)*r12*sj5*x8298)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8290*x8299))+(((-1.0)*r12*x8300))+((x8289*x8293))+(((-1.0)*r10*x8294*x8299))+(((-1.0)*x8291*x8298)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x8298))+((x8288*x8297))+(((-1.0)*r01*x8290*x8298))+(((-1.0)*r00*x8294*x8298))+(((-1.0)*x8296*x8299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8301=cj6*cj6;
IkReal x8302=cj5*cj5;
IkReal x8303=(r22*sj5);
IkReal x8304=(cj0*r20);
IkReal x8305=((1.0)*r21);
IkReal x8306=(cj5*sj6);
IkReal x8307=(r02*r22);
IkReal x8308=(cj5*cj6);
IkReal x8309=(r02*sj5);
IkReal x8310=(cj6*sj6);
IkReal x8311=((1.0)*r20);
IkReal x8312=(r01*x8305);
IkReal x8313=(r00*r20*x8302);
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal((((cj6*x8304))+(((-1.0)*cj0*sj6*x8305)))),(((x8304*x8306))+((cj0*r21*x8308))+((cj0*x8303))),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
CheckValue<IkReal> x8315=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8306*x8309*x8311))+((r01*r20*x8310))+(((-1.0)*x8305*x8308*x8309))+(((-1.0)*r01*x8303*x8308))+(((-1.0)*r00*x8303*x8306))+((x8302*x8307))+(((-1.0)*x8312))+((x8301*x8313))+(((-1.0)*x8301*x8302*x8312))+(((-1.0)*r00*x8301*x8311))+(((-1.0)*r00*x8302*x8311))+((r01*r21*x8301))+(((-1.0)*r00*x8302*x8305*x8310))+(((-1.0)*x8307))+((r00*r21*x8310))+(((-1.0)*r01*x8302*x8310*x8311)))),-1);
if(!x8315.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8314.value)+(((1.5707963267949)*(x8315.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8316=IKsin(j4);
IkReal x8317=IKcos(j4);
IkReal x8318=((1.0)*cj0);
IkReal x8319=(cj6*r20);
IkReal x8320=(cj5*sj6);
IkReal x8321=((1.0)*sj6);
IkReal x8322=(r21*sj6);
IkReal x8323=(cj6*r00);
IkReal x8324=((1.0)*cj5*cj6);
IkReal x8325=(r01*x8317);
IkReal x8326=(r11*x8316);
IkReal x8327=((1.0)*x8316);
IkReal x8328=(r11*x8317);
IkReal x8329=(r10*x8317);
IkReal x8330=((1.0)*x8317);
IkReal x8331=(r01*x8316);
IkReal x8332=(sj5*x8327);
evalcond[0]=((((-1.0)*r21*x8316*x8324))+(((-1.0)*r21*x8317*x8321))+(((-1.0)*r22*x8332))+(((-1.0)*r20*x8320*x8327))+((x8317*x8319)));
evalcond[1]=((((-1.0)*r21*x8317*x8324))+(((-1.0)*r20*x8320*x8330))+((x8316*x8322))+(((-1.0)*r22*sj5*x8330))+(((-1.0)*x8319*x8327)));
evalcond[2]=(sj0+((x8317*x8323))+(((-1.0)*r00*x8320*x8327))+(((-1.0)*r02*x8332))+(((-1.0)*x8324*x8331))+(((-1.0)*x8321*x8325)));
evalcond[3]=(((cj6*x8329))+(((-1.0)*r12*x8332))+(((-1.0)*x8318))+(((-1.0)*r10*x8320*x8327))+(((-1.0)*x8321*x8328))+(((-1.0)*x8324*x8326)));
evalcond[4]=(((sj6*x8331))+(((-1.0)*r00*x8320*x8330))+(((-1.0)*x8318))+(((-1.0)*r02*sj5*x8330))+(((-1.0)*x8323*x8327))+(((-1.0)*x8324*x8325)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x8327))+(((-1.0)*r12*sj5*x8330))+((sj6*x8326))+(((-1.0)*x8320*x8329))+(((-1.0)*x8324*x8328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8333=(cj0*sj6);
IkReal x8334=((1.0)*sj5);
IkReal x8335=(cj0*cj6);
CheckValue<IkReal> x8336 = IKatan2WithCheck(IkReal((((r20*x8335))+(((-1.0)*r21*x8333)))),(((cj5*r20*x8333))+((cj5*r21*x8335))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8336.valid){
continue;
}
CheckValue<IkReal> x8337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x8334))+(((-1.0)*cj6*r01*x8334))+((cj5*r02)))),-1);
if(!x8337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8336.value)+(((1.5707963267949)*(x8337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8338=IKsin(j4);
IkReal x8339=IKcos(j4);
IkReal x8340=((1.0)*cj0);
IkReal x8341=(cj6*r20);
IkReal x8342=(cj5*sj6);
IkReal x8343=((1.0)*sj6);
IkReal x8344=(r21*sj6);
IkReal x8345=(cj6*r00);
IkReal x8346=((1.0)*cj5*cj6);
IkReal x8347=(r01*x8339);
IkReal x8348=(r11*x8338);
IkReal x8349=((1.0)*x8338);
IkReal x8350=(r11*x8339);
IkReal x8351=(r10*x8339);
IkReal x8352=((1.0)*x8339);
IkReal x8353=(r01*x8338);
IkReal x8354=(sj5*x8349);
evalcond[0]=((((-1.0)*r22*x8354))+(((-1.0)*r20*x8342*x8349))+(((-1.0)*r21*x8339*x8343))+((x8339*x8341))+(((-1.0)*r21*x8338*x8346)));
evalcond[1]=((((-1.0)*r22*sj5*x8352))+(((-1.0)*x8341*x8349))+((x8338*x8344))+(((-1.0)*r21*x8339*x8346))+(((-1.0)*r20*x8342*x8352)));
evalcond[2]=(sj0+(((-1.0)*r02*x8354))+(((-1.0)*r00*x8342*x8349))+(((-1.0)*x8343*x8347))+(((-1.0)*x8346*x8353))+((x8339*x8345)));
evalcond[3]=(((cj6*x8351))+(((-1.0)*x8343*x8350))+(((-1.0)*r12*x8354))+(((-1.0)*x8340))+(((-1.0)*r10*x8342*x8349))+(((-1.0)*x8346*x8348)));
evalcond[4]=((((-1.0)*x8345*x8349))+(((-1.0)*r00*x8342*x8352))+(((-1.0)*r02*sj5*x8352))+((sj6*x8353))+(((-1.0)*x8340))+(((-1.0)*x8346*x8347)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x8349))+((sj6*x8348))+(((-1.0)*x8346*x8350))+(((-1.0)*x8342*x8351))+(((-1.0)*r12*sj5*x8352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8355=(cj5*sj0);
IkReal x8356=((1.0)*sj5);
CheckValue<IkReal> x8357=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x8356))+(((-1.0)*r10*sj6*x8356)))),-1);
if(!x8357.valid){
continue;
}
CheckValue<IkReal> x8358 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x8355))+((cj6*r21*x8355))+((r22*sj0*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8357.value)))+(x8358.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8359=IKsin(j4);
IkReal x8360=IKcos(j4);
IkReal x8361=((1.0)*cj0);
IkReal x8362=(cj6*r20);
IkReal x8363=(cj5*sj6);
IkReal x8364=((1.0)*sj6);
IkReal x8365=(r21*sj6);
IkReal x8366=(cj6*r00);
IkReal x8367=((1.0)*cj5*cj6);
IkReal x8368=(r01*x8360);
IkReal x8369=(r11*x8359);
IkReal x8370=((1.0)*x8359);
IkReal x8371=(r11*x8360);
IkReal x8372=(r10*x8360);
IkReal x8373=((1.0)*x8360);
IkReal x8374=(r01*x8359);
IkReal x8375=(sj5*x8370);
evalcond[0]=((((-1.0)*r21*x8360*x8364))+(((-1.0)*r22*x8375))+(((-1.0)*r21*x8359*x8367))+((x8360*x8362))+(((-1.0)*r20*x8363*x8370)));
evalcond[1]=((((-1.0)*r21*x8360*x8367))+(((-1.0)*r22*sj5*x8373))+(((-1.0)*x8362*x8370))+((x8359*x8365))+(((-1.0)*r20*x8363*x8373)));
evalcond[2]=(sj0+(((-1.0)*r02*x8375))+(((-1.0)*x8364*x8368))+(((-1.0)*x8367*x8374))+(((-1.0)*r00*x8363*x8370))+((x8360*x8366)));
evalcond[3]=((((-1.0)*r12*x8375))+(((-1.0)*x8364*x8371))+(((-1.0)*x8367*x8369))+((cj6*x8372))+(((-1.0)*x8361))+(((-1.0)*r10*x8363*x8370)));
evalcond[4]=((((-1.0)*r02*sj5*x8373))+(((-1.0)*x8366*x8370))+((sj6*x8374))+(((-1.0)*x8367*x8368))+(((-1.0)*r00*x8363*x8373))+(((-1.0)*x8361)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x8370))+(((-1.0)*x8367*x8371))+(((-1.0)*x8363*x8372))+((sj6*x8369))+(((-1.0)*r12*sj5*x8373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8376=((0.01)*cj5);
IkReal x8377=(cj6*r11);
IkReal x8378=((1.0)*cj5);
IkReal x8379=(r20*sj6);
IkReal x8380=((0.01)*sj5);
IkReal x8381=(cj6*r01);
IkReal x8382=((0.37429)*cj5);
IkReal x8383=((0.37429)*sj5);
IkReal x8384=(cj6*r21);
IkReal x8385=(r10*sj5*sj6);
IkReal x8386=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.069)+(((-1.0)*x8379*x8383))+((x8376*x8379))+((x8376*x8384))+(((-1.0)*pz))+(((-1.0)*x8383*x8384))+((r22*x8382))+((r22*x8380)));
evalcond[2]=((((-1.0)*x8381*x8383))+(((-1.0)*r00*sj6*x8383))+(((-0.29542)*cj0))+((x8376*x8381))+(((-1.0)*px))+((r02*x8380))+((r02*x8382))+((r00*sj6*x8376)));
evalcond[3]=(((r10*sj6*x8376))+(((-1.0)*r10*sj6*x8383))+((x8376*x8377))+(((-0.29542)*sj0))+(((-1.0)*py))+(((-1.0)*x8377*x8383))+((r12*x8382))+((r12*x8380)));
evalcond[4]=((1.0)+(((-1.0)*r22*x8378))+((sj5*x8384))+((sj5*x8379)));
evalcond[5]=((((-1.0)*r12*x8378))+x8385+((sj5*x8377)));
evalcond[6]=(x8386+(((-1.0)*r02*x8378))+((sj5*x8381)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8387=(cj0*sj6);
IkReal x8388=(cj0*cj6);
IkReal x8389=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8389;
j4eval[1]=((IKabs((((cj5*r20*x8387))+((cj5*r21*x8388))+((cj0*r22*sj5)))))+(IKabs(((((-1.0)*r21*x8387))+((r20*x8388))))));
j4eval[2]=IKsign(x8389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8390=cj5*cj5;
IkReal x8391=cj6*cj6;
IkReal x8392=(r00*r20);
IkReal x8393=(r02*r22);
IkReal x8394=(r22*sj5);
IkReal x8395=(cj6*r21);
IkReal x8396=(r00*sj6);
IkReal x8397=(r20*sj6);
IkReal x8398=(cj6*r01);
IkReal x8399=(cj0*cj5);
IkReal x8400=((1.0)*x8390);
IkReal x8401=(cj5*r02*sj5);
IkReal x8402=(r01*r21*x8391);
IkReal x8403=((((-1.0)*x8397*x8398))+x8393+(((-1.0)*x8395*x8396))+((x8390*x8395*x8396))+(((-1.0)*x8402))+((x8391*x8392))+((x8395*x8401))+(((-1.0)*x8393*x8400))+(((-1.0)*x8391*x8392*x8400))+((x8390*x8392))+((r01*r21))+((cj5*x8394*x8398))+((cj5*x8394*x8396))+((x8397*x8401))+((x8390*x8402))+((x8390*x8397*x8398)));
j4eval[0]=x8403;
j4eval[1]=IKsign(x8403);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x8397*x8399))+((x8395*x8399))+((cj0*x8394))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8404=cj6*cj6;
IkReal x8405=cj5*cj5;
IkReal x8406=(r12*sj5);
IkReal x8407=(r22*sj5);
IkReal x8408=((1.0)*r11);
IkReal x8409=(r20*sj0);
IkReal x8410=(r10*r20);
IkReal x8411=(cj5*sj6);
IkReal x8412=(cj6*r10);
IkReal x8413=(r12*r22);
IkReal x8414=(cj5*cj6*r21);
IkReal x8415=(r21*x8404);
IkReal x8416=(cj6*r20*sj6);
IkReal x8417=(r11*x8405);
IkReal x8418=((1.0)*r21*sj6);
IkReal x8419=((1.0)*x8405);
IkReal x8420=((((-1.0)*x8408*x8415))+(((-1.0)*x8408*x8416))+((r20*x8406*x8411))+x8413+((cj5*cj6*r11*x8407))+((x8405*x8410))+((r11*r21))+((x8406*x8414))+(((-1.0)*x8404*x8410*x8419))+(((-1.0)*x8413*x8419))+((r10*x8407*x8411))+(((-1.0)*x8412*x8418))+((x8404*x8410))+((r21*sj6*x8405*x8412))+((x8416*x8417))+((x8415*x8417)));
j4eval[0]=x8420;
j4eval[1]=IKsign(x8420);
j4eval[2]=((IKabs((((sj0*x8407))+((x8409*x8411))+((sj0*x8414)))))+(IKabs((((cj6*x8409))+(((-1.0)*sj0*x8418))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8421=((1.0)*cj5);
IkReal x8422=((0.01)*cj5);
IkReal x8423=(cj6*r11);
IkReal x8424=(r20*sj6);
IkReal x8425=((0.01)*sj5);
IkReal x8426=(cj6*r01);
IkReal x8427=((0.37429)*cj5);
IkReal x8428=((0.37429)*sj5);
IkReal x8429=(cj6*r21);
IkReal x8430=(r10*sj5*sj6);
IkReal x8431=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x8424*x8428))+(((-1.0)*pz))+(((-1.0)*x8428*x8429))+((x8422*x8429))+((x8422*x8424))+((r22*x8427))+((r22*x8425)));
evalcond[2]=((-0.29542)+((r02*x8427))+((r02*x8425))+(((-1.0)*x8426*x8428))+(((-1.0)*px))+(((-1.0)*r00*sj6*x8428))+((x8422*x8426))+((r00*sj6*x8422)));
evalcond[3]=((((-1.0)*py))+((r12*x8427))+((r12*x8425))+(((-1.0)*x8423*x8428))+(((-1.0)*r10*sj6*x8428))+((x8422*x8423))+((r10*sj6*x8422)));
evalcond[4]=((1.0)+(((-1.0)*r22*x8421))+((sj5*x8424))+((sj5*x8429)));
evalcond[5]=(x8430+((sj5*x8423))+(((-1.0)*r12*x8421)));
evalcond[6]=(x8431+(((-1.0)*r02*x8421))+((sj5*x8426)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8432=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8432;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8433=((1.0)*sj5);
IkReal x8434=(((cj5*r22))+(((-1.0)*cj6*r21*x8433))+(((-1.0)*r20*sj6*x8433)));
j4eval[0]=x8434;
j4eval[1]=IKsign(x8434);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8435=cj6*cj6;
IkReal x8436=r01*r01;
IkReal x8437=cj5*cj5;
IkReal x8438=r00*r00;
IkReal x8439=r02*r02;
IkReal x8440=(cj6*r00);
IkReal x8441=(r02*sj5);
IkReal x8442=(cj5*cj6*r01);
IkReal x8443=((2.0)*r01*sj6);
IkReal x8444=(cj5*r00*sj6);
IkReal x8445=((1.0)*x8437);
IkReal x8446=(x8435*x8438);
IkReal x8447=(x8435*x8436);
IkReal x8448=(x8446+x8436+x8439+(((-1.0)*x8447))+(((-1.0)*x8440*x8443))+((x8437*x8438))+((x8437*x8447))+(((-1.0)*x8445*x8446))+(((2.0)*x8441*x8444))+(((2.0)*x8441*x8442))+((x8437*x8440*x8443))+(((-1.0)*x8439*x8445)));
j4eval[0]=x8448;
j4eval[1]=((IKabs((x8440+(((-1.0)*r01*sj6)))))+(IKabs((x8444+x8441+x8442))));
j4eval[2]=IKsign(x8448);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8449=cj6*cj6;
IkReal x8450=r01*r01;
IkReal x8451=cj5*cj5;
IkReal x8452=r00*r00;
IkReal x8453=r02*r02;
IkReal x8454=(cj6*r00);
IkReal x8455=((2.0)*r01);
IkReal x8456=(cj5*cj6);
IkReal x8457=(r02*sj5);
IkReal x8458=(cj5*r00*sj6);
IkReal x8459=(x8451*x8452);
IkReal x8460=(x8449*x8450);
CheckValue<IkReal> x8461=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8451*x8453))+(((-1.0)*x8460))+((x8451*x8460))+x8453+x8450+x8459+((x8455*x8456*x8457))+((x8449*x8452))+(((-1.0)*sj6*x8454*x8455))+(((2.0)*x8457*x8458))+(((-1.0)*x8449*x8459))+((sj6*x8451*x8454*x8455)))),-1);
if(!x8461.valid){
continue;
}
CheckValue<IkReal> x8462 = IKatan2WithCheck(IkReal((x8454+(((-1.0)*r01*sj6)))),(x8457+x8458+((r01*x8456))),IKFAST_ATAN2_MAGTHRESH);
if(!x8462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8461.value)))+(x8462.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8463=IKsin(j4);
IkReal x8464=IKcos(j4);
IkReal x8465=(cj5*cj6);
IkReal x8466=(r11*sj6);
IkReal x8467=(cj6*r20);
IkReal x8468=(cj6*r10);
IkReal x8469=(cj5*sj6);
IkReal x8470=(r21*sj6);
IkReal x8471=(cj6*r00);
IkReal x8472=(r01*sj6);
IkReal x8473=((1.0)*x8464);
IkReal x8474=((1.0)*x8463);
IkReal x8475=(sj5*x8474);
evalcond[0]=(((x8464*x8467))+(((-1.0)*x8470*x8473))+(((-1.0)*r22*x8475))+(((-1.0)*r21*x8465*x8474))+(((-1.0)*r20*x8469*x8474)));
evalcond[1]=(((x8464*x8471))+(((-1.0)*r02*x8475))+(((-1.0)*r01*x8465*x8474))+(((-1.0)*r00*x8469*x8474))+(((-1.0)*x8472*x8473)));
evalcond[2]=((((-1.0)*x8467*x8474))+(((-1.0)*r22*sj5*x8473))+(((-1.0)*r21*x8465*x8473))+((x8463*x8470))+(((-1.0)*r20*x8469*x8473)));
evalcond[3]=((((-1.0)*r12*sj5*x8473))+((x8463*x8466))+(((-1.0)*x8468*x8474))+(((-1.0)*r11*x8465*x8473))+(((-1.0)*r10*x8469*x8473)));
evalcond[4]=((1.0)+((x8464*x8468))+(((-1.0)*x8466*x8473))+(((-1.0)*r12*x8475))+(((-1.0)*r11*x8465*x8474))+(((-1.0)*r10*x8469*x8474)));
evalcond[5]=((1.0)+(((-1.0)*x8471*x8474))+(((-1.0)*r01*x8465*x8473))+(((-1.0)*r02*sj5*x8473))+(((-1.0)*r00*x8469*x8473))+((x8463*x8472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8476=((1.0)*sj5);
CheckValue<IkReal> x8477 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8477.valid){
continue;
}
CheckValue<IkReal> x8478=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x8476))+(((-1.0)*cj6*r21*x8476)))),-1);
if(!x8478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8477.value)+(((1.5707963267949)*(x8478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8479=IKsin(j4);
IkReal x8480=IKcos(j4);
IkReal x8481=(cj5*cj6);
IkReal x8482=(r11*sj6);
IkReal x8483=(cj6*r20);
IkReal x8484=(cj6*r10);
IkReal x8485=(cj5*sj6);
IkReal x8486=(r21*sj6);
IkReal x8487=(cj6*r00);
IkReal x8488=(r01*sj6);
IkReal x8489=((1.0)*x8480);
IkReal x8490=((1.0)*x8479);
IkReal x8491=(sj5*x8490);
evalcond[0]=((((-1.0)*r20*x8485*x8490))+((x8480*x8483))+(((-1.0)*r22*x8491))+(((-1.0)*x8486*x8489))+(((-1.0)*r21*x8481*x8490)));
evalcond[1]=((((-1.0)*r02*x8491))+(((-1.0)*r01*x8481*x8490))+((x8480*x8487))+(((-1.0)*r00*x8485*x8490))+(((-1.0)*x8488*x8489)));
evalcond[2]=((((-1.0)*r20*x8485*x8489))+((x8479*x8486))+(((-1.0)*r22*sj5*x8489))+(((-1.0)*x8483*x8490))+(((-1.0)*r21*x8481*x8489)));
evalcond[3]=((((-1.0)*r12*sj5*x8489))+(((-1.0)*r10*x8485*x8489))+((x8479*x8482))+(((-1.0)*r11*x8481*x8489))+(((-1.0)*x8484*x8490)));
evalcond[4]=((1.0)+(((-1.0)*r10*x8485*x8490))+(((-1.0)*x8482*x8489))+(((-1.0)*r11*x8481*x8490))+((x8480*x8484))+(((-1.0)*r12*x8491)));
evalcond[5]=((1.0)+(((-1.0)*x8487*x8490))+(((-1.0)*r01*x8481*x8489))+((x8479*x8488))+(((-1.0)*r02*sj5*x8489))+(((-1.0)*r00*x8485*x8489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8492 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8492.valid){
continue;
}
CheckValue<IkReal> x8493=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8492.value)+(((1.5707963267949)*(x8493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8494=IKsin(j4);
IkReal x8495=IKcos(j4);
IkReal x8496=(cj5*cj6);
IkReal x8497=(r11*sj6);
IkReal x8498=(cj6*r20);
IkReal x8499=(cj6*r10);
IkReal x8500=(cj5*sj6);
IkReal x8501=(r21*sj6);
IkReal x8502=(cj6*r00);
IkReal x8503=(r01*sj6);
IkReal x8504=((1.0)*x8495);
IkReal x8505=((1.0)*x8494);
IkReal x8506=(sj5*x8505);
evalcond[0]=((((-1.0)*r21*x8496*x8505))+(((-1.0)*x8501*x8504))+(((-1.0)*r22*x8506))+((x8495*x8498))+(((-1.0)*r20*x8500*x8505)));
evalcond[1]=((((-1.0)*x8503*x8504))+(((-1.0)*r00*x8500*x8505))+(((-1.0)*r02*x8506))+(((-1.0)*r01*x8496*x8505))+((x8495*x8502)));
evalcond[2]=((((-1.0)*x8498*x8505))+(((-1.0)*r21*x8496*x8504))+(((-1.0)*r22*sj5*x8504))+(((-1.0)*r20*x8500*x8504))+((x8494*x8501)));
evalcond[3]=((((-1.0)*r10*x8500*x8504))+((x8494*x8497))+(((-1.0)*x8499*x8505))+(((-1.0)*r12*sj5*x8504))+(((-1.0)*r11*x8496*x8504)));
evalcond[4]=((1.0)+(((-1.0)*r10*x8500*x8505))+(((-1.0)*x8497*x8504))+((x8495*x8499))+(((-1.0)*r12*x8506))+(((-1.0)*r11*x8496*x8505)));
evalcond[5]=((1.0)+(((-1.0)*r00*x8500*x8504))+(((-1.0)*r02*sj5*x8504))+(((-1.0)*r01*x8496*x8504))+((x8494*x8503))+(((-1.0)*x8502*x8505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8507=((1.0)*cj5);
IkReal x8508=((0.01)*cj5);
IkReal x8509=(cj6*r11);
IkReal x8510=(r20*sj6);
IkReal x8511=((0.01)*sj5);
IkReal x8512=(cj6*r01);
IkReal x8513=((0.37429)*cj5);
IkReal x8514=((0.37429)*sj5);
IkReal x8515=(cj6*r21);
IkReal x8516=(r10*sj5*sj6);
IkReal x8517=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x8513))+((r22*x8511))+(((-1.0)*x8514*x8515))+(((-1.0)*pz))+((x8508*x8515))+((x8508*x8510))+(((-1.0)*x8510*x8514)));
evalcond[2]=((0.29542)+(((-1.0)*x8512*x8514))+((r02*x8513))+((r02*x8511))+((r00*sj6*x8508))+(((-1.0)*px))+(((-1.0)*r00*sj6*x8514))+((x8508*x8512)));
evalcond[3]=(((r10*sj6*x8508))+((r12*x8513))+((r12*x8511))+(((-1.0)*py))+(((-1.0)*x8509*x8514))+((x8508*x8509))+(((-1.0)*r10*sj6*x8514)));
evalcond[4]=((1.0)+((sj5*x8515))+((sj5*x8510))+(((-1.0)*r22*x8507)));
evalcond[5]=(x8516+((sj5*x8509))+(((-1.0)*r12*x8507)));
evalcond[6]=(x8517+((sj5*x8512))+(((-1.0)*r02*x8507)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8518=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8518;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8519=((1.0)*sj6);
IkReal x8520=((((-1.0)*r00*sj5*x8519))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x8520;
j4eval[1]=IKsign(x8520);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8519))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8521=cj6*cj6;
IkReal x8522=cj5*cj5;
IkReal x8523=r00*r00;
IkReal x8524=r01*r01;
IkReal x8525=r02*r02;
IkReal x8526=(cj6*r00);
IkReal x8527=(cj5*cj6*r01);
IkReal x8528=((2.0)*r02*sj5);
IkReal x8529=((1.0)*x8521);
IkReal x8530=((2.0)*r01*sj6);
IkReal x8531=(cj5*r00*sj6);
IkReal x8532=(x8522*x8523);
IkReal x8533=(((x8521*x8532))+(((-1.0)*x8523*x8529))+(((-1.0)*x8522*x8524*x8529))+(((-1.0)*x8532))+((x8522*x8525))+((x8521*x8524))+(((-1.0)*x8525))+(((-1.0)*x8524))+(((-1.0)*x8522*x8526*x8530))+(((-1.0)*x8528*x8531))+((x8526*x8530))+(((-1.0)*x8527*x8528)));
j4eval[0]=x8533;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x8526)))+(IKabs((x8527+x8531+((r02*sj5))))));
j4eval[2]=IKsign(x8533);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8534=cj6*cj6;
IkReal x8535=cj5*cj5;
IkReal x8536=r00*r00;
IkReal x8537=r01*r01;
IkReal x8538=r02*r02;
IkReal x8539=(cj6*r00);
IkReal x8540=(cj5*cj6*r01);
IkReal x8541=((2.0)*r02*sj5);
IkReal x8542=((1.0)*x8534);
IkReal x8543=((2.0)*r01*sj6);
IkReal x8544=(cj5*r00*sj6);
IkReal x8545=(x8535*x8536);
CheckValue<IkReal> x8546 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8539)),(x8544+x8540+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8546.valid){
continue;
}
CheckValue<IkReal> x8547=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8535*x8537*x8542))+(((-1.0)*x8538))+(((-1.0)*x8537))+(((-1.0)*x8536*x8542))+(((-1.0)*x8540*x8541))+((x8534*x8545))+((x8535*x8538))+((x8539*x8543))+((x8534*x8537))+(((-1.0)*x8541*x8544))+(((-1.0)*x8535*x8539*x8543))+(((-1.0)*x8545)))),-1);
if(!x8547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8546.value)+(((1.5707963267949)*(x8547.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8548=IKsin(j4);
IkReal x8549=IKcos(j4);
IkReal x8550=(cj5*cj6);
IkReal x8551=(r11*sj6);
IkReal x8552=(cj6*r20);
IkReal x8553=(cj6*r10);
IkReal x8554=(cj5*sj6);
IkReal x8555=(r21*sj6);
IkReal x8556=(cj6*r00);
IkReal x8557=(r01*sj6);
IkReal x8558=((1.0)*x8549);
IkReal x8559=((1.0)*x8548);
IkReal x8560=(sj5*x8559);
evalcond[0]=((((-1.0)*r20*x8554*x8559))+(((-1.0)*r21*x8550*x8559))+(((-1.0)*r22*x8560))+(((-1.0)*x8555*x8558))+((x8549*x8552)));
evalcond[1]=((((-1.0)*r00*x8554*x8559))+(((-1.0)*x8557*x8558))+(((-1.0)*r01*x8550*x8559))+((x8549*x8556))+(((-1.0)*r02*x8560)));
evalcond[2]=((((-1.0)*r20*x8554*x8558))+(((-1.0)*r22*sj5*x8558))+(((-1.0)*r21*x8550*x8558))+((x8548*x8555))+(((-1.0)*x8552*x8559)));
evalcond[3]=((((-1.0)*r10*x8554*x8558))+((x8548*x8551))+(((-1.0)*x8553*x8559))+(((-1.0)*r12*sj5*x8558))+(((-1.0)*r11*x8550*x8558)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8554*x8559))+(((-1.0)*r12*x8560))+((x8549*x8553))+(((-1.0)*x8551*x8558))+(((-1.0)*r11*x8550*x8559)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x8554*x8558))+(((-1.0)*r02*sj5*x8558))+((x8548*x8557))+(((-1.0)*r01*x8550*x8558))+(((-1.0)*x8556*x8559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8561=((1.0)*sj6);
CheckValue<IkReal> x8562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x8561))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x8562.valid){
continue;
}
CheckValue<IkReal> x8563 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8561))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8562.value)))+(x8563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8564=IKsin(j4);
IkReal x8565=IKcos(j4);
IkReal x8566=(cj5*cj6);
IkReal x8567=(r11*sj6);
IkReal x8568=(cj6*r20);
IkReal x8569=(cj6*r10);
IkReal x8570=(cj5*sj6);
IkReal x8571=(r21*sj6);
IkReal x8572=(cj6*r00);
IkReal x8573=(r01*sj6);
IkReal x8574=((1.0)*x8565);
IkReal x8575=((1.0)*x8564);
IkReal x8576=(sj5*x8575);
evalcond[0]=((((-1.0)*r20*x8570*x8575))+(((-1.0)*x8571*x8574))+((x8565*x8568))+(((-1.0)*r21*x8566*x8575))+(((-1.0)*r22*x8576)));
evalcond[1]=(((x8565*x8572))+(((-1.0)*r02*x8576))+(((-1.0)*x8573*x8574))+(((-1.0)*r00*x8570*x8575))+(((-1.0)*r01*x8566*x8575)));
evalcond[2]=((((-1.0)*r20*x8570*x8574))+(((-1.0)*x8568*x8575))+(((-1.0)*r22*sj5*x8574))+(((-1.0)*r21*x8566*x8574))+((x8564*x8571)));
evalcond[3]=((((-1.0)*r11*x8566*x8574))+(((-1.0)*r12*sj5*x8574))+(((-1.0)*r10*x8570*x8574))+((x8564*x8567))+(((-1.0)*x8569*x8575)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x8566*x8575))+(((-1.0)*r10*x8570*x8575))+((x8565*x8569))+(((-1.0)*x8567*x8574))+(((-1.0)*r12*x8576)));
evalcond[5]=((-1.0)+(((-1.0)*x8572*x8575))+(((-1.0)*r00*x8570*x8574))+(((-1.0)*r02*sj5*x8574))+(((-1.0)*r01*x8566*x8574))+((x8564*x8573)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8577=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8577.valid){
continue;
}
CheckValue<IkReal> x8578 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8577.value)))+(x8578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8579=IKsin(j4);
IkReal x8580=IKcos(j4);
IkReal x8581=(cj5*cj6);
IkReal x8582=(r11*sj6);
IkReal x8583=(cj6*r20);
IkReal x8584=(cj6*r10);
IkReal x8585=(cj5*sj6);
IkReal x8586=(r21*sj6);
IkReal x8587=(cj6*r00);
IkReal x8588=(r01*sj6);
IkReal x8589=((1.0)*x8580);
IkReal x8590=((1.0)*x8579);
IkReal x8591=(sj5*x8590);
evalcond[0]=((((-1.0)*r22*x8591))+(((-1.0)*r20*x8585*x8590))+((x8580*x8583))+(((-1.0)*r21*x8581*x8590))+(((-1.0)*x8586*x8589)));
evalcond[1]=((((-1.0)*r01*x8581*x8590))+(((-1.0)*r02*x8591))+((x8580*x8587))+(((-1.0)*r00*x8585*x8590))+(((-1.0)*x8588*x8589)));
evalcond[2]=((((-1.0)*r21*x8581*x8589))+(((-1.0)*x8583*x8590))+(((-1.0)*r20*x8585*x8589))+(((-1.0)*r22*sj5*x8589))+((x8579*x8586)));
evalcond[3]=((((-1.0)*r12*sj5*x8589))+(((-1.0)*r11*x8581*x8589))+(((-1.0)*r10*x8585*x8589))+((x8579*x8582))+(((-1.0)*x8584*x8590)));
evalcond[4]=((-1.0)+(((-1.0)*x8582*x8589))+(((-1.0)*r10*x8585*x8590))+(((-1.0)*r12*x8591))+(((-1.0)*r11*x8581*x8590))+((x8580*x8584)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x8585*x8589))+(((-1.0)*r01*x8581*x8589))+((x8579*x8588))+(((-1.0)*x8587*x8590))+(((-1.0)*r02*sj5*x8589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8592=((1.0)*cj5);
IkReal x8593=((0.01)*cj5);
IkReal x8594=(cj6*r11);
IkReal x8595=(r20*sj6);
IkReal x8596=((0.01)*sj5);
IkReal x8597=(cj6*r01);
IkReal x8598=((0.37429)*cj5);
IkReal x8599=((0.37429)*sj5);
IkReal x8600=(cj6*r21);
IkReal x8601=(r10*sj5*sj6);
IkReal x8602=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*pz))+(((-1.0)*x8595*x8599))+((x8593*x8595))+((x8593*x8600))+(((-1.0)*x8599*x8600))+((r22*x8598))+((r22*x8596)));
evalcond[2]=((((-1.0)*px))+((r02*x8598))+((r02*x8596))+((x8593*x8597))+((r00*sj6*x8593))+(((-1.0)*x8597*x8599))+(((-1.0)*r00*sj6*x8599)));
evalcond[3]=((-0.29542)+((r10*sj6*x8593))+(((-1.0)*py))+((x8593*x8594))+(((-1.0)*r10*sj6*x8599))+(((-1.0)*x8594*x8599))+((r12*x8598))+((r12*x8596)));
evalcond[4]=((1.0)+(((-1.0)*r22*x8592))+((sj5*x8600))+((sj5*x8595)));
evalcond[5]=(x8601+(((-1.0)*r12*x8592))+((sj5*x8594)));
evalcond[6]=(x8602+(((-1.0)*r02*x8592))+((sj5*x8597)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8603=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x8603;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8604=((1.0)*sj5);
IkReal x8605=((((-1.0)*cj6*r21*x8604))+((cj5*r22))+(((-1.0)*r20*sj6*x8604)));
j4eval[0]=x8605;
j4eval[1]=IKsign(x8605);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8606=r11*r11;
IkReal x8607=cj5*cj5;
IkReal x8608=cj6*cj6;
IkReal x8609=r10*r10;
IkReal x8610=r12*r12;
IkReal x8611=(r12*sj5);
IkReal x8612=(cj6*r10);
IkReal x8613=((1.0)*x8608);
IkReal x8614=(cj5*cj6*r11);
IkReal x8615=(cj5*r10*sj6);
IkReal x8616=((2.0)*r11*sj6);
IkReal x8617=(x8607*x8609);
IkReal x8618=((((-1.0)*x8612*x8616))+(((-1.0)*x8606*x8613))+x8606+x8617+x8610+(((-1.0)*x8607*x8610))+(((2.0)*x8611*x8614))+(((2.0)*x8611*x8615))+((x8608*x8609))+((x8606*x8607*x8608))+(((-1.0)*x8613*x8617))+((x8607*x8612*x8616)));
j4eval[0]=x8618;
j4eval[1]=IKsign(x8618);
j4eval[2]=((IKabs((x8612+(((-1.0)*r11*sj6)))))+(IKabs((x8615+x8614+x8611))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8619=r11*r11;
IkReal x8620=cj5*cj5;
IkReal x8621=cj6*cj6;
IkReal x8622=r10*r10;
IkReal x8623=r12*r12;
IkReal x8624=(r10*sj6);
IkReal x8625=(r12*sj5);
IkReal x8626=((1.0)*x8621);
IkReal x8627=(cj5*cj6*r11);
IkReal x8628=((2.0)*cj6*r11);
IkReal x8629=(x8620*x8622);
CheckValue<IkReal> x8630 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x8625+x8627+((cj5*x8624))),IKFAST_ATAN2_MAGTHRESH);
if(!x8630.valid){
continue;
}
CheckValue<IkReal> x8631=IKPowWithIntegerCheck(IKsign(((((2.0)*x8625*x8627))+x8629+x8623+x8619+(((-1.0)*x8624*x8628))+((x8619*x8620*x8621))+(((-1.0)*x8626*x8629))+((x8620*x8624*x8628))+((x8621*x8622))+(((-1.0)*x8619*x8626))+(((-1.0)*x8620*x8623))+(((2.0)*cj5*x8624*x8625)))),-1);
if(!x8631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8630.value)+(((1.5707963267949)*(x8631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8632=IKsin(j4);
IkReal x8633=IKcos(j4);
IkReal x8634=(cj5*cj6);
IkReal x8635=(r11*sj6);
IkReal x8636=(cj6*r20);
IkReal x8637=(cj6*r10);
IkReal x8638=(cj5*sj6);
IkReal x8639=(r01*sj6);
IkReal x8640=(r21*sj6);
IkReal x8641=(cj6*r00);
IkReal x8642=((1.0)*x8633);
IkReal x8643=((1.0)*x8632);
IkReal x8644=(sj5*x8643);
evalcond[0]=((((-1.0)*r20*x8638*x8643))+(((-1.0)*r21*x8634*x8643))+(((-1.0)*r22*x8644))+((x8633*x8636))+(((-1.0)*x8640*x8642)));
evalcond[1]=((((-1.0)*r11*x8634*x8643))+(((-1.0)*r10*x8638*x8643))+((x8633*x8637))+(((-1.0)*r12*x8644))+(((-1.0)*x8635*x8642)));
evalcond[2]=(((x8632*x8640))+(((-1.0)*r20*x8638*x8642))+(((-1.0)*r21*x8634*x8642))+(((-1.0)*x8636*x8643))+(((-1.0)*r22*sj5*x8642)));
evalcond[3]=((((-1.0)*r01*x8634*x8642))+(((-1.0)*r02*sj5*x8642))+(((-1.0)*r00*x8638*x8642))+(((-1.0)*x8641*x8643))+((x8632*x8639)));
evalcond[4]=((-1.0)+(((-1.0)*x8639*x8642))+(((-1.0)*r01*x8634*x8643))+((x8633*x8641))+(((-1.0)*r02*x8644))+(((-1.0)*r00*x8638*x8643)));
evalcond[5]=((1.0)+(((-1.0)*x8637*x8643))+(((-1.0)*r11*x8634*x8642))+(((-1.0)*r10*x8638*x8642))+(((-1.0)*r12*sj5*x8642))+((x8632*x8635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8645=((1.0)*sj5);
CheckValue<IkReal> x8646 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8646.valid){
continue;
}
CheckValue<IkReal> x8647=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x8645))+(((-1.0)*cj6*r21*x8645)))),-1);
if(!x8647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8646.value)+(((1.5707963267949)*(x8647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8648=IKsin(j4);
IkReal x8649=IKcos(j4);
IkReal x8650=(cj5*cj6);
IkReal x8651=(r11*sj6);
IkReal x8652=(cj6*r20);
IkReal x8653=(cj6*r10);
IkReal x8654=(cj5*sj6);
IkReal x8655=(r01*sj6);
IkReal x8656=(r21*sj6);
IkReal x8657=(cj6*r00);
IkReal x8658=((1.0)*x8649);
IkReal x8659=((1.0)*x8648);
IkReal x8660=(sj5*x8659);
evalcond[0]=((((-1.0)*x8656*x8658))+(((-1.0)*r20*x8654*x8659))+(((-1.0)*r22*x8660))+((x8649*x8652))+(((-1.0)*r21*x8650*x8659)));
evalcond[1]=((((-1.0)*r12*x8660))+((x8649*x8653))+(((-1.0)*r10*x8654*x8659))+(((-1.0)*r11*x8650*x8659))+(((-1.0)*x8651*x8658)));
evalcond[2]=((((-1.0)*x8652*x8659))+((x8648*x8656))+(((-1.0)*r20*x8654*x8658))+(((-1.0)*r22*sj5*x8658))+(((-1.0)*r21*x8650*x8658)));
evalcond[3]=((((-1.0)*r02*sj5*x8658))+((x8648*x8655))+(((-1.0)*r00*x8654*x8658))+(((-1.0)*x8657*x8659))+(((-1.0)*r01*x8650*x8658)));
evalcond[4]=((-1.0)+(((-1.0)*x8655*x8658))+((x8649*x8657))+(((-1.0)*r02*x8660))+(((-1.0)*r00*x8654*x8659))+(((-1.0)*r01*x8650*x8659)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x8658))+((x8648*x8651))+(((-1.0)*r10*x8654*x8658))+(((-1.0)*r11*x8650*x8658))+(((-1.0)*x8653*x8659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8661 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8661.valid){
continue;
}
CheckValue<IkReal> x8662=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8661.value)+(((1.5707963267949)*(x8662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8663=IKsin(j4);
IkReal x8664=IKcos(j4);
IkReal x8665=(cj5*cj6);
IkReal x8666=(r11*sj6);
IkReal x8667=(cj6*r20);
IkReal x8668=(cj6*r10);
IkReal x8669=(cj5*sj6);
IkReal x8670=(r01*sj6);
IkReal x8671=(r21*sj6);
IkReal x8672=(cj6*r00);
IkReal x8673=((1.0)*x8664);
IkReal x8674=((1.0)*x8663);
IkReal x8675=(sj5*x8674);
evalcond[0]=((((-1.0)*r22*x8675))+(((-1.0)*r21*x8665*x8674))+((x8664*x8667))+(((-1.0)*x8671*x8673))+(((-1.0)*r20*x8669*x8674)));
evalcond[1]=((((-1.0)*r12*x8675))+((x8664*x8668))+(((-1.0)*x8666*x8673))+(((-1.0)*r10*x8669*x8674))+(((-1.0)*r11*x8665*x8674)));
evalcond[2]=((((-1.0)*r22*sj5*x8673))+(((-1.0)*r21*x8665*x8673))+(((-1.0)*x8667*x8674))+((x8663*x8671))+(((-1.0)*r20*x8669*x8673)));
evalcond[3]=((((-1.0)*r00*x8669*x8673))+(((-1.0)*x8672*x8674))+((x8663*x8670))+(((-1.0)*r02*sj5*x8673))+(((-1.0)*r01*x8665*x8673)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x8669*x8674))+(((-1.0)*r02*x8675))+((x8664*x8672))+(((-1.0)*x8670*x8673))+(((-1.0)*r01*x8665*x8674)));
evalcond[5]=((1.0)+(((-1.0)*x8668*x8674))+(((-1.0)*r12*sj5*x8673))+((x8663*x8666))+(((-1.0)*r10*x8669*x8673))+(((-1.0)*r11*x8665*x8673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8676=((1.0)*cj5);
IkReal x8677=((0.01)*cj5);
IkReal x8678=(cj6*r11);
IkReal x8679=(r20*sj6);
IkReal x8680=((0.01)*sj5);
IkReal x8681=(cj6*r01);
IkReal x8682=((0.37429)*cj5);
IkReal x8683=((0.37429)*sj5);
IkReal x8684=(cj6*r21);
IkReal x8685=(r10*sj5*sj6);
IkReal x8686=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x8683*x8684))+((x8677*x8684))+((x8677*x8679))+((r22*x8682))+((r22*x8680))+(((-1.0)*pz))+(((-1.0)*x8679*x8683)));
evalcond[2]=((((-1.0)*x8681*x8683))+((x8677*x8681))+(((-1.0)*px))+(((-1.0)*r00*sj6*x8683))+((r02*x8682))+((r02*x8680))+((r00*sj6*x8677)));
evalcond[3]=((0.29542)+(((-1.0)*x8678*x8683))+((r12*x8682))+((r12*x8680))+((x8677*x8678))+(((-1.0)*py))+((r10*sj6*x8677))+(((-1.0)*r10*sj6*x8683)));
evalcond[4]=((1.0)+(((-1.0)*r22*x8676))+((sj5*x8684))+((sj5*x8679)));
evalcond[5]=(x8685+(((-1.0)*r12*x8676))+((sj5*x8678)));
evalcond[6]=(x8686+((sj5*x8681))+(((-1.0)*r02*x8676)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8687=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8687;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x8687);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8688=((1.0)*sj6);
IkReal x8689=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8688)));
j4eval[0]=x8689;
j4eval[1]=IKsign(x8689);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8688))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8690=cj6*cj6;
IkReal x8691=cj5*cj5;
IkReal x8692=r10*r10;
IkReal x8693=r11*r11;
IkReal x8694=r12*r12;
IkReal x8695=(r10*sj6);
IkReal x8696=(r12*sj5);
IkReal x8697=((2.0)*cj6*r11);
IkReal x8698=((1.0)*x8692);
IkReal x8699=(x8690*x8693);
IkReal x8700=((((-1.0)*cj5*x8696*x8697))+x8699+(((-1.0)*x8691*x8695*x8697))+((x8695*x8697))+(((-2.0)*cj5*x8695*x8696))+(((-1.0)*x8691*x8698))+(((-1.0)*x8694))+(((-1.0)*x8693))+(((-1.0)*x8690*x8698))+(((-1.0)*x8691*x8699))+((x8691*x8694))+((x8690*x8691*x8692)));
j4eval[0]=x8700;
j4eval[1]=((IKabs((x8696+((cj5*cj6*r11))+((cj5*x8695)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x8700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8701=cj6*cj6;
IkReal x8702=cj5*cj5;
IkReal x8703=r10*r10;
IkReal x8704=r11*r11;
IkReal x8705=r12*r12;
IkReal x8706=(r10*sj6);
IkReal x8707=(r12*sj5);
IkReal x8708=((2.0)*cj6*r11);
IkReal x8709=(x8701*x8704);
IkReal x8710=(x8702*x8703);
CheckValue<IkReal> x8711=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x8707*x8708))+((x8701*x8710))+x8709+(((-1.0)*x8702*x8706*x8708))+(((-1.0)*x8705))+(((-1.0)*x8704))+(((-1.0)*x8702*x8709))+((x8706*x8708))+(((-1.0)*x8710))+(((-2.0)*cj5*x8706*x8707))+((x8702*x8705))+(((-1.0)*x8701*x8703)))),-1);
if(!x8711.valid){
continue;
}
CheckValue<IkReal> x8712 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x8706))+x8707+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x8712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8711.value)))+(x8712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8713=IKsin(j4);
IkReal x8714=IKcos(j4);
IkReal x8715=(cj5*cj6);
IkReal x8716=(r11*sj6);
IkReal x8717=(cj6*r20);
IkReal x8718=(cj6*r10);
IkReal x8719=(cj5*sj6);
IkReal x8720=(r01*sj6);
IkReal x8721=(r21*sj6);
IkReal x8722=(cj6*r00);
IkReal x8723=((1.0)*x8714);
IkReal x8724=((1.0)*x8713);
IkReal x8725=(sj5*x8724);
evalcond[0]=(((x8714*x8717))+(((-1.0)*r20*x8719*x8724))+(((-1.0)*x8721*x8723))+(((-1.0)*r21*x8715*x8724))+(((-1.0)*r22*x8725)));
evalcond[1]=(((x8714*x8718))+(((-1.0)*r11*x8715*x8724))+(((-1.0)*r10*x8719*x8724))+(((-1.0)*r12*x8725))+(((-1.0)*x8716*x8723)));
evalcond[2]=((((-1.0)*r22*sj5*x8723))+(((-1.0)*r20*x8719*x8723))+((x8713*x8721))+(((-1.0)*r21*x8715*x8723))+(((-1.0)*x8717*x8724)));
evalcond[3]=((((-1.0)*r00*x8719*x8723))+((x8713*x8720))+(((-1.0)*r01*x8715*x8723))+(((-1.0)*r02*sj5*x8723))+(((-1.0)*x8722*x8724)));
evalcond[4]=((1.0)+(((-1.0)*x8720*x8723))+(((-1.0)*r00*x8719*x8724))+((x8714*x8722))+(((-1.0)*r01*x8715*x8724))+(((-1.0)*r02*x8725)));
evalcond[5]=((-1.0)+((x8713*x8716))+(((-1.0)*r12*sj5*x8723))+(((-1.0)*r11*x8715*x8723))+(((-1.0)*x8718*x8724))+(((-1.0)*r10*x8719*x8723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8726=((1.0)*sj6);
CheckValue<IkReal> x8727 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8726))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8727.valid){
continue;
}
CheckValue<IkReal> x8728=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8726)))),-1);
if(!x8728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8727.value)+(((1.5707963267949)*(x8728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8729=IKsin(j4);
IkReal x8730=IKcos(j4);
IkReal x8731=(cj5*cj6);
IkReal x8732=(r11*sj6);
IkReal x8733=(cj6*r20);
IkReal x8734=(cj6*r10);
IkReal x8735=(cj5*sj6);
IkReal x8736=(r01*sj6);
IkReal x8737=(r21*sj6);
IkReal x8738=(cj6*r00);
IkReal x8739=((1.0)*x8730);
IkReal x8740=((1.0)*x8729);
IkReal x8741=(sj5*x8740);
evalcond[0]=((((-1.0)*x8737*x8739))+(((-1.0)*r22*x8741))+(((-1.0)*r20*x8735*x8740))+(((-1.0)*r21*x8731*x8740))+((x8730*x8733)));
evalcond[1]=((((-1.0)*r10*x8735*x8740))+(((-1.0)*r11*x8731*x8740))+(((-1.0)*r12*x8741))+(((-1.0)*x8732*x8739))+((x8730*x8734)));
evalcond[2]=((((-1.0)*r21*x8731*x8739))+((x8729*x8737))+(((-1.0)*r22*sj5*x8739))+(((-1.0)*x8733*x8740))+(((-1.0)*r20*x8735*x8739)));
evalcond[3]=((((-1.0)*r00*x8735*x8739))+((x8729*x8736))+(((-1.0)*r01*x8731*x8739))+(((-1.0)*x8738*x8740))+(((-1.0)*r02*sj5*x8739)));
evalcond[4]=((1.0)+(((-1.0)*x8736*x8739))+(((-1.0)*r00*x8735*x8740))+((x8730*x8738))+(((-1.0)*r01*x8731*x8740))+(((-1.0)*r02*x8741)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x8739))+((x8729*x8732))+(((-1.0)*r11*x8731*x8739))+(((-1.0)*x8734*x8740))+(((-1.0)*r10*x8735*x8739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8742=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8742.valid){
continue;
}
CheckValue<IkReal> x8743 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8742.value)))+(x8743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8744=IKsin(j4);
IkReal x8745=IKcos(j4);
IkReal x8746=(cj5*cj6);
IkReal x8747=(r11*sj6);
IkReal x8748=(cj6*r20);
IkReal x8749=(cj6*r10);
IkReal x8750=(cj5*sj6);
IkReal x8751=(r01*sj6);
IkReal x8752=(r21*sj6);
IkReal x8753=(cj6*r00);
IkReal x8754=((1.0)*x8745);
IkReal x8755=((1.0)*x8744);
IkReal x8756=(sj5*x8755);
evalcond[0]=((((-1.0)*r20*x8750*x8755))+(((-1.0)*r22*x8756))+((x8745*x8748))+(((-1.0)*x8752*x8754))+(((-1.0)*r21*x8746*x8755)));
evalcond[1]=((((-1.0)*r10*x8750*x8755))+(((-1.0)*r11*x8746*x8755))+((x8745*x8749))+(((-1.0)*r12*x8756))+(((-1.0)*x8747*x8754)));
evalcond[2]=((((-1.0)*r20*x8750*x8754))+(((-1.0)*x8748*x8755))+((x8744*x8752))+(((-1.0)*r22*sj5*x8754))+(((-1.0)*r21*x8746*x8754)));
evalcond[3]=((((-1.0)*r00*x8750*x8754))+(((-1.0)*r01*x8746*x8754))+(((-1.0)*x8753*x8755))+(((-1.0)*r02*sj5*x8754))+((x8744*x8751)));
evalcond[4]=((1.0)+(((-1.0)*x8751*x8754))+(((-1.0)*r00*x8750*x8755))+(((-1.0)*r01*x8746*x8755))+(((-1.0)*r02*x8756))+((x8745*x8753)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x8750*x8754))+(((-1.0)*r12*sj5*x8754))+(((-1.0)*r11*x8746*x8754))+((x8744*x8747))+(((-1.0)*x8749*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8757=cj6*cj6;
IkReal x8758=cj5*cj5;
IkReal x8759=((1.0)*r11);
IkReal x8760=(cj5*sj0);
IkReal x8761=(cj6*r21);
IkReal x8762=(r22*sj5);
IkReal x8763=(r20*sj6);
IkReal x8764=(r12*r22);
IkReal x8765=((1.0)*sj6);
IkReal x8766=(r21*x8757);
IkReal x8767=(r10*x8758);
IkReal x8768=(r11*x8758);
IkReal x8769=(r20*x8757);
IkReal x8770=(cj5*r12*sj5);
CheckValue<IkReal> x8771 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x8765)))),(((sj0*x8762))+((x8760*x8763))+((x8760*x8761))),IKFAST_ATAN2_MAGTHRESH);
if(!x8771.valid){
continue;
}
CheckValue<IkReal> x8772=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8759*x8766))+((cj5*r10*sj6*x8762))+((x8766*x8768))+x8764+((r11*r21))+((x8761*x8770))+(((-1.0)*cj6*x8759*x8763))+((cj5*cj6*r11*x8762))+(((-1.0)*r10*x8761*x8765))+(((-1.0)*x8758*x8764))+((r20*x8767))+(((-1.0)*x8767*x8769))+((sj6*x8761*x8767))+((r10*x8769))+((cj6*x8763*x8768))+((x8763*x8770)))),-1);
if(!x8772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8771.value)+(((1.5707963267949)*(x8772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8773=IKsin(j4);
IkReal x8774=IKcos(j4);
IkReal x8775=(cj5*cj6);
IkReal x8776=(r11*sj6);
IkReal x8777=(cj6*r20);
IkReal x8778=(cj5*sj6);
IkReal x8779=(cj6*r10);
IkReal x8780=(r01*sj6);
IkReal x8781=(r21*sj6);
IkReal x8782=(cj6*r00);
IkReal x8783=((1.0)*x8774);
IkReal x8784=((1.0)*x8773);
IkReal x8785=(sj5*x8784);
evalcond[0]=((((-1.0)*r20*x8778*x8784))+(((-1.0)*r21*x8775*x8784))+(((-1.0)*x8781*x8783))+((x8774*x8777))+(((-1.0)*r22*x8785)));
evalcond[1]=((((-1.0)*r20*x8778*x8783))+(((-1.0)*r22*sj5*x8783))+(((-1.0)*r21*x8775*x8783))+(((-1.0)*x8777*x8784))+((x8773*x8781)));
evalcond[2]=(cj0+(((-1.0)*r10*x8778*x8784))+(((-1.0)*x8776*x8783))+(((-1.0)*r11*x8775*x8784))+((x8774*x8779))+(((-1.0)*r12*x8785)));
evalcond[3]=(cj0+((x8773*x8780))+(((-1.0)*r02*sj5*x8783))+(((-1.0)*x8782*x8784))+(((-1.0)*r01*x8775*x8783))+(((-1.0)*r00*x8778*x8783)));
evalcond[4]=(sj0+((x8773*x8776))+(((-1.0)*r12*sj5*x8783))+(((-1.0)*r10*x8778*x8783))+(((-1.0)*x8779*x8784))+(((-1.0)*r11*x8775*x8783)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x8780*x8783))+(((-1.0)*r02*x8785))+(((-1.0)*r01*x8775*x8784))+(((-1.0)*r00*x8778*x8784))+((x8774*x8782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8786=cj5*cj5;
IkReal x8787=cj6*cj6;
IkReal x8788=(r22*sj5);
IkReal x8789=(cj6*r21);
IkReal x8790=(r20*sj6);
IkReal x8791=((1.0)*sj6);
IkReal x8792=(cj0*cj5);
IkReal x8793=(r02*r22);
IkReal x8794=(cj6*r01);
IkReal x8795=(r00*sj6);
IkReal x8796=(cj5*r02*sj5);
IkReal x8797=(r01*x8786);
IkReal x8798=(r21*x8787);
IkReal x8799=(r00*r20*x8786);
CheckValue<IkReal> x8800 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x8791)))),(((x8789*x8792))+((cj0*x8788))+((x8790*x8792))),IKFAST_ATAN2_MAGTHRESH);
if(!x8800.valid){
continue;
}
CheckValue<IkReal> x8801=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8786*x8793))+(((-1.0)*x8787*x8799))+x8799+x8793+((x8789*x8796))+((x8797*x8798))+((r01*r21))+((cj5*x8788*x8794))+((cj5*x8788*x8795))+(((-1.0)*x8790*x8794))+((x8786*x8789*x8795))+((x8790*x8796))+((x8786*x8790*x8794))+(((-1.0)*r01*x8798))+((r00*r20*x8787))+(((-1.0)*r00*x8789*x8791)))),-1);
if(!x8801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8800.value)+(((1.5707963267949)*(x8801.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8802=IKsin(j4);
IkReal x8803=IKcos(j4);
IkReal x8804=(cj5*cj6);
IkReal x8805=(r11*sj6);
IkReal x8806=(cj6*r20);
IkReal x8807=(cj5*sj6);
IkReal x8808=(cj6*r10);
IkReal x8809=(r01*sj6);
IkReal x8810=(r21*sj6);
IkReal x8811=(cj6*r00);
IkReal x8812=((1.0)*x8803);
IkReal x8813=((1.0)*x8802);
IkReal x8814=(sj5*x8813);
evalcond[0]=((((-1.0)*r22*x8814))+((x8803*x8806))+(((-1.0)*x8810*x8812))+(((-1.0)*r20*x8807*x8813))+(((-1.0)*r21*x8804*x8813)));
evalcond[1]=(((x8802*x8810))+(((-1.0)*x8806*x8813))+(((-1.0)*r22*sj5*x8812))+(((-1.0)*r20*x8807*x8812))+(((-1.0)*r21*x8804*x8812)));
evalcond[2]=((((-1.0)*r12*x8814))+cj0+((x8803*x8808))+(((-1.0)*r10*x8807*x8813))+(((-1.0)*r11*x8804*x8813))+(((-1.0)*x8805*x8812)));
evalcond[3]=((((-1.0)*r01*x8804*x8812))+(((-1.0)*r00*x8807*x8812))+cj0+((x8802*x8809))+(((-1.0)*x8811*x8813))+(((-1.0)*r02*sj5*x8812)));
evalcond[4]=(sj0+((x8802*x8805))+(((-1.0)*r10*x8807*x8812))+(((-1.0)*r12*sj5*x8812))+(((-1.0)*x8808*x8813))+(((-1.0)*r11*x8804*x8812)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x8804*x8813))+(((-1.0)*r00*x8807*x8813))+(((-1.0)*r02*x8814))+((x8803*x8811))+(((-1.0)*x8809*x8812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8815=(cj0*sj6);
IkReal x8816=(cj0*cj6);
CheckValue<IkReal> x8817 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8815))+((r20*x8816)))),(((cj5*r21*x8816))+((cj0*r22*sj5))+((cj5*r20*x8815))),IKFAST_ATAN2_MAGTHRESH);
if(!x8817.valid){
continue;
}
CheckValue<IkReal> x8818=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8817.value)+(((1.5707963267949)*(x8818.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8819=IKsin(j4);
IkReal x8820=IKcos(j4);
IkReal x8821=(cj5*cj6);
IkReal x8822=(r11*sj6);
IkReal x8823=(cj6*r20);
IkReal x8824=(cj5*sj6);
IkReal x8825=(cj6*r10);
IkReal x8826=(r01*sj6);
IkReal x8827=(r21*sj6);
IkReal x8828=(cj6*r00);
IkReal x8829=((1.0)*x8820);
IkReal x8830=((1.0)*x8819);
IkReal x8831=(sj5*x8830);
evalcond[0]=((((-1.0)*x8827*x8829))+(((-1.0)*r21*x8821*x8830))+(((-1.0)*r20*x8824*x8830))+((x8820*x8823))+(((-1.0)*r22*x8831)));
evalcond[1]=(((x8819*x8827))+(((-1.0)*r21*x8821*x8829))+(((-1.0)*r20*x8824*x8829))+(((-1.0)*r22*sj5*x8829))+(((-1.0)*x8823*x8830)));
evalcond[2]=((((-1.0)*r11*x8821*x8830))+cj0+(((-1.0)*r10*x8824*x8830))+(((-1.0)*x8822*x8829))+((x8820*x8825))+(((-1.0)*r12*x8831)));
evalcond[3]=(((x8819*x8826))+cj0+(((-1.0)*r01*x8821*x8829))+(((-1.0)*x8828*x8830))+(((-1.0)*r02*sj5*x8829))+(((-1.0)*r00*x8824*x8829)));
evalcond[4]=(sj0+((x8819*x8822))+(((-1.0)*r12*sj5*x8829))+(((-1.0)*r10*x8824*x8829))+(((-1.0)*r11*x8821*x8829))+(((-1.0)*x8825*x8830)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x8826*x8829))+(((-1.0)*r00*x8824*x8830))+(((-1.0)*r01*x8821*x8830))+(((-1.0)*r02*x8831))+((x8820*x8828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8832=((0.01)*cj5);
IkReal x8833=(cj6*r11);
IkReal x8834=((1.0)*cj5);
IkReal x8835=(r20*sj6);
IkReal x8836=((0.01)*sj5);
IkReal x8837=(cj6*r01);
IkReal x8838=((0.37429)*cj5);
IkReal x8839=((0.37429)*sj5);
IkReal x8840=(cj6*r21);
IkReal x8841=(r10*sj5*sj6);
IkReal x8842=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.069)+(((-1.0)*x8835*x8839))+((x8832*x8840))+((x8832*x8835))+(((-1.0)*pz))+(((-1.0)*x8839*x8840))+((r22*x8836))+((r22*x8838)));
evalcond[2]=(((r02*x8838))+((r02*x8836))+((x8832*x8837))+(((-0.29542)*cj0))+(((-1.0)*px))+(((-1.0)*x8837*x8839))+(((-1.0)*r00*sj6*x8839))+((r00*sj6*x8832)));
evalcond[3]=((((-1.0)*x8833*x8839))+((r10*sj6*x8832))+((x8832*x8833))+((r12*x8836))+((r12*x8838))+(((-0.29542)*sj0))+(((-1.0)*py))+(((-1.0)*r10*sj6*x8839)));
evalcond[4]=((-1.0)+((sj5*x8840))+((sj5*x8835))+(((-1.0)*r22*x8834)));
evalcond[5]=(x8841+((sj5*x8833))+(((-1.0)*r12*x8834)));
evalcond[6]=(x8842+(((-1.0)*r02*x8834))+((sj5*x8837)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8843=(r20*sj0);
IkReal x8844=((1.0)*sj5);
IkReal x8845=(r21*sj0);
IkReal x8846=(((cj5*r12))+(((-1.0)*cj6*r11*x8844))+(((-1.0)*r10*sj6*x8844)));
j4eval[0]=x8846;
j4eval[1]=IKsign(x8846);
j4eval[2]=((IKabs((((cj5*sj6*x8843))+((cj5*cj6*x8845))+((r22*sj0*sj5)))))+(IKabs(((((-1.0)*sj6*x8845))+((cj6*x8843))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8847=cj5*cj5;
IkReal x8848=cj6*cj6;
IkReal x8849=(r00*r20);
IkReal x8850=(r02*r22);
IkReal x8851=(r22*sj5);
IkReal x8852=(cj6*r21);
IkReal x8853=(r00*sj6);
IkReal x8854=(r20*sj6);
IkReal x8855=(cj6*r01);
IkReal x8856=(cj0*cj5);
IkReal x8857=((1.0)*x8847);
IkReal x8858=(cj5*r02*sj5);
IkReal x8859=(r01*r21*x8848);
IkReal x8860=((((-1.0)*x8852*x8853))+((x8848*x8849))+(((-1.0)*x8850*x8857))+x8850+((r01*r21))+((x8847*x8859))+((x8847*x8854*x8855))+(((-1.0)*x8854*x8855))+((cj5*x8851*x8853))+((cj5*x8851*x8855))+((x8847*x8852*x8853))+((x8852*x8858))+(((-1.0)*x8859))+((x8854*x8858))+((x8847*x8849))+(((-1.0)*x8848*x8849*x8857)));
j4eval[0]=x8860;
j4eval[1]=IKsign(x8860);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((cj0*x8851))+((x8852*x8856))+((x8854*x8856))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8861=cj6*cj6;
IkReal x8862=cj5*cj5;
IkReal x8863=(r12*sj5);
IkReal x8864=(r22*sj5);
IkReal x8865=((1.0)*r11);
IkReal x8866=(r20*sj0);
IkReal x8867=(r10*r20);
IkReal x8868=(cj5*sj6);
IkReal x8869=(cj6*r10);
IkReal x8870=(r12*r22);
IkReal x8871=(cj5*cj6*r21);
IkReal x8872=(r21*x8861);
IkReal x8873=(cj6*r20*sj6);
IkReal x8874=(r11*x8862);
IkReal x8875=((1.0)*r21*sj6);
IkReal x8876=((1.0)*x8862);
IkReal x8877=((((-1.0)*x8870*x8876))+((r20*x8863*x8868))+(((-1.0)*x8861*x8867*x8876))+(((-1.0)*x8865*x8873))+(((-1.0)*x8865*x8872))+((r11*r21))+x8870+((x8873*x8874))+((x8862*x8867))+(((-1.0)*x8869*x8875))+((x8861*x8867))+((x8872*x8874))+((x8863*x8871))+((r10*x8864*x8868))+((r21*sj6*x8862*x8869))+((cj5*cj6*r11*x8864)));
j4eval[0]=x8877;
j4eval[1]=IKsign(x8877);
j4eval[2]=((IKabs((((x8866*x8868))+((sj0*x8864))+((sj0*x8871)))))+(IKabs((((cj6*x8866))+(((-1.0)*sj0*x8875))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8878=((1.0)*cj5);
IkReal x8879=((0.01)*cj5);
IkReal x8880=(cj6*r11);
IkReal x8881=(r20*sj6);
IkReal x8882=((0.01)*sj5);
IkReal x8883=(cj6*r01);
IkReal x8884=((0.37429)*cj5);
IkReal x8885=((0.37429)*sj5);
IkReal x8886=(cj6*r21);
IkReal x8887=(r10*sj5*sj6);
IkReal x8888=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x8881*x8885))+((r22*x8884))+((r22*x8882))+((x8879*x8881))+((x8879*x8886))+(((-1.0)*pz))+(((-1.0)*x8885*x8886)));
evalcond[2]=((-0.29542)+(((-1.0)*x8883*x8885))+((r00*sj6*x8879))+((r02*x8884))+((r02*x8882))+((x8879*x8883))+(((-1.0)*px))+(((-1.0)*r00*sj6*x8885)));
evalcond[3]=(((r10*sj6*x8879))+((x8879*x8880))+(((-1.0)*py))+(((-1.0)*x8880*x8885))+((r12*x8884))+((r12*x8882))+(((-1.0)*r10*sj6*x8885)));
evalcond[4]=((-1.0)+((sj5*x8886))+((sj5*x8881))+(((-1.0)*r22*x8878)));
evalcond[5]=(((sj5*x8880))+x8887+(((-1.0)*r12*x8878)));
evalcond[6]=((((-1.0)*r02*x8878))+((sj5*x8883))+x8888);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8889=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8889;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8889);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8890=((1.0)*sj6);
IkReal x8891=((((-1.0)*r00*sj5*x8890))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x8891;
j4eval[1]=IKsign(x8891);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8890))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8892=cj6*cj6;
IkReal x8893=r01*r01;
IkReal x8894=cj5*cj5;
IkReal x8895=r00*r00;
IkReal x8896=r02*r02;
IkReal x8897=(cj6*r00);
IkReal x8898=(r02*sj5);
IkReal x8899=(cj5*cj6*r01);
IkReal x8900=((2.0)*r01*sj6);
IkReal x8901=(cj5*r00*sj6);
IkReal x8902=((1.0)*x8894);
IkReal x8903=(x8892*x8895);
IkReal x8904=(x8892*x8893);
IkReal x8905=((((2.0)*x8898*x8899))+((x8894*x8904))+((x8894*x8897*x8900))+(((-1.0)*x8902*x8903))+x8896+x8893+x8903+((x8894*x8895))+(((2.0)*x8898*x8901))+(((-1.0)*x8904))+(((-1.0)*x8897*x8900))+(((-1.0)*x8896*x8902)));
j4eval[0]=x8905;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x8897)))+(IKabs((x8899+x8898+x8901))));
j4eval[2]=IKsign(x8905);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8906=cj6*cj6;
IkReal x8907=r01*r01;
IkReal x8908=cj5*cj5;
IkReal x8909=r00*r00;
IkReal x8910=r02*r02;
IkReal x8911=(cj6*r00);
IkReal x8912=((2.0)*r01);
IkReal x8913=(cj5*cj6);
IkReal x8914=(r02*sj5);
IkReal x8915=(cj5*r00*sj6);
IkReal x8916=(x8908*x8909);
IkReal x8917=(x8906*x8907);
CheckValue<IkReal> x8918=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8917))+((sj6*x8908*x8911*x8912))+x8907+x8910+x8916+(((-1.0)*sj6*x8911*x8912))+((x8912*x8913*x8914))+((x8906*x8909))+(((-1.0)*x8906*x8916))+(((-1.0)*x8908*x8910))+(((2.0)*x8914*x8915))+((x8908*x8917)))),-1);
if(!x8918.valid){
continue;
}
CheckValue<IkReal> x8919 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8911)),(((r01*x8913))+x8914+x8915),IKFAST_ATAN2_MAGTHRESH);
if(!x8919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8918.value)))+(x8919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8920=IKsin(j4);
IkReal x8921=IKcos(j4);
IkReal x8922=(cj5*cj6);
IkReal x8923=(r11*sj6);
IkReal x8924=(cj6*r20);
IkReal x8925=(cj6*r10);
IkReal x8926=(cj5*sj6);
IkReal x8927=(r21*sj6);
IkReal x8928=(cj6*r00);
IkReal x8929=(r01*sj6);
IkReal x8930=((1.0)*x8921);
IkReal x8931=((1.0)*x8920);
IkReal x8932=(sj5*x8931);
evalcond[0]=(((x8921*x8924))+(((-1.0)*r22*x8932))+(((-1.0)*r21*x8922*x8931))+(((-1.0)*x8927*x8930))+(((-1.0)*r20*x8926*x8931)));
evalcond[1]=(((x8921*x8928))+(((-1.0)*r01*x8922*x8931))+(((-1.0)*r00*x8926*x8931))+(((-1.0)*x8929*x8930))+(((-1.0)*r02*x8932)));
evalcond[2]=(((x8920*x8927))+(((-1.0)*x8924*x8931))+(((-1.0)*r21*x8922*x8930))+(((-1.0)*r22*sj5*x8930))+(((-1.0)*r20*x8926*x8930)));
evalcond[3]=((((-1.0)*r12*sj5*x8930))+((x8920*x8923))+(((-1.0)*r11*x8922*x8930))+(((-1.0)*r10*x8926*x8930))+(((-1.0)*x8925*x8931)));
evalcond[4]=((-1.0)+((x8921*x8925))+(((-1.0)*r12*x8932))+(((-1.0)*x8923*x8930))+(((-1.0)*r11*x8922*x8931))+(((-1.0)*r10*x8926*x8931)));
evalcond[5]=((1.0)+((x8920*x8929))+(((-1.0)*r02*sj5*x8930))+(((-1.0)*r01*x8922*x8930))+(((-1.0)*x8928*x8931))+(((-1.0)*r00*x8926*x8930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8933=((1.0)*sj6);
CheckValue<IkReal> x8934 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x8933)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8934.valid){
continue;
}
CheckValue<IkReal> x8935=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x8933))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x8935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8934.value)+(((1.5707963267949)*(x8935.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8936=IKsin(j4);
IkReal x8937=IKcos(j4);
IkReal x8938=(cj5*cj6);
IkReal x8939=(r11*sj6);
IkReal x8940=(cj6*r20);
IkReal x8941=(cj6*r10);
IkReal x8942=(cj5*sj6);
IkReal x8943=(r21*sj6);
IkReal x8944=(cj6*r00);
IkReal x8945=(r01*sj6);
IkReal x8946=((1.0)*x8937);
IkReal x8947=((1.0)*x8936);
IkReal x8948=(sj5*x8947);
evalcond[0]=((((-1.0)*r22*x8948))+(((-1.0)*r20*x8942*x8947))+(((-1.0)*x8943*x8946))+((x8937*x8940))+(((-1.0)*r21*x8938*x8947)));
evalcond[1]=((((-1.0)*r00*x8942*x8947))+(((-1.0)*r01*x8938*x8947))+((x8937*x8944))+(((-1.0)*r02*x8948))+(((-1.0)*x8945*x8946)));
evalcond[2]=((((-1.0)*x8940*x8947))+(((-1.0)*r20*x8942*x8946))+(((-1.0)*r21*x8938*x8946))+(((-1.0)*r22*sj5*x8946))+((x8936*x8943)));
evalcond[3]=(((x8936*x8939))+(((-1.0)*r10*x8942*x8946))+(((-1.0)*x8941*x8947))+(((-1.0)*r11*x8938*x8946))+(((-1.0)*r12*sj5*x8946)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8942*x8947))+(((-1.0)*x8939*x8946))+(((-1.0)*r12*x8948))+((x8937*x8941))+(((-1.0)*r11*x8938*x8947)));
evalcond[5]=((1.0)+(((-1.0)*x8944*x8947))+(((-1.0)*r00*x8942*x8946))+(((-1.0)*r01*x8938*x8946))+(((-1.0)*r02*sj5*x8946))+((x8936*x8945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8949=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8949.valid){
continue;
}
CheckValue<IkReal> x8950 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8949.value)))+(x8950.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8951=IKsin(j4);
IkReal x8952=IKcos(j4);
IkReal x8953=(cj5*cj6);
IkReal x8954=(r11*sj6);
IkReal x8955=(cj6*r20);
IkReal x8956=(cj6*r10);
IkReal x8957=(cj5*sj6);
IkReal x8958=(r21*sj6);
IkReal x8959=(cj6*r00);
IkReal x8960=(r01*sj6);
IkReal x8961=((1.0)*x8952);
IkReal x8962=((1.0)*x8951);
IkReal x8963=(sj5*x8962);
evalcond[0]=(((x8952*x8955))+(((-1.0)*r21*x8953*x8962))+(((-1.0)*r20*x8957*x8962))+(((-1.0)*r22*x8963))+(((-1.0)*x8958*x8961)));
evalcond[1]=(((x8952*x8959))+(((-1.0)*r01*x8953*x8962))+(((-1.0)*r00*x8957*x8962))+(((-1.0)*r02*x8963))+(((-1.0)*x8960*x8961)));
evalcond[2]=((((-1.0)*r21*x8953*x8961))+(((-1.0)*r20*x8957*x8961))+((x8951*x8958))+(((-1.0)*x8955*x8962))+(((-1.0)*r22*sj5*x8961)));
evalcond[3]=((((-1.0)*r12*sj5*x8961))+((x8951*x8954))+(((-1.0)*r10*x8957*x8961))+(((-1.0)*x8956*x8962))+(((-1.0)*r11*x8953*x8961)));
evalcond[4]=((-1.0)+((x8952*x8956))+(((-1.0)*r12*x8963))+(((-1.0)*x8954*x8961))+(((-1.0)*r10*x8957*x8962))+(((-1.0)*r11*x8953*x8962)));
evalcond[5]=((1.0)+(((-1.0)*r01*x8953*x8961))+(((-1.0)*x8959*x8962))+((x8951*x8960))+(((-1.0)*r00*x8957*x8961))+(((-1.0)*r02*sj5*x8961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8964=((1.0)*cj5);
IkReal x8965=((0.01)*cj5);
IkReal x8966=(cj6*r11);
IkReal x8967=(r20*sj6);
IkReal x8968=((0.01)*sj5);
IkReal x8969=(cj6*r01);
IkReal x8970=((0.37429)*cj5);
IkReal x8971=((0.37429)*sj5);
IkReal x8972=(cj6*r21);
IkReal x8973=(r10*sj5*sj6);
IkReal x8974=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x8968))+(((-1.0)*pz))+((x8965*x8972))+(((-1.0)*x8967*x8971))+((x8965*x8967))+(((-1.0)*x8971*x8972))+((r22*x8970)));
evalcond[2]=((0.29542)+((r02*x8968))+(((-1.0)*px))+((r00*sj6*x8965))+(((-1.0)*x8969*x8971))+((x8965*x8969))+((r02*x8970))+(((-1.0)*r00*sj6*x8971)));
evalcond[3]=((((-1.0)*r10*sj6*x8971))+((r12*x8970))+((r10*sj6*x8965))+(((-1.0)*py))+(((-1.0)*x8966*x8971))+((x8965*x8966))+((r12*x8968)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x8964))+((sj5*x8972))+((sj5*x8967)));
evalcond[5]=((((-1.0)*r12*x8964))+x8973+((sj5*x8966)));
evalcond[6]=(x8974+((sj5*x8969))+(((-1.0)*r02*x8964)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8975=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8975;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8976=((1.0)*sj5);
IkReal x8977=(((cj5*r22))+(((-1.0)*r20*sj6*x8976))+(((-1.0)*cj6*r21*x8976)));
j4eval[0]=x8977;
j4eval[1]=IKsign(x8977);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8978=cj6*cj6;
IkReal x8979=cj5*cj5;
IkReal x8980=r00*r00;
IkReal x8981=r01*r01;
IkReal x8982=r02*r02;
IkReal x8983=(cj6*r00);
IkReal x8984=(cj5*cj6*r01);
IkReal x8985=((2.0)*r02*sj5);
IkReal x8986=((1.0)*x8978);
IkReal x8987=((2.0)*r01*sj6);
IkReal x8988=(cj5*r00*sj6);
IkReal x8989=(x8979*x8980);
IkReal x8990=(((x8983*x8987))+(((-1.0)*x8989))+(((-1.0)*x8982))+(((-1.0)*x8981))+(((-1.0)*x8979*x8983*x8987))+(((-1.0)*x8980*x8986))+(((-1.0)*x8984*x8985))+((x8979*x8982))+(((-1.0)*x8979*x8981*x8986))+(((-1.0)*x8985*x8988))+((x8978*x8981))+((x8978*x8989)));
j4eval[0]=x8990;
j4eval[1]=((IKabs((x8984+x8988+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x8983))));
j4eval[2]=IKsign(x8990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8991=cj6*cj6;
IkReal x8992=cj5*cj5;
IkReal x8993=r00*r00;
IkReal x8994=r01*r01;
IkReal x8995=r02*r02;
IkReal x8996=(cj6*r00);
IkReal x8997=(cj5*cj6*r01);
IkReal x8998=((2.0)*r02*sj5);
IkReal x8999=((1.0)*x8991);
IkReal x9000=((2.0)*r01*sj6);
IkReal x9001=(cj5*r00*sj6);
IkReal x9002=(x8992*x8993);
CheckValue<IkReal> x9003=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8992*x8996*x9000))+(((-1.0)*x8998*x9001))+(((-1.0)*x9002))+(((-1.0)*x8993*x8999))+((x8991*x8994))+(((-1.0)*x8997*x8998))+((x8996*x9000))+((x8992*x8995))+(((-1.0)*x8994))+(((-1.0)*x8995))+((x8991*x9002))+(((-1.0)*x8992*x8994*x8999)))),-1);
if(!x9003.valid){
continue;
}
CheckValue<IkReal> x9004 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8996)),(x8997+x9001+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x9004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9003.value)))+(x9004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9005=IKsin(j4);
IkReal x9006=IKcos(j4);
IkReal x9007=(cj5*cj6);
IkReal x9008=(r11*sj6);
IkReal x9009=(cj6*r20);
IkReal x9010=(cj6*r10);
IkReal x9011=(cj5*sj6);
IkReal x9012=(r21*sj6);
IkReal x9013=(cj6*r00);
IkReal x9014=(r01*sj6);
IkReal x9015=((1.0)*x9006);
IkReal x9016=((1.0)*x9005);
IkReal x9017=(sj5*x9016);
evalcond[0]=((((-1.0)*r21*x9007*x9016))+(((-1.0)*r22*x9017))+((x9006*x9009))+(((-1.0)*x9012*x9015))+(((-1.0)*r20*x9011*x9016)));
evalcond[1]=((((-1.0)*r00*x9011*x9016))+(((-1.0)*x9014*x9015))+(((-1.0)*r01*x9007*x9016))+((x9006*x9013))+(((-1.0)*r02*x9017)));
evalcond[2]=((((-1.0)*r21*x9007*x9015))+(((-1.0)*x9009*x9016))+((x9005*x9012))+(((-1.0)*r22*sj5*x9015))+(((-1.0)*r20*x9011*x9015)));
evalcond[3]=(((x9005*x9008))+(((-1.0)*r11*x9007*x9015))+(((-1.0)*r10*x9011*x9015))+(((-1.0)*x9010*x9016))+(((-1.0)*r12*sj5*x9015)));
evalcond[4]=((1.0)+(((-1.0)*r12*x9017))+(((-1.0)*x9008*x9015))+((x9006*x9010))+(((-1.0)*r11*x9007*x9016))+(((-1.0)*r10*x9011*x9016)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x9011*x9015))+(((-1.0)*r01*x9007*x9015))+(((-1.0)*r02*sj5*x9015))+(((-1.0)*x9013*x9016))+((x9005*x9014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9018=((1.0)*sj5);
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
CheckValue<IkReal> x9020=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x9018))+(((-1.0)*r20*sj6*x9018)))),-1);
if(!x9020.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9019.value)+(((1.5707963267949)*(x9020.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9021=IKsin(j4);
IkReal x9022=IKcos(j4);
IkReal x9023=(cj5*cj6);
IkReal x9024=(r11*sj6);
IkReal x9025=(cj6*r20);
IkReal x9026=(cj6*r10);
IkReal x9027=(cj5*sj6);
IkReal x9028=(r21*sj6);
IkReal x9029=(cj6*r00);
IkReal x9030=(r01*sj6);
IkReal x9031=((1.0)*x9022);
IkReal x9032=((1.0)*x9021);
IkReal x9033=(sj5*x9032);
evalcond[0]=((((-1.0)*r21*x9023*x9032))+(((-1.0)*x9028*x9031))+(((-1.0)*r22*x9033))+((x9022*x9025))+(((-1.0)*r20*x9027*x9032)));
evalcond[1]=((((-1.0)*x9030*x9031))+(((-1.0)*r00*x9027*x9032))+(((-1.0)*r01*x9023*x9032))+((x9022*x9029))+(((-1.0)*r02*x9033)));
evalcond[2]=((((-1.0)*r21*x9023*x9031))+(((-1.0)*r22*sj5*x9031))+(((-1.0)*x9025*x9032))+(((-1.0)*r20*x9027*x9031))+((x9021*x9028)));
evalcond[3]=((((-1.0)*r11*x9023*x9031))+(((-1.0)*r10*x9027*x9031))+(((-1.0)*r12*sj5*x9031))+(((-1.0)*x9026*x9032))+((x9021*x9024)));
evalcond[4]=((1.0)+(((-1.0)*r11*x9023*x9032))+(((-1.0)*r10*x9027*x9032))+(((-1.0)*r12*x9033))+(((-1.0)*x9024*x9031))+((x9022*x9026)));
evalcond[5]=((-1.0)+(((-1.0)*x9029*x9032))+(((-1.0)*r00*x9027*x9031))+(((-1.0)*r01*x9023*x9031))+((x9021*x9030))+(((-1.0)*r02*sj5*x9031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9034 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x9034.valid){
continue;
}
CheckValue<IkReal> x9035=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x9035.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9034.value)+(((1.5707963267949)*(x9035.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9036=IKsin(j4);
IkReal x9037=IKcos(j4);
IkReal x9038=(cj5*cj6);
IkReal x9039=(r11*sj6);
IkReal x9040=(cj6*r20);
IkReal x9041=(cj6*r10);
IkReal x9042=(cj5*sj6);
IkReal x9043=(r21*sj6);
IkReal x9044=(cj6*r00);
IkReal x9045=(r01*sj6);
IkReal x9046=((1.0)*x9037);
IkReal x9047=((1.0)*x9036);
IkReal x9048=(sj5*x9047);
evalcond[0]=((((-1.0)*r20*x9042*x9047))+(((-1.0)*r21*x9038*x9047))+(((-1.0)*x9043*x9046))+((x9037*x9040))+(((-1.0)*r22*x9048)));
evalcond[1]=((((-1.0)*x9045*x9046))+((x9037*x9044))+(((-1.0)*r00*x9042*x9047))+(((-1.0)*r01*x9038*x9047))+(((-1.0)*r02*x9048)));
evalcond[2]=((((-1.0)*r20*x9042*x9046))+(((-1.0)*r22*sj5*x9046))+(((-1.0)*r21*x9038*x9046))+(((-1.0)*x9040*x9047))+((x9036*x9043)));
evalcond[3]=((((-1.0)*x9041*x9047))+((x9036*x9039))+(((-1.0)*r10*x9042*x9046))+(((-1.0)*r12*sj5*x9046))+(((-1.0)*r11*x9038*x9046)));
evalcond[4]=((1.0)+((x9037*x9041))+(((-1.0)*r10*x9042*x9047))+(((-1.0)*x9039*x9046))+(((-1.0)*r12*x9048))+(((-1.0)*r11*x9038*x9047)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x9042*x9046))+(((-1.0)*r01*x9038*x9046))+((x9036*x9045))+(((-1.0)*r02*sj5*x9046))+(((-1.0)*x9044*x9047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9049=((1.0)*cj5);
IkReal x9050=((0.01)*cj5);
IkReal x9051=(cj6*r11);
IkReal x9052=(r20*sj6);
IkReal x9053=((0.01)*sj5);
IkReal x9054=(cj6*r01);
IkReal x9055=((0.37429)*cj5);
IkReal x9056=((0.37429)*sj5);
IkReal x9057=(cj6*r21);
IkReal x9058=(r10*sj5*sj6);
IkReal x9059=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x9056*x9057))+((x9050*x9052))+((x9050*x9057))+(((-1.0)*pz))+((r22*x9053))+((r22*x9055))+(((-1.0)*x9052*x9056)));
evalcond[2]=(((r00*sj6*x9050))+((x9050*x9054))+(((-1.0)*r00*sj6*x9056))+(((-1.0)*px))+(((-1.0)*x9054*x9056))+((r02*x9055))+((r02*x9053)));
evalcond[3]=((-0.29542)+((x9050*x9051))+((r10*sj6*x9050))+(((-1.0)*r10*sj6*x9056))+((r12*x9053))+((r12*x9055))+(((-1.0)*py))+(((-1.0)*x9051*x9056)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x9049))+((sj5*x9052))+((sj5*x9057)));
evalcond[5]=(x9058+(((-1.0)*r12*x9049))+((sj5*x9051)));
evalcond[6]=(x9059+((sj5*x9054))+(((-1.0)*r02*x9049)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9060=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9060;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x9060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9061=((1.0)*sj6);
IkReal x9062=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x9061)));
j4eval[0]=x9062;
j4eval[1]=IKsign(x9062);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x9061))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9063=r11*r11;
IkReal x9064=cj5*cj5;
IkReal x9065=cj6*cj6;
IkReal x9066=r10*r10;
IkReal x9067=r12*r12;
IkReal x9068=(r12*sj5);
IkReal x9069=(cj6*r10);
IkReal x9070=((1.0)*x9065);
IkReal x9071=(cj5*cj6*r11);
IkReal x9072=(cj5*r10*sj6);
IkReal x9073=((2.0)*r11*sj6);
IkReal x9074=(x9064*x9066);
IkReal x9075=((((-1.0)*x9063*x9070))+((x9064*x9069*x9073))+((x9063*x9064*x9065))+x9063+x9067+x9074+(((-1.0)*x9069*x9073))+((x9065*x9066))+(((-1.0)*x9064*x9067))+(((2.0)*x9068*x9071))+(((2.0)*x9068*x9072))+(((-1.0)*x9070*x9074)));
j4eval[0]=x9075;
j4eval[1]=IKsign(x9075);
j4eval[2]=((IKabs((x9069+(((-1.0)*r11*sj6)))))+(IKabs((x9068+x9072+x9071))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9076=r11*r11;
IkReal x9077=cj5*cj5;
IkReal x9078=cj6*cj6;
IkReal x9079=r10*r10;
IkReal x9080=r12*r12;
IkReal x9081=(r10*sj6);
IkReal x9082=(r12*sj5);
IkReal x9083=((1.0)*x9078);
IkReal x9084=(cj5*cj6*r11);
IkReal x9085=((2.0)*cj6*r11);
IkReal x9086=(x9077*x9079);
CheckValue<IkReal> x9087 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x9084+x9082+((cj5*x9081))),IKFAST_ATAN2_MAGTHRESH);
if(!x9087.valid){
continue;
}
CheckValue<IkReal> x9088=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9077*x9080))+((x9077*x9081*x9085))+((x9078*x9079))+x9076+x9086+x9080+(((-1.0)*x9081*x9085))+((x9076*x9077*x9078))+(((2.0)*x9082*x9084))+(((2.0)*cj5*x9081*x9082))+(((-1.0)*x9076*x9083))+(((-1.0)*x9083*x9086)))),-1);
if(!x9088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9087.value)+(((1.5707963267949)*(x9088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9089=IKsin(j4);
IkReal x9090=IKcos(j4);
IkReal x9091=(cj5*cj6);
IkReal x9092=(r11*sj6);
IkReal x9093=(cj6*r20);
IkReal x9094=(cj6*r10);
IkReal x9095=(cj5*sj6);
IkReal x9096=(r01*sj6);
IkReal x9097=(r21*sj6);
IkReal x9098=(cj6*r00);
IkReal x9099=((1.0)*x9090);
IkReal x9100=((1.0)*x9089);
IkReal x9101=(sj5*x9100);
evalcond[0]=((((-1.0)*r21*x9091*x9100))+(((-1.0)*r22*x9101))+((x9090*x9093))+(((-1.0)*r20*x9095*x9100))+(((-1.0)*x9097*x9099)));
evalcond[1]=((((-1.0)*x9092*x9099))+((x9090*x9094))+(((-1.0)*r12*x9101))+(((-1.0)*r10*x9095*x9100))+(((-1.0)*r11*x9091*x9100)));
evalcond[2]=((((-1.0)*x9093*x9100))+(((-1.0)*r22*sj5*x9099))+(((-1.0)*r20*x9095*x9099))+(((-1.0)*r21*x9091*x9099))+((x9089*x9097)));
evalcond[3]=((((-1.0)*r01*x9091*x9099))+(((-1.0)*r00*x9095*x9099))+((x9089*x9096))+(((-1.0)*r02*sj5*x9099))+(((-1.0)*x9098*x9100)));
evalcond[4]=((1.0)+(((-1.0)*r02*x9101))+(((-1.0)*r01*x9091*x9100))+((x9090*x9098))+(((-1.0)*r00*x9095*x9100))+(((-1.0)*x9096*x9099)));
evalcond[5]=((1.0)+(((-1.0)*r11*x9091*x9099))+(((-1.0)*x9094*x9100))+((x9089*x9092))+(((-1.0)*r12*sj5*x9099))+(((-1.0)*r10*x9095*x9099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9102=((1.0)*sj6);
CheckValue<IkReal> x9103=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x9102))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x9103.valid){
continue;
}
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9102))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9103.value)))+(x9104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9105=IKsin(j4);
IkReal x9106=IKcos(j4);
IkReal x9107=(cj5*cj6);
IkReal x9108=(r11*sj6);
IkReal x9109=(cj6*r20);
IkReal x9110=(cj6*r10);
IkReal x9111=(cj5*sj6);
IkReal x9112=(r01*sj6);
IkReal x9113=(r21*sj6);
IkReal x9114=(cj6*r00);
IkReal x9115=((1.0)*x9106);
IkReal x9116=((1.0)*x9105);
IkReal x9117=(sj5*x9116);
evalcond[0]=((((-1.0)*x9113*x9115))+((x9106*x9109))+(((-1.0)*r21*x9107*x9116))+(((-1.0)*r20*x9111*x9116))+(((-1.0)*r22*x9117)));
evalcond[1]=((((-1.0)*x9108*x9115))+(((-1.0)*r11*x9107*x9116))+((x9106*x9110))+(((-1.0)*r10*x9111*x9116))+(((-1.0)*r12*x9117)));
evalcond[2]=(((x9105*x9113))+(((-1.0)*x9109*x9116))+(((-1.0)*r21*x9107*x9115))+(((-1.0)*r20*x9111*x9115))+(((-1.0)*r22*sj5*x9115)));
evalcond[3]=(((x9105*x9112))+(((-1.0)*r01*x9107*x9115))+(((-1.0)*x9114*x9116))+(((-1.0)*r02*sj5*x9115))+(((-1.0)*r00*x9111*x9115)));
evalcond[4]=((1.0)+(((-1.0)*r01*x9107*x9116))+(((-1.0)*x9112*x9115))+(((-1.0)*r02*x9117))+((x9106*x9114))+(((-1.0)*r00*x9111*x9116)));
evalcond[5]=((1.0)+(((-1.0)*x9110*x9116))+(((-1.0)*r12*sj5*x9115))+((x9105*x9108))+(((-1.0)*r11*x9107*x9115))+(((-1.0)*r10*x9111*x9115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9118=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9118.valid){
continue;
}
CheckValue<IkReal> x9119 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x9119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9118.value)))+(x9119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9120=IKsin(j4);
IkReal x9121=IKcos(j4);
IkReal x9122=(cj5*cj6);
IkReal x9123=(r11*sj6);
IkReal x9124=(cj6*r20);
IkReal x9125=(cj6*r10);
IkReal x9126=(cj5*sj6);
IkReal x9127=(r01*sj6);
IkReal x9128=(r21*sj6);
IkReal x9129=(cj6*r00);
IkReal x9130=((1.0)*x9121);
IkReal x9131=((1.0)*x9120);
IkReal x9132=(sj5*x9131);
evalcond[0]=((((-1.0)*r21*x9122*x9131))+(((-1.0)*r20*x9126*x9131))+(((-1.0)*x9128*x9130))+(((-1.0)*r22*x9132))+((x9121*x9124)));
evalcond[1]=((((-1.0)*r12*x9132))+(((-1.0)*r11*x9122*x9131))+(((-1.0)*x9123*x9130))+(((-1.0)*r10*x9126*x9131))+((x9121*x9125)));
evalcond[2]=((((-1.0)*r21*x9122*x9130))+(((-1.0)*x9124*x9131))+(((-1.0)*r20*x9126*x9130))+(((-1.0)*r22*sj5*x9130))+((x9120*x9128)));
evalcond[3]=((((-1.0)*r01*x9122*x9130))+(((-1.0)*r02*sj5*x9130))+(((-1.0)*x9129*x9131))+(((-1.0)*r00*x9126*x9130))+((x9120*x9127)));
evalcond[4]=((1.0)+(((-1.0)*x9127*x9130))+(((-1.0)*r01*x9122*x9131))+(((-1.0)*r02*x9132))+(((-1.0)*r00*x9126*x9131))+((x9121*x9129)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x9130))+(((-1.0)*x9125*x9131))+(((-1.0)*r11*x9122*x9130))+(((-1.0)*r10*x9126*x9130))+((x9120*x9123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9133=((1.0)*cj5);
IkReal x9134=((0.01)*cj5);
IkReal x9135=(cj6*r11);
IkReal x9136=(r20*sj6);
IkReal x9137=((0.01)*sj5);
IkReal x9138=(cj6*r01);
IkReal x9139=((0.37429)*cj5);
IkReal x9140=((0.37429)*sj5);
IkReal x9141=(cj6*r21);
IkReal x9142=(r10*sj5*sj6);
IkReal x9143=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x9134*x9136))+(((-1.0)*x9140*x9141))+((x9134*x9141))+((r22*x9137))+((r22*x9139))+(((-1.0)*pz))+(((-1.0)*x9136*x9140)));
evalcond[2]=((((-1.0)*r00*sj6*x9140))+((x9134*x9138))+((r00*sj6*x9134))+(((-1.0)*px))+((r02*x9137))+((r02*x9139))+(((-1.0)*x9138*x9140)));
evalcond[3]=((0.29542)+((x9134*x9135))+((r10*sj6*x9134))+(((-1.0)*py))+((r12*x9137))+((r12*x9139))+(((-1.0)*x9135*x9140))+(((-1.0)*r10*sj6*x9140)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x9133))+((sj5*x9136))+((sj5*x9141)));
evalcond[5]=(x9142+(((-1.0)*r12*x9133))+((sj5*x9135)));
evalcond[6]=(x9143+(((-1.0)*r02*x9133))+((sj5*x9138)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9144=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9144;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x9144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9145=((1.0)*sj5);
IkReal x9146=(((cj5*r22))+(((-1.0)*cj6*r21*x9145))+(((-1.0)*r20*sj6*x9145)));
j4eval[0]=x9146;
j4eval[1]=IKsign(x9146);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9147=cj6*cj6;
IkReal x9148=cj5*cj5;
IkReal x9149=r10*r10;
IkReal x9150=r11*r11;
IkReal x9151=r12*r12;
IkReal x9152=(r10*sj6);
IkReal x9153=(r12*sj5);
IkReal x9154=((2.0)*cj6*r11);
IkReal x9155=((1.0)*x9149);
IkReal x9156=(x9147*x9150);
IkReal x9157=(((x9147*x9148*x9149))+(((-1.0)*x9147*x9155))+(((-1.0)*cj5*x9153*x9154))+((x9148*x9151))+(((-1.0)*x9148*x9152*x9154))+x9156+((x9152*x9154))+(((-1.0)*x9148*x9156))+(((-1.0)*x9148*x9155))+(((-1.0)*x9151))+(((-1.0)*x9150))+(((-2.0)*cj5*x9152*x9153)));
j4eval[0]=x9157;
j4eval[1]=((IKabs(((((-1.0)*r11*sj6))+((cj6*r10)))))+(IKabs((((cj5*x9152))+x9153+((cj5*cj6*r11))))));
j4eval[2]=IKsign(x9157);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9158=cj6*cj6;
IkReal x9159=cj5*cj5;
IkReal x9160=r10*r10;
IkReal x9161=r11*r11;
IkReal x9162=r12*r12;
IkReal x9163=(r10*sj6);
IkReal x9164=(r12*sj5);
IkReal x9165=((2.0)*cj6*r11);
IkReal x9166=(x9158*x9161);
IkReal x9167=(x9159*x9160);
CheckValue<IkReal> x9168 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x9164+((cj5*cj6*r11))+((cj5*x9163))),IKFAST_ATAN2_MAGTHRESH);
if(!x9168.valid){
continue;
}
CheckValue<IkReal> x9169=IKPowWithIntegerCheck(IKsign((((x9159*x9162))+(((-1.0)*x9167))+(((-1.0)*x9161))+(((-1.0)*x9162))+(((-1.0)*x9159*x9163*x9165))+(((-2.0)*cj5*x9163*x9164))+((x9163*x9165))+x9166+(((-1.0)*x9159*x9166))+((x9158*x9167))+(((-1.0)*cj5*x9164*x9165))+(((-1.0)*x9158*x9160)))),-1);
if(!x9169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9168.value)+(((1.5707963267949)*(x9169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9170=IKsin(j4);
IkReal x9171=IKcos(j4);
IkReal x9172=(cj5*cj6);
IkReal x9173=(r11*sj6);
IkReal x9174=(cj6*r20);
IkReal x9175=(cj6*r10);
IkReal x9176=(cj5*sj6);
IkReal x9177=(r01*sj6);
IkReal x9178=(r21*sj6);
IkReal x9179=(cj6*r00);
IkReal x9180=((1.0)*x9171);
IkReal x9181=((1.0)*x9170);
IkReal x9182=(sj5*x9181);
evalcond[0]=((((-1.0)*r22*x9182))+(((-1.0)*x9178*x9180))+(((-1.0)*r21*x9172*x9181))+((x9171*x9174))+(((-1.0)*r20*x9176*x9181)));
evalcond[1]=((((-1.0)*r12*x9182))+(((-1.0)*x9173*x9180))+(((-1.0)*r10*x9176*x9181))+(((-1.0)*r11*x9172*x9181))+((x9171*x9175)));
evalcond[2]=((((-1.0)*x9174*x9181))+((x9170*x9178))+(((-1.0)*r22*sj5*x9180))+(((-1.0)*r21*x9172*x9180))+(((-1.0)*r20*x9176*x9180)));
evalcond[3]=(((x9170*x9177))+(((-1.0)*r01*x9172*x9180))+(((-1.0)*x9179*x9181))+(((-1.0)*r00*x9176*x9180))+(((-1.0)*r02*sj5*x9180)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x9182))+(((-1.0)*r01*x9172*x9181))+(((-1.0)*r00*x9176*x9181))+(((-1.0)*x9177*x9180))+((x9171*x9179)));
evalcond[5]=((-1.0)+((x9170*x9173))+(((-1.0)*x9175*x9181))+(((-1.0)*r10*x9176*x9180))+(((-1.0)*r11*x9172*x9180))+(((-1.0)*r12*sj5*x9180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9183=((1.0)*sj5);
CheckValue<IkReal> x9184 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x9184.valid){
continue;
}
CheckValue<IkReal> x9185=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x9183))+(((-1.0)*cj6*r21*x9183)))),-1);
if(!x9185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9184.value)+(((1.5707963267949)*(x9185.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9186=IKsin(j4);
IkReal x9187=IKcos(j4);
IkReal x9188=(cj5*cj6);
IkReal x9189=(r11*sj6);
IkReal x9190=(cj6*r20);
IkReal x9191=(cj6*r10);
IkReal x9192=(cj5*sj6);
IkReal x9193=(r01*sj6);
IkReal x9194=(r21*sj6);
IkReal x9195=(cj6*r00);
IkReal x9196=((1.0)*x9187);
IkReal x9197=((1.0)*x9186);
IkReal x9198=(sj5*x9197);
evalcond[0]=((((-1.0)*r22*x9198))+(((-1.0)*r21*x9188*x9197))+((x9187*x9190))+(((-1.0)*x9194*x9196))+(((-1.0)*r20*x9192*x9197)));
evalcond[1]=((((-1.0)*x9189*x9196))+(((-1.0)*r12*x9198))+((x9187*x9191))+(((-1.0)*r11*x9188*x9197))+(((-1.0)*r10*x9192*x9197)));
evalcond[2]=((((-1.0)*r22*sj5*x9196))+((x9186*x9194))+(((-1.0)*r21*x9188*x9196))+(((-1.0)*x9190*x9197))+(((-1.0)*r20*x9192*x9196)));
evalcond[3]=((((-1.0)*r00*x9192*x9196))+((x9186*x9193))+(((-1.0)*r01*x9188*x9196))+(((-1.0)*r02*sj5*x9196))+(((-1.0)*x9195*x9197)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x9198))+(((-1.0)*r00*x9192*x9197))+(((-1.0)*r01*x9188*x9197))+((x9187*x9195))+(((-1.0)*x9193*x9196)));
evalcond[5]=((-1.0)+(((-1.0)*x9191*x9197))+(((-1.0)*r11*x9188*x9196))+((x9186*x9189))+(((-1.0)*r10*x9192*x9196))+(((-1.0)*r12*sj5*x9196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9199 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x9199.valid){
continue;
}
CheckValue<IkReal> x9200=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9199.value)+(((1.5707963267949)*(x9200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9201=IKsin(j4);
IkReal x9202=IKcos(j4);
IkReal x9203=(cj5*cj6);
IkReal x9204=(r11*sj6);
IkReal x9205=(cj6*r20);
IkReal x9206=(cj6*r10);
IkReal x9207=(cj5*sj6);
IkReal x9208=(r01*sj6);
IkReal x9209=(r21*sj6);
IkReal x9210=(cj6*r00);
IkReal x9211=((1.0)*x9202);
IkReal x9212=((1.0)*x9201);
IkReal x9213=(sj5*x9212);
evalcond[0]=(((x9202*x9205))+(((-1.0)*r21*x9203*x9212))+(((-1.0)*r20*x9207*x9212))+(((-1.0)*x9209*x9211))+(((-1.0)*r22*x9213)));
evalcond[1]=(((x9202*x9206))+(((-1.0)*r11*x9203*x9212))+(((-1.0)*x9204*x9211))+(((-1.0)*r12*x9213))+(((-1.0)*r10*x9207*x9212)));
evalcond[2]=(((x9201*x9209))+(((-1.0)*r22*sj5*x9211))+(((-1.0)*x9205*x9212))+(((-1.0)*r21*x9203*x9211))+(((-1.0)*r20*x9207*x9211)));
evalcond[3]=((((-1.0)*x9210*x9212))+(((-1.0)*r01*x9203*x9211))+((x9201*x9208))+(((-1.0)*r00*x9207*x9211))+(((-1.0)*r02*sj5*x9211)));
evalcond[4]=((-1.0)+((x9202*x9210))+(((-1.0)*r02*x9213))+(((-1.0)*r01*x9203*x9212))+(((-1.0)*x9208*x9211))+(((-1.0)*r00*x9207*x9212)));
evalcond[5]=((-1.0)+(((-1.0)*x9206*x9212))+(((-1.0)*r11*x9203*x9211))+((x9201*x9204))+(((-1.0)*r12*sj5*x9211))+(((-1.0)*r10*x9207*x9211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9214=cj6*cj6;
IkReal x9215=cj5*cj5;
IkReal x9216=((1.0)*r11);
IkReal x9217=(cj5*sj0);
IkReal x9218=(cj6*r21);
IkReal x9219=(r22*sj5);
IkReal x9220=(r20*sj6);
IkReal x9221=(r12*r22);
IkReal x9222=((1.0)*sj6);
IkReal x9223=(r21*x9214);
IkReal x9224=(r10*x9215);
IkReal x9225=(r11*x9215);
IkReal x9226=(r20*x9214);
IkReal x9227=(cj5*r12*sj5);
CheckValue<IkReal> x9228 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x9222))+((cj6*r20*sj0)))),(((sj0*x9219))+((x9217*x9218))+((x9217*x9220))),IKFAST_ATAN2_MAGTHRESH);
if(!x9228.valid){
continue;
}
CheckValue<IkReal> x9229=IKPowWithIntegerCheck(IKsign((((cj5*cj6*r11*x9219))+((r20*x9224))+(((-1.0)*x9216*x9223))+((r11*r21))+x9221+(((-1.0)*r10*x9218*x9222))+((x9218*x9227))+(((-1.0)*x9215*x9221))+(((-1.0)*x9224*x9226))+((x9220*x9227))+(((-1.0)*cj6*x9216*x9220))+((sj6*x9218*x9224))+((x9223*x9225))+((cj5*r10*sj6*x9219))+((cj6*x9220*x9225))+((r10*x9226)))),-1);
if(!x9229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9228.value)+(((1.5707963267949)*(x9229.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9230=IKsin(j4);
IkReal x9231=IKcos(j4);
IkReal x9232=(cj5*cj6);
IkReal x9233=(r11*sj6);
IkReal x9234=(cj6*r20);
IkReal x9235=(cj6*r10);
IkReal x9236=(cj5*sj6);
IkReal x9237=(r01*sj6);
IkReal x9238=(r21*sj6);
IkReal x9239=(cj6*r00);
IkReal x9240=((1.0)*x9231);
IkReal x9241=((1.0)*x9230);
IkReal x9242=(sj5*x9241);
evalcond[0]=((((-1.0)*r22*x9242))+((x9231*x9234))+(((-1.0)*r20*x9236*x9241))+(((-1.0)*x9238*x9240))+(((-1.0)*r21*x9232*x9241)));
evalcond[1]=((((-1.0)*r22*sj5*x9240))+(((-1.0)*r20*x9236*x9240))+((x9230*x9238))+(((-1.0)*x9234*x9241))+(((-1.0)*r21*x9232*x9240)));
evalcond[2]=((((-1.0)*r00*x9236*x9241))+sj0+(((-1.0)*x9237*x9240))+(((-1.0)*r01*x9232*x9241))+((x9231*x9239))+(((-1.0)*r02*x9242)));
evalcond[3]=((((-1.0)*r00*x9236*x9240))+(((-1.0)*r02*sj5*x9240))+cj0+(((-1.0)*r01*x9232*x9240))+((x9230*x9237))+(((-1.0)*x9239*x9241)));
evalcond[4]=(sj0+(((-1.0)*x9235*x9241))+(((-1.0)*r12*sj5*x9240))+(((-1.0)*r11*x9232*x9240))+(((-1.0)*r10*x9236*x9240))+((x9230*x9233)));
evalcond[5]=((((-1.0)*r11*x9232*x9241))+(((-1.0)*r12*x9242))+(((-1.0)*x9233*x9240))+(((-1.0)*r10*x9236*x9241))+((x9231*x9235))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9243=cj5*cj5;
IkReal x9244=cj6*cj6;
IkReal x9245=(r22*sj5);
IkReal x9246=(cj6*r21);
IkReal x9247=(r20*sj6);
IkReal x9248=((1.0)*sj6);
IkReal x9249=(cj0*cj5);
IkReal x9250=(r02*r22);
IkReal x9251=(cj6*r01);
IkReal x9252=(r00*sj6);
IkReal x9253=(cj5*r02*sj5);
IkReal x9254=(r01*x9243);
IkReal x9255=(r21*x9244);
IkReal x9256=(r00*r20*x9243);
CheckValue<IkReal> x9257=IKPowWithIntegerCheck(IKsign((((x9243*x9246*x9252))+((x9247*x9253))+((x9254*x9255))+((x9246*x9253))+(((-1.0)*r00*x9246*x9248))+x9256+x9250+(((-1.0)*x9243*x9250))+((r01*r21))+((r00*r20*x9244))+(((-1.0)*r01*x9255))+((cj5*x9245*x9251))+((cj5*x9245*x9252))+((x9243*x9247*x9251))+(((-1.0)*x9244*x9256))+(((-1.0)*x9247*x9251)))),-1);
if(!x9257.valid){
continue;
}
CheckValue<IkReal> x9258 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x9248)))),(((cj0*x9245))+((x9246*x9249))+((x9247*x9249))),IKFAST_ATAN2_MAGTHRESH);
if(!x9258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9257.value)))+(x9258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9259=IKsin(j4);
IkReal x9260=IKcos(j4);
IkReal x9261=(cj5*cj6);
IkReal x9262=(r11*sj6);
IkReal x9263=(cj6*r20);
IkReal x9264=(cj6*r10);
IkReal x9265=(cj5*sj6);
IkReal x9266=(r01*sj6);
IkReal x9267=(r21*sj6);
IkReal x9268=(cj6*r00);
IkReal x9269=((1.0)*x9260);
IkReal x9270=((1.0)*x9259);
IkReal x9271=(sj5*x9270);
evalcond[0]=((((-1.0)*r20*x9265*x9270))+(((-1.0)*r22*x9271))+(((-1.0)*r21*x9261*x9270))+(((-1.0)*x9267*x9269))+((x9260*x9263)));
evalcond[1]=(((x9259*x9267))+(((-1.0)*r21*x9261*x9269))+(((-1.0)*r20*x9265*x9269))+(((-1.0)*r22*sj5*x9269))+(((-1.0)*x9263*x9270)));
evalcond[2]=(sj0+(((-1.0)*r00*x9265*x9270))+(((-1.0)*r01*x9261*x9270))+(((-1.0)*r02*x9271))+((x9260*x9268))+(((-1.0)*x9266*x9269)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x9269))+((x9259*x9266))+(((-1.0)*r00*x9265*x9269))+(((-1.0)*r01*x9261*x9269))+(((-1.0)*x9268*x9270)));
evalcond[4]=((((-1.0)*r12*sj5*x9269))+sj0+((x9259*x9262))+(((-1.0)*r11*x9261*x9269))+(((-1.0)*r10*x9265*x9269))+(((-1.0)*x9264*x9270)));
evalcond[5]=((((-1.0)*r10*x9265*x9270))+(((-1.0)*r11*x9261*x9270))+(((-1.0)*x9262*x9269))+((x9260*x9264))+(((-1.0)*r12*x9271))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9272=(cj5*sj0);
IkReal x9273=((1.0)*sj5);
CheckValue<IkReal> x9274=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x9273))+(((-1.0)*cj6*r11*x9273)))),-1);
if(!x9274.valid){
continue;
}
CheckValue<IkReal> x9275 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((cj6*r21*x9272))+((r22*sj0*sj5))+((r20*sj6*x9272))),IKFAST_ATAN2_MAGTHRESH);
if(!x9275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9274.value)))+(x9275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9276=IKsin(j4);
IkReal x9277=IKcos(j4);
IkReal x9278=(cj5*cj6);
IkReal x9279=(r11*sj6);
IkReal x9280=(cj6*r20);
IkReal x9281=(cj6*r10);
IkReal x9282=(cj5*sj6);
IkReal x9283=(r01*sj6);
IkReal x9284=(r21*sj6);
IkReal x9285=(cj6*r00);
IkReal x9286=((1.0)*x9277);
IkReal x9287=((1.0)*x9276);
IkReal x9288=(sj5*x9287);
evalcond[0]=((((-1.0)*r20*x9282*x9287))+(((-1.0)*r22*x9288))+(((-1.0)*r21*x9278*x9287))+((x9277*x9280))+(((-1.0)*x9284*x9286)));
evalcond[1]=((((-1.0)*r20*x9282*x9286))+(((-1.0)*r22*sj5*x9286))+((x9276*x9284))+(((-1.0)*r21*x9278*x9286))+(((-1.0)*x9280*x9287)));
evalcond[2]=((((-1.0)*r01*x9278*x9287))+sj0+(((-1.0)*r02*x9288))+(((-1.0)*r00*x9282*x9287))+((x9277*x9285))+(((-1.0)*x9283*x9286)));
evalcond[3]=((((-1.0)*r01*x9278*x9286))+cj0+((x9276*x9283))+(((-1.0)*r02*sj5*x9286))+(((-1.0)*x9285*x9287))+(((-1.0)*r00*x9282*x9286)));
evalcond[4]=(sj0+(((-1.0)*r10*x9282*x9286))+((x9276*x9279))+(((-1.0)*x9281*x9287))+(((-1.0)*r11*x9278*x9286))+(((-1.0)*r12*sj5*x9286)));
evalcond[5]=((((-1.0)*r12*x9288))+(((-1.0)*r10*x9282*x9287))+(((-1.0)*x9279*x9286))+((x9277*x9281))+(((-1.0)*r11*x9278*x9287))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9289=cj5*cj5;
IkReal x9290=cj6*cj6;
IkReal x9291=r20*r20;
IkReal x9292=r21*r21;
IkReal x9293=r22*r22;
IkReal x9294=(r22*sj5);
IkReal x9295=(cj6*r20);
IkReal x9296=(cj1*sj2);
IkReal x9297=(r21*sj6);
IkReal x9298=(cj5*r20*sj6);
IkReal x9299=(cj5*cj6*r21);
IkReal x9300=((1.0)*x9289);
IkReal x9301=(x9290*x9291);
IkReal x9302=(x9290*x9292);
CheckValue<IkReal> x9303 = IKatan2WithCheck(IkReal((((x9296*x9299))+((x9296*x9298))+((x9294*x9296))+(((-1.0)*sj1*x9297))+((sj1*x9295)))),(((x9296*x9297))+(((-1.0)*x9295*x9296))+((sj1*x9299))+((sj1*x9298))+((sj1*x9294))),IKFAST_ATAN2_MAGTHRESH);
if(!x9303.valid){
continue;
}
CheckValue<IkReal> x9304=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9300*x9301))+x9301+x9292+x9293+((x9289*x9291))+(((-1.0)*x9302))+(((2.0)*x9294*x9298))+(((2.0)*x9294*x9299))+((x9289*x9302))+(((2.0)*x9289*x9295*x9297))+(((-1.0)*x9293*x9300))+(((-2.0)*x9295*x9297)))),-1);
if(!x9304.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9303.value)+(((1.5707963267949)*(x9304.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9305=IKsin(j4);
IkReal x9306=IKcos(j4);
IkReal x9307=(cj5*cj6);
IkReal x9308=((1.0)*cj1);
IkReal x9309=(sj1*sj2);
IkReal x9310=(r11*sj6);
IkReal x9311=(cj6*r20);
IkReal x9312=(cj6*r10);
IkReal x9313=(cj5*sj6);
IkReal x9314=(r01*sj6);
IkReal x9315=(r21*sj6);
IkReal x9316=(cj6*r00);
IkReal x9317=((1.0)*x9306);
IkReal x9318=((1.0)*x9305);
IkReal x9319=(sj5*x9318);
evalcond[0]=(((x9305*x9315))+sj1+(((-1.0)*r20*x9313*x9317))+(((-1.0)*r22*sj5*x9317))+(((-1.0)*x9311*x9318))+(((-1.0)*r21*x9307*x9317)));
evalcond[1]=((((-1.0)*r20*x9313*x9318))+((cj1*sj2))+((x9306*x9311))+(((-1.0)*r21*x9307*x9318))+(((-1.0)*r22*x9319))+(((-1.0)*x9315*x9317)));
evalcond[2]=((((-1.0)*x9316*x9318))+((x9305*x9314))+(((-1.0)*r02*sj5*x9317))+(((-1.0)*r00*x9313*x9317))+(((-1.0)*r01*x9307*x9317))+(((-1.0)*cj0*x9308)));
evalcond[3]=(((x9305*x9310))+(((-1.0)*r12*sj5*x9317))+(((-1.0)*sj0*x9308))+(((-1.0)*x9312*x9318))+(((-1.0)*r11*x9307*x9317))+(((-1.0)*r10*x9313*x9317)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*x9310*x9317))+((sj0*x9309))+((x9306*x9312))+(((-1.0)*r11*x9307*x9318))+(((-1.0)*r12*x9319))+(((-1.0)*r10*x9313*x9318)));
evalcond[5]=((((-1.0)*x9314*x9317))+(((-1.0)*r00*x9313*x9318))+((cj0*x9309))+(((-1.0)*cj2*sj0))+(((-1.0)*r01*x9307*x9318))+(((-1.0)*r02*x9319))+((x9306*x9316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9320=(cj6*sj1);
IkReal x9321=((1.0)*cj5);
IkReal x9322=((1.0)*sj5);
IkReal x9323=(cj1*sj0);
IkReal x9324=((1.0)*sj6);
CheckValue<IkReal> x9325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x9322))+(((-1.0)*cj6*r01*x9322))+((cj5*r02)))),-1);
if(!x9325.valid){
continue;
}
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9320*x9321))+(((-1.0)*r12*sj1*x9322))+(((-1.0)*r22*x9322*x9323))+(((-1.0)*r10*sj1*sj6*x9321))+(((-1.0)*r20*sj6*x9321*x9323))+(((-1.0)*cj6*r21*x9321*x9323)))),((((-1.0)*r11*sj1*x9324))+((cj6*r20*x9323))+((r10*x9320))+(((-1.0)*r21*x9323*x9324))),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9325.value)))+(x9326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9327=IKsin(j4);
IkReal x9328=IKcos(j4);
IkReal x9329=(cj5*cj6);
IkReal x9330=((1.0)*cj1);
IkReal x9331=(sj1*sj2);
IkReal x9332=(r11*sj6);
IkReal x9333=(cj6*r20);
IkReal x9334=(cj6*r10);
IkReal x9335=(cj5*sj6);
IkReal x9336=(r01*sj6);
IkReal x9337=(r21*sj6);
IkReal x9338=(cj6*r00);
IkReal x9339=((1.0)*x9328);
IkReal x9340=((1.0)*x9327);
IkReal x9341=(sj5*x9340);
evalcond[0]=(((x9327*x9337))+sj1+(((-1.0)*x9333*x9340))+(((-1.0)*r20*x9335*x9339))+(((-1.0)*r21*x9329*x9339))+(((-1.0)*r22*sj5*x9339)));
evalcond[1]=((((-1.0)*x9337*x9339))+((x9328*x9333))+(((-1.0)*r22*x9341))+((cj1*sj2))+(((-1.0)*r21*x9329*x9340))+(((-1.0)*r20*x9335*x9340)));
evalcond[2]=(((x9327*x9336))+(((-1.0)*cj0*x9330))+(((-1.0)*r00*x9335*x9339))+(((-1.0)*r01*x9329*x9339))+(((-1.0)*x9338*x9340))+(((-1.0)*r02*sj5*x9339)));
evalcond[3]=(((x9327*x9332))+(((-1.0)*r11*x9329*x9339))+(((-1.0)*r12*sj5*x9339))+(((-1.0)*r10*x9335*x9339))+(((-1.0)*sj0*x9330))+(((-1.0)*x9334*x9340)));
evalcond[4]=(((sj0*x9331))+((x9328*x9334))+(((-1.0)*r11*x9329*x9340))+((cj0*cj2))+(((-1.0)*x9332*x9339))+(((-1.0)*r10*x9335*x9340))+(((-1.0)*r12*x9341)));
evalcond[5]=(((cj0*x9331))+((x9328*x9338))+(((-1.0)*r02*x9341))+(((-1.0)*cj2*sj0))+(((-1.0)*r01*x9329*x9340))+(((-1.0)*x9336*x9339))+(((-1.0)*r00*x9335*x9340)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9342=(cj0*cj1);
IkReal x9343=((1.0)*sj1);
IkReal x9344=((1.0)*cj5);
IkReal x9345=(cj5*x9343);
CheckValue<IkReal> x9346 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x9342))+(((-1.0)*cj6*r01*x9345))+(((-1.0)*r00*sj6*x9345))+(((-1.0)*r02*sj5*x9343))+(((-1.0)*cj6*r21*x9342*x9344))+(((-1.0)*r20*sj6*x9342*x9344)))),(((cj6*r00*sj1))+(((-1.0)*r21*sj6*x9342))+(((-1.0)*r01*sj6*x9343))+((cj6*r20*x9342))),IKFAST_ATAN2_MAGTHRESH);
if(!x9346.valid){
continue;
}
CheckValue<IkReal> x9347=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x9344))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9346.value)+(((1.5707963267949)*(x9347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9348=IKsin(j4);
IkReal x9349=IKcos(j4);
IkReal x9350=(cj5*cj6);
IkReal x9351=((1.0)*cj1);
IkReal x9352=(sj1*sj2);
IkReal x9353=(r11*sj6);
IkReal x9354=(cj6*r20);
IkReal x9355=(cj6*r10);
IkReal x9356=(cj5*sj6);
IkReal x9357=(r01*sj6);
IkReal x9358=(r21*sj6);
IkReal x9359=(cj6*r00);
IkReal x9360=((1.0)*x9349);
IkReal x9361=((1.0)*x9348);
IkReal x9362=(sj5*x9361);
evalcond[0]=((((-1.0)*r21*x9350*x9360))+sj1+((x9348*x9358))+(((-1.0)*r20*x9356*x9360))+(((-1.0)*x9354*x9361))+(((-1.0)*r22*sj5*x9360)));
evalcond[1]=((((-1.0)*r21*x9350*x9361))+(((-1.0)*x9358*x9360))+(((-1.0)*r20*x9356*x9361))+((cj1*sj2))+(((-1.0)*r22*x9362))+((x9349*x9354)));
evalcond[2]=((((-1.0)*r00*x9356*x9360))+((x9348*x9357))+(((-1.0)*x9359*x9361))+(((-1.0)*cj0*x9351))+(((-1.0)*r01*x9350*x9360))+(((-1.0)*r02*sj5*x9360)));
evalcond[3]=((((-1.0)*x9355*x9361))+((x9348*x9353))+(((-1.0)*r12*sj5*x9360))+(((-1.0)*sj0*x9351))+(((-1.0)*r10*x9356*x9360))+(((-1.0)*r11*x9350*x9360)));
evalcond[4]=((((-1.0)*x9353*x9360))+((cj0*cj2))+((sj0*x9352))+((x9349*x9355))+(((-1.0)*r10*x9356*x9361))+(((-1.0)*r12*x9362))+(((-1.0)*r11*x9350*x9361)));
evalcond[5]=((((-1.0)*r00*x9356*x9361))+((cj0*x9352))+(((-1.0)*cj2*sj0))+(((-1.0)*r02*x9362))+(((-1.0)*r01*x9350*x9361))+(((-1.0)*x9357*x9360))+((x9349*x9359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9363=(cj1*cj2);
IkReal x9364=(cj5*r22);
IkReal x9365=(cj6*r21);
IkReal x9366=((1.0)*sj5);
IkReal x9367=((0.01)*cj5);
IkReal x9368=(r20*sj6);
IkReal x9369=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x9365*x9369))+(((-0.069)*x9363))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x9365*x9367))+(((0.37429)*x9364))+(((-1.0)*x9368*x9369))+((x9367*x9368))+(((-0.36442)*sj1)));
evalcond[2]=((((-1.0)*x9365*x9366))+x9364+(((-1.0)*x9366*x9368))+(((-1.0)*x9363)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9370=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x9370;
j0eval[1]=IKsign(x9370);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9371=cj5*cj5;
IkReal x9372=cj6*cj6;
IkReal x9373=r22*r22;
IkReal x9374=r21*r21;
IkReal x9375=r20*r20;
IkReal x9376=(cj6*r21);
IkReal x9377=((2.0)*r20*sj6);
IkReal x9378=(cj5*r22*sj5);
IkReal x9379=((1.0)*x9371);
IkReal x9380=(x9372*x9374);
IkReal x9381=(x9372*x9375);
IkReal x9382=(x9380+((x9376*x9377))+(((-1.0)*x9379*x9380))+(((-2.0)*x9376*x9378))+(((-1.0)*x9374))+(((-1.0)*x9373))+((x9371*x9381))+(((-1.0)*x9381))+(((-1.0)*x9377*x9378))+((x9371*x9373))+(((-1.0)*x9375*x9379))+(((-1.0)*x9371*x9376*x9377)));
j4eval[0]=x9382;
j4eval[1]=IKsign(x9382);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9383=cj1*cj1;
IkReal x9384=cj2*cj2;
IkReal x9385=(cj2*sj1);
IkReal x9386=(x9383*x9384);
j0eval[0]=((-1.0)+(((5.28144927536232)*cj1*x9385))+x9385+x9386);
j0eval[1]=IKsign(((-69.0)+(((364.42)*cj1*x9385))+(((69.0)*x9386))+(((69.0)*x9385))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x9387=(cj5*r22);
IkReal x9388=(cj6*r21);
IkReal x9389=((1.0)*sj5);
IkReal x9390=((0.01)*cj5);
IkReal x9391=(r20*sj6);
IkReal x9392=((0.37429)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.069)+(((-1.0)*x9388*x9392))+((x9388*x9390))+(((-1.0)*x9391*x9392))+(((0.01)*r22*sj5))+(((0.37429)*x9387))+(((-1.0)*pz))+((x9390*x9391)));
evalcond[2]=((-1.0)+x9387+(((-1.0)*x9389*x9391))+(((-1.0)*x9388*x9389)));
evalcond[3]=(((cj5*r12))+(((-1.0)*r10*sj6*x9389))+(((-1.0)*cj6*r11*x9389)));
evalcond[4]=((((-1.0)*r00*sj6*x9389))+(((-1.0)*cj6*r01*x9389))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9393=(r10*sj6);
IkReal x9394=((0.863573439158322)*sj5);
IkReal x9395=((0.0230723086152)*cj5);
IkReal x9396=(cj6*r11);
IkReal x9397=(r00*sj6);
IkReal x9398=((0.0230723086152)*sj5);
IkReal x9399=((0.863573439158322)*cj5);
IkReal x9400=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*r12*x9399))+(((-1.0)*r12*x9398))+((x9394*x9396))+((x9393*x9394))+(((-1.0)*x9395*x9396))+(((-1.0)*x9393*x9395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+((x9394*x9397))+(((-1.0)*x9395*x9400))+((x9394*x9400))+(((-1.0)*r02*x9398))+(((-1.0)*r02*x9399))+(((-1.0)*x9395*x9397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*r12*x9399))+(((-1.0)*r12*x9398))+((x9394*x9396))+((x9393*x9394))+(((-1.0)*x9395*x9396))+(((-1.0)*x9393*x9395))))+IKsqr(((((2.30723086152)*px))+((x9394*x9397))+(((-1.0)*x9395*x9400))+((x9394*x9400))+(((-1.0)*r02*x9398))+(((-1.0)*r02*x9399))+(((-1.0)*x9395*x9397))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*r12*x9399))+(((-1.0)*r12*x9398))+((x9394*x9396))+((x9393*x9394))+(((-1.0)*x9395*x9396))+(((-1.0)*x9393*x9395))), ((((2.30723086152)*px))+((x9394*x9397))+(((-1.0)*x9395*x9400))+((x9394*x9400))+(((-1.0)*r02*x9398))+(((-1.0)*r02*x9399))+(((-1.0)*x9395*x9397))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x9401=((0.01)*cj5);
IkReal x9402=(cj6*r01);
IkReal x9403=((0.37429)*sj5);
IkReal x9404=(cj6*r11);
IkReal x9405=((0.01)*sj5);
IkReal x9406=(r00*sj6);
IkReal x9407=((0.37429)*cj5);
IkReal x9408=(r10*sj6);
evalcond[0]=(((x9401*x9402))+((x9401*x9406))+(((-1.0)*px))+((r02*x9405))+((r02*x9407))+(((-1.0)*x9403*x9406))+(((-1.0)*x9402*x9403))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=(((r12*x9407))+((r12*x9405))+(((0.43342)*(IKsin(j0))))+((x9401*x9404))+((x9401*x9408))+(((-1.0)*py))+(((-1.0)*x9403*x9408))+(((-1.0)*x9403*x9404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9409=(cj0*r20);
IkReal x9410=(cj0*r21);
IkReal x9411=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9411;
j4eval[1]=((IKabs((((cj5*sj6*x9409))+((cj5*cj6*x9410))+((cj0*r22*sj5)))))+(IKabs((((sj6*x9410))+(((-1.0)*cj6*x9409))))));
j4eval[2]=IKsign(x9411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9412=(sj0*sj6);
IkReal x9413=((1.0)*cj6);
IkReal x9414=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9413))+((cj5*r02)));
j4eval[0]=x9414;
j4eval[1]=IKsign(x9414);
j4eval[2]=((IKabs((((r21*x9412))+(((-1.0)*r20*sj0*x9413)))))+(IKabs((((r22*sj0*sj5))+((cj5*r20*x9412))+((cj5*cj6*r21*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9415=cj6*cj6;
IkReal x9416=cj5*cj5;
IkReal x9417=(r12*sj5);
IkReal x9418=(r22*sj5);
IkReal x9419=((1.0)*r11);
IkReal x9420=(cj0*sj6);
IkReal x9421=(cj5*r20);
IkReal x9422=((1.0)*cj6);
IkReal x9423=(r10*r20);
IkReal x9424=(r10*sj6);
IkReal x9425=(r12*r22);
IkReal x9426=(cj5*cj6*r21);
IkReal x9427=(r21*x9415);
IkReal x9428=(cj6*r20*sj6);
IkReal x9429=(r11*x9416);
IkReal x9430=((1.0)*x9416);
IkReal x9431=((((-1.0)*x9425*x9430))+((cj5*x9418*x9424))+((cj6*r21*x9416*x9424))+(((-1.0)*r21*x9422*x9424))+((x9427*x9429))+((x9428*x9429))+((cj5*cj6*r11*x9418))+((r11*r21))+((x9417*x9426))+((x9416*x9423))+((x9415*x9423))+x9425+((sj6*x9417*x9421))+(((-1.0)*x9415*x9423*x9430))+(((-1.0)*x9419*x9428))+(((-1.0)*x9419*x9427)));
j4eval[0]=x9431;
j4eval[1]=IKsign(x9431);
j4eval[2]=((IKabs((((cj0*x9426))+((x9420*x9421))+((cj0*x9418)))))+(IKabs(((((-1.0)*cj0*r20*x9422))+((r21*x9420))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x9432=(cj5*r12);
IkReal x9433=(r10*sj6);
IkReal x9434=((0.37429)*sj5);
IkReal x9435=((0.01)*cj5);
IkReal x9436=(cj6*r11);
IkReal x9437=(r00*sj6);
IkReal x9438=(r20*sj6);
IkReal x9439=((1.0)*sj5);
IkReal x9440=((0.01)*sj5);
IkReal x9441=(cj6*r01);
IkReal x9442=(cj5*r02);
IkReal x9443=(cj6*r21);
IkReal x9444=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x9435*x9443))+(((0.37429)*x9444))+((r22*x9440))+(((-1.0)*x9434*x9438))+(((-1.0)*pz))+(((-1.0)*x9434*x9443))+((x9435*x9438)));
evalcond[2]=(((x9435*x9441))+(((0.37429)*x9442))+(((-1.0)*x9434*x9437))+(((-1.0)*px))+(((-1.0)*x9434*x9441))+((x9435*x9437))+((r02*x9440)));
evalcond[3]=((0.43342)+(((-1.0)*x9434*x9436))+(((-1.0)*py))+(((-1.0)*x9433*x9434))+((r12*x9440))+((x9433*x9435))+((x9435*x9436))+(((0.37429)*x9432)));
evalcond[4]=((-1.0)+(((-1.0)*x9438*x9439))+(((-1.0)*x9439*x9443))+x9444);
evalcond[5]=((((-1.0)*x9433*x9439))+(((-1.0)*x9436*x9439))+x9432);
evalcond[6]=((((-1.0)*x9439*x9441))+(((-1.0)*x9437*x9439))+x9442);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9445=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9445;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x9445);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9446=((1.0)*sj5);
IkReal x9447=((((-1.0)*cj6*r01*x9446))+((cj5*r02))+(((-1.0)*r00*sj6*x9446)));
j4eval[0]=x9447;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9448=cj6*cj6;
IkReal x9449=cj5*cj5;
IkReal x9450=r00*r00;
IkReal x9451=r01*r01;
IkReal x9452=r02*r02;
IkReal x9453=(r00*sj6);
IkReal x9454=((2.0)*cj6*r01);
IkReal x9455=(cj5*r02*sj5);
IkReal x9456=((1.0)*x9448);
IkReal x9457=(x9449*x9450);
IkReal x9458=((((-1.0)*x9450*x9456))+((x9448*x9451))+((x9448*x9457))+((x9453*x9454))+((x9449*x9452))+(((-1.0)*x9451))+(((-1.0)*x9452))+(((-1.0)*x9457))+(((-1.0)*x9454*x9455))+(((-1.0)*x9449*x9453*x9454))+(((-2.0)*x9453*x9455))+(((-1.0)*x9449*x9451*x9456)));
j4eval[0]=x9458;
j4eval[1]=((IKabs((((r01*sj6))+(((-1.0)*cj6*r00)))))+(IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x9453))))));
j4eval[2]=IKsign(x9458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9459=cj6*cj6;
IkReal x9460=cj5*cj5;
IkReal x9461=r00*r00;
IkReal x9462=r01*r01;
IkReal x9463=r02*r02;
IkReal x9464=(r01*sj6);
IkReal x9465=(cj6*r00);
IkReal x9466=(cj5*cj6*r01);
IkReal x9467=((2.0)*r02*sj5);
IkReal x9468=((1.0)*x9459);
IkReal x9469=(cj5*r00*sj6);
IkReal x9470=(x9460*x9461);
CheckValue<IkReal> x9471 = IKatan2WithCheck(IkReal((((r02*sj5))+x9466+x9469)),(x9464+(((-1.0)*x9465))),IKFAST_ATAN2_MAGTHRESH);
if(!x9471.valid){
continue;
}
CheckValue<IkReal> x9472=IKPowWithIntegerCheck(IKsign(((((2.0)*x9464*x9465))+(((-2.0)*x9460*x9464*x9465))+((x9459*x9470))+((x9459*x9462))+((x9460*x9463))+(((-1.0)*x9470))+(((-1.0)*x9467*x9469))+(((-1.0)*x9460*x9462*x9468))+(((-1.0)*x9462))+(((-1.0)*x9463))+(((-1.0)*x9466*x9467))+(((-1.0)*x9461*x9468)))),-1);
if(!x9472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9471.value)+(((1.5707963267949)*(x9472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9473=IKcos(j4);
IkReal x9474=IKsin(j4);
IkReal x9475=(cj5*sj6);
IkReal x9476=(cj5*r21);
IkReal x9477=(cj5*r01);
IkReal x9478=(cj5*cj6*r11);
IkReal x9479=((1.0)*x9474);
IkReal x9480=(cj6*x9473);
IkReal x9481=(sj5*x9473);
IkReal x9482=(cj6*x9474);
IkReal x9483=(sj5*x9479);
IkReal x9484=((1.0)*sj6*x9473);
evalcond[0]=(((x9476*x9480))+(((-1.0)*r21*sj6*x9479))+((r20*x9482))+((r20*x9473*x9475))+((r22*x9481)));
evalcond[1]=(((x9477*x9480))+((r00*x9482))+((r02*x9481))+(((-1.0)*r01*sj6*x9479))+((r00*x9473*x9475)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x9479))+((r12*x9481))+((x9473*x9478))+((r10*x9482))+((r10*x9473*x9475)));
evalcond[3]=((((-1.0)*r21*x9484))+(((-1.0)*cj6*x9476*x9479))+((r20*x9480))+(((-1.0)*r22*x9483))+(((-1.0)*r20*x9475*x9479)));
evalcond[4]=((((-1.0)*x9478*x9479))+(((-1.0)*r10*x9475*x9479))+((r10*x9480))+(((-1.0)*r11*x9484))+(((-1.0)*r12*x9483)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x9477*x9479))+(((-1.0)*r00*x9475*x9479))+(((-1.0)*r01*x9484))+((r00*x9480))+(((-1.0)*r02*x9483)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9485=((1.0)*sj5);
CheckValue<IkReal> x9486=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x9485))+(((-1.0)*cj6*r01*x9485))+((cj5*r02)))),-1);
if(!x9486.valid){
continue;
}
CheckValue<IkReal> x9487 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9486.value)))+(x9487.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9488=IKcos(j4);
IkReal x9489=IKsin(j4);
IkReal x9490=(cj5*sj6);
IkReal x9491=(cj5*r21);
IkReal x9492=(cj5*r01);
IkReal x9493=(cj5*cj6*r11);
IkReal x9494=((1.0)*x9489);
IkReal x9495=(cj6*x9488);
IkReal x9496=(sj5*x9488);
IkReal x9497=(cj6*x9489);
IkReal x9498=(sj5*x9494);
IkReal x9499=((1.0)*sj6*x9488);
evalcond[0]=((((-1.0)*r21*sj6*x9494))+((r22*x9496))+((x9491*x9495))+((r20*x9488*x9490))+((r20*x9497)));
evalcond[1]=(((r02*x9496))+((x9492*x9495))+((r00*x9497))+(((-1.0)*r01*sj6*x9494))+((r00*x9488*x9490)));
evalcond[2]=((-1.0)+((r12*x9496))+((r10*x9488*x9490))+(((-1.0)*r11*sj6*x9494))+((r10*x9497))+((x9488*x9493)));
evalcond[3]=((((-1.0)*r22*x9498))+(((-1.0)*cj6*x9491*x9494))+(((-1.0)*r21*x9499))+(((-1.0)*r20*x9490*x9494))+((r20*x9495)));
evalcond[4]=((((-1.0)*x9493*x9494))+((r10*x9495))+(((-1.0)*r10*x9490*x9494))+(((-1.0)*r12*x9498))+(((-1.0)*r11*x9499)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x9498))+(((-1.0)*cj6*x9492*x9494))+(((-1.0)*r00*x9490*x9494))+((r00*x9495))+(((-1.0)*r01*x9499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9500 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x9500.valid){
continue;
}
CheckValue<IkReal> x9501=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9500.value)+(((1.5707963267949)*(x9501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9502=IKcos(j4);
IkReal x9503=IKsin(j4);
IkReal x9504=(cj5*sj6);
IkReal x9505=(cj5*r21);
IkReal x9506=(cj5*r01);
IkReal x9507=(cj5*cj6*r11);
IkReal x9508=((1.0)*x9503);
IkReal x9509=(cj6*x9502);
IkReal x9510=(sj5*x9502);
IkReal x9511=(cj6*x9503);
IkReal x9512=(sj5*x9508);
IkReal x9513=((1.0)*sj6*x9502);
evalcond[0]=(((x9505*x9509))+((r22*x9510))+(((-1.0)*r21*sj6*x9508))+((r20*x9502*x9504))+((r20*x9511)));
evalcond[1]=(((r00*x9511))+((r00*x9502*x9504))+((x9506*x9509))+((r02*x9510))+(((-1.0)*r01*sj6*x9508)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x9508))+((x9502*x9507))+((r12*x9510))+((r10*x9511))+((r10*x9502*x9504)));
evalcond[3]=((((-1.0)*cj6*x9505*x9508))+(((-1.0)*r21*x9513))+((r20*x9509))+(((-1.0)*r22*x9512))+(((-1.0)*r20*x9504*x9508)));
evalcond[4]=(((r10*x9509))+(((-1.0)*x9507*x9508))+(((-1.0)*r10*x9504*x9508))+(((-1.0)*r12*x9512))+(((-1.0)*r11*x9513)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x9512))+(((-1.0)*cj6*x9506*x9508))+(((-1.0)*r01*x9513))+(((-1.0)*r00*x9504*x9508))+((r00*x9509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9514=(cj5*r12);
IkReal x9515=(r10*sj6);
IkReal x9516=((0.37429)*sj5);
IkReal x9517=((0.01)*cj5);
IkReal x9518=(cj6*r11);
IkReal x9519=(r00*sj6);
IkReal x9520=(r20*sj6);
IkReal x9521=((1.0)*sj5);
IkReal x9522=((0.01)*sj5);
IkReal x9523=(cj6*r01);
IkReal x9524=(cj5*r02);
IkReal x9525=(cj6*r21);
IkReal x9526=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x9517*x9525))+((x9517*x9520))+(((0.37429)*x9526))+(((-1.0)*pz))+(((-1.0)*x9516*x9525))+(((-1.0)*x9516*x9520))+((r22*x9522)));
evalcond[2]=(((x9517*x9523))+((r02*x9522))+((x9517*x9519))+(((-1.0)*x9516*x9519))+(((0.37429)*x9524))+(((-1.0)*px))+(((-1.0)*x9516*x9523)));
evalcond[3]=((-0.43342)+((r12*x9522))+((x9517*x9518))+(((-1.0)*x9516*x9518))+(((0.37429)*x9514))+(((-1.0)*py))+(((-1.0)*x9515*x9516))+((x9515*x9517)));
evalcond[4]=((-1.0)+(((-1.0)*x9521*x9525))+x9526+(((-1.0)*x9520*x9521)));
evalcond[5]=((((-1.0)*x9515*x9521))+(((-1.0)*x9518*x9521))+x9514);
evalcond[6]=((((-1.0)*x9521*x9523))+(((-1.0)*x9519*x9521))+x9524);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9527=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x9527;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9528=((1.0)*cj6);
IkReal x9529=(((cj5*r22))+(((-1.0)*r21*sj5*x9528))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x9529;
j4eval[1]=IKsign(x9529);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs(((((-1.0)*r00*x9528))+((r01*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9530=cj6*cj6;
IkReal x9531=r01*r01;
IkReal x9532=cj5*cj5;
IkReal x9533=r00*r00;
IkReal x9534=r02*r02;
IkReal x9535=(r02*sj5);
IkReal x9536=(r01*sj6);
IkReal x9537=(cj6*r00);
IkReal x9538=(cj5*cj6*r01);
IkReal x9539=(cj5*r00*sj6);
IkReal x9540=((1.0)*x9532);
IkReal x9541=(x9530*x9533);
IkReal x9542=(x9530*x9531);
IkReal x9543=((((-1.0)*x9540*x9541))+(((-1.0)*x9534*x9540))+(((-2.0)*x9536*x9537))+(((2.0)*x9535*x9539))+(((2.0)*x9535*x9538))+(((2.0)*x9532*x9536*x9537))+x9534+x9531+x9541+((x9532*x9533))+(((-1.0)*x9542))+((x9532*x9542)));
j4eval[0]=x9543;
j4eval[1]=((IKabs(((((-1.0)*x9537))+x9536)))+(IKabs((x9539+x9538+x9535))));
j4eval[2]=IKsign(x9543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9544=cj6*cj6;
IkReal x9545=r01*r01;
IkReal x9546=cj5*cj5;
IkReal x9547=r00*r00;
IkReal x9548=r02*r02;
IkReal x9549=(r00*sj6);
IkReal x9550=(r02*sj5);
IkReal x9551=((2.0)*cj6*r01);
IkReal x9552=((1.0)*x9546);
IkReal x9553=(x9544*x9547);
IkReal x9554=(x9544*x9545);
CheckValue<IkReal> x9555=IKPowWithIntegerCheck(IKsign((((x9546*x9547))+((cj5*x9550*x9551))+(((2.0)*cj5*x9549*x9550))+x9548+x9545+x9553+((x9546*x9549*x9551))+(((-1.0)*x9548*x9552))+(((-1.0)*x9549*x9551))+((x9546*x9554))+(((-1.0)*x9554))+(((-1.0)*x9552*x9553)))),-1);
if(!x9555.valid){
continue;
}
CheckValue<IkReal> x9556 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+x9550+((cj5*x9549)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x9556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9555.value)))+(x9556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9557=IKcos(j4);
IkReal x9558=IKsin(j4);
IkReal x9559=(cj5*sj6);
IkReal x9560=(cj5*r21);
IkReal x9561=(cj5*r01);
IkReal x9562=(cj5*cj6*r11);
IkReal x9563=((1.0)*x9558);
IkReal x9564=(cj6*x9557);
IkReal x9565=(sj5*x9557);
IkReal x9566=(cj6*x9558);
IkReal x9567=(sj5*x9563);
IkReal x9568=((1.0)*sj6*x9557);
evalcond[0]=(((x9560*x9564))+((r20*x9557*x9559))+((r22*x9565))+(((-1.0)*r21*sj6*x9563))+((r20*x9566)));
evalcond[1]=(((r00*x9566))+((r00*x9557*x9559))+((x9561*x9564))+(((-1.0)*r01*sj6*x9563))+((r02*x9565)));
evalcond[2]=((1.0)+((r10*x9557*x9559))+((r12*x9565))+((x9557*x9562))+((r10*x9566))+(((-1.0)*r11*sj6*x9563)));
evalcond[3]=((((-1.0)*r21*x9568))+(((-1.0)*r20*x9559*x9563))+(((-1.0)*r22*x9567))+((r20*x9564))+(((-1.0)*cj6*x9560*x9563)));
evalcond[4]=((((-1.0)*r10*x9559*x9563))+(((-1.0)*r11*x9568))+(((-1.0)*r12*x9567))+(((-1.0)*x9562*x9563))+((r10*x9564)));
evalcond[5]=((1.0)+((r00*x9564))+(((-1.0)*cj6*x9561*x9563))+(((-1.0)*r01*x9568))+(((-1.0)*r00*x9559*x9563))+(((-1.0)*r02*x9567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9569=((1.0)*cj6);
CheckValue<IkReal> x9570 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x9569))),IKFAST_ATAN2_MAGTHRESH);
if(!x9570.valid){
continue;
}
CheckValue<IkReal> x9571=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x9569))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x9571.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9570.value)+(((1.5707963267949)*(x9571.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9572=IKcos(j4);
IkReal x9573=IKsin(j4);
IkReal x9574=(cj5*sj6);
IkReal x9575=(cj5*r21);
IkReal x9576=(cj5*r01);
IkReal x9577=(cj5*cj6*r11);
IkReal x9578=((1.0)*x9573);
IkReal x9579=(cj6*x9572);
IkReal x9580=(sj5*x9572);
IkReal x9581=(cj6*x9573);
IkReal x9582=(sj5*x9578);
IkReal x9583=((1.0)*sj6*x9572);
evalcond[0]=(((x9575*x9579))+((r20*x9581))+((r22*x9580))+((r20*x9572*x9574))+(((-1.0)*r21*sj6*x9578)));
evalcond[1]=(((r00*x9572*x9574))+((r00*x9581))+((x9576*x9579))+(((-1.0)*r01*sj6*x9578))+((r02*x9580)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x9578))+((x9572*x9577))+((r10*x9581))+((r10*x9572*x9574))+((r12*x9580)));
evalcond[3]=((((-1.0)*r20*x9574*x9578))+(((-1.0)*r22*x9582))+(((-1.0)*r21*x9583))+(((-1.0)*cj6*x9575*x9578))+((r20*x9579)));
evalcond[4]=((((-1.0)*x9577*x9578))+(((-1.0)*r10*x9574*x9578))+(((-1.0)*r12*x9582))+(((-1.0)*r11*x9583))+((r10*x9579)));
evalcond[5]=((1.0)+(((-1.0)*r00*x9574*x9578))+((r00*x9579))+(((-1.0)*cj6*x9576*x9578))+(((-1.0)*r01*x9583))+(((-1.0)*r02*x9582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9584=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x9584.valid){
continue;
}
CheckValue<IkReal> x9585 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9584.value)))+(x9585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9586=IKcos(j4);
IkReal x9587=IKsin(j4);
IkReal x9588=(cj5*sj6);
IkReal x9589=(cj5*r21);
IkReal x9590=(cj5*r01);
IkReal x9591=(cj5*cj6*r11);
IkReal x9592=((1.0)*x9587);
IkReal x9593=(cj6*x9586);
IkReal x9594=(sj5*x9586);
IkReal x9595=(cj6*x9587);
IkReal x9596=(sj5*x9592);
IkReal x9597=((1.0)*sj6*x9586);
evalcond[0]=(((r20*x9595))+(((-1.0)*r21*sj6*x9592))+((r22*x9594))+((r20*x9586*x9588))+((x9589*x9593)));
evalcond[1]=(((r00*x9586*x9588))+((r00*x9595))+((r02*x9594))+(((-1.0)*r01*sj6*x9592))+((x9590*x9593)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x9592))+((x9586*x9591))+((r10*x9595))+((r10*x9586*x9588))+((r12*x9594)));
evalcond[3]=(((r20*x9593))+(((-1.0)*r22*x9596))+(((-1.0)*r20*x9588*x9592))+(((-1.0)*r21*x9597))+(((-1.0)*cj6*x9589*x9592)));
evalcond[4]=((((-1.0)*r10*x9588*x9592))+((r10*x9593))+(((-1.0)*r11*x9597))+(((-1.0)*r12*x9596))+(((-1.0)*x9591*x9592)));
evalcond[5]=((1.0)+((r00*x9593))+(((-1.0)*cj6*x9590*x9592))+(((-1.0)*r01*x9597))+(((-1.0)*r00*x9588*x9592))+(((-1.0)*r02*x9596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9598=(cj5*r12);
IkReal x9599=(r10*sj6);
IkReal x9600=((0.37429)*sj5);
IkReal x9601=((0.01)*cj5);
IkReal x9602=(cj6*r11);
IkReal x9603=(r00*sj6);
IkReal x9604=(r20*sj6);
IkReal x9605=((1.0)*sj5);
IkReal x9606=((0.01)*sj5);
IkReal x9607=(cj6*r01);
IkReal x9608=(cj5*r02);
IkReal x9609=(cj6*r21);
IkReal x9610=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((0.37429)*x9610))+(((-1.0)*pz))+(((-1.0)*x9600*x9609))+(((-1.0)*x9600*x9604))+((r22*x9606))+((x9601*x9609))+((x9601*x9604)));
evalcond[2]=((0.43342)+(((0.37429)*x9608))+(((-1.0)*px))+(((-1.0)*x9600*x9607))+(((-1.0)*x9600*x9603))+((x9601*x9607))+((x9601*x9603))+((r02*x9606)));
evalcond[3]=((((0.37429)*x9598))+((r12*x9606))+(((-1.0)*py))+((x9599*x9601))+(((-1.0)*x9600*x9602))+((x9601*x9602))+(((-1.0)*x9599*x9600)));
evalcond[4]=((-1.0)+(((-1.0)*x9604*x9605))+x9610+(((-1.0)*x9605*x9609)));
evalcond[5]=((((-1.0)*x9602*x9605))+x9598+(((-1.0)*x9599*x9605)));
evalcond[6]=(x9608+(((-1.0)*x9605*x9607))+(((-1.0)*x9603*x9605)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9611=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9611;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9611);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9612=((1.0)*cj6);
IkReal x9613=(((cj5*r22))+(((-1.0)*r21*sj5*x9612))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x9613;
j4eval[1]=((IKabs(((((-1.0)*r10*x9612))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x9613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9614=r11*r11;
IkReal x9615=cj5*cj5;
IkReal x9616=cj6*cj6;
IkReal x9617=r10*r10;
IkReal x9618=r12*r12;
IkReal x9619=(r12*sj5);
IkReal x9620=(r11*sj6);
IkReal x9621=((1.0)*x9616);
IkReal x9622=(cj5*cj6*r11);
IkReal x9623=(cj5*r10*sj6);
IkReal x9624=((2.0)*cj6*r10);
IkReal x9625=(x9615*x9617);
IkReal x9626=(((x9616*x9617))+(((2.0)*x9619*x9623))+(((2.0)*x9619*x9622))+(((-1.0)*x9615*x9618))+((x9615*x9620*x9624))+(((-1.0)*x9620*x9624))+x9625+x9614+x9618+(((-1.0)*x9621*x9625))+((x9614*x9615*x9616))+(((-1.0)*x9614*x9621)));
j4eval[0]=x9626;
j4eval[1]=((IKabs((x9623+x9622+x9619)))+(IKabs(((((-1.0)*cj6*r10))+x9620))));
j4eval[2]=IKsign(x9626);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9627=r11*r11;
IkReal x9628=cj5*cj5;
IkReal x9629=cj6*cj6;
IkReal x9630=r10*r10;
IkReal x9631=r12*r12;
IkReal x9632=(r10*sj6);
IkReal x9633=(r12*sj5);
IkReal x9634=((1.0)*x9629);
IkReal x9635=(cj5*cj6*r11);
IkReal x9636=((2.0)*cj6*r11);
IkReal x9637=(x9628*x9630);
CheckValue<IkReal> x9638 = IKatan2WithCheck(IkReal((x9633+x9635+((cj5*x9632)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9638.valid){
continue;
}
CheckValue<IkReal> x9639=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x9632*x9633))+((x9629*x9630))+(((2.0)*x9633*x9635))+((x9627*x9628*x9629))+(((-1.0)*x9627*x9634))+(((-1.0)*x9628*x9631))+x9631+x9637+x9627+(((-1.0)*x9632*x9636))+((x9628*x9632*x9636))+(((-1.0)*x9634*x9637)))),-1);
if(!x9639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9638.value)+(((1.5707963267949)*(x9639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9640=IKcos(j4);
IkReal x9641=IKsin(j4);
IkReal x9642=(cj5*sj6);
IkReal x9643=(cj5*r01);
IkReal x9644=(cj5*r21);
IkReal x9645=(cj5*cj6*r11);
IkReal x9646=((1.0)*x9641);
IkReal x9647=(cj6*x9640);
IkReal x9648=(sj5*x9640);
IkReal x9649=(cj6*x9641);
IkReal x9650=(sj5*x9646);
IkReal x9651=((1.0)*sj6*x9640);
evalcond[0]=(((r22*x9648))+((r20*x9640*x9642))+(((-1.0)*r21*sj6*x9646))+((x9644*x9647))+((r20*x9649)));
evalcond[1]=(((x9640*x9645))+((r10*x9649))+(((-1.0)*r11*sj6*x9646))+((r10*x9640*x9642))+((r12*x9648)));
evalcond[2]=((-1.0)+((x9643*x9647))+((r02*x9648))+((r00*x9649))+((r00*x9640*x9642))+(((-1.0)*r01*sj6*x9646)));
evalcond[3]=((((-1.0)*r21*x9651))+(((-1.0)*cj6*x9644*x9646))+(((-1.0)*r20*x9642*x9646))+((r20*x9647))+(((-1.0)*r22*x9650)));
evalcond[4]=((((-1.0)*r01*x9651))+(((-1.0)*cj6*x9643*x9646))+(((-1.0)*r00*x9642*x9646))+((r00*x9647))+(((-1.0)*r02*x9650)));
evalcond[5]=((1.0)+((r10*x9647))+(((-1.0)*r11*x9651))+(((-1.0)*r12*x9650))+(((-1.0)*r10*x9642*x9646))+(((-1.0)*x9645*x9646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9652=((1.0)*cj6);
CheckValue<IkReal> x9653 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*r10*x9652))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9653.valid){
continue;
}
CheckValue<IkReal> x9654=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x9652))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x9654.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9653.value)+(((1.5707963267949)*(x9654.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9655=IKcos(j4);
IkReal x9656=IKsin(j4);
IkReal x9657=(cj5*sj6);
IkReal x9658=(cj5*r01);
IkReal x9659=(cj5*r21);
IkReal x9660=(cj5*cj6*r11);
IkReal x9661=((1.0)*x9656);
IkReal x9662=(cj6*x9655);
IkReal x9663=(sj5*x9655);
IkReal x9664=(cj6*x9656);
IkReal x9665=(sj5*x9661);
IkReal x9666=((1.0)*sj6*x9655);
evalcond[0]=((((-1.0)*r21*sj6*x9661))+((r20*x9664))+((r20*x9655*x9657))+((r22*x9663))+((x9659*x9662)));
evalcond[1]=(((r10*x9655*x9657))+(((-1.0)*r11*sj6*x9661))+((r12*x9663))+((r10*x9664))+((x9655*x9660)));
evalcond[2]=((-1.0)+((r00*x9664))+((r00*x9655*x9657))+((r02*x9663))+((x9658*x9662))+(((-1.0)*r01*sj6*x9661)));
evalcond[3]=((((-1.0)*r20*x9657*x9661))+(((-1.0)*r21*x9666))+((r20*x9662))+(((-1.0)*cj6*x9659*x9661))+(((-1.0)*r22*x9665)));
evalcond[4]=((((-1.0)*r01*x9666))+((r00*x9662))+(((-1.0)*r02*x9665))+(((-1.0)*r00*x9657*x9661))+(((-1.0)*cj6*x9658*x9661)));
evalcond[5]=((1.0)+(((-1.0)*x9660*x9661))+(((-1.0)*r10*x9657*x9661))+((r10*x9662))+(((-1.0)*r12*x9665))+(((-1.0)*r11*x9666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9667=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9667.valid){
continue;
}
CheckValue<IkReal> x9668 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9667.value)))+(x9668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9669=IKcos(j4);
IkReal x9670=IKsin(j4);
IkReal x9671=(cj5*sj6);
IkReal x9672=(cj5*r01);
IkReal x9673=(cj5*r21);
IkReal x9674=(cj5*cj6*r11);
IkReal x9675=((1.0)*x9670);
IkReal x9676=(cj6*x9669);
IkReal x9677=(sj5*x9669);
IkReal x9678=(cj6*x9670);
IkReal x9679=(sj5*x9675);
IkReal x9680=((1.0)*sj6*x9669);
evalcond[0]=(((x9673*x9676))+((r20*x9678))+((r20*x9669*x9671))+((r22*x9677))+(((-1.0)*r21*sj6*x9675)));
evalcond[1]=(((r12*x9677))+(((-1.0)*r11*sj6*x9675))+((r10*x9678))+((r10*x9669*x9671))+((x9669*x9674)));
evalcond[2]=((-1.0)+((r00*x9669*x9671))+((r00*x9678))+((r02*x9677))+(((-1.0)*r01*sj6*x9675))+((x9672*x9676)));
evalcond[3]=((((-1.0)*r20*x9671*x9675))+((r20*x9676))+(((-1.0)*r21*x9680))+(((-1.0)*cj6*x9673*x9675))+(((-1.0)*r22*x9679)));
evalcond[4]=((((-1.0)*cj6*x9672*x9675))+(((-1.0)*r00*x9671*x9675))+((r00*x9676))+(((-1.0)*r01*x9680))+(((-1.0)*r02*x9679)));
evalcond[5]=((1.0)+(((-1.0)*r11*x9680))+(((-1.0)*x9674*x9675))+((r10*x9676))+(((-1.0)*r10*x9671*x9675))+(((-1.0)*r12*x9679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9681=(cj5*r12);
IkReal x9682=(r10*sj6);
IkReal x9683=((0.37429)*sj5);
IkReal x9684=((0.01)*cj5);
IkReal x9685=(cj6*r11);
IkReal x9686=(r00*sj6);
IkReal x9687=(r20*sj6);
IkReal x9688=((1.0)*sj5);
IkReal x9689=((0.01)*sj5);
IkReal x9690=(cj6*r01);
IkReal x9691=(cj5*r02);
IkReal x9692=(cj6*r21);
IkReal x9693=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((0.37429)*x9693))+((r22*x9689))+(((-1.0)*pz))+((x9684*x9687))+((x9684*x9692))+(((-1.0)*x9683*x9692))+(((-1.0)*x9683*x9687)));
evalcond[2]=((-0.43342)+(((0.37429)*x9691))+((r02*x9689))+(((-1.0)*px))+((x9684*x9686))+((x9684*x9690))+(((-1.0)*x9683*x9690))+(((-1.0)*x9683*x9686)));
evalcond[3]=((((0.37429)*x9681))+((x9682*x9684))+(((-1.0)*py))+((x9684*x9685))+((r12*x9689))+(((-1.0)*x9682*x9683))+(((-1.0)*x9683*x9685)));
evalcond[4]=((-1.0)+x9693+(((-1.0)*x9688*x9692))+(((-1.0)*x9687*x9688)));
evalcond[5]=((((-1.0)*x9685*x9688))+x9681+(((-1.0)*x9682*x9688)));
evalcond[6]=(x9691+(((-1.0)*x9686*x9688))+(((-1.0)*x9688*x9690)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9694=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9694;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9695=((1.0)*sj5);
IkReal x9696=(((cj5*r12))+(((-1.0)*r10*sj6*x9695))+(((-1.0)*cj6*r11*x9695)));
j4eval[0]=x9696;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9697=cj6*cj6;
IkReal x9698=cj5*cj5;
IkReal x9699=r10*r10;
IkReal x9700=r11*r11;
IkReal x9701=r12*r12;
IkReal x9702=(r10*sj6);
IkReal x9703=(r12*sj5);
IkReal x9704=((2.0)*cj6*r11);
IkReal x9705=((1.0)*x9699);
IkReal x9706=(x9697*x9700);
IkReal x9707=((((-2.0)*cj5*x9702*x9703))+(((-1.0)*x9698*x9706))+(((-1.0)*cj5*x9703*x9704))+((x9697*x9698*x9699))+(((-1.0)*x9698*x9702*x9704))+((x9698*x9701))+(((-1.0)*x9700))+(((-1.0)*x9701))+((x9702*x9704))+x9706+(((-1.0)*x9698*x9705))+(((-1.0)*x9697*x9705)));
j4eval[0]=x9707;
j4eval[1]=((IKabs((x9703+((cj5*cj6*r11))+((cj5*x9702)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9707);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9708=cj6*cj6;
IkReal x9709=cj5*cj5;
IkReal x9710=r10*r10;
IkReal x9711=r11*r11;
IkReal x9712=r12*r12;
IkReal x9713=(r10*sj6);
IkReal x9714=(r12*sj5);
IkReal x9715=((2.0)*cj6*r11);
IkReal x9716=(x9708*x9711);
IkReal x9717=(x9709*x9710);
CheckValue<IkReal> x9718=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9709*x9716))+x9716+((x9713*x9715))+((x9709*x9712))+(((-1.0)*x9717))+(((-1.0)*x9712))+(((-1.0)*x9711))+(((-1.0)*cj5*x9714*x9715))+(((-1.0)*x9708*x9710))+((x9708*x9717))+(((-1.0)*x9709*x9713*x9715))+(((-2.0)*cj5*x9713*x9714)))),-1);
if(!x9718.valid){
continue;
}
CheckValue<IkReal> x9719 = IKatan2WithCheck(IkReal((((cj5*x9713))+x9714+((cj5*cj6*r11)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9719.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9718.value)))+(x9719.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9720=IKcos(j4);
IkReal x9721=IKsin(j4);
IkReal x9722=(cj5*sj6);
IkReal x9723=(cj5*r01);
IkReal x9724=(cj5*r21);
IkReal x9725=(cj5*cj6*r11);
IkReal x9726=((1.0)*x9721);
IkReal x9727=(cj6*x9720);
IkReal x9728=(sj5*x9720);
IkReal x9729=(cj6*x9721);
IkReal x9730=(sj5*x9726);
IkReal x9731=((1.0)*sj6*x9720);
evalcond[0]=(((r20*x9729))+((x9724*x9727))+(((-1.0)*r21*sj6*x9726))+((r22*x9728))+((r20*x9720*x9722)));
evalcond[1]=((((-1.0)*r11*sj6*x9726))+((r10*x9720*x9722))+((r12*x9728))+((x9720*x9725))+((r10*x9729)));
evalcond[2]=((1.0)+((r02*x9728))+((x9723*x9727))+((r00*x9720*x9722))+(((-1.0)*r01*sj6*x9726))+((r00*x9729)));
evalcond[3]=((((-1.0)*cj6*x9724*x9726))+(((-1.0)*r21*x9731))+(((-1.0)*r20*x9722*x9726))+((r20*x9727))+(((-1.0)*r22*x9730)));
evalcond[4]=((((-1.0)*r01*x9731))+(((-1.0)*r02*x9730))+(((-1.0)*cj6*x9723*x9726))+(((-1.0)*r00*x9722*x9726))+((r00*x9727)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x9722*x9726))+(((-1.0)*x9725*x9726))+(((-1.0)*r11*x9731))+(((-1.0)*r12*x9730))+((r10*x9727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9732=((1.0)*sj5);
CheckValue<IkReal> x9733=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x9732))+(((-1.0)*cj6*r11*x9732)))),-1);
if(!x9733.valid){
continue;
}
CheckValue<IkReal> x9734 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9733.value)))+(x9734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9735=IKcos(j4);
IkReal x9736=IKsin(j4);
IkReal x9737=(cj5*sj6);
IkReal x9738=(cj5*r01);
IkReal x9739=(cj5*r21);
IkReal x9740=(cj5*cj6*r11);
IkReal x9741=((1.0)*x9736);
IkReal x9742=(cj6*x9735);
IkReal x9743=(sj5*x9735);
IkReal x9744=(cj6*x9736);
IkReal x9745=(sj5*x9741);
IkReal x9746=((1.0)*sj6*x9735);
evalcond[0]=(((r22*x9743))+((r20*x9735*x9737))+(((-1.0)*r21*sj6*x9741))+((r20*x9744))+((x9739*x9742)));
evalcond[1]=(((r10*x9744))+(((-1.0)*r11*sj6*x9741))+((x9735*x9740))+((r10*x9735*x9737))+((r12*x9743)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj6*x9741))+((r00*x9735*x9737))+((r02*x9743))+((x9738*x9742))+((r00*x9744)));
evalcond[3]=((((-1.0)*cj6*x9739*x9741))+((r20*x9742))+(((-1.0)*r20*x9737*x9741))+(((-1.0)*r22*x9745))+(((-1.0)*r21*x9746)));
evalcond[4]=((((-1.0)*cj6*x9738*x9741))+(((-1.0)*r02*x9745))+(((-1.0)*r01*x9746))+(((-1.0)*r00*x9737*x9741))+((r00*x9742)));
evalcond[5]=((-1.0)+((r10*x9742))+(((-1.0)*r10*x9737*x9741))+(((-1.0)*r11*x9746))+(((-1.0)*x9740*x9741))+(((-1.0)*r12*x9745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9747=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9747.valid){
continue;
}
CheckValue<IkReal> x9748 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9747.value)))+(x9748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9749=IKcos(j4);
IkReal x9750=IKsin(j4);
IkReal x9751=(cj5*sj6);
IkReal x9752=(cj5*r01);
IkReal x9753=(cj5*r21);
IkReal x9754=(cj5*cj6*r11);
IkReal x9755=((1.0)*x9750);
IkReal x9756=(cj6*x9749);
IkReal x9757=(sj5*x9749);
IkReal x9758=(cj6*x9750);
IkReal x9759=(sj5*x9755);
IkReal x9760=((1.0)*sj6*x9749);
evalcond[0]=(((r22*x9757))+((x9753*x9756))+((r20*x9758))+(((-1.0)*r21*sj6*x9755))+((r20*x9749*x9751)));
evalcond[1]=(((r10*x9758))+(((-1.0)*r11*sj6*x9755))+((r10*x9749*x9751))+((r12*x9757))+((x9749*x9754)));
evalcond[2]=((1.0)+((r00*x9758))+((x9752*x9756))+(((-1.0)*r01*sj6*x9755))+((r00*x9749*x9751))+((r02*x9757)));
evalcond[3]=((((-1.0)*r22*x9759))+(((-1.0)*cj6*x9753*x9755))+(((-1.0)*r21*x9760))+(((-1.0)*r20*x9751*x9755))+((r20*x9756)));
evalcond[4]=(((r00*x9756))+(((-1.0)*r00*x9751*x9755))+(((-1.0)*r02*x9759))+(((-1.0)*cj6*x9752*x9755))+(((-1.0)*r01*x9760)));
evalcond[5]=((-1.0)+((r10*x9756))+(((-1.0)*r10*x9751*x9755))+(((-1.0)*x9754*x9755))+(((-1.0)*r11*x9760))+(((-1.0)*r12*x9759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9761=cj6*cj6;
IkReal x9762=cj5*cj5;
IkReal x9763=(r22*sj5);
IkReal x9764=((1.0)*r11);
IkReal x9765=(r20*sj6);
IkReal x9766=(cj0*cj5);
IkReal x9767=(cj6*r21);
IkReal x9768=((1.0)*r20);
IkReal x9769=(r12*r22);
IkReal x9770=(r10*sj6);
IkReal x9771=(r21*x9761);
IkReal x9772=(r10*x9762);
IkReal x9773=(r11*x9762);
IkReal x9774=(cj5*r12*sj5);
CheckValue<IkReal> x9775=IKPowWithIntegerCheck(IKsign((((cj5*cj6*r11*x9763))+((cj6*x9765*x9773))+((x9765*x9774))+((r10*r20*x9761))+((r11*r21))+(((-1.0)*x9764*x9771))+((x9767*x9774))+((x9762*x9767*x9770))+(((-1.0)*x9762*x9769))+x9769+(((-1.0)*cj6*x9764*x9765))+(((-1.0)*x9761*x9768*x9772))+(((-1.0)*x9767*x9770))+((r20*x9772))+((cj5*x9763*x9770))+((x9771*x9773)))),-1);
if(!x9775.valid){
continue;
}
CheckValue<IkReal> x9776 = IKatan2WithCheck(IkReal((((x9765*x9766))+((x9766*x9767))+((cj0*x9763)))),((((-1.0)*cj0*cj6*x9768))+((cj0*r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9775.value)))+(x9776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9777=IKcos(j4);
IkReal x9778=IKsin(j4);
IkReal x9779=((1.0)*sj0);
IkReal x9780=(cj5*r11);
IkReal x9781=((1.0)*sj6);
IkReal x9782=(cj5*r01);
IkReal x9783=(cj6*x9777);
IkReal x9784=(sj5*x9777);
IkReal x9785=(r21*x9778);
IkReal x9786=(cj6*x9778);
IkReal x9787=((1.0)*sj5*x9778);
IkReal x9788=(cj5*sj6*x9777);
IkReal x9789=(cj5*x9778*x9781);
evalcond[0]=((((-1.0)*x9781*x9785))+((cj5*r21*x9783))+((r22*x9784))+((r20*x9786))+((r20*x9788)));
evalcond[1]=((((-1.0)*r20*x9789))+(((-1.0)*r21*x9777*x9781))+(((-1.0)*r22*x9787))+((r20*x9783))+(((-1.0)*cj5*cj6*x9785)));
evalcond[2]=(((r00*x9788))+((r00*x9786))+((x9782*x9783))+(((-1.0)*r01*x9778*x9781))+((r02*x9784))+(((-1.0)*cj0)));
evalcond[3]=(((r10*x9786))+((r10*x9788))+((r12*x9784))+(((-1.0)*r11*x9778*x9781))+(((-1.0)*x9779))+((x9780*x9783)));
evalcond[4]=((((-1.0)*r12*x9787))+(((-1.0)*x9780*x9786))+cj0+(((-1.0)*r11*x9777*x9781))+((r10*x9783))+(((-1.0)*r10*x9789)));
evalcond[5]=(((r00*x9783))+(((-1.0)*x9782*x9786))+(((-1.0)*r01*x9777*x9781))+(((-1.0)*r00*x9789))+(((-1.0)*x9779))+(((-1.0)*r02*x9787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9790=(sj0*sj6);
IkReal x9791=((1.0)*cj6);
CheckValue<IkReal> x9792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9791))+((cj5*r02)))),-1);
if(!x9792.valid){
continue;
}
CheckValue<IkReal> x9793 = IKatan2WithCheck(IkReal((((r22*sj0*sj5))+((cj5*cj6*r21*sj0))+((cj5*r20*x9790)))),((((-1.0)*r20*sj0*x9791))+((r21*x9790))),IKFAST_ATAN2_MAGTHRESH);
if(!x9793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9792.value)))+(x9793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9794=IKcos(j4);
IkReal x9795=IKsin(j4);
IkReal x9796=((1.0)*sj0);
IkReal x9797=(cj5*r11);
IkReal x9798=((1.0)*sj6);
IkReal x9799=(cj5*r01);
IkReal x9800=(cj6*x9794);
IkReal x9801=(sj5*x9794);
IkReal x9802=(r21*x9795);
IkReal x9803=(cj6*x9795);
IkReal x9804=((1.0)*sj5*x9795);
IkReal x9805=(cj5*sj6*x9794);
IkReal x9806=(cj5*x9795*x9798);
evalcond[0]=(((cj5*r21*x9800))+((r22*x9801))+(((-1.0)*x9798*x9802))+((r20*x9803))+((r20*x9805)));
evalcond[1]=((((-1.0)*r20*x9806))+(((-1.0)*r22*x9804))+(((-1.0)*r21*x9794*x9798))+((r20*x9800))+(((-1.0)*cj5*cj6*x9802)));
evalcond[2]=(((r00*x9803))+((r00*x9805))+(((-1.0)*r01*x9795*x9798))+((x9799*x9800))+((r02*x9801))+(((-1.0)*cj0)));
evalcond[3]=(((r10*x9803))+((r10*x9805))+((r12*x9801))+(((-1.0)*r11*x9795*x9798))+(((-1.0)*x9796))+((x9797*x9800)));
evalcond[4]=(((r10*x9800))+cj0+(((-1.0)*r10*x9806))+(((-1.0)*r12*x9804))+(((-1.0)*x9797*x9803))+(((-1.0)*r11*x9794*x9798)));
evalcond[5]=(((r00*x9800))+(((-1.0)*r02*x9804))+(((-1.0)*x9799*x9803))+(((-1.0)*x9796))+(((-1.0)*r00*x9806))+(((-1.0)*r01*x9794*x9798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9807=(cj0*r20);
IkReal x9808=(cj0*r21);
CheckValue<IkReal> x9809 = IKatan2WithCheck(IkReal((((cj5*cj6*x9808))+((cj5*sj6*x9807))+((cj0*r22*sj5)))),((((-1.0)*cj6*x9807))+((sj6*x9808))),IKFAST_ATAN2_MAGTHRESH);
if(!x9809.valid){
continue;
}
CheckValue<IkReal> x9810=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9809.value)+(((1.5707963267949)*(x9810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9811=IKcos(j4);
IkReal x9812=IKsin(j4);
IkReal x9813=((1.0)*sj0);
IkReal x9814=(cj5*r11);
IkReal x9815=((1.0)*sj6);
IkReal x9816=(cj5*r01);
IkReal x9817=(cj6*x9811);
IkReal x9818=(sj5*x9811);
IkReal x9819=(r21*x9812);
IkReal x9820=(cj6*x9812);
IkReal x9821=((1.0)*sj5*x9812);
IkReal x9822=(cj5*sj6*x9811);
IkReal x9823=(cj5*x9812*x9815);
evalcond[0]=(((r20*x9820))+((r20*x9822))+((cj5*r21*x9817))+((r22*x9818))+(((-1.0)*x9815*x9819)));
evalcond[1]=((((-1.0)*cj5*cj6*x9819))+(((-1.0)*r21*x9811*x9815))+(((-1.0)*r20*x9823))+(((-1.0)*r22*x9821))+((r20*x9817)));
evalcond[2]=(((x9816*x9817))+(((-1.0)*r01*x9812*x9815))+((r00*x9822))+((r00*x9820))+((r02*x9818))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9813))+((r12*x9818))+(((-1.0)*r11*x9812*x9815))+((x9814*x9817))+((r10*x9820))+((r10*x9822)));
evalcond[4]=((((-1.0)*r11*x9811*x9815))+cj0+(((-1.0)*x9814*x9820))+(((-1.0)*r10*x9823))+(((-1.0)*r12*x9821))+((r10*x9817)));
evalcond[5]=((((-1.0)*r00*x9823))+(((-1.0)*x9813))+(((-1.0)*r02*x9821))+(((-1.0)*r01*x9811*x9815))+((r00*x9817))+(((-1.0)*x9816*x9820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9824=(cj5*r22);
IkReal x9825=(cj6*r21);
IkReal x9826=((1.0)*sj5);
IkReal x9827=((0.01)*cj5);
IkReal x9828=(r20*sj6);
IkReal x9829=((0.37429)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.069)+(((0.37429)*x9824))+((x9825*x9827))+((x9827*x9828))+(((-1.0)*x9828*x9829))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x9825*x9829)));
evalcond[2]=((1.0)+(((-1.0)*x9826*x9828))+(((-1.0)*x9825*x9826))+x9824);
evalcond[3]=(((cj5*r12))+(((-1.0)*r10*sj6*x9826))+(((-1.0)*cj6*r11*x9826)));
evalcond[4]=((((-1.0)*r00*sj6*x9826))+(((-1.0)*cj6*r01*x9826))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9830=(r10*sj6);
IkReal x9831=((0.863573439158322)*sj5);
IkReal x9832=((0.0230723086152)*cj5);
IkReal x9833=(cj6*r11);
IkReal x9834=(r00*sj6);
IkReal x9835=((0.0230723086152)*sj5);
IkReal x9836=((0.863573439158322)*cj5);
IkReal x9837=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*x9832*x9833))+((x9830*x9831))+(((-1.0)*x9830*x9832))+(((-1.0)*r12*x9835))+(((-1.0)*r12*x9836))+((x9831*x9833)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*x9832*x9837))+(((-1.0)*x9832*x9834))+(((-1.0)*r02*x9835))+(((-1.0)*r02*x9836))+((x9831*x9834))+((x9831*x9837)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*x9832*x9833))+((x9830*x9831))+(((-1.0)*x9830*x9832))+(((-1.0)*r12*x9835))+(((-1.0)*r12*x9836))+((x9831*x9833))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*x9832*x9837))+(((-1.0)*x9832*x9834))+(((-1.0)*r02*x9835))+(((-1.0)*r02*x9836))+((x9831*x9834))+((x9831*x9837))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*x9832*x9833))+((x9830*x9831))+(((-1.0)*x9830*x9832))+(((-1.0)*r12*x9835))+(((-1.0)*r12*x9836))+((x9831*x9833))), ((((2.30723086152)*px))+(((-1.0)*x9832*x9837))+(((-1.0)*x9832*x9834))+(((-1.0)*r02*x9835))+(((-1.0)*r02*x9836))+((x9831*x9834))+((x9831*x9837))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x9838=((0.01)*cj5);
IkReal x9839=(cj6*r01);
IkReal x9840=((0.37429)*sj5);
IkReal x9841=(cj6*r11);
IkReal x9842=((0.01)*sj5);
IkReal x9843=(r00*sj6);
IkReal x9844=((0.37429)*cj5);
IkReal x9845=(r10*sj6);
evalcond[0]=((((-1.0)*x9840*x9843))+((r02*x9842))+((r02*x9844))+(((-1.0)*x9839*x9840))+((x9838*x9843))+(((-1.0)*px))+((x9838*x9839))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=((((0.43342)*(IKsin(j0))))+(((-1.0)*x9840*x9841))+(((-1.0)*x9840*x9845))+((x9838*x9845))+((x9838*x9841))+(((-1.0)*py))+((r12*x9842))+((r12*x9844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9846=(cj0*r20);
IkReal x9847=(cj0*r21);
IkReal x9848=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9848;
j4eval[1]=((IKabs((((cj5*sj6*x9846))+((cj0*r22*sj5))+((cj5*cj6*x9847)))))+(IKabs((((sj6*x9847))+(((-1.0)*cj6*x9846))))));
j4eval[2]=IKsign(x9848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9849=(sj0*sj6);
IkReal x9850=((1.0)*cj6);
IkReal x9851=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9850))+((cj5*r02)));
j4eval[0]=x9851;
j4eval[1]=IKsign(x9851);
j4eval[2]=((IKabs(((((-1.0)*r20*sj0*x9850))+((r21*x9849)))))+(IKabs((((cj5*r20*x9849))+((r22*sj0*sj5))+((cj5*cj6*r21*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9852=cj5*cj5;
IkReal x9853=cj6*cj6;
IkReal x9854=(r00*r20);
IkReal x9855=(r02*r22);
IkReal x9856=(cj5*sj5);
IkReal x9857=(cj6*r21);
IkReal x9858=(r00*sj6);
IkReal x9859=(r20*sj6);
IkReal x9860=(cj6*r01);
IkReal x9861=(cj5*sj0);
IkReal x9862=((1.0)*x9852);
IkReal x9863=(r01*r21*x9853);
IkReal x9864=(((r22*x9856*x9858))+((r02*x9856*x9859))+((r02*x9856*x9857))+((x9852*x9857*x9858))+((x9852*x9863))+(((-1.0)*x9857*x9858))+((r01*r21))+((r22*x9856*x9860))+(((-1.0)*x9855*x9862))+(((-1.0)*x9863))+(((-1.0)*x9859*x9860))+((x9852*x9859*x9860))+x9855+((x9853*x9854))+((x9852*x9854))+(((-1.0)*x9853*x9854*x9862)));
j4eval[0]=x9864;
j4eval[1]=IKsign(x9864);
j4eval[2]=((IKabs((((r22*sj0*sj5))+((x9859*x9861))+((x9857*x9861)))))+(IKabs((((r21*sj0*sj6))+(((-1.0)*cj6*r20*sj0))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x9865=(cj5*r12);
IkReal x9866=(r10*sj6);
IkReal x9867=((0.37429)*sj5);
IkReal x9868=((0.01)*cj5);
IkReal x9869=(cj6*r11);
IkReal x9870=(r00*sj6);
IkReal x9871=(r20*sj6);
IkReal x9872=((1.0)*sj5);
IkReal x9873=((0.01)*sj5);
IkReal x9874=(cj6*r01);
IkReal x9875=(cj5*r02);
IkReal x9876=(cj6*r21);
IkReal x9877=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x9867*x9871))+(((-1.0)*x9867*x9876))+(((0.37429)*x9877))+(((-1.0)*pz))+((x9868*x9871))+((x9868*x9876))+((r22*x9873)));
evalcond[2]=((0.43342)+((r02*x9873))+(((-1.0)*x9867*x9870))+(((-1.0)*x9867*x9874))+(((0.37429)*x9875))+(((-1.0)*px))+((x9868*x9870))+((x9868*x9874)));
evalcond[3]=(((r12*x9873))+(((-1.0)*x9866*x9867))+((x9868*x9869))+(((-1.0)*py))+(((-1.0)*x9867*x9869))+((x9866*x9868))+(((0.37429)*x9865)));
evalcond[4]=((1.0)+(((-1.0)*x9872*x9876))+(((-1.0)*x9871*x9872))+x9877);
evalcond[5]=((((-1.0)*x9866*x9872))+x9865+(((-1.0)*x9869*x9872)));
evalcond[6]=((((-1.0)*x9872*x9874))+(((-1.0)*x9870*x9872))+x9875);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9878=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9878;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9879=((1.0)*cj6);
IkReal x9880=(((cj5*r22))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r21*sj5*x9879)));
j4eval[0]=x9880;
j4eval[1]=((IKabs(((((-1.0)*r10*x9879))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x9880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9881=cj6*cj6;
IkReal x9882=cj5*cj5;
IkReal x9883=r10*r10;
IkReal x9884=r11*r11;
IkReal x9885=r12*r12;
IkReal x9886=(r10*sj6);
IkReal x9887=(r12*sj5);
IkReal x9888=((2.0)*cj6*r11);
IkReal x9889=((1.0)*x9883);
IkReal x9890=(x9881*x9884);
IkReal x9891=((((-1.0)*cj5*x9887*x9888))+((x9886*x9888))+(((-1.0)*x9882*x9889))+(((-1.0)*x9882*x9890))+(((-2.0)*cj5*x9886*x9887))+(((-1.0)*x9885))+(((-1.0)*x9884))+x9890+((x9881*x9882*x9883))+(((-1.0)*x9881*x9889))+(((-1.0)*x9882*x9886*x9888))+((x9882*x9885)));
j4eval[0]=x9891;
j4eval[1]=((IKabs((((cj5*cj6*r11))+((cj5*x9886))+x9887)))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9892=cj6*cj6;
IkReal x9893=cj5*cj5;
IkReal x9894=r10*r10;
IkReal x9895=r11*r11;
IkReal x9896=r12*r12;
IkReal x9897=(r10*sj6);
IkReal x9898=(r12*sj5);
IkReal x9899=((2.0)*cj6*r11);
IkReal x9900=(x9892*x9895);
IkReal x9901=(x9893*x9894);
CheckValue<IkReal> x9902=IKPowWithIntegerCheck(IKsign((((x9892*x9901))+(((-1.0)*x9893*x9900))+(((-2.0)*cj5*x9897*x9898))+(((-1.0)*x9901))+(((-1.0)*x9892*x9894))+(((-1.0)*cj5*x9898*x9899))+(((-1.0)*x9893*x9897*x9899))+(((-1.0)*x9895))+(((-1.0)*x9896))+((x9897*x9899))+x9900+((x9893*x9896)))),-1);
if(!x9902.valid){
continue;
}
CheckValue<IkReal> x9903 = IKatan2WithCheck(IkReal((((cj5*cj6*r11))+((cj5*x9897))+x9898)),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9902.value)))+(x9903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9904=IKcos(j4);
IkReal x9905=IKsin(j4);
IkReal x9906=(cj5*sj6);
IkReal x9907=(cj5*r01);
IkReal x9908=(cj5*r21);
IkReal x9909=(cj5*cj6*r11);
IkReal x9910=((1.0)*x9905);
IkReal x9911=(cj6*x9904);
IkReal x9912=(sj5*x9904);
IkReal x9913=(cj6*x9905);
IkReal x9914=(sj5*x9910);
IkReal x9915=((1.0)*sj6*x9904);
evalcond[0]=(((r20*x9913))+((x9908*x9911))+((r22*x9912))+(((-1.0)*r21*sj6*x9910))+((r20*x9904*x9906)));
evalcond[1]=(((r12*x9912))+((x9904*x9909))+(((-1.0)*r11*sj6*x9910))+((r10*x9904*x9906))+((r10*x9913)));
evalcond[2]=((-1.0)+((x9907*x9911))+(((-1.0)*r01*sj6*x9910))+((r00*x9904*x9906))+((r00*x9913))+((r02*x9912)));
evalcond[3]=((((-1.0)*cj6*x9908*x9910))+(((-1.0)*r20*x9906*x9910))+((r20*x9911))+(((-1.0)*r22*x9914))+(((-1.0)*r21*x9915)));
evalcond[4]=((((-1.0)*cj6*x9907*x9910))+((r00*x9911))+(((-1.0)*r00*x9906*x9910))+(((-1.0)*r02*x9914))+(((-1.0)*r01*x9915)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x9906*x9910))+(((-1.0)*x9909*x9910))+(((-1.0)*r11*x9915))+(((-1.0)*r12*x9914))+((r10*x9911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9916=((1.0)*cj6);
CheckValue<IkReal> x9917=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj5*x9916))+((cj5*r22))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x9917.valid){
continue;
}
CheckValue<IkReal> x9918 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*r10*x9916))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9917.value)))+(x9918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9919=IKcos(j4);
IkReal x9920=IKsin(j4);
IkReal x9921=(cj5*sj6);
IkReal x9922=(cj5*r01);
IkReal x9923=(cj5*r21);
IkReal x9924=(cj5*cj6*r11);
IkReal x9925=((1.0)*x9920);
IkReal x9926=(cj6*x9919);
IkReal x9927=(sj5*x9919);
IkReal x9928=(cj6*x9920);
IkReal x9929=(sj5*x9925);
IkReal x9930=((1.0)*sj6*x9919);
evalcond[0]=(((x9923*x9926))+(((-1.0)*r21*sj6*x9925))+((r20*x9919*x9921))+((r20*x9928))+((r22*x9927)));
evalcond[1]=(((r10*x9928))+((r10*x9919*x9921))+(((-1.0)*r11*sj6*x9925))+((r12*x9927))+((x9919*x9924)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x9925))+((r02*x9927))+((r00*x9919*x9921))+((x9922*x9926))+((r00*x9928)));
evalcond[3]=(((r20*x9926))+(((-1.0)*cj6*x9923*x9925))+(((-1.0)*r22*x9929))+(((-1.0)*r21*x9930))+(((-1.0)*r20*x9921*x9925)));
evalcond[4]=((((-1.0)*r01*x9930))+(((-1.0)*r02*x9929))+(((-1.0)*cj6*x9922*x9925))+(((-1.0)*r00*x9921*x9925))+((r00*x9926)));
evalcond[5]=((-1.0)+((r10*x9926))+(((-1.0)*r12*x9929))+(((-1.0)*r10*x9921*x9925))+(((-1.0)*x9924*x9925))+(((-1.0)*r11*x9930)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9931=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9931.valid){
continue;
}
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9931.value)))+(x9932.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9933=IKcos(j4);
IkReal x9934=IKsin(j4);
IkReal x9935=(cj5*sj6);
IkReal x9936=(cj5*r01);
IkReal x9937=(cj5*r21);
IkReal x9938=(cj5*cj6*r11);
IkReal x9939=((1.0)*x9934);
IkReal x9940=(cj6*x9933);
IkReal x9941=(sj5*x9933);
IkReal x9942=(cj6*x9934);
IkReal x9943=(sj5*x9939);
IkReal x9944=((1.0)*sj6*x9933);
evalcond[0]=(((r22*x9941))+((r20*x9933*x9935))+((r20*x9942))+(((-1.0)*r21*sj6*x9939))+((x9937*x9940)));
evalcond[1]=(((x9933*x9938))+((r12*x9941))+(((-1.0)*r11*sj6*x9939))+((r10*x9942))+((r10*x9933*x9935)));
evalcond[2]=((-1.0)+((x9936*x9940))+((r00*x9933*x9935))+((r02*x9941))+(((-1.0)*r01*sj6*x9939))+((r00*x9942)));
evalcond[3]=((((-1.0)*r21*x9944))+(((-1.0)*cj6*x9937*x9939))+((r20*x9940))+(((-1.0)*r22*x9943))+(((-1.0)*r20*x9935*x9939)));
evalcond[4]=((((-1.0)*cj6*x9936*x9939))+(((-1.0)*r01*x9944))+(((-1.0)*r00*x9935*x9939))+((r00*x9940))+(((-1.0)*r02*x9943)));
evalcond[5]=((-1.0)+(((-1.0)*x9938*x9939))+(((-1.0)*r11*x9944))+(((-1.0)*r10*x9935*x9939))+(((-1.0)*r12*x9943))+((r10*x9940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9945=(cj5*r12);
IkReal x9946=(r10*sj6);
IkReal x9947=((0.37429)*sj5);
IkReal x9948=((0.01)*cj5);
IkReal x9949=(cj6*r11);
IkReal x9950=(r00*sj6);
IkReal x9951=(r20*sj6);
IkReal x9952=((1.0)*sj5);
IkReal x9953=((0.01)*sj5);
IkReal x9954=(cj6*r01);
IkReal x9955=(cj5*r02);
IkReal x9956=(cj6*r21);
IkReal x9957=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x9948*x9951))+((x9948*x9956))+(((-1.0)*pz))+(((0.37429)*x9957))+((r22*x9953))+(((-1.0)*x9947*x9956))+(((-1.0)*x9947*x9951)));
evalcond[2]=((-0.43342)+((r02*x9953))+((x9948*x9954))+((x9948*x9950))+(((-1.0)*px))+(((0.37429)*x9955))+(((-1.0)*x9947*x9954))+(((-1.0)*x9947*x9950)));
evalcond[3]=((((-1.0)*x9947*x9949))+(((-1.0)*py))+((r12*x9953))+((x9948*x9949))+((x9946*x9948))+(((0.37429)*x9945))+(((-1.0)*x9946*x9947)));
evalcond[4]=((1.0)+x9957+(((-1.0)*x9952*x9956))+(((-1.0)*x9951*x9952)));
evalcond[5]=((((-1.0)*x9946*x9952))+x9945+(((-1.0)*x9949*x9952)));
evalcond[6]=((((-1.0)*x9950*x9952))+x9955+(((-1.0)*x9952*x9954)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9958=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9958;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9958);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9959=((1.0)*sj5);
IkReal x9960=(((cj5*r12))+(((-1.0)*cj6*r11*x9959))+(((-1.0)*r10*sj6*x9959)));
j4eval[0]=x9960;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9961=r11*r11;
IkReal x9962=cj5*cj5;
IkReal x9963=cj6*cj6;
IkReal x9964=r10*r10;
IkReal x9965=r12*r12;
IkReal x9966=(r12*sj5);
IkReal x9967=(r11*sj6);
IkReal x9968=((1.0)*x9963);
IkReal x9969=(cj5*cj6*r11);
IkReal x9970=(cj5*r10*sj6);
IkReal x9971=((2.0)*cj6*r10);
IkReal x9972=(x9962*x9964);
IkReal x9973=((((-1.0)*x9967*x9971))+(((2.0)*x9966*x9969))+(((-1.0)*x9968*x9972))+(((-1.0)*x9961*x9968))+((x9963*x9964))+(((-1.0)*x9962*x9965))+((x9961*x9962*x9963))+(((2.0)*x9966*x9970))+x9972+x9965+x9961+((x9962*x9967*x9971)));
j4eval[0]=x9973;
j4eval[1]=((IKabs((x9970+x9966+x9969)))+(IKabs(((((-1.0)*cj6*r10))+x9967))));
j4eval[2]=IKsign(x9973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9974=r11*r11;
IkReal x9975=cj5*cj5;
IkReal x9976=cj6*cj6;
IkReal x9977=r10*r10;
IkReal x9978=r12*r12;
IkReal x9979=(r10*sj6);
IkReal x9980=(r12*sj5);
IkReal x9981=((1.0)*x9976);
IkReal x9982=(cj5*cj6*r11);
IkReal x9983=((2.0)*cj6*r11);
IkReal x9984=(x9975*x9977);
CheckValue<IkReal> x9985 = IKatan2WithCheck(IkReal((((cj5*x9979))+x9982+x9980)),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9985.valid){
continue;
}
CheckValue<IkReal> x9986=IKPowWithIntegerCheck(IKsign((((x9974*x9975*x9976))+(((2.0)*cj5*x9979*x9980))+(((-1.0)*x9981*x9984))+((x9976*x9977))+(((-1.0)*x9979*x9983))+((x9975*x9979*x9983))+x9974+x9978+x9984+(((-1.0)*x9975*x9978))+(((-1.0)*x9974*x9981))+(((2.0)*x9980*x9982)))),-1);
if(!x9986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9985.value)+(((1.5707963267949)*(x9986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9987=IKcos(j4);
IkReal x9988=IKsin(j4);
IkReal x9989=(cj5*sj6);
IkReal x9990=(cj5*r01);
IkReal x9991=(cj5*r21);
IkReal x9992=(cj5*cj6*r11);
IkReal x9993=((1.0)*x9988);
IkReal x9994=(cj6*x9987);
IkReal x9995=(sj5*x9987);
IkReal x9996=(cj6*x9988);
IkReal x9997=(sj5*x9993);
IkReal x9998=((1.0)*sj6*x9987);
evalcond[0]=(((r22*x9995))+((r20*x9987*x9989))+((x9991*x9994))+(((-1.0)*r21*sj6*x9993))+((r20*x9996)));
evalcond[1]=(((x9987*x9992))+((r10*x9996))+((r12*x9995))+((r10*x9987*x9989))+(((-1.0)*r11*sj6*x9993)));
evalcond[2]=((1.0)+((r00*x9996))+((r00*x9987*x9989))+((x9990*x9994))+((r02*x9995))+(((-1.0)*r01*sj6*x9993)));
evalcond[3]=((((-1.0)*cj6*x9991*x9993))+(((-1.0)*r20*x9989*x9993))+(((-1.0)*r22*x9997))+(((-1.0)*r21*x9998))+((r20*x9994)));
evalcond[4]=((((-1.0)*r01*x9998))+((r00*x9994))+(((-1.0)*cj6*x9990*x9993))+(((-1.0)*r02*x9997))+(((-1.0)*r00*x9989*x9993)));
evalcond[5]=((1.0)+(((-1.0)*r10*x9989*x9993))+((r10*x9994))+(((-1.0)*x9992*x9993))+(((-1.0)*r11*x9998))+(((-1.0)*r12*x9997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9999=((1.0)*sj5);
CheckValue<IkReal> x10000=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x9999))+(((-1.0)*r10*sj6*x9999)))),-1);
if(!x10000.valid){
continue;
}
CheckValue<IkReal> x10001 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10000.value)))+(x10001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10002=IKcos(j4);
IkReal x10003=IKsin(j4);
IkReal x10004=(cj5*sj6);
IkReal x10005=(cj5*r01);
IkReal x10006=(cj5*r21);
IkReal x10007=(cj5*cj6*r11);
IkReal x10008=((1.0)*x10003);
IkReal x10009=(cj6*x10002);
IkReal x10010=(sj5*x10002);
IkReal x10011=(cj6*x10003);
IkReal x10012=(sj5*x10008);
IkReal x10013=((1.0)*sj6*x10002);
evalcond[0]=(((r22*x10010))+((x10006*x10009))+((r20*x10002*x10004))+(((-1.0)*r21*sj6*x10008))+((r20*x10011)));
evalcond[1]=((((-1.0)*r11*sj6*x10008))+((r12*x10010))+((r10*x10011))+((r10*x10002*x10004))+((x10002*x10007)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj6*x10008))+((r02*x10010))+((r00*x10002*x10004))+((r00*x10011))+((x10005*x10009)));
evalcond[3]=((((-1.0)*r21*x10013))+(((-1.0)*r20*x10004*x10008))+(((-1.0)*cj6*x10006*x10008))+(((-1.0)*r22*x10012))+((r20*x10009)));
evalcond[4]=((((-1.0)*r01*x10013))+(((-1.0)*cj6*x10005*x10008))+(((-1.0)*r02*x10012))+(((-1.0)*r00*x10004*x10008))+((r00*x10009)));
evalcond[5]=((1.0)+(((-1.0)*r12*x10012))+(((-1.0)*r11*x10013))+((r10*x10009))+(((-1.0)*x10007*x10008))+(((-1.0)*r10*x10004*x10008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10014=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10014.valid){
continue;
}
CheckValue<IkReal> x10015 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10014.value)))+(x10015.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10016=IKcos(j4);
IkReal x10017=IKsin(j4);
IkReal x10018=(cj5*sj6);
IkReal x10019=(cj5*r01);
IkReal x10020=(cj5*r21);
IkReal x10021=(cj5*cj6*r11);
IkReal x10022=((1.0)*x10017);
IkReal x10023=(cj6*x10016);
IkReal x10024=(sj5*x10016);
IkReal x10025=(cj6*x10017);
IkReal x10026=(sj5*x10022);
IkReal x10027=((1.0)*sj6*x10016);
evalcond[0]=(((x10020*x10023))+((r20*x10025))+(((-1.0)*r21*sj6*x10022))+((r22*x10024))+((r20*x10016*x10018)));
evalcond[1]=((((-1.0)*r11*sj6*x10022))+((x10016*x10021))+((r10*x10025))+((r10*x10016*x10018))+((r12*x10024)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj6*x10022))+((x10019*x10023))+((r00*x10016*x10018))+((r00*x10025))+((r02*x10024)));
evalcond[3]=((((-1.0)*cj6*x10020*x10022))+(((-1.0)*r22*x10026))+((r20*x10023))+(((-1.0)*r20*x10018*x10022))+(((-1.0)*r21*x10027)));
evalcond[4]=((((-1.0)*cj6*x10019*x10022))+(((-1.0)*r02*x10026))+(((-1.0)*r01*x10027))+(((-1.0)*r00*x10018*x10022))+((r00*x10023)));
evalcond[5]=((1.0)+(((-1.0)*r12*x10026))+(((-1.0)*r10*x10018*x10022))+((r10*x10023))+(((-1.0)*x10021*x10022))+(((-1.0)*r11*x10027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10028=(cj5*r12);
IkReal x10029=(r10*sj6);
IkReal x10030=((0.37429)*sj5);
IkReal x10031=((0.01)*cj5);
IkReal x10032=(cj6*r11);
IkReal x10033=(r00*sj6);
IkReal x10034=(r20*sj6);
IkReal x10035=((1.0)*sj5);
IkReal x10036=((0.01)*sj5);
IkReal x10037=(cj6*r01);
IkReal x10038=(cj5*r02);
IkReal x10039=(cj6*r21);
IkReal x10040=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((0.37429)*x10040))+((x10031*x10034))+((x10031*x10039))+(((-1.0)*pz))+(((-1.0)*x10030*x10039))+(((-1.0)*x10030*x10034))+((r22*x10036)));
evalcond[2]=(((x10031*x10033))+((x10031*x10037))+(((-1.0)*px))+(((-1.0)*x10030*x10037))+(((-1.0)*x10030*x10033))+((r02*x10036))+(((0.37429)*x10038)));
evalcond[3]=((0.43342)+((x10029*x10031))+((x10031*x10032))+(((-1.0)*py))+(((-1.0)*x10030*x10032))+(((-1.0)*x10029*x10030))+((r12*x10036))+(((0.37429)*x10028)));
evalcond[4]=((1.0)+(((-1.0)*x10035*x10039))+(((-1.0)*x10034*x10035))+x10040);
evalcond[5]=(x10028+(((-1.0)*x10029*x10035))+(((-1.0)*x10032*x10035)));
evalcond[6]=((((-1.0)*x10035*x10037))+x10038+(((-1.0)*x10033*x10035)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10041=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10041;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10041);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10042=((1.0)*sj5);
IkReal x10043=((((-1.0)*r00*sj6*x10042))+(((-1.0)*cj6*r01*x10042))+((cj5*r02)));
j4eval[0]=x10043;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10044=cj6*cj6;
IkReal x10045=r01*r01;
IkReal x10046=cj5*cj5;
IkReal x10047=r00*r00;
IkReal x10048=r02*r02;
IkReal x10049=(r02*sj5);
IkReal x10050=(r01*sj6);
IkReal x10051=(cj6*r00);
IkReal x10052=(cj5*cj6*r01);
IkReal x10053=(cj5*r00*sj6);
IkReal x10054=((1.0)*x10046);
IkReal x10055=(x10044*x10047);
IkReal x10056=(x10044*x10045);
IkReal x10057=((((-1.0)*x10056))+(((-2.0)*x10050*x10051))+(((2.0)*x10049*x10053))+(((2.0)*x10049*x10052))+x10055+x10048+x10045+(((2.0)*x10046*x10050*x10051))+((x10046*x10047))+(((-1.0)*x10048*x10054))+(((-1.0)*x10054*x10055))+((x10046*x10056)));
j4eval[0]=x10057;
j4eval[1]=((IKabs((x10053+x10052+x10049)))+(IKabs(((((-1.0)*x10051))+x10050))));
j4eval[2]=IKsign(x10057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10058=cj6*cj6;
IkReal x10059=r01*r01;
IkReal x10060=cj5*cj5;
IkReal x10061=r00*r00;
IkReal x10062=r02*r02;
IkReal x10063=(r00*sj6);
IkReal x10064=(r02*sj5);
IkReal x10065=((2.0)*cj6*r01);
IkReal x10066=((1.0)*x10060);
IkReal x10067=(x10058*x10061);
IkReal x10068=(x10058*x10059);
CheckValue<IkReal> x10069=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10066*x10067))+((x10060*x10068))+((x10060*x10061))+((cj5*x10064*x10065))+((x10060*x10063*x10065))+(((-1.0)*x10062*x10066))+x10062+x10067+x10059+(((2.0)*cj5*x10063*x10064))+(((-1.0)*x10068))+(((-1.0)*x10063*x10065)))),-1);
if(!x10069.valid){
continue;
}
CheckValue<IkReal> x10070 = IKatan2WithCheck(IkReal((((cj5*x10063))+((cj5*cj6*r01))+x10064)),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10069.value)))+(x10070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10071=IKcos(j4);
IkReal x10072=IKsin(j4);
IkReal x10073=(cj5*sj6);
IkReal x10074=(cj5*r21);
IkReal x10075=(cj5*r01);
IkReal x10076=(cj5*cj6*r11);
IkReal x10077=((1.0)*x10072);
IkReal x10078=(cj6*x10071);
IkReal x10079=(sj5*x10071);
IkReal x10080=(cj6*x10072);
IkReal x10081=(sj5*x10077);
IkReal x10082=((1.0)*sj6*x10071);
evalcond[0]=((((-1.0)*r21*sj6*x10077))+((r20*x10071*x10073))+((r20*x10080))+((r22*x10079))+((x10074*x10078)));
evalcond[1]=(((x10075*x10078))+((r00*x10080))+((r00*x10071*x10073))+((r02*x10079))+(((-1.0)*r01*sj6*x10077)));
evalcond[2]=((-1.0)+((r10*x10071*x10073))+((r12*x10079))+((x10071*x10076))+(((-1.0)*r11*sj6*x10077))+((r10*x10080)));
evalcond[3]=(((r20*x10078))+(((-1.0)*cj6*x10074*x10077))+(((-1.0)*r20*x10073*x10077))+(((-1.0)*r21*x10082))+(((-1.0)*r22*x10081)));
evalcond[4]=((((-1.0)*r10*x10073*x10077))+((r10*x10078))+(((-1.0)*x10076*x10077))+(((-1.0)*r12*x10081))+(((-1.0)*r11*x10082)));
evalcond[5]=((1.0)+((r00*x10078))+(((-1.0)*r01*x10082))+(((-1.0)*r02*x10081))+(((-1.0)*cj6*x10075*x10077))+(((-1.0)*r00*x10073*x10077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10083=((1.0)*sj5);
CheckValue<IkReal> x10084=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10083))+((cj5*r02))+(((-1.0)*r00*sj6*x10083)))),-1);
if(!x10084.valid){
continue;
}
CheckValue<IkReal> x10085 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10084.value)))+(x10085.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10086=IKcos(j4);
IkReal x10087=IKsin(j4);
IkReal x10088=(cj5*sj6);
IkReal x10089=(cj5*r21);
IkReal x10090=(cj5*r01);
IkReal x10091=(cj5*cj6*r11);
IkReal x10092=((1.0)*x10087);
IkReal x10093=(cj6*x10086);
IkReal x10094=(sj5*x10086);
IkReal x10095=(cj6*x10087);
IkReal x10096=(sj5*x10092);
IkReal x10097=((1.0)*sj6*x10086);
evalcond[0]=(((r22*x10094))+((r20*x10086*x10088))+((r20*x10095))+((x10089*x10093))+(((-1.0)*r21*sj6*x10092)));
evalcond[1]=(((x10090*x10093))+((r02*x10094))+((r00*x10086*x10088))+(((-1.0)*r01*sj6*x10092))+((r00*x10095)));
evalcond[2]=((-1.0)+((r12*x10094))+((x10086*x10091))+((r10*x10095))+((r10*x10086*x10088))+(((-1.0)*r11*sj6*x10092)));
evalcond[3]=((((-1.0)*r21*x10097))+(((-1.0)*r20*x10088*x10092))+(((-1.0)*cj6*x10089*x10092))+((r20*x10093))+(((-1.0)*r22*x10096)));
evalcond[4]=((((-1.0)*r10*x10088*x10092))+(((-1.0)*r11*x10097))+(((-1.0)*r12*x10096))+((r10*x10093))+(((-1.0)*x10091*x10092)));
evalcond[5]=((1.0)+(((-1.0)*r01*x10097))+(((-1.0)*cj6*x10090*x10092))+(((-1.0)*r02*x10096))+(((-1.0)*r00*x10088*x10092))+((r00*x10093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10098 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10098.valid){
continue;
}
CheckValue<IkReal> x10099=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10098.value)+(((1.5707963267949)*(x10099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10100=IKcos(j4);
IkReal x10101=IKsin(j4);
IkReal x10102=(cj5*sj6);
IkReal x10103=(cj5*r21);
IkReal x10104=(cj5*r01);
IkReal x10105=(cj5*cj6*r11);
IkReal x10106=((1.0)*x10101);
IkReal x10107=(cj6*x10100);
IkReal x10108=(sj5*x10100);
IkReal x10109=(cj6*x10101);
IkReal x10110=(sj5*x10106);
IkReal x10111=((1.0)*sj6*x10100);
evalcond[0]=(((r20*x10109))+(((-1.0)*r21*sj6*x10106))+((r20*x10100*x10102))+((x10103*x10107))+((r22*x10108)));
evalcond[1]=(((r00*x10109))+((r00*x10100*x10102))+((r02*x10108))+(((-1.0)*r01*sj6*x10106))+((x10104*x10107)));
evalcond[2]=((-1.0)+((r10*x10100*x10102))+((r10*x10109))+((r12*x10108))+(((-1.0)*r11*sj6*x10106))+((x10100*x10105)));
evalcond[3]=((((-1.0)*r20*x10102*x10106))+((r20*x10107))+(((-1.0)*r22*x10110))+(((-1.0)*cj6*x10103*x10106))+(((-1.0)*r21*x10111)));
evalcond[4]=((((-1.0)*r12*x10110))+(((-1.0)*x10105*x10106))+(((-1.0)*r10*x10102*x10106))+((r10*x10107))+(((-1.0)*r11*x10111)));
evalcond[5]=((1.0)+(((-1.0)*r00*x10102*x10106))+((r00*x10107))+(((-1.0)*r01*x10111))+(((-1.0)*cj6*x10104*x10106))+(((-1.0)*r02*x10110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10112=(cj5*r12);
IkReal x10113=(r10*sj6);
IkReal x10114=((0.37429)*sj5);
IkReal x10115=((0.01)*cj5);
IkReal x10116=(cj6*r11);
IkReal x10117=(r00*sj6);
IkReal x10118=(r20*sj6);
IkReal x10119=((1.0)*sj5);
IkReal x10120=((0.01)*sj5);
IkReal x10121=(cj6*r01);
IkReal x10122=(cj5*r02);
IkReal x10123=(cj6*r21);
IkReal x10124=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x10115*x10123))+(((-1.0)*x10114*x10123))+(((0.37429)*x10124))+(((-1.0)*pz))+(((-1.0)*x10114*x10118))+((x10115*x10118))+((r22*x10120)));
evalcond[2]=(((x10115*x10121))+(((-1.0)*x10114*x10121))+(((0.37429)*x10122))+(((-1.0)*px))+((r02*x10120))+(((-1.0)*x10114*x10117))+((x10115*x10117)));
evalcond[3]=((-0.43342)+(((-1.0)*x10113*x10114))+((x10113*x10115))+(((-1.0)*py))+(((0.37429)*x10112))+(((-1.0)*x10114*x10116))+((x10115*x10116))+((r12*x10120)));
evalcond[4]=((1.0)+(((-1.0)*x10118*x10119))+x10124+(((-1.0)*x10119*x10123)));
evalcond[5]=((((-1.0)*x10113*x10119))+x10112+(((-1.0)*x10116*x10119)));
evalcond[6]=((((-1.0)*x10117*x10119))+x10122+(((-1.0)*x10119*x10121)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10125=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10125;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10125);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10126=((1.0)*cj6);
IkReal x10127=(((cj5*r22))+(((-1.0)*r21*sj5*x10126))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10127;
j4eval[1]=IKsign(x10127);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10126))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10128=cj6*cj6;
IkReal x10129=cj5*cj5;
IkReal x10130=r00*r00;
IkReal x10131=r01*r01;
IkReal x10132=r02*r02;
IkReal x10133=(r00*sj6);
IkReal x10134=((2.0)*cj6*r01);
IkReal x10135=(cj5*r02*sj5);
IkReal x10136=((1.0)*x10128);
IkReal x10137=(x10129*x10130);
IkReal x10138=((((-2.0)*x10133*x10135))+((x10128*x10137))+((x10128*x10131))+((x10129*x10132))+(((-1.0)*x10129*x10131*x10136))+(((-1.0)*x10129*x10133*x10134))+((x10133*x10134))+(((-1.0)*x10131))+(((-1.0)*x10137))+(((-1.0)*x10132))+(((-1.0)*x10130*x10136))+(((-1.0)*x10134*x10135)));
j4eval[0]=x10138;
j4eval[1]=((IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x10133)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10139=cj6*cj6;
IkReal x10140=cj5*cj5;
IkReal x10141=r00*r00;
IkReal x10142=r01*r01;
IkReal x10143=r02*r02;
IkReal x10144=(r01*sj6);
IkReal x10145=(cj6*r00);
IkReal x10146=(cj5*cj6*r01);
IkReal x10147=((2.0)*r02*sj5);
IkReal x10148=((1.0)*x10139);
IkReal x10149=(cj5*r00*sj6);
IkReal x10150=(x10140*x10141);
CheckValue<IkReal> x10151=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10140*x10144*x10145))+(((-1.0)*x10140*x10142*x10148))+(((-1.0)*x10143))+(((-1.0)*x10142))+(((-1.0)*x10147*x10149))+(((-1.0)*x10146*x10147))+(((-1.0)*x10150))+((x10139*x10150))+((x10139*x10142))+(((-1.0)*x10141*x10148))+(((2.0)*x10144*x10145))+((x10140*x10143)))),-1);
if(!x10151.valid){
continue;
}
CheckValue<IkReal> x10152 = IKatan2WithCheck(IkReal((((r02*sj5))+x10146+x10149)),(x10144+(((-1.0)*x10145))),IKFAST_ATAN2_MAGTHRESH);
if(!x10152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10151.value)))+(x10152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10153=IKcos(j4);
IkReal x10154=IKsin(j4);
IkReal x10155=(cj5*sj6);
IkReal x10156=(cj5*r21);
IkReal x10157=(cj5*r01);
IkReal x10158=(cj5*cj6*r11);
IkReal x10159=((1.0)*x10154);
IkReal x10160=(cj6*x10153);
IkReal x10161=(sj5*x10153);
IkReal x10162=(cj6*x10154);
IkReal x10163=(sj5*x10159);
IkReal x10164=((1.0)*sj6*x10153);
evalcond[0]=(((r22*x10161))+(((-1.0)*r21*sj6*x10159))+((r20*x10162))+((r20*x10153*x10155))+((x10156*x10160)));
evalcond[1]=((((-1.0)*r01*sj6*x10159))+((x10157*x10160))+((r00*x10162))+((r02*x10161))+((r00*x10153*x10155)));
evalcond[2]=((1.0)+((r10*x10153*x10155))+((r10*x10162))+((x10153*x10158))+(((-1.0)*r11*sj6*x10159))+((r12*x10161)));
evalcond[3]=((((-1.0)*r21*x10164))+(((-1.0)*r22*x10163))+((r20*x10160))+(((-1.0)*cj6*x10156*x10159))+(((-1.0)*r20*x10155*x10159)));
evalcond[4]=(((r10*x10160))+(((-1.0)*r11*x10164))+(((-1.0)*r12*x10163))+(((-1.0)*r10*x10155*x10159))+(((-1.0)*x10158*x10159)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x10164))+(((-1.0)*cj6*x10157*x10159))+((r00*x10160))+(((-1.0)*r02*x10163))+(((-1.0)*r00*x10155*x10159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10165=((1.0)*cj6);
CheckValue<IkReal> x10166=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10165))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10166.valid){
continue;
}
CheckValue<IkReal> x10167 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x10165))),IKFAST_ATAN2_MAGTHRESH);
if(!x10167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10166.value)))+(x10167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10168=IKcos(j4);
IkReal x10169=IKsin(j4);
IkReal x10170=(cj5*sj6);
IkReal x10171=(cj5*r21);
IkReal x10172=(cj5*r01);
IkReal x10173=(cj5*cj6*r11);
IkReal x10174=((1.0)*x10169);
IkReal x10175=(cj6*x10168);
IkReal x10176=(sj5*x10168);
IkReal x10177=(cj6*x10169);
IkReal x10178=(sj5*x10174);
IkReal x10179=((1.0)*sj6*x10168);
evalcond[0]=(((x10171*x10175))+((r22*x10176))+((r20*x10168*x10170))+((r20*x10177))+(((-1.0)*r21*sj6*x10174)));
evalcond[1]=(((r02*x10176))+((r00*x10168*x10170))+((r00*x10177))+((x10172*x10175))+(((-1.0)*r01*sj6*x10174)));
evalcond[2]=((1.0)+((x10168*x10173))+((r10*x10177))+((r12*x10176))+((r10*x10168*x10170))+(((-1.0)*r11*sj6*x10174)));
evalcond[3]=((((-1.0)*r22*x10178))+(((-1.0)*r21*x10179))+(((-1.0)*cj6*x10171*x10174))+(((-1.0)*r20*x10170*x10174))+((r20*x10175)));
evalcond[4]=(((r10*x10175))+(((-1.0)*r10*x10170*x10174))+(((-1.0)*r12*x10178))+(((-1.0)*r11*x10179))+(((-1.0)*x10173*x10174)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x10172*x10174))+((r00*x10175))+(((-1.0)*r00*x10170*x10174))+(((-1.0)*r01*x10179))+(((-1.0)*r02*x10178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10180=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10180.valid){
continue;
}
CheckValue<IkReal> x10181 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10180.value)))+(x10181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10182=IKcos(j4);
IkReal x10183=IKsin(j4);
IkReal x10184=(cj5*sj6);
IkReal x10185=(cj5*r21);
IkReal x10186=(cj5*r01);
IkReal x10187=(cj5*cj6*r11);
IkReal x10188=((1.0)*x10183);
IkReal x10189=(cj6*x10182);
IkReal x10190=(sj5*x10182);
IkReal x10191=(cj6*x10183);
IkReal x10192=(sj5*x10188);
IkReal x10193=((1.0)*sj6*x10182);
evalcond[0]=((((-1.0)*r21*sj6*x10188))+((r20*x10182*x10184))+((r22*x10190))+((r20*x10191))+((x10185*x10189)));
evalcond[1]=(((r02*x10190))+(((-1.0)*r01*sj6*x10188))+((r00*x10182*x10184))+((r00*x10191))+((x10186*x10189)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x10188))+((r10*x10191))+((r12*x10190))+((r10*x10182*x10184))+((x10182*x10187)));
evalcond[3]=((((-1.0)*cj6*x10185*x10188))+(((-1.0)*r20*x10184*x10188))+(((-1.0)*r21*x10193))+((r20*x10189))+(((-1.0)*r22*x10192)));
evalcond[4]=(((r10*x10189))+(((-1.0)*r10*x10184*x10188))+(((-1.0)*x10187*x10188))+(((-1.0)*r11*x10193))+(((-1.0)*r12*x10192)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10192))+(((-1.0)*cj6*x10186*x10188))+(((-1.0)*r00*x10184*x10188))+((r00*x10189))+(((-1.0)*r01*x10193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10194=cj5*cj5;
IkReal x10195=cj6*cj6;
IkReal x10196=(cj6*r21);
IkReal x10197=(r20*sj6);
IkReal x10198=(r00*sj6);
IkReal x10199=(r22*sj5);
IkReal x10200=(r02*r22);
IkReal x10201=(cj6*r01);
IkReal x10202=(cj5*sj0);
IkReal x10203=(cj5*r02*sj5);
IkReal x10204=(r01*x10194);
IkReal x10205=(r21*x10195);
IkReal x10206=(r00*r20*x10194);
CheckValue<IkReal> x10207=IKPowWithIntegerCheck(IKsign((((x10194*x10196*x10198))+((r00*r20*x10195))+((x10204*x10205))+((r01*r21))+((x10194*x10197*x10201))+(((-1.0)*x10194*x10200))+(((-1.0)*x10197*x10201))+(((-1.0)*x10195*x10206))+x10206+x10200+((cj5*x10198*x10199))+((x10196*x10203))+((cj5*x10199*x10201))+((x10197*x10203))+(((-1.0)*r01*x10205))+(((-1.0)*x10196*x10198)))),-1);
if(!x10207.valid){
continue;
}
CheckValue<IkReal> x10208 = IKatan2WithCheck(IkReal((((sj0*x10199))+((x10196*x10202))+((x10197*x10202)))),(((r21*sj0*sj6))+(((-1.0)*cj6*r20*sj0))),IKFAST_ATAN2_MAGTHRESH);
if(!x10208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10207.value)))+(x10208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10209=IKcos(j4);
IkReal x10210=IKsin(j4);
IkReal x10211=((1.0)*cj0);
IkReal x10212=(cj5*r11);
IkReal x10213=((1.0)*sj6);
IkReal x10214=(cj5*r01);
IkReal x10215=(cj6*x10209);
IkReal x10216=(sj5*x10209);
IkReal x10217=(r21*x10210);
IkReal x10218=(cj6*x10210);
IkReal x10219=((1.0)*sj5*x10210);
IkReal x10220=(cj5*sj6*x10209);
IkReal x10221=(cj5*x10210*x10213);
evalcond[0]=(((r20*x10218))+(((-1.0)*x10213*x10217))+((r20*x10220))+((r22*x10216))+((cj5*r21*x10215)));
evalcond[1]=((((-1.0)*r20*x10221))+((r20*x10215))+(((-1.0)*r22*x10219))+(((-1.0)*r21*x10209*x10213))+(((-1.0)*cj5*cj6*x10217)));
evalcond[2]=((((-1.0)*r01*x10210*x10213))+((x10214*x10215))+(((-1.0)*x10211))+((r00*x10218))+((r02*x10216))+((r00*x10220)));
evalcond[3]=(((r10*x10220))+(((-1.0)*sj0))+((r10*x10218))+((r12*x10216))+(((-1.0)*r11*x10210*x10213))+((x10212*x10215)));
evalcond[4]=(sj0+(((-1.0)*r01*x10209*x10213))+((r00*x10215))+(((-1.0)*x10214*x10218))+(((-1.0)*r00*x10221))+(((-1.0)*r02*x10219)));
evalcond[5]=((((-1.0)*r10*x10221))+(((-1.0)*x10211))+((r10*x10215))+(((-1.0)*r11*x10209*x10213))+(((-1.0)*x10212*x10218))+(((-1.0)*r12*x10219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10222=(sj0*sj6);
IkReal x10223=((1.0)*cj6);
CheckValue<IkReal> x10224 = IKatan2WithCheck(IkReal((((r22*sj0*sj5))+((cj5*cj6*r21*sj0))+((cj5*r20*x10222)))),(((r21*x10222))+(((-1.0)*r20*sj0*x10223))),IKFAST_ATAN2_MAGTHRESH);
if(!x10224.valid){
continue;
}
CheckValue<IkReal> x10225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10223))+((cj5*r02)))),-1);
if(!x10225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10224.value)+(((1.5707963267949)*(x10225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10226=IKcos(j4);
IkReal x10227=IKsin(j4);
IkReal x10228=((1.0)*cj0);
IkReal x10229=(cj5*r11);
IkReal x10230=((1.0)*sj6);
IkReal x10231=(cj5*r01);
IkReal x10232=(cj6*x10226);
IkReal x10233=(sj5*x10226);
IkReal x10234=(r21*x10227);
IkReal x10235=(cj6*x10227);
IkReal x10236=((1.0)*sj5*x10227);
IkReal x10237=(cj5*sj6*x10226);
IkReal x10238=(cj5*x10227*x10230);
evalcond[0]=((((-1.0)*x10230*x10234))+((r22*x10233))+((cj5*r21*x10232))+((r20*x10237))+((r20*x10235)));
evalcond[1]=((((-1.0)*cj5*cj6*x10234))+(((-1.0)*r21*x10226*x10230))+(((-1.0)*r22*x10236))+((r20*x10232))+(((-1.0)*r20*x10238)));
evalcond[2]=((((-1.0)*r01*x10227*x10230))+((r02*x10233))+(((-1.0)*x10228))+((r00*x10235))+((r00*x10237))+((x10231*x10232)));
evalcond[3]=((((-1.0)*sj0))+(((-1.0)*r11*x10227*x10230))+((x10229*x10232))+((r12*x10233))+((r10*x10237))+((r10*x10235)));
evalcond[4]=(sj0+(((-1.0)*r01*x10226*x10230))+(((-1.0)*r00*x10238))+(((-1.0)*x10231*x10235))+((r00*x10232))+(((-1.0)*r02*x10236)));
evalcond[5]=((((-1.0)*r11*x10226*x10230))+(((-1.0)*x10228))+(((-1.0)*x10229*x10235))+(((-1.0)*r12*x10236))+(((-1.0)*r10*x10238))+((r10*x10232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10239=(cj0*r20);
IkReal x10240=(cj0*r21);
CheckValue<IkReal> x10241 = IKatan2WithCheck(IkReal((((cj5*cj6*x10240))+((cj5*sj6*x10239))+((cj0*r22*sj5)))),((((-1.0)*cj6*x10239))+((sj6*x10240))),IKFAST_ATAN2_MAGTHRESH);
if(!x10241.valid){
continue;
}
CheckValue<IkReal> x10242=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10242.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10241.value)+(((1.5707963267949)*(x10242.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10243=IKcos(j4);
IkReal x10244=IKsin(j4);
IkReal x10245=((1.0)*cj0);
IkReal x10246=(cj5*r11);
IkReal x10247=((1.0)*sj6);
IkReal x10248=(cj5*r01);
IkReal x10249=(cj6*x10243);
IkReal x10250=(sj5*x10243);
IkReal x10251=(r21*x10244);
IkReal x10252=(cj6*x10244);
IkReal x10253=((1.0)*sj5*x10244);
IkReal x10254=(cj5*sj6*x10243);
IkReal x10255=(cj5*x10244*x10247);
evalcond[0]=((((-1.0)*x10247*x10251))+((r22*x10250))+((cj5*r21*x10249))+((r20*x10252))+((r20*x10254)));
evalcond[1]=((((-1.0)*r20*x10255))+(((-1.0)*cj5*cj6*x10251))+(((-1.0)*r21*x10243*x10247))+(((-1.0)*r22*x10253))+((r20*x10249)));
evalcond[2]=(((r02*x10250))+((x10248*x10249))+(((-1.0)*x10245))+(((-1.0)*r01*x10244*x10247))+((r00*x10252))+((r00*x10254)));
evalcond[3]=(((r12*x10250))+((r10*x10252))+((r10*x10254))+(((-1.0)*sj0))+((x10246*x10249))+(((-1.0)*r11*x10244*x10247)));
evalcond[4]=((((-1.0)*r02*x10253))+sj0+(((-1.0)*r00*x10255))+(((-1.0)*r01*x10243*x10247))+(((-1.0)*x10248*x10252))+((r00*x10249)));
evalcond[5]=((((-1.0)*r10*x10255))+(((-1.0)*r11*x10243*x10247))+((r10*x10249))+(((-1.0)*x10246*x10252))+(((-1.0)*x10245))+(((-1.0)*r12*x10253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10256=(r10*sj6);
IkReal x10257=((0.37429)*sj5);
IkReal x10258=((0.01)*cj5);
IkReal x10259=(cj6*r11);
IkReal x10260=(r00*sj6);
IkReal x10261=(r20*sj6);
IkReal x10262=((0.01)*sj5);
IkReal x10263=(cj6*r01);
IkReal x10264=((0.37429)*cj5);
IkReal x10265=(cj6*r21);
IkReal x10266=((1.0)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.36442)+(((-1.0)*x10257*x10261))+(((-1.0)*x10257*x10265))+((r22*x10262))+((r22*x10264))+(((-1.0)*pz))+((x10258*x10265))+((x10258*x10261)));
evalcond[2]=((((-1.0)*x10257*x10260))+(((-1.0)*x10257*x10263))+((r02*x10262))+((r02*x10264))+(((-1.0)*px))+((x10258*x10263))+((x10258*x10260)));
evalcond[3]=(((x10258*x10259))+((r12*x10264))+((r12*x10262))+((x10256*x10258))+(((-1.0)*x10256*x10257))+(((-1.0)*py))+(((-1.0)*x10257*x10259)));
evalcond[4]=(((cj5*r22))+(((-1.0)*x10261*x10266))+(((-1.0)*x10265*x10266)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10267=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x10267))+(((-1.0)*cj6*r11*x10267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x10267))+(((-1.0)*cj6*r01*x10267))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x10267))+(((-1.0)*cj6*r11*x10267))))+IKsqr(((((-1.0)*r00*sj6*x10267))+(((-1.0)*cj6*r01*x10267))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x10267))+(((-1.0)*cj6*r11*x10267))), ((((-1.0)*r00*sj6*x10267))+(((-1.0)*cj6*r01*x10267))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10268=((1.0)*sj5);
evalcond[0]=(((cj5*r12))+(((-1.0)*r10*sj6*x10268))+(((-1.0)*(IKsin(j0))))+(((-1.0)*cj6*r11*x10268)));
evalcond[1]=((((-1.0)*r00*sj6*x10268))+(((-1.0)*(IKcos(j0))))+(((-1.0)*cj6*r01*x10268))+((cj5*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10269=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10269;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10270=((1.0)*cj6);
IkReal x10271=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10270))+((cj5*r02)));
j4eval[0]=x10271;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x10270)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10272=r11*r11;
IkReal x10273=cj5*cj5;
IkReal x10274=cj6*cj6;
IkReal x10275=r10*r10;
IkReal x10276=r12*r12;
IkReal x10277=(cj6*r10);
IkReal x10278=(r12*sj5);
IkReal x10279=((2.0)*r11);
IkReal x10280=(cj5*cj6);
IkReal x10281=(cj0*sj6);
IkReal x10282=(cj5*r10);
IkReal x10283=((1.0)*x10274);
IkReal x10284=(x10273*x10275);
IkReal x10285=(((sj6*x10273*x10277*x10279))+(((2.0)*sj6*x10278*x10282))+(((-1.0)*x10273*x10276))+(((-1.0)*x10283*x10284))+(((-1.0)*sj6*x10277*x10279))+((x10274*x10275))+(((-1.0)*x10272*x10283))+x10276+x10272+x10284+((x10272*x10273*x10274))+((x10278*x10279*x10280)));
j4eval[0]=x10285;
j4eval[1]=IKsign(x10285);
j4eval[2]=((IKabs((((cj0*r11*x10280))+((x10281*x10282))+((cj0*x10278)))))+(IKabs((((r11*x10281))+(((-1.0)*cj0*x10277))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10286=(cj5*r12);
IkReal x10287=(r10*sj6);
IkReal x10288=((0.37429)*sj5);
IkReal x10289=((0.01)*cj5);
IkReal x10290=(cj6*r11);
IkReal x10291=(r00*sj6);
IkReal x10292=(r20*sj6);
IkReal x10293=((1.0)*sj5);
IkReal x10294=((0.01)*sj5);
IkReal x10295=(cj6*r01);
IkReal x10296=(cj5*r02);
IkReal x10297=(cj6*r21);
IkReal x10298=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((x10289*x10297))+((x10289*x10292))+(((0.37429)*x10298))+(((-1.0)*pz))+(((-1.0)*x10288*x10297))+(((-1.0)*x10288*x10292))+((r22*x10294)));
evalcond[2]=(((x10289*x10295))+((x10289*x10291))+(((0.37429)*x10296))+(((-1.0)*px))+((r02*x10294))+(((-1.0)*x10288*x10291))+(((-1.0)*x10288*x10295)));
evalcond[3]=(((x10289*x10290))+((r12*x10294))+(((0.37429)*x10286))+(((-1.0)*py))+((x10287*x10289))+(((-1.0)*x10287*x10288))+(((-1.0)*x10288*x10290)));
evalcond[4]=((((-1.0)*x10292*x10293))+(((-1.0)*x10293*x10297))+x10298);
evalcond[5]=((-1.0)+(((-1.0)*x10290*x10293))+x10286+(((-1.0)*x10287*x10293)));
evalcond[6]=((((-1.0)*x10291*x10293))+(((-1.0)*x10293*x10295))+x10296);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10299=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10299;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10300=((1.0)*cj6);
IkReal x10301=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10300))+((cj5*r02)));
j4eval[0]=x10301;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r10*x10300))+((r11*sj6))))));
j4eval[2]=IKsign(x10301);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10302=cj6*cj6;
IkReal x10303=cj5*cj5;
IkReal x10304=r00*r00;
IkReal x10305=r01*r01;
IkReal x10306=r02*r02;
IkReal x10307=(r00*sj6);
IkReal x10308=((2.0)*cj6*r01);
IkReal x10309=(cj5*r02*sj5);
IkReal x10310=((1.0)*x10302);
IkReal x10311=(x10303*x10304);
IkReal x10312=((((-1.0)*x10304*x10310))+(((-1.0)*x10306))+(((-1.0)*x10305))+((x10302*x10311))+(((-1.0)*x10303*x10307*x10308))+((x10307*x10308))+(((-1.0)*x10311))+((x10302*x10305))+(((-1.0)*x10303*x10305*x10310))+(((-2.0)*x10307*x10309))+((x10303*x10306))+(((-1.0)*x10308*x10309)));
j4eval[0]=x10312;
j4eval[1]=((IKabs((((cj5*x10307))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10313=cj6*cj6;
IkReal x10314=cj5*cj5;
IkReal x10315=r00*r00;
IkReal x10316=r01*r01;
IkReal x10317=r02*r02;
IkReal x10318=(r01*sj6);
IkReal x10319=(cj6*r00);
IkReal x10320=(cj5*cj6*r01);
IkReal x10321=((2.0)*r02*sj5);
IkReal x10322=((1.0)*x10313);
IkReal x10323=(cj5*r00*sj6);
IkReal x10324=(x10314*x10315);
CheckValue<IkReal> x10325=IKPowWithIntegerCheck(IKsign(((((2.0)*x10318*x10319))+(((-1.0)*x10324))+((x10313*x10324))+(((-1.0)*x10321*x10323))+(((-2.0)*x10314*x10318*x10319))+(((-1.0)*x10315*x10322))+(((-1.0)*x10314*x10316*x10322))+(((-1.0)*x10316))+(((-1.0)*x10317))+((x10314*x10317))+(((-1.0)*x10320*x10321))+((x10313*x10316)))),-1);
if(!x10325.valid){
continue;
}
CheckValue<IkReal> x10326 = IKatan2WithCheck(IkReal((((r02*sj5))+x10323+x10320)),(x10318+(((-1.0)*x10319))),IKFAST_ATAN2_MAGTHRESH);
if(!x10326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10325.value)))+(x10326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10327=IKcos(j4);
IkReal x10328=IKsin(j4);
IkReal x10329=(cj5*r11);
IkReal x10330=(cj5*r10);
IkReal x10331=(cj5*r00);
IkReal x10332=(cj5*r01);
IkReal x10333=(cj5*r20);
IkReal x10334=(cj5*r21);
IkReal x10335=(cj6*x10327);
IkReal x10336=(sj5*x10327);
IkReal x10337=(cj6*x10328);
IkReal x10338=(sj6*x10327);
IkReal x10339=((1.0)*sj5*x10328);
IkReal x10340=((1.0)*sj6*x10328);
IkReal x10341=((1.0)*x10338);
evalcond[0]=(((r02*x10336))+((r00*x10337))+((x10332*x10335))+((x10331*x10338))+(((-1.0)*r01*x10340)));
evalcond[1]=((((-1.0)*r11*x10340))+((x10329*x10335))+((r12*x10336))+((x10330*x10338))+((r10*x10337)));
evalcond[2]=((1.0)+((r22*x10336))+((r20*x10337))+((x10334*x10335))+(((-1.0)*r21*x10340))+((x10333*x10338)));
evalcond[3]=((((-1.0)*r22*x10339))+((r20*x10335))+(((-1.0)*x10333*x10340))+(((-1.0)*x10334*x10337))+(((-1.0)*r21*x10341)));
evalcond[4]=((((-1.0)*r11*x10341))+(((-1.0)*r12*x10339))+(((-1.0)*x10329*x10337))+(((-1.0)*x10330*x10340))+((r10*x10335)));
evalcond[5]=((-1.0)+(((-1.0)*x10331*x10340))+((r00*x10335))+(((-1.0)*r01*x10341))+(((-1.0)*r02*x10339))+(((-1.0)*x10332*x10337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10342=((1.0)*sj5);
CheckValue<IkReal> x10343 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10343.valid){
continue;
}
CheckValue<IkReal> x10344=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10342))+((cj5*r02))+(((-1.0)*r00*sj6*x10342)))),-1);
if(!x10344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10343.value)+(((1.5707963267949)*(x10344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10345=IKcos(j4);
IkReal x10346=IKsin(j4);
IkReal x10347=(cj5*r11);
IkReal x10348=(cj5*r10);
IkReal x10349=(cj5*r00);
IkReal x10350=(cj5*r01);
IkReal x10351=(cj5*r20);
IkReal x10352=(cj5*r21);
IkReal x10353=(cj6*x10345);
IkReal x10354=(sj5*x10345);
IkReal x10355=(cj6*x10346);
IkReal x10356=(sj6*x10345);
IkReal x10357=((1.0)*sj5*x10346);
IkReal x10358=((1.0)*sj6*x10346);
IkReal x10359=((1.0)*x10356);
evalcond[0]=(((x10350*x10353))+((r00*x10355))+((x10349*x10356))+(((-1.0)*r01*x10358))+((r02*x10354)));
evalcond[1]=(((x10348*x10356))+((x10347*x10353))+(((-1.0)*r11*x10358))+((r10*x10355))+((r12*x10354)));
evalcond[2]=((1.0)+((r20*x10355))+((x10352*x10353))+((x10351*x10356))+((r22*x10354))+(((-1.0)*r21*x10358)));
evalcond[3]=(((r20*x10353))+(((-1.0)*r22*x10357))+(((-1.0)*x10351*x10358))+(((-1.0)*r21*x10359))+(((-1.0)*x10352*x10355)));
evalcond[4]=((((-1.0)*x10347*x10355))+(((-1.0)*x10348*x10358))+(((-1.0)*r12*x10357))+(((-1.0)*r11*x10359))+((r10*x10353)));
evalcond[5]=((-1.0)+((r00*x10353))+(((-1.0)*r01*x10359))+(((-1.0)*x10350*x10355))+(((-1.0)*x10349*x10358))+(((-1.0)*r02*x10357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10360 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10360.valid){
continue;
}
CheckValue<IkReal> x10361=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10360.value)+(((1.5707963267949)*(x10361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10362=IKcos(j4);
IkReal x10363=IKsin(j4);
IkReal x10364=(cj5*r11);
IkReal x10365=(cj5*r10);
IkReal x10366=(cj5*r00);
IkReal x10367=(cj5*r01);
IkReal x10368=(cj5*r20);
IkReal x10369=(cj5*r21);
IkReal x10370=(cj6*x10362);
IkReal x10371=(sj5*x10362);
IkReal x10372=(cj6*x10363);
IkReal x10373=(sj6*x10362);
IkReal x10374=((1.0)*sj5*x10363);
IkReal x10375=((1.0)*sj6*x10363);
IkReal x10376=((1.0)*x10373);
evalcond[0]=(((r00*x10372))+(((-1.0)*r01*x10375))+((r02*x10371))+((x10366*x10373))+((x10367*x10370)));
evalcond[1]=(((x10364*x10370))+((x10365*x10373))+((r10*x10372))+(((-1.0)*r11*x10375))+((r12*x10371)));
evalcond[2]=((1.0)+((r22*x10371))+((x10368*x10373))+((r20*x10372))+(((-1.0)*r21*x10375))+((x10369*x10370)));
evalcond[3]=((((-1.0)*x10369*x10372))+(((-1.0)*x10368*x10375))+((r20*x10370))+(((-1.0)*r21*x10376))+(((-1.0)*r22*x10374)));
evalcond[4]=((((-1.0)*x10364*x10372))+((r10*x10370))+(((-1.0)*x10365*x10375))+(((-1.0)*r11*x10376))+(((-1.0)*r12*x10374)));
evalcond[5]=((-1.0)+((r00*x10370))+(((-1.0)*r01*x10376))+(((-1.0)*r02*x10374))+(((-1.0)*x10366*x10375))+(((-1.0)*x10367*x10372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10377=(cj5*r12);
IkReal x10378=(r10*sj6);
IkReal x10379=((0.37429)*sj5);
IkReal x10380=((0.01)*cj5);
IkReal x10381=(cj6*r11);
IkReal x10382=(r00*sj6);
IkReal x10383=(r20*sj6);
IkReal x10384=((1.0)*sj5);
IkReal x10385=((0.01)*sj5);
IkReal x10386=(cj6*r01);
IkReal x10387=(cj5*r02);
IkReal x10388=(cj6*r21);
IkReal x10389=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-1.0)*x10379*x10388))+(((-1.0)*x10379*x10383))+((r22*x10385))+(((-1.0)*pz))+((x10380*x10383))+((x10380*x10388))+(((0.37429)*x10389)));
evalcond[2]=((((-1.0)*x10379*x10386))+(((-1.0)*x10379*x10382))+(((-1.0)*px))+((x10380*x10382))+((x10380*x10386))+((r02*x10385))+(((0.37429)*x10387)));
evalcond[3]=(((r12*x10385))+(((0.37429)*x10377))+(((-1.0)*x10379*x10381))+(((-1.0)*py))+((x10380*x10381))+((x10378*x10380))+(((-1.0)*x10378*x10379)));
evalcond[4]=((((-1.0)*x10384*x10388))+x10389+(((-1.0)*x10383*x10384)));
evalcond[5]=((1.0)+(((-1.0)*x10381*x10384))+x10377+(((-1.0)*x10378*x10384)));
evalcond[6]=((((-1.0)*x10384*x10386))+x10387+(((-1.0)*x10382*x10384)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10390=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10390;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10390);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10391=((1.0)*cj6);
IkReal x10392=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10391))+((cj5*r02)));
j4eval[0]=x10392;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x10391)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10393=cj6*cj6;
IkReal x10394=r01*r01;
IkReal x10395=cj5*cj5;
IkReal x10396=r00*r00;
IkReal x10397=r02*r02;
IkReal x10398=(r02*sj5);
IkReal x10399=(r01*sj6);
IkReal x10400=(cj6*r00);
IkReal x10401=(cj5*cj6*r01);
IkReal x10402=(cj5*r00*sj6);
IkReal x10403=((1.0)*x10395);
IkReal x10404=(x10393*x10396);
IkReal x10405=(x10393*x10394);
IkReal x10406=((((2.0)*x10395*x10399*x10400))+((x10395*x10396))+(((-2.0)*x10399*x10400))+(((-1.0)*x10397*x10403))+x10397+x10394+((x10395*x10405))+x10404+(((2.0)*x10398*x10402))+(((2.0)*x10398*x10401))+(((-1.0)*x10405))+(((-1.0)*x10403*x10404)));
j4eval[0]=x10406;
j4eval[1]=((IKabs((x10399+(((-1.0)*x10400)))))+(IKabs((x10398+x10402+x10401))));
j4eval[2]=IKsign(x10406);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10407=cj6*cj6;
IkReal x10408=r01*r01;
IkReal x10409=cj5*cj5;
IkReal x10410=r00*r00;
IkReal x10411=r02*r02;
IkReal x10412=(r00*sj6);
IkReal x10413=(r02*sj5);
IkReal x10414=((2.0)*cj6*r01);
IkReal x10415=((1.0)*x10409);
IkReal x10416=(x10407*x10410);
IkReal x10417=(x10407*x10408);
CheckValue<IkReal> x10418=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x10412*x10413))+((x10409*x10412*x10414))+(((-1.0)*x10412*x10414))+((cj5*x10413*x10414))+x10416+x10411+x10408+(((-1.0)*x10415*x10416))+(((-1.0)*x10411*x10415))+(((-1.0)*x10417))+((x10409*x10417))+((x10409*x10410)))),-1);
if(!x10418.valid){
continue;
}
CheckValue<IkReal> x10419 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+((cj5*x10412))+x10413)),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10418.value)))+(x10419.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10420=IKcos(j4);
IkReal x10421=IKsin(j4);
IkReal x10422=(cj5*r11);
IkReal x10423=(cj5*r10);
IkReal x10424=(cj5*r00);
IkReal x10425=(cj5*r01);
IkReal x10426=(cj5*r20);
IkReal x10427=(cj5*r21);
IkReal x10428=(cj6*x10420);
IkReal x10429=(sj5*x10420);
IkReal x10430=(cj6*x10421);
IkReal x10431=(sj6*x10420);
IkReal x10432=((1.0)*sj5*x10421);
IkReal x10433=((1.0)*sj6*x10421);
IkReal x10434=((1.0)*x10431);
evalcond[0]=(((x10425*x10428))+((r02*x10429))+(((-1.0)*r01*x10433))+((x10424*x10431))+((r00*x10430)));
evalcond[1]=(((x10423*x10431))+((x10422*x10428))+((r12*x10429))+((r10*x10430))+(((-1.0)*r11*x10433)));
evalcond[2]=((1.0)+((x10426*x10431))+((r22*x10429))+(((-1.0)*r21*x10433))+((r20*x10430))+((x10427*x10428)));
evalcond[3]=((((-1.0)*x10426*x10433))+(((-1.0)*r21*x10434))+(((-1.0)*x10427*x10430))+((r20*x10428))+(((-1.0)*r22*x10432)));
evalcond[4]=((((-1.0)*x10422*x10430))+(((-1.0)*x10423*x10433))+(((-1.0)*r12*x10432))+((r10*x10428))+(((-1.0)*r11*x10434)));
evalcond[5]=((1.0)+((r00*x10428))+(((-1.0)*x10425*x10430))+(((-1.0)*r01*x10434))+(((-1.0)*x10424*x10433))+(((-1.0)*r02*x10432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10435=((1.0)*sj5);
CheckValue<IkReal> x10436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x10435))+(((-1.0)*cj6*r01*x10435))+((cj5*r02)))),-1);
if(!x10436.valid){
continue;
}
CheckValue<IkReal> x10437 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10437.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10436.value)))+(x10437.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10438=IKcos(j4);
IkReal x10439=IKsin(j4);
IkReal x10440=(cj5*r11);
IkReal x10441=(cj5*r10);
IkReal x10442=(cj5*r00);
IkReal x10443=(cj5*r01);
IkReal x10444=(cj5*r20);
IkReal x10445=(cj5*r21);
IkReal x10446=(cj6*x10438);
IkReal x10447=(sj5*x10438);
IkReal x10448=(cj6*x10439);
IkReal x10449=(sj6*x10438);
IkReal x10450=((1.0)*sj5*x10439);
IkReal x10451=((1.0)*sj6*x10439);
IkReal x10452=((1.0)*x10449);
evalcond[0]=(((x10442*x10449))+((x10443*x10446))+(((-1.0)*r01*x10451))+((r02*x10447))+((r00*x10448)));
evalcond[1]=(((r12*x10447))+((x10440*x10446))+((x10441*x10449))+((r10*x10448))+(((-1.0)*r11*x10451)));
evalcond[2]=((1.0)+((x10445*x10446))+((r22*x10447))+((x10444*x10449))+((r20*x10448))+(((-1.0)*r21*x10451)));
evalcond[3]=((((-1.0)*x10445*x10448))+(((-1.0)*r22*x10450))+((r20*x10446))+(((-1.0)*r21*x10452))+(((-1.0)*x10444*x10451)));
evalcond[4]=((((-1.0)*x10440*x10448))+(((-1.0)*x10441*x10451))+(((-1.0)*r12*x10450))+((r10*x10446))+(((-1.0)*r11*x10452)));
evalcond[5]=((1.0)+(((-1.0)*x10443*x10448))+(((-1.0)*x10442*x10451))+(((-1.0)*r02*x10450))+(((-1.0)*r01*x10452))+((r00*x10446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10453 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10453.valid){
continue;
}
CheckValue<IkReal> x10454=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10453.value)+(((1.5707963267949)*(x10454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10455=IKcos(j4);
IkReal x10456=IKsin(j4);
IkReal x10457=(cj5*r11);
IkReal x10458=(cj5*r10);
IkReal x10459=(cj5*r00);
IkReal x10460=(cj5*r01);
IkReal x10461=(cj5*r20);
IkReal x10462=(cj5*r21);
IkReal x10463=(cj6*x10455);
IkReal x10464=(sj5*x10455);
IkReal x10465=(cj6*x10456);
IkReal x10466=(sj6*x10455);
IkReal x10467=((1.0)*sj5*x10456);
IkReal x10468=((1.0)*sj6*x10456);
IkReal x10469=((1.0)*x10466);
evalcond[0]=(((x10459*x10466))+(((-1.0)*r01*x10468))+((r00*x10465))+((x10460*x10463))+((r02*x10464)));
evalcond[1]=(((r12*x10464))+((x10457*x10463))+(((-1.0)*r11*x10468))+((x10458*x10466))+((r10*x10465)));
evalcond[2]=((1.0)+((r20*x10465))+((x10461*x10466))+((r22*x10464))+(((-1.0)*r21*x10468))+((x10462*x10463)));
evalcond[3]=((((-1.0)*x10461*x10468))+((r20*x10463))+(((-1.0)*x10462*x10465))+(((-1.0)*r22*x10467))+(((-1.0)*r21*x10469)));
evalcond[4]=((((-1.0)*x10457*x10465))+(((-1.0)*x10458*x10468))+(((-1.0)*r11*x10469))+((r10*x10463))+(((-1.0)*r12*x10467)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10467))+(((-1.0)*x10459*x10468))+(((-1.0)*r01*x10469))+((r00*x10463))+(((-1.0)*x10460*x10465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10470=r11*r11;
IkReal x10471=cj5*cj5;
IkReal x10472=cj6*cj6;
IkReal x10473=r10*r10;
IkReal x10474=r12*r12;
IkReal x10475=(cj6*r10);
IkReal x10476=(r12*sj5);
IkReal x10477=((2.0)*r11);
IkReal x10478=(cj5*cj6);
IkReal x10479=(cj0*sj6);
IkReal x10480=(cj5*r10);
IkReal x10481=((1.0)*x10472);
IkReal x10482=(x10471*x10473);
CheckValue<IkReal> x10483 = IKatan2WithCheck(IkReal((((x10479*x10480))+((cj0*x10476))+((cj0*r11*x10478)))),((((-1.0)*cj0*x10475))+((r11*x10479))),IKFAST_ATAN2_MAGTHRESH);
if(!x10483.valid){
continue;
}
CheckValue<IkReal> x10484=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10470*x10481))+(((-1.0)*x10481*x10482))+(((2.0)*sj6*x10476*x10480))+((x10472*x10473))+x10474+x10470+x10482+(((-1.0)*x10471*x10474))+((sj6*x10471*x10475*x10477))+(((-1.0)*sj6*x10475*x10477))+((x10476*x10477*x10478))+((x10470*x10471*x10472)))),-1);
if(!x10484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10483.value)+(((1.5707963267949)*(x10484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10485=IKcos(j4);
IkReal x10486=IKsin(j4);
IkReal x10487=(cj5*r11);
IkReal x10488=(cj5*r10);
IkReal x10489=(cj5*r00);
IkReal x10490=(cj5*r01);
IkReal x10491=(cj5*r20);
IkReal x10492=(cj5*r21);
IkReal x10493=(cj6*x10485);
IkReal x10494=(sj5*x10485);
IkReal x10495=(cj6*x10486);
IkReal x10496=(sj6*x10485);
IkReal x10497=((1.0)*sj5*x10486);
IkReal x10498=((1.0)*sj6*x10486);
IkReal x10499=((1.0)*x10496);
evalcond[0]=(((x10489*x10496))+(((-1.0)*r01*x10498))+((x10490*x10493))+((r02*x10494))+((r00*x10495)));
evalcond[1]=(((r10*x10495))+((r12*x10494))+(((-1.0)*r11*x10498))+((x10488*x10496))+((x10487*x10493)));
evalcond[2]=((1.0)+((r22*x10494))+(((-1.0)*r21*x10498))+((x10491*x10496))+((r20*x10495))+((x10492*x10493)));
evalcond[3]=((((-1.0)*x10492*x10495))+(((-1.0)*r22*x10497))+(((-1.0)*r21*x10499))+(((-1.0)*x10491*x10498))+((r20*x10493)));
evalcond[4]=((((-1.0)*x10488*x10498))+((r10*x10493))+cj0+(((-1.0)*r12*x10497))+(((-1.0)*r11*x10499))+(((-1.0)*x10487*x10495)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x10489*x10498))+(((-1.0)*x10490*x10495))+(((-1.0)*r01*x10499))+(((-1.0)*r02*x10497))+((r00*x10493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10500=((1.0)*sj5);
CheckValue<IkReal> x10501 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10501.valid){
continue;
}
CheckValue<IkReal> x10502=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10500))+(((-1.0)*r00*sj6*x10500))+((cj5*r02)))),-1);
if(!x10502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10501.value)+(((1.5707963267949)*(x10502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10503=IKcos(j4);
IkReal x10504=IKsin(j4);
IkReal x10505=(cj5*r11);
IkReal x10506=(cj5*r10);
IkReal x10507=(cj5*r00);
IkReal x10508=(cj5*r01);
IkReal x10509=(cj5*r20);
IkReal x10510=(cj5*r21);
IkReal x10511=(cj6*x10503);
IkReal x10512=(sj5*x10503);
IkReal x10513=(cj6*x10504);
IkReal x10514=(sj6*x10503);
IkReal x10515=((1.0)*sj5*x10504);
IkReal x10516=((1.0)*sj6*x10504);
IkReal x10517=((1.0)*x10514);
evalcond[0]=(((x10507*x10514))+((r00*x10513))+((r02*x10512))+((x10508*x10511))+(((-1.0)*r01*x10516)));
evalcond[1]=(((r12*x10512))+((r10*x10513))+((x10506*x10514))+(((-1.0)*r11*x10516))+((x10505*x10511)));
evalcond[2]=((1.0)+(((-1.0)*r21*x10516))+((x10510*x10511))+((x10509*x10514))+((r20*x10513))+((r22*x10512)));
evalcond[3]=((((-1.0)*r21*x10517))+(((-1.0)*r22*x10515))+((r20*x10511))+(((-1.0)*x10509*x10516))+(((-1.0)*x10510*x10513)));
evalcond[4]=(((r10*x10511))+cj0+(((-1.0)*x10505*x10513))+(((-1.0)*r11*x10517))+(((-1.0)*r12*x10515))+(((-1.0)*x10506*x10516)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x10515))+((r00*x10511))+(((-1.0)*x10508*x10513))+(((-1.0)*r01*x10517))+(((-1.0)*x10507*x10516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10518 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10518.valid){
continue;
}
CheckValue<IkReal> x10519=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10518.value)+(((1.5707963267949)*(x10519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10520=IKcos(j4);
IkReal x10521=IKsin(j4);
IkReal x10522=(cj5*r11);
IkReal x10523=(cj5*r10);
IkReal x10524=(cj5*r00);
IkReal x10525=(cj5*r01);
IkReal x10526=(cj5*r20);
IkReal x10527=(cj5*r21);
IkReal x10528=(cj6*x10520);
IkReal x10529=(sj5*x10520);
IkReal x10530=(cj6*x10521);
IkReal x10531=(sj6*x10520);
IkReal x10532=((1.0)*sj5*x10521);
IkReal x10533=((1.0)*sj6*x10521);
IkReal x10534=((1.0)*x10531);
evalcond[0]=(((r02*x10529))+((x10524*x10531))+(((-1.0)*r01*x10533))+((r00*x10530))+((x10525*x10528)));
evalcond[1]=((((-1.0)*r11*x10533))+((r10*x10530))+((x10523*x10531))+((x10522*x10528))+((r12*x10529)));
evalcond[2]=((1.0)+((r22*x10529))+(((-1.0)*r21*x10533))+((x10526*x10531))+((x10527*x10528))+((r20*x10530)));
evalcond[3]=((((-1.0)*r22*x10532))+(((-1.0)*r21*x10534))+(((-1.0)*x10527*x10530))+((r20*x10528))+(((-1.0)*x10526*x10533)));
evalcond[4]=(cj0+((r10*x10528))+(((-1.0)*r11*x10534))+(((-1.0)*x10523*x10533))+(((-1.0)*r12*x10532))+(((-1.0)*x10522*x10530)));
evalcond[5]=((((-1.0)*x10524*x10533))+(((-1.0)*sj0))+(((-1.0)*r02*x10532))+(((-1.0)*r01*x10534))+((r00*x10528))+(((-1.0)*x10525*x10530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10535=(cj5*r22);
IkReal x10536=(cj6*r21);
IkReal x10537=((1.0)*sj5);
IkReal x10538=((0.01)*cj5);
IkReal x10539=(r20*sj6);
IkReal x10540=((0.37429)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.069)+((x10536*x10538))+(((-1.0)*x10539*x10540))+(((0.37429)*x10535))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x10536*x10540))+((x10538*x10539)));
evalcond[2]=((1.0)+(((-1.0)*x10536*x10537))+(((-1.0)*x10537*x10539))+x10535);
evalcond[3]=(((cj5*r12))+(((-1.0)*r10*sj6*x10537))+(((-1.0)*cj6*r11*x10537)));
evalcond[4]=((((-1.0)*cj6*r01*x10537))+(((-1.0)*r00*sj6*x10537))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10541=((1.26697583102024)*cj5);
IkReal x10542=((0.0338501117053686)*cj5);
IkReal x10543=(r00*sj6);
IkReal x10544=(r10*sj6);
IkReal x10545=((1.26697583102024)*sj5);
IkReal x10546=(cj6*r11);
IkReal x10547=((0.0338501117053686)*sj5);
IkReal x10548=(cj6*r01);
if( IKabs(((((-1.0)*x10544*x10545))+(((-3.38501117053686)*py))+((r12*x10547))+((r12*x10541))+(((-1.0)*x10545*x10546))+((x10542*x10544))+((x10542*x10546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x10543*x10545))+(((-3.38501117053686)*px))+((r02*x10541))+((r02*x10547))+(((-1.0)*x10545*x10548))+((x10542*x10548))+((x10542*x10543)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x10544*x10545))+(((-3.38501117053686)*py))+((r12*x10547))+((r12*x10541))+(((-1.0)*x10545*x10546))+((x10542*x10544))+((x10542*x10546))))+IKsqr(((((-1.0)*x10543*x10545))+(((-3.38501117053686)*px))+((r02*x10541))+((r02*x10547))+(((-1.0)*x10545*x10548))+((x10542*x10548))+((x10542*x10543))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x10544*x10545))+(((-3.38501117053686)*py))+((r12*x10547))+((r12*x10541))+(((-1.0)*x10545*x10546))+((x10542*x10544))+((x10542*x10546))), ((((-1.0)*x10543*x10545))+(((-3.38501117053686)*px))+((r02*x10541))+((r02*x10547))+(((-1.0)*x10545*x10548))+((x10542*x10548))+((x10542*x10543))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10549=((0.01)*cj5);
IkReal x10550=(cj6*r01);
IkReal x10551=(r00*sj6);
IkReal x10552=((0.01)*sj5);
IkReal x10553=((0.37429)*sj5);
IkReal x10554=((0.37429)*cj5);
IkReal x10555=(r10*sj6);
IkReal x10556=(cj6*r11);
evalcond[0]=(((r02*x10554))+((r02*x10552))+(((-1.0)*x10551*x10553))+(((-1.0)*x10550*x10553))+(((-1.0)*px))+(((-0.29542)*(IKcos(j0))))+((x10549*x10551))+((x10549*x10550)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+(((-1.0)*py))+((r12*x10552))+((r12*x10554))+(((-1.0)*x10553*x10556))+(((-1.0)*x10553*x10555))+((x10549*x10555))+((x10549*x10556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10557=(r21*sj0);
IkReal x10558=(r20*sj0);
IkReal x10559=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10559;
j4eval[1]=((IKabs((((sj6*x10557))+(((-1.0)*cj6*x10558)))))+(IKabs((((cj5*cj6*x10557))+((r22*sj0*sj5))+((cj5*sj6*x10558))))));
j4eval[2]=IKsign(x10559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10560=(cj0*r20);
IkReal x10561=((1.0)*cj6);
IkReal x10562=(cj0*r21);
IkReal x10563=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10561)));
j4eval[0]=x10563;
j4eval[1]=((IKabs((((cj5*sj6*x10560))+((cj0*r22*sj5))+((cj5*cj6*x10562)))))+(IKabs(((((-1.0)*x10560*x10561))+((sj6*x10562))))));
j4eval[2]=IKsign(x10563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10564=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10564;
j4eval[1]=IKsign(x10564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10565=(cj5*r12);
IkReal x10566=(r10*sj6);
IkReal x10567=((0.37429)*sj5);
IkReal x10568=((0.01)*cj5);
IkReal x10569=(cj6*r11);
IkReal x10570=(r00*sj6);
IkReal x10571=(r20*sj6);
IkReal x10572=((1.0)*sj5);
IkReal x10573=((0.01)*sj5);
IkReal x10574=(cj6*r01);
IkReal x10575=(cj5*r02);
IkReal x10576=(cj6*r21);
IkReal x10577=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*pz))+((x10568*x10571))+((x10568*x10576))+((r22*x10573))+(((0.37429)*x10577))+(((-1.0)*x10567*x10571))+(((-1.0)*x10567*x10576)));
evalcond[2]=((((-1.0)*px))+((x10568*x10570))+((x10568*x10574))+((r02*x10573))+(((0.37429)*x10575))+(((-1.0)*x10567*x10570))+(((-1.0)*x10567*x10574)));
evalcond[3]=((-0.29542)+((x10566*x10568))+(((-1.0)*py))+(((-1.0)*x10567*x10569))+(((-1.0)*x10566*x10567))+((x10568*x10569))+(((0.37429)*x10565))+((r12*x10573)));
evalcond[4]=((1.0)+(((-1.0)*x10571*x10572))+x10577+(((-1.0)*x10572*x10576)));
evalcond[5]=((((-1.0)*x10569*x10572))+(((-1.0)*x10566*x10572))+x10565);
evalcond[6]=(x10575+(((-1.0)*x10572*x10574))+(((-1.0)*x10570*x10572)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10578=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10578;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10578);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10579=((1.0)*cj6);
IkReal x10580=(((cj5*r22))+(((-1.0)*r21*sj5*x10579))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10580;
j4eval[1]=IKsign(x10580);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10579))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10581=cj6*cj6;
IkReal x10582=cj5*cj5;
IkReal x10583=r00*r00;
IkReal x10584=r01*r01;
IkReal x10585=r02*r02;
IkReal x10586=(r00*sj6);
IkReal x10587=((2.0)*cj6*r01);
IkReal x10588=(cj5*r02*sj5);
IkReal x10589=((1.0)*x10581);
IkReal x10590=(x10582*x10583);
IkReal x10591=((((-1.0)*x10587*x10588))+(((-1.0)*x10582*x10586*x10587))+(((-1.0)*x10590))+((x10586*x10587))+((x10581*x10584))+((x10581*x10590))+(((-1.0)*x10582*x10584*x10589))+(((-1.0)*x10585))+(((-1.0)*x10584))+(((-1.0)*x10583*x10589))+(((-2.0)*x10586*x10588))+((x10582*x10585)));
j4eval[0]=x10591;
j4eval[1]=((IKabs((((cj5*x10586))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10592=cj6*cj6;
IkReal x10593=cj5*cj5;
IkReal x10594=r00*r00;
IkReal x10595=r01*r01;
IkReal x10596=r02*r02;
IkReal x10597=(r01*sj6);
IkReal x10598=(cj6*r00);
IkReal x10599=(cj5*cj6*r01);
IkReal x10600=((2.0)*r02*sj5);
IkReal x10601=((1.0)*x10592);
IkReal x10602=(cj5*r00*sj6);
IkReal x10603=(x10593*x10594);
CheckValue<IkReal> x10604=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10600*x10602))+((x10592*x10595))+(((-1.0)*x10596))+(((-1.0)*x10595))+((x10592*x10603))+((x10593*x10596))+(((-1.0)*x10603))+(((-1.0)*x10594*x10601))+(((2.0)*x10597*x10598))+(((-1.0)*x10599*x10600))+(((-1.0)*x10593*x10595*x10601))+(((-2.0)*x10593*x10597*x10598)))),-1);
if(!x10604.valid){
continue;
}
CheckValue<IkReal> x10605 = IKatan2WithCheck(IkReal((((r02*sj5))+x10599+x10602)),((((-1.0)*x10598))+x10597),IKFAST_ATAN2_MAGTHRESH);
if(!x10605.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10604.value)))+(x10605.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10606=IKcos(j4);
IkReal x10607=IKsin(j4);
IkReal x10608=(cj5*sj6);
IkReal x10609=(cj5*r21);
IkReal x10610=(cj5*r01);
IkReal x10611=(cj5*cj6*r11);
IkReal x10612=((1.0)*x10607);
IkReal x10613=(cj6*x10606);
IkReal x10614=(sj5*x10606);
IkReal x10615=(cj6*x10607);
IkReal x10616=(sj5*x10612);
IkReal x10617=((1.0)*sj6*x10606);
evalcond[0]=(((x10609*x10613))+((r22*x10614))+(((-1.0)*r21*sj6*x10612))+((r20*x10615))+((r20*x10606*x10608)));
evalcond[1]=(((r02*x10614))+((r00*x10606*x10608))+((r00*x10615))+((x10610*x10613))+(((-1.0)*r01*sj6*x10612)));
evalcond[2]=((1.0)+((r12*x10614))+((r10*x10615))+((r10*x10606*x10608))+(((-1.0)*r11*sj6*x10612))+((x10606*x10611)));
evalcond[3]=((((-1.0)*cj6*x10609*x10612))+(((-1.0)*r21*x10617))+((r20*x10613))+(((-1.0)*r22*x10616))+(((-1.0)*r20*x10608*x10612)));
evalcond[4]=((((-1.0)*r10*x10608*x10612))+(((-1.0)*x10611*x10612))+((r10*x10613))+(((-1.0)*r11*x10617))+(((-1.0)*r12*x10616)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x10610*x10612))+(((-1.0)*r02*x10616))+((r00*x10613))+(((-1.0)*r01*x10617))+(((-1.0)*r00*x10608*x10612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10618=((1.0)*cj6);
CheckValue<IkReal> x10619 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x10618))),IKFAST_ATAN2_MAGTHRESH);
if(!x10619.valid){
continue;
}
CheckValue<IkReal> x10620=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10618))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10619.value)+(((1.5707963267949)*(x10620.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10621=IKcos(j4);
IkReal x10622=IKsin(j4);
IkReal x10623=(cj5*sj6);
IkReal x10624=(cj5*r21);
IkReal x10625=(cj5*r01);
IkReal x10626=(cj5*cj6*r11);
IkReal x10627=((1.0)*x10622);
IkReal x10628=(cj6*x10621);
IkReal x10629=(sj5*x10621);
IkReal x10630=(cj6*x10622);
IkReal x10631=(sj5*x10627);
IkReal x10632=((1.0)*sj6*x10621);
evalcond[0]=(((r20*x10630))+(((-1.0)*r21*sj6*x10627))+((r22*x10629))+((r20*x10621*x10623))+((x10624*x10628)));
evalcond[1]=(((x10625*x10628))+((r00*x10621*x10623))+((r00*x10630))+((r02*x10629))+(((-1.0)*r01*sj6*x10627)));
evalcond[2]=((1.0)+((r10*x10621*x10623))+((r10*x10630))+((x10621*x10626))+(((-1.0)*r11*sj6*x10627))+((r12*x10629)));
evalcond[3]=(((r20*x10628))+(((-1.0)*cj6*x10624*x10627))+(((-1.0)*r22*x10631))+(((-1.0)*r20*x10623*x10627))+(((-1.0)*r21*x10632)));
evalcond[4]=((((-1.0)*r10*x10623*x10627))+(((-1.0)*x10626*x10627))+((r10*x10628))+(((-1.0)*r12*x10631))+(((-1.0)*r11*x10632)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10631))+(((-1.0)*r01*x10632))+((r00*x10628))+(((-1.0)*cj6*x10625*x10627))+(((-1.0)*r00*x10623*x10627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10633=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10633.valid){
continue;
}
CheckValue<IkReal> x10634 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10633.value)))+(x10634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10635=IKcos(j4);
IkReal x10636=IKsin(j4);
IkReal x10637=(cj5*sj6);
IkReal x10638=(cj5*r21);
IkReal x10639=(cj5*r01);
IkReal x10640=(cj5*cj6*r11);
IkReal x10641=((1.0)*x10636);
IkReal x10642=(cj6*x10635);
IkReal x10643=(sj5*x10635);
IkReal x10644=(cj6*x10636);
IkReal x10645=(sj5*x10641);
IkReal x10646=((1.0)*sj6*x10635);
evalcond[0]=(((r20*x10644))+((x10638*x10642))+(((-1.0)*r21*sj6*x10641))+((r22*x10643))+((r20*x10635*x10637)));
evalcond[1]=(((x10639*x10642))+((r00*x10644))+((r00*x10635*x10637))+((r02*x10643))+(((-1.0)*r01*sj6*x10641)));
evalcond[2]=((1.0)+((r10*x10635*x10637))+((x10635*x10640))+((r10*x10644))+(((-1.0)*r11*sj6*x10641))+((r12*x10643)));
evalcond[3]=(((r20*x10642))+(((-1.0)*r22*x10645))+(((-1.0)*r20*x10637*x10641))+(((-1.0)*r21*x10646))+(((-1.0)*cj6*x10638*x10641)));
evalcond[4]=((((-1.0)*x10640*x10641))+(((-1.0)*r11*x10646))+(((-1.0)*r10*x10637*x10641))+(((-1.0)*r12*x10645))+((r10*x10642)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10645))+(((-1.0)*r01*x10646))+(((-1.0)*r00*x10637*x10641))+(((-1.0)*cj6*x10639*x10641))+((r00*x10642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10647=(cj5*r12);
IkReal x10648=(r10*sj6);
IkReal x10649=((0.37429)*sj5);
IkReal x10650=((0.01)*cj5);
IkReal x10651=(cj6*r11);
IkReal x10652=(r00*sj6);
IkReal x10653=(r20*sj6);
IkReal x10654=((1.0)*sj5);
IkReal x10655=((0.01)*sj5);
IkReal x10656=(cj6*r01);
IkReal x10657=(cj5*r02);
IkReal x10658=(cj6*r21);
IkReal x10659=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((0.37429)*x10659))+((r22*x10655))+(((-1.0)*pz))+(((-1.0)*x10649*x10653))+(((-1.0)*x10649*x10658))+((x10650*x10658))+((x10650*x10653)));
evalcond[2]=((((0.37429)*x10657))+((r02*x10655))+(((-1.0)*px))+(((-1.0)*x10649*x10652))+(((-1.0)*x10649*x10656))+((x10650*x10652))+((x10650*x10656)));
evalcond[3]=((0.29542)+((x10648*x10650))+(((0.37429)*x10647))+(((-1.0)*x10648*x10649))+(((-1.0)*py))+(((-1.0)*x10649*x10651))+((x10650*x10651))+((r12*x10655)));
evalcond[4]=((1.0)+(((-1.0)*x10653*x10654))+(((-1.0)*x10654*x10658))+x10659);
evalcond[5]=((((-1.0)*x10651*x10654))+(((-1.0)*x10648*x10654))+x10647);
evalcond[6]=((((-1.0)*x10654*x10656))+(((-1.0)*x10652*x10654))+x10657);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10660=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10660;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10661=((1.0)*sj5);
IkReal x10662=((((-1.0)*cj6*r01*x10661))+(((-1.0)*r00*sj6*x10661))+((cj5*r02)));
j4eval[0]=x10662;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10663=cj6*cj6;
IkReal x10664=r01*r01;
IkReal x10665=cj5*cj5;
IkReal x10666=r00*r00;
IkReal x10667=r02*r02;
IkReal x10668=(r02*sj5);
IkReal x10669=(r01*sj6);
IkReal x10670=(cj6*r00);
IkReal x10671=(cj5*cj6*r01);
IkReal x10672=(cj5*r00*sj6);
IkReal x10673=((1.0)*x10665);
IkReal x10674=(x10663*x10666);
IkReal x10675=(x10663*x10664);
IkReal x10676=((((-1.0)*x10673*x10674))+(((-2.0)*x10669*x10670))+(((-1.0)*x10675))+((x10665*x10675))+(((2.0)*x10668*x10672))+(((2.0)*x10668*x10671))+((x10665*x10666))+x10674+x10667+x10664+(((2.0)*x10665*x10669*x10670))+(((-1.0)*x10667*x10673)));
j4eval[0]=x10676;
j4eval[1]=((IKabs((x10671+x10672+x10668)))+(IKabs(((((-1.0)*x10670))+x10669))));
j4eval[2]=IKsign(x10676);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10677=cj6*cj6;
IkReal x10678=r01*r01;
IkReal x10679=cj5*cj5;
IkReal x10680=r00*r00;
IkReal x10681=r02*r02;
IkReal x10682=(r00*sj6);
IkReal x10683=(r02*sj5);
IkReal x10684=((2.0)*cj6*r01);
IkReal x10685=((1.0)*x10679);
IkReal x10686=(x10677*x10680);
IkReal x10687=(x10677*x10678);
CheckValue<IkReal> x10688 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+x10683+((cj5*x10682)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10688.valid){
continue;
}
CheckValue<IkReal> x10689=IKPowWithIntegerCheck(IKsign((((cj5*x10683*x10684))+(((-1.0)*x10682*x10684))+(((-1.0)*x10685*x10686))+((x10679*x10682*x10684))+((x10679*x10680))+((x10679*x10687))+(((-1.0)*x10687))+x10681+x10686+x10678+(((2.0)*cj5*x10682*x10683))+(((-1.0)*x10681*x10685)))),-1);
if(!x10689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10688.value)+(((1.5707963267949)*(x10689.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10690=IKcos(j4);
IkReal x10691=IKsin(j4);
IkReal x10692=(cj5*sj6);
IkReal x10693=(cj5*r21);
IkReal x10694=(cj5*r01);
IkReal x10695=(cj5*cj6*r11);
IkReal x10696=((1.0)*x10691);
IkReal x10697=(cj6*x10690);
IkReal x10698=(sj5*x10690);
IkReal x10699=(cj6*x10691);
IkReal x10700=(sj5*x10696);
IkReal x10701=((1.0)*sj6*x10690);
evalcond[0]=(((r22*x10698))+((r20*x10690*x10692))+((x10693*x10697))+(((-1.0)*r21*sj6*x10696))+((r20*x10699)));
evalcond[1]=(((r00*x10690*x10692))+((r02*x10698))+((x10694*x10697))+((r00*x10699))+(((-1.0)*r01*sj6*x10696)));
evalcond[2]=((-1.0)+((r10*x10699))+(((-1.0)*r11*sj6*x10696))+((x10690*x10695))+((r10*x10690*x10692))+((r12*x10698)));
evalcond[3]=((((-1.0)*r20*x10692*x10696))+(((-1.0)*r22*x10700))+(((-1.0)*r21*x10701))+((r20*x10697))+(((-1.0)*cj6*x10693*x10696)));
evalcond[4]=((((-1.0)*r12*x10700))+((r10*x10697))+(((-1.0)*r10*x10692*x10696))+(((-1.0)*x10695*x10696))+(((-1.0)*r11*x10701)));
evalcond[5]=((1.0)+(((-1.0)*cj6*x10694*x10696))+(((-1.0)*r02*x10700))+(((-1.0)*r00*x10692*x10696))+((r00*x10697))+(((-1.0)*r01*x10701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10702=((1.0)*sj5);
CheckValue<IkReal> x10703=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10702))+((cj5*r02))+(((-1.0)*r00*sj6*x10702)))),-1);
if(!x10703.valid){
continue;
}
CheckValue<IkReal> x10704 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10704.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10703.value)))+(x10704.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10705=IKcos(j4);
IkReal x10706=IKsin(j4);
IkReal x10707=(cj5*sj6);
IkReal x10708=(cj5*r21);
IkReal x10709=(cj5*r01);
IkReal x10710=(cj5*cj6*r11);
IkReal x10711=((1.0)*x10706);
IkReal x10712=(cj6*x10705);
IkReal x10713=(sj5*x10705);
IkReal x10714=(cj6*x10706);
IkReal x10715=(sj5*x10711);
IkReal x10716=((1.0)*sj6*x10705);
evalcond[0]=(((r20*x10705*x10707))+((r20*x10714))+((x10708*x10712))+((r22*x10713))+(((-1.0)*r21*sj6*x10711)));
evalcond[1]=(((r00*x10705*x10707))+((r00*x10714))+((x10709*x10712))+(((-1.0)*r01*sj6*x10711))+((r02*x10713)));
evalcond[2]=((-1.0)+((r12*x10713))+(((-1.0)*r11*sj6*x10711))+((r10*x10714))+((x10705*x10710))+((r10*x10705*x10707)));
evalcond[3]=((((-1.0)*cj6*x10708*x10711))+(((-1.0)*r21*x10716))+(((-1.0)*r20*x10707*x10711))+((r20*x10712))+(((-1.0)*r22*x10715)));
evalcond[4]=((((-1.0)*x10710*x10711))+(((-1.0)*r10*x10707*x10711))+(((-1.0)*r12*x10715))+(((-1.0)*r11*x10716))+((r10*x10712)));
evalcond[5]=((1.0)+(((-1.0)*cj6*x10709*x10711))+(((-1.0)*r01*x10716))+(((-1.0)*r00*x10707*x10711))+((r00*x10712))+(((-1.0)*r02*x10715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10717 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10717.valid){
continue;
}
CheckValue<IkReal> x10718=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10717.value)+(((1.5707963267949)*(x10718.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10719=IKcos(j4);
IkReal x10720=IKsin(j4);
IkReal x10721=(cj5*sj6);
IkReal x10722=(cj5*r21);
IkReal x10723=(cj5*r01);
IkReal x10724=(cj5*cj6*r11);
IkReal x10725=((1.0)*x10720);
IkReal x10726=(cj6*x10719);
IkReal x10727=(sj5*x10719);
IkReal x10728=(cj6*x10720);
IkReal x10729=(sj5*x10725);
IkReal x10730=((1.0)*sj6*x10719);
evalcond[0]=(((r22*x10727))+(((-1.0)*r21*sj6*x10725))+((r20*x10719*x10721))+((r20*x10728))+((x10722*x10726)));
evalcond[1]=(((x10723*x10726))+((r02*x10727))+(((-1.0)*r01*sj6*x10725))+((r00*x10719*x10721))+((r00*x10728)));
evalcond[2]=((-1.0)+((r10*x10728))+((x10719*x10724))+((r12*x10727))+(((-1.0)*r11*sj6*x10725))+((r10*x10719*x10721)));
evalcond[3]=((((-1.0)*r22*x10729))+(((-1.0)*r20*x10721*x10725))+(((-1.0)*cj6*x10722*x10725))+(((-1.0)*r21*x10730))+((r20*x10726)));
evalcond[4]=(((r10*x10726))+(((-1.0)*r11*x10730))+(((-1.0)*r12*x10729))+(((-1.0)*r10*x10721*x10725))+(((-1.0)*x10724*x10725)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10729))+(((-1.0)*r01*x10730))+(((-1.0)*cj6*x10723*x10725))+(((-1.0)*r00*x10721*x10725))+((r00*x10726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10731=(cj5*r12);
IkReal x10732=(r10*sj6);
IkReal x10733=((0.37429)*sj5);
IkReal x10734=((0.01)*cj5);
IkReal x10735=(cj6*r11);
IkReal x10736=(r00*sj6);
IkReal x10737=(r20*sj6);
IkReal x10738=((1.0)*sj5);
IkReal x10739=((0.01)*sj5);
IkReal x10740=(cj6*r01);
IkReal x10741=(cj5*r02);
IkReal x10742=(cj6*r21);
IkReal x10743=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+(((0.37429)*x10743))+(((-1.0)*x10733*x10737))+(((-1.0)*x10733*x10742))+((x10734*x10742))+(((-1.0)*pz))+((x10734*x10737))+((r22*x10739)));
evalcond[2]=((-0.29542)+(((0.37429)*x10741))+((r02*x10739))+(((-1.0)*x10733*x10736))+(((-1.0)*x10733*x10740))+((x10734*x10740))+(((-1.0)*px))+((x10734*x10736)));
evalcond[3]=((((-1.0)*x10733*x10735))+(((-1.0)*x10732*x10733))+((x10732*x10734))+(((-1.0)*py))+(((0.37429)*x10731))+((x10734*x10735))+((r12*x10739)));
evalcond[4]=((1.0)+(((-1.0)*x10738*x10742))+(((-1.0)*x10737*x10738))+x10743);
evalcond[5]=((((-1.0)*x10735*x10738))+(((-1.0)*x10732*x10738))+x10731);
evalcond[6]=((((-1.0)*x10738*x10740))+x10741+(((-1.0)*x10736*x10738)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10744=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10744;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x10744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10745=((1.0)*sj5);
IkReal x10746=((((-1.0)*r10*sj6*x10745))+((cj5*r12))+(((-1.0)*cj6*r11*x10745)));
j4eval[0]=x10746;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10747=r11*r11;
IkReal x10748=cj5*cj5;
IkReal x10749=cj6*cj6;
IkReal x10750=r10*r10;
IkReal x10751=r12*r12;
IkReal x10752=(r12*sj5);
IkReal x10753=(r11*sj6);
IkReal x10754=((1.0)*x10749);
IkReal x10755=(cj5*cj6*r11);
IkReal x10756=(cj5*r10*sj6);
IkReal x10757=((2.0)*cj6*r10);
IkReal x10758=(x10748*x10750);
IkReal x10759=((((-1.0)*x10748*x10751))+(((-1.0)*x10747*x10754))+((x10749*x10750))+(((2.0)*x10752*x10755))+(((2.0)*x10752*x10756))+((x10747*x10748*x10749))+(((-1.0)*x10753*x10757))+((x10748*x10753*x10757))+x10747+x10758+x10751+(((-1.0)*x10754*x10758)));
j4eval[0]=x10759;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+x10753)))+(IKabs((x10752+x10756+x10755))));
j4eval[2]=IKsign(x10759);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10760=r11*r11;
IkReal x10761=cj5*cj5;
IkReal x10762=cj6*cj6;
IkReal x10763=r10*r10;
IkReal x10764=r12*r12;
IkReal x10765=(r10*sj6);
IkReal x10766=(r12*sj5);
IkReal x10767=((1.0)*x10762);
IkReal x10768=(cj5*cj6*r11);
IkReal x10769=((2.0)*cj6*r11);
IkReal x10770=(x10761*x10763);
CheckValue<IkReal> x10771=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x10765*x10766))+(((2.0)*x10766*x10768))+(((-1.0)*x10765*x10769))+(((-1.0)*x10767*x10770))+(((-1.0)*x10761*x10764))+(((-1.0)*x10760*x10767))+((x10761*x10765*x10769))+x10760+x10764+x10770+((x10762*x10763))+((x10760*x10761*x10762)))),-1);
if(!x10771.valid){
continue;
}
CheckValue<IkReal> x10772 = IKatan2WithCheck(IkReal((((cj5*x10765))+x10766+x10768)),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10771.value)))+(x10772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10773=IKcos(j4);
IkReal x10774=IKsin(j4);
IkReal x10775=(cj5*sj6);
IkReal x10776=(cj5*r01);
IkReal x10777=(cj5*r21);
IkReal x10778=(cj5*cj6*r11);
IkReal x10779=((1.0)*x10774);
IkReal x10780=(cj6*x10773);
IkReal x10781=(sj5*x10773);
IkReal x10782=(cj6*x10774);
IkReal x10783=(sj5*x10779);
IkReal x10784=((1.0)*sj6*x10773);
evalcond[0]=(((r20*x10773*x10775))+((r22*x10781))+(((-1.0)*r21*sj6*x10779))+((x10777*x10780))+((r20*x10782)));
evalcond[1]=(((r10*x10773*x10775))+((x10773*x10778))+(((-1.0)*r11*sj6*x10779))+((r12*x10781))+((r10*x10782)));
evalcond[2]=((1.0)+((r00*x10773*x10775))+((r02*x10781))+((x10776*x10780))+((r00*x10782))+(((-1.0)*r01*sj6*x10779)));
evalcond[3]=((((-1.0)*r21*x10784))+(((-1.0)*cj6*x10777*x10779))+((r20*x10780))+(((-1.0)*r20*x10775*x10779))+(((-1.0)*r22*x10783)));
evalcond[4]=((((-1.0)*r01*x10784))+(((-1.0)*cj6*x10776*x10779))+(((-1.0)*r00*x10775*x10779))+((r00*x10780))+(((-1.0)*r02*x10783)));
evalcond[5]=((1.0)+(((-1.0)*r10*x10775*x10779))+(((-1.0)*r11*x10784))+(((-1.0)*r12*x10783))+((r10*x10780))+(((-1.0)*x10778*x10779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10785=((1.0)*sj5);
CheckValue<IkReal> x10786=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x10785))+(((-1.0)*r10*sj6*x10785)))),-1);
if(!x10786.valid){
continue;
}
CheckValue<IkReal> x10787 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10787.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10786.value)))+(x10787.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10788=IKcos(j4);
IkReal x10789=IKsin(j4);
IkReal x10790=(cj5*sj6);
IkReal x10791=(cj5*r01);
IkReal x10792=(cj5*r21);
IkReal x10793=(cj5*cj6*r11);
IkReal x10794=((1.0)*x10789);
IkReal x10795=(cj6*x10788);
IkReal x10796=(sj5*x10788);
IkReal x10797=(cj6*x10789);
IkReal x10798=(sj5*x10794);
IkReal x10799=((1.0)*sj6*x10788);
evalcond[0]=(((r20*x10788*x10790))+((x10792*x10795))+(((-1.0)*r21*sj6*x10794))+((r20*x10797))+((r22*x10796)));
evalcond[1]=(((r10*x10797))+((r12*x10796))+(((-1.0)*r11*sj6*x10794))+((x10788*x10793))+((r10*x10788*x10790)));
evalcond[2]=((1.0)+((r02*x10796))+(((-1.0)*r01*sj6*x10794))+((r00*x10788*x10790))+((x10791*x10795))+((r00*x10797)));
evalcond[3]=((((-1.0)*cj6*x10792*x10794))+(((-1.0)*r21*x10799))+((r20*x10795))+(((-1.0)*r20*x10790*x10794))+(((-1.0)*r22*x10798)));
evalcond[4]=((((-1.0)*r02*x10798))+(((-1.0)*cj6*x10791*x10794))+(((-1.0)*r01*x10799))+(((-1.0)*r00*x10790*x10794))+((r00*x10795)));
evalcond[5]=((1.0)+((r10*x10795))+(((-1.0)*r12*x10798))+(((-1.0)*r11*x10799))+(((-1.0)*x10793*x10794))+(((-1.0)*r10*x10790*x10794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10800=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10800.valid){
continue;
}
CheckValue<IkReal> x10801 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10800.value)))+(x10801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10802=IKcos(j4);
IkReal x10803=IKsin(j4);
IkReal x10804=(cj5*sj6);
IkReal x10805=(cj5*r01);
IkReal x10806=(cj5*r21);
IkReal x10807=(cj5*cj6*r11);
IkReal x10808=((1.0)*x10803);
IkReal x10809=(cj6*x10802);
IkReal x10810=(sj5*x10802);
IkReal x10811=(cj6*x10803);
IkReal x10812=(sj5*x10808);
IkReal x10813=((1.0)*sj6*x10802);
evalcond[0]=(((r22*x10810))+((r20*x10802*x10804))+((r20*x10811))+(((-1.0)*r21*sj6*x10808))+((x10806*x10809)));
evalcond[1]=(((x10802*x10807))+(((-1.0)*r11*sj6*x10808))+((r10*x10811))+((r10*x10802*x10804))+((r12*x10810)));
evalcond[2]=((1.0)+((r02*x10810))+(((-1.0)*r01*sj6*x10808))+((x10805*x10809))+((r00*x10802*x10804))+((r00*x10811)));
evalcond[3]=(((r20*x10809))+(((-1.0)*r21*x10813))+(((-1.0)*cj6*x10806*x10808))+(((-1.0)*r20*x10804*x10808))+(((-1.0)*r22*x10812)));
evalcond[4]=((((-1.0)*r02*x10812))+((r00*x10809))+(((-1.0)*r01*x10813))+(((-1.0)*r00*x10804*x10808))+(((-1.0)*cj6*x10805*x10808)));
evalcond[5]=((1.0)+((r10*x10809))+(((-1.0)*x10807*x10808))+(((-1.0)*r11*x10813))+(((-1.0)*r12*x10812))+(((-1.0)*r10*x10804*x10808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10814=(cj5*r12);
IkReal x10815=(r10*sj6);
IkReal x10816=((0.37429)*sj5);
IkReal x10817=((0.01)*cj5);
IkReal x10818=(cj6*r11);
IkReal x10819=(r00*sj6);
IkReal x10820=(r20*sj6);
IkReal x10821=((1.0)*sj5);
IkReal x10822=((0.01)*sj5);
IkReal x10823=(cj6*r01);
IkReal x10824=(cj5*r02);
IkReal x10825=(cj6*r21);
IkReal x10826=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x10817*x10820))+((x10817*x10825))+(((-1.0)*pz))+(((0.37429)*x10826))+((r22*x10822))+(((-1.0)*x10816*x10825))+(((-1.0)*x10816*x10820)));
evalcond[2]=((0.29542)+((x10817*x10823))+((x10817*x10819))+((r02*x10822))+(((-1.0)*px))+(((0.37429)*x10824))+(((-1.0)*x10816*x10819))+(((-1.0)*x10816*x10823)));
evalcond[3]=(((r12*x10822))+(((-1.0)*x10815*x10816))+((x10817*x10818))+((x10815*x10817))+(((-1.0)*py))+(((0.37429)*x10814))+(((-1.0)*x10816*x10818)));
evalcond[4]=((1.0)+(((-1.0)*x10821*x10825))+(((-1.0)*x10820*x10821))+x10826);
evalcond[5]=((((-1.0)*x10815*x10821))+(((-1.0)*x10818*x10821))+x10814);
evalcond[6]=((((-1.0)*x10821*x10823))+(((-1.0)*x10819*x10821))+x10824);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10827=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10827;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10828=((1.0)*cj6);
IkReal x10829=(((cj5*r22))+(((-1.0)*r21*sj5*x10828))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10829;
j4eval[1]=((IKabs(((((-1.0)*r10*x10828))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10830=cj6*cj6;
IkReal x10831=cj5*cj5;
IkReal x10832=r10*r10;
IkReal x10833=r11*r11;
IkReal x10834=r12*r12;
IkReal x10835=(r10*sj6);
IkReal x10836=(r12*sj5);
IkReal x10837=((2.0)*cj6*r11);
IkReal x10838=((1.0)*x10832);
IkReal x10839=(x10830*x10833);
IkReal x10840=((((-1.0)*x10833))+(((-1.0)*x10834))+(((-1.0)*cj5*x10836*x10837))+((x10831*x10834))+((x10835*x10837))+(((-1.0)*x10830*x10838))+(((-1.0)*x10831*x10835*x10837))+(((-2.0)*cj5*x10835*x10836))+((x10830*x10831*x10832))+(((-1.0)*x10831*x10838))+(((-1.0)*x10831*x10839))+x10839);
j4eval[0]=x10840;
j4eval[1]=((IKabs((((cj5*x10835))+((cj5*cj6*r11))+x10836)))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x10840);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10841=cj6*cj6;
IkReal x10842=cj5*cj5;
IkReal x10843=r10*r10;
IkReal x10844=r11*r11;
IkReal x10845=r12*r12;
IkReal x10846=(r10*sj6);
IkReal x10847=(r12*sj5);
IkReal x10848=((2.0)*cj6*r11);
IkReal x10849=(x10841*x10844);
IkReal x10850=(x10842*x10843);
CheckValue<IkReal> x10851=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10842*x10846*x10848))+(((-1.0)*x10841*x10843))+((x10841*x10850))+(((-1.0)*x10844))+(((-1.0)*x10845))+(((-2.0)*cj5*x10846*x10847))+((x10842*x10845))+(((-1.0)*x10842*x10849))+(((-1.0)*cj5*x10847*x10848))+(((-1.0)*x10850))+((x10846*x10848))+x10849)),-1);
if(!x10851.valid){
continue;
}
CheckValue<IkReal> x10852 = IKatan2WithCheck(IkReal((((cj5*x10846))+((cj5*cj6*r11))+x10847)),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10851.value)))+(x10852.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10853=IKcos(j4);
IkReal x10854=IKsin(j4);
IkReal x10855=(cj5*sj6);
IkReal x10856=(cj5*r01);
IkReal x10857=(cj5*r21);
IkReal x10858=(cj5*cj6*r11);
IkReal x10859=((1.0)*x10854);
IkReal x10860=(cj6*x10853);
IkReal x10861=(sj5*x10853);
IkReal x10862=(cj6*x10854);
IkReal x10863=(sj5*x10859);
IkReal x10864=((1.0)*sj6*x10853);
evalcond[0]=((((-1.0)*r21*sj6*x10859))+((r20*x10853*x10855))+((x10857*x10860))+((r20*x10862))+((r22*x10861)));
evalcond[1]=(((r12*x10861))+((r10*x10862))+((r10*x10853*x10855))+(((-1.0)*r11*sj6*x10859))+((x10853*x10858)));
evalcond[2]=((-1.0)+((r00*x10853*x10855))+(((-1.0)*r01*sj6*x10859))+((x10856*x10860))+((r00*x10862))+((r02*x10861)));
evalcond[3]=((((-1.0)*r22*x10863))+(((-1.0)*r20*x10855*x10859))+(((-1.0)*r21*x10864))+((r20*x10860))+(((-1.0)*cj6*x10857*x10859)));
evalcond[4]=((((-1.0)*r00*x10855*x10859))+((r00*x10860))+(((-1.0)*r01*x10864))+(((-1.0)*cj6*x10856*x10859))+(((-1.0)*r02*x10863)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x10863))+(((-1.0)*r11*x10864))+(((-1.0)*x10858*x10859))+((r10*x10860))+(((-1.0)*r10*x10855*x10859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10865=((1.0)*cj6);
CheckValue<IkReal> x10866=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r21*sj5*x10865)))),-1);
if(!x10866.valid){
continue;
}
CheckValue<IkReal> x10867 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),(((r11*sj6))+(((-1.0)*r10*x10865))),IKFAST_ATAN2_MAGTHRESH);
if(!x10867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10866.value)))+(x10867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10868=IKcos(j4);
IkReal x10869=IKsin(j4);
IkReal x10870=(cj5*sj6);
IkReal x10871=(cj5*r01);
IkReal x10872=(cj5*r21);
IkReal x10873=(cj5*cj6*r11);
IkReal x10874=((1.0)*x10869);
IkReal x10875=(cj6*x10868);
IkReal x10876=(sj5*x10868);
IkReal x10877=(cj6*x10869);
IkReal x10878=(sj5*x10874);
IkReal x10879=((1.0)*sj6*x10868);
evalcond[0]=(((r20*x10877))+(((-1.0)*r21*sj6*x10874))+((r20*x10868*x10870))+((x10872*x10875))+((r22*x10876)));
evalcond[1]=(((r12*x10876))+((r10*x10877))+(((-1.0)*r11*sj6*x10874))+((x10868*x10873))+((r10*x10868*x10870)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x10874))+((r02*x10876))+((r00*x10877))+((x10871*x10875))+((r00*x10868*x10870)));
evalcond[3]=((((-1.0)*r22*x10878))+(((-1.0)*cj6*x10872*x10874))+(((-1.0)*r21*x10879))+(((-1.0)*r20*x10870*x10874))+((r20*x10875)));
evalcond[4]=((((-1.0)*r00*x10870*x10874))+(((-1.0)*cj6*x10871*x10874))+(((-1.0)*r01*x10879))+(((-1.0)*r02*x10878))+((r00*x10875)));
evalcond[5]=((-1.0)+(((-1.0)*x10873*x10874))+(((-1.0)*r11*x10879))+(((-1.0)*r12*x10878))+((r10*x10875))+(((-1.0)*r10*x10870*x10874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10880=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10880.valid){
continue;
}
CheckValue<IkReal> x10881 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10880.value)))+(x10881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10882=IKcos(j4);
IkReal x10883=IKsin(j4);
IkReal x10884=(cj5*sj6);
IkReal x10885=(cj5*r01);
IkReal x10886=(cj5*r21);
IkReal x10887=(cj5*cj6*r11);
IkReal x10888=((1.0)*x10883);
IkReal x10889=(cj6*x10882);
IkReal x10890=(sj5*x10882);
IkReal x10891=(cj6*x10883);
IkReal x10892=(sj5*x10888);
IkReal x10893=((1.0)*sj6*x10882);
evalcond[0]=(((r20*x10891))+((r22*x10890))+((r20*x10882*x10884))+(((-1.0)*r21*sj6*x10888))+((x10886*x10889)));
evalcond[1]=((((-1.0)*r11*sj6*x10888))+((x10882*x10887))+((r10*x10882*x10884))+((r12*x10890))+((r10*x10891)));
evalcond[2]=((-1.0)+((r00*x10882*x10884))+((x10885*x10889))+(((-1.0)*r01*sj6*x10888))+((r02*x10890))+((r00*x10891)));
evalcond[3]=((((-1.0)*r20*x10884*x10888))+(((-1.0)*r22*x10892))+(((-1.0)*r21*x10893))+((r20*x10889))+(((-1.0)*cj6*x10886*x10888)));
evalcond[4]=(((r00*x10889))+(((-1.0)*cj6*x10885*x10888))+(((-1.0)*r01*x10893))+(((-1.0)*r02*x10892))+(((-1.0)*r00*x10884*x10888)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x10884*x10888))+(((-1.0)*x10887*x10888))+(((-1.0)*r12*x10892))+((r10*x10889))+(((-1.0)*r11*x10893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10894=(cj0*cj6);
IkReal x10895=((1.0)*sj0);
IkReal x10896=(cj0*sj6);
IkReal x10897=(sj6*x10895);
CheckValue<IkReal> x10898=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10898.valid){
continue;
}
CheckValue<IkReal> x10899 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj5*x10895))+(((-1.0)*cj5*cj6*r01*x10895))+((cj5*r10*x10896))+((cj0*r12*sj5))+((cj5*r11*x10894))+(((-1.0)*cj5*r00*x10897)))),((((-1.0)*r01*x10897))+((cj6*r00*sj0))+((r11*x10896))+(((-1.0)*r10*x10894))),IKFAST_ATAN2_MAGTHRESH);
if(!x10899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10898.value)))+(x10899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10900=IKcos(j4);
IkReal x10901=IKsin(j4);
IkReal x10902=(cj5*sj6);
IkReal x10903=(cj5*r21);
IkReal x10904=(cj5*r01);
IkReal x10905=(cj5*cj6*r11);
IkReal x10906=((1.0)*x10901);
IkReal x10907=(cj6*x10900);
IkReal x10908=(sj5*x10900);
IkReal x10909=(cj6*x10901);
IkReal x10910=(sj5*x10906);
IkReal x10911=((1.0)*sj6*x10900);
evalcond[0]=(((r22*x10908))+((x10903*x10907))+(((-1.0)*r21*sj6*x10906))+((r20*x10909))+((r20*x10900*x10902)));
evalcond[1]=(cj0+((r00*x10909))+((x10904*x10907))+(((-1.0)*r01*sj6*x10906))+((r02*x10908))+((r00*x10900*x10902)));
evalcond[2]=(((r12*x10908))+(((-1.0)*r11*sj6*x10906))+sj0+((x10900*x10905))+((r10*x10900*x10902))+((r10*x10909)));
evalcond[3]=((((-1.0)*r22*x10910))+(((-1.0)*cj6*x10903*x10906))+(((-1.0)*r21*x10911))+((r20*x10907))+(((-1.0)*r20*x10902*x10906)));
evalcond[4]=((((-1.0)*r12*x10910))+cj0+(((-1.0)*r11*x10911))+(((-1.0)*r10*x10902*x10906))+((r10*x10907))+(((-1.0)*x10905*x10906)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x10910))+(((-1.0)*r00*x10902*x10906))+(((-1.0)*cj6*x10904*x10906))+((r00*x10907))+(((-1.0)*r01*x10911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10912=(cj0*r20);
IkReal x10913=((1.0)*cj6);
IkReal x10914=(cj0*r21);
CheckValue<IkReal> x10915 = IKatan2WithCheck(IkReal((((cj5*cj6*x10914))+((cj5*sj6*x10912))+((cj0*r22*sj5)))),((((-1.0)*x10912*x10913))+((sj6*x10914))),IKFAST_ATAN2_MAGTHRESH);
if(!x10915.valid){
continue;
}
CheckValue<IkReal> x10916=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10913)))),-1);
if(!x10916.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10915.value)+(((1.5707963267949)*(x10916.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10917=IKcos(j4);
IkReal x10918=IKsin(j4);
IkReal x10919=(cj5*sj6);
IkReal x10920=(cj5*r21);
IkReal x10921=(cj5*r01);
IkReal x10922=(cj5*cj6*r11);
IkReal x10923=((1.0)*x10918);
IkReal x10924=(cj6*x10917);
IkReal x10925=(sj5*x10917);
IkReal x10926=(cj6*x10918);
IkReal x10927=(sj5*x10923);
IkReal x10928=((1.0)*sj6*x10917);
evalcond[0]=(((r20*x10917*x10919))+(((-1.0)*r21*sj6*x10923))+((r22*x10925))+((x10920*x10924))+((r20*x10926)));
evalcond[1]=(cj0+(((-1.0)*r01*sj6*x10923))+((r02*x10925))+((x10921*x10924))+((r00*x10926))+((r00*x10917*x10919)));
evalcond[2]=(((r10*x10926))+((x10917*x10922))+sj0+(((-1.0)*r11*sj6*x10923))+((r10*x10917*x10919))+((r12*x10925)));
evalcond[3]=((((-1.0)*cj6*x10920*x10923))+(((-1.0)*r22*x10927))+(((-1.0)*r21*x10928))+(((-1.0)*r20*x10919*x10923))+((r20*x10924)));
evalcond[4]=(((r10*x10924))+(((-1.0)*r11*x10928))+cj0+(((-1.0)*r12*x10927))+(((-1.0)*r10*x10919*x10923))+(((-1.0)*x10922*x10923)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x10927))+((r00*x10924))+(((-1.0)*r01*x10928))+(((-1.0)*cj6*x10921*x10923))+(((-1.0)*r00*x10919*x10923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10929=(r21*sj0);
IkReal x10930=(r20*sj0);
CheckValue<IkReal> x10931 = IKatan2WithCheck(IkReal((((cj5*cj6*x10929))+((r22*sj0*sj5))+((cj5*sj6*x10930)))),((((-1.0)*cj6*x10930))+((sj6*x10929))),IKFAST_ATAN2_MAGTHRESH);
if(!x10931.valid){
continue;
}
CheckValue<IkReal> x10932=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10932.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10931.value)+(((1.5707963267949)*(x10932.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10933=IKcos(j4);
IkReal x10934=IKsin(j4);
IkReal x10935=(cj5*sj6);
IkReal x10936=(cj5*r21);
IkReal x10937=(cj5*r01);
IkReal x10938=(cj5*cj6*r11);
IkReal x10939=((1.0)*x10934);
IkReal x10940=(cj6*x10933);
IkReal x10941=(sj5*x10933);
IkReal x10942=(cj6*x10934);
IkReal x10943=(sj5*x10939);
IkReal x10944=((1.0)*sj6*x10933);
evalcond[0]=(((x10936*x10940))+((r20*x10942))+(((-1.0)*r21*sj6*x10939))+((r22*x10941))+((r20*x10933*x10935)));
evalcond[1]=(cj0+((x10937*x10940))+((r00*x10942))+(((-1.0)*r01*sj6*x10939))+((r00*x10933*x10935))+((r02*x10941)));
evalcond[2]=(((x10933*x10938))+sj0+((r10*x10933*x10935))+((r12*x10941))+(((-1.0)*r11*sj6*x10939))+((r10*x10942)));
evalcond[3]=((((-1.0)*r20*x10935*x10939))+(((-1.0)*cj6*x10936*x10939))+((r20*x10940))+(((-1.0)*r22*x10943))+(((-1.0)*r21*x10944)));
evalcond[4]=(cj0+(((-1.0)*x10938*x10939))+(((-1.0)*r11*x10944))+(((-1.0)*r12*x10943))+((r10*x10940))+(((-1.0)*r10*x10935*x10939)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x10944))+((r00*x10940))+(((-1.0)*cj6*x10937*x10939))+(((-1.0)*r02*x10943))+(((-1.0)*r00*x10935*x10939)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10945=(cj5*r22);
IkReal x10946=(cj6*r21);
IkReal x10947=((1.0)*sj5);
IkReal x10948=((0.01)*cj5);
IkReal x10949=(r20*sj6);
IkReal x10950=((0.37429)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.069)+((x10948*x10949))+(((-1.0)*x10946*x10950))+(((-1.0)*x10949*x10950))+((x10946*x10948))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*x10945)));
evalcond[2]=((-1.0)+(((-1.0)*x10946*x10947))+(((-1.0)*x10947*x10949))+x10945);
evalcond[3]=(((cj5*r12))+(((-1.0)*r10*sj6*x10947))+(((-1.0)*cj6*r11*x10947)));
evalcond[4]=((((-1.0)*cj6*r01*x10947))+(((-1.0)*r00*sj6*x10947))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10951=((1.26697583102024)*cj5);
IkReal x10952=((0.0338501117053686)*cj5);
IkReal x10953=(r00*sj6);
IkReal x10954=(r10*sj6);
IkReal x10955=((1.26697583102024)*sj5);
IkReal x10956=(cj6*r11);
IkReal x10957=((0.0338501117053686)*sj5);
IkReal x10958=(cj6*r01);
if( IKabs(((((-3.38501117053686)*py))+(((-1.0)*x10955*x10956))+((r12*x10957))+((r12*x10951))+(((-1.0)*x10954*x10955))+((x10952*x10956))+((x10952*x10954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x10951))+((r02*x10957))+(((-3.38501117053686)*px))+(((-1.0)*x10955*x10958))+(((-1.0)*x10953*x10955))+((x10952*x10958))+((x10952*x10953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.38501117053686)*py))+(((-1.0)*x10955*x10956))+((r12*x10957))+((r12*x10951))+(((-1.0)*x10954*x10955))+((x10952*x10956))+((x10952*x10954))))+IKsqr((((r02*x10951))+((r02*x10957))+(((-3.38501117053686)*px))+(((-1.0)*x10955*x10958))+(((-1.0)*x10953*x10955))+((x10952*x10958))+((x10952*x10953))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.38501117053686)*py))+(((-1.0)*x10955*x10956))+((r12*x10957))+((r12*x10951))+(((-1.0)*x10954*x10955))+((x10952*x10956))+((x10952*x10954))), (((r02*x10951))+((r02*x10957))+(((-3.38501117053686)*px))+(((-1.0)*x10955*x10958))+(((-1.0)*x10953*x10955))+((x10952*x10958))+((x10952*x10953))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10959=((0.01)*cj5);
IkReal x10960=(cj6*r01);
IkReal x10961=(r00*sj6);
IkReal x10962=((0.01)*sj5);
IkReal x10963=((0.37429)*sj5);
IkReal x10964=((0.37429)*cj5);
IkReal x10965=(r10*sj6);
IkReal x10966=(cj6*r11);
evalcond[0]=((((-1.0)*x10961*x10963))+((r02*x10962))+((r02*x10964))+(((-1.0)*x10960*x10963))+((x10959*x10961))+((x10959*x10960))+(((-1.0)*px))+(((-0.29542)*(IKcos(j0)))));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+((x10959*x10966))+((x10959*x10965))+(((-1.0)*x10963*x10966))+(((-1.0)*x10963*x10965))+(((-1.0)*py))+((r12*x10964))+((r12*x10962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10967=(r21*sj0);
IkReal x10968=(r20*sj0);
IkReal x10969=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10969;
j4eval[1]=((IKabs(((((-1.0)*cj6*x10968))+((sj6*x10967)))))+(IKabs((((cj5*sj6*x10968))+((r22*sj0*sj5))+((cj5*cj6*x10967))))));
j4eval[2]=IKsign(x10969);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10970=(cj0*r20);
IkReal x10971=((1.0)*cj6);
IkReal x10972=(cj0*r21);
IkReal x10973=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10971)));
j4eval[0]=x10973;
j4eval[1]=((IKabs((((cj5*sj6*x10970))+((cj0*r22*sj5))+((cj5*cj6*x10972)))))+(IKabs(((((-1.0)*x10970*x10971))+((sj6*x10972))))));
j4eval[2]=IKsign(x10973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10974=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10974;
j4eval[1]=IKsign(x10974);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10975=(cj5*r12);
IkReal x10976=(r10*sj6);
IkReal x10977=((0.37429)*sj5);
IkReal x10978=((0.01)*cj5);
IkReal x10979=(cj6*r11);
IkReal x10980=(r00*sj6);
IkReal x10981=(r20*sj6);
IkReal x10982=((1.0)*sj5);
IkReal x10983=((0.01)*sj5);
IkReal x10984=(cj6*r01);
IkReal x10985=(cj5*r02);
IkReal x10986=(cj6*r21);
IkReal x10987=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x10983))+((x10978*x10986))+((x10978*x10981))+(((-1.0)*pz))+(((-1.0)*x10977*x10986))+(((-1.0)*x10977*x10981))+(((0.37429)*x10987)));
evalcond[2]=(((x10978*x10984))+((x10978*x10980))+(((-1.0)*px))+(((-1.0)*x10977*x10984))+(((-1.0)*x10977*x10980))+(((0.37429)*x10985))+((r02*x10983)));
evalcond[3]=((-0.29542)+((x10976*x10978))+(((0.37429)*x10975))+((r12*x10983))+(((-1.0)*x10976*x10977))+((x10978*x10979))+(((-1.0)*py))+(((-1.0)*x10977*x10979)));
evalcond[4]=((-1.0)+(((-1.0)*x10982*x10986))+(((-1.0)*x10981*x10982))+x10987);
evalcond[5]=((((-1.0)*x10979*x10982))+x10975+(((-1.0)*x10976*x10982)));
evalcond[6]=((((-1.0)*x10982*x10984))+(((-1.0)*x10980*x10982))+x10985);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10988=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10988;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10989=((1.0)*cj6);
IkReal x10990=(((cj5*r22))+(((-1.0)*r21*sj5*x10989))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10990;
j4eval[1]=IKsign(x10990);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10989))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10991=cj6*cj6;
IkReal x10992=r01*r01;
IkReal x10993=cj5*cj5;
IkReal x10994=r00*r00;
IkReal x10995=r02*r02;
IkReal x10996=(r02*sj5);
IkReal x10997=(r01*sj6);
IkReal x10998=(cj6*r00);
IkReal x10999=(cj5*cj6*r01);
IkReal x11000=(cj5*r00*sj6);
IkReal x11001=((1.0)*x10993);
IkReal x11002=(x10991*x10994);
IkReal x11003=(x10991*x10992);
IkReal x11004=((((2.0)*x10996*x10999))+(((2.0)*x10993*x10997*x10998))+(((-1.0)*x10995*x11001))+((x10993*x10994))+x11002+((x10993*x11003))+(((-1.0)*x11001*x11002))+(((-1.0)*x11003))+(((-2.0)*x10997*x10998))+x10995+x10992+(((2.0)*x10996*x11000)));
j4eval[0]=x11004;
j4eval[1]=((IKabs((x11000+x10999+x10996)))+(IKabs(((((-1.0)*x10998))+x10997))));
j4eval[2]=IKsign(x11004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11005=cj6*cj6;
IkReal x11006=r01*r01;
IkReal x11007=cj5*cj5;
IkReal x11008=r00*r00;
IkReal x11009=r02*r02;
IkReal x11010=(r00*sj6);
IkReal x11011=(r02*sj5);
IkReal x11012=((2.0)*cj6*r01);
IkReal x11013=((1.0)*x11007);
IkReal x11014=(x11005*x11008);
IkReal x11015=(x11005*x11006);
CheckValue<IkReal> x11016 = IKatan2WithCheck(IkReal((((cj5*x11010))+x11011+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x11016.valid){
continue;
}
CheckValue<IkReal> x11017=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11013*x11014))+((x11007*x11008))+((x11007*x11010*x11012))+(((-1.0)*x11010*x11012))+((x11007*x11015))+x11006+x11009+x11014+((cj5*x11011*x11012))+(((2.0)*cj5*x11010*x11011))+(((-1.0)*x11015))+(((-1.0)*x11009*x11013)))),-1);
if(!x11017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11016.value)+(((1.5707963267949)*(x11017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11018=IKcos(j4);
IkReal x11019=IKsin(j4);
IkReal x11020=(cj5*sj6);
IkReal x11021=(cj5*r21);
IkReal x11022=(cj5*r01);
IkReal x11023=(cj5*cj6*r11);
IkReal x11024=((1.0)*x11019);
IkReal x11025=(cj6*x11018);
IkReal x11026=(sj5*x11018);
IkReal x11027=(cj6*x11019);
IkReal x11028=(sj5*x11024);
IkReal x11029=((1.0)*sj6*x11018);
evalcond[0]=((((-1.0)*r21*sj6*x11024))+((r20*x11027))+((x11021*x11025))+((r22*x11026))+((r20*x11018*x11020)));
evalcond[1]=(((x11022*x11025))+((r00*x11027))+((r00*x11018*x11020))+(((-1.0)*r01*sj6*x11024))+((r02*x11026)));
evalcond[2]=((1.0)+((x11018*x11023))+((r10*x11027))+(((-1.0)*r11*sj6*x11024))+((r12*x11026))+((r10*x11018*x11020)));
evalcond[3]=((((-1.0)*r21*x11029))+((r20*x11025))+(((-1.0)*r22*x11028))+(((-1.0)*r20*x11020*x11024))+(((-1.0)*cj6*x11021*x11024)));
evalcond[4]=((((-1.0)*r10*x11020*x11024))+(((-1.0)*x11023*x11024))+((r10*x11025))+(((-1.0)*r11*x11029))+(((-1.0)*r12*x11028)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11028))+((r00*x11025))+(((-1.0)*cj6*x11022*x11024))+(((-1.0)*r01*x11029))+(((-1.0)*r00*x11020*x11024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11030=((1.0)*cj6);
CheckValue<IkReal> x11031 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x11030))),IKFAST_ATAN2_MAGTHRESH);
if(!x11031.valid){
continue;
}
CheckValue<IkReal> x11032=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x11030))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x11032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11031.value)+(((1.5707963267949)*(x11032.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11033=IKcos(j4);
IkReal x11034=IKsin(j4);
IkReal x11035=(cj5*sj6);
IkReal x11036=(cj5*r21);
IkReal x11037=(cj5*r01);
IkReal x11038=(cj5*cj6*r11);
IkReal x11039=((1.0)*x11034);
IkReal x11040=(cj6*x11033);
IkReal x11041=(sj5*x11033);
IkReal x11042=(cj6*x11034);
IkReal x11043=(sj5*x11039);
IkReal x11044=((1.0)*sj6*x11033);
evalcond[0]=((((-1.0)*r21*sj6*x11039))+((r20*x11042))+((x11036*x11040))+((r20*x11033*x11035))+((r22*x11041)));
evalcond[1]=(((r00*x11033*x11035))+((r00*x11042))+((x11037*x11040))+(((-1.0)*r01*sj6*x11039))+((r02*x11041)));
evalcond[2]=((1.0)+((r10*x11042))+((x11033*x11038))+((r10*x11033*x11035))+(((-1.0)*r11*sj6*x11039))+((r12*x11041)));
evalcond[3]=(((r20*x11040))+(((-1.0)*cj6*x11036*x11039))+(((-1.0)*r22*x11043))+(((-1.0)*r21*x11044))+(((-1.0)*r20*x11035*x11039)));
evalcond[4]=(((r10*x11040))+(((-1.0)*r11*x11044))+(((-1.0)*r12*x11043))+(((-1.0)*x11038*x11039))+(((-1.0)*r10*x11035*x11039)));
evalcond[5]=((1.0)+(((-1.0)*r01*x11044))+((r00*x11040))+(((-1.0)*cj6*x11037*x11039))+(((-1.0)*r02*x11043))+(((-1.0)*r00*x11035*x11039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11045=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11045.valid){
continue;
}
CheckValue<IkReal> x11046 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11045.value)))+(x11046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11047=IKcos(j4);
IkReal x11048=IKsin(j4);
IkReal x11049=(cj5*sj6);
IkReal x11050=(cj5*r21);
IkReal x11051=(cj5*r01);
IkReal x11052=(cj5*cj6*r11);
IkReal x11053=((1.0)*x11048);
IkReal x11054=(cj6*x11047);
IkReal x11055=(sj5*x11047);
IkReal x11056=(cj6*x11048);
IkReal x11057=(sj5*x11053);
IkReal x11058=((1.0)*sj6*x11047);
evalcond[0]=(((r20*x11056))+(((-1.0)*r21*sj6*x11053))+((r22*x11055))+((r20*x11047*x11049))+((x11050*x11054)));
evalcond[1]=((((-1.0)*r01*sj6*x11053))+((r00*x11047*x11049))+((r00*x11056))+((x11051*x11054))+((r02*x11055)));
evalcond[2]=((1.0)+((r12*x11055))+((r10*x11056))+((x11047*x11052))+(((-1.0)*r11*sj6*x11053))+((r10*x11047*x11049)));
evalcond[3]=(((r20*x11054))+(((-1.0)*r22*x11057))+(((-1.0)*cj6*x11050*x11053))+(((-1.0)*r21*x11058))+(((-1.0)*r20*x11049*x11053)));
evalcond[4]=((((-1.0)*r10*x11049*x11053))+((r10*x11054))+(((-1.0)*r12*x11057))+(((-1.0)*r11*x11058))+(((-1.0)*x11052*x11053)));
evalcond[5]=((1.0)+(((-1.0)*r01*x11058))+((r00*x11054))+(((-1.0)*r00*x11049*x11053))+(((-1.0)*r02*x11057))+(((-1.0)*cj6*x11051*x11053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11059=(cj5*r12);
IkReal x11060=(r10*sj6);
IkReal x11061=((0.37429)*sj5);
IkReal x11062=((0.01)*cj5);
IkReal x11063=(cj6*r11);
IkReal x11064=(r00*sj6);
IkReal x11065=(r20*sj6);
IkReal x11066=((1.0)*sj5);
IkReal x11067=((0.01)*sj5);
IkReal x11068=(cj6*r01);
IkReal x11069=(cj5*r02);
IkReal x11070=(cj6*r21);
IkReal x11071=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x11061*x11070))+((x11062*x11065))+(((-1.0)*x11061*x11065))+(((-1.0)*pz))+((r22*x11067))+((x11062*x11070))+(((0.37429)*x11071)));
evalcond[2]=(((x11062*x11068))+((x11062*x11064))+(((-1.0)*x11061*x11064))+(((-1.0)*x11061*x11068))+(((0.37429)*x11069))+(((-1.0)*px))+((r02*x11067)));
evalcond[3]=((0.29542)+((x11062*x11063))+(((0.37429)*x11059))+(((-1.0)*x11060*x11061))+(((-1.0)*x11061*x11063))+((x11060*x11062))+(((-1.0)*py))+((r12*x11067)));
evalcond[4]=((-1.0)+x11071+(((-1.0)*x11066*x11070))+(((-1.0)*x11065*x11066)));
evalcond[5]=((((-1.0)*x11060*x11066))+x11059+(((-1.0)*x11063*x11066)));
evalcond[6]=(x11069+(((-1.0)*x11066*x11068))+(((-1.0)*x11064*x11066)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x11072=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x11072;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x11072);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x11073=((1.0)*sj5);
IkReal x11074=((((-1.0)*cj6*r01*x11073))+(((-1.0)*r00*sj6*x11073))+((cj5*r02)));
j4eval[0]=x11074;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x11074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x11075=cj6*cj6;
IkReal x11076=cj5*cj5;
IkReal x11077=r00*r00;
IkReal x11078=r01*r01;
IkReal x11079=r02*r02;
IkReal x11080=(r00*sj6);
IkReal x11081=((2.0)*cj6*r01);
IkReal x11082=(cj5*r02*sj5);
IkReal x11083=((1.0)*x11075);
IkReal x11084=(x11076*x11077);
IkReal x11085=((((-1.0)*x11077*x11083))+(((-1.0)*x11081*x11082))+(((-1.0)*x11084))+(((-2.0)*x11080*x11082))+((x11075*x11078))+((x11076*x11079))+((x11075*x11084))+(((-1.0)*x11076*x11078*x11083))+((x11080*x11081))+(((-1.0)*x11076*x11080*x11081))+(((-1.0)*x11079))+(((-1.0)*x11078)));
j4eval[0]=x11085;
j4eval[1]=((IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x11080)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x11085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11086=cj6*cj6;
IkReal x11087=cj5*cj5;
IkReal x11088=r00*r00;
IkReal x11089=r01*r01;
IkReal x11090=r02*r02;
IkReal x11091=(r01*sj6);
IkReal x11092=(cj6*r00);
IkReal x11093=(cj5*cj6*r01);
IkReal x11094=((2.0)*r02*sj5);
IkReal x11095=((1.0)*x11086);
IkReal x11096=(cj5*r00*sj6);
IkReal x11097=(x11087*x11088);
CheckValue<IkReal> x11098 = IKatan2WithCheck(IkReal((x11096+x11093+((r02*sj5)))),((((-1.0)*x11092))+x11091),IKFAST_ATAN2_MAGTHRESH);
if(!x11098.valid){
continue;
}
CheckValue<IkReal> x11099=IKPowWithIntegerCheck(IKsign((((x11086*x11089))+(((-1.0)*x11094*x11096))+(((-1.0)*x11089))+(((-1.0)*x11090))+(((-1.0)*x11097))+(((-1.0)*x11093*x11094))+(((-1.0)*x11087*x11089*x11095))+(((2.0)*x11091*x11092))+(((-2.0)*x11087*x11091*x11092))+((x11087*x11090))+((x11086*x11097))+(((-1.0)*x11088*x11095)))),-1);
if(!x11099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11098.value)+(((1.5707963267949)*(x11099.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11100=IKcos(j4);
IkReal x11101=IKsin(j4);
IkReal x11102=(cj5*sj6);
IkReal x11103=(cj5*r21);
IkReal x11104=(cj5*r01);
IkReal x11105=(cj5*cj6*r11);
IkReal x11106=((1.0)*x11101);
IkReal x11107=(cj6*x11100);
IkReal x11108=(sj5*x11100);
IkReal x11109=(cj6*x11101);
IkReal x11110=(sj5*x11106);
IkReal x11111=((1.0)*sj6*x11100);
evalcond[0]=(((r20*x11100*x11102))+((x11103*x11107))+((r20*x11109))+((r22*x11108))+(((-1.0)*r21*sj6*x11106)));
evalcond[1]=(((r02*x11108))+((x11104*x11107))+((r00*x11100*x11102))+(((-1.0)*r01*sj6*x11106))+((r00*x11109)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x11106))+((x11100*x11105))+((r10*x11109))+((r10*x11100*x11102))+((r12*x11108)));
evalcond[3]=((((-1.0)*r21*x11111))+(((-1.0)*cj6*x11103*x11106))+(((-1.0)*r22*x11110))+((r20*x11107))+(((-1.0)*r20*x11102*x11106)));
evalcond[4]=((((-1.0)*x11105*x11106))+((r10*x11107))+(((-1.0)*r12*x11110))+(((-1.0)*r10*x11102*x11106))+(((-1.0)*r11*x11111)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x11110))+(((-1.0)*r00*x11102*x11106))+(((-1.0)*r01*x11111))+(((-1.0)*cj6*x11104*x11106))+((r00*x11107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11112=((1.0)*sj5);
CheckValue<IkReal> x11113=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x11112))+(((-1.0)*r00*sj6*x11112))+((cj5*r02)))),-1);
if(!x11113.valid){
continue;
}
CheckValue<IkReal> x11114 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11113.value)))+(x11114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11115=IKcos(j4);
IkReal x11116=IKsin(j4);
IkReal x11117=(cj5*sj6);
IkReal x11118=(cj5*r21);
IkReal x11119=(cj5*r01);
IkReal x11120=(cj5*cj6*r11);
IkReal x11121=((1.0)*x11116);
IkReal x11122=(cj6*x11115);
IkReal x11123=(sj5*x11115);
IkReal x11124=(cj6*x11116);
IkReal x11125=(sj5*x11121);
IkReal x11126=((1.0)*sj6*x11115);
evalcond[0]=((((-1.0)*r21*sj6*x11121))+((r20*x11115*x11117))+((r22*x11123))+((x11118*x11122))+((r20*x11124)));
evalcond[1]=(((r00*x11115*x11117))+((r02*x11123))+(((-1.0)*r01*sj6*x11121))+((r00*x11124))+((x11119*x11122)));
evalcond[2]=((-1.0)+((x11115*x11120))+(((-1.0)*r11*sj6*x11121))+((r12*x11123))+((r10*x11124))+((r10*x11115*x11117)));
evalcond[3]=((((-1.0)*r21*x11126))+(((-1.0)*r20*x11117*x11121))+(((-1.0)*r22*x11125))+(((-1.0)*cj6*x11118*x11121))+((r20*x11122)));
evalcond[4]=((((-1.0)*r12*x11125))+(((-1.0)*r11*x11126))+(((-1.0)*r10*x11117*x11121))+(((-1.0)*x11120*x11121))+((r10*x11122)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x11117*x11121))+(((-1.0)*cj6*x11119*x11121))+(((-1.0)*r01*x11126))+(((-1.0)*r02*x11125))+((r00*x11122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11127 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x11127.valid){
continue;
}
CheckValue<IkReal> x11128=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11127.value)+(((1.5707963267949)*(x11128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11129=IKcos(j4);
IkReal x11130=IKsin(j4);
IkReal x11131=(cj5*sj6);
IkReal x11132=(cj5*r21);
IkReal x11133=(cj5*r01);
IkReal x11134=(cj5*cj6*r11);
IkReal x11135=((1.0)*x11130);
IkReal x11136=(cj6*x11129);
IkReal x11137=(sj5*x11129);
IkReal x11138=(cj6*x11130);
IkReal x11139=(sj5*x11135);
IkReal x11140=((1.0)*sj6*x11129);
evalcond[0]=(((r22*x11137))+((r20*x11129*x11131))+((r20*x11138))+((x11132*x11136))+(((-1.0)*r21*sj6*x11135)));
evalcond[1]=(((r02*x11137))+((r00*x11129*x11131))+(((-1.0)*r01*sj6*x11135))+((x11133*x11136))+((r00*x11138)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x11135))+((x11129*x11134))+((r10*x11138))+((r10*x11129*x11131))+((r12*x11137)));
evalcond[3]=((((-1.0)*cj6*x11132*x11135))+(((-1.0)*r21*x11140))+(((-1.0)*r22*x11139))+((r20*x11136))+(((-1.0)*r20*x11131*x11135)));
evalcond[4]=((((-1.0)*x11134*x11135))+((r10*x11136))+(((-1.0)*r12*x11139))+(((-1.0)*r10*x11131*x11135))+(((-1.0)*r11*x11140)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x11133*x11135))+(((-1.0)*r00*x11131*x11135))+(((-1.0)*r02*x11139))+(((-1.0)*r01*x11140))+((r00*x11136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11141=(cj5*r12);
IkReal x11142=(r10*sj6);
IkReal x11143=((0.37429)*sj5);
IkReal x11144=((0.01)*cj5);
IkReal x11145=(cj6*r11);
IkReal x11146=(r00*sj6);
IkReal x11147=(r20*sj6);
IkReal x11148=((1.0)*sj5);
IkReal x11149=((0.01)*sj5);
IkReal x11150=(cj6*r01);
IkReal x11151=(cj5*r02);
IkReal x11152=(cj6*r21);
IkReal x11153=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x11149))+(((-1.0)*pz))+((x11144*x11147))+((x11144*x11152))+(((0.37429)*x11153))+(((-1.0)*x11143*x11147))+(((-1.0)*x11143*x11152)));
evalcond[2]=((-0.29542)+((r02*x11149))+(((-1.0)*px))+((x11144*x11146))+((x11144*x11150))+(((0.37429)*x11151))+(((-1.0)*x11143*x11146))+(((-1.0)*x11143*x11150)));
evalcond[3]=((((-1.0)*x11142*x11143))+(((-1.0)*py))+((r12*x11149))+((x11142*x11144))+((x11144*x11145))+(((0.37429)*x11141))+(((-1.0)*x11143*x11145)));
evalcond[4]=((-1.0)+(((-1.0)*x11148*x11152))+x11153+(((-1.0)*x11147*x11148)));
evalcond[5]=((((-1.0)*x11142*x11148))+x11141+(((-1.0)*x11145*x11148)));
evalcond[6]=((((-1.0)*x11148*x11150))+x11151+(((-1.0)*x11146*x11148)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11154=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x11154;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11154);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11155=((1.0)*sj5);
IkReal x11156=(((cj5*r12))+(((-1.0)*r10*sj6*x11155))+(((-1.0)*cj6*r11*x11155)));
j4eval[0]=x11156;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x11156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11157=cj6*cj6;
IkReal x11158=cj5*cj5;
IkReal x11159=r10*r10;
IkReal x11160=r11*r11;
IkReal x11161=r12*r12;
IkReal x11162=(r10*sj6);
IkReal x11163=(r12*sj5);
IkReal x11164=((2.0)*cj6*r11);
IkReal x11165=((1.0)*x11159);
IkReal x11166=(x11157*x11160);
IkReal x11167=((((-1.0)*x11157*x11165))+((x11158*x11161))+(((-1.0)*x11158*x11162*x11164))+(((-1.0)*x11158*x11165))+((x11162*x11164))+x11166+(((-1.0)*x11160))+(((-1.0)*x11161))+(((-1.0)*x11158*x11166))+(((-2.0)*cj5*x11162*x11163))+(((-1.0)*cj5*x11163*x11164))+((x11157*x11158*x11159)));
j4eval[0]=x11167;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+((r11*sj6)))))+(IKabs((x11163+((cj5*cj6*r11))+((cj5*x11162))))));
j4eval[2]=IKsign(x11167);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11168=cj6*cj6;
IkReal x11169=cj5*cj5;
IkReal x11170=r10*r10;
IkReal x11171=r11*r11;
IkReal x11172=r12*r12;
IkReal x11173=(r10*sj6);
IkReal x11174=(r12*sj5);
IkReal x11175=((2.0)*cj6*r11);
IkReal x11176=(x11168*x11171);
IkReal x11177=(x11169*x11170);
CheckValue<IkReal> x11178=IKPowWithIntegerCheck(IKsign((((x11168*x11177))+((x11173*x11175))+((x11169*x11172))+(((-1.0)*x11168*x11170))+(((-1.0)*x11177))+(((-1.0)*x11172))+(((-1.0)*x11171))+x11176+(((-1.0)*x11169*x11173*x11175))+(((-1.0)*cj5*x11174*x11175))+(((-1.0)*x11169*x11176))+(((-2.0)*cj5*x11173*x11174)))),-1);
if(!x11178.valid){
continue;
}
CheckValue<IkReal> x11179 = IKatan2WithCheck(IkReal((x11174+((cj5*cj6*r11))+((cj5*x11173)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11179.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11178.value)))+(x11179.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11180=IKcos(j4);
IkReal x11181=IKsin(j4);
IkReal x11182=(cj5*sj6);
IkReal x11183=(cj5*r01);
IkReal x11184=(cj5*r21);
IkReal x11185=(cj5*cj6*r11);
IkReal x11186=((1.0)*x11181);
IkReal x11187=(cj6*x11180);
IkReal x11188=(sj5*x11180);
IkReal x11189=(cj6*x11181);
IkReal x11190=(sj5*x11186);
IkReal x11191=((1.0)*sj6*x11180);
evalcond[0]=(((r20*x11189))+((r20*x11180*x11182))+((r22*x11188))+(((-1.0)*r21*sj6*x11186))+((x11184*x11187)));
evalcond[1]=(((r10*x11180*x11182))+((r12*x11188))+((x11180*x11185))+(((-1.0)*r11*sj6*x11186))+((r10*x11189)));
evalcond[2]=((1.0)+((r00*x11180*x11182))+((x11183*x11187))+((r00*x11189))+(((-1.0)*r01*sj6*x11186))+((r02*x11188)));
evalcond[3]=(((r20*x11187))+(((-1.0)*r22*x11190))+(((-1.0)*r20*x11182*x11186))+(((-1.0)*r21*x11191))+(((-1.0)*cj6*x11184*x11186)));
evalcond[4]=((((-1.0)*r02*x11190))+(((-1.0)*r01*x11191))+((r00*x11187))+(((-1.0)*r00*x11182*x11186))+(((-1.0)*cj6*x11183*x11186)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11190))+(((-1.0)*x11185*x11186))+(((-1.0)*r11*x11191))+(((-1.0)*r10*x11182*x11186))+((r10*x11187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11192=((1.0)*sj5);
CheckValue<IkReal> x11193=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x11192))+(((-1.0)*cj6*r11*x11192)))),-1);
if(!x11193.valid){
continue;
}
CheckValue<IkReal> x11194 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11194.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11193.value)))+(x11194.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11195=IKcos(j4);
IkReal x11196=IKsin(j4);
IkReal x11197=(cj5*sj6);
IkReal x11198=(cj5*r01);
IkReal x11199=(cj5*r21);
IkReal x11200=(cj5*cj6*r11);
IkReal x11201=((1.0)*x11196);
IkReal x11202=(cj6*x11195);
IkReal x11203=(sj5*x11195);
IkReal x11204=(cj6*x11196);
IkReal x11205=(sj5*x11201);
IkReal x11206=((1.0)*sj6*x11195);
evalcond[0]=(((r20*x11204))+((r20*x11195*x11197))+((r22*x11203))+((x11199*x11202))+(((-1.0)*r21*sj6*x11201)));
evalcond[1]=(((r10*x11195*x11197))+((r10*x11204))+((x11195*x11200))+((r12*x11203))+(((-1.0)*r11*sj6*x11201)));
evalcond[2]=((1.0)+((r00*x11195*x11197))+((r02*x11203))+((x11198*x11202))+(((-1.0)*r01*sj6*x11201))+((r00*x11204)));
evalcond[3]=((((-1.0)*r22*x11205))+((r20*x11202))+(((-1.0)*r21*x11206))+(((-1.0)*r20*x11197*x11201))+(((-1.0)*cj6*x11199*x11201)));
evalcond[4]=((((-1.0)*r00*x11197*x11201))+(((-1.0)*r01*x11206))+((r00*x11202))+(((-1.0)*r02*x11205))+(((-1.0)*cj6*x11198*x11201)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11205))+(((-1.0)*r10*x11197*x11201))+((r10*x11202))+(((-1.0)*r11*x11206))+(((-1.0)*x11200*x11201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11207=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11207.valid){
continue;
}
CheckValue<IkReal> x11208 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11207.value)))+(x11208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11209=IKcos(j4);
IkReal x11210=IKsin(j4);
IkReal x11211=(cj5*sj6);
IkReal x11212=(cj5*r01);
IkReal x11213=(cj5*r21);
IkReal x11214=(cj5*cj6*r11);
IkReal x11215=((1.0)*x11210);
IkReal x11216=(cj6*x11209);
IkReal x11217=(sj5*x11209);
IkReal x11218=(cj6*x11210);
IkReal x11219=(sj5*x11215);
IkReal x11220=((1.0)*sj6*x11209);
evalcond[0]=(((r20*x11218))+((r20*x11209*x11211))+((r22*x11217))+((x11213*x11216))+(((-1.0)*r21*sj6*x11215)));
evalcond[1]=((((-1.0)*r11*sj6*x11215))+((r10*x11209*x11211))+((r10*x11218))+((r12*x11217))+((x11209*x11214)));
evalcond[2]=((1.0)+((r02*x11217))+((r00*x11209*x11211))+((x11212*x11216))+(((-1.0)*r01*sj6*x11215))+((r00*x11218)));
evalcond[3]=(((r20*x11216))+(((-1.0)*r20*x11211*x11215))+(((-1.0)*r21*x11220))+(((-1.0)*r22*x11219))+(((-1.0)*cj6*x11213*x11215)));
evalcond[4]=((((-1.0)*r01*x11220))+(((-1.0)*r00*x11211*x11215))+(((-1.0)*cj6*x11212*x11215))+((r00*x11216))+(((-1.0)*r02*x11219)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x11220))+(((-1.0)*r10*x11211*x11215))+(((-1.0)*r12*x11219))+((r10*x11216))+(((-1.0)*x11214*x11215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11221=(cj5*r12);
IkReal x11222=(r10*sj6);
IkReal x11223=((0.37429)*sj5);
IkReal x11224=((0.01)*cj5);
IkReal x11225=(cj6*r11);
IkReal x11226=(r00*sj6);
IkReal x11227=(r20*sj6);
IkReal x11228=((1.0)*sj5);
IkReal x11229=((0.01)*sj5);
IkReal x11230=(cj6*r01);
IkReal x11231=(cj5*r02);
IkReal x11232=(cj6*r21);
IkReal x11233=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x11229))+(((0.37429)*x11233))+((x11224*x11227))+((x11224*x11232))+(((-1.0)*pz))+(((-1.0)*x11223*x11227))+(((-1.0)*x11223*x11232)));
evalcond[2]=((0.29542)+(((0.37429)*x11231))+((x11224*x11226))+((x11224*x11230))+(((-1.0)*px))+((r02*x11229))+(((-1.0)*x11223*x11226))+(((-1.0)*x11223*x11230)));
evalcond[3]=(((x11222*x11224))+((x11224*x11225))+((r12*x11229))+(((0.37429)*x11221))+(((-1.0)*py))+(((-1.0)*x11223*x11225))+(((-1.0)*x11222*x11223)));
evalcond[4]=((-1.0)+x11233+(((-1.0)*x11228*x11232))+(((-1.0)*x11227*x11228)));
evalcond[5]=((((-1.0)*x11225*x11228))+x11221+(((-1.0)*x11222*x11228)));
evalcond[6]=(x11231+(((-1.0)*x11228*x11230))+(((-1.0)*x11226*x11228)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11234=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x11234;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x11234);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11235=((1.0)*cj6);
IkReal x11236=(((cj5*r22))+(((-1.0)*r21*sj5*x11235))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x11236;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs((((r11*sj6))+(((-1.0)*r10*x11235))))));
j4eval[2]=IKsign(x11236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11237=r11*r11;
IkReal x11238=cj5*cj5;
IkReal x11239=cj6*cj6;
IkReal x11240=r10*r10;
IkReal x11241=r12*r12;
IkReal x11242=(r12*sj5);
IkReal x11243=(r11*sj6);
IkReal x11244=((1.0)*x11239);
IkReal x11245=(cj5*cj6*r11);
IkReal x11246=(cj5*r10*sj6);
IkReal x11247=((2.0)*cj6*r10);
IkReal x11248=(x11238*x11240);
IkReal x11249=(((x11239*x11240))+(((2.0)*x11242*x11246))+(((2.0)*x11242*x11245))+(((-1.0)*x11243*x11247))+(((-1.0)*x11244*x11248))+x11237+x11248+x11241+((x11238*x11243*x11247))+((x11237*x11238*x11239))+(((-1.0)*x11238*x11241))+(((-1.0)*x11237*x11244)));
j4eval[0]=x11249;
j4eval[1]=((IKabs((x11243+(((-1.0)*cj6*r10)))))+(IKabs((x11246+x11245+x11242))));
j4eval[2]=IKsign(x11249);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11250=r11*r11;
IkReal x11251=cj5*cj5;
IkReal x11252=cj6*cj6;
IkReal x11253=r10*r10;
IkReal x11254=r12*r12;
IkReal x11255=(r10*sj6);
IkReal x11256=(r12*sj5);
IkReal x11257=((1.0)*x11252);
IkReal x11258=(cj5*cj6*r11);
IkReal x11259=((2.0)*cj6*r11);
IkReal x11260=(x11251*x11253);
CheckValue<IkReal> x11261 = IKatan2WithCheck(IkReal((x11258+x11256+((cj5*x11255)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11261.valid){
continue;
}
CheckValue<IkReal> x11262=IKPowWithIntegerCheck(IKsign((((x11250*x11251*x11252))+x11254+x11250+x11260+((x11251*x11255*x11259))+(((-1.0)*x11250*x11257))+(((-1.0)*x11257*x11260))+(((-1.0)*x11251*x11254))+(((2.0)*cj5*x11255*x11256))+((x11252*x11253))+(((-1.0)*x11255*x11259))+(((2.0)*x11256*x11258)))),-1);
if(!x11262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11261.value)+(((1.5707963267949)*(x11262.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11263=IKcos(j4);
IkReal x11264=IKsin(j4);
IkReal x11265=(cj5*sj6);
IkReal x11266=(cj5*r01);
IkReal x11267=(cj5*r21);
IkReal x11268=(cj5*cj6*r11);
IkReal x11269=((1.0)*x11264);
IkReal x11270=(cj6*x11263);
IkReal x11271=(sj5*x11263);
IkReal x11272=(cj6*x11264);
IkReal x11273=(sj5*x11269);
IkReal x11274=((1.0)*sj6*x11263);
evalcond[0]=(((r20*x11263*x11265))+((r22*x11271))+((x11267*x11270))+(((-1.0)*r21*sj6*x11269))+((r20*x11272)));
evalcond[1]=(((r10*x11272))+((r12*x11271))+(((-1.0)*r11*sj6*x11269))+((r10*x11263*x11265))+((x11263*x11268)));
evalcond[2]=((-1.0)+((r00*x11272))+((r00*x11263*x11265))+((x11266*x11270))+((r02*x11271))+(((-1.0)*r01*sj6*x11269)));
evalcond[3]=((((-1.0)*r21*x11274))+(((-1.0)*r20*x11265*x11269))+(((-1.0)*r22*x11273))+((r20*x11270))+(((-1.0)*cj6*x11267*x11269)));
evalcond[4]=(((r00*x11270))+(((-1.0)*cj6*x11266*x11269))+(((-1.0)*r01*x11274))+(((-1.0)*r02*x11273))+(((-1.0)*r00*x11265*x11269)));
evalcond[5]=((1.0)+((r10*x11270))+(((-1.0)*r12*x11273))+(((-1.0)*r11*x11274))+(((-1.0)*r10*x11265*x11269))+(((-1.0)*x11268*x11269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11275=((1.0)*cj6);
CheckValue<IkReal> x11276 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),(((r11*sj6))+(((-1.0)*r10*x11275))),IKFAST_ATAN2_MAGTHRESH);
if(!x11276.valid){
continue;
}
CheckValue<IkReal> x11277=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x11275))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x11277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11276.value)+(((1.5707963267949)*(x11277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11278=IKcos(j4);
IkReal x11279=IKsin(j4);
IkReal x11280=(cj5*sj6);
IkReal x11281=(cj5*r01);
IkReal x11282=(cj5*r21);
IkReal x11283=(cj5*cj6*r11);
IkReal x11284=((1.0)*x11279);
IkReal x11285=(cj6*x11278);
IkReal x11286=(sj5*x11278);
IkReal x11287=(cj6*x11279);
IkReal x11288=(sj5*x11284);
IkReal x11289=((1.0)*sj6*x11278);
evalcond[0]=(((r22*x11286))+(((-1.0)*r21*sj6*x11284))+((r20*x11278*x11280))+((r20*x11287))+((x11282*x11285)));
evalcond[1]=(((r10*x11278*x11280))+((r10*x11287))+(((-1.0)*r11*sj6*x11284))+((r12*x11286))+((x11278*x11283)));
evalcond[2]=((-1.0)+((r00*x11278*x11280))+((r02*x11286))+(((-1.0)*r01*sj6*x11284))+((r00*x11287))+((x11281*x11285)));
evalcond[3]=((((-1.0)*r22*x11288))+(((-1.0)*cj6*x11282*x11284))+(((-1.0)*r21*x11289))+(((-1.0)*r20*x11280*x11284))+((r20*x11285)));
evalcond[4]=((((-1.0)*r02*x11288))+(((-1.0)*r01*x11289))+(((-1.0)*cj6*x11281*x11284))+(((-1.0)*r00*x11280*x11284))+((r00*x11285)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11288))+(((-1.0)*r11*x11289))+((r10*x11285))+(((-1.0)*r10*x11280*x11284))+(((-1.0)*x11283*x11284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11290=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x11290.valid){
continue;
}
CheckValue<IkReal> x11291 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11291.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11290.value)))+(x11291.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11292=IKcos(j4);
IkReal x11293=IKsin(j4);
IkReal x11294=(cj5*sj6);
IkReal x11295=(cj5*r01);
IkReal x11296=(cj5*r21);
IkReal x11297=(cj5*cj6*r11);
IkReal x11298=((1.0)*x11293);
IkReal x11299=(cj6*x11292);
IkReal x11300=(sj5*x11292);
IkReal x11301=(cj6*x11293);
IkReal x11302=(sj5*x11298);
IkReal x11303=((1.0)*sj6*x11292);
evalcond[0]=(((r20*x11301))+((r20*x11292*x11294))+(((-1.0)*r21*sj6*x11298))+((x11296*x11299))+((r22*x11300)));
evalcond[1]=(((r10*x11292*x11294))+((r12*x11300))+((r10*x11301))+(((-1.0)*r11*sj6*x11298))+((x11292*x11297)));
evalcond[2]=((-1.0)+((r02*x11300))+((r00*x11301))+((r00*x11292*x11294))+(((-1.0)*r01*sj6*x11298))+((x11295*x11299)));
evalcond[3]=((((-1.0)*cj6*x11296*x11298))+(((-1.0)*r20*x11294*x11298))+((r20*x11299))+(((-1.0)*r22*x11302))+(((-1.0)*r21*x11303)));
evalcond[4]=((((-1.0)*r00*x11294*x11298))+(((-1.0)*r02*x11302))+(((-1.0)*cj6*x11295*x11298))+(((-1.0)*r01*x11303))+((r00*x11299)));
evalcond[5]=((1.0)+((r10*x11299))+(((-1.0)*x11297*x11298))+(((-1.0)*r11*x11303))+(((-1.0)*r12*x11302))+(((-1.0)*r10*x11294*x11298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11304=(cj0*cj6);
IkReal x11305=((1.0)*sj0);
IkReal x11306=(cj0*sj6);
IkReal x11307=(sj6*x11305);
CheckValue<IkReal> x11308=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11308.valid){
continue;
}
CheckValue<IkReal> x11309 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj5*x11305))+(((-1.0)*cj5*r00*x11307))+(((-1.0)*cj5*cj6*r01*x11305))+((cj0*r12*sj5))+((cj5*r10*x11306))+((cj5*r11*x11304)))),(((cj6*r00*sj0))+(((-1.0)*r10*x11304))+(((-1.0)*r01*x11307))+((r11*x11306))),IKFAST_ATAN2_MAGTHRESH);
if(!x11309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11308.value)))+(x11309.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11310=IKcos(j4);
IkReal x11311=IKsin(j4);
IkReal x11312=(cj5*sj6);
IkReal x11313=(cj5*r21);
IkReal x11314=(cj5*r01);
IkReal x11315=(cj5*cj6*r11);
IkReal x11316=((1.0)*x11311);
IkReal x11317=(cj6*x11310);
IkReal x11318=(sj5*x11310);
IkReal x11319=(cj6*x11311);
IkReal x11320=(sj5*x11316);
IkReal x11321=((1.0)*sj6*x11310);
evalcond[0]=(((r20*x11310*x11312))+((r22*x11318))+((r20*x11319))+(((-1.0)*r21*sj6*x11316))+((x11313*x11317)));
evalcond[1]=((((-1.0)*r01*sj6*x11316))+cj0+((r02*x11318))+((r00*x11310*x11312))+((x11314*x11317))+((r00*x11319)));
evalcond[2]=(sj0+(((-1.0)*r11*sj6*x11316))+((r10*x11310*x11312))+((r10*x11319))+((x11310*x11315))+((r12*x11318)));
evalcond[3]=((((-1.0)*r20*x11312*x11316))+(((-1.0)*r22*x11320))+(((-1.0)*r21*x11321))+(((-1.0)*cj6*x11313*x11316))+((r20*x11317)));
evalcond[4]=((((-1.0)*r02*x11320))+sj0+(((-1.0)*r00*x11312*x11316))+(((-1.0)*r01*x11321))+((r00*x11317))+(((-1.0)*cj6*x11314*x11316)));
evalcond[5]=((((-1.0)*r12*x11320))+(((-1.0)*r11*x11321))+((r10*x11317))+(((-1.0)*r10*x11312*x11316))+(((-1.0)*x11315*x11316))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11322=(cj0*r20);
IkReal x11323=((1.0)*cj6);
IkReal x11324=(cj0*r21);
CheckValue<IkReal> x11325 = IKatan2WithCheck(IkReal((((cj5*sj6*x11322))+((cj0*r22*sj5))+((cj5*cj6*x11324)))),((((-1.0)*x11322*x11323))+((sj6*x11324))),IKFAST_ATAN2_MAGTHRESH);
if(!x11325.valid){
continue;
}
CheckValue<IkReal> x11326=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11323)))),-1);
if(!x11326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11325.value)+(((1.5707963267949)*(x11326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11327=IKcos(j4);
IkReal x11328=IKsin(j4);
IkReal x11329=(cj5*sj6);
IkReal x11330=(cj5*r21);
IkReal x11331=(cj5*r01);
IkReal x11332=(cj5*cj6*r11);
IkReal x11333=((1.0)*x11328);
IkReal x11334=(cj6*x11327);
IkReal x11335=(sj5*x11327);
IkReal x11336=(cj6*x11328);
IkReal x11337=(sj5*x11333);
IkReal x11338=((1.0)*sj6*x11327);
evalcond[0]=(((r20*x11336))+(((-1.0)*r21*sj6*x11333))+((x11330*x11334))+((r22*x11335))+((r20*x11327*x11329)));
evalcond[1]=(cj0+(((-1.0)*r01*sj6*x11333))+((r00*x11327*x11329))+((x11331*x11334))+((r00*x11336))+((r02*x11335)));
evalcond[2]=(sj0+(((-1.0)*r11*sj6*x11333))+((x11327*x11332))+((r12*x11335))+((r10*x11336))+((r10*x11327*x11329)));
evalcond[3]=((((-1.0)*cj6*x11330*x11333))+(((-1.0)*r21*x11338))+(((-1.0)*r22*x11337))+((r20*x11334))+(((-1.0)*r20*x11329*x11333)));
evalcond[4]=((((-1.0)*r00*x11329*x11333))+(((-1.0)*r01*x11338))+sj0+(((-1.0)*cj6*x11331*x11333))+((r00*x11334))+(((-1.0)*r02*x11337)));
evalcond[5]=((((-1.0)*r12*x11337))+((r10*x11334))+(((-1.0)*x11332*x11333))+(((-1.0)*r10*x11329*x11333))+(((-1.0)*r11*x11338))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11339=(r21*sj0);
IkReal x11340=(r20*sj0);
CheckValue<IkReal> x11341 = IKatan2WithCheck(IkReal((((r22*sj0*sj5))+((cj5*cj6*x11339))+((cj5*sj6*x11340)))),(((sj6*x11339))+(((-1.0)*cj6*x11340))),IKFAST_ATAN2_MAGTHRESH);
if(!x11341.valid){
continue;
}
CheckValue<IkReal> x11342=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11341.value)+(((1.5707963267949)*(x11342.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11343=IKcos(j4);
IkReal x11344=IKsin(j4);
IkReal x11345=(cj5*sj6);
IkReal x11346=(cj5*r21);
IkReal x11347=(cj5*r01);
IkReal x11348=(cj5*cj6*r11);
IkReal x11349=((1.0)*x11344);
IkReal x11350=(cj6*x11343);
IkReal x11351=(sj5*x11343);
IkReal x11352=(cj6*x11344);
IkReal x11353=(sj5*x11349);
IkReal x11354=((1.0)*sj6*x11343);
evalcond[0]=(((r20*x11352))+((x11346*x11350))+(((-1.0)*r21*sj6*x11349))+((r20*x11343*x11345))+((r22*x11351)));
evalcond[1]=(((r02*x11351))+cj0+((r00*x11343*x11345))+(((-1.0)*r01*sj6*x11349))+((r00*x11352))+((x11347*x11350)));
evalcond[2]=((((-1.0)*r11*sj6*x11349))+((r12*x11351))+sj0+((r10*x11352))+((x11343*x11348))+((r10*x11343*x11345)));
evalcond[3]=((((-1.0)*r21*x11354))+((r20*x11350))+(((-1.0)*cj6*x11346*x11349))+(((-1.0)*r22*x11353))+(((-1.0)*r20*x11345*x11349)));
evalcond[4]=(sj0+(((-1.0)*cj6*x11347*x11349))+((r00*x11350))+(((-1.0)*r02*x11353))+(((-1.0)*r00*x11345*x11349))+(((-1.0)*r01*x11354)));
evalcond[5]=((((-1.0)*x11348*x11349))+(((-1.0)*r11*x11354))+(((-1.0)*r12*x11353))+((r10*x11350))+(((-1.0)*r10*x11345*x11349))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11355=(r10*sj6);
IkReal x11356=((0.37429)*sj5);
IkReal x11357=((0.01)*cj5);
IkReal x11358=(cj6*r11);
IkReal x11359=(r00*sj6);
IkReal x11360=(r20*sj6);
IkReal x11361=((0.01)*sj5);
IkReal x11362=(cj6*r01);
IkReal x11363=((0.37429)*cj5);
IkReal x11364=(cj6*r21);
IkReal x11365=((1.0)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((0.36442)+(((-1.0)*x11356*x11360))+(((-1.0)*x11356*x11364))+((r22*x11361))+((r22*x11363))+((x11357*x11364))+((x11357*x11360))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*x11356*x11362))+((x11357*x11362))+(((-1.0)*px))+((r02*x11361))+((r02*x11363))+(((-1.0)*x11356*x11359))+((x11357*x11359)));
evalcond[3]=(((x11355*x11357))+(((-1.0)*py))+((r12*x11361))+((r12*x11363))+(((-1.0)*x11355*x11356))+(((-1.0)*x11356*x11358))+((x11357*x11358)));
evalcond[4]=(((cj5*r22))+(((-1.0)*x11360*x11365))+(((-1.0)*x11364*x11365)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11366=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x11366))+(((-1.0)*cj6*r11*x11366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x11366))+(((-1.0)*r00*sj6*x11366))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x11366))+(((-1.0)*cj6*r11*x11366))))+IKsqr(((((-1.0)*cj6*r01*x11366))+(((-1.0)*r00*sj6*x11366))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x11366))+(((-1.0)*cj6*r11*x11366))), ((((-1.0)*cj6*r01*x11366))+(((-1.0)*r00*sj6*x11366))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x11367=((1.0)*sj5);
evalcond[0]=(((cj5*r12))+(((-1.0)*r10*sj6*x11367))+(((-1.0)*cj6*r11*x11367))+(((-1.0)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*cj6*r01*x11367))+(((-1.0)*r00*sj6*x11367))+(((-1.0)*(IKcos(j0))))+((cj5*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11368=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11368;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11368);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11369=((1.0)*cj6);
IkReal x11370=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11369)));
j4eval[0]=x11370;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x11369))))));
j4eval[2]=IKsign(x11370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11371=cj6*cj6;
IkReal x11372=r01*r01;
IkReal x11373=cj5*cj5;
IkReal x11374=r00*r00;
IkReal x11375=r02*r02;
IkReal x11376=(r02*sj5);
IkReal x11377=(r01*sj6);
IkReal x11378=(cj5*cj6*r01);
IkReal x11379=((2.0)*cj6*r00);
IkReal x11380=((1.0)*x11373);
IkReal x11381=(cj5*r00*sj6);
IkReal x11382=(x11371*x11374);
IkReal x11383=(x11371*x11372);
IkReal x11384=(((x11373*x11383))+(((-1.0)*x11380*x11382))+((x11373*x11377*x11379))+(((-1.0)*x11375*x11380))+x11375+x11372+x11382+(((2.0)*x11376*x11378))+(((2.0)*x11376*x11381))+((x11373*x11374))+(((-1.0)*x11377*x11379))+(((-1.0)*x11383)));
j4eval[0]=x11384;
j4eval[1]=((IKabs((((sj0*x11378))+((sj0*x11376))+((sj0*x11381)))))+(IKabs((((sj0*x11377))+(((-1.0)*cj6*r00*sj0))))));
j4eval[2]=IKsign(x11384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11385=(cj5*r12);
IkReal x11386=(r10*sj6);
IkReal x11387=((0.37429)*sj5);
IkReal x11388=((0.01)*cj5);
IkReal x11389=(cj6*r11);
IkReal x11390=(r00*sj6);
IkReal x11391=(r20*sj6);
IkReal x11392=((1.0)*sj5);
IkReal x11393=((0.01)*sj5);
IkReal x11394=(cj6*r01);
IkReal x11395=(cj5*r02);
IkReal x11396=(cj6*r21);
IkReal x11397=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.36442)+(((-1.0)*pz))+((x11388*x11391))+((x11388*x11396))+(((0.37429)*x11397))+(((-1.0)*x11387*x11391))+(((-1.0)*x11387*x11396))+((r22*x11393)));
evalcond[2]=(((r02*x11393))+(((-1.0)*px))+((x11388*x11394))+((x11388*x11390))+(((0.37429)*x11395))+(((-1.0)*x11387*x11390))+(((-1.0)*x11387*x11394)));
evalcond[3]=(((x11386*x11388))+((r12*x11393))+(((-1.0)*py))+((x11388*x11389))+(((0.37429)*x11385))+(((-1.0)*x11387*x11389))+(((-1.0)*x11386*x11387)));
evalcond[4]=((((-1.0)*x11392*x11396))+x11397+(((-1.0)*x11391*x11392)));
evalcond[5]=(x11385+(((-1.0)*x11386*x11392))+(((-1.0)*x11389*x11392)));
evalcond[6]=((-1.0)+(((-1.0)*x11390*x11392))+(((-1.0)*x11392*x11394))+x11395);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11398=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11398;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11399=((1.0)*cj6);
IkReal x11400=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11399)));
j4eval[0]=x11400;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x11399))))));
j4eval[2]=IKsign(x11400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11401=cj6*cj6;
IkReal x11402=cj5*cj5;
IkReal x11403=r10*r10;
IkReal x11404=r11*r11;
IkReal x11405=r12*r12;
IkReal x11406=(r10*sj6);
IkReal x11407=(r12*sj5);
IkReal x11408=((2.0)*cj6*r11);
IkReal x11409=((1.0)*x11403);
IkReal x11410=(x11401*x11404);
IkReal x11411=((((-2.0)*cj5*x11406*x11407))+(((-1.0)*x11402*x11409))+x11410+(((-1.0)*x11402*x11410))+((x11406*x11408))+(((-1.0)*x11401*x11409))+(((-1.0)*x11402*x11406*x11408))+((x11401*x11402*x11403))+(((-1.0)*x11404))+(((-1.0)*x11405))+(((-1.0)*cj5*x11407*x11408))+((x11402*x11405)));
j4eval[0]=x11411;
j4eval[1]=((IKabs((x11407+((cj5*cj6*r11))+((cj5*x11406)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11411);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11412=cj6*cj6;
IkReal x11413=cj5*cj5;
IkReal x11414=r10*r10;
IkReal x11415=r11*r11;
IkReal x11416=r12*r12;
IkReal x11417=(r10*sj6);
IkReal x11418=(r12*sj5);
IkReal x11419=((2.0)*cj6*r11);
IkReal x11420=(x11412*x11415);
IkReal x11421=(x11413*x11414);
CheckValue<IkReal> x11422=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11413*x11420))+(((-1.0)*x11413*x11417*x11419))+((x11412*x11421))+x11420+((x11417*x11419))+(((-1.0)*x11416))+(((-1.0)*x11415))+(((-2.0)*cj5*x11417*x11418))+(((-1.0)*x11421))+(((-1.0)*x11412*x11414))+(((-1.0)*cj5*x11418*x11419))+((x11413*x11416)))),-1);
if(!x11422.valid){
continue;
}
CheckValue<IkReal> x11423 = IKatan2WithCheck(IkReal((x11418+((cj5*cj6*r11))+((cj5*x11417)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11422.value)))+(x11423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11424=IKcos(j4);
IkReal x11425=IKsin(j4);
IkReal x11426=(cj5*sj6);
IkReal x11427=(cj5*r01);
IkReal x11428=(cj5*r21);
IkReal x11429=(cj5*cj6*r11);
IkReal x11430=((1.0)*x11425);
IkReal x11431=(cj6*x11424);
IkReal x11432=(sj5*x11424);
IkReal x11433=(cj6*x11425);
IkReal x11434=(sj5*x11430);
IkReal x11435=((1.0)*sj6*x11424);
evalcond[0]=(((r02*x11432))+((r00*x11424*x11426))+(((-1.0)*r01*sj6*x11430))+((x11427*x11431))+((r00*x11433)));
evalcond[1]=(((r10*x11433))+(((-1.0)*r11*sj6*x11430))+((r12*x11432))+((x11424*x11429))+((r10*x11424*x11426)));
evalcond[2]=((-1.0)+((r20*x11424*x11426))+((r20*x11433))+((x11428*x11431))+((r22*x11432))+(((-1.0)*r21*sj6*x11430)));
evalcond[3]=(((r20*x11431))+(((-1.0)*cj6*x11428*x11430))+(((-1.0)*r21*x11435))+(((-1.0)*r22*x11434))+(((-1.0)*r20*x11426*x11430)));
evalcond[4]=((((-1.0)*r01*x11435))+(((-1.0)*r02*x11434))+(((-1.0)*cj6*x11427*x11430))+((r00*x11431))+(((-1.0)*r00*x11426*x11430)));
evalcond[5]=((-1.0)+((r10*x11431))+(((-1.0)*r11*x11435))+(((-1.0)*r12*x11434))+(((-1.0)*x11429*x11430))+(((-1.0)*r10*x11426*x11430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11436=((1.0)*cj6);
CheckValue<IkReal> x11437=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11436)))),-1);
if(!x11437.valid){
continue;
}
CheckValue<IkReal> x11438 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x11436))),IKFAST_ATAN2_MAGTHRESH);
if(!x11438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11437.value)))+(x11438.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11439=IKcos(j4);
IkReal x11440=IKsin(j4);
IkReal x11441=(cj5*sj6);
IkReal x11442=(cj5*r01);
IkReal x11443=(cj5*r21);
IkReal x11444=(cj5*cj6*r11);
IkReal x11445=((1.0)*x11440);
IkReal x11446=(cj6*x11439);
IkReal x11447=(sj5*x11439);
IkReal x11448=(cj6*x11440);
IkReal x11449=(sj5*x11445);
IkReal x11450=((1.0)*sj6*x11439);
evalcond[0]=(((r00*x11448))+((r00*x11439*x11441))+((x11442*x11446))+((r02*x11447))+(((-1.0)*r01*sj6*x11445)));
evalcond[1]=(((r12*x11447))+(((-1.0)*r11*sj6*x11445))+((x11439*x11444))+((r10*x11448))+((r10*x11439*x11441)));
evalcond[2]=((-1.0)+((r20*x11439*x11441))+(((-1.0)*r21*sj6*x11445))+((r22*x11447))+((r20*x11448))+((x11443*x11446)));
evalcond[3]=((((-1.0)*cj6*x11443*x11445))+(((-1.0)*r21*x11450))+(((-1.0)*r22*x11449))+((r20*x11446))+(((-1.0)*r20*x11441*x11445)));
evalcond[4]=(((r00*x11446))+(((-1.0)*r02*x11449))+(((-1.0)*r00*x11441*x11445))+(((-1.0)*cj6*x11442*x11445))+(((-1.0)*r01*x11450)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11449))+(((-1.0)*r10*x11441*x11445))+(((-1.0)*r11*x11450))+((r10*x11446))+(((-1.0)*x11444*x11445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11451 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11451.valid){
continue;
}
CheckValue<IkReal> x11452=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11451.value)+(((1.5707963267949)*(x11452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11453=IKcos(j4);
IkReal x11454=IKsin(j4);
IkReal x11455=(cj5*sj6);
IkReal x11456=(cj5*r01);
IkReal x11457=(cj5*r21);
IkReal x11458=(cj5*cj6*r11);
IkReal x11459=((1.0)*x11454);
IkReal x11460=(cj6*x11453);
IkReal x11461=(sj5*x11453);
IkReal x11462=(cj6*x11454);
IkReal x11463=(sj5*x11459);
IkReal x11464=((1.0)*sj6*x11453);
evalcond[0]=(((x11456*x11460))+((r00*x11453*x11455))+(((-1.0)*r01*sj6*x11459))+((r02*x11461))+((r00*x11462)));
evalcond[1]=(((r12*x11461))+((x11453*x11458))+((r10*x11462))+(((-1.0)*r11*sj6*x11459))+((r10*x11453*x11455)));
evalcond[2]=((-1.0)+((x11457*x11460))+((r20*x11453*x11455))+((r22*x11461))+(((-1.0)*r21*sj6*x11459))+((r20*x11462)));
evalcond[3]=((((-1.0)*r21*x11464))+(((-1.0)*cj6*x11457*x11459))+(((-1.0)*r22*x11463))+((r20*x11460))+(((-1.0)*r20*x11455*x11459)));
evalcond[4]=((((-1.0)*cj6*x11456*x11459))+(((-1.0)*r01*x11464))+(((-1.0)*r02*x11463))+(((-1.0)*r00*x11455*x11459))+((r00*x11460)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11463))+(((-1.0)*r11*x11464))+(((-1.0)*r10*x11455*x11459))+((r10*x11460))+(((-1.0)*x11458*x11459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11465=(cj5*r12);
IkReal x11466=(r10*sj6);
IkReal x11467=((0.37429)*sj5);
IkReal x11468=((0.01)*cj5);
IkReal x11469=(cj6*r11);
IkReal x11470=(r00*sj6);
IkReal x11471=(r20*sj6);
IkReal x11472=((1.0)*sj5);
IkReal x11473=((0.01)*sj5);
IkReal x11474=(cj6*r01);
IkReal x11475=(cj5*r02);
IkReal x11476=(cj6*r21);
IkReal x11477=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((x11468*x11471))+((x11468*x11476))+(((0.37429)*x11477))+((r22*x11473))+(((-1.0)*pz))+(((-1.0)*x11467*x11471))+(((-1.0)*x11467*x11476)));
evalcond[2]=(((x11468*x11474))+((x11468*x11470))+(((0.37429)*x11475))+(((-1.0)*px))+(((-1.0)*x11467*x11470))+(((-1.0)*x11467*x11474))+((r02*x11473)));
evalcond[3]=(((r12*x11473))+((x11468*x11469))+((x11466*x11468))+(((0.37429)*x11465))+(((-1.0)*py))+(((-1.0)*x11467*x11469))+(((-1.0)*x11466*x11467)));
evalcond[4]=(x11477+(((-1.0)*x11471*x11472))+(((-1.0)*x11472*x11476)));
evalcond[5]=(x11465+(((-1.0)*x11469*x11472))+(((-1.0)*x11466*x11472)));
evalcond[6]=((1.0)+x11475+(((-1.0)*x11470*x11472))+(((-1.0)*x11472*x11474)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11478=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11478;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11479=((1.0)*cj6);
IkReal x11480=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11479)));
j4eval[0]=x11480;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x11479))))));
j4eval[2]=IKsign(x11480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11481=r11*r11;
IkReal x11482=cj5*cj5;
IkReal x11483=cj6*cj6;
IkReal x11484=r10*r10;
IkReal x11485=r12*r12;
IkReal x11486=(r12*sj5);
IkReal x11487=(r11*sj6);
IkReal x11488=((1.0)*x11483);
IkReal x11489=(cj5*cj6*r11);
IkReal x11490=(cj5*r10*sj6);
IkReal x11491=((2.0)*cj6*r10);
IkReal x11492=(x11482*x11484);
IkReal x11493=(x11492+x11485+x11481+((x11481*x11482*x11483))+((x11483*x11484))+(((-1.0)*x11482*x11485))+((x11482*x11487*x11491))+(((-1.0)*x11488*x11492))+(((2.0)*x11486*x11489))+(((2.0)*x11486*x11490))+(((-1.0)*x11487*x11491))+(((-1.0)*x11481*x11488)));
j4eval[0]=x11493;
j4eval[1]=((IKabs((x11487+(((-1.0)*cj6*r10)))))+(IKabs((x11490+x11489+x11486))));
j4eval[2]=IKsign(x11493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11494=r11*r11;
IkReal x11495=cj5*cj5;
IkReal x11496=cj6*cj6;
IkReal x11497=r10*r10;
IkReal x11498=r12*r12;
IkReal x11499=(r10*sj6);
IkReal x11500=(r12*sj5);
IkReal x11501=((1.0)*x11496);
IkReal x11502=(cj5*cj6*r11);
IkReal x11503=((2.0)*cj6*r11);
IkReal x11504=(x11495*x11497);
CheckValue<IkReal> x11505=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11501*x11504))+x11498+x11494+x11504+(((2.0)*cj5*x11499*x11500))+(((2.0)*x11500*x11502))+(((-1.0)*x11499*x11503))+((x11496*x11497))+(((-1.0)*x11494*x11501))+((x11495*x11499*x11503))+(((-1.0)*x11495*x11498))+((x11494*x11495*x11496)))),-1);
if(!x11505.valid){
continue;
}
CheckValue<IkReal> x11506 = IKatan2WithCheck(IkReal((x11500+x11502+((cj5*x11499)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11505.value)))+(x11506.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11507=IKcos(j4);
IkReal x11508=IKsin(j4);
IkReal x11509=(cj5*sj6);
IkReal x11510=(cj5*r01);
IkReal x11511=(cj5*r21);
IkReal x11512=(cj5*cj6*r11);
IkReal x11513=((1.0)*x11508);
IkReal x11514=(cj6*x11507);
IkReal x11515=(sj5*x11507);
IkReal x11516=(cj6*x11508);
IkReal x11517=(sj5*x11513);
IkReal x11518=((1.0)*sj6*x11507);
evalcond[0]=(((x11510*x11514))+((r02*x11515))+((r00*x11507*x11509))+(((-1.0)*r01*sj6*x11513))+((r00*x11516)));
evalcond[1]=((((-1.0)*r11*sj6*x11513))+((r10*x11507*x11509))+((x11507*x11512))+((r12*x11515))+((r10*x11516)));
evalcond[2]=((-1.0)+((r20*x11507*x11509))+((r20*x11516))+((r22*x11515))+((x11511*x11514))+(((-1.0)*r21*sj6*x11513)));
evalcond[3]=(((r20*x11514))+(((-1.0)*cj6*x11511*x11513))+(((-1.0)*r22*x11517))+(((-1.0)*r21*x11518))+(((-1.0)*r20*x11509*x11513)));
evalcond[4]=((((-1.0)*cj6*x11510*x11513))+(((-1.0)*r01*x11518))+(((-1.0)*r02*x11517))+(((-1.0)*r00*x11509*x11513))+((r00*x11514)));
evalcond[5]=((1.0)+(((-1.0)*r10*x11509*x11513))+(((-1.0)*x11512*x11513))+(((-1.0)*r12*x11517))+(((-1.0)*r11*x11518))+((r10*x11514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11519=((1.0)*cj6);
CheckValue<IkReal> x11520=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11519)))),-1);
if(!x11520.valid){
continue;
}
CheckValue<IkReal> x11521 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x11519))),IKFAST_ATAN2_MAGTHRESH);
if(!x11521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11520.value)))+(x11521.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11522=IKcos(j4);
IkReal x11523=IKsin(j4);
IkReal x11524=(cj5*sj6);
IkReal x11525=(cj5*r01);
IkReal x11526=(cj5*r21);
IkReal x11527=(cj5*cj6*r11);
IkReal x11528=((1.0)*x11523);
IkReal x11529=(cj6*x11522);
IkReal x11530=(sj5*x11522);
IkReal x11531=(cj6*x11523);
IkReal x11532=(sj5*x11528);
IkReal x11533=((1.0)*sj6*x11522);
evalcond[0]=(((x11525*x11529))+(((-1.0)*r01*sj6*x11528))+((r00*x11531))+((r02*x11530))+((r00*x11522*x11524)));
evalcond[1]=(((x11522*x11527))+((r10*x11522*x11524))+(((-1.0)*r11*sj6*x11528))+((r12*x11530))+((r10*x11531)));
evalcond[2]=((-1.0)+((r22*x11530))+(((-1.0)*r21*sj6*x11528))+((r20*x11522*x11524))+((r20*x11531))+((x11526*x11529)));
evalcond[3]=((((-1.0)*cj6*x11526*x11528))+((r20*x11529))+(((-1.0)*r22*x11532))+(((-1.0)*r20*x11524*x11528))+(((-1.0)*r21*x11533)));
evalcond[4]=((((-1.0)*r00*x11524*x11528))+(((-1.0)*cj6*x11525*x11528))+((r00*x11529))+(((-1.0)*r01*x11533))+(((-1.0)*r02*x11532)));
evalcond[5]=((1.0)+(((-1.0)*r11*x11533))+(((-1.0)*r12*x11532))+(((-1.0)*x11527*x11528))+(((-1.0)*r10*x11524*x11528))+((r10*x11529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11534 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11534.valid){
continue;
}
CheckValue<IkReal> x11535=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11535.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11534.value)+(((1.5707963267949)*(x11535.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11536=IKcos(j4);
IkReal x11537=IKsin(j4);
IkReal x11538=(cj5*sj6);
IkReal x11539=(cj5*r01);
IkReal x11540=(cj5*r21);
IkReal x11541=(cj5*cj6*r11);
IkReal x11542=((1.0)*x11537);
IkReal x11543=(cj6*x11536);
IkReal x11544=(sj5*x11536);
IkReal x11545=(cj6*x11537);
IkReal x11546=(sj5*x11542);
IkReal x11547=((1.0)*sj6*x11536);
evalcond[0]=(((x11539*x11543))+((r00*x11545))+(((-1.0)*r01*sj6*x11542))+((r00*x11536*x11538))+((r02*x11544)));
evalcond[1]=(((r10*x11545))+((r12*x11544))+(((-1.0)*r11*sj6*x11542))+((x11536*x11541))+((r10*x11536*x11538)));
evalcond[2]=((-1.0)+(((-1.0)*r21*sj6*x11542))+((r20*x11545))+((x11540*x11543))+((r22*x11544))+((r20*x11536*x11538)));
evalcond[3]=(((r20*x11543))+(((-1.0)*r20*x11538*x11542))+(((-1.0)*cj6*x11540*x11542))+(((-1.0)*r21*x11547))+(((-1.0)*r22*x11546)));
evalcond[4]=((((-1.0)*r01*x11547))+((r00*x11543))+(((-1.0)*cj6*x11539*x11542))+(((-1.0)*r00*x11538*x11542))+(((-1.0)*r02*x11546)));
evalcond[5]=((1.0)+((r10*x11543))+(((-1.0)*x11541*x11542))+(((-1.0)*r10*x11538*x11542))+(((-1.0)*r12*x11546))+(((-1.0)*r11*x11547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11548=cj6*cj6;
IkReal x11549=r01*r01;
IkReal x11550=cj5*cj5;
IkReal x11551=r00*r00;
IkReal x11552=r02*r02;
IkReal x11553=(r00*sj6);
IkReal x11554=(r02*sj5);
IkReal x11555=(r01*sj0);
IkReal x11556=((2.0)*cj6*r01);
IkReal x11557=((1.0)*x11550);
IkReal x11558=(x11548*x11551);
IkReal x11559=(x11548*x11549);
CheckValue<IkReal> x11560 = IKatan2WithCheck(IkReal((((cj5*sj0*x11553))+((cj5*cj6*x11555))+((sj0*x11554)))),(((sj6*x11555))+(((-1.0)*cj6*r00*sj0))),IKFAST_ATAN2_MAGTHRESH);
if(!x11560.valid){
continue;
}
CheckValue<IkReal> x11561=IKPowWithIntegerCheck(IKsign((x11549+x11552+x11558+(((2.0)*cj5*x11553*x11554))+((x11550*x11553*x11556))+((x11550*x11559))+((x11550*x11551))+(((-1.0)*x11557*x11558))+(((-1.0)*x11553*x11556))+((cj5*x11554*x11556))+(((-1.0)*x11552*x11557))+(((-1.0)*x11559)))),-1);
if(!x11561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11560.value)+(((1.5707963267949)*(x11561.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11562=IKcos(j4);
IkReal x11563=IKsin(j4);
IkReal x11564=(cj5*sj6);
IkReal x11565=(cj5*r01);
IkReal x11566=(cj5*r21);
IkReal x11567=(cj5*cj6*r11);
IkReal x11568=((1.0)*x11563);
IkReal x11569=(cj6*x11562);
IkReal x11570=(sj5*x11562);
IkReal x11571=(cj6*x11563);
IkReal x11572=(sj5*x11568);
IkReal x11573=((1.0)*sj6*x11562);
evalcond[0]=(((r00*x11571))+((x11565*x11569))+((r00*x11562*x11564))+((r02*x11570))+(((-1.0)*r01*sj6*x11568)));
evalcond[1]=(((r10*x11562*x11564))+((r10*x11571))+((x11562*x11567))+((r12*x11570))+(((-1.0)*r11*sj6*x11568)));
evalcond[2]=((-1.0)+((x11566*x11569))+((r20*x11562*x11564))+(((-1.0)*r21*sj6*x11568))+((r20*x11571))+((r22*x11570)));
evalcond[3]=((((-1.0)*cj6*x11566*x11568))+((r20*x11569))+(((-1.0)*r21*x11573))+(((-1.0)*r20*x11564*x11568))+(((-1.0)*r22*x11572)));
evalcond[4]=((((-1.0)*r00*x11564*x11568))+(((-1.0)*r01*x11573))+sj0+(((-1.0)*cj6*x11565*x11568))+((r00*x11569))+(((-1.0)*r02*x11572)));
evalcond[5]=(((r10*x11569))+(((-1.0)*r10*x11564*x11568))+(((-1.0)*x11567*x11568))+(((-1.0)*r11*x11573))+(((-1.0)*r12*x11572))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11574=((1.0)*cj6);
CheckValue<IkReal> x11575=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11574)))),-1);
if(!x11575.valid){
continue;
}
CheckValue<IkReal> x11576 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x11574))),IKFAST_ATAN2_MAGTHRESH);
if(!x11576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11575.value)))+(x11576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11577=IKcos(j4);
IkReal x11578=IKsin(j4);
IkReal x11579=(cj5*sj6);
IkReal x11580=(cj5*r01);
IkReal x11581=(cj5*r21);
IkReal x11582=(cj5*cj6*r11);
IkReal x11583=((1.0)*x11578);
IkReal x11584=(cj6*x11577);
IkReal x11585=(sj5*x11577);
IkReal x11586=(cj6*x11578);
IkReal x11587=(sj5*x11583);
IkReal x11588=((1.0)*sj6*x11577);
evalcond[0]=(((r00*x11577*x11579))+((x11580*x11584))+((r02*x11585))+((r00*x11586))+(((-1.0)*r01*sj6*x11583)));
evalcond[1]=(((r10*x11577*x11579))+(((-1.0)*r11*sj6*x11583))+((x11577*x11582))+((r10*x11586))+((r12*x11585)));
evalcond[2]=((-1.0)+(((-1.0)*r21*sj6*x11583))+((r20*x11586))+((r20*x11577*x11579))+((x11581*x11584))+((r22*x11585)));
evalcond[3]=(((r20*x11584))+(((-1.0)*cj6*x11581*x11583))+(((-1.0)*r20*x11579*x11583))+(((-1.0)*r22*x11587))+(((-1.0)*r21*x11588)));
evalcond[4]=(sj0+(((-1.0)*r00*x11579*x11583))+(((-1.0)*r01*x11588))+(((-1.0)*cj6*x11580*x11583))+(((-1.0)*r02*x11587))+((r00*x11584)));
evalcond[5]=((((-1.0)*r10*x11579*x11583))+(((-1.0)*r12*x11587))+((r10*x11584))+(((-1.0)*r11*x11588))+(((-1.0)*x11582*x11583))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11589 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11589.valid){
continue;
}
CheckValue<IkReal> x11590=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11589.value)+(((1.5707963267949)*(x11590.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11591=IKcos(j4);
IkReal x11592=IKsin(j4);
IkReal x11593=(cj5*sj6);
IkReal x11594=(cj5*r01);
IkReal x11595=(cj5*r21);
IkReal x11596=(cj5*cj6*r11);
IkReal x11597=((1.0)*x11592);
IkReal x11598=(cj6*x11591);
IkReal x11599=(sj5*x11591);
IkReal x11600=(cj6*x11592);
IkReal x11601=(sj5*x11597);
IkReal x11602=((1.0)*sj6*x11591);
evalcond[0]=(((r00*x11600))+((x11594*x11598))+((r02*x11599))+((r00*x11591*x11593))+(((-1.0)*r01*sj6*x11597)));
evalcond[1]=(((r10*x11591*x11593))+((x11591*x11596))+((r10*x11600))+((r12*x11599))+(((-1.0)*r11*sj6*x11597)));
evalcond[2]=((-1.0)+(((-1.0)*r21*sj6*x11597))+((r22*x11599))+((x11595*x11598))+((r20*x11591*x11593))+((r20*x11600)));
evalcond[3]=((((-1.0)*r21*x11602))+(((-1.0)*r22*x11601))+((r20*x11598))+(((-1.0)*cj6*x11595*x11597))+(((-1.0)*r20*x11593*x11597)));
evalcond[4]=(sj0+(((-1.0)*r01*x11602))+(((-1.0)*r02*x11601))+((r00*x11598))+(((-1.0)*r00*x11593*x11597))+(((-1.0)*cj6*x11594*x11597)));
evalcond[5]=((((-1.0)*r11*x11602))+((r10*x11598))+(((-1.0)*r12*x11601))+(((-1.0)*x11596*x11597))+(((-1.0)*r10*x11593*x11597))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11603=(cj2*sj1);
IkReal x11604=((364.42)*cj1);
IkReal x11605=((1000.0)*px);
IkReal x11606=(cj5*sj2);
IkReal x11607=(cj6*r01);
IkReal x11608=((69.0)*r12);
IkReal x11609=(sj5*sj6);
IkReal x11610=((69.0)*r10);
IkReal x11611=((374.29)*r00);
IkReal x11612=((374.29)*sj5);
IkReal x11613=((374.29)*r02);
IkReal x11614=((10.0)*r02*sj5);
IkReal x11615=((10.0)*r00*sj6);
IkReal x11616=(cj6*r11*sj5);
CheckValue<IkReal> x11617=IKPowWithIntegerCheck(IKsign(((-69.0)+((x11603*x11604))+(((69.0)*x11603))+(((69.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x11617.valid){
continue;
}
CheckValue<IkReal> x11618 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x11614))+((cj5*r12*x11604))+(((-1.0)*x11609*x11610))+(((69.0)*x11603*x11616))+(((-1.0)*cj5*x11603*x11608))+((sj2*x11609*x11611))+(((-10.0)*x11606*x11607))+((sj2*x11607*x11612))+(((-1.0)*x11604*x11616))+((cj5*x11608))+((x11603*x11609*x11610))+(((-1.0)*r10*x11604*x11609))+(((-1.0)*x11606*x11615))+(((-1.0)*x11606*x11613))+((sj2*x11605))+(((-69.0)*x11616)))),((((-1.0)*x11603*x11614))+((x11603*x11607*x11612))+(((-1.0)*sj2*x11609*x11610))+((x11603*x11605))+(((-1.0)*cj5*x11603*x11613))+(((-1.0)*cj5*x11603*x11615))+(((-69.0)*sj2*x11616))+(((-10.0)*cj5*x11603*x11607))+((x11603*x11609*x11611))+((x11606*x11608))),IKFAST_ATAN2_MAGTHRESH);
if(!x11618.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11617.value)))+(x11618.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11619=IKsin(j0);
IkReal x11620=IKcos(j0);
IkReal x11621=((0.01)*cj5);
IkReal x11622=(cj6*r11);
IkReal x11623=(cj5*r12);
IkReal x11624=(r10*sj6);
IkReal x11625=((0.37429)*sj5);
IkReal x11626=((0.36442)*cj1);
IkReal x11627=((1.0)*sj5);
IkReal x11628=(r00*sj6);
IkReal x11629=(cj6*r01);
IkReal x11630=(cj2*sj1);
IkReal x11631=(cj5*r02);
IkReal x11632=((0.01)*sj5);
IkReal x11633=((0.069)*x11619);
IkReal x11634=((0.069)*x11620);
IkReal x11635=((1.0)*x11619);
evalcond[0]=(x11623+(((-1.0)*x11630*x11635))+(((-1.0)*x11622*x11627))+((sj2*x11620))+(((-1.0)*x11624*x11627)));
evalcond[1]=(x11631+(((-1.0)*x11620*x11630))+(((-1.0)*x11627*x11628))+(((-1.0)*x11627*x11629))+(((-1.0)*sj2*x11635)));
evalcond[2]=(x11634+(((0.37429)*x11631))+((r02*x11632))+(((-1.0)*px))+(((-1.0)*x11630*x11634))+(((-1.0)*x11625*x11629))+(((-1.0)*x11625*x11628))+((x11621*x11628))+((x11621*x11629))+((x11620*x11626))+(((-1.0)*sj2*x11633)));
evalcond[3]=(x11633+((r12*x11632))+((x11619*x11626))+(((-1.0)*py))+(((0.37429)*x11623))+((sj2*x11634))+(((-1.0)*x11630*x11633))+(((-1.0)*x11622*x11625))+((x11621*x11624))+((x11621*x11622))+(((-1.0)*x11624*x11625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11636=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x11636;
j4eval[1]=IKsign(x11636);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11637=((1.0)*sj5);
IkReal x11638=((((-1.0)*r00*sj6*x11637))+(((-1.0)*cj6*r01*x11637))+((cj5*r02)));
j4eval[0]=x11638;
j4eval[1]=IKsign(x11638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11639=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x11639;
j4eval[1]=IKsign(x11639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11640=(cj1*sj0);
IkReal x11641=(cj0*cj1);
IkReal x11642=(cj5*cj6);
IkReal x11643=((1.0)*sj6);
CheckValue<IkReal> x11644=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11644.valid){
continue;
}
CheckValue<IkReal> x11645 = IKatan2WithCheck(IkReal(((((-1.0)*r12*sj5*x11641))+((r01*x11640*x11642))+(((-1.0)*cj5*r10*x11641*x11643))+(((-1.0)*r11*x11641*x11642))+((r02*sj5*x11640))+((cj5*r00*sj6*x11640)))),(((r01*sj6*x11640))+((cj6*r10*x11641))+(((-1.0)*r11*x11641*x11643))+(((-1.0)*cj6*r00*x11640))),IKFAST_ATAN2_MAGTHRESH);
if(!x11645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11644.value)))+(x11645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11646=IKcos(j4);
IkReal x11647=IKsin(j4);
IkReal x11648=((1.0)*cj1);
IkReal x11649=(sj1*sj2);
IkReal x11650=(r10*sj6);
IkReal x11651=(r00*sj6);
IkReal x11652=((1.0)*sj6);
IkReal x11653=(r20*sj6);
IkReal x11654=(cj6*x11646);
IkReal x11655=(sj5*x11646);
IkReal x11656=(cj6*x11647);
IkReal x11657=(cj5*x11646);
IkReal x11658=(cj5*x11654);
IkReal x11659=((1.0)*sj5*x11647);
IkReal x11660=((1.0)*cj5*x11647);
evalcond[0]=(sj1+(((-1.0)*r21*x11647*x11652))+((x11653*x11657))+((r22*x11655))+((r21*x11658))+((r20*x11656)));
evalcond[1]=((((-1.0)*r01*x11647*x11652))+(((-1.0)*cj0*x11648))+((r02*x11655))+((x11651*x11657))+((r01*x11658))+((r00*x11656)));
evalcond[2]=(((r11*x11658))+((r12*x11655))+((r10*x11656))+((x11650*x11657))+(((-1.0)*sj0*x11648))+(((-1.0)*r11*x11647*x11652)));
evalcond[3]=((((-1.0)*r22*x11659))+((cj1*sj2))+(((-1.0)*r21*x11646*x11652))+(((-1.0)*cj5*r20*x11647*x11652))+((r20*x11654))+(((-1.0)*cj5*r21*x11656)));
evalcond[4]=((((-1.0)*r12*x11659))+((r10*x11654))+((cj0*cj2))+((sj0*x11649))+(((-1.0)*x11650*x11660))+(((-1.0)*r11*x11646*x11652))+(((-1.0)*cj5*r11*x11656)));
evalcond[5]=((((-1.0)*r02*x11659))+(((-1.0)*r01*x11646*x11652))+(((-1.0)*cj2*sj0))+((cj0*x11649))+(((-1.0)*x11651*x11660))+((r00*x11654))+(((-1.0)*cj5*r01*x11656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11661=(sj1*sj6);
IkReal x11662=((1.0)*cj6);
IkReal x11663=(cj1*sj0);
IkReal x11664=(cj5*cj6);
IkReal x11665=(r20*x11663);
CheckValue<IkReal> x11666 = IKatan2WithCheck(IkReal((((r22*sj5*x11663))+((r12*sj1*sj5))+((cj5*sj6*x11665))+((r21*x11663*x11664))+((r11*sj1*x11664))+((cj5*r10*x11661)))),((((-1.0)*r10*sj1*x11662))+((r11*x11661))+(((-1.0)*x11662*x11665))+((r21*sj6*x11663))),IKFAST_ATAN2_MAGTHRESH);
if(!x11666.valid){
continue;
}
CheckValue<IkReal> x11667=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x11662))+((cj5*r02)))),-1);
if(!x11667.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11666.value)+(((1.5707963267949)*(x11667.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11668=IKcos(j4);
IkReal x11669=IKsin(j4);
IkReal x11670=((1.0)*cj1);
IkReal x11671=(sj1*sj2);
IkReal x11672=(r10*sj6);
IkReal x11673=(r00*sj6);
IkReal x11674=((1.0)*sj6);
IkReal x11675=(r20*sj6);
IkReal x11676=(cj6*x11668);
IkReal x11677=(sj5*x11668);
IkReal x11678=(cj6*x11669);
IkReal x11679=(cj5*x11668);
IkReal x11680=(cj5*x11676);
IkReal x11681=((1.0)*sj5*x11669);
IkReal x11682=((1.0)*cj5*x11669);
evalcond[0]=(((r22*x11677))+sj1+((r21*x11680))+((r20*x11678))+((x11675*x11679))+(((-1.0)*r21*x11669*x11674)));
evalcond[1]=((((-1.0)*cj0*x11670))+((x11673*x11679))+((r02*x11677))+((r00*x11678))+(((-1.0)*r01*x11669*x11674))+((r01*x11680)));
evalcond[2]=((((-1.0)*r11*x11669*x11674))+((r11*x11680))+((r12*x11677))+((x11672*x11679))+((r10*x11678))+(((-1.0)*sj0*x11670)));
evalcond[3]=((((-1.0)*r22*x11681))+((cj1*sj2))+(((-1.0)*cj5*r21*x11678))+((r20*x11676))+(((-1.0)*r21*x11668*x11674))+(((-1.0)*cj5*r20*x11669*x11674)));
evalcond[4]=((((-1.0)*r11*x11668*x11674))+(((-1.0)*x11672*x11682))+((cj0*cj2))+(((-1.0)*cj5*r11*x11678))+(((-1.0)*r12*x11681))+((sj0*x11671))+((r10*x11676)));
evalcond[5]=((((-1.0)*cj5*r01*x11678))+((cj0*x11671))+(((-1.0)*r02*x11681))+(((-1.0)*cj2*sj0))+((r00*x11676))+(((-1.0)*r01*x11668*x11674))+(((-1.0)*x11673*x11682)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11683=(cj0*cj1);
IkReal x11684=(cj5*cj6);
IkReal x11685=(cj5*sj6);
IkReal x11686=(r00*sj1);
IkReal x11687=((1.0)*cj6);
IkReal x11688=(r01*sj1);
CheckValue<IkReal> x11689=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x11689.valid){
continue;
}
CheckValue<IkReal> x11690 = IKatan2WithCheck(IkReal((((x11685*x11686))+((r21*x11683*x11684))+((r22*sj5*x11683))+((r20*x11683*x11685))+((x11684*x11688))+((r02*sj1*sj5)))),(((r21*sj6*x11683))+((sj6*x11688))+(((-1.0)*r20*x11683*x11687))+(((-1.0)*x11686*x11687))),IKFAST_ATAN2_MAGTHRESH);
if(!x11690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11689.value)))+(x11690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11691=IKcos(j4);
IkReal x11692=IKsin(j4);
IkReal x11693=((1.0)*cj1);
IkReal x11694=(sj1*sj2);
IkReal x11695=(r10*sj6);
IkReal x11696=(r00*sj6);
IkReal x11697=((1.0)*sj6);
IkReal x11698=(r20*sj6);
IkReal x11699=(cj6*x11691);
IkReal x11700=(sj5*x11691);
IkReal x11701=(cj6*x11692);
IkReal x11702=(cj5*x11691);
IkReal x11703=(cj5*x11699);
IkReal x11704=((1.0)*sj5*x11692);
IkReal x11705=((1.0)*cj5*x11692);
evalcond[0]=(sj1+((r22*x11700))+((r21*x11703))+(((-1.0)*r21*x11692*x11697))+((x11698*x11702))+((r20*x11701)));
evalcond[1]=(((x11696*x11702))+((r01*x11703))+((r00*x11701))+(((-1.0)*cj0*x11693))+((r02*x11700))+(((-1.0)*r01*x11692*x11697)));
evalcond[2]=((((-1.0)*r11*x11692*x11697))+((r12*x11700))+((r10*x11701))+((r11*x11703))+((x11695*x11702))+(((-1.0)*sj0*x11693)));
evalcond[3]=((((-1.0)*r22*x11704))+((cj1*sj2))+(((-1.0)*r21*x11691*x11697))+((r20*x11699))+(((-1.0)*cj5*r21*x11701))+(((-1.0)*cj5*r20*x11692*x11697)));
evalcond[4]=((((-1.0)*r11*x11691*x11697))+((cj0*cj2))+((r10*x11699))+((sj0*x11694))+(((-1.0)*r12*x11704))+(((-1.0)*x11695*x11705))+(((-1.0)*cj5*r11*x11701)));
evalcond[5]=((((-1.0)*cj5*r01*x11701))+((cj0*x11694))+(((-1.0)*r01*x11691*x11697))+(((-1.0)*cj2*sj0))+((r00*x11699))+(((-1.0)*x11696*x11705))+(((-1.0)*r02*x11704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11706=cj5*cj5;
IkReal x11707=cj6*cj6;
IkReal x11708=r22*r22;
IkReal x11709=r21*r21;
IkReal x11710=r20*r20;
IkReal x11711=(r21*sj1);
IkReal x11712=(cj5*cj6);
IkReal x11713=((1.0)*sj6);
IkReal x11714=(r22*sj5);
IkReal x11715=(cj1*sj2);
IkReal x11716=(cj5*r20);
IkReal x11717=(cj6*r20);
IkReal x11718=((1.0)*x11709);
IkReal x11719=(x11707*x11710);
IkReal x11720=((2.0)*r21*sj6*x11717);
CheckValue<IkReal> x11721=IKPowWithIntegerCheck(IKsign((x11720+(((-1.0)*x11718))+(((-1.0)*x11706*x11720))+((x11706*x11719))+(((-1.0)*x11719))+(((-2.0)*r21*x11712*x11714))+((x11707*x11709))+(((-1.0)*x11708))+((x11706*x11708))+(((-1.0)*x11706*x11710))+(((-2.0)*sj6*x11714*x11716))+(((-1.0)*x11706*x11707*x11718)))),-1);
if(!x11721.valid){
continue;
}
CheckValue<IkReal> x11722 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x11712*x11715))+(((-1.0)*x11714*x11715))+(((-1.0)*x11713*x11715*x11716))+((sj1*x11717))+(((-1.0)*x11711*x11713)))),(((sj1*x11714))+((x11711*x11712))+((sj1*sj6*x11716))+((x11715*x11717))+(((-1.0)*r21*x11713*x11715))),IKFAST_ATAN2_MAGTHRESH);
if(!x11722.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11721.value)))+(x11722.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x11723=IKcos(j4);
IkReal x11724=IKsin(j4);
IkReal x11725=(r22*sj5);
IkReal x11726=(cj6*r20);
IkReal x11727=((1.0)*r21*sj6);
IkReal x11728=((1.0)*x11724);
IkReal x11729=(cj5*cj6*r21);
IkReal x11730=(cj5*r20*sj6);
evalcond[0]=(sj1+(((-1.0)*x11724*x11727))+((x11724*x11726))+((x11723*x11730))+((x11723*x11725))+((x11723*x11729)));
evalcond[1]=((((-1.0)*x11728*x11730))+(((-1.0)*x11728*x11729))+((cj1*sj2))+(((-1.0)*x11723*x11727))+((x11723*x11726))+(((-1.0)*x11725*x11728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11731=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x11731;
j0eval[1]=IKsign(x11731);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11732=(cj6*sj4);
IkReal x11733=((1.0)*sj6);
IkReal x11734=(cj5*r21);
IkReal x11735=(r22*sj5);
IkReal x11736=(cj4*cj6);
IkReal x11737=(cj4*sj5);
IkReal x11738=(r20*sj5);
IkReal x11739=(cj5*r22);
IkReal x11740=(cj5*r20*sj6);
IkReal x11741=(cj6*r21*sj5);
IkReal x11742=(cj4*cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj5*r20*sj4*x11733))+(((-1.0)*x11732*x11734))+((r20*x11736))+(((-1.0)*sj4*x11735))+(((-1.0)*cj4*r21*x11733)));
evalcond[2]=((-0.36442)+(((0.01)*x11740))+(((0.01)*x11735))+(((-1.0)*pz))+(((0.01)*cj6*x11734))+(((-0.37429)*x11741))+(((-0.37429)*sj6*x11738))+(((0.37429)*x11739)));
evalcond[3]=((1.0)+((cj4*x11735))+((cj4*x11740))+((x11734*x11736))+(((-1.0)*r21*sj4*x11733))+((r20*x11732)));
evalcond[4]=(x11739+(((-1.0)*x11741))+(((-1.0)*x11733*x11738)));
evalcond[5]=(((r00*x11742))+((r00*x11732))+(((-1.0)*r01*sj4*x11733))+((r02*x11737))+((cj5*r01*x11736)));
evalcond[6]=(((cj5*r11*x11736))+((r10*x11742))+((r10*x11732))+((r12*x11737))+(((-1.0)*r11*sj4*x11733)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11743=(sj2*sj5);
IkReal x11744=(r10*sj6);
IkReal x11745=(cj6*r11);
IkReal x11746=(cj5*r02);
IkReal x11747=(cj6*r01);
IkReal x11748=(r00*sj6);
IkReal x11749=(cj5*r12);
IkReal x11750=((1.0)*cj2*sj5);
if( IKabs((((sj2*x11746))+(((-1.0)*x11745*x11750))+(((-1.0)*x11743*x11748))+(((-1.0)*x11743*x11747))+(((-1.0)*x11744*x11750))+((cj2*x11749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x11748*x11750))+(((-1.0)*x11747*x11750))+((x11743*x11745))+((x11743*x11744))+((cj2*x11746))+(((-1.0)*sj2*x11749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x11746))+(((-1.0)*x11745*x11750))+(((-1.0)*x11743*x11748))+(((-1.0)*x11743*x11747))+(((-1.0)*x11744*x11750))+((cj2*x11749))))+IKsqr(((((-1.0)*x11748*x11750))+(((-1.0)*x11747*x11750))+((x11743*x11745))+((x11743*x11744))+((cj2*x11746))+(((-1.0)*sj2*x11749))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj2*x11746))+(((-1.0)*x11745*x11750))+(((-1.0)*x11743*x11748))+(((-1.0)*x11743*x11747))+(((-1.0)*x11744*x11750))+((cj2*x11749))), ((((-1.0)*x11748*x11750))+(((-1.0)*x11747*x11750))+((x11743*x11745))+((x11743*x11744))+((cj2*x11746))+(((-1.0)*sj2*x11749))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11751=IKcos(j0);
IkReal x11752=IKsin(j0);
IkReal x11753=((1.0)*sj4);
IkReal x11754=(cj5*r12);
IkReal x11755=((0.37429)*sj5);
IkReal x11756=(r10*sj6);
IkReal x11757=((0.069)*sj2);
IkReal x11758=(cj6*r01);
IkReal x11759=((0.01)*cj5);
IkReal x11760=(r12*sj5);
IkReal x11761=(r00*sj6);
IkReal x11762=((1.0)*sj5);
IkReal x11763=(r02*sj5);
IkReal x11764=(cj6*r11);
IkReal x11765=(cj4*cj6);
IkReal x11766=(cj5*r02);
IkReal x11767=(sj2*x11751);
IkReal x11768=(cj5*x11764);
IkReal x11769=(cj2*x11751);
IkReal x11770=((0.069)*x11752);
IkReal x11771=(sj2*x11752);
IkReal x11772=((1.0)*cj4*sj6);
IkReal x11773=((1.0)*cj2*x11752);
evalcond[0]=(x11767+x11754+(((-1.0)*x11756*x11762))+(((-1.0)*x11762*x11764))+(((-1.0)*x11773)));
evalcond[1]=(x11766+(((-1.0)*x11771))+(((-1.0)*x11769))+(((-1.0)*x11758*x11762))+(((-1.0)*x11761*x11762)));
evalcond[2]=(x11771+x11769+(((-1.0)*r11*x11772))+((r10*x11765))+(((-1.0)*x11753*x11760))+(((-1.0)*x11753*x11768))+(((-1.0)*cj5*x11753*x11756)));
evalcond[3]=(x11767+(((-1.0)*x11753*x11763))+(((-1.0)*cj5*x11753*x11761))+(((-1.0)*r01*x11772))+(((-1.0)*cj5*x11753*x11758))+(((-1.0)*x11773))+((r00*x11765)));
evalcond[4]=(((x11759*x11761))+(((-1.0)*x11755*x11761))+(((-1.0)*x11755*x11758))+(((-0.069)*x11769))+(((-1.0)*px))+(((-1.0)*x11752*x11757))+(((0.37429)*x11766))+((x11758*x11759))+(((0.069)*x11751))+(((0.01)*x11763)));
evalcond[5]=(((x11759*x11764))+x11770+(((-1.0)*x11755*x11764))+(((-1.0)*x11755*x11756))+(((-1.0)*cj2*x11770))+(((-1.0)*py))+(((0.37429)*x11754))+(((0.01)*x11760))+((x11751*x11757))+((x11756*x11759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11774=(cj6*sj4);
IkReal x11775=((1.0)*sj6);
IkReal x11776=(cj5*r21);
IkReal x11777=(r22*sj5);
IkReal x11778=(cj4*cj6);
IkReal x11779=(cj4*sj5);
IkReal x11780=(r20*sj5);
IkReal x11781=(cj5*r22);
IkReal x11782=(cj5*r20*sj6);
IkReal x11783=(cj6*r21*sj5);
IkReal x11784=(cj4*cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x11774*x11776))+((r20*x11778))+(((-1.0)*cj4*r21*x11775))+(((-1.0)*cj5*r20*sj4*x11775))+(((-1.0)*sj4*x11777)));
evalcond[2]=((0.36442)+(((-0.37429)*x11783))+(((0.01)*x11777))+(((-0.37429)*sj6*x11780))+(((-1.0)*pz))+(((0.37429)*x11781))+(((0.01)*x11782))+(((0.01)*cj6*x11776)));
evalcond[3]=((-1.0)+((r20*x11774))+((x11776*x11778))+((cj4*x11782))+((cj4*x11777))+(((-1.0)*r21*sj4*x11775)));
evalcond[4]=(x11781+(((-1.0)*x11783))+(((-1.0)*x11775*x11780)));
evalcond[5]=(((cj5*r01*x11778))+((r02*x11779))+(((-1.0)*r01*sj4*x11775))+((r00*x11774))+((r00*x11784)));
evalcond[6]=(((cj5*r11*x11778))+((r10*x11774))+((r12*x11779))+(((-1.0)*r11*sj4*x11775))+((r10*x11784)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11785=((1.0)*sj2);
IkReal x11786=((1.0)*cj2*cj5);
IkReal x11787=(cj6*r11*sj5);
IkReal x11788=(cj6*r01*sj5);
IkReal x11789=(r00*sj5*sj6);
IkReal x11790=(r10*sj5*sj6);
if( IKabs(((((-1.0)*x11785*x11788))+(((-1.0)*x11785*x11789))+(((-1.0)*r12*x11786))+((cj5*r02*sj2))+((cj2*x11787))+((cj2*x11790)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x11787))+((cj2*x11789))+((cj2*x11788))+((sj2*x11790))+(((-1.0)*r02*x11786))+(((-1.0)*cj5*r12*x11785)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x11785*x11788))+(((-1.0)*x11785*x11789))+(((-1.0)*r12*x11786))+((cj5*r02*sj2))+((cj2*x11787))+((cj2*x11790))))+IKsqr((((sj2*x11787))+((cj2*x11789))+((cj2*x11788))+((sj2*x11790))+(((-1.0)*r02*x11786))+(((-1.0)*cj5*r12*x11785))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x11785*x11788))+(((-1.0)*x11785*x11789))+(((-1.0)*r12*x11786))+((cj5*r02*sj2))+((cj2*x11787))+((cj2*x11790))), (((sj2*x11787))+((cj2*x11789))+((cj2*x11788))+((sj2*x11790))+(((-1.0)*r02*x11786))+(((-1.0)*cj5*r12*x11785))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11791=IKcos(j0);
IkReal x11792=IKsin(j0);
IkReal x11793=((1.0)*sj4);
IkReal x11794=(cj5*r12);
IkReal x11795=((0.37429)*sj5);
IkReal x11796=(r10*sj6);
IkReal x11797=((0.069)*sj2);
IkReal x11798=(cj6*r01);
IkReal x11799=((0.01)*cj5);
IkReal x11800=(r12*sj5);
IkReal x11801=(r00*sj6);
IkReal x11802=((1.0)*sj5);
IkReal x11803=(r02*sj5);
IkReal x11804=(cj6*r11);
IkReal x11805=(cj4*cj6);
IkReal x11806=(cj5*r02);
IkReal x11807=(cj2*x11791);
IkReal x11808=(cj5*x11804);
IkReal x11809=((0.069)*x11792);
IkReal x11810=(sj2*x11791);
IkReal x11811=(cj2*x11792);
IkReal x11812=((1.0)*cj4*sj6);
IkReal x11813=((1.0)*sj2*x11792);
evalcond[0]=(x11794+(((-1.0)*x11802*x11804))+(((-1.0)*x11796*x11802))+x11810+x11811);
evalcond[1]=((((-1.0)*x11798*x11802))+(((-1.0)*x11813))+(((-1.0)*x11801*x11802))+x11807+x11806);
evalcond[2]=((((-1.0)*x11793*x11800))+(((-1.0)*x11793*x11808))+(((-1.0)*cj5*x11793*x11796))+(((-1.0)*r11*x11812))+((r10*x11805))+(((-1.0)*x11813))+x11807);
evalcond[3]=(((r00*x11805))+(((-1.0)*r01*x11812))+(((-1.0)*x11811))+(((-1.0)*x11810))+(((-1.0)*x11793*x11803))+(((-1.0)*cj5*x11793*x11798))+(((-1.0)*cj5*x11793*x11801)));
evalcond[4]=((((-1.0)*x11795*x11798))+(((-1.0)*x11792*x11797))+(((0.069)*x11791))+(((0.37429)*x11806))+(((-1.0)*x11795*x11801))+((x11799*x11801))+(((0.069)*x11807))+(((0.01)*x11803))+(((-1.0)*px))+((x11798*x11799)));
evalcond[5]=((((-1.0)*x11795*x11796))+(((-1.0)*x11795*x11804))+((x11799*x11804))+(((0.01)*x11800))+(((-1.0)*py))+(((0.37429)*x11794))+((x11791*x11797))+((x11796*x11799))+((cj2*x11809))+x11809);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11814=((1.0)*r21);
IkReal x11815=(cj6*sj5);
IkReal x11816=(sj4*sj6);
IkReal x11817=(cj5*r22);
IkReal x11818=(r22*sj5);
IkReal x11819=(cj5*cj6);
IkReal x11820=(cj4*sj6);
IkReal x11821=(cj6*r20);
IkReal x11822=(cj5*r20);
IkReal x11823=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj1+(((-1.0)*x11814*x11820))+(((-1.0)*sj4*x11814*x11819))+(((-1.0)*x11816*x11822))+((cj4*x11821))+(((-1.0)*sj4*x11818)));
evalcond[2]=((((0.01)*x11818))+(((0.37429)*x11817))+(((-0.37429)*x11823))+(((-1.0)*pz))+(((0.01)*sj6*x11822))+(((0.01)*r21*x11819))+(((-0.37429)*r21*x11815))+(((-0.36442)*sj1)));
evalcond[3]=(((sj4*x11821))+sj1+((cj4*r21*x11819))+((cj4*x11818))+((x11820*x11822))+(((-1.0)*x11814*x11816)));
evalcond[4]=((((-1.0)*x11823))+(((-1.0)*x11814*x11815))+x11817);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11824=(sj5*sj6);
IkReal x11825=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x11824))+(((-1.0)*r01*x11825))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x11824))+((r11*x11825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x11824))+(((-1.0)*r01*x11825))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x11824))+((r11*x11825))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x11824))+(((-1.0)*r01*x11825))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x11824))+((r11*x11825))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11826=IKcos(j0);
IkReal x11827=IKsin(j0);
IkReal x11828=((1.0)*sj4);
IkReal x11829=(cj5*r12);
IkReal x11830=((0.37429)*sj5);
IkReal x11831=(r10*sj6);
IkReal x11832=(r01*sj6);
IkReal x11833=((0.36442)*cj1);
IkReal x11834=(cj6*r01);
IkReal x11835=((0.01)*cj5);
IkReal x11836=(cj6*r10);
IkReal x11837=(r00*sj6);
IkReal x11838=((1.0)*sj5);
IkReal x11839=(r02*sj5);
IkReal x11840=(cj6*r11);
IkReal x11841=(r12*sj5);
IkReal x11842=(cj5*r02);
IkReal x11843=(cj4*cj5);
IkReal x11844=(cj6*r00);
IkReal x11845=((1.0)*cj4);
IkReal x11846=(r11*sj6);
IkReal x11847=((0.069)*x11827);
IkReal x11848=((0.069)*x11826);
IkReal x11849=(cj5*x11840);
IkReal x11850=((1.0)*x11827);
evalcond[0]=((((-1.0)*x11838*x11840))+(((-1.0)*x11831*x11838))+x11829+x11826);
evalcond[1]=((((-1.0)*x11850))+(((-1.0)*x11837*x11838))+(((-1.0)*x11834*x11838))+x11842);
evalcond[2]=(((x11834*x11843))+((sj4*x11844))+(((-1.0)*cj1*x11826))+((cj4*x11839))+(((-1.0)*x11828*x11832))+((x11837*x11843)));
evalcond[3]=(((x11840*x11843))+((cj4*x11841))+(((-1.0)*cj1*x11850))+((x11831*x11843))+(((-1.0)*x11828*x11846))+((sj4*x11836)));
evalcond[4]=((((-1.0)*x11845*x11846))+(((-1.0)*cj5*x11828*x11831))+((cj4*x11836))+(((-1.0)*x11828*x11849))+(((-1.0)*x11828*x11841))+((sj1*x11827)));
evalcond[5]=(((cj4*x11844))+(((-1.0)*cj5*x11828*x11834))+(((-1.0)*cj5*x11828*x11837))+(((-1.0)*x11832*x11845))+(((-1.0)*x11828*x11839))+((sj1*x11826)));
evalcond[6]=((((-1.0)*x11847))+(((-1.0)*x11830*x11837))+(((-1.0)*x11830*x11834))+(((0.01)*x11839))+(((-1.0)*px))+((x11835*x11837))+(((0.37429)*x11842))+((x11834*x11835))+((x11826*x11833))+x11848);
evalcond[7]=(((x11835*x11840))+(((-1.0)*x11830*x11831))+(((0.01)*x11841))+(((0.37429)*x11829))+(((-1.0)*py))+(((-1.0)*x11830*x11840))+((x11831*x11835))+((x11827*x11833))+x11848+x11847);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11851=(cj6*sj4);
IkReal x11852=(cj5*r21);
IkReal x11853=(r22*sj5);
IkReal x11854=(cj4*cj6);
IkReal x11855=((1.0)*r21);
IkReal x11856=(cj6*sj5);
IkReal x11857=((1.0)*sj4);
IkReal x11858=(cj5*r22);
IkReal x11859=(cj5*r20*sj6);
IkReal x11860=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x11851*x11852))+((r20*x11854))+(((-1.0)*x11857*x11859))+(((-1.0)*cj4*sj6*x11855))+(((-1.0)*x11853*x11857))+(((-1.0)*cj1)));
evalcond[2]=((((0.01)*cj6*x11852))+(((-0.37429)*x11860))+(((0.01)*x11853))+(((0.01)*x11859))+(((-1.0)*pz))+(((0.37429)*x11858))+(((-0.37429)*r21*x11856))+(((-0.36442)*sj1)));
evalcond[3]=(((cj4*x11853))+((cj4*x11859))+sj1+((r20*x11851))+(((-1.0)*sj4*sj6*x11855))+((x11852*x11854)));
evalcond[4]=((((-1.0)*x11855*x11856))+(((-1.0)*x11860))+x11858);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11861=(cj6*sj5);
IkReal x11862=(sj5*sj6);
if( IKabs((((r00*x11862))+((r01*x11861))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x11862))+(((-1.0)*r11*x11861)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x11862))+((r01*x11861))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x11862))+(((-1.0)*r11*x11861))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x11862))+((r01*x11861))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x11862))+(((-1.0)*r11*x11861))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11863=IKcos(j0);
IkReal x11864=IKsin(j0);
IkReal x11865=((1.0)*sj4);
IkReal x11866=(cj5*r12);
IkReal x11867=((0.37429)*sj5);
IkReal x11868=(r10*sj6);
IkReal x11869=(r01*sj6);
IkReal x11870=((0.36442)*cj1);
IkReal x11871=(cj6*r01);
IkReal x11872=((0.01)*cj5);
IkReal x11873=(r12*sj5);
IkReal x11874=(cj6*r10);
IkReal x11875=(r00*sj6);
IkReal x11876=((1.0)*sj5);
IkReal x11877=(r02*sj5);
IkReal x11878=(cj6*r11);
IkReal x11879=(cj5*r02);
IkReal x11880=(cj4*cj5);
IkReal x11881=(cj6*r00);
IkReal x11882=((1.0)*cj4);
IkReal x11883=(r11*sj6);
IkReal x11884=((0.069)*x11864);
IkReal x11885=((0.069)*x11863);
IkReal x11886=(cj5*x11878);
IkReal x11887=((1.0)*x11863);
IkReal x11888=((1.0)*x11864);
evalcond[0]=((((-1.0)*x11871*x11876))+(((-1.0)*x11875*x11876))+x11864+x11879);
evalcond[1]=((((-1.0)*x11868*x11876))+(((-1.0)*x11876*x11878))+x11866+(((-1.0)*x11887)));
evalcond[2]=(((x11875*x11880))+((cj4*x11877))+((sj4*x11881))+(((-1.0)*x11865*x11869))+((x11871*x11880))+(((-1.0)*cj1*x11887)));
evalcond[3]=((((-1.0)*x11865*x11883))+((cj4*x11873))+((sj4*x11874))+((x11878*x11880))+(((-1.0)*cj1*x11888))+((x11868*x11880)));
evalcond[4]=((((-1.0)*x11865*x11886))+((cj4*x11874))+(((-1.0)*x11882*x11883))+(((-1.0)*x11865*x11873))+(((-1.0)*cj5*x11865*x11868))+(((-1.0)*sj1*x11888)));
evalcond[5]=((((-1.0)*x11865*x11877))+((cj4*x11881))+(((-1.0)*cj5*x11865*x11875))+(((-1.0)*cj5*x11865*x11871))+(((-1.0)*sj1*x11887))+(((-1.0)*x11869*x11882)));
evalcond[6]=(((x11872*x11875))+((x11871*x11872))+(((-1.0)*x11867*x11875))+(((-1.0)*x11867*x11871))+((x11863*x11870))+(((0.01)*x11877))+(((-1.0)*px))+(((0.37429)*x11879))+x11885+x11884);
evalcond[7]=(((x11872*x11878))+((x11864*x11870))+(((-1.0)*x11867*x11878))+((x11868*x11872))+(((-1.0)*x11867*x11868))+(((0.01)*x11873))+(((-1.0)*py))+(((0.37429)*x11866))+x11884+(((-1.0)*x11885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11889=(cj6*sj4);
IkReal x11890=(cj5*r21);
IkReal x11891=(r22*sj5);
IkReal x11892=(cj4*cj6);
IkReal x11893=((1.0)*r21);
IkReal x11894=(cj6*sj5);
IkReal x11895=((1.0)*sj4);
IkReal x11896=(cj5*r22);
IkReal x11897=(cj5*r20*sj6);
IkReal x11898=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x11895*x11897))+sj2+(((-1.0)*cj4*sj6*x11893))+(((-1.0)*x11891*x11895))+((r20*x11892))+(((-1.0)*x11889*x11890)));
evalcond[2]=((((0.01)*x11897))+(((0.01)*x11891))+(((0.37429)*x11896))+(((-0.069)*cj2))+(((0.01)*cj6*x11890))+(((-1.0)*pz))+(((-0.37429)*x11898))+(((-0.37429)*r21*x11894)));
evalcond[3]=((((-1.0)*sj4*sj6*x11893))+((cj4*x11891))+((cj4*x11897))+((x11890*x11892))+((r20*x11889)));
evalcond[4]=((((-1.0)*x11898))+(((-1.0)*x11893*x11894))+x11896+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x11899=(sj5*sj6);
IkReal x11900=(cj6*sj5);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*r01*x11900))+(((-1.0)*r00*x11899))+((cj5*r02)))))+(IKabs(((((-1.0)*cj5*r12))+((r10*x11899))+((r11*x11900))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11901=(cj6*r20);
IkReal x11902=(r22*sj5);
IkReal x11903=(cj4*cj6);
IkReal x11904=(cj5*r21);
IkReal x11905=((1.0)*r21);
IkReal x11906=(cj6*sj5);
IkReal x11907=(cj4*sj6);
IkReal x11908=(cj5*r22);
IkReal x11909=((1.0)*sj6);
IkReal x11910=(r20*sj5);
IkReal x11911=(cj5*sj4);
IkReal x11912=((1.0)*sj4*sj5);
IkReal x11913=(cj5*r20*sj6);
IkReal x11914=((1.0)*cj6*x11911);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r20*x11909*x11911))+(((-1.0)*x11905*x11907))+(((-1.0)*cj6*sj4*x11904))+((cj4*x11901))+(((-1.0)*sj4*x11902)));
evalcond[2]=((((0.01)*cj6*x11904))+(((-0.37429)*sj6*x11910))+(((0.01)*x11902))+(((-1.0)*pz))+(((0.01)*x11913))+(((0.37429)*x11908))+(((-0.37429)*r21*x11906)));
evalcond[3]=((((-1.0)*r11*x11907))+((r10*x11903))+(((-1.0)*r12*x11912))+(((-1.0)*r11*x11914))+(((-1.0)*r10*x11909*x11911)));
evalcond[4]=((((-1.0)*r01*x11907))+((r00*x11903))+(((-1.0)*r00*x11909*x11911))+(((-1.0)*r02*x11912))+(((-1.0)*r01*x11914)));
evalcond[5]=(((cj4*x11902))+(((-1.0)*sj4*sj6*x11905))+((x11903*x11904))+((cj5*r20*x11907))+((sj4*x11901)));
evalcond[6]=(x11908+(((-1.0)*x11905*x11906))+(((-1.0)*x11909*x11910)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11915=(sj5*sj6);
IkReal x11916=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x11915))+(((-1.0)*r01*x11916))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x11916))+((r10*x11915)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x11915))+(((-1.0)*r01*x11916))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x11916))+((r10*x11915))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x11915))+(((-1.0)*r01*x11916))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x11916))+((r10*x11915))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11917=IKcos(j0);
IkReal x11918=IKsin(j0);
IkReal x11919=((0.01)*cj5);
IkReal x11920=(cj6*r11);
IkReal x11921=(cj5*r12);
IkReal x11922=(r10*sj6);
IkReal x11923=((0.37429)*sj5);
IkReal x11924=((1.0)*r01);
IkReal x11925=(sj4*sj6);
IkReal x11926=(cj6*sj4);
IkReal x11927=(r00*sj6);
IkReal x11928=((1.0)*sj5);
IkReal x11929=(cj4*sj5);
IkReal x11930=(cj6*r01);
IkReal x11931=(cj5*r02);
IkReal x11932=(cj4*cj5);
IkReal x11933=((0.01)*sj5);
IkReal x11934=((1.0)*x11918);
evalcond[0]=(x11921+x11917+(((-1.0)*x11920*x11928))+(((-1.0)*x11922*x11928)));
evalcond[1]=(x11931+(((-1.0)*cj6*sj5*x11924))+(((-1.0)*x11934))+(((-1.0)*x11927*x11928)));
evalcond[2]=(((r02*x11929))+((x11930*x11932))+(((-1.0)*x11917))+(((-1.0)*x11924*x11925))+((x11927*x11932))+((r00*x11926)));
evalcond[3]=(((x11922*x11932))+((r10*x11926))+(((-1.0)*x11934))+((r12*x11929))+(((-1.0)*r11*x11925))+((x11920*x11932)));
evalcond[4]=(((r02*x11933))+(((0.37429)*x11931))+(((-1.0)*px))+(((-0.069)*x11918))+(((0.43342)*x11917))+((x11919*x11930))+(((-1.0)*x11923*x11927))+((x11919*x11927))+(((-1.0)*x11923*x11930)));
evalcond[5]=((((0.37429)*x11921))+(((-1.0)*py))+(((0.43342)*x11918))+((r12*x11933))+(((-1.0)*x11920*x11923))+(((-1.0)*x11922*x11923))+((x11919*x11922))+((x11919*x11920))+(((0.069)*x11917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11935=(cj6*r20);
IkReal x11936=(r22*sj5);
IkReal x11937=(cj4*cj6);
IkReal x11938=(cj5*r21);
IkReal x11939=((1.0)*r21);
IkReal x11940=(cj6*sj5);
IkReal x11941=(cj4*sj6);
IkReal x11942=(cj5*r22);
IkReal x11943=((1.0)*sj6);
IkReal x11944=(r20*sj5);
IkReal x11945=(cj5*sj4);
IkReal x11946=((1.0)*sj4*sj5);
IkReal x11947=(cj5*r20*sj6);
IkReal x11948=((1.0)*cj6*x11945);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((cj4*x11935))+(((-1.0)*r20*x11943*x11945))+(((-1.0)*sj4*x11936))+(((-1.0)*cj6*sj4*x11938))+(((-1.0)*x11939*x11941)));
evalcond[2]=((((-0.37429)*sj6*x11944))+(((0.37429)*x11942))+(((0.01)*x11947))+(((-1.0)*pz))+(((0.01)*cj6*x11938))+(((-0.37429)*r21*x11940))+(((0.01)*x11936)));
evalcond[3]=(((r10*x11937))+(((-1.0)*r11*x11941))+(((-1.0)*r12*x11946))+(((-1.0)*r11*x11948))+(((-1.0)*r10*x11943*x11945)));
evalcond[4]=((((-1.0)*r02*x11946))+(((-1.0)*r01*x11948))+(((-1.0)*r01*x11941))+((r00*x11937))+(((-1.0)*r00*x11943*x11945)));
evalcond[5]=(((cj4*x11936))+(((-1.0)*sj4*sj6*x11939))+((sj4*x11935))+((x11937*x11938))+((cj5*r20*x11941)));
evalcond[6]=(x11942+(((-1.0)*x11943*x11944))+(((-1.0)*x11939*x11940)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11949=(cj6*sj5);
IkReal x11950=(sj5*sj6);
if( IKabs((((r00*x11950))+((r01*x11949))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x11949))+(((-1.0)*r10*x11950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x11950))+((r01*x11949))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x11949))+(((-1.0)*r10*x11950))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x11950))+((r01*x11949))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x11949))+(((-1.0)*r10*x11950))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11951=IKsin(j0);
IkReal x11952=IKcos(j0);
IkReal x11953=((0.01)*cj5);
IkReal x11954=(cj6*r11);
IkReal x11955=(cj5*r12);
IkReal x11956=(r10*sj6);
IkReal x11957=((0.37429)*sj5);
IkReal x11958=((1.0)*r01);
IkReal x11959=(sj4*sj6);
IkReal x11960=(cj6*sj4);
IkReal x11961=(r00*sj6);
IkReal x11962=((1.0)*sj5);
IkReal x11963=(cj4*sj5);
IkReal x11964=(cj6*r01);
IkReal x11965=(cj5*r02);
IkReal x11966=(cj4*cj5);
IkReal x11967=((0.01)*sj5);
IkReal x11968=((1.0)*x11952);
evalcond[0]=(x11965+x11951+(((-1.0)*x11961*x11962))+(((-1.0)*cj6*sj5*x11958)));
evalcond[1]=(x11955+(((-1.0)*x11968))+(((-1.0)*x11954*x11962))+(((-1.0)*x11956*x11962)));
evalcond[2]=(((x11961*x11966))+((r00*x11960))+((r02*x11963))+(((-1.0)*x11968))+(((-1.0)*x11958*x11959))+((x11964*x11966)));
evalcond[3]=(((r12*x11963))+(((-1.0)*x11951))+((x11954*x11966))+((r10*x11960))+(((-1.0)*r11*x11959))+((x11956*x11966)));
evalcond[4]=((((0.43342)*x11952))+(((-1.0)*x11957*x11964))+(((-1.0)*x11957*x11961))+((x11953*x11961))+((x11953*x11964))+((r02*x11967))+(((0.37429)*x11965))+(((-1.0)*px))+(((0.069)*x11951)));
evalcond[5]=((((0.43342)*x11951))+(((-0.069)*x11952))+(((0.37429)*x11955))+((r12*x11967))+(((-1.0)*py))+((x11953*x11956))+((x11953*x11954))+(((-1.0)*x11956*x11957))+(((-1.0)*x11954*x11957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11969=((1.0)*cj6);
IkReal x11970=(cj5*r21);
IkReal x11971=(cj6*r20);
IkReal x11972=(r22*sj5);
IkReal x11973=(r21*sj5);
IkReal x11974=((1.0)*sj6);
IkReal x11975=((1.0)*sj4);
IkReal x11976=(r20*sj5);
IkReal x11977=(cj5*r22);
IkReal x11978=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*r21*x11974))+(((-1.0)*sj4*x11969*x11970))+(((-1.0)*cj5*r20*sj4*x11974))+(((-1.0)*x11972*x11975))+((cj4*x11971)));
evalcond[2]=((-0.069)+(((0.01)*x11972))+(((0.01)*x11978))+(((0.37429)*x11977))+(((0.01)*cj6*x11970))+(((-1.0)*pz))+(((-0.37429)*cj6*x11973))+(((-0.37429)*sj6*x11976)));
evalcond[3]=(((cj4*cj6*x11970))+((sj4*x11971))+(((-1.0)*r21*sj4*x11974))+((cj4*x11972))+((cj4*x11978)));
evalcond[4]=((-1.0)+x11977+(((-1.0)*x11974*x11976))+(((-1.0)*x11969*x11973)));
evalcond[5]=(((cj5*r12))+(((-1.0)*r11*sj5*x11969))+(((-1.0)*r10*sj5*x11974)));
evalcond[6]=((((-1.0)*r00*sj5*x11974))+(((-1.0)*r01*sj5*x11969))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11979=(cj6*sj4);
IkReal x11980=(cj4*sj5);
IkReal x11981=(cj4*cj5*cj6);
IkReal x11982=((1.0)*sj4*sj6);
IkReal x11983=(cj4*cj5*sj6);
if( IKabs((((r10*x11983))+(((-1.0)*r11*x11982))+((r10*x11979))+((r12*x11980))+((r11*x11981)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x11979))+((r02*x11980))+(((-1.0)*r01*x11982))+((r00*x11983))+((r01*x11981)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x11983))+(((-1.0)*r11*x11982))+((r10*x11979))+((r12*x11980))+((r11*x11981))))+IKsqr((((r00*x11979))+((r02*x11980))+(((-1.0)*r01*x11982))+((r00*x11983))+((r01*x11981))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x11983))+(((-1.0)*r11*x11982))+((r10*x11979))+((r12*x11980))+((r11*x11981))), (((r00*x11979))+((r02*x11980))+(((-1.0)*r01*x11982))+((r00*x11983))+((r01*x11981))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11984=IKcos(j0);
IkReal x11985=IKsin(j0);
IkReal x11986=((1.0)*sj4);
IkReal x11987=(cj6*sj4);
IkReal x11988=(r10*sj6);
IkReal x11989=((0.37429)*sj5);
IkReal x11990=(r01*sj6);
IkReal x11991=((0.37429)*cj5);
IkReal x11992=((0.01)*cj5);
IkReal x11993=(r12*sj5);
IkReal x11994=(r00*sj6);
IkReal x11995=(r02*sj5);
IkReal x11996=(cj4*cj6);
IkReal x11997=(cj4*cj5);
IkReal x11998=((1.0)*cj4);
IkReal x11999=(r11*sj6);
IkReal x12000=((1.0)*x11985);
IkReal x12001=(cj5*cj6*r11);
IkReal x12002=(cj5*cj6*r01);
evalcond[0]=(((cj4*x11995))+((x11994*x11997))+(((-1.0)*x11984))+((r00*x11987))+(((-1.0)*x11986*x11990))+((cj5*r01*x11996)));
evalcond[1]=(((r10*x11987))+((cj5*r11*x11996))+((x11988*x11997))+((cj4*x11993))+(((-1.0)*x12000))+(((-1.0)*x11986*x11999)));
evalcond[2]=(x11984+(((-1.0)*x11986*x12001))+(((-1.0)*x11998*x11999))+(((-1.0)*cj5*x11986*x11988))+(((-1.0)*x11986*x11993))+((r10*x11996)));
evalcond[3]=((((-1.0)*cj5*x11986*x11994))+(((-1.0)*x11990*x11998))+(((-1.0)*x11986*x12002))+(((-1.0)*x12000))+((r00*x11996))+(((-1.0)*x11986*x11995)));
evalcond[4]=(((x11992*x11994))+(((0.43342)*x11984))+(((-1.0)*x11989*x11994))+((cj6*r01*x11992))+(((-1.0)*px))+(((0.01)*x11995))+(((-1.0)*cj6*r01*x11989))+((r02*x11991)));
evalcond[5]=((((0.43342)*x11985))+((x11988*x11992))+(((-1.0)*cj6*r11*x11989))+(((-1.0)*x11988*x11989))+(((-1.0)*py))+((cj6*r11*x11992))+(((0.01)*x11993))+((r12*x11991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12003=((1.0)*cj6);
IkReal x12004=(cj5*r21);
IkReal x12005=(cj6*r20);
IkReal x12006=(r22*sj5);
IkReal x12007=(r21*sj5);
IkReal x12008=((1.0)*sj6);
IkReal x12009=((1.0)*sj4);
IkReal x12010=(r20*sj5);
IkReal x12011=(cj5*r22);
IkReal x12012=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x12006*x12009))+(((-1.0)*sj4*x12003*x12004))+((cj4*x12005))+(((-1.0)*cj5*r20*sj4*x12008))+(((-1.0)*cj4*r21*x12008)));
evalcond[2]=((0.069)+(((0.01)*cj6*x12004))+(((0.01)*x12012))+(((-1.0)*pz))+(((-0.37429)*cj6*x12007))+(((-0.37429)*sj6*x12010))+(((0.01)*x12006))+(((0.37429)*x12011)));
evalcond[3]=(((cj4*cj6*x12004))+((cj4*x12006))+((sj4*x12005))+(((-1.0)*r21*sj4*x12008))+((cj4*x12012)));
evalcond[4]=((1.0)+(((-1.0)*x12008*x12010))+x12011+(((-1.0)*x12003*x12007)));
evalcond[5]=(((cj5*r12))+(((-1.0)*r11*sj5*x12003))+(((-1.0)*r10*sj5*x12008)));
evalcond[6]=((((-1.0)*r00*sj5*x12008))+(((-1.0)*r01*sj5*x12003))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12013=(cj6*sj4);
IkReal x12014=(cj4*sj5);
IkReal x12015=(cj4*cj5*cj6);
IkReal x12016=((1.0)*sj4*sj6);
IkReal x12017=(cj4*cj5*sj6);
if( IKabs((((r12*x12014))+((r10*x12013))+((r10*x12017))+((r11*x12015))+(((-1.0)*r11*x12016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x12016))+((r02*x12014))+((r00*x12013))+((r00*x12017))+((r01*x12015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x12014))+((r10*x12013))+((r10*x12017))+((r11*x12015))+(((-1.0)*r11*x12016))))+IKsqr(((((-1.0)*r01*x12016))+((r02*x12014))+((r00*x12013))+((r00*x12017))+((r01*x12015))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r12*x12014))+((r10*x12013))+((r10*x12017))+((r11*x12015))+(((-1.0)*r11*x12016))), ((((-1.0)*r01*x12016))+((r02*x12014))+((r00*x12013))+((r00*x12017))+((r01*x12015))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12018=IKsin(j0);
IkReal x12019=IKcos(j0);
IkReal x12020=((1.0)*sj4);
IkReal x12021=(cj6*sj4);
IkReal x12022=(r10*sj6);
IkReal x12023=((0.37429)*sj5);
IkReal x12024=(r01*sj6);
IkReal x12025=((0.37429)*cj5);
IkReal x12026=((0.01)*cj5);
IkReal x12027=(r12*sj5);
IkReal x12028=(r00*sj6);
IkReal x12029=(r02*sj5);
IkReal x12030=(cj4*cj6);
IkReal x12031=(cj4*cj5);
IkReal x12032=((1.0)*cj4);
IkReal x12033=(r11*sj6);
IkReal x12034=((1.0)*x12019);
IkReal x12035=(cj5*cj6*r11);
IkReal x12036=(cj5*cj6*r01);
evalcond[0]=(((cj4*x12029))+(((-1.0)*x12034))+((r00*x12021))+(((-1.0)*x12020*x12024))+((x12028*x12031))+((cj5*r01*x12030)));
evalcond[1]=(((cj5*r11*x12030))+((cj4*x12027))+(((-1.0)*x12020*x12033))+((x12022*x12031))+(((-1.0)*x12018))+((r10*x12021)));
evalcond[2]=(((r00*x12030))+(((-1.0)*x12024*x12032))+(((-1.0)*x12020*x12036))+(((-1.0)*x12020*x12029))+x12018+(((-1.0)*cj5*x12020*x12028)));
evalcond[3]=((((-1.0)*x12034))+(((-1.0)*x12032*x12033))+(((-1.0)*x12020*x12035))+(((-1.0)*x12020*x12027))+((r10*x12030))+(((-1.0)*cj5*x12020*x12022)));
evalcond[4]=(((x12026*x12028))+(((0.43342)*x12019))+(((-1.0)*px))+(((-1.0)*x12023*x12028))+((r02*x12025))+(((-1.0)*cj6*r01*x12023))+(((0.01)*x12029))+((cj6*r01*x12026)));
evalcond[5]=((((-1.0)*cj6*r11*x12023))+((x12022*x12026))+(((0.43342)*x12018))+(((-1.0)*py))+((cj6*r11*x12026))+((r12*x12025))+(((0.01)*x12027))+(((-1.0)*x12022*x12023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12037=((1.0)*sj6);
IkReal x12038=(cj5*sj4);
CheckValue<IkReal> x12039=IKPowWithIntegerCheck(cj2,-1);
if(!x12039.valid){
continue;
}
CheckValue<IkReal> x12040=IKPowWithIntegerCheck(sj2,-1);
if(!x12040.valid){
continue;
}
if( IKabs(((x12039.value)*(((((-1.0)*cj6*r01*x12038))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12037))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*r00*x12037*x12038)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12040.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12039.value)*(((((-1.0)*cj6*r01*x12038))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12037))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*r00*x12037*x12038))))))+IKsqr(((x12040.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12039.value)*(((((-1.0)*cj6*r01*x12038))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12037))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*r00*x12037*x12038))))), ((x12040.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12041=IKcos(j0);
IkReal x12042=IKsin(j0);
IkReal x12043=((1.0)*sj4);
IkReal x12044=(cj5*r12);
IkReal x12045=((0.37429)*sj5);
IkReal x12046=(r10*sj6);
IkReal x12047=(r01*sj6);
IkReal x12048=((0.069)*sj2);
IkReal x12049=(cj6*r01);
IkReal x12050=((0.01)*cj5);
IkReal x12051=(r12*sj5);
IkReal x12052=(cj6*r10);
IkReal x12053=(r00*sj6);
IkReal x12054=((1.0)*sj5);
IkReal x12055=(r02*sj5);
IkReal x12056=(cj6*r11);
IkReal x12057=(cj5*r02);
IkReal x12058=(cj4*cj5);
IkReal x12059=(cj6*r00);
IkReal x12060=((1.0)*cj4);
IkReal x12061=(r11*sj6);
IkReal x12062=(cj5*x12056);
IkReal x12063=((1.0)*x12042);
evalcond[0]=((((-1.0)*x12046*x12054))+((sj2*x12041))+(((-1.0)*x12054*x12056))+x12044);
evalcond[1]=((((-1.0)*x12049*x12054))+(((-1.0)*sj2*x12063))+x12057+(((-1.0)*x12053*x12054)));
evalcond[2]=(((cj4*x12055))+((x12053*x12058))+((sj4*x12059))+(((-1.0)*x12041))+(((-1.0)*x12043*x12047))+((x12049*x12058)));
evalcond[3]=(((cj4*x12051))+((x12056*x12058))+((sj4*x12052))+(((-1.0)*x12043*x12061))+((x12046*x12058))+(((-1.0)*x12063)));
evalcond[4]=(((cj4*x12052))+(((-1.0)*x12043*x12062))+(((-1.0)*x12043*x12051))+(((-1.0)*cj5*x12043*x12046))+(((-1.0)*x12060*x12061))+((cj2*x12041)));
evalcond[5]=(((cj4*x12059))+(((-1.0)*x12047*x12060))+(((-1.0)*cj2*x12063))+(((-1.0)*x12043*x12055))+(((-1.0)*cj5*x12043*x12049))+(((-1.0)*cj5*x12043*x12053)));
evalcond[6]=((((-1.0)*x12045*x12053))+(((0.37429)*x12057))+(((0.43342)*x12041))+(((-1.0)*x12045*x12049))+((x12050*x12053))+(((-1.0)*px))+(((0.01)*x12055))+(((-1.0)*x12042*x12048))+((x12049*x12050)));
evalcond[7]=((((-1.0)*x12045*x12056))+(((0.43342)*x12042))+(((-1.0)*x12045*x12046))+((x12050*x12056))+(((-1.0)*py))+(((0.37429)*x12044))+((x12046*x12050))+((x12041*x12048))+(((0.01)*x12051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12064=(cj6*r11);
IkReal x12065=(cj4*cj5);
IkReal x12066=(r10*sj6);
CheckValue<IkReal> x12067=IKPowWithIntegerCheck(sj2,-1);
if(!x12067.valid){
continue;
}
if( IKabs((((x12064*x12065))+((cj6*r10*sj4))+((x12065*x12066))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12067.value)*(((((-1.0)*cj5*r12))+((sj5*x12066))+((sj5*x12064)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x12064*x12065))+((cj6*r10*sj4))+((x12065*x12066))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))+IKsqr(((x12067.value)*(((((-1.0)*cj5*r12))+((sj5*x12066))+((sj5*x12064))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x12064*x12065))+((cj6*r10*sj4))+((x12065*x12066))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))), ((x12067.value)*(((((-1.0)*cj5*r12))+((sj5*x12066))+((sj5*x12064))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12068=IKcos(j0);
IkReal x12069=IKsin(j0);
IkReal x12070=((1.0)*sj4);
IkReal x12071=(cj5*r12);
IkReal x12072=((0.37429)*sj5);
IkReal x12073=(r10*sj6);
IkReal x12074=(r01*sj6);
IkReal x12075=((0.069)*sj2);
IkReal x12076=(cj6*r01);
IkReal x12077=((0.01)*cj5);
IkReal x12078=(r12*sj5);
IkReal x12079=(cj6*r10);
IkReal x12080=(r00*sj6);
IkReal x12081=((1.0)*sj5);
IkReal x12082=(r02*sj5);
IkReal x12083=(cj6*r11);
IkReal x12084=(cj5*r02);
IkReal x12085=(cj4*cj5);
IkReal x12086=(cj6*r00);
IkReal x12087=((1.0)*cj4);
IkReal x12088=(r11*sj6);
IkReal x12089=(cj5*x12083);
IkReal x12090=((1.0)*x12069);
evalcond[0]=(((sj2*x12068))+(((-1.0)*x12081*x12083))+(((-1.0)*x12073*x12081))+x12071);
evalcond[1]=((((-1.0)*x12076*x12081))+(((-1.0)*x12080*x12081))+(((-1.0)*sj2*x12090))+x12084);
evalcond[2]=((((-1.0)*x12068))+((sj4*x12086))+((cj4*x12082))+((x12080*x12085))+((x12076*x12085))+(((-1.0)*x12070*x12074)));
evalcond[3]=(((sj4*x12079))+((x12083*x12085))+(((-1.0)*x12070*x12088))+((x12073*x12085))+((cj4*x12078))+(((-1.0)*x12090)));
evalcond[4]=((((-1.0)*cj5*x12070*x12073))+(((-1.0)*x12070*x12089))+(((-1.0)*x12087*x12088))+((cj4*x12079))+((cj2*x12068))+(((-1.0)*x12070*x12078)));
evalcond[5]=((((-1.0)*cj5*x12070*x12076))+(((-1.0)*x12074*x12087))+(((-1.0)*x12070*x12082))+((cj4*x12086))+(((-1.0)*cj2*x12090))+(((-1.0)*cj5*x12070*x12080)));
evalcond[6]=((((0.01)*x12082))+((x12076*x12077))+(((-1.0)*x12072*x12076))+(((-1.0)*x12069*x12075))+(((0.43342)*x12068))+(((-1.0)*x12072*x12080))+(((-1.0)*px))+(((0.37429)*x12084))+((x12077*x12080)));
evalcond[7]=((((-1.0)*x12072*x12073))+(((0.37429)*x12071))+(((0.43342)*x12069))+((x12068*x12075))+(((-1.0)*x12072*x12083))+(((-1.0)*py))+((x12073*x12077))+((x12077*x12083))+(((0.01)*x12078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12091=(sj5*sj6);
IkReal x12092=(cj6*sj5);
CheckValue<IkReal> x12093=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x12093.valid){
continue;
}
CheckValue<IkReal> x12094 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12092))+(((-1.0)*r00*x12091))+((cj5*r02)))),(((r11*x12092))+(((-1.0)*cj5*r12))+((r10*x12091))),IKFAST_ATAN2_MAGTHRESH);
if(!x12094.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12093.value)))+(x12094.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12095=IKcos(j0);
IkReal x12096=IKsin(j0);
IkReal x12097=((1.0)*sj4);
IkReal x12098=(cj5*r12);
IkReal x12099=((0.37429)*sj5);
IkReal x12100=(r10*sj6);
IkReal x12101=(r01*sj6);
IkReal x12102=((0.069)*sj2);
IkReal x12103=(cj6*r01);
IkReal x12104=((0.01)*cj5);
IkReal x12105=(r12*sj5);
IkReal x12106=(cj6*r10);
IkReal x12107=(r00*sj6);
IkReal x12108=((1.0)*sj5);
IkReal x12109=(r02*sj5);
IkReal x12110=(cj6*r11);
IkReal x12111=(cj5*r02);
IkReal x12112=(cj4*cj5);
IkReal x12113=(cj6*r00);
IkReal x12114=((1.0)*cj4);
IkReal x12115=(r11*sj6);
IkReal x12116=(cj5*x12110);
IkReal x12117=((1.0)*x12096);
evalcond[0]=((((-1.0)*x12108*x12110))+(((-1.0)*x12100*x12108))+((sj2*x12095))+x12098);
evalcond[1]=((((-1.0)*x12103*x12108))+x12111+(((-1.0)*sj2*x12117))+(((-1.0)*x12107*x12108)));
evalcond[2]=((((-1.0)*x12095))+((sj4*x12113))+((x12107*x12112))+(((-1.0)*x12097*x12101))+((x12103*x12112))+((cj4*x12109)));
evalcond[3]=(((sj4*x12106))+(((-1.0)*x12117))+((x12100*x12112))+(((-1.0)*x12097*x12115))+((cj4*x12105))+((x12110*x12112)));
evalcond[4]=((((-1.0)*x12114*x12115))+(((-1.0)*x12097*x12105))+(((-1.0)*x12097*x12116))+((cj4*x12106))+((cj2*x12095))+(((-1.0)*cj5*x12097*x12100)));
evalcond[5]=((((-1.0)*x12101*x12114))+(((-1.0)*x12097*x12109))+((cj4*x12113))+(((-1.0)*cj2*x12117))+(((-1.0)*cj5*x12097*x12107))+(((-1.0)*cj5*x12097*x12103)));
evalcond[6]=((((0.37429)*x12111))+(((0.43342)*x12095))+(((-1.0)*x12099*x12103))+(((-1.0)*x12099*x12107))+(((-1.0)*px))+((x12103*x12104))+(((-1.0)*x12096*x12102))+((x12104*x12107))+(((0.01)*x12109)));
evalcond[7]=((((0.37429)*x12098))+((x12095*x12102))+(((-1.0)*x12099*x12110))+(((0.43342)*x12096))+(((-1.0)*x12099*x12100))+((x12100*x12104))+(((-1.0)*py))+((x12104*x12110))+(((0.01)*x12105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12118=(cj6*sj4);
IkReal x12119=(cj5*r21);
IkReal x12120=(r22*sj5);
IkReal x12121=(cj4*cj6);
IkReal x12122=((1.0)*r21);
IkReal x12123=(cj6*sj5);
IkReal x12124=((1.0)*sj4);
IkReal x12125=(cj5*r22);
IkReal x12126=(cj5*r20*sj6);
IkReal x12127=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*cj4*sj6*x12122))+(((-1.0)*x12118*x12119))+(((-1.0)*x12124*x12126))+(((-1.0)*x12120*x12124))+((r20*x12121)));
evalcond[2]=((((0.37429)*x12125))+(((-0.37429)*x12127))+(((0.069)*cj2))+(((0.01)*x12126))+(((0.01)*x12120))+(((-1.0)*pz))+(((0.01)*cj6*x12119))+(((-0.37429)*r21*x12123)));
evalcond[3]=(((x12119*x12121))+((r20*x12118))+(((-1.0)*sj4*sj6*x12122))+((cj4*x12126))+((cj4*x12120)));
evalcond[4]=(cj2+x12125+(((-1.0)*x12127))+(((-1.0)*x12122*x12123)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x12128=(sj5*sj6);
IkReal x12129=(cj6*sj5);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*r00*x12128))+(((-1.0)*r01*x12129))+((cj5*r02)))))+(IKabs(((((-1.0)*cj5*r12))+((r10*x12128))+((r11*x12129))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x12130=(cj6*r20);
IkReal x12131=(r22*sj5);
IkReal x12132=(cj4*cj6);
IkReal x12133=(cj5*r21);
IkReal x12134=((1.0)*r21);
IkReal x12135=(cj6*sj5);
IkReal x12136=(cj4*sj6);
IkReal x12137=(cj5*r22);
IkReal x12138=((1.0)*sj6);
IkReal x12139=(r20*sj5);
IkReal x12140=(cj5*sj4);
IkReal x12141=((1.0)*sj4*sj5);
IkReal x12142=(cj5*r20*sj6);
IkReal x12143=((1.0)*cj6*x12140);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*cj6*sj4*x12133))+(((-1.0)*sj4*x12131))+(((-1.0)*x12134*x12136))+(((-1.0)*r20*x12138*x12140))+((cj4*x12130)));
evalcond[2]=((((0.37429)*x12137))+(((0.01)*x12142))+(((0.01)*x12131))+(((-0.37429)*sj6*x12139))+(((-1.0)*pz))+(((-0.37429)*r21*x12135))+(((0.01)*cj6*x12133)));
evalcond[3]=((((-1.0)*r10*x12138*x12140))+(((-1.0)*r12*x12141))+(((-1.0)*r11*x12143))+(((-1.0)*r11*x12136))+((r10*x12132)));
evalcond[4]=((((-1.0)*r02*x12141))+((r00*x12132))+(((-1.0)*r01*x12143))+(((-1.0)*r00*x12138*x12140))+(((-1.0)*r01*x12136)));
evalcond[5]=(((cj5*r20*x12136))+(((-1.0)*sj4*sj6*x12134))+((sj4*x12130))+((x12132*x12133))+((cj4*x12131)));
evalcond[6]=((((-1.0)*x12138*x12139))+x12137+(((-1.0)*x12134*x12135)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12144=(sj5*sj6);
IkReal x12145=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x12144))+(((-1.0)*r01*x12145))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x12144))+((r11*x12145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x12144))+(((-1.0)*r01*x12145))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x12144))+((r11*x12145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x12144))+(((-1.0)*r01*x12145))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x12144))+((r11*x12145))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12146=IKcos(j0);
IkReal x12147=IKsin(j0);
IkReal x12148=((0.01)*cj5);
IkReal x12149=(cj6*r11);
IkReal x12150=(cj5*r12);
IkReal x12151=(r10*sj6);
IkReal x12152=((0.37429)*sj5);
IkReal x12153=((1.0)*r01);
IkReal x12154=(sj4*sj6);
IkReal x12155=(cj6*sj4);
IkReal x12156=(r00*sj6);
IkReal x12157=((1.0)*sj5);
IkReal x12158=(cj4*sj5);
IkReal x12159=(cj6*r01);
IkReal x12160=(cj5*r02);
IkReal x12161=(cj4*cj5);
IkReal x12162=((0.01)*sj5);
evalcond[0]=(x12146+x12150+(((-1.0)*x12151*x12157))+(((-1.0)*x12149*x12157)));
evalcond[1]=((((-1.0)*x12156*x12157))+(((-1.0)*x12147))+x12160+(((-1.0)*cj6*sj5*x12153)));
evalcond[2]=(((x12156*x12161))+((r02*x12158))+((x12159*x12161))+x12146+(((-1.0)*x12153*x12154))+((r00*x12155)));
evalcond[3]=(((r10*x12155))+((r12*x12158))+x12147+(((-1.0)*r11*x12154))+((x12149*x12161))+((x12151*x12161)));
evalcond[4]=(((r02*x12162))+(((-1.0)*x12152*x12159))+(((-1.0)*x12152*x12156))+(((0.37429)*x12160))+(((-1.0)*px))+((x12148*x12156))+((x12148*x12159))+(((-0.29542)*x12146))+(((-0.069)*x12147)));
evalcond[5]=((((-1.0)*py))+((x12148*x12149))+((x12148*x12151))+(((0.37429)*x12150))+(((-0.29542)*x12147))+(((-1.0)*x12151*x12152))+(((-1.0)*x12149*x12152))+(((0.069)*x12146))+((r12*x12162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12163=(cj6*r20);
IkReal x12164=(r22*sj5);
IkReal x12165=(cj4*cj6);
IkReal x12166=(cj5*r21);
IkReal x12167=((1.0)*r21);
IkReal x12168=(cj6*sj5);
IkReal x12169=(cj4*sj6);
IkReal x12170=(cj5*r22);
IkReal x12171=((1.0)*sj6);
IkReal x12172=(r20*sj5);
IkReal x12173=(cj5*sj4);
IkReal x12174=((1.0)*sj4*sj5);
IkReal x12175=(cj5*r20*sj6);
IkReal x12176=((1.0)*cj6*x12173);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj4*x12164))+(((-1.0)*cj6*sj4*x12166))+((cj4*x12163))+(((-1.0)*x12167*x12169))+(((-1.0)*r20*x12171*x12173)));
evalcond[2]=((((0.37429)*x12170))+(((-0.37429)*sj6*x12172))+(((-0.37429)*r21*x12168))+(((0.01)*cj6*x12166))+(((-1.0)*pz))+(((0.01)*x12164))+(((0.01)*x12175)));
evalcond[3]=(((r10*x12165))+(((-1.0)*r10*x12171*x12173))+(((-1.0)*r11*x12169))+(((-1.0)*r11*x12176))+(((-1.0)*r12*x12174)));
evalcond[4]=((((-1.0)*r01*x12169))+(((-1.0)*r01*x12176))+((r00*x12165))+(((-1.0)*r00*x12171*x12173))+(((-1.0)*r02*x12174)));
evalcond[5]=(((sj4*x12163))+((cj5*r20*x12169))+((x12165*x12166))+((cj4*x12164))+(((-1.0)*sj4*sj6*x12167)));
evalcond[6]=((((-1.0)*x12171*x12172))+x12170+(((-1.0)*x12167*x12168)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12177=(cj6*sj5);
IkReal x12178=(sj5*sj6);
if( IKabs((((r01*x12177))+((r00*x12178))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x12178))+(((-1.0)*r11*x12177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x12177))+((r00*x12178))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x12178))+(((-1.0)*r11*x12177))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x12177))+((r00*x12178))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x12178))+(((-1.0)*r11*x12177))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12179=IKcos(j0);
IkReal x12180=IKsin(j0);
IkReal x12181=((0.01)*cj5);
IkReal x12182=(cj6*r11);
IkReal x12183=(cj5*r12);
IkReal x12184=(r10*sj6);
IkReal x12185=((0.37429)*sj5);
IkReal x12186=((1.0)*r01);
IkReal x12187=(sj4*sj6);
IkReal x12188=(cj6*sj4);
IkReal x12189=(r00*sj6);
IkReal x12190=((1.0)*sj5);
IkReal x12191=(cj4*sj5);
IkReal x12192=(cj6*r01);
IkReal x12193=(cj5*r02);
IkReal x12194=(cj4*cj5);
IkReal x12195=((0.01)*sj5);
evalcond[0]=((((-1.0)*cj6*sj5*x12186))+x12180+x12193+(((-1.0)*x12189*x12190)));
evalcond[1]=((((-1.0)*x12182*x12190))+(((-1.0)*x12179))+x12183+(((-1.0)*x12184*x12190)));
evalcond[2]=(x12179+((x12189*x12194))+((r02*x12191))+(((-1.0)*x12186*x12187))+((x12192*x12194))+((r00*x12188)));
evalcond[3]=(((r12*x12191))+(((-1.0)*r11*x12187))+((x12182*x12194))+x12180+((r10*x12188))+((x12184*x12194)));
evalcond[4]=(((x12181*x12189))+(((-1.0)*x12185*x12192))+((x12181*x12192))+(((-1.0)*x12185*x12189))+(((-1.0)*px))+((r02*x12195))+(((0.069)*x12180))+(((-0.29542)*x12179))+(((0.37429)*x12193)));
evalcond[5]=((((0.37429)*x12183))+((r12*x12195))+(((-1.0)*x12182*x12185))+((x12181*x12184))+((x12181*x12182))+(((-0.29542)*x12180))+(((-0.069)*x12179))+(((-1.0)*py))+(((-1.0)*x12184*x12185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12196=((1.0)*cj6);
IkReal x12197=(cj5*r21);
IkReal x12198=(cj6*r20);
IkReal x12199=(r22*sj5);
IkReal x12200=(r21*sj5);
IkReal x12201=((1.0)*sj6);
IkReal x12202=((1.0)*sj4);
IkReal x12203=(r20*sj5);
IkReal x12204=(cj5*r22);
IkReal x12205=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj5*r20*sj4*x12201))+(((-1.0)*sj4*x12196*x12197))+((cj4*x12198))+(((-1.0)*cj4*r21*x12201))+(((-1.0)*x12199*x12202)));
evalcond[2]=((0.069)+(((0.01)*cj6*x12197))+(((-0.37429)*cj6*x12200))+(((0.01)*x12199))+(((-0.37429)*sj6*x12203))+(((-1.0)*pz))+(((0.01)*x12205))+(((0.37429)*x12204)));
evalcond[3]=(((cj4*x12205))+((cj4*cj6*x12197))+((cj4*x12199))+((sj4*x12198))+(((-1.0)*r21*sj4*x12201)));
evalcond[4]=((1.0)+(((-1.0)*x12201*x12203))+x12204+(((-1.0)*x12196*x12200)));
evalcond[5]=(((cj5*r12))+(((-1.0)*r10*sj5*x12201))+(((-1.0)*r11*sj5*x12196)));
evalcond[6]=((((-1.0)*r00*sj5*x12201))+(((-1.0)*r01*sj5*x12196))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12206=(cj6*sj4);
IkReal x12207=(cj5*r11);
IkReal x12208=(r11*sj6);
IkReal x12209=(r12*sj5);
IkReal x12210=((1.0)*r10);
IkReal x12211=(cj4*cj6);
IkReal x12212=(cj5*sj6);
if( IKabs(((((-1.0)*cj4*x12210*x12212))+((sj4*x12208))+(((-1.0)*cj4*x12209))+(((-1.0)*x12207*x12211))+(((-1.0)*x12206*x12210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x12208))+((x12206*x12207))+((sj4*x12209))+(((-1.0)*x12210*x12211))+((r10*sj4*x12212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x12210*x12212))+((sj4*x12208))+(((-1.0)*cj4*x12209))+(((-1.0)*x12207*x12211))+(((-1.0)*x12206*x12210))))+IKsqr((((cj4*x12208))+((x12206*x12207))+((sj4*x12209))+(((-1.0)*x12210*x12211))+((r10*sj4*x12212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*x12210*x12212))+((sj4*x12208))+(((-1.0)*cj4*x12209))+(((-1.0)*x12207*x12211))+(((-1.0)*x12206*x12210))), (((cj4*x12208))+((x12206*x12207))+((sj4*x12209))+(((-1.0)*x12210*x12211))+((r10*sj4*x12212))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12213=IKcos(j0);
IkReal x12214=IKsin(j0);
IkReal x12215=((1.0)*sj4);
IkReal x12216=(cj6*sj4);
IkReal x12217=(r10*sj6);
IkReal x12218=((0.37429)*sj5);
IkReal x12219=(r01*sj6);
IkReal x12220=((0.01)*cj5);
IkReal x12221=(r12*sj5);
IkReal x12222=(r00*sj6);
IkReal x12223=(r02*sj5);
IkReal x12224=((0.37429)*cj5);
IkReal x12225=(cj4*cj6);
IkReal x12226=(cj4*cj5);
IkReal x12227=((1.0)*cj4);
IkReal x12228=(r11*sj6);
IkReal x12229=(cj5*cj6*r11);
IkReal x12230=(cj5*cj6*r01);
evalcond[0]=(((cj4*x12223))+x12213+((x12222*x12226))+(((-1.0)*x12215*x12219))+((r00*x12216))+((cj5*r01*x12225)));
evalcond[1]=(((cj4*x12221))+((x12217*x12226))+((cj5*r11*x12225))+x12214+(((-1.0)*x12215*x12228))+((r10*x12216)));
evalcond[2]=((((-1.0)*cj5*x12215*x12217))+(((-1.0)*x12227*x12228))+x12213+(((-1.0)*x12215*x12221))+(((-1.0)*x12215*x12229))+((r10*x12225)));
evalcond[3]=((((-1.0)*cj5*x12215*x12222))+(((-1.0)*x12215*x12223))+(((-1.0)*x12219*x12227))+((r00*x12225))+(((-1.0)*x12215*x12230))+(((-1.0)*x12214)));
evalcond[4]=(((cj6*r01*x12220))+(((-0.29542)*x12213))+((r02*x12224))+(((-1.0)*px))+(((0.01)*x12223))+(((-1.0)*x12218*x12222))+(((-1.0)*cj6*r01*x12218))+((x12220*x12222)));
evalcond[5]=((((-0.29542)*x12214))+((x12217*x12220))+((cj6*r11*x12220))+(((-1.0)*py))+(((-1.0)*x12217*x12218))+(((0.01)*x12221))+(((-1.0)*cj6*r11*x12218))+((r12*x12224)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12231=((1.0)*cj6);
IkReal x12232=(cj5*r21);
IkReal x12233=(cj6*r20);
IkReal x12234=(r22*sj5);
IkReal x12235=(r21*sj5);
IkReal x12236=((1.0)*sj6);
IkReal x12237=((1.0)*sj4);
IkReal x12238=(r20*sj5);
IkReal x12239=(cj5*r22);
IkReal x12240=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj5*r20*sj4*x12236))+(((-1.0)*x12234*x12237))+(((-1.0)*sj4*x12231*x12232))+((cj4*x12233))+(((-1.0)*cj4*r21*x12236)));
evalcond[2]=((-0.069)+(((0.01)*x12240))+(((0.01)*x12234))+(((-1.0)*pz))+(((0.37429)*x12239))+(((-0.37429)*cj6*x12235))+(((0.01)*cj6*x12232))+(((-0.37429)*sj6*x12238)));
evalcond[3]=(((sj4*x12233))+((cj4*x12240))+((cj4*cj6*x12232))+((cj4*x12234))+(((-1.0)*r21*sj4*x12236)));
evalcond[4]=((-1.0)+x12239+(((-1.0)*x12231*x12235))+(((-1.0)*x12236*x12238)));
evalcond[5]=(((cj5*r12))+(((-1.0)*r11*sj5*x12231))+(((-1.0)*r10*sj5*x12236)));
evalcond[6]=((((-1.0)*r00*sj5*x12236))+(((-1.0)*r01*sj5*x12231))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12241=(cj5*r01);
IkReal x12242=(cj4*sj6);
IkReal x12243=((1.0)*r00);
IkReal x12244=(cj6*sj4);
IkReal x12245=(r02*sj5);
IkReal x12246=(sj4*sj6);
IkReal x12247=((1.0)*cj4*cj6);
if( IKabs((((x12241*x12244))+((sj4*x12245))+((cj5*r00*x12246))+((r01*x12242))+(((-1.0)*cj4*cj6*x12243)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x12245))+(((-1.0)*cj5*x12242*x12243))+((r01*x12246))+(((-1.0)*x12241*x12247))+(((-1.0)*x12243*x12244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x12241*x12244))+((sj4*x12245))+((cj5*r00*x12246))+((r01*x12242))+(((-1.0)*cj4*cj6*x12243))))+IKsqr(((((-1.0)*cj4*x12245))+(((-1.0)*cj5*x12242*x12243))+((r01*x12246))+(((-1.0)*x12241*x12247))+(((-1.0)*x12243*x12244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x12241*x12244))+((sj4*x12245))+((cj5*r00*x12246))+((r01*x12242))+(((-1.0)*cj4*cj6*x12243))), ((((-1.0)*cj4*x12245))+(((-1.0)*cj5*x12242*x12243))+((r01*x12246))+(((-1.0)*x12241*x12247))+(((-1.0)*x12243*x12244))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12248=IKsin(j0);
IkReal x12249=IKcos(j0);
IkReal x12250=((1.0)*sj4);
IkReal x12251=(cj6*sj4);
IkReal x12252=(r10*sj6);
IkReal x12253=((0.37429)*sj5);
IkReal x12254=(r01*sj6);
IkReal x12255=((0.01)*cj5);
IkReal x12256=(r12*sj5);
IkReal x12257=(r00*sj6);
IkReal x12258=(r02*sj5);
IkReal x12259=((0.37429)*cj5);
IkReal x12260=(cj4*cj6);
IkReal x12261=(cj4*cj5);
IkReal x12262=((1.0)*cj4);
IkReal x12263=(r11*sj6);
IkReal x12264=(cj5*cj6*r11);
IkReal x12265=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x12250*x12254))+((x12257*x12261))+x12249+((cj4*x12258))+((r00*x12251))+((cj5*r01*x12260)));
evalcond[1]=(((x12252*x12261))+(((-1.0)*x12250*x12263))+((r10*x12251))+x12248+((cj4*x12256))+((cj5*r11*x12260)));
evalcond[2]=((((-1.0)*cj5*x12250*x12257))+(((-1.0)*x12250*x12265))+(((-1.0)*x12250*x12258))+x12248+((r00*x12260))+(((-1.0)*x12254*x12262)));
evalcond[3]=((((-1.0)*cj5*x12250*x12252))+(((-1.0)*x12250*x12264))+(((-1.0)*x12250*x12256))+((r10*x12260))+(((-1.0)*x12249))+(((-1.0)*x12262*x12263)));
evalcond[4]=((((-1.0)*cj6*r01*x12253))+(((0.01)*x12258))+(((-0.29542)*x12249))+(((-1.0)*px))+(((-1.0)*x12253*x12257))+((x12255*x12257))+((cj6*r01*x12255))+((r02*x12259)));
evalcond[5]=(((r12*x12259))+(((-1.0)*cj6*r11*x12253))+((x12252*x12255))+(((0.01)*x12256))+(((-0.29542)*x12248))+(((-1.0)*py))+(((-1.0)*x12252*x12253))+((cj6*r11*x12255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12266=((1.0)*sj6);
IkReal x12267=(cj5*sj4);
CheckValue<IkReal> x12268=IKPowWithIntegerCheck(cj2,-1);
if(!x12268.valid){
continue;
}
CheckValue<IkReal> x12269=IKPowWithIntegerCheck(sj2,-1);
if(!x12269.valid){
continue;
}
if( IKabs(((x12268.value)*(((((-1.0)*r00*x12266*x12267))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12266))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x12267)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12269.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12268.value)*(((((-1.0)*r00*x12266*x12267))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12266))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x12267))))))+IKsqr(((x12269.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12268.value)*(((((-1.0)*r00*x12266*x12267))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12266))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x12267))))), ((x12269.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12270=IKcos(j0);
IkReal x12271=IKsin(j0);
IkReal x12272=((1.0)*sj4);
IkReal x12273=(cj5*r12);
IkReal x12274=((0.37429)*sj5);
IkReal x12275=(r10*sj6);
IkReal x12276=(r01*sj6);
IkReal x12277=((0.069)*sj2);
IkReal x12278=(cj6*r01);
IkReal x12279=((0.01)*cj5);
IkReal x12280=(r12*sj5);
IkReal x12281=(cj6*r10);
IkReal x12282=(r00*sj6);
IkReal x12283=((1.0)*sj5);
IkReal x12284=(r02*sj5);
IkReal x12285=(cj6*r11);
IkReal x12286=(cj5*r02);
IkReal x12287=(cj4*cj5);
IkReal x12288=(cj6*r00);
IkReal x12289=((1.0)*cj4);
IkReal x12290=(r11*sj6);
IkReal x12291=(cj5*x12285);
IkReal x12292=((1.0)*x12271);
evalcond[0]=(x12273+(((-1.0)*x12275*x12283))+((sj2*x12270))+(((-1.0)*x12283*x12285)));
evalcond[1]=((((-1.0)*x12278*x12283))+x12286+(((-1.0)*sj2*x12292))+(((-1.0)*x12282*x12283)));
evalcond[2]=((((-1.0)*x12272*x12276))+((cj4*x12284))+x12270+((x12282*x12287))+((x12278*x12287))+((sj4*x12288)));
evalcond[3]=(((x12275*x12287))+((cj4*x12280))+x12271+((x12285*x12287))+((sj4*x12281))+(((-1.0)*x12272*x12290)));
evalcond[4]=(((cj4*x12281))+(((-1.0)*x12272*x12280))+((cj2*x12270))+(((-1.0)*x12289*x12290))+(((-1.0)*x12272*x12291))+(((-1.0)*cj5*x12272*x12275)));
evalcond[5]=((((-1.0)*cj5*x12272*x12282))+(((-1.0)*x12276*x12289))+((cj4*x12288))+(((-1.0)*x12272*x12284))+(((-1.0)*cj5*x12272*x12278))+(((-1.0)*cj2*x12292)));
evalcond[6]=(((x12279*x12282))+(((0.37429)*x12286))+(((0.01)*x12284))+(((-1.0)*px))+(((-1.0)*x12274*x12282))+(((-0.29542)*x12270))+(((-1.0)*x12271*x12277))+(((-1.0)*x12274*x12278))+((x12278*x12279)));
evalcond[7]=(((x12279*x12285))+((x12270*x12277))+(((0.01)*x12280))+(((0.37429)*x12273))+(((-1.0)*py))+(((-1.0)*x12274*x12285))+(((-0.29542)*x12271))+((x12275*x12279))+(((-1.0)*x12274*x12275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12293=(r10*sj6);
IkReal x12294=(cj6*r11);
IkReal x12295=((1.0)*r12);
IkReal x12296=((1.0)*cj4*cj5);
CheckValue<IkReal> x12297=IKPowWithIntegerCheck(sj2,-1);
if(!x12297.valid){
continue;
}
if( IKabs(((((-1.0)*x12294*x12296))+(((-1.0)*cj6*r10*sj4))+((r11*sj4*sj6))+(((-1.0)*cj4*sj5*x12295))+(((-1.0)*x12293*x12296)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12297.value)*(((((-1.0)*cj5*x12295))+((sj5*x12293))+((sj5*x12294)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12294*x12296))+(((-1.0)*cj6*r10*sj4))+((r11*sj4*sj6))+(((-1.0)*cj4*sj5*x12295))+(((-1.0)*x12293*x12296))))+IKsqr(((x12297.value)*(((((-1.0)*cj5*x12295))+((sj5*x12293))+((sj5*x12294))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12294*x12296))+(((-1.0)*cj6*r10*sj4))+((r11*sj4*sj6))+(((-1.0)*cj4*sj5*x12295))+(((-1.0)*x12293*x12296))), ((x12297.value)*(((((-1.0)*cj5*x12295))+((sj5*x12293))+((sj5*x12294))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12298=IKcos(j0);
IkReal x12299=IKsin(j0);
IkReal x12300=((1.0)*sj4);
IkReal x12301=(cj5*r12);
IkReal x12302=((0.37429)*sj5);
IkReal x12303=(r10*sj6);
IkReal x12304=(r01*sj6);
IkReal x12305=((0.069)*sj2);
IkReal x12306=(cj6*r01);
IkReal x12307=((0.01)*cj5);
IkReal x12308=(r12*sj5);
IkReal x12309=(cj6*r10);
IkReal x12310=(r00*sj6);
IkReal x12311=((1.0)*sj5);
IkReal x12312=(r02*sj5);
IkReal x12313=(cj6*r11);
IkReal x12314=(cj5*r02);
IkReal x12315=(cj4*cj5);
IkReal x12316=(cj6*r00);
IkReal x12317=((1.0)*cj4);
IkReal x12318=(r11*sj6);
IkReal x12319=(cj5*x12313);
IkReal x12320=((1.0)*x12299);
evalcond[0]=(x12301+(((-1.0)*x12311*x12313))+((sj2*x12298))+(((-1.0)*x12303*x12311)));
evalcond[1]=((((-1.0)*x12306*x12311))+x12314+(((-1.0)*x12310*x12311))+(((-1.0)*sj2*x12320)));
evalcond[2]=(((x12310*x12315))+x12298+((cj4*x12312))+((x12306*x12315))+((sj4*x12316))+(((-1.0)*x12300*x12304)));
evalcond[3]=(((sj4*x12309))+x12299+(((-1.0)*x12300*x12318))+((cj4*x12308))+((x12313*x12315))+((x12303*x12315)));
evalcond[4]=((((-1.0)*cj5*x12300*x12303))+((cj2*x12298))+(((-1.0)*x12317*x12318))+(((-1.0)*x12300*x12319))+((cj4*x12309))+(((-1.0)*x12300*x12308)));
evalcond[5]=((((-1.0)*cj5*x12300*x12306))+(((-1.0)*cj5*x12300*x12310))+(((-1.0)*x12300*x12312))+((cj4*x12316))+(((-1.0)*cj2*x12320))+(((-1.0)*x12304*x12317)));
evalcond[6]=((((0.37429)*x12314))+(((-1.0)*x12302*x12306))+(((-1.0)*px))+((x12306*x12307))+((x12307*x12310))+(((-0.29542)*x12298))+(((-1.0)*x12302*x12310))+(((0.01)*x12312))+(((-1.0)*x12299*x12305)));
evalcond[7]=((((0.01)*x12308))+((x12298*x12305))+(((-1.0)*x12302*x12303))+(((-1.0)*py))+((x12307*x12313))+(((-0.29542)*x12299))+((x12303*x12307))+(((-1.0)*x12302*x12313))+(((0.37429)*x12301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12321=(sj5*sj6);
IkReal x12322=(cj6*sj5);
CheckValue<IkReal> x12323=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x12323.valid){
continue;
}
CheckValue<IkReal> x12324 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12321))+(((-1.0)*r01*x12322))+((cj5*r02)))),((((-1.0)*cj5*r12))+((r10*x12321))+((r11*x12322))),IKFAST_ATAN2_MAGTHRESH);
if(!x12324.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12323.value)))+(x12324.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12325=IKcos(j0);
IkReal x12326=IKsin(j0);
IkReal x12327=((1.0)*sj4);
IkReal x12328=(cj5*r12);
IkReal x12329=((0.37429)*sj5);
IkReal x12330=(r10*sj6);
IkReal x12331=(r01*sj6);
IkReal x12332=((0.069)*sj2);
IkReal x12333=(cj6*r01);
IkReal x12334=((0.01)*cj5);
IkReal x12335=(r12*sj5);
IkReal x12336=(cj6*r10);
IkReal x12337=(r00*sj6);
IkReal x12338=((1.0)*sj5);
IkReal x12339=(r02*sj5);
IkReal x12340=(cj6*r11);
IkReal x12341=(cj5*r02);
IkReal x12342=(cj4*cj5);
IkReal x12343=(cj6*r00);
IkReal x12344=((1.0)*cj4);
IkReal x12345=(r11*sj6);
IkReal x12346=(cj5*x12340);
IkReal x12347=((1.0)*x12326);
evalcond[0]=((((-1.0)*x12338*x12340))+x12328+(((-1.0)*x12330*x12338))+((sj2*x12325)));
evalcond[1]=(x12341+(((-1.0)*sj2*x12347))+(((-1.0)*x12333*x12338))+(((-1.0)*x12337*x12338)));
evalcond[2]=(((sj4*x12343))+((x12333*x12342))+((x12337*x12342))+x12325+(((-1.0)*x12327*x12331))+((cj4*x12339)));
evalcond[3]=(((x12340*x12342))+(((-1.0)*x12327*x12345))+((x12330*x12342))+((sj4*x12336))+x12326+((cj4*x12335)));
evalcond[4]=((((-1.0)*x12344*x12345))+(((-1.0)*x12327*x12346))+(((-1.0)*x12327*x12335))+(((-1.0)*cj5*x12327*x12330))+((cj2*x12325))+((cj4*x12336)));
evalcond[5]=((((-1.0)*x12331*x12344))+(((-1.0)*x12327*x12339))+(((-1.0)*cj5*x12327*x12333))+(((-1.0)*cj5*x12327*x12337))+(((-1.0)*cj2*x12347))+((cj4*x12343)));
evalcond[6]=((((-0.29542)*x12325))+((x12333*x12334))+(((0.01)*x12339))+(((-1.0)*x12326*x12332))+(((-1.0)*x12329*x12337))+(((-1.0)*x12329*x12333))+((x12334*x12337))+(((-1.0)*px))+(((0.37429)*x12341)));
evalcond[7]=((((-0.29542)*x12326))+((x12330*x12334))+(((0.01)*x12335))+(((-1.0)*x12329*x12330))+((x12334*x12340))+(((-1.0)*py))+((x12325*x12332))+(((-1.0)*x12329*x12340))+(((0.37429)*x12328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12348=(cj6*sj4);
IkReal x12349=(cj5*r21);
IkReal x12350=(r22*sj5);
IkReal x12351=(cj4*cj6);
IkReal x12352=((1.0)*r21);
IkReal x12353=(cj6*sj5);
IkReal x12354=((1.0)*sj4);
IkReal x12355=(cj5*r22);
IkReal x12356=(cj5*r20*sj6);
IkReal x12357=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x12354*x12356))+((r20*x12351))+(((-1.0)*cj4*sj6*x12352))+(((-1.0)*x12350*x12354))+(((-1.0)*x12348*x12349)));
evalcond[2]=((((0.01)*x12356))+(((0.01)*x12350))+(((-0.37429)*r21*x12353))+(((-0.069)*cj1))+(((-1.0)*pz))+(((0.37429)*x12355))+(((0.01)*cj6*x12349))+(((-0.37429)*x12357))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((r20*x12348))+(((-1.0)*sj4*sj6*x12352))+((cj4*x12356))+((cj4*x12350))+((x12349*x12351)));
evalcond[4]=((((-1.0)*x12357))+x12355+(((-1.0)*x12352*x12353))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x12358=((1.0)*cj6*sj5);
IkReal x12359=((1.0)*sj5*sj6);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x12358))+(((-1.0)*r10*x12359)))))+(IKabs(((((-1.0)*r01*x12358))+(((-1.0)*r00*x12359))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x12360=((0.01)*cj5);
IkReal x12361=(cj6*r11);
IkReal x12362=(cj6*sj4);
IkReal x12363=(r10*sj6);
IkReal x12364=((0.37429)*sj5);
IkReal x12365=((1.0)*sj6);
IkReal x12366=(r00*sj6);
IkReal x12367=(r20*sj6);
IkReal x12368=(cj5*r21);
IkReal x12369=((0.01)*sj5);
IkReal x12370=(cj4*cj6);
IkReal x12371=(cj4*cj5);
IkReal x12372=(cj6*r01);
IkReal x12373=((0.37429)*cj5);
IkReal x12374=((1.0)*sj5);
IkReal x12375=(cj6*r21);
IkReal x12376=(cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*r21*x12365))+(((-1.0)*x12362*x12368))+(((-1.0)*cj5*r20*sj4*x12365))+((r20*x12370))+(((-1.0)*r22*sj4*x12374)));
evalcond[2]=((-0.36442)+(((-1.0)*pz))+((r22*x12369))+((r22*x12373))+(((-1.0)*x12364*x12367))+((x12360*x12367))+(((-1.0)*x12364*x12375))+((x12360*x12375)));
evalcond[3]=((((-1.0)*px))+(((-1.0)*x12364*x12366))+((r02*x12373))+((x12360*x12366))+(((-1.0)*x12364*x12372))+((r02*x12369))+((x12360*x12372)));
evalcond[4]=((((-1.0)*py))+(((-1.0)*x12361*x12364))+((x12360*x12361))+((x12360*x12363))+(((-1.0)*x12363*x12364))+((r12*x12373))+((r12*x12369)));
evalcond[5]=((1.0)+((x12368*x12370))+((x12367*x12371))+((r22*x12376))+(((-1.0)*r21*sj4*x12365))+((r20*x12362)));
evalcond[6]=(((cj5*r22))+(((-1.0)*x12374*x12375))+(((-1.0)*r20*sj5*x12365)));
evalcond[7]=(((x12366*x12371))+(((-1.0)*r01*sj4*x12365))+((cj5*r01*x12370))+((r02*x12376))+((r00*x12362)));
evalcond[8]=((((-1.0)*r11*sj4*x12365))+((r10*x12362))+((x12361*x12371))+((x12363*x12371))+((r12*x12376)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12377=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x12377))+(((-1.0)*cj6*r11*x12377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x12377))+(((-1.0)*r00*sj6*x12377))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x12377))+(((-1.0)*cj6*r11*x12377))))+IKsqr(((((-1.0)*cj6*r01*x12377))+(((-1.0)*r00*sj6*x12377))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x12377))+(((-1.0)*cj6*r11*x12377))), ((((-1.0)*cj6*r01*x12377))+(((-1.0)*r00*sj6*x12377))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12378=IKcos(j0);
IkReal x12379=(cj4*cj6);
IkReal x12380=(r00*sj6);
IkReal x12381=(cj6*r01);
IkReal x12382=((1.0)*sj5);
IkReal x12383=(cj6*r11);
IkReal x12384=(r10*sj6);
IkReal x12385=((1.0)*(IKsin(j0)));
IkReal x12386=((1.0)*cj4*sj6);
IkReal x12387=((1.0)*cj5*sj4);
evalcond[0]=(((cj5*r12))+(((-1.0)*x12382*x12384))+(((-1.0)*x12382*x12383))+(((-1.0)*x12385)));
evalcond[1]=((((-1.0)*x12381*x12382))+(((-1.0)*x12380*x12382))+(((-1.0)*x12378))+((cj5*r02)));
evalcond[2]=((((-1.0)*x12384*x12387))+(((-1.0)*r11*x12386))+(((-1.0)*x12383*x12387))+((r10*x12379))+x12378+(((-1.0)*r12*sj4*x12382)));
evalcond[3]=((((-1.0)*x12381*x12387))+(((-1.0)*x12380*x12387))+(((-1.0)*r01*x12386))+(((-1.0)*x12385))+(((-1.0)*r02*sj4*x12382))+((r00*x12379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12388=(cj6*sj4);
IkReal x12389=((1.0)*sj6);
IkReal x12390=(cj5*r21);
IkReal x12391=(r22*sj5);
IkReal x12392=(cj4*cj6);
IkReal x12393=(cj4*sj5);
IkReal x12394=(r20*sj5);
IkReal x12395=(cj5*r22);
IkReal x12396=(cj5*r20*sj6);
IkReal x12397=(cj6*r21*sj5);
IkReal x12398=(cj4*cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj5*r20*sj4*x12389))+((r20*x12392))+(((-1.0)*sj4*x12391))+(((-1.0)*x12388*x12390))+(((-1.0)*cj4*r21*x12389)));
evalcond[2]=((0.36442)+(((0.37429)*x12395))+(((-0.37429)*sj6*x12394))+(((0.01)*x12391))+(((0.01)*x12396))+(((-1.0)*pz))+(((-0.37429)*x12397))+(((0.01)*cj6*x12390)));
evalcond[3]=((-1.0)+(((-1.0)*r21*sj4*x12389))+((x12390*x12392))+((r20*x12388))+((cj4*x12396))+((cj4*x12391)));
evalcond[4]=(x12395+(((-1.0)*x12389*x12394))+(((-1.0)*x12397)));
evalcond[5]=(((r02*x12393))+((cj5*r01*x12392))+((r00*x12388))+((r00*x12398))+(((-1.0)*r01*sj4*x12389)));
evalcond[6]=(((r10*x12388))+((r10*x12398))+((cj5*r11*x12392))+(((-1.0)*r11*sj4*x12389))+((r12*x12393)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12399=(cj6*sj5);
IkReal x12400=(sj5*sj6);
IkReal x12401=((1.0)*cj5);
if( IKabs((((r11*x12399))+(((-1.0)*r12*x12401))+((r10*x12400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x12399))+(((-1.0)*r02*x12401))+((r00*x12400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x12399))+(((-1.0)*r12*x12401))+((r10*x12400))))+IKsqr((((r01*x12399))+(((-1.0)*r02*x12401))+((r00*x12400))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x12399))+(((-1.0)*r12*x12401))+((r10*x12400))), (((r01*x12399))+(((-1.0)*r02*x12401))+((r00*x12400))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12402=IKcos(j0);
IkReal x12403=IKsin(j0);
IkReal x12404=((1.0)*sj4);
IkReal x12405=(cj5*r12);
IkReal x12406=(r10*sj6);
IkReal x12407=((0.37429)*sj5);
IkReal x12408=(cj6*r01);
IkReal x12409=((0.01)*cj5);
IkReal x12410=(r12*sj5);
IkReal x12411=(r00*sj6);
IkReal x12412=((1.0)*sj5);
IkReal x12413=(r02*sj5);
IkReal x12414=(cj6*r11);
IkReal x12415=(cj4*cj6);
IkReal x12416=(cj5*r02);
IkReal x12417=(cj5*x12414);
IkReal x12418=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x12406*x12412))+(((-1.0)*x12412*x12414))+x12403+x12405);
evalcond[1]=((((-1.0)*x12411*x12412))+(((-1.0)*x12408*x12412))+x12402+x12416);
evalcond[2]=(((r10*x12415))+(((-1.0)*x12404*x12410))+(((-1.0)*x12404*x12417))+(((-1.0)*cj5*x12404*x12406))+(((-1.0)*r11*x12418))+x12402);
evalcond[3]=((((-1.0)*r01*x12418))+(((-1.0)*cj5*x12404*x12411))+((r00*x12415))+(((-1.0)*x12404*x12413))+(((-1.0)*cj5*x12404*x12408))+(((-1.0)*x12403)));
evalcond[4]=((((0.01)*x12413))+(((0.37429)*x12416))+(((0.138)*x12402))+((x12409*x12411))+(((-1.0)*x12407*x12408))+(((-1.0)*px))+((x12408*x12409))+(((-1.0)*x12407*x12411)));
evalcond[5]=((((0.01)*x12410))+(((0.138)*x12403))+((x12409*x12414))+(((0.37429)*x12405))+(((-1.0)*py))+((x12406*x12409))+(((-1.0)*x12406*x12407))+(((-1.0)*x12407*x12414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12419=(cj4*cj5);
IkReal x12420=((1.0)*sj6);
CheckValue<IkReal> x12421=IKPowWithIntegerCheck(sj1,-1);
if(!x12421.valid){
continue;
}
CheckValue<IkReal> x12422=IKPowWithIntegerCheck(cj1,-1);
if(!x12422.valid){
continue;
}
if( IKabs(((x12421.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12420)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12422.value)*((((cj6*r01*x12419))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x12420))+((r00*sj6*x12419)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12421.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12420))))))+IKsqr(((x12422.value)*((((cj6*r01*x12419))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x12420))+((r00*sj6*x12419))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12421.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12420))))), ((x12422.value)*((((cj6*r01*x12419))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x12420))+((r00*sj6*x12419))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12423=IKcos(j0);
IkReal x12424=IKsin(j0);
IkReal x12425=(r02*sj5);
IkReal x12426=((1.0)*sj4);
IkReal x12427=(cj5*r12);
IkReal x12428=((0.37429)*sj5);
IkReal x12429=(r10*sj6);
IkReal x12430=(r01*sj6);
IkReal x12431=((0.36442)*cj1);
IkReal x12432=(cj6*r01);
IkReal x12433=((0.01)*cj5);
IkReal x12434=(r12*sj5);
IkReal x12435=(cj6*sj4);
IkReal x12436=(r00*sj6);
IkReal x12437=((1.0)*sj5);
IkReal x12438=(cj6*r11);
IkReal x12439=(cj4*cj6);
IkReal x12440=(cj5*r02);
IkReal x12441=(cj4*cj5);
IkReal x12442=((1.0)*cj4);
IkReal x12443=(r11*sj6);
IkReal x12444=(cj5*x12438);
IkReal x12445=((0.069)*x12423);
IkReal x12446=((0.069)*x12424);
IkReal x12447=((1.0)*x12424);
IkReal x12448=((1.0)*x12423);
evalcond[0]=((((-1.0)*x12429*x12437))+(((-1.0)*sj1*x12447))+(((-1.0)*x12437*x12438))+x12427);
evalcond[1]=((((-1.0)*sj1*x12448))+(((-1.0)*x12436*x12437))+x12440+(((-1.0)*x12432*x12437)));
evalcond[2]=((((-1.0)*cj5*x12426*x12429))+((r10*x12439))+(((-1.0)*x12426*x12444))+x12423+(((-1.0)*x12442*x12443))+(((-1.0)*x12426*x12434)));
evalcond[3]=((((-1.0)*cj1*x12448))+((cj4*x12425))+((r00*x12435))+((x12436*x12441))+((x12432*x12441))+(((-1.0)*x12426*x12430)));
evalcond[4]=(((x12429*x12441))+((x12438*x12441))+((r10*x12435))+(((-1.0)*x12426*x12443))+(((-1.0)*cj1*x12447))+((cj4*x12434)));
evalcond[5]=((((-1.0)*x12430*x12442))+(((-1.0)*x12447))+(((-1.0)*x12425*x12426))+(((-1.0)*cj5*x12426*x12436))+(((-1.0)*cj5*x12426*x12432))+((r00*x12439)));
evalcond[6]=(((x12423*x12431))+(((-1.0)*x12428*x12436))+(((-1.0)*x12428*x12432))+(((-1.0)*sj1*x12445))+(((-1.0)*px))+(((0.37429)*x12440))+((x12432*x12433))+((x12433*x12436))+x12445+(((0.01)*x12425)));
evalcond[7]=(((x12429*x12433))+(((-1.0)*x12428*x12438))+(((-1.0)*x12428*x12429))+(((-1.0)*sj1*x12446))+(((-1.0)*py))+((x12433*x12438))+x12446+(((0.37429)*x12427))+(((0.01)*x12434))+((x12424*x12431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12449=(cj5*sj4);
IkReal x12450=(cj6*r11);
IkReal x12451=(r10*sj6);
IkReal x12452=((1.0)*sj5);
CheckValue<IkReal> x12453=IKPowWithIntegerCheck(sj1,-1);
if(!x12453.valid){
continue;
}
if( IKabs(((x12453.value)*((((cj5*r12))+(((-1.0)*x12450*x12452))+(((-1.0)*x12451*x12452)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((x12449*x12450))+((x12449*x12451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12453.value)*((((cj5*r12))+(((-1.0)*x12450*x12452))+(((-1.0)*x12451*x12452))))))+IKsqr(((((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((x12449*x12450))+((x12449*x12451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12453.value)*((((cj5*r12))+(((-1.0)*x12450*x12452))+(((-1.0)*x12451*x12452))))), ((((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((x12449*x12450))+((x12449*x12451))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12454=IKcos(j0);
IkReal x12455=IKsin(j0);
IkReal x12456=(r02*sj5);
IkReal x12457=((1.0)*sj4);
IkReal x12458=(cj5*r12);
IkReal x12459=((0.37429)*sj5);
IkReal x12460=(r10*sj6);
IkReal x12461=(r01*sj6);
IkReal x12462=((0.36442)*cj1);
IkReal x12463=(cj6*r01);
IkReal x12464=((0.01)*cj5);
IkReal x12465=(r12*sj5);
IkReal x12466=(cj6*sj4);
IkReal x12467=(r00*sj6);
IkReal x12468=((1.0)*sj5);
IkReal x12469=(cj6*r11);
IkReal x12470=(cj4*cj6);
IkReal x12471=(cj5*r02);
IkReal x12472=(cj4*cj5);
IkReal x12473=((1.0)*cj4);
IkReal x12474=(r11*sj6);
IkReal x12475=(cj5*x12469);
IkReal x12476=((0.069)*x12454);
IkReal x12477=((0.069)*x12455);
IkReal x12478=((1.0)*x12455);
IkReal x12479=((1.0)*x12454);
evalcond[0]=((((-1.0)*x12460*x12468))+(((-1.0)*x12468*x12469))+x12458+(((-1.0)*sj1*x12478)));
evalcond[1]=((((-1.0)*x12463*x12468))+(((-1.0)*x12467*x12468))+x12471+(((-1.0)*sj1*x12479)));
evalcond[2]=((((-1.0)*cj5*x12457*x12460))+(((-1.0)*x12457*x12465))+(((-1.0)*x12457*x12475))+(((-1.0)*x12473*x12474))+x12454+((r10*x12470)));
evalcond[3]=(((cj4*x12456))+((r00*x12466))+((x12463*x12472))+(((-1.0)*x12457*x12461))+(((-1.0)*cj1*x12479))+((x12467*x12472)));
evalcond[4]=((((-1.0)*x12457*x12474))+((cj4*x12465))+((x12469*x12472))+(((-1.0)*cj1*x12478))+((x12460*x12472))+((r10*x12466)));
evalcond[5]=((((-1.0)*cj5*x12457*x12467))+(((-1.0)*cj5*x12457*x12463))+((r00*x12470))+(((-1.0)*x12478))+(((-1.0)*x12456*x12457))+(((-1.0)*x12461*x12473)));
evalcond[6]=(((x12464*x12467))+(((0.37429)*x12471))+(((0.01)*x12456))+((x12463*x12464))+((x12454*x12462))+(((-1.0)*x12459*x12467))+(((-1.0)*x12459*x12463))+(((-1.0)*px))+x12476+(((-1.0)*sj1*x12476)));
evalcond[7]=(((x12464*x12469))+(((0.01)*x12465))+(((-1.0)*x12459*x12469))+(((-1.0)*x12459*x12460))+(((0.37429)*x12458))+(((-1.0)*py))+((x12455*x12462))+x12477+((x12460*x12464))+(((-1.0)*sj1*x12477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12480=((1.0)*sj5);
CheckValue<IkReal> x12481=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x12481.valid){
continue;
}
CheckValue<IkReal> x12482 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*cj6*r11*x12480))+(((-1.0)*r10*sj6*x12480)))),((((-1.0)*r00*sj6*x12480))+(((-1.0)*cj6*r01*x12480))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x12482.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12481.value)))+(x12482.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12483=IKcos(j0);
IkReal x12484=IKsin(j0);
IkReal x12485=(r02*sj5);
IkReal x12486=((1.0)*sj4);
IkReal x12487=(cj5*r12);
IkReal x12488=((0.37429)*sj5);
IkReal x12489=(r10*sj6);
IkReal x12490=(r01*sj6);
IkReal x12491=((0.36442)*cj1);
IkReal x12492=(cj6*r01);
IkReal x12493=((0.01)*cj5);
IkReal x12494=(r12*sj5);
IkReal x12495=(cj6*sj4);
IkReal x12496=(r00*sj6);
IkReal x12497=((1.0)*sj5);
IkReal x12498=(cj6*r11);
IkReal x12499=(cj4*cj6);
IkReal x12500=(cj5*r02);
IkReal x12501=(cj4*cj5);
IkReal x12502=((1.0)*cj4);
IkReal x12503=(r11*sj6);
IkReal x12504=(cj5*x12498);
IkReal x12505=((0.069)*x12483);
IkReal x12506=((0.069)*x12484);
IkReal x12507=((1.0)*x12484);
IkReal x12508=((1.0)*x12483);
evalcond[0]=((((-1.0)*x12497*x12498))+(((-1.0)*x12489*x12497))+(((-1.0)*sj1*x12507))+x12487);
evalcond[1]=((((-1.0)*sj1*x12508))+x12500+(((-1.0)*x12496*x12497))+(((-1.0)*x12492*x12497)));
evalcond[2]=(((r10*x12499))+(((-1.0)*cj5*x12486*x12489))+(((-1.0)*x12486*x12494))+(((-1.0)*x12486*x12504))+(((-1.0)*x12502*x12503))+x12483);
evalcond[3]=(((r00*x12495))+((x12492*x12501))+((cj4*x12485))+(((-1.0)*x12486*x12490))+((x12496*x12501))+(((-1.0)*cj1*x12508)));
evalcond[4]=(((r10*x12495))+((x12498*x12501))+(((-1.0)*x12486*x12503))+(((-1.0)*cj1*x12507))+((cj4*x12494))+((x12489*x12501)));
evalcond[5]=(((r00*x12499))+(((-1.0)*x12507))+(((-1.0)*x12485*x12486))+(((-1.0)*cj5*x12486*x12492))+(((-1.0)*cj5*x12486*x12496))+(((-1.0)*x12490*x12502)));
evalcond[6]=(((x12493*x12496))+((x12492*x12493))+(((0.01)*x12485))+(((-1.0)*px))+(((0.37429)*x12500))+(((-1.0)*x12488*x12492))+(((-1.0)*x12488*x12496))+((x12483*x12491))+(((-1.0)*sj1*x12505))+x12505);
evalcond[7]=(((x12493*x12498))+(((-1.0)*x12488*x12489))+(((-1.0)*py))+((x12489*x12493))+((x12484*x12491))+(((-1.0)*x12488*x12498))+(((0.37429)*x12487))+(((0.01)*x12494))+(((-1.0)*sj1*x12506))+x12506);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12509=(cj6*sj4);
IkReal x12510=(cj5*r21);
IkReal x12511=(r22*sj5);
IkReal x12512=(cj4*cj6);
IkReal x12513=((1.0)*r21);
IkReal x12514=(cj6*sj5);
IkReal x12515=((1.0)*sj4);
IkReal x12516=(cj5*r22);
IkReal x12517=(cj5*r20*sj6);
IkReal x12518=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*sj6*x12513))+((r20*x12512))+(((-1.0)*x12509*x12510))+(((-1.0)*x12515*x12517))+(((-1.0)*x12511*x12515)));
evalcond[2]=((((-0.37429)*x12518))+(((0.01)*cj6*x12510))+(((0.069)*cj1))+(((0.37429)*x12516))+(((-1.0)*pz))+(((0.01)*x12517))+(((0.01)*x12511))+(((-0.37429)*r21*x12514))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((x12510*x12512))+(((-1.0)*sj4*sj6*x12513))+((r20*x12509))+((cj4*x12511))+((cj4*x12517)));
evalcond[4]=(cj1+(((-1.0)*x12518))+(((-1.0)*x12513*x12514))+x12516);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x12519=(cj6*sj5);
IkReal x12520=(sj5*sj6);
IkReal x12521=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs((((r10*x12520))+(((-1.0)*r12*x12521))+((r11*x12519)))))+(IKabs((((r01*x12519))+(((-1.0)*r02*x12521))+((r00*x12520))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x12522=(cj6*sj4);
IkReal x12523=((1.0)*sj6);
IkReal x12524=(cj5*r21);
IkReal x12525=(r22*sj5);
IkReal x12526=(cj4*cj6);
IkReal x12527=(cj4*sj5);
IkReal x12528=(r20*sj5);
IkReal x12529=(cj5*r22);
IkReal x12530=(cj5*r20*sj6);
IkReal x12531=(cj6*r21*sj5);
IkReal x12532=(cj4*cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*r21*x12523))+(((-1.0)*x12522*x12524))+((r20*x12526))+(((-1.0)*sj4*x12525))+(((-1.0)*cj5*r20*sj4*x12523)));
evalcond[2]=((-0.36442)+(((-0.37429)*x12531))+(((0.01)*x12530))+(((-1.0)*pz))+(((0.37429)*x12529))+(((0.01)*cj6*x12524))+(((0.01)*x12525))+(((-0.37429)*sj6*x12528)));
evalcond[3]=((1.0)+((cj4*x12525))+(((-1.0)*r21*sj4*x12523))+((r20*x12522))+((x12524*x12526))+((cj4*x12530)));
evalcond[4]=((((-1.0)*x12523*x12528))+(((-1.0)*x12531))+x12529);
evalcond[5]=(((r00*x12532))+((cj5*r01*x12526))+((r00*x12522))+(((-1.0)*r01*sj4*x12523))+((r02*x12527)));
evalcond[6]=(((r10*x12522))+(((-1.0)*r11*sj4*x12523))+((cj5*r11*x12526))+((r12*x12527))+((r10*x12532)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12533=(cj6*sj5);
IkReal x12534=(sj5*sj6);
IkReal x12535=((1.0)*cj5);
if( IKabs((((r11*x12533))+(((-1.0)*r12*x12535))+((r10*x12534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x12534))+(((-1.0)*r02*x12535))+((r01*x12533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x12533))+(((-1.0)*r12*x12535))+((r10*x12534))))+IKsqr((((r00*x12534))+(((-1.0)*r02*x12535))+((r01*x12533))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x12533))+(((-1.0)*r12*x12535))+((r10*x12534))), (((r00*x12534))+(((-1.0)*r02*x12535))+((r01*x12533))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12536=IKsin(j0);
IkReal x12537=IKcos(j0);
IkReal x12538=((1.0)*sj4);
IkReal x12539=(cj5*r12);
IkReal x12540=(r10*sj6);
IkReal x12541=((0.37429)*sj5);
IkReal x12542=(cj6*r01);
IkReal x12543=((0.01)*cj5);
IkReal x12544=(r12*sj5);
IkReal x12545=(r00*sj6);
IkReal x12546=((1.0)*sj5);
IkReal x12547=(r02*sj5);
IkReal x12548=(cj6*r11);
IkReal x12549=(cj4*cj6);
IkReal x12550=(cj5*r02);
IkReal x12551=(cj5*x12548);
IkReal x12552=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x12546*x12548))+(((-1.0)*x12540*x12546))+x12536+x12539);
evalcond[1]=((((-1.0)*x12545*x12546))+(((-1.0)*x12542*x12546))+x12550+x12537);
evalcond[2]=((((-1.0)*x12538*x12547))+((r00*x12549))+(((-1.0)*r01*x12552))+(((-1.0)*cj5*x12538*x12545))+(((-1.0)*cj5*x12538*x12542))+x12536);
evalcond[3]=((((-1.0)*x12538*x12544))+((r10*x12549))+(((-1.0)*x12537))+(((-1.0)*cj5*x12538*x12540))+(((-1.0)*x12538*x12551))+(((-1.0)*r11*x12552)));
evalcond[4]=(((x12542*x12543))+(((0.37429)*x12550))+(((-1.0)*x12541*x12545))+(((-1.0)*x12541*x12542))+(((0.138)*x12537))+(((0.01)*x12547))+(((-1.0)*px))+((x12543*x12545)));
evalcond[5]=((((-1.0)*x12541*x12548))+(((0.37429)*x12539))+(((0.138)*x12536))+(((0.01)*x12544))+((x12540*x12543))+(((-1.0)*py))+((x12543*x12548))+(((-1.0)*x12540*x12541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12553=((0.01)*cj5);
IkReal x12554=(cj6*r11);
IkReal x12555=(cj6*sj4);
IkReal x12556=(r10*sj6);
IkReal x12557=((0.37429)*sj5);
IkReal x12558=((1.0)*sj6);
IkReal x12559=(r00*sj6);
IkReal x12560=(r20*sj6);
IkReal x12561=(cj5*r21);
IkReal x12562=((0.01)*sj5);
IkReal x12563=(cj4*cj6);
IkReal x12564=(cj4*cj5);
IkReal x12565=(cj6*r01);
IkReal x12566=((0.37429)*cj5);
IkReal x12567=((1.0)*sj5);
IkReal x12568=(cj6*r21);
IkReal x12569=(cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*sj4*x12567))+(((-1.0)*cj4*r21*x12558))+(((-1.0)*cj5*r20*sj4*x12558))+((r20*x12563))+(((-1.0)*x12555*x12561)));
evalcond[2]=((0.36442)+((x12553*x12560))+((x12553*x12568))+(((-1.0)*pz))+(((-1.0)*x12557*x12568))+(((-1.0)*x12557*x12560))+((r22*x12566))+((r22*x12562)));
evalcond[3]=(((x12553*x12565))+((x12553*x12559))+(((-1.0)*px))+(((-1.0)*x12557*x12565))+(((-1.0)*x12557*x12559))+((r02*x12562))+((r02*x12566)));
evalcond[4]=(((r12*x12566))+((r12*x12562))+((x12553*x12554))+((x12553*x12556))+(((-1.0)*x12554*x12557))+(((-1.0)*py))+(((-1.0)*x12556*x12557)));
evalcond[5]=((-1.0)+((r20*x12555))+((x12560*x12564))+((x12561*x12563))+((r22*x12569))+(((-1.0)*r21*sj4*x12558)));
evalcond[6]=(((cj5*r22))+(((-1.0)*x12567*x12568))+(((-1.0)*r20*sj5*x12558)));
evalcond[7]=((((-1.0)*r01*sj4*x12558))+((r00*x12555))+((cj5*r01*x12563))+((r02*x12569))+((x12559*x12564)));
evalcond[8]=(((r12*x12569))+((x12556*x12564))+((r10*x12555))+((x12554*x12564))+(((-1.0)*r11*sj4*x12558)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12570=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x12570))+(((-1.0)*r10*sj6*x12570)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x12570))+(((-1.0)*r00*sj6*x12570))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x12570))+(((-1.0)*r10*sj6*x12570))))+IKsqr(((((-1.0)*cj6*r01*x12570))+(((-1.0)*r00*sj6*x12570))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x12570))+(((-1.0)*r10*sj6*x12570))), ((((-1.0)*cj6*r01*x12570))+(((-1.0)*r00*sj6*x12570))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12571=IKsin(j0);
IkReal x12572=(cj4*cj6);
IkReal x12573=((1.0)*sj5);
IkReal x12574=(cj6*r11);
IkReal x12575=(cj6*r01);
IkReal x12576=((1.0)*(IKcos(j0)));
IkReal x12577=((1.0)*cj4*sj6);
IkReal x12578=((1.0)*cj5*sj4);
IkReal x12579=(sj6*x12578);
evalcond[0]=(((cj5*r12))+(((-1.0)*x12573*x12574))+(((-1.0)*x12571))+(((-1.0)*r10*sj6*x12573)));
evalcond[1]=((((-1.0)*x12573*x12575))+(((-1.0)*x12576))+(((-1.0)*r00*sj6*x12573))+((cj5*r02)));
evalcond[2]=((((-1.0)*x12575*x12578))+((r00*x12572))+x12571+(((-1.0)*r00*x12579))+(((-1.0)*r01*x12577))+(((-1.0)*r02*sj4*x12573)));
evalcond[3]=((((-1.0)*r12*sj4*x12573))+(((-1.0)*x12574*x12578))+(((-1.0)*x12576))+(((-1.0)*r10*x12579))+(((-1.0)*r11*x12577))+((r10*x12572)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12580=(cj4*cj5);
CheckValue<IkReal> x12581=IKPowWithIntegerCheck(sj1,-1);
if(!x12581.valid){
continue;
}
CheckValue<IkReal> x12582=IKPowWithIntegerCheck(cj1,-1);
if(!x12582.valid){
continue;
}
if( IKabs(((x12581.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12582.value)*((((cj6*r01*x12580))+((cj6*r00*sj4))+((r00*sj6*x12580))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12581.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))+IKsqr(((x12582.value)*((((cj6*r01*x12580))+((cj6*r00*sj4))+((r00*sj6*x12580))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12581.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))), ((x12582.value)*((((cj6*r01*x12580))+((cj6*r00*sj4))+((r00*sj6*x12580))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12583=IKsin(j0);
IkReal x12584=IKcos(j0);
IkReal x12585=((1.0)*sj4);
IkReal x12586=(cj5*r12);
IkReal x12587=((0.37429)*sj5);
IkReal x12588=(r10*sj6);
IkReal x12589=(r01*sj6);
IkReal x12590=((0.36442)*cj1);
IkReal x12591=(cj6*r01);
IkReal x12592=((0.01)*cj5);
IkReal x12593=(cj6*sj4);
IkReal x12594=(r00*sj6);
IkReal x12595=((1.0)*sj5);
IkReal x12596=(r02*sj5);
IkReal x12597=(cj6*r11);
IkReal x12598=(r12*sj5);
IkReal x12599=(cj4*cj6);
IkReal x12600=(cj5*r02);
IkReal x12601=(cj4*cj5);
IkReal x12602=((1.0)*cj4);
IkReal x12603=(r11*sj6);
IkReal x12604=(cj5*x12597);
IkReal x12605=(sj1*x12583);
IkReal x12606=((1.0)*x12584);
IkReal x12607=((0.069)*x12584);
evalcond[0]=((((-1.0)*x12588*x12595))+(((-1.0)*x12595*x12597))+x12605+x12586);
evalcond[1]=((((-1.0)*x12591*x12595))+x12600+(((-1.0)*x12594*x12595))+((sj1*x12584)));
evalcond[2]=(((r00*x12599))+(((-1.0)*cj5*x12585*x12594))+(((-1.0)*cj5*x12585*x12591))+(((-1.0)*x12585*x12596))+x12583+(((-1.0)*x12589*x12602)));
evalcond[3]=(((r00*x12593))+(((-1.0)*cj1*x12606))+((x12591*x12601))+(((-1.0)*x12585*x12589))+((x12594*x12601))+((cj4*x12596)));
evalcond[4]=((((-1.0)*x12585*x12603))+((x12588*x12601))+(((-1.0)*cj1*x12583))+((x12597*x12601))+((cj4*x12598))+((r10*x12593)));
evalcond[5]=((((-1.0)*cj5*x12585*x12588))+(((-1.0)*x12606))+(((-1.0)*x12585*x12598))+(((-1.0)*x12585*x12604))+(((-1.0)*x12602*x12603))+((r10*x12599)));
evalcond[6]=(((x12584*x12590))+(((-1.0)*px))+(((0.37429)*x12600))+(((-1.0)*x12587*x12594))+(((-1.0)*x12587*x12591))+((x12591*x12592))+x12607+((sj1*x12607))+((x12592*x12594))+(((0.01)*x12596)));
evalcond[7]=((((0.069)*x12583))+(((0.37429)*x12586))+(((-1.0)*py))+(((-1.0)*x12587*x12597))+(((0.069)*x12605))+(((-1.0)*x12587*x12588))+((x12583*x12590))+((x12592*x12597))+((x12588*x12592))+(((0.01)*x12598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12608=(cj6*r01);
IkReal x12609=(cj5*sj4);
IkReal x12610=(r00*sj6);
CheckValue<IkReal> x12611=IKPowWithIntegerCheck(sj1,-1);
if(!x12611.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x12609*x12610))+((x12608*x12609)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12611.value)*((((sj5*x12608))+((sj5*x12610))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x12609*x12610))+((x12608*x12609))))+IKsqr(((x12611.value)*((((sj5*x12608))+((sj5*x12610))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x12609*x12610))+((x12608*x12609))), ((x12611.value)*((((sj5*x12608))+((sj5*x12610))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12612=IKsin(j0);
IkReal x12613=IKcos(j0);
IkReal x12614=((1.0)*sj4);
IkReal x12615=(cj5*r12);
IkReal x12616=((0.37429)*sj5);
IkReal x12617=(r10*sj6);
IkReal x12618=(r01*sj6);
IkReal x12619=((0.36442)*cj1);
IkReal x12620=(cj6*r01);
IkReal x12621=((0.01)*cj5);
IkReal x12622=(cj6*sj4);
IkReal x12623=(r00*sj6);
IkReal x12624=((1.0)*sj5);
IkReal x12625=(r02*sj5);
IkReal x12626=(cj6*r11);
IkReal x12627=(r12*sj5);
IkReal x12628=(cj4*cj6);
IkReal x12629=(cj5*r02);
IkReal x12630=(cj4*cj5);
IkReal x12631=((1.0)*cj4);
IkReal x12632=(r11*sj6);
IkReal x12633=(cj5*x12626);
IkReal x12634=(sj1*x12612);
IkReal x12635=((1.0)*x12613);
IkReal x12636=((0.069)*x12613);
evalcond[0]=((((-1.0)*x12617*x12624))+x12634+x12615+(((-1.0)*x12624*x12626)));
evalcond[1]=((((-1.0)*x12620*x12624))+(((-1.0)*x12623*x12624))+((sj1*x12613))+x12629);
evalcond[2]=((((-1.0)*x12618*x12631))+(((-1.0)*cj5*x12614*x12623))+(((-1.0)*cj5*x12614*x12620))+((r00*x12628))+x12612+(((-1.0)*x12614*x12625)));
evalcond[3]=((((-1.0)*x12614*x12618))+((x12623*x12630))+((x12620*x12630))+((r00*x12622))+(((-1.0)*cj1*x12635))+((cj4*x12625)));
evalcond[4]=(((x12626*x12630))+(((-1.0)*cj1*x12612))+((x12617*x12630))+(((-1.0)*x12614*x12632))+((cj4*x12627))+((r10*x12622)));
evalcond[5]=((((-1.0)*cj5*x12614*x12617))+(((-1.0)*x12631*x12632))+(((-1.0)*x12635))+(((-1.0)*x12614*x12633))+((r10*x12628))+(((-1.0)*x12614*x12627)));
evalcond[6]=((((-1.0)*x12616*x12623))+(((-1.0)*x12616*x12620))+((x12621*x12623))+((x12620*x12621))+(((-1.0)*px))+((sj1*x12636))+x12636+(((0.01)*x12625))+((x12613*x12619))+(((0.37429)*x12629)));
evalcond[7]=((((-1.0)*x12616*x12626))+(((0.069)*x12612))+(((-1.0)*x12616*x12617))+((x12621*x12626))+(((-1.0)*py))+(((0.069)*x12634))+((x12617*x12621))+((x12612*x12619))+(((0.01)*x12627))+(((0.37429)*x12615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12637=(cj6*sj5);
IkReal x12638=(sj5*sj6);
IkReal x12639=((1.0)*cj5);
CheckValue<IkReal> x12640=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x12640.valid){
continue;
}
CheckValue<IkReal> x12641 = IKatan2WithCheck(IkReal((((r11*x12637))+((r10*x12638))+(((-1.0)*r12*x12639)))),(((r01*x12637))+((r00*x12638))+(((-1.0)*r02*x12639))),IKFAST_ATAN2_MAGTHRESH);
if(!x12641.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12640.value)))+(x12641.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12642=IKsin(j0);
IkReal x12643=IKcos(j0);
IkReal x12644=((1.0)*sj4);
IkReal x12645=(cj5*r12);
IkReal x12646=((0.37429)*sj5);
IkReal x12647=(r10*sj6);
IkReal x12648=(r01*sj6);
IkReal x12649=((0.36442)*cj1);
IkReal x12650=(cj6*r01);
IkReal x12651=((0.01)*cj5);
IkReal x12652=(cj6*sj4);
IkReal x12653=(r00*sj6);
IkReal x12654=((1.0)*sj5);
IkReal x12655=(r02*sj5);
IkReal x12656=(cj6*r11);
IkReal x12657=(r12*sj5);
IkReal x12658=(cj4*cj6);
IkReal x12659=(cj5*r02);
IkReal x12660=(cj4*cj5);
IkReal x12661=((1.0)*cj4);
IkReal x12662=(r11*sj6);
IkReal x12663=(cj5*x12656);
IkReal x12664=(sj1*x12642);
IkReal x12665=((1.0)*x12643);
IkReal x12666=((0.069)*x12643);
evalcond[0]=((((-1.0)*x12647*x12654))+x12645+x12664+(((-1.0)*x12654*x12656)));
evalcond[1]=(((sj1*x12643))+(((-1.0)*x12650*x12654))+(((-1.0)*x12653*x12654))+x12659);
evalcond[2]=((((-1.0)*x12648*x12661))+(((-1.0)*x12644*x12655))+x12642+((r00*x12658))+(((-1.0)*cj5*x12644*x12653))+(((-1.0)*cj5*x12644*x12650)));
evalcond[3]=((((-1.0)*cj1*x12665))+((cj4*x12655))+((x12650*x12660))+((x12653*x12660))+((r00*x12652))+(((-1.0)*x12644*x12648)));
evalcond[4]=(((r10*x12652))+(((-1.0)*x12644*x12662))+((x12647*x12660))+((cj4*x12657))+((x12656*x12660))+(((-1.0)*cj1*x12642)));
evalcond[5]=((((-1.0)*x12661*x12662))+((r10*x12658))+(((-1.0)*x12665))+(((-1.0)*cj5*x12644*x12647))+(((-1.0)*x12644*x12657))+(((-1.0)*x12644*x12663)));
evalcond[6]=(((sj1*x12666))+((x12643*x12649))+(((0.37429)*x12659))+((x12651*x12653))+(((-1.0)*px))+((x12650*x12651))+(((-1.0)*x12646*x12653))+(((-1.0)*x12646*x12650))+x12666+(((0.01)*x12655)));
evalcond[7]=(((x12642*x12649))+((x12651*x12656))+(((0.069)*x12664))+(((0.069)*x12642))+(((-1.0)*py))+(((-1.0)*x12646*x12656))+(((0.37429)*x12645))+((x12647*x12651))+(((0.01)*x12657))+(((-1.0)*x12646*x12647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12676=IKPowWithIntegerCheck(cj1,-1);
if(!x12676.valid){
continue;
}
IkReal x12667=x12676.value;
IkReal x12668=(cj4*cj5);
IkReal x12669=(r00*sj2);
IkReal x12670=((1.0)*sj6);
IkReal x12671=(r01*sj4);
IkReal x12672=(cj1*sj5);
IkReal x12673=(cj6*r01);
IkReal x12674=(cj6*sj4);
IkReal x12675=(cj4*r02*sj5);
CheckValue<IkReal> x12677=IKPowWithIntegerCheck(cj2,-1);
if(!x12677.valid){
continue;
}
CheckValue<IkReal> x12678=IKPowWithIntegerCheck(sj1,-1);
if(!x12678.valid){
continue;
}
if( IKabs((x12667*(x12677.value)*(x12678.value)*(((((-1.0)*sj2*x12670*x12671))+((cj1*cj5*r12))+((sj2*x12668*x12673))+(((-1.0)*r10*x12670*x12672))+((x12669*x12674))+((sj6*x12668*x12669))+(((-1.0)*cj6*r11*x12672))+((sj2*x12675)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12667*((((x12668*x12673))+((r00*sj6*x12668))+(((-1.0)*x12670*x12671))+x12675+((r00*x12674)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12667*(x12677.value)*(x12678.value)*(((((-1.0)*sj2*x12670*x12671))+((cj1*cj5*r12))+((sj2*x12668*x12673))+(((-1.0)*r10*x12670*x12672))+((x12669*x12674))+((sj6*x12668*x12669))+(((-1.0)*cj6*r11*x12672))+((sj2*x12675))))))+IKsqr((x12667*((((x12668*x12673))+((r00*sj6*x12668))+(((-1.0)*x12670*x12671))+x12675+((r00*x12674))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x12667*(x12677.value)*(x12678.value)*(((((-1.0)*sj2*x12670*x12671))+((cj1*cj5*r12))+((sj2*x12668*x12673))+(((-1.0)*r10*x12670*x12672))+((x12669*x12674))+((sj6*x12668*x12669))+(((-1.0)*cj6*r11*x12672))+((sj2*x12675))))), (x12667*((((x12668*x12673))+((r00*sj6*x12668))+(((-1.0)*x12670*x12671))+x12675+((r00*x12674))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12679=IKsin(j0);
IkReal x12680=IKcos(j0);
IkReal x12681=((1.0)*sj4);
IkReal x12682=(cj5*r12);
IkReal x12683=((0.37429)*sj5);
IkReal x12684=(r10*sj6);
IkReal x12685=((0.36442)*cj1);
IkReal x12686=(cj6*r11);
IkReal x12687=(r01*sj6);
IkReal x12688=(r00*sj6);
IkReal x12689=((0.069)*sj2);
IkReal x12690=(cj6*r01);
IkReal x12691=((0.01)*cj5);
IkReal x12692=(r12*sj5);
IkReal x12693=((1.0)*sj5);
IkReal x12694=(cj6*r10);
IkReal x12695=(r02*sj5);
IkReal x12696=((1.0)*sj1);
IkReal x12697=((1.0)*cj1);
IkReal x12698=(cj5*r02);
IkReal x12699=(cj4*cj5);
IkReal x12700=(cj6*r00);
IkReal x12701=((1.0)*cj4);
IkReal x12702=(r11*sj6);
IkReal x12703=(cj5*x12686);
IkReal x12704=(cj2*x12680);
IkReal x12705=((0.069)*x12679);
IkReal x12706=(sj2*x12680);
IkReal x12707=((1.0)*x12679);
evalcond[0]=((((-1.0)*x12684*x12693))+x12706+(((-1.0)*cj2*x12679*x12696))+x12682+(((-1.0)*x12686*x12693)));
evalcond[1]=((((-1.0)*sj2*x12707))+(((-1.0)*x12688*x12693))+(((-1.0)*x12696*x12704))+x12698+(((-1.0)*x12690*x12693)));
evalcond[2]=(((x12690*x12699))+((cj4*x12695))+((sj4*x12700))+(((-1.0)*x12680*x12697))+((x12688*x12699))+(((-1.0)*x12681*x12687)));
evalcond[3]=(((x12684*x12699))+((sj4*x12694))+((cj4*x12692))+(((-1.0)*x12679*x12697))+(((-1.0)*x12681*x12702))+((x12686*x12699)));
evalcond[4]=((((-1.0)*x12701*x12702))+(((-1.0)*cj5*x12681*x12684))+((cj4*x12694))+x12704+(((-1.0)*x12681*x12703))+((sj1*sj2*x12679))+(((-1.0)*x12681*x12692)));
evalcond[5]=((((-1.0)*cj2*x12707))+(((-1.0)*cj5*x12681*x12688))+((cj4*x12700))+(((-1.0)*cj5*x12681*x12690))+(((-1.0)*x12687*x12701))+((sj1*x12706))+(((-1.0)*x12681*x12695)));
evalcond[6]=((((-1.0)*x12683*x12690))+((x12690*x12691))+(((-1.0)*px))+(((-0.069)*sj1*x12704))+(((-1.0)*x12679*x12689))+((x12680*x12685))+(((0.069)*x12680))+(((0.01)*x12695))+((x12688*x12691))+(((0.37429)*x12698))+(((-1.0)*x12683*x12688)));
evalcond[7]=(((x12679*x12685))+((x12684*x12691))+(((0.37429)*x12682))+(((-1.0)*py))+(((-1.0)*cj2*sj1*x12705))+x12705+((x12680*x12689))+(((0.01)*x12692))+((x12686*x12691))+(((-1.0)*x12683*x12684))+(((-1.0)*x12683*x12686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12717=IKPowWithIntegerCheck(cj1,-1);
if(!x12717.valid){
continue;
}
IkReal x12708=x12717.value;
IkReal x12709=(cj4*cj5);
IkReal x12710=(cj6*r11);
IkReal x12711=(r10*sj6);
IkReal x12712=(cj1*sj5);
IkReal x12713=(cj2*sj1);
IkReal x12714=(cj6*r10*sj4);
IkReal x12715=(cj4*r12*sj5);
IkReal x12716=((1.0)*r11*sj4*sj6);
CheckValue<IkReal> x12718=IKPowWithIntegerCheck(sj2,-1);
if(!x12718.valid){
continue;
}
if( IKabs((x12708*((((x12709*x12711))+((x12709*x12710))+(((-1.0)*x12716))+x12714+x12715)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12708*(x12718.value)*((((x12709*x12711*x12713))+((x12709*x12710*x12713))+(((-1.0)*cj1*cj5*r12))+((x12711*x12712))+((x12710*x12712))+(((-1.0)*x12713*x12716))+((x12713*x12715))+((x12713*x12714)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12708*((((x12709*x12711))+((x12709*x12710))+(((-1.0)*x12716))+x12714+x12715))))+IKsqr((x12708*(x12718.value)*((((x12709*x12711*x12713))+((x12709*x12710*x12713))+(((-1.0)*cj1*cj5*r12))+((x12711*x12712))+((x12710*x12712))+(((-1.0)*x12713*x12716))+((x12713*x12715))+((x12713*x12714))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x12708*((((x12709*x12711))+((x12709*x12710))+(((-1.0)*x12716))+x12714+x12715))), (x12708*(x12718.value)*((((x12709*x12711*x12713))+((x12709*x12710*x12713))+(((-1.0)*cj1*cj5*r12))+((x12711*x12712))+((x12710*x12712))+(((-1.0)*x12713*x12716))+((x12713*x12715))+((x12713*x12714))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12719=IKsin(j0);
IkReal x12720=IKcos(j0);
IkReal x12721=((1.0)*sj4);
IkReal x12722=(cj5*r12);
IkReal x12723=((0.37429)*sj5);
IkReal x12724=(r10*sj6);
IkReal x12725=((0.36442)*cj1);
IkReal x12726=(cj6*r11);
IkReal x12727=(r01*sj6);
IkReal x12728=(r00*sj6);
IkReal x12729=((0.069)*sj2);
IkReal x12730=(cj6*r01);
IkReal x12731=((0.01)*cj5);
IkReal x12732=(r12*sj5);
IkReal x12733=((1.0)*sj5);
IkReal x12734=(cj6*r10);
IkReal x12735=(r02*sj5);
IkReal x12736=((1.0)*sj1);
IkReal x12737=((1.0)*cj1);
IkReal x12738=(cj5*r02);
IkReal x12739=(cj4*cj5);
IkReal x12740=(cj6*r00);
IkReal x12741=((1.0)*cj4);
IkReal x12742=(r11*sj6);
IkReal x12743=(cj5*x12726);
IkReal x12744=(cj2*x12720);
IkReal x12745=((0.069)*x12719);
IkReal x12746=(sj2*x12720);
IkReal x12747=((1.0)*x12719);
evalcond[0]=((((-1.0)*cj2*x12719*x12736))+x12722+x12746+(((-1.0)*x12724*x12733))+(((-1.0)*x12726*x12733)));
evalcond[1]=((((-1.0)*x12728*x12733))+(((-1.0)*sj2*x12747))+x12738+(((-1.0)*x12730*x12733))+(((-1.0)*x12736*x12744)));
evalcond[2]=(((cj4*x12735))+((x12730*x12739))+((x12728*x12739))+((sj4*x12740))+(((-1.0)*x12721*x12727))+(((-1.0)*x12720*x12737)));
evalcond[3]=(((cj4*x12732))+((sj4*x12734))+(((-1.0)*x12719*x12737))+((x12724*x12739))+(((-1.0)*x12721*x12742))+((x12726*x12739)));
evalcond[4]=((((-1.0)*x12741*x12742))+((cj4*x12734))+(((-1.0)*cj5*x12721*x12724))+x12744+(((-1.0)*x12721*x12743))+((sj1*sj2*x12719))+(((-1.0)*x12721*x12732)));
evalcond[5]=(((cj4*x12740))+(((-1.0)*cj5*x12721*x12730))+(((-1.0)*cj5*x12721*x12728))+((sj1*x12746))+(((-1.0)*x12727*x12741))+(((-1.0)*x12721*x12735))+(((-1.0)*cj2*x12747)));
evalcond[6]=(((x12730*x12731))+(((-1.0)*x12723*x12728))+(((-1.0)*x12723*x12730))+((x12728*x12731))+(((-1.0)*px))+(((-1.0)*x12719*x12729))+(((0.37429)*x12738))+(((0.01)*x12735))+(((0.069)*x12720))+((x12720*x12725))+(((-0.069)*sj1*x12744)));
evalcond[7]=((((-1.0)*x12723*x12726))+(((-1.0)*x12723*x12724))+((x12719*x12725))+(((-1.0)*cj2*sj1*x12745))+(((-1.0)*py))+((x12724*x12731))+(((0.37429)*x12722))+x12745+(((0.01)*x12732))+((x12720*x12729))+((x12726*x12731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12748=(cj2*sj1);
IkReal x12749=(cj5*r02);
IkReal x12750=(cj6*sj5);
IkReal x12751=((1.0)*r01);
IkReal x12752=(cj5*r12);
IkReal x12753=((1.0)*r00);
IkReal x12754=(sj5*sj6);
IkReal x12755=(sj2*x12754);
CheckValue<IkReal> x12756=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x12756.valid){
continue;
}
CheckValue<IkReal> x12757 = IKatan2WithCheck(IkReal((((sj2*x12749))+(((-1.0)*r10*x12748*x12754))+(((-1.0)*sj2*x12750*x12751))+(((-1.0)*r11*x12748*x12750))+(((-1.0)*x12753*x12755))+((x12748*x12752)))),((((-1.0)*x12748*x12753*x12754))+((r11*sj2*x12750))+(((-1.0)*sj2*x12752))+(((-1.0)*x12748*x12750*x12751))+((r10*x12755))+((x12748*x12749))),IKFAST_ATAN2_MAGTHRESH);
if(!x12757.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12756.value)))+(x12757.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12758=IKsin(j0);
IkReal x12759=IKcos(j0);
IkReal x12760=((1.0)*sj4);
IkReal x12761=(cj5*r12);
IkReal x12762=((0.37429)*sj5);
IkReal x12763=(r10*sj6);
IkReal x12764=((0.36442)*cj1);
IkReal x12765=(cj6*r11);
IkReal x12766=(r01*sj6);
IkReal x12767=(r00*sj6);
IkReal x12768=((0.069)*sj2);
IkReal x12769=(cj6*r01);
IkReal x12770=((0.01)*cj5);
IkReal x12771=(r12*sj5);
IkReal x12772=((1.0)*sj5);
IkReal x12773=(cj6*r10);
IkReal x12774=(r02*sj5);
IkReal x12775=((1.0)*sj1);
IkReal x12776=((1.0)*cj1);
IkReal x12777=(cj5*r02);
IkReal x12778=(cj4*cj5);
IkReal x12779=(cj6*r00);
IkReal x12780=((1.0)*cj4);
IkReal x12781=(r11*sj6);
IkReal x12782=(cj5*x12765);
IkReal x12783=(cj2*x12759);
IkReal x12784=((0.069)*x12758);
IkReal x12785=(sj2*x12759);
IkReal x12786=((1.0)*x12758);
evalcond[0]=((((-1.0)*x12763*x12772))+x12785+x12761+(((-1.0)*cj2*x12758*x12775))+(((-1.0)*x12765*x12772)));
evalcond[1]=((((-1.0)*x12767*x12772))+(((-1.0)*x12769*x12772))+x12777+(((-1.0)*sj2*x12786))+(((-1.0)*x12775*x12783)));
evalcond[2]=(((sj4*x12779))+((x12767*x12778))+(((-1.0)*x12759*x12776))+((cj4*x12774))+((x12769*x12778))+(((-1.0)*x12760*x12766)));
evalcond[3]=(((sj4*x12773))+((x12765*x12778))+(((-1.0)*x12758*x12776))+(((-1.0)*x12760*x12781))+((x12763*x12778))+((cj4*x12771)));
evalcond[4]=((((-1.0)*x12760*x12782))+((sj1*sj2*x12758))+x12783+(((-1.0)*cj5*x12760*x12763))+(((-1.0)*x12760*x12771))+(((-1.0)*x12780*x12781))+((cj4*x12773)));
evalcond[5]=(((sj1*x12785))+(((-1.0)*cj2*x12786))+(((-1.0)*x12766*x12780))+(((-1.0)*cj5*x12760*x12769))+(((-1.0)*cj5*x12760*x12767))+(((-1.0)*x12760*x12774))+((cj4*x12779)));
evalcond[6]=((((-1.0)*x12762*x12767))+(((-1.0)*x12762*x12769))+((x12767*x12770))+(((0.37429)*x12777))+((x12759*x12764))+(((0.01)*x12774))+(((-0.069)*sj1*x12783))+(((-1.0)*px))+(((-1.0)*x12758*x12768))+(((0.069)*x12759))+((x12769*x12770)));
evalcond[7]=(((x12765*x12770))+(((-1.0)*x12762*x12763))+(((-1.0)*x12762*x12765))+(((-1.0)*cj2*sj1*x12784))+((x12758*x12764))+((x12759*x12768))+(((0.01)*x12771))+(((-1.0)*py))+x12784+((x12763*x12770))+(((0.37429)*x12761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12787=(cj2*sj1);
IkReal x12788=(cj5*r02);
IkReal x12789=(cj6*sj5);
IkReal x12790=((1.0)*r01);
IkReal x12791=(cj5*r12);
IkReal x12792=((1.0)*r00);
IkReal x12793=(sj5*sj6);
IkReal x12794=(sj2*x12793);
CheckValue<IkReal> x12795 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x12787*x12789))+(((-1.0)*x12792*x12794))+(((-1.0)*sj2*x12789*x12790))+((sj2*x12788))+((x12787*x12791))+(((-1.0)*r10*x12787*x12793)))),(((x12787*x12788))+(((-1.0)*x12787*x12789*x12790))+(((-1.0)*sj2*x12791))+((r10*x12794))+((r11*sj2*x12789))+(((-1.0)*x12787*x12792*x12793))),IKFAST_ATAN2_MAGTHRESH);
if(!x12795.valid){
continue;
}
CheckValue<IkReal> x12796=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x12796.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x12795.value)+(((1.5707963267949)*(x12796.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12797=IKsin(j0);
IkReal x12798=IKcos(j0);
IkReal x12799=((0.01)*cj5);
IkReal x12800=(cj6*r11);
IkReal x12801=(cj5*r12);
IkReal x12802=(r10*sj6);
IkReal x12803=((0.37429)*sj5);
IkReal x12804=((0.36442)*cj1);
IkReal x12805=((1.0)*sj5);
IkReal x12806=(r00*sj6);
IkReal x12807=(cj6*r01);
IkReal x12808=(cj2*sj1);
IkReal x12809=(cj5*r02);
IkReal x12810=((0.01)*sj5);
IkReal x12811=((0.069)*x12797);
IkReal x12812=((0.069)*x12798);
IkReal x12813=((1.0)*x12797);
evalcond[0]=(x12801+(((-1.0)*x12800*x12805))+(((-1.0)*x12802*x12805))+(((-1.0)*x12808*x12813))+((sj2*x12798)));
evalcond[1]=(x12809+(((-1.0)*sj2*x12813))+(((-1.0)*x12805*x12807))+(((-1.0)*x12805*x12806))+(((-1.0)*x12798*x12808)));
evalcond[2]=(x12812+((x12799*x12806))+((x12799*x12807))+((r02*x12810))+((x12798*x12804))+(((-1.0)*x12803*x12807))+(((-1.0)*x12803*x12806))+(((-1.0)*sj2*x12811))+(((-1.0)*px))+(((0.37429)*x12809))+(((-1.0)*x12808*x12812)));
evalcond[3]=(((sj2*x12812))+((x12797*x12804))+x12811+(((-1.0)*x12800*x12803))+((x12799*x12800))+((x12799*x12802))+((r12*x12810))+(((-1.0)*py))+(((-1.0)*x12802*x12803))+(((0.37429)*x12801))+(((-1.0)*x12808*x12811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12814=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x12814;
j4eval[1]=IKsign(x12814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12815=((1.0)*sj5);
IkReal x12816=((((-1.0)*r00*sj6*x12815))+(((-1.0)*cj6*r01*x12815))+((cj5*r02)));
j4eval[0]=x12816;
j4eval[1]=IKsign(x12816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12817=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x12817;
j4eval[1]=IKsign(x12817);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12818=(cj1*sj0);
IkReal x12819=(cj0*cj1);
IkReal x12820=(cj5*cj6);
IkReal x12821=((1.0)*sj6);
CheckValue<IkReal> x12822=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x12822.valid){
continue;
}
CheckValue<IkReal> x12823 = IKatan2WithCheck(IkReal((((r01*x12818*x12820))+(((-1.0)*r11*x12819*x12820))+((r02*sj5*x12818))+(((-1.0)*cj5*r10*x12819*x12821))+(((-1.0)*r12*sj5*x12819))+((cj5*r00*sj6*x12818)))),((((-1.0)*cj6*r00*x12818))+(((-1.0)*r11*x12819*x12821))+((cj6*r10*x12819))+((r01*sj6*x12818))),IKFAST_ATAN2_MAGTHRESH);
if(!x12823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12822.value)))+(x12823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12824=IKcos(j4);
IkReal x12825=IKsin(j4);
IkReal x12826=((1.0)*cj1);
IkReal x12827=(sj1*sj2);
IkReal x12828=(r10*sj6);
IkReal x12829=(r00*sj6);
IkReal x12830=((1.0)*sj6);
IkReal x12831=(r20*sj6);
IkReal x12832=(cj6*x12824);
IkReal x12833=(sj5*x12824);
IkReal x12834=(cj6*x12825);
IkReal x12835=(cj5*x12824);
IkReal x12836=(cj5*x12832);
IkReal x12837=((1.0)*sj5*x12825);
IkReal x12838=((1.0)*cj5*x12825);
evalcond[0]=(sj1+((r21*x12836))+((r22*x12833))+(((-1.0)*r21*x12825*x12830))+((r20*x12834))+((x12831*x12835)));
evalcond[1]=(((r02*x12833))+((r00*x12834))+((r01*x12836))+(((-1.0)*cj0*x12826))+(((-1.0)*r01*x12825*x12830))+((x12829*x12835)));
evalcond[2]=(((r10*x12834))+((r12*x12833))+((r11*x12836))+(((-1.0)*sj0*x12826))+((x12828*x12835))+(((-1.0)*r11*x12825*x12830)));
evalcond[3]=((((-1.0)*cj5*r21*x12834))+(((-1.0)*cj5*r20*x12825*x12830))+((cj1*sj2))+(((-1.0)*r22*x12837))+((r20*x12832))+(((-1.0)*r21*x12824*x12830)));
evalcond[4]=(((r10*x12832))+((sj0*x12827))+((cj0*cj2))+(((-1.0)*x12828*x12838))+(((-1.0)*r12*x12837))+(((-1.0)*r11*x12824*x12830))+(((-1.0)*cj5*r11*x12834)));
evalcond[5]=((((-1.0)*r01*x12824*x12830))+(((-1.0)*x12829*x12838))+((cj0*x12827))+(((-1.0)*cj2*sj0))+(((-1.0)*cj5*r01*x12834))+(((-1.0)*r02*x12837))+((r00*x12832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12839=(sj1*sj6);
IkReal x12840=((1.0)*cj6);
IkReal x12841=(cj1*sj0);
IkReal x12842=(cj5*cj6);
IkReal x12843=(r20*x12841);
CheckValue<IkReal> x12844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x12840))+(((-1.0)*r00*sj5*sj6))+((cj5*r02)))),-1);
if(!x12844.valid){
continue;
}
CheckValue<IkReal> x12845 = IKatan2WithCheck(IkReal((((r12*sj1*sj5))+((cj5*r10*x12839))+((r21*x12841*x12842))+((r11*sj1*x12842))+((r22*sj5*x12841))+((cj5*sj6*x12843)))),((((-1.0)*r10*sj1*x12840))+(((-1.0)*x12840*x12843))+((r11*x12839))+((r21*sj6*x12841))),IKFAST_ATAN2_MAGTHRESH);
if(!x12845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12844.value)))+(x12845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12846=IKcos(j4);
IkReal x12847=IKsin(j4);
IkReal x12848=((1.0)*cj1);
IkReal x12849=(sj1*sj2);
IkReal x12850=(r10*sj6);
IkReal x12851=(r00*sj6);
IkReal x12852=((1.0)*sj6);
IkReal x12853=(r20*sj6);
IkReal x12854=(cj6*x12846);
IkReal x12855=(sj5*x12846);
IkReal x12856=(cj6*x12847);
IkReal x12857=(cj5*x12846);
IkReal x12858=(cj5*x12854);
IkReal x12859=((1.0)*sj5*x12847);
IkReal x12860=((1.0)*cj5*x12847);
evalcond[0]=(((x12853*x12857))+sj1+((r22*x12855))+(((-1.0)*r21*x12847*x12852))+((r21*x12858))+((r20*x12856)));
evalcond[1]=(((r00*x12856))+((r01*x12858))+(((-1.0)*r01*x12847*x12852))+((r02*x12855))+((x12851*x12857))+(((-1.0)*cj0*x12848)));
evalcond[2]=(((r10*x12856))+(((-1.0)*r11*x12847*x12852))+(((-1.0)*sj0*x12848))+((r11*x12858))+((r12*x12855))+((x12850*x12857)));
evalcond[3]=((((-1.0)*cj5*r20*x12847*x12852))+(((-1.0)*r21*x12846*x12852))+(((-1.0)*r22*x12859))+((cj1*sj2))+(((-1.0)*cj5*r21*x12856))+((r20*x12854)));
evalcond[4]=((((-1.0)*cj5*r11*x12856))+(((-1.0)*r12*x12859))+((r10*x12854))+((sj0*x12849))+((cj0*cj2))+(((-1.0)*x12850*x12860))+(((-1.0)*r11*x12846*x12852)));
evalcond[5]=(((r00*x12854))+(((-1.0)*r02*x12859))+(((-1.0)*cj2*sj0))+((cj0*x12849))+(((-1.0)*x12851*x12860))+(((-1.0)*r01*x12846*x12852))+(((-1.0)*cj5*r01*x12856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12861=(cj0*cj1);
IkReal x12862=(cj5*cj6);
IkReal x12863=(cj5*sj6);
IkReal x12864=(r00*sj1);
IkReal x12865=((1.0)*cj6);
IkReal x12866=(r01*sj1);
CheckValue<IkReal> x12867=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x12867.valid){
continue;
}
CheckValue<IkReal> x12868 = IKatan2WithCheck(IkReal((((r22*sj5*x12861))+((r20*x12861*x12863))+((r02*sj1*sj5))+((x12863*x12864))+((r21*x12861*x12862))+((x12862*x12866)))),(((r21*sj6*x12861))+(((-1.0)*x12864*x12865))+(((-1.0)*r20*x12861*x12865))+((sj6*x12866))),IKFAST_ATAN2_MAGTHRESH);
if(!x12868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12867.value)))+(x12868.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12869=IKcos(j4);
IkReal x12870=IKsin(j4);
IkReal x12871=((1.0)*cj1);
IkReal x12872=(sj1*sj2);
IkReal x12873=(r10*sj6);
IkReal x12874=(r00*sj6);
IkReal x12875=((1.0)*sj6);
IkReal x12876=(r20*sj6);
IkReal x12877=(cj6*x12869);
IkReal x12878=(sj5*x12869);
IkReal x12879=(cj6*x12870);
IkReal x12880=(cj5*x12869);
IkReal x12881=(cj5*x12877);
IkReal x12882=((1.0)*sj5*x12870);
IkReal x12883=((1.0)*cj5*x12870);
evalcond[0]=((((-1.0)*r21*x12870*x12875))+sj1+((r22*x12878))+((r20*x12879))+((r21*x12881))+((x12876*x12880)));
evalcond[1]=(((r00*x12879))+((r01*x12881))+((x12874*x12880))+((r02*x12878))+(((-1.0)*r01*x12870*x12875))+(((-1.0)*cj0*x12871)));
evalcond[2]=(((x12873*x12880))+((r10*x12879))+(((-1.0)*sj0*x12871))+((r12*x12878))+((r11*x12881))+(((-1.0)*r11*x12870*x12875)));
evalcond[3]=((((-1.0)*r22*x12882))+(((-1.0)*r21*x12869*x12875))+((cj1*sj2))+(((-1.0)*cj5*r21*x12879))+((r20*x12877))+(((-1.0)*cj5*r20*x12870*x12875)));
evalcond[4]=((((-1.0)*cj5*r11*x12879))+((r10*x12877))+(((-1.0)*r12*x12882))+((cj0*cj2))+((sj0*x12872))+(((-1.0)*r11*x12869*x12875))+(((-1.0)*x12873*x12883)));
evalcond[5]=((((-1.0)*r02*x12882))+(((-1.0)*x12874*x12883))+((cj0*x12872))+(((-1.0)*cj2*sj0))+((r00*x12877))+(((-1.0)*r01*x12869*x12875))+(((-1.0)*cj5*r01*x12879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12884=(cj5*r22);
IkReal x12885=(cj6*r21);
IkReal x12886=((1.0)*sj5);
IkReal x12887=((0.01)*cj5);
IkReal x12888=(r20*sj6);
IkReal x12889=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((x12887*x12888))+((x12885*x12887))+(((0.01)*r22*sj5))+(((0.37429)*x12884))+(((-1.0)*pz))+(((-1.0)*x12885*x12889))+(((-1.0)*x12888*x12889))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
evalcond[2]=((((-1.0)*x12886*x12888))+x12884+sj1+(((-1.0)*x12885*x12886)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x12890=((1.0)*cj6*sj5);
IkReal x12891=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r00*x12891))+(((-1.0)*r01*x12890))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r11*x12890))+(((-1.0)*r10*x12891))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x12892=cj5*cj5;
IkReal x12893=cj6*cj6;
IkReal x12894=r22*r22;
IkReal x12895=r21*r21;
IkReal x12896=r20*r20;
IkReal x12897=(cj6*r21);
IkReal x12898=(r20*sj6);
IkReal x12899=(cj1*cj2);
IkReal x12900=(r22*sj5);
IkReal x12901=(cj6*r20);
IkReal x12902=((2.0)*cj5);
IkReal x12903=(cj1*sj2);
IkReal x12904=((1.0)*x12895);
IkReal x12905=((1.0)*x12896);
IkReal x12906=((1.0)*r21*sj6);
IkReal x12907=((1.0)*cj5*x12903);
IkReal x12908=(x12892*x12893);
IkReal x12909=((((-1.0)*x12894))+(((-2.0)*x12892*x12897*x12898))+(((-1.0)*x12893*x12905))+(((-1.0)*x12904))+(((-1.0)*x12898*x12900*x12902))+(((-1.0)*x12892*x12905))+((x12896*x12908))+(((-1.0)*x12897*x12900*x12902))+((x12893*x12895))+(((-1.0)*x12904*x12908))+(((2.0)*x12897*x12898))+((x12892*x12894)));
j4eval[0]=x12909;
j4eval[1]=((IKabs(((((-1.0)*x12903*x12906))+((cj5*x12898*x12899))+((x12899*x12900))+((x12901*x12903))+((cj5*x12897*x12899)))))+(IKabs(((((-1.0)*x12898*x12907))+(((-1.0)*x12899*x12906))+(((-1.0)*x12897*x12907))+(((-1.0)*x12900*x12903))+((x12899*x12901))))));
j4eval[2]=IKsign(x12909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(cj1+(((-1.0)*cj1*cj2*sj1))+(((5.28144927536232)*(cj1*cj1))));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x12910=(cj5*r22);
IkReal x12911=(cj6*r21);
IkReal x12912=((1.0)*sj5);
IkReal x12913=((0.01)*cj5);
IkReal x12914=(r20*sj6);
IkReal x12915=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((x12911*x12913))+(((-1.0)*x12911*x12915))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x12914*x12915))+(((0.37429)*x12910))+((x12913*x12914)));
evalcond[2]=((1.0)+x12910+(((-1.0)*x12911*x12912))+(((-1.0)*x12912*x12914)));
evalcond[3]=((((-1.0)*cj6*r01*x12912))+(((-1.0)*r00*sj6*x12912))+((cj5*r02)));
evalcond[4]=(((cj5*r12))+(((-1.0)*cj6*r11*x12912))+(((-1.0)*r10*sj6*x12912)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((9522.0)+(((-9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12916=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*sj6*x12916))+((cj6*r20)))))+(IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*cj6*x12916))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12917=((1.0)*cj5);
j4eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x12917))+(((-1.0)*cj6*r21*x12917))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12918=((1.0)*cj5);
CheckValue<IkReal> x12920 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x12918))+(((-1.0)*cj6*r21*x12918))+(((-1.0)*r22*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x12920.valid){
continue;
}
IkReal x12919=x12920.value;
j4array[0]=((-1.0)*x12919);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12919)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12921=IKsin(j4);
IkReal x12922=IKcos(j4);
IkReal x12923=((1.0)*x12921);
evalcond[0]=(((cj6*r20*x12922))+(((-1.0)*r21*sj6*x12922))+(((-1.0)*cj5*cj6*r21*x12923))+(((-1.0)*cj5*r20*sj6*x12923))+(((-1.0)*r22*sj5*x12923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12924=(cj6*r10);
IkReal x12925=(sj2*sj4);
IkReal x12926=(r12*sj5);
IkReal x12927=(r01*sj6);
IkReal x12928=(cj2*r11);
IkReal x12929=(cj4*sj6);
IkReal x12930=((1.0)*cj6);
IkReal x12931=(cj4*r00);
IkReal x12932=(cj5*sj6);
IkReal x12933=(cj5*cj6);
IkReal x12934=(cj2*sj4);
IkReal x12935=(r02*sj5);
IkReal x12936=(cj4*sj2);
IkReal x12937=((1.0)*cj2*cj4);
if( IKabs((((r11*x12925*x12933))+(((-1.0)*x12927*x12937))+((r10*x12925*x12932))+((cj2*cj6*x12931))+(((-1.0)*r00*x12932*x12934))+(((-1.0)*x12934*x12935))+((x12925*x12926))+(((-1.0)*cj5*r01*x12930*x12934))+((r11*sj2*x12929))+(((-1.0)*x12924*x12936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x12924*x12937))+((r00*x12925*x12932))+((x12928*x12929))+(((-1.0)*sj2*x12930*x12931))+((r01*x12925*x12933))+((x12927*x12936))+((x12925*x12935))+((x12926*x12934))+((sj4*x12928*x12933))+((r10*x12932*x12934)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x12925*x12933))+(((-1.0)*x12927*x12937))+((r10*x12925*x12932))+((cj2*cj6*x12931))+(((-1.0)*r00*x12932*x12934))+(((-1.0)*x12934*x12935))+((x12925*x12926))+(((-1.0)*cj5*r01*x12930*x12934))+((r11*sj2*x12929))+(((-1.0)*x12924*x12936))))+IKsqr(((((-1.0)*x12924*x12937))+((r00*x12925*x12932))+((x12928*x12929))+(((-1.0)*sj2*x12930*x12931))+((r01*x12925*x12933))+((x12927*x12936))+((x12925*x12935))+((x12926*x12934))+((sj4*x12928*x12933))+((r10*x12932*x12934))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x12925*x12933))+(((-1.0)*x12927*x12937))+((r10*x12925*x12932))+((cj2*cj6*x12931))+(((-1.0)*r00*x12932*x12934))+(((-1.0)*x12934*x12935))+((x12925*x12926))+(((-1.0)*cj5*r01*x12930*x12934))+((r11*sj2*x12929))+(((-1.0)*x12924*x12936))), ((((-1.0)*x12924*x12937))+((r00*x12925*x12932))+((x12928*x12929))+(((-1.0)*sj2*x12930*x12931))+((r01*x12925*x12933))+((x12927*x12936))+((x12925*x12935))+((x12926*x12934))+((sj4*x12928*x12933))+((r10*x12932*x12934))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12938=IKcos(j0);
IkReal x12939=IKsin(j0);
IkReal x12940=((1.0)*sj4);
IkReal x12941=((0.37429)*sj5);
IkReal x12942=(r10*sj6);
IkReal x12943=(cj6*r00);
IkReal x12944=((0.37429)*cj5);
IkReal x12945=(cj6*r01);
IkReal x12946=((0.01)*cj5);
IkReal x12947=((1.0)*cj4);
IkReal x12948=(r00*sj6);
IkReal x12949=(r02*sj5);
IkReal x12950=(r12*sj5);
IkReal x12951=(cj6*r10);
IkReal x12952=(r01*sj6);
IkReal x12953=(r11*sj6);
IkReal x12954=(sj2*x12938);
IkReal x12955=(cj5*cj6*r11);
IkReal x12956=((0.069)*x12939);
IkReal x12957=(cj2*x12938);
IkReal x12958=((0.069)*x12938);
IkReal x12959=(sj2*x12939);
IkReal x12960=((1.0)*cj2*x12939);
evalcond[0]=(x12957+x12959+(((-1.0)*x12940*x12955))+(((-1.0)*x12940*x12950))+((cj4*x12951))+(((-1.0)*cj5*x12940*x12942))+(((-1.0)*x12947*x12953)));
evalcond[1]=(x12954+(((-1.0)*x12960))+(((-1.0)*cj5*x12940*x12948))+(((-1.0)*cj5*x12940*x12945))+((cj4*x12943))+(((-1.0)*x12947*x12952))+(((-1.0)*x12940*x12949)));
evalcond[2]=(x12954+(((-1.0)*x12940*x12951))+(((-1.0)*cj5*x12942*x12947))+(((-1.0)*x12960))+((sj4*x12953))+(((-1.0)*x12947*x12955))+(((-1.0)*x12947*x12950)));
evalcond[3]=((((-1.0)*cj5*x12947*x12948))+((sj4*x12952))+(((-1.0)*x12947*x12949))+(((-1.0)*x12957))+(((-1.0)*x12959))+(((-1.0)*cj5*x12945*x12947))+(((-1.0)*x12940*x12943)));
evalcond[4]=(x12958+((x12945*x12946))+((x12946*x12948))+(((-1.0)*px))+(((-0.069)*x12957))+((r02*x12944))+(((-1.0)*x12941*x12945))+(((-1.0)*x12941*x12948))+(((0.01)*x12949))+(((-1.0)*sj2*x12956)));
evalcond[5]=(x12956+(((0.01)*x12950))+(((-1.0)*cj6*r11*x12941))+((r12*x12944))+(((-1.0)*py))+(((-1.0)*cj2*x12956))+(((0.069)*x12954))+((x12942*x12946))+((cj6*r11*x12946))+(((-1.0)*x12941*x12942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12961=((1.0)*cj5);
CheckValue<IkReal> x12963 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),((((-1.0)*cj6*r21*x12961))+(((-1.0)*r22*sj5))+(((-1.0)*r20*sj6*x12961))),IKFAST_ATAN2_MAGTHRESH);
if(!x12963.valid){
continue;
}
IkReal x12962=x12963.value;
j4array[0]=((-1.0)*x12962);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12962)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12964=IKsin(j4);
IkReal x12965=IKcos(j4);
IkReal x12966=((1.0)*cj6);
IkReal x12967=(cj5*x12965);
evalcond[0]=(((r21*sj6*x12964))+(((-1.0)*r21*x12966*x12967))+(((-1.0)*r20*x12964*x12966))+(((-1.0)*r22*sj5*x12965))+(((-1.0)*r20*sj6*x12967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12968=(cj6*r10);
IkReal x12969=(sj2*sj4);
IkReal x12970=(r12*sj5);
IkReal x12971=(r01*sj6);
IkReal x12972=(cj2*r11);
IkReal x12973=(cj4*sj6);
IkReal x12974=((1.0)*cj6);
IkReal x12975=(cj4*r00);
IkReal x12976=(cj5*sj6);
IkReal x12977=(cj5*cj6);
IkReal x12978=(cj2*sj4);
IkReal x12979=(r02*sj5);
IkReal x12980=(cj4*sj2);
IkReal x12981=((1.0)*cj2*cj4);
if( IKabs(((((-1.0)*x12978*x12979))+(((-1.0)*x12971*x12981))+((cj2*cj6*x12975))+((r10*x12969*x12976))+(((-1.0)*cj5*r01*x12974*x12978))+((x12969*x12970))+(((-1.0)*r00*x12976*x12978))+(((-1.0)*x12968*x12980))+((r11*sj2*x12973))+((r11*x12969*x12977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj2*x12974*x12975))+((sj4*x12972*x12977))+((r01*x12969*x12977))+((r10*x12976*x12978))+((x12970*x12978))+((x12972*x12973))+((x12969*x12979))+((x12971*x12980))+(((-1.0)*x12968*x12981))+((r00*x12969*x12976)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12978*x12979))+(((-1.0)*x12971*x12981))+((cj2*cj6*x12975))+((r10*x12969*x12976))+(((-1.0)*cj5*r01*x12974*x12978))+((x12969*x12970))+(((-1.0)*r00*x12976*x12978))+(((-1.0)*x12968*x12980))+((r11*sj2*x12973))+((r11*x12969*x12977))))+IKsqr(((((-1.0)*sj2*x12974*x12975))+((sj4*x12972*x12977))+((r01*x12969*x12977))+((r10*x12976*x12978))+((x12970*x12978))+((x12972*x12973))+((x12969*x12979))+((x12971*x12980))+(((-1.0)*x12968*x12981))+((r00*x12969*x12976))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12978*x12979))+(((-1.0)*x12971*x12981))+((cj2*cj6*x12975))+((r10*x12969*x12976))+(((-1.0)*cj5*r01*x12974*x12978))+((x12969*x12970))+(((-1.0)*r00*x12976*x12978))+(((-1.0)*x12968*x12980))+((r11*sj2*x12973))+((r11*x12969*x12977))), ((((-1.0)*sj2*x12974*x12975))+((sj4*x12972*x12977))+((r01*x12969*x12977))+((r10*x12976*x12978))+((x12970*x12978))+((x12972*x12973))+((x12969*x12979))+((x12971*x12980))+(((-1.0)*x12968*x12981))+((r00*x12969*x12976))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12982=IKcos(j0);
IkReal x12983=IKsin(j0);
IkReal x12984=((1.0)*sj4);
IkReal x12985=((0.37429)*sj5);
IkReal x12986=(r10*sj6);
IkReal x12987=(cj6*r00);
IkReal x12988=((0.37429)*cj5);
IkReal x12989=(cj6*r01);
IkReal x12990=((0.01)*cj5);
IkReal x12991=((1.0)*cj4);
IkReal x12992=(r00*sj6);
IkReal x12993=(r02*sj5);
IkReal x12994=(r12*sj5);
IkReal x12995=(cj6*r10);
IkReal x12996=(r01*sj6);
IkReal x12997=(r11*sj6);
IkReal x12998=(sj2*x12982);
IkReal x12999=(cj5*cj6*r11);
IkReal x13000=((0.069)*x12983);
IkReal x13001=(cj2*x12982);
IkReal x13002=((0.069)*x12982);
IkReal x13003=(sj2*x12983);
IkReal x13004=((1.0)*cj2*x12983);
evalcond[0]=(((cj4*x12995))+(((-1.0)*cj5*x12984*x12986))+(((-1.0)*x12991*x12997))+x13003+x13001+(((-1.0)*x12984*x12999))+(((-1.0)*x12984*x12994)));
evalcond[1]=(x12998+(((-1.0)*x13004))+((cj4*x12987))+(((-1.0)*cj5*x12984*x12989))+(((-1.0)*cj5*x12984*x12992))+(((-1.0)*x12991*x12996))+(((-1.0)*x12984*x12993)));
evalcond[2]=(x12998+(((-1.0)*cj5*x12986*x12991))+((sj4*x12997))+(((-1.0)*x13004))+(((-1.0)*x12991*x12994))+(((-1.0)*x12991*x12999))+(((-1.0)*x12984*x12995)));
evalcond[3]=(((sj4*x12996))+(((-1.0)*x13001))+(((-1.0)*x13003))+(((-1.0)*cj5*x12991*x12992))+(((-1.0)*x12991*x12993))+(((-1.0)*x12984*x12987))+(((-1.0)*cj5*x12989*x12991)));
evalcond[4]=(((x12989*x12990))+((x12990*x12992))+(((-1.0)*sj2*x13000))+(((-1.0)*px))+x13002+(((-0.069)*x13001))+(((-1.0)*x12985*x12989))+((r02*x12988))+(((-1.0)*x12985*x12992))+(((0.01)*x12993)));
evalcond[5]=((((0.069)*x12998))+(((-1.0)*cj2*x13000))+(((-1.0)*py))+x13000+((r12*x12988))+(((-1.0)*x12985*x12986))+((x12986*x12990))+((cj6*r11*x12990))+(((0.01)*x12994))+(((-1.0)*cj6*r11*x12985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13005=((690.0)*sj5);
IkReal x13006=(cj5*sj2);
IkReal x13007=((25826.01)*r02);
IkReal x13008=(cj6*r11);
IkReal x13009=((25826.01)*sj5);
IkReal x13010=(r00*sj6);
IkReal x13011=(r10*sj6);
IkReal x13012=((25826.01)*r12);
IkReal x13013=(cj6*r01);
IkReal x13014=((69000.0)*py);
IkReal x13015=((69000.0)*px);
IkReal x13016=((690.0)*cj5);
IkReal x13017=(cj2*cj5);
IkReal x13018=(cj2*x13016);
CheckValue<IkReal> x13019=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-9522.0)*cj2)))),-1);
if(!x13019.valid){
continue;
}
CheckValue<IkReal> x13020 = IKatan2WithCheck(IkReal((((x13006*x13007))+((cj2*r12*x13005))+(((-1.0)*r12*x13005))+(((-1.0)*cj2*x13008*x13009))+(((-1.0)*x13008*x13016))+(((-1.0)*sj2*x13015))+(((-1.0)*sj2*x13009*x13013))+(((-1.0)*sj2*x13009*x13010))+(((-1.0)*cj2*x13014))+((x13009*x13011))+((x13012*x13017))+((x13008*x13018))+((x13008*x13009))+(((-1.0)*cj2*x13009*x13011))+(((-1.0)*cj5*x13012))+x13014+(((690.0)*x13006*x13013))+(((690.0)*x13006*x13010))+((r02*sj2*x13005))+(((-1.0)*x13011*x13016))+((x13011*x13018)))),((((-1.0)*x13013*x13016))+(((-690.0)*x13006*x13011))+(((-690.0)*x13006*x13008))+((x13007*x13017))+(((-1.0)*cj2*x13015))+((x13009*x13013))+((x13009*x13010))+((x13013*x13018))+(((-1.0)*cj2*x13009*x13010))+(((-1.0)*cj2*x13009*x13013))+((cj2*r02*x13005))+x13015+(((-1.0)*r02*x13005))+(((-1.0)*x13006*x13012))+(((-1.0)*x13010*x13016))+(((-1.0)*r12*sj2*x13005))+((sj2*x13008*x13009))+(((-1.0)*cj5*x13007))+((x13010*x13018))+((sj2*x13014))+((sj2*x13009*x13011))),IKFAST_ATAN2_MAGTHRESH);
if(!x13020.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13019.value)))+(x13020.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x13021=IKcos(j0);
IkReal x13022=IKsin(j0);
IkReal x13023=((0.01)*cj5);
IkReal x13024=(cj6*r01);
IkReal x13025=((0.37429)*sj5);
IkReal x13026=(cj6*r11);
IkReal x13027=(r00*sj6);
IkReal x13028=((0.01)*sj5);
IkReal x13029=((0.37429)*cj5);
IkReal x13030=(r10*sj6);
IkReal x13031=((0.069)*x13021);
IkReal x13032=((0.069)*x13022);
evalcond[0]=((((-1.0)*x13024*x13025))+((r02*x13029))+((r02*x13028))+((x13023*x13027))+((x13023*x13024))+(((-1.0)*x13025*x13027))+(((-1.0)*px))+(((-1.0)*cj2*x13031))+x13031+(((-1.0)*sj2*x13032)));
evalcond[1]=(((x13023*x13030))+(((-1.0)*x13025*x13030))+((sj2*x13031))+((x13023*x13026))+(((-1.0)*x13025*x13026))+(((-1.0)*py))+(((-1.0)*cj2*x13032))+x13032+((r12*x13029))+((r12*x13028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13033=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13033;
j4eval[1]=IKsign(x13033);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13034=((1.0)*sj5);
IkReal x13035=(((cj5*r12))+(((-1.0)*cj6*r11*x13034))+(((-1.0)*r10*sj6*x13034)));
j4eval[0]=x13035;
j4eval[1]=IKsign(x13035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13036=cj6*cj6;
IkReal x13037=cj5*cj5;
IkReal x13038=(cj5*sj5);
IkReal x13039=(cj6*r21);
IkReal x13040=((1.0)*r11);
IkReal x13041=(r10*r20);
IkReal x13042=(r10*sj6);
IkReal x13043=(r12*r22);
IkReal x13044=(r21*x13036);
IkReal x13045=(cj6*r20*sj6);
IkReal x13046=(r11*x13037);
IkReal x13047=((1.0)*x13037);
IkReal x13048=(((cj6*r11*r22*x13038))+(((-1.0)*x13040*x13045))+(((-1.0)*x13040*x13044))+((x13044*x13046))+((r11*r21))+((x13037*x13041))+((x13045*x13046))+((r12*r20*sj6*x13038))+((x13036*x13041))+((r22*x13038*x13042))+x13043+(((-1.0)*x13043*x13047))+((r12*x13038*x13039))+(((-1.0)*x13039*x13042))+(((-1.0)*x13036*x13041*x13047))+((x13037*x13039*x13042)));
j4eval[0]=x13048;
j4eval[1]=IKsign(x13048);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13049=cj6*cj6;
IkReal x13050=cj5*cj5;
IkReal x13051=(r22*sj5);
IkReal x13052=(cj0*sj2);
IkReal x13053=(r12*r22);
IkReal x13054=(cj5*sj6);
IkReal x13055=((1.0)*r11);
IkReal x13056=(cj6*r21);
IkReal x13057=(cj6*r20);
IkReal x13058=(r12*sj5);
IkReal x13059=((1.0)*sj6);
IkReal x13060=((1.0)*cj2*sj0);
IkReal x13061=((1.0)*x13050);
IkReal x13062=(r21*x13049);
IkReal x13063=(r10*x13050);
IkReal x13064=(r11*x13050);
IkReal x13065=(r10*r20*x13049);
CheckValue<IkReal> x13066=IKPowWithIntegerCheck(IKsign((((r20*x13063))+((sj6*x13056*x13063))+(((-1.0)*sj6*x13055*x13057))+((sj6*x13057*x13064))+((r10*x13051*x13054))+(((-1.0)*x13061*x13065))+((r11*r21))+((r20*x13054*x13058))+((x13062*x13064))+((cj5*cj6*r11*x13051))+(((-1.0)*x13055*x13062))+x13053+x13065+(((-1.0)*r10*x13056*x13059))+((cj5*x13056*x13058))+(((-1.0)*x13053*x13061)))),-1);
if(!x13066.valid){
continue;
}
CheckValue<IkReal> x13067 = IKatan2WithCheck(IkReal(((((-1.0)*x13057*x13060))+(((-1.0)*r21*x13052*x13059))+((cj2*r21*sj0*sj6))+((x13052*x13057)))),((((-1.0)*r20*x13054*x13060))+(((-1.0)*cj5*x13056*x13060))+((r20*x13052*x13054))+(((-1.0)*x13051*x13060))+((x13051*x13052))+((cj5*x13052*x13056))),IKFAST_ATAN2_MAGTHRESH);
if(!x13067.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13066.value)))+(x13067.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13068=IKsin(j4);
IkReal x13069=IKcos(j4);
IkReal x13070=(cj0*sj2);
IkReal x13071=(cj5*cj6);
IkReal x13072=(cj0*cj2);
IkReal x13073=(r11*sj6);
IkReal x13074=(cj6*r20);
IkReal x13075=(cj5*sj6);
IkReal x13076=(cj6*r10);
IkReal x13077=(cj6*r00);
IkReal x13078=((1.0)*sj0);
IkReal x13079=(cj2*x13078);
IkReal x13080=((1.0)*x13069);
IkReal x13081=((1.0)*x13068);
IkReal x13082=(sj6*x13068);
IkReal x13083=(sj5*x13081);
evalcond[0]=((((-1.0)*r21*x13071*x13081))+(((-1.0)*r21*sj6*x13080))+(((-1.0)*r22*x13083))+(((-1.0)*r20*x13075*x13081))+((x13069*x13074)));
evalcond[1]=((((-1.0)*r21*x13071*x13080))+(((-1.0)*r22*sj5*x13080))+(((-1.0)*x13074*x13081))+(((-1.0)*r20*x13075*x13080))+((r21*x13082)));
evalcond[2]=((((-1.0)*r10*x13075*x13081))+(((-1.0)*x13073*x13080))+((sj0*sj2))+x13072+((x13069*x13076))+(((-1.0)*r11*x13071*x13081))+(((-1.0)*r12*x13083)));
evalcond[3]=((((-1.0)*r01*sj6*x13080))+(((-1.0)*r02*x13083))+(((-1.0)*x13079))+(((-1.0)*r00*x13075*x13081))+x13070+(((-1.0)*r01*x13071*x13081))+((x13069*x13077)));
evalcond[4]=((((-1.0)*r10*x13075*x13080))+(((-1.0)*r12*sj5*x13080))+(((-1.0)*x13076*x13081))+(((-1.0)*x13079))+((x13068*x13073))+x13070+(((-1.0)*r11*x13071*x13080)));
evalcond[5]=((((-1.0)*r02*sj5*x13080))+(((-1.0)*sj2*x13078))+(((-1.0)*x13077*x13081))+(((-1.0)*r00*x13075*x13080))+(((-1.0)*x13072))+(((-1.0)*r01*x13071*x13080))+((r01*x13082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13084=(cj0*sj2);
IkReal x13085=(cj6*r20);
IkReal x13086=(r22*sj5);
IkReal x13087=((1.0)*sj5);
IkReal x13088=(r21*sj6);
IkReal x13089=((1.0)*cj2*sj0);
IkReal x13090=(cj5*cj6*r21);
IkReal x13091=(cj5*r20*sj6);
CheckValue<IkReal> x13092 = IKatan2WithCheck(IkReal((((cj2*sj0*x13088))+(((-1.0)*x13085*x13089))+((x13084*x13085))+(((-1.0)*x13084*x13088)))),((((-1.0)*x13086*x13089))+((x13084*x13086))+((x13084*x13090))+((x13084*x13091))+(((-1.0)*x13089*x13090))+(((-1.0)*x13089*x13091))),IKFAST_ATAN2_MAGTHRESH);
if(!x13092.valid){
continue;
}
CheckValue<IkReal> x13093=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x13087))+(((-1.0)*r10*sj6*x13087)))),-1);
if(!x13093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13092.value)+(((1.5707963267949)*(x13093.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13094=IKsin(j4);
IkReal x13095=IKcos(j4);
IkReal x13096=(cj0*sj2);
IkReal x13097=(cj5*cj6);
IkReal x13098=(cj0*cj2);
IkReal x13099=(r11*sj6);
IkReal x13100=(cj6*r20);
IkReal x13101=(cj5*sj6);
IkReal x13102=(cj6*r10);
IkReal x13103=(cj6*r00);
IkReal x13104=((1.0)*sj0);
IkReal x13105=(cj2*x13104);
IkReal x13106=((1.0)*x13095);
IkReal x13107=((1.0)*x13094);
IkReal x13108=(sj6*x13094);
IkReal x13109=(sj5*x13107);
evalcond[0]=(((x13095*x13100))+(((-1.0)*r21*x13097*x13107))+(((-1.0)*r21*sj6*x13106))+(((-1.0)*r22*x13109))+(((-1.0)*r20*x13101*x13107)));
evalcond[1]=((((-1.0)*r21*x13097*x13106))+(((-1.0)*x13100*x13107))+(((-1.0)*r22*sj5*x13106))+((r21*x13108))+(((-1.0)*r20*x13101*x13106)));
evalcond[2]=((((-1.0)*r11*x13097*x13107))+((x13095*x13102))+(((-1.0)*x13099*x13106))+(((-1.0)*r10*x13101*x13107))+((sj0*sj2))+(((-1.0)*r12*x13109))+x13098);
evalcond[3]=(((x13095*x13103))+(((-1.0)*r01*x13097*x13107))+(((-1.0)*r00*x13101*x13107))+(((-1.0)*x13105))+(((-1.0)*r02*x13109))+x13096+(((-1.0)*r01*sj6*x13106)));
evalcond[4]=((((-1.0)*r11*x13097*x13106))+(((-1.0)*x13102*x13107))+(((-1.0)*r10*x13101*x13106))+(((-1.0)*x13105))+x13096+((x13094*x13099))+(((-1.0)*r12*sj5*x13106)));
evalcond[5]=(((r01*x13108))+(((-1.0)*r01*x13097*x13106))+(((-1.0)*sj2*x13104))+(((-1.0)*x13103*x13107))+(((-1.0)*r00*x13101*x13106))+(((-1.0)*r02*sj5*x13106))+(((-1.0)*x13098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13110=(sj0*sj2);
IkReal x13111=(cj0*cj2);
IkReal x13112=(cj6*r20);
IkReal x13113=(r22*sj5);
IkReal x13114=((1.0)*r21*sj6);
IkReal x13115=(cj5*cj6*r21);
IkReal x13116=(cj5*r20*sj6);
CheckValue<IkReal> x13117 = IKatan2WithCheck(IkReal(((((-1.0)*x13110*x13114))+((x13110*x13112))+((x13111*x13112))+(((-1.0)*x13111*x13114)))),(((x13110*x13115))+((x13110*x13113))+((x13110*x13116))+((x13111*x13116))+((x13111*x13115))+((x13111*x13113))),IKFAST_ATAN2_MAGTHRESH);
if(!x13117.valid){
continue;
}
CheckValue<IkReal> x13118=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13117.value)+(((1.5707963267949)*(x13118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13119=IKsin(j4);
IkReal x13120=IKcos(j4);
IkReal x13121=(cj0*sj2);
IkReal x13122=(cj5*cj6);
IkReal x13123=(cj0*cj2);
IkReal x13124=(r11*sj6);
IkReal x13125=(cj6*r20);
IkReal x13126=(cj5*sj6);
IkReal x13127=(cj6*r10);
IkReal x13128=(cj6*r00);
IkReal x13129=((1.0)*sj0);
IkReal x13130=(cj2*x13129);
IkReal x13131=((1.0)*x13120);
IkReal x13132=((1.0)*x13119);
IkReal x13133=(sj6*x13119);
IkReal x13134=(sj5*x13132);
evalcond[0]=(((x13120*x13125))+(((-1.0)*r22*x13134))+(((-1.0)*r20*x13126*x13132))+(((-1.0)*r21*sj6*x13131))+(((-1.0)*r21*x13122*x13132)));
evalcond[1]=((((-1.0)*x13125*x13132))+(((-1.0)*r22*sj5*x13131))+((r21*x13133))+(((-1.0)*r20*x13126*x13131))+(((-1.0)*r21*x13122*x13131)));
evalcond[2]=((((-1.0)*r10*x13126*x13132))+(((-1.0)*x13124*x13131))+((sj0*sj2))+((x13120*x13127))+x13123+(((-1.0)*r11*x13122*x13132))+(((-1.0)*r12*x13134)));
evalcond[3]=((((-1.0)*r01*x13122*x13132))+(((-1.0)*r00*x13126*x13132))+((x13120*x13128))+(((-1.0)*r01*sj6*x13131))+(((-1.0)*x13130))+x13121+(((-1.0)*r02*x13134)));
evalcond[4]=((((-1.0)*r12*sj5*x13131))+(((-1.0)*r10*x13126*x13131))+((x13119*x13124))+(((-1.0)*x13130))+x13121+(((-1.0)*r11*x13122*x13131))+(((-1.0)*x13127*x13132)));
evalcond[5]=((((-1.0)*r01*x13122*x13131))+((r01*x13133))+(((-1.0)*r00*x13126*x13131))+(((-1.0)*sj2*x13129))+(((-1.0)*r02*sj5*x13131))+(((-1.0)*x13123))+(((-1.0)*x13128*x13132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13135=(cj5*r22);
IkReal x13136=(cj6*r21);
IkReal x13137=((1.0)*sj5);
IkReal x13138=((0.01)*cj5);
IkReal x13139=(r20*sj6);
IkReal x13140=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+(((-1.0)*x13139*x13140))+(((0.37429)*x13135))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x13138*x13139))+(((-1.0)*x13136*x13140))+((x13136*x13138)));
evalcond[2]=((-1.0)+(((-1.0)*x13136*x13137))+(((-1.0)*x13137*x13139))+x13135);
evalcond[3]=((((-1.0)*r00*sj6*x13137))+(((-1.0)*cj6*r01*x13137))+((cj5*r02)));
evalcond[4]=(((cj5*r12))+(((-1.0)*r10*sj6*x13137))+(((-1.0)*cj6*r11*x13137)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((9522.0)+(((9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13141=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*cj6*x13141)))))+(IKabs(((((-1.0)*sj6*x13141))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13142=((1.0)*cj5);
j4eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x13142))+(((-1.0)*r20*sj6*x13142))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x13143=((1.0)*cj5);
CheckValue<IkReal> x13145 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r21*x13143))+(((-1.0)*r20*sj6*x13143))+(((-1.0)*r22*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x13145.valid){
continue;
}
IkReal x13144=x13145.value;
j4array[0]=((-1.0)*x13144);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x13144)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x13146=IKsin(j4);
IkReal x13147=IKcos(j4);
IkReal x13148=((1.0)*x13146);
evalcond[0]=((((-1.0)*cj5*r20*sj6*x13148))+(((-1.0)*r21*sj6*x13147))+(((-1.0)*cj5*cj6*r21*x13148))+((cj6*r20*x13147))+(((-1.0)*r22*sj5*x13148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13149=(cj5*cj6);
IkReal x13150=((1.0)*sj2);
IkReal x13151=(cj2*cj4);
IkReal x13152=(r12*sj5);
IkReal x13153=(cj4*sj2);
IkReal x13154=(r10*sj4);
IkReal x13155=(cj5*sj6);
IkReal x13156=(cj6*r10);
IkReal x13157=(r11*sj6);
IkReal x13158=(sj4*x13152);
IkReal x13159=(cj2*r11*sj4);
IkReal x13160=(r11*sj4*x13150);
IkReal x13161=(cj2*r10*x13155);
if( IKabs((((cj2*cj6*x13154))+((r10*x13151*x13155))+(((-1.0)*cj2*sj4*x13157))+((x13153*x13156))+((x13151*x13152))+(((-1.0)*x13149*x13160))+((r11*x13149*x13151))+(((-1.0)*cj4*x13150*x13157))+(((-1.0)*x13150*x13154*x13155))+(((-1.0)*x13150*x13158)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x13149*x13159))+((cj6*sj2*x13154))+((x13152*x13153))+(((-1.0)*x13151*x13156))+((r10*x13153*x13155))+((x13151*x13157))+((cj2*x13158))+((cj2*x13154*x13155))+((r11*x13149*x13153))+(((-1.0)*sj4*x13150*x13157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*cj6*x13154))+((r10*x13151*x13155))+(((-1.0)*cj2*sj4*x13157))+((x13153*x13156))+((x13151*x13152))+(((-1.0)*x13149*x13160))+((r11*x13149*x13151))+(((-1.0)*cj4*x13150*x13157))+(((-1.0)*x13150*x13154*x13155))+(((-1.0)*x13150*x13158))))+IKsqr((((x13149*x13159))+((cj6*sj2*x13154))+((x13152*x13153))+(((-1.0)*x13151*x13156))+((r10*x13153*x13155))+((x13151*x13157))+((cj2*x13158))+((cj2*x13154*x13155))+((r11*x13149*x13153))+(((-1.0)*sj4*x13150*x13157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj2*cj6*x13154))+((r10*x13151*x13155))+(((-1.0)*cj2*sj4*x13157))+((x13153*x13156))+((x13151*x13152))+(((-1.0)*x13149*x13160))+((r11*x13149*x13151))+(((-1.0)*cj4*x13150*x13157))+(((-1.0)*x13150*x13154*x13155))+(((-1.0)*x13150*x13158))), (((x13149*x13159))+((cj6*sj2*x13154))+((x13152*x13153))+(((-1.0)*x13151*x13156))+((r10*x13153*x13155))+((x13151*x13157))+((cj2*x13158))+((cj2*x13154*x13155))+((r11*x13149*x13153))+(((-1.0)*sj4*x13150*x13157))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13162=IKcos(j0);
IkReal x13163=IKsin(j0);
IkReal x13164=((1.0)*sj4);
IkReal x13165=((0.37429)*sj5);
IkReal x13166=(r10*sj6);
IkReal x13167=(cj6*r00);
IkReal x13168=((0.37429)*cj5);
IkReal x13169=(cj6*r01);
IkReal x13170=((0.01)*cj5);
IkReal x13171=(r12*sj5);
IkReal x13172=(r00*sj6);
IkReal x13173=(r02*sj5);
IkReal x13174=((1.0)*cj4);
IkReal x13175=(cj6*r10);
IkReal x13176=(r01*sj6);
IkReal x13177=(r11*sj6);
IkReal x13178=(cj2*x13162);
IkReal x13179=(cj5*cj6*r11);
IkReal x13180=((0.069)*x13163);
IkReal x13181=(sj2*x13162);
IkReal x13182=(cj2*x13163);
IkReal x13183=((1.0)*sj2*x13163);
evalcond[0]=((((-1.0)*x13164*x13175))+(((-1.0)*x13171*x13174))+x13182+x13181+((sj4*x13177))+(((-1.0)*cj5*x13166*x13174))+(((-1.0)*x13174*x13179)));
evalcond[1]=((((-1.0)*x13183))+(((-1.0)*cj5*x13164*x13166))+(((-1.0)*x13164*x13171))+(((-1.0)*x13164*x13179))+x13178+((cj4*x13175))+(((-1.0)*x13174*x13177)));
evalcond[2]=((((-1.0)*x13183))+(((-1.0)*x13173*x13174))+(((-1.0)*cj5*x13169*x13174))+(((-1.0)*x13164*x13167))+x13178+(((-1.0)*cj5*x13172*x13174))+((sj4*x13176)));
evalcond[3]=((((-1.0)*cj5*x13164*x13169))+(((-1.0)*x13181))+(((-1.0)*x13182))+(((-1.0)*cj5*x13164*x13172))+(((-1.0)*x13164*x13173))+((cj4*x13167))+(((-1.0)*x13174*x13176)));
evalcond[4]=(((r02*x13168))+(((-1.0)*px))+(((-1.0)*x13165*x13169))+((x13170*x13172))+(((0.069)*x13162))+(((-1.0)*x13165*x13172))+((x13169*x13170))+(((0.069)*x13178))+(((0.01)*x13173))+(((-1.0)*sj2*x13180)));
evalcond[5]=((((0.069)*x13181))+(((-1.0)*py))+(((-1.0)*x13165*x13166))+(((-1.0)*cj6*r11*x13165))+((x13166*x13170))+x13180+(((0.01)*x13171))+((r12*x13168))+((cj6*r11*x13170))+((cj2*x13180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x13184=((1.0)*cj5);
CheckValue<IkReal> x13186 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),((((-1.0)*r20*sj6*x13184))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x13184))),IKFAST_ATAN2_MAGTHRESH);
if(!x13186.valid){
continue;
}
IkReal x13185=x13186.value;
j4array[0]=((-1.0)*x13185);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x13185)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x13187=IKsin(j4);
IkReal x13188=IKcos(j4);
IkReal x13189=((1.0)*cj6);
IkReal x13190=(cj5*x13188);
evalcond[0]=((((-1.0)*r22*sj5*x13188))+((r21*sj6*x13187))+(((-1.0)*r20*x13187*x13189))+(((-1.0)*r20*sj6*x13190))+(((-1.0)*r21*x13189*x13190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13191=(cj5*cj6);
IkReal x13192=((1.0)*sj2);
IkReal x13193=(cj2*cj4);
IkReal x13194=(r12*sj5);
IkReal x13195=(cj4*sj2);
IkReal x13196=(r10*sj4);
IkReal x13197=(cj5*sj6);
IkReal x13198=(cj6*r10);
IkReal x13199=(r11*sj6);
IkReal x13200=(sj4*x13194);
IkReal x13201=(cj2*r11*sj4);
IkReal x13202=(r11*sj4*x13192);
IkReal x13203=(cj2*r10*x13197);
if( IKabs((((r10*x13193*x13197))+((cj2*cj6*x13196))+(((-1.0)*x13191*x13202))+((x13193*x13194))+(((-1.0)*cj4*x13192*x13199))+(((-1.0)*cj2*sj4*x13199))+((x13195*x13198))+((r11*x13191*x13193))+(((-1.0)*x13192*x13200))+(((-1.0)*x13192*x13196*x13197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x13195*x13197))+((cj6*sj2*x13196))+((x13191*x13201))+((x13193*x13199))+((x13194*x13195))+((cj2*x13196*x13197))+((cj2*x13200))+((r11*x13191*x13195))+(((-1.0)*sj4*x13192*x13199))+(((-1.0)*x13193*x13198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x13193*x13197))+((cj2*cj6*x13196))+(((-1.0)*x13191*x13202))+((x13193*x13194))+(((-1.0)*cj4*x13192*x13199))+(((-1.0)*cj2*sj4*x13199))+((x13195*x13198))+((r11*x13191*x13193))+(((-1.0)*x13192*x13200))+(((-1.0)*x13192*x13196*x13197))))+IKsqr((((r10*x13195*x13197))+((cj6*sj2*x13196))+((x13191*x13201))+((x13193*x13199))+((x13194*x13195))+((cj2*x13196*x13197))+((cj2*x13200))+((r11*x13191*x13195))+(((-1.0)*sj4*x13192*x13199))+(((-1.0)*x13193*x13198))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x13193*x13197))+((cj2*cj6*x13196))+(((-1.0)*x13191*x13202))+((x13193*x13194))+(((-1.0)*cj4*x13192*x13199))+(((-1.0)*cj2*sj4*x13199))+((x13195*x13198))+((r11*x13191*x13193))+(((-1.0)*x13192*x13200))+(((-1.0)*x13192*x13196*x13197))), (((r10*x13195*x13197))+((cj6*sj2*x13196))+((x13191*x13201))+((x13193*x13199))+((x13194*x13195))+((cj2*x13196*x13197))+((cj2*x13200))+((r11*x13191*x13195))+(((-1.0)*sj4*x13192*x13199))+(((-1.0)*x13193*x13198))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13204=IKcos(j0);
IkReal x13205=IKsin(j0);
IkReal x13206=((1.0)*sj4);
IkReal x13207=((0.37429)*sj5);
IkReal x13208=(r10*sj6);
IkReal x13209=(cj6*r00);
IkReal x13210=((0.37429)*cj5);
IkReal x13211=(cj6*r01);
IkReal x13212=((0.01)*cj5);
IkReal x13213=(r12*sj5);
IkReal x13214=(r00*sj6);
IkReal x13215=(r02*sj5);
IkReal x13216=((1.0)*cj4);
IkReal x13217=(cj6*r10);
IkReal x13218=(r01*sj6);
IkReal x13219=(r11*sj6);
IkReal x13220=(cj2*x13204);
IkReal x13221=(cj5*cj6*r11);
IkReal x13222=((0.069)*x13205);
IkReal x13223=(sj2*x13204);
IkReal x13224=(cj2*x13205);
IkReal x13225=((1.0)*sj2*x13205);
evalcond[0]=(((sj4*x13219))+(((-1.0)*x13206*x13217))+(((-1.0)*cj5*x13208*x13216))+(((-1.0)*x13213*x13216))+(((-1.0)*x13216*x13221))+x13223+x13224);
evalcond[1]=((((-1.0)*x13216*x13219))+((cj4*x13217))+(((-1.0)*x13206*x13213))+(((-1.0)*cj5*x13206*x13208))+(((-1.0)*x13225))+(((-1.0)*x13206*x13221))+x13220);
evalcond[2]=(((sj4*x13218))+(((-1.0)*cj5*x13211*x13216))+(((-1.0)*x13215*x13216))+(((-1.0)*x13225))+(((-1.0)*x13206*x13209))+x13220+(((-1.0)*cj5*x13214*x13216)));
evalcond[3]=((((-1.0)*x13216*x13218))+(((-1.0)*x13224))+(((-1.0)*x13223))+((cj4*x13209))+(((-1.0)*x13206*x13215))+(((-1.0)*cj5*x13206*x13211))+(((-1.0)*cj5*x13206*x13214)));
evalcond[4]=((((0.069)*x13204))+((x13211*x13212))+(((-1.0)*x13207*x13211))+(((-1.0)*x13207*x13214))+(((0.01)*x13215))+(((-1.0)*px))+(((0.069)*x13220))+(((-1.0)*sj2*x13222))+((r02*x13210))+((x13212*x13214)));
evalcond[5]=(((cj6*r11*x13212))+((cj2*x13222))+((r12*x13210))+(((-1.0)*cj6*r11*x13207))+(((0.01)*x13213))+(((-1.0)*py))+(((0.069)*x13223))+(((-1.0)*x13207*x13208))+((x13208*x13212))+x13222);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13226=((690.0)*sj5);
IkReal x13227=(cj5*sj2);
IkReal x13228=((25826.01)*r02);
IkReal x13229=(cj6*r11);
IkReal x13230=((25826.01)*sj5);
IkReal x13231=(r10*sj6);
IkReal x13232=((25826.01)*r12);
IkReal x13233=(cj6*r01);
IkReal x13234=((69000.0)*py);
IkReal x13235=((69000.0)*px);
IkReal x13236=((690.0)*cj5);
IkReal x13237=(cj2*cj5);
IkReal x13238=(r00*sj6);
IkReal x13239=(cj2*x13236);
IkReal x13240=((690.0)*x13238);
CheckValue<IkReal> x13241 = IKatan2WithCheck(IkReal((((cj2*x13230*x13231))+(((-1.0)*sj2*x13230*x13238))+(((-1.0)*sj2*x13230*x13233))+(((690.0)*x13227*x13233))+((x13230*x13231))+((x13229*x13230))+(((-1.0)*cj5*x13232))+(((-1.0)*x13229*x13239))+(((-1.0)*x13229*x13236))+(((-1.0)*x13232*x13237))+((x13227*x13228))+(((-1.0)*r12*x13226))+((x13227*x13240))+(((-1.0)*x13231*x13239))+(((-1.0)*x13231*x13236))+((r02*sj2*x13226))+x13234+((cj2*x13234))+(((-1.0)*cj2*r12*x13226))+((cj2*x13229*x13230))+(((-1.0)*sj2*x13235)))),((((-690.0)*x13227*x13231))+((cj2*x13230*x13238))+((cj2*x13230*x13233))+(((-1.0)*x13236*x13238))+(((-1.0)*x13238*x13239))+((x13230*x13238))+((x13230*x13233))+(((-1.0)*x13228*x13237))+((sj2*x13230*x13231))+(((-1.0)*cj5*x13228))+((sj2*x13234))+(((-1.0)*x13233*x13239))+(((-1.0)*x13233*x13236))+(((-1.0)*r12*sj2*x13226))+(((-1.0)*r02*x13226))+(((-1.0)*x13227*x13232))+(((-1.0)*cj2*r02*x13226))+(((-690.0)*x13227*x13229))+x13235+((cj2*x13235))+((sj2*x13229*x13230))),IKFAST_ATAN2_MAGTHRESH);
if(!x13241.valid){
continue;
}
CheckValue<IkReal> x13242=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj2)))),-1);
if(!x13242.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x13241.value)+(((1.5707963267949)*(x13242.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x13243=IKcos(j0);
IkReal x13244=IKsin(j0);
IkReal x13245=((0.01)*cj5);
IkReal x13246=(cj6*r01);
IkReal x13247=((0.37429)*sj5);
IkReal x13248=(cj6*r11);
IkReal x13249=(r00*sj6);
IkReal x13250=((0.01)*sj5);
IkReal x13251=((0.37429)*cj5);
IkReal x13252=(r10*sj6);
IkReal x13253=((0.069)*x13243);
IkReal x13254=((0.069)*x13244);
evalcond[0]=(((cj2*x13253))+((r02*x13250))+((r02*x13251))+(((-1.0)*x13247*x13249))+((x13245*x13249))+((x13245*x13246))+(((-1.0)*px))+(((-1.0)*x13246*x13247))+x13253+(((-1.0)*sj2*x13254)));
evalcond[1]=(((cj2*x13254))+(((-1.0)*x13247*x13252))+(((-1.0)*x13247*x13248))+((r12*x13251))+((r12*x13250))+((x13245*x13248))+((x13245*x13252))+(((-1.0)*py))+x13254+((sj2*x13253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13255=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13255;
j4eval[1]=IKsign(x13255);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13256=cj6*cj6;
IkReal x13257=cj5*cj5;
IkReal x13258=(cj5*sj5);
IkReal x13259=(cj6*r21);
IkReal x13260=((1.0)*r11);
IkReal x13261=(r10*r20);
IkReal x13262=(r10*sj6);
IkReal x13263=(r12*r22);
IkReal x13264=(r21*x13256);
IkReal x13265=(cj6*r20*sj6);
IkReal x13266=(r11*x13257);
IkReal x13267=((1.0)*x13257);
IkReal x13268=(((r12*r20*sj6*x13258))+((cj6*r11*r22*x13258))+((r11*r21))+(((-1.0)*x13259*x13262))+(((-1.0)*x13256*x13261*x13267))+((r12*x13258*x13259))+(((-1.0)*x13263*x13267))+((x13265*x13266))+((x13257*x13261))+((r22*x13258*x13262))+(((-1.0)*x13260*x13264))+(((-1.0)*x13260*x13265))+((x13256*x13261))+x13263+((x13257*x13259*x13262))+((x13264*x13266)));
j4eval[0]=x13268;
j4eval[1]=IKsign(x13268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13269=cj5*cj5;
IkReal x13270=cj6*cj6;
IkReal x13271=(r00*r20);
IkReal x13272=(r02*r22);
IkReal x13273=(cj5*sj5);
IkReal x13274=(cj6*r21);
IkReal x13275=(r00*sj6);
IkReal x13276=(r20*sj6);
IkReal x13277=(cj6*r01);
IkReal x13278=((1.0)*x13269);
IkReal x13279=(r01*r21*x13270);
IkReal x13280=((((-1.0)*x13270*x13271*x13278))+((x13269*x13274*x13275))+((x13269*x13276*x13277))+(((-1.0)*x13279))+((r01*r21))+(((-1.0)*x13276*x13277))+((r02*x13273*x13276))+((r02*x13273*x13274))+(((-1.0)*x13272*x13278))+((r22*x13273*x13275))+((r22*x13273*x13277))+((x13270*x13271))+x13272+((x13269*x13271))+((x13269*x13279))+(((-1.0)*x13274*x13275)));
j4eval[0]=x13280;
j4eval[1]=IKsign(x13280);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13281=cj5*cj5;
IkReal x13282=cj6*cj6;
IkReal x13283=(cj6*r21);
IkReal x13284=(cj6*r20);
IkReal x13285=(cj0*cj2);
IkReal x13286=(r20*sj6);
IkReal x13287=((1.0)*sj6);
IkReal x13288=(sj0*sj2);
IkReal x13289=((1.0)*cj5);
IkReal x13290=(r02*r22);
IkReal x13291=(r22*sj5);
IkReal x13292=(r00*sj6);
IkReal x13293=(cj5*r02*sj5);
IkReal x13294=(r01*x13281);
IkReal x13295=(r21*x13282);
IkReal x13296=(r00*r20*x13281);
CheckValue<IkReal> x13297 = IKatan2WithCheck(IkReal((((x13284*x13285))+(((-1.0)*x13284*x13288))+((r21*sj6*x13288))+(((-1.0)*r21*x13285*x13287)))),((((-1.0)*x13283*x13288*x13289))+((x13285*x13291))+(((-1.0)*x13288*x13291))+((cj5*x13283*x13285))+(((-1.0)*x13286*x13288*x13289))+((cj5*x13285*x13286))),IKFAST_ATAN2_MAGTHRESH);
if(!x13297.valid){
continue;
}
CheckValue<IkReal> x13298=IKPowWithIntegerCheck(IKsign((((r00*r20*x13282))+(((-1.0)*r00*x13283*x13287))+((cj5*cj6*r01*x13291))+((r01*r21))+((x13294*x13295))+(((-1.0)*x13282*x13296))+((cj5*x13291*x13292))+((x13281*x13283*x13292))+(((-1.0)*r01*x13295))+(((-1.0)*r01*x13284*x13287))+((x13286*x13293))+(((-1.0)*x13281*x13290))+((x13283*x13293))+((sj6*x13284*x13294))+x13290+x13296)),-1);
if(!x13298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13297.value)+(((1.5707963267949)*(x13298.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13299=IKsin(j4);
IkReal x13300=IKcos(j4);
IkReal x13301=(cj0*cj2);
IkReal x13302=(cj5*cj6);
IkReal x13303=(r11*sj6);
IkReal x13304=(cj6*r20);
IkReal x13305=(cj5*sj6);
IkReal x13306=(cj6*r10);
IkReal x13307=(r01*sj6);
IkReal x13308=(cj0*sj2);
IkReal x13309=(r21*sj6);
IkReal x13310=(cj6*r00);
IkReal x13311=((1.0)*sj0);
IkReal x13312=(sj2*x13311);
IkReal x13313=((1.0)*x13300);
IkReal x13314=((1.0)*x13299);
IkReal x13315=(sj5*x13314);
evalcond[0]=((((-1.0)*x13309*x13313))+((x13300*x13304))+(((-1.0)*r21*x13302*x13314))+(((-1.0)*r20*x13305*x13314))+(((-1.0)*r22*x13315)));
evalcond[1]=((((-1.0)*x13304*x13314))+(((-1.0)*r21*x13302*x13313))+((x13299*x13309))+(((-1.0)*r20*x13305*x13313))+(((-1.0)*r22*sj5*x13313)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r10*x13305*x13313))+(((-1.0)*r11*x13302*x13313))+(((-1.0)*r12*sj5*x13313))+(((-1.0)*x13306*x13314))+((x13299*x13303))+x13308);
evalcond[3]=((((-1.0)*r10*x13305*x13314))+(((-1.0)*r11*x13302*x13314))+((x13300*x13306))+(((-1.0)*x13303*x13313))+(((-1.0)*x13312))+(((-1.0)*r12*x13315))+x13301);
evalcond[4]=((((-1.0)*r00*x13305*x13313))+(((-1.0)*r02*sj5*x13313))+(((-1.0)*x13310*x13314))+((x13299*x13307))+(((-1.0)*x13312))+x13301+(((-1.0)*r01*x13302*x13313)));
evalcond[5]=((((-1.0)*r00*x13305*x13314))+(((-1.0)*r02*x13315))+((x13300*x13310))+(((-1.0)*cj2*x13311))+(((-1.0)*x13307*x13313))+(((-1.0)*r01*x13302*x13314))+(((-1.0)*x13308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13316=cj6*cj6;
IkReal x13317=cj5*cj5;
IkReal x13318=((1.0)*r11);
IkReal x13319=(r22*sj5);
IkReal x13320=(cj0*sj2);
IkReal x13321=(cj5*sj6);
IkReal x13322=(cj6*r20);
IkReal x13323=(cj2*sj0);
IkReal x13324=(r21*sj6);
IkReal x13325=(cj6*r10);
IkReal x13326=(r12*r22);
IkReal x13327=(r12*sj5);
IkReal x13328=(r21*x13316);
IkReal x13329=(r20*x13323);
IkReal x13330=(cj5*cj6*r21);
IkReal x13331=(r11*x13317);
IkReal x13332=(r10*r20*x13317);
CheckValue<IkReal> x13333=IKPowWithIntegerCheck(IKsign((((r10*r20*x13316))+((r11*r21))+(((-1.0)*x13324*x13325))+((r20*x13321*x13327))+((x13317*x13324*x13325))+(((-1.0)*x13318*x13328))+(((-1.0)*x13317*x13326))+(((-1.0)*x13316*x13332))+((sj6*x13322*x13331))+((cj5*cj6*r11*x13319))+((r10*x13319*x13321))+((x13328*x13331))+(((-1.0)*sj6*x13318*x13322))+x13332+x13326+((x13327*x13330)))),-1);
if(!x13333.valid){
continue;
}
CheckValue<IkReal> x13334 = IKatan2WithCheck(IkReal(((((-1.0)*x13320*x13324))+((x13320*x13322))+((x13322*x13323))+(((-1.0)*x13323*x13324)))),(((r20*x13320*x13321))+((x13320*x13330))+((x13321*x13329))+((x13319*x13320))+((x13319*x13323))+((x13323*x13330))),IKFAST_ATAN2_MAGTHRESH);
if(!x13334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13333.value)))+(x13334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13335=IKsin(j4);
IkReal x13336=IKcos(j4);
IkReal x13337=(cj0*cj2);
IkReal x13338=(cj5*cj6);
IkReal x13339=(r11*sj6);
IkReal x13340=(cj6*r20);
IkReal x13341=(cj5*sj6);
IkReal x13342=(cj6*r10);
IkReal x13343=(r01*sj6);
IkReal x13344=(cj0*sj2);
IkReal x13345=(r21*sj6);
IkReal x13346=(cj6*r00);
IkReal x13347=((1.0)*sj0);
IkReal x13348=(sj2*x13347);
IkReal x13349=((1.0)*x13336);
IkReal x13350=((1.0)*x13335);
IkReal x13351=(sj5*x13350);
evalcond[0]=((((-1.0)*r22*x13351))+((x13336*x13340))+(((-1.0)*r20*x13341*x13350))+(((-1.0)*r21*x13338*x13350))+(((-1.0)*x13345*x13349)));
evalcond[1]=(((x13335*x13345))+(((-1.0)*r20*x13341*x13349))+(((-1.0)*r21*x13338*x13349))+(((-1.0)*x13340*x13350))+(((-1.0)*r22*sj5*x13349)));
evalcond[2]=((((-1.0)*r10*x13341*x13349))+((cj2*sj0))+(((-1.0)*x13342*x13350))+((x13335*x13339))+(((-1.0)*r11*x13338*x13349))+(((-1.0)*r12*sj5*x13349))+x13344);
evalcond[3]=((((-1.0)*r12*x13351))+(((-1.0)*x13348))+((x13336*x13342))+(((-1.0)*x13339*x13349))+(((-1.0)*r10*x13341*x13350))+x13337+(((-1.0)*r11*x13338*x13350)));
evalcond[4]=((((-1.0)*x13346*x13350))+((x13335*x13343))+(((-1.0)*r01*x13338*x13349))+(((-1.0)*x13348))+(((-1.0)*r02*sj5*x13349))+(((-1.0)*r00*x13341*x13349))+x13337);
evalcond[5]=((((-1.0)*r02*x13351))+(((-1.0)*cj2*x13347))+((x13336*x13346))+(((-1.0)*r00*x13341*x13350))+(((-1.0)*x13344))+(((-1.0)*x13343*x13349))+(((-1.0)*r01*x13338*x13350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13352=(cj0*cj2);
IkReal x13353=(cj6*r20);
IkReal x13354=(r21*sj6);
IkReal x13355=(sj0*sj2);
IkReal x13356=(r22*sj5);
IkReal x13357=(cj5*r20*sj6);
IkReal x13358=(cj5*cj6*r21);
CheckValue<IkReal> x13359=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13359.valid){
continue;
}
CheckValue<IkReal> x13360 = IKatan2WithCheck(IkReal((((x13352*x13353))+(((-1.0)*x13352*x13354))+((x13354*x13355))+(((-1.0)*x13353*x13355)))),(((x13352*x13358))+((x13352*x13357))+((x13352*x13356))+(((-1.0)*x13355*x13358))+(((-1.0)*x13355*x13357))+(((-1.0)*x13355*x13356))),IKFAST_ATAN2_MAGTHRESH);
if(!x13360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13359.value)))+(x13360.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13361=IKsin(j4);
IkReal x13362=IKcos(j4);
IkReal x13363=(cj0*cj2);
IkReal x13364=(cj5*cj6);
IkReal x13365=(r11*sj6);
IkReal x13366=(cj6*r20);
IkReal x13367=(cj5*sj6);
IkReal x13368=(cj6*r10);
IkReal x13369=(r01*sj6);
IkReal x13370=(cj0*sj2);
IkReal x13371=(r21*sj6);
IkReal x13372=(cj6*r00);
IkReal x13373=((1.0)*sj0);
IkReal x13374=(sj2*x13373);
IkReal x13375=((1.0)*x13362);
IkReal x13376=((1.0)*x13361);
IkReal x13377=(sj5*x13376);
evalcond[0]=((((-1.0)*r21*x13364*x13376))+((x13362*x13366))+(((-1.0)*r22*x13377))+(((-1.0)*r20*x13367*x13376))+(((-1.0)*x13371*x13375)));
evalcond[1]=((((-1.0)*x13366*x13376))+(((-1.0)*r21*x13364*x13375))+(((-1.0)*r22*sj5*x13375))+((x13361*x13371))+(((-1.0)*r20*x13367*x13375)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r12*sj5*x13375))+((x13361*x13365))+(((-1.0)*x13368*x13376))+(((-1.0)*r11*x13364*x13375))+x13370+(((-1.0)*r10*x13367*x13375)));
evalcond[3]=((((-1.0)*x13365*x13375))+((x13362*x13368))+(((-1.0)*r11*x13364*x13376))+(((-1.0)*x13374))+x13363+(((-1.0)*r10*x13367*x13376))+(((-1.0)*r12*x13377)));
evalcond[4]=((((-1.0)*x13372*x13376))+(((-1.0)*r01*x13364*x13375))+((x13361*x13369))+(((-1.0)*r00*x13367*x13375))+(((-1.0)*x13374))+x13363+(((-1.0)*r02*sj5*x13375)));
evalcond[5]=(((x13362*x13372))+(((-1.0)*r01*x13364*x13376))+(((-1.0)*x13369*x13375))+(((-1.0)*r00*x13367*x13376))+(((-1.0)*r02*x13377))+(((-1.0)*cj2*x13373))+(((-1.0)*x13370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13378=(cj1*r12);
IkReal x13379=(r00*sj6);
IkReal x13380=((69.0)*cj1);
IkReal x13381=(cj6*r01);
IkReal x13382=((1.0)*sj5);
IkReal x13383=(cj5*r02);
IkReal x13384=(cj6*r11);
IkReal x13385=(r10*sj6);
IkReal x13386=((69.0)*sj2*sj5);
IkReal x13387=((374.29)*cj1*sj5);
IkReal x13388=((10.0)*cj1*cj5);
CheckValue<IkReal> x13389=IKPowWithIntegerCheck(((((364.42)*(cj1*cj1)))+(((-1.0)*cj2*sj1*x13380))+x13380),-1);
if(!x13389.valid){
continue;
}
CheckValue<IkReal> x13390=IKPowWithIntegerCheck(cj1,-1);
if(!x13390.valid){
continue;
}
if( IKabs(((x13389.value)*(((((-69.0)*sj2*x13383))+(((1000.0)*cj1*py))+((x13385*x13387))+(((-374.29)*cj5*x13378))+(((-1.0)*x13385*x13388))+((x13381*x13386))+(((-10.0)*sj5*x13378))+((x13384*x13387))+(((-1.0)*x13384*x13388))+((x13379*x13386)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13390.value)*(((((-1.0)*x13379*x13382))+(((-1.0)*x13381*x13382))+x13383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13389.value)*(((((-69.0)*sj2*x13383))+(((1000.0)*cj1*py))+((x13385*x13387))+(((-374.29)*cj5*x13378))+(((-1.0)*x13385*x13388))+((x13381*x13386))+(((-10.0)*sj5*x13378))+((x13384*x13387))+(((-1.0)*x13384*x13388))+((x13379*x13386))))))+IKsqr(((x13390.value)*(((((-1.0)*x13379*x13382))+(((-1.0)*x13381*x13382))+x13383))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13389.value)*(((((-69.0)*sj2*x13383))+(((1000.0)*cj1*py))+((x13385*x13387))+(((-374.29)*cj5*x13378))+(((-1.0)*x13385*x13388))+((x13381*x13386))+(((-10.0)*sj5*x13378))+((x13384*x13387))+(((-1.0)*x13384*x13388))+((x13379*x13386))))), ((x13390.value)*(((((-1.0)*x13379*x13382))+(((-1.0)*x13381*x13382))+x13383))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x13391=IKcos(j0);
IkReal x13392=IKsin(j0);
IkReal x13393=((0.01)*cj5);
IkReal x13394=(cj6*r11);
IkReal x13395=(cj5*r12);
IkReal x13396=(r10*sj6);
IkReal x13397=((0.37429)*sj5);
IkReal x13398=(r00*sj6);
IkReal x13399=((1.0)*sj5);
IkReal x13400=(cj6*r01);
IkReal x13401=(cj5*r02);
IkReal x13402=(cj2*sj1);
IkReal x13403=((0.01)*sj5);
IkReal x13404=(cj1*x13392);
IkReal x13405=((0.069)*x13392);
IkReal x13406=((0.069)*x13391);
IkReal x13407=(cj1*x13391);
evalcond[0]=(x13401+(((-1.0)*x13399*x13400))+(((-1.0)*x13407))+(((-1.0)*x13398*x13399)));
evalcond[1]=((((-1.0)*x13396*x13399))+(((-1.0)*x13394*x13399))+(((-1.0)*x13404))+x13395);
evalcond[2]=(x13406+(((0.37429)*x13401))+((x13393*x13398))+((x13393*x13400))+(((-1.0)*x13397*x13400))+(((-1.0)*sj2*x13405))+(((-1.0)*px))+(((-1.0)*x13402*x13406))+((r02*x13403))+(((-1.0)*x13397*x13398))+(((0.36442)*x13407)));
evalcond[3]=(x13405+((sj2*x13406))+((x13393*x13396))+((x13393*x13394))+((r12*x13403))+(((0.37429)*x13395))+(((-1.0)*x13396*x13397))+(((-1.0)*py))+(((-1.0)*x13394*x13397))+(((-1.0)*x13402*x13405))+(((0.36442)*x13404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13408=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x13408;
j4eval[1]=IKsign(x13408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13409=((1.0)*sj5);
IkReal x13410=((((-1.0)*r00*sj6*x13409))+(((-1.0)*cj6*r01*x13409))+((cj5*r02)));
j4eval[0]=x13410;
j4eval[1]=IKsign(x13410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13411=cj5*cj5;
IkReal x13412=cj6*cj6;
IkReal x13413=r22*r22;
IkReal x13414=r21*r21;
IkReal x13415=r20*r20;
IkReal x13416=(cj6*r21);
IkReal x13417=(r20*sj6);
IkReal x13418=(cj1*cj2);
IkReal x13419=(r22*sj5);
IkReal x13420=(cj6*r20);
IkReal x13421=((2.0)*cj5);
IkReal x13422=(cj1*sj2);
IkReal x13423=((1.0)*x13414);
IkReal x13424=((1.0)*x13415);
IkReal x13425=((1.0)*r21*sj6);
IkReal x13426=((1.0)*cj5*x13422);
IkReal x13427=(x13411*x13412);
IkReal x13428=(((x13415*x13427))+(((-1.0)*x13411*x13424))+(((-1.0)*x13413))+(((-1.0)*x13412*x13424))+(((-1.0)*x13423*x13427))+(((-2.0)*x13411*x13416*x13417))+(((-1.0)*x13423))+((x13412*x13414))+((x13411*x13413))+(((-1.0)*x13417*x13419*x13421))+(((-1.0)*x13416*x13419*x13421))+(((2.0)*x13416*x13417)));
j4eval[0]=x13428;
j4eval[1]=((IKabs((((x13418*x13419))+(((-1.0)*x13422*x13425))+((x13420*x13422))+((cj5*x13417*x13418))+((cj5*x13416*x13418)))))+(IKabs(((((-1.0)*x13419*x13422))+(((-1.0)*x13416*x13426))+((x13418*x13420))+(((-1.0)*x13417*x13426))+(((-1.0)*x13418*x13425))))));
j4eval[2]=IKsign(x13428);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13429=((0.069)*cj0);
IkReal x13430=((0.01)*cj5);
IkReal x13431=(cj6*r11);
IkReal x13432=(r10*sj6);
IkReal x13433=((0.37429)*sj5);
IkReal x13434=(r00*sj6);
IkReal x13435=(r20*sj6);
IkReal x13436=((0.069)*sj0);
IkReal x13437=((1.0)*sj5);
IkReal x13438=((0.01)*sj5);
IkReal x13439=(cj6*r01);
IkReal x13440=((0.37429)*cj5);
IkReal x13441=(cj6*r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((r22*x13440))+(((-1.0)*x13433*x13441))+((r22*x13438))+(((-1.0)*pz))+((x13430*x13441))+(((-1.0)*x13433*x13435))+((x13430*x13435)));
evalcond[2]=(x13429+((r02*x13440))+(((-1.0)*cj2*x13429))+(((-1.0)*sj2*x13436))+((r02*x13438))+(((-1.0)*px))+(((-1.0)*x13433*x13434))+(((-1.0)*x13433*x13439))+((x13430*x13439))+((x13430*x13434)));
evalcond[3]=(x13436+(((-1.0)*cj2*x13436))+(((-1.0)*x13432*x13433))+(((-1.0)*x13431*x13433))+(((-1.0)*py))+((r12*x13440))+((r12*x13438))+((x13430*x13432))+((x13430*x13431))+((sj2*x13429)));
evalcond[4]=((1.0)+((cj5*r22))+(((-1.0)*x13437*x13441))+(((-1.0)*x13435*x13437)));
evalcond[5]=((((-1.0)*x13437*x13439))+(((-1.0)*x13434*x13437))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*x13432*x13437))+(((-1.0)*x13431*x13437)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13442=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13442;
j4eval[1]=IKsign(x13442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13443=((1.0)*sj5);
IkReal x13444=(((cj5*r12))+(((-1.0)*r10*sj6*x13443))+(((-1.0)*cj6*r11*x13443)));
j4eval[0]=x13444;
j4eval[1]=IKsign(x13444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13445=cj6*cj6;
IkReal x13446=cj5*cj5;
IkReal x13447=(cj5*sj5);
IkReal x13448=(cj6*r21);
IkReal x13449=((1.0)*r11);
IkReal x13450=(r10*r20);
IkReal x13451=(r10*sj6);
IkReal x13452=(r12*r22);
IkReal x13453=(r21*x13445);
IkReal x13454=(cj6*r20*sj6);
IkReal x13455=(r11*x13446);
IkReal x13456=((1.0)*x13446);
IkReal x13457=(x13452+((r12*x13447*x13448))+((r22*x13447*x13451))+(((-1.0)*x13452*x13456))+((r11*r21))+((cj6*r11*r22*x13447))+((x13453*x13455))+(((-1.0)*x13449*x13453))+(((-1.0)*x13449*x13454))+((r12*r20*sj6*x13447))+((x13454*x13455))+(((-1.0)*x13448*x13451))+(((-1.0)*x13445*x13450*x13456))+((x13445*x13450))+((x13446*x13450))+((x13446*x13448*x13451)));
j4eval[0]=x13457;
j4eval[1]=IKsign(x13457);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13458=cj6*cj6;
IkReal x13459=cj5*cj5;
IkReal x13460=(r22*sj5);
IkReal x13461=(cj0*sj2);
IkReal x13462=(r12*r22);
IkReal x13463=(cj5*sj6);
IkReal x13464=((1.0)*r11);
IkReal x13465=(cj6*r21);
IkReal x13466=(cj6*r20);
IkReal x13467=(r12*sj5);
IkReal x13468=((1.0)*sj6);
IkReal x13469=((1.0)*cj2*sj0);
IkReal x13470=((1.0)*x13459);
IkReal x13471=(r21*x13458);
IkReal x13472=(r10*x13459);
IkReal x13473=(r11*x13459);
IkReal x13474=(r10*r20*x13458);
CheckValue<IkReal> x13475=IKPowWithIntegerCheck(IKsign((((sj6*x13466*x13473))+x13462+x13474+((sj6*x13465*x13472))+((cj5*cj6*r11*x13460))+((r10*x13460*x13463))+((x13471*x13473))+(((-1.0)*x13462*x13470))+((r11*r21))+((r20*x13463*x13467))+(((-1.0)*x13464*x13471))+(((-1.0)*sj6*x13464*x13466))+(((-1.0)*r10*x13465*x13468))+((cj5*x13465*x13467))+((r20*x13472))+(((-1.0)*x13470*x13474)))),-1);
if(!x13475.valid){
continue;
}
CheckValue<IkReal> x13476 = IKatan2WithCheck(IkReal((((cj2*r21*sj0*sj6))+(((-1.0)*r21*x13461*x13468))+((x13461*x13466))+(((-1.0)*x13466*x13469)))),(((r20*x13461*x13463))+(((-1.0)*cj5*x13465*x13469))+((cj5*x13461*x13465))+(((-1.0)*x13460*x13469))+((x13460*x13461))+(((-1.0)*r20*x13463*x13469))),IKFAST_ATAN2_MAGTHRESH);
if(!x13476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13475.value)))+(x13476.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13477=IKsin(j4);
IkReal x13478=IKcos(j4);
IkReal x13479=(cj0*sj2);
IkReal x13480=(cj5*cj6);
IkReal x13481=(cj0*cj2);
IkReal x13482=(r11*sj6);
IkReal x13483=(cj6*r20);
IkReal x13484=(cj5*sj6);
IkReal x13485=(cj6*r10);
IkReal x13486=(cj6*r00);
IkReal x13487=((1.0)*sj0);
IkReal x13488=(cj2*x13487);
IkReal x13489=((1.0)*x13478);
IkReal x13490=((1.0)*x13477);
IkReal x13491=(sj6*x13477);
IkReal x13492=(sj5*x13490);
evalcond[0]=((((-1.0)*r21*sj6*x13489))+(((-1.0)*r22*x13492))+(((-1.0)*r21*x13480*x13490))+((x13478*x13483))+(((-1.0)*r20*x13484*x13490)));
evalcond[1]=((((-1.0)*x13483*x13490))+(((-1.0)*r21*x13480*x13489))+(((-1.0)*r20*x13484*x13489))+((r21*x13491))+(((-1.0)*r22*sj5*x13489)));
evalcond[2]=(x13481+(((-1.0)*r10*x13484*x13490))+(((-1.0)*r12*x13492))+(((-1.0)*x13482*x13489))+((x13478*x13485))+((sj0*sj2))+(((-1.0)*r11*x13480*x13490)));
evalcond[3]=(x13479+(((-1.0)*x13488))+(((-1.0)*r01*sj6*x13489))+((x13478*x13486))+(((-1.0)*r02*x13492))+(((-1.0)*r00*x13484*x13490))+(((-1.0)*r01*x13480*x13490)));
evalcond[4]=(x13479+(((-1.0)*x13488))+(((-1.0)*r10*x13484*x13489))+((x13477*x13482))+(((-1.0)*x13485*x13490))+(((-1.0)*r11*x13480*x13489))+(((-1.0)*r12*sj5*x13489)));
evalcond[5]=((((-1.0)*x13481))+(((-1.0)*x13486*x13490))+(((-1.0)*r00*x13484*x13489))+((r01*x13491))+(((-1.0)*r02*sj5*x13489))+(((-1.0)*r01*x13480*x13489))+(((-1.0)*sj2*x13487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13493=(cj0*sj2);
IkReal x13494=(cj6*r20);
IkReal x13495=(r22*sj5);
IkReal x13496=((1.0)*sj5);
IkReal x13497=(r21*sj6);
IkReal x13498=((1.0)*cj2*sj0);
IkReal x13499=(cj5*cj6*r21);
IkReal x13500=(cj5*r20*sj6);
CheckValue<IkReal> x13501=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x13496))+(((-1.0)*r10*sj6*x13496)))),-1);
if(!x13501.valid){
continue;
}
CheckValue<IkReal> x13502 = IKatan2WithCheck(IkReal(((((-1.0)*x13493*x13497))+(((-1.0)*x13494*x13498))+((cj2*sj0*x13497))+((x13493*x13494)))),((((-1.0)*x13495*x13498))+((x13493*x13500))+(((-1.0)*x13498*x13500))+((x13493*x13495))+((x13493*x13499))+(((-1.0)*x13498*x13499))),IKFAST_ATAN2_MAGTHRESH);
if(!x13502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13501.value)))+(x13502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13503=IKsin(j4);
IkReal x13504=IKcos(j4);
IkReal x13505=(cj0*sj2);
IkReal x13506=(cj5*cj6);
IkReal x13507=(cj0*cj2);
IkReal x13508=(r11*sj6);
IkReal x13509=(cj6*r20);
IkReal x13510=(cj5*sj6);
IkReal x13511=(cj6*r10);
IkReal x13512=(cj6*r00);
IkReal x13513=((1.0)*sj0);
IkReal x13514=(cj2*x13513);
IkReal x13515=((1.0)*x13504);
IkReal x13516=((1.0)*x13503);
IkReal x13517=(sj6*x13503);
IkReal x13518=(sj5*x13516);
evalcond[0]=((((-1.0)*r21*sj6*x13515))+(((-1.0)*r22*x13518))+(((-1.0)*r21*x13506*x13516))+((x13504*x13509))+(((-1.0)*r20*x13510*x13516)));
evalcond[1]=(((r21*x13517))+(((-1.0)*r21*x13506*x13515))+(((-1.0)*r20*x13510*x13515))+(((-1.0)*r22*sj5*x13515))+(((-1.0)*x13509*x13516)));
evalcond[2]=((((-1.0)*x13508*x13515))+x13507+(((-1.0)*r12*x13518))+(((-1.0)*r10*x13510*x13516))+((sj0*sj2))+(((-1.0)*r11*x13506*x13516))+((x13504*x13511)));
evalcond[3]=((((-1.0)*r00*x13510*x13516))+x13505+(((-1.0)*r01*x13506*x13516))+(((-1.0)*r01*sj6*x13515))+(((-1.0)*x13514))+((x13504*x13512))+(((-1.0)*r02*x13518)));
evalcond[4]=(x13505+(((-1.0)*r10*x13510*x13515))+(((-1.0)*x13511*x13516))+(((-1.0)*r11*x13506*x13515))+((x13503*x13508))+(((-1.0)*x13514))+(((-1.0)*r12*sj5*x13515)));
evalcond[5]=((((-1.0)*sj2*x13513))+(((-1.0)*r00*x13510*x13515))+(((-1.0)*r01*x13506*x13515))+(((-1.0)*x13507))+(((-1.0)*r02*sj5*x13515))+(((-1.0)*x13512*x13516))+((r01*x13517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13519=(sj0*sj2);
IkReal x13520=(cj0*cj2);
IkReal x13521=(cj6*r20);
IkReal x13522=(r22*sj5);
IkReal x13523=((1.0)*r21*sj6);
IkReal x13524=(cj5*cj6*r21);
IkReal x13525=(cj5*r20*sj6);
CheckValue<IkReal> x13526 = IKatan2WithCheck(IkReal((((x13520*x13521))+(((-1.0)*x13520*x13523))+((x13519*x13521))+(((-1.0)*x13519*x13523)))),(((x13520*x13522))+((x13520*x13524))+((x13520*x13525))+((x13519*x13525))+((x13519*x13524))+((x13519*x13522))),IKFAST_ATAN2_MAGTHRESH);
if(!x13526.valid){
continue;
}
CheckValue<IkReal> x13527=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13526.value)+(((1.5707963267949)*(x13527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13528=IKsin(j4);
IkReal x13529=IKcos(j4);
IkReal x13530=(cj0*sj2);
IkReal x13531=(cj5*cj6);
IkReal x13532=(cj0*cj2);
IkReal x13533=(r11*sj6);
IkReal x13534=(cj6*r20);
IkReal x13535=(cj5*sj6);
IkReal x13536=(cj6*r10);
IkReal x13537=(cj6*r00);
IkReal x13538=((1.0)*sj0);
IkReal x13539=(cj2*x13538);
IkReal x13540=((1.0)*x13529);
IkReal x13541=((1.0)*x13528);
IkReal x13542=(sj6*x13528);
IkReal x13543=(sj5*x13541);
evalcond[0]=((((-1.0)*r20*x13535*x13541))+(((-1.0)*r21*sj6*x13540))+((x13529*x13534))+(((-1.0)*r21*x13531*x13541))+(((-1.0)*r22*x13543)));
evalcond[1]=((((-1.0)*r20*x13535*x13540))+((r21*x13542))+(((-1.0)*r22*sj5*x13540))+(((-1.0)*r21*x13531*x13540))+(((-1.0)*x13534*x13541)));
evalcond[2]=(x13532+(((-1.0)*r11*x13531*x13541))+(((-1.0)*r10*x13535*x13541))+((sj0*sj2))+((x13529*x13536))+(((-1.0)*x13533*x13540))+(((-1.0)*r12*x13543)));
evalcond[3]=(x13530+(((-1.0)*r01*sj6*x13540))+(((-1.0)*r02*x13543))+(((-1.0)*r01*x13531*x13541))+((x13529*x13537))+(((-1.0)*r00*x13535*x13541))+(((-1.0)*x13539)));
evalcond[4]=(x13530+(((-1.0)*r11*x13531*x13540))+(((-1.0)*x13536*x13541))+(((-1.0)*r12*sj5*x13540))+((x13528*x13533))+(((-1.0)*r10*x13535*x13540))+(((-1.0)*x13539)));
evalcond[5]=(((r01*x13542))+(((-1.0)*sj2*x13538))+(((-1.0)*x13532))+(((-1.0)*r01*x13531*x13540))+(((-1.0)*r00*x13535*x13540))+(((-1.0)*x13537*x13541))+(((-1.0)*r02*sj5*x13540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13544=((0.069)*cj0);
IkReal x13545=((0.01)*cj5);
IkReal x13546=(cj6*r11);
IkReal x13547=(r10*sj6);
IkReal x13548=((0.37429)*sj5);
IkReal x13549=(r00*sj6);
IkReal x13550=(r20*sj6);
IkReal x13551=((0.069)*sj0);
IkReal x13552=((1.0)*sj5);
IkReal x13553=((0.01)*sj5);
IkReal x13554=(cj6*r01);
IkReal x13555=((0.37429)*cj5);
IkReal x13556=(cj6*r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((r22*x13553))+((r22*x13555))+(((-1.0)*x13548*x13556))+(((-1.0)*x13548*x13550))+(((-1.0)*pz))+((x13545*x13556))+((x13545*x13550)));
evalcond[2]=(x13544+((cj2*x13544))+(((-1.0)*x13548*x13549))+(((-1.0)*x13548*x13554))+(((-1.0)*px))+(((-1.0)*sj2*x13551))+((x13545*x13554))+((x13545*x13549))+((r02*x13555))+((r02*x13553)));
evalcond[3]=(x13551+((r12*x13553))+((r12*x13555))+(((-1.0)*x13547*x13548))+((cj2*x13551))+((sj2*x13544))+(((-1.0)*py))+(((-1.0)*x13546*x13548))+((x13545*x13547))+((x13545*x13546)));
evalcond[4]=((-1.0)+((cj5*r22))+(((-1.0)*x13550*x13552))+(((-1.0)*x13552*x13556)));
evalcond[5]=((((-1.0)*x13549*x13552))+(((-1.0)*x13552*x13554))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*x13547*x13552))+(((-1.0)*x13546*x13552)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13557=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13557;
j4eval[1]=IKsign(x13557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13558=cj6*cj6;
IkReal x13559=cj5*cj5;
IkReal x13560=(cj5*sj5);
IkReal x13561=(cj6*r21);
IkReal x13562=((1.0)*r11);
IkReal x13563=(r10*r20);
IkReal x13564=(r10*sj6);
IkReal x13565=(r12*r22);
IkReal x13566=(r21*x13558);
IkReal x13567=(cj6*r20*sj6);
IkReal x13568=(r11*x13559);
IkReal x13569=((1.0)*x13559);
IkReal x13570=((((-1.0)*x13562*x13566))+(((-1.0)*x13562*x13567))+x13565+((cj6*r11*r22*x13560))+((x13559*x13563))+((r11*r21))+(((-1.0)*x13558*x13563*x13569))+((r22*x13560*x13564))+((x13566*x13568))+((x13567*x13568))+((x13558*x13563))+((x13559*x13561*x13564))+(((-1.0)*x13565*x13569))+(((-1.0)*x13561*x13564))+((r12*r20*sj6*x13560))+((r12*x13560*x13561)));
j4eval[0]=x13570;
j4eval[1]=IKsign(x13570);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13571=cj5*cj5;
IkReal x13572=cj6*cj6;
IkReal x13573=(r00*r20);
IkReal x13574=(r02*r22);
IkReal x13575=(cj5*sj5);
IkReal x13576=(cj6*r21);
IkReal x13577=(r00*sj6);
IkReal x13578=(r20*sj6);
IkReal x13579=(cj6*r01);
IkReal x13580=((1.0)*x13571);
IkReal x13581=(r01*r21*x13572);
IkReal x13582=(x13574+(((-1.0)*x13576*x13577))+((x13571*x13576*x13577))+((x13571*x13578*x13579))+(((-1.0)*x13574*x13580))+((r22*x13575*x13577))+((r22*x13575*x13579))+(((-1.0)*x13572*x13573*x13580))+((r01*r21))+(((-1.0)*x13581))+((x13571*x13581))+((x13572*x13573))+((r02*x13575*x13576))+((r02*x13575*x13578))+((x13571*x13573))+(((-1.0)*x13578*x13579)));
j4eval[0]=x13582;
j4eval[1]=IKsign(x13582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13583=cj5*cj5;
IkReal x13584=cj6*cj6;
IkReal x13585=(cj6*r21);
IkReal x13586=(cj6*r20);
IkReal x13587=(cj0*cj2);
IkReal x13588=(r20*sj6);
IkReal x13589=((1.0)*sj6);
IkReal x13590=(sj0*sj2);
IkReal x13591=((1.0)*cj5);
IkReal x13592=(r02*r22);
IkReal x13593=(r22*sj5);
IkReal x13594=(r00*sj6);
IkReal x13595=(cj5*r02*sj5);
IkReal x13596=(r01*x13583);
IkReal x13597=(r21*x13584);
IkReal x13598=(r00*r20*x13583);
CheckValue<IkReal> x13599 = IKatan2WithCheck(IkReal(((((-1.0)*x13586*x13590))+(((-1.0)*r21*x13587*x13589))+((x13586*x13587))+((r21*sj6*x13590)))),((((-1.0)*x13590*x13593))+(((-1.0)*x13588*x13590*x13591))+((cj5*x13587*x13588))+((x13587*x13593))+(((-1.0)*x13585*x13590*x13591))+((cj5*x13585*x13587))),IKFAST_ATAN2_MAGTHRESH);
if(!x13599.valid){
continue;
}
CheckValue<IkReal> x13600=IKPowWithIntegerCheck(IKsign((x13592+x13598+(((-1.0)*r00*x13585*x13589))+((x13588*x13595))+(((-1.0)*x13584*x13598))+(((-1.0)*x13583*x13592))+((r00*r20*x13584))+((sj6*x13586*x13596))+((r01*r21))+((x13583*x13585*x13594))+((cj5*cj6*r01*x13593))+((cj5*x13593*x13594))+((x13585*x13595))+(((-1.0)*r01*x13597))+(((-1.0)*r01*x13586*x13589))+((x13596*x13597)))),-1);
if(!x13600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13599.value)+(((1.5707963267949)*(x13600.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13601=IKsin(j4);
IkReal x13602=IKcos(j4);
IkReal x13603=(cj0*cj2);
IkReal x13604=(cj5*cj6);
IkReal x13605=(r11*sj6);
IkReal x13606=(cj6*r20);
IkReal x13607=(cj5*sj6);
IkReal x13608=(cj6*r10);
IkReal x13609=(r01*sj6);
IkReal x13610=(cj0*sj2);
IkReal x13611=(r21*sj6);
IkReal x13612=(cj6*r00);
IkReal x13613=((1.0)*sj0);
IkReal x13614=(sj2*x13613);
IkReal x13615=((1.0)*x13602);
IkReal x13616=((1.0)*x13601);
IkReal x13617=(sj5*x13616);
evalcond[0]=((((-1.0)*r21*x13604*x13616))+(((-1.0)*r20*x13607*x13616))+(((-1.0)*x13611*x13615))+(((-1.0)*r22*x13617))+((x13602*x13606)));
evalcond[1]=((((-1.0)*x13606*x13616))+(((-1.0)*r21*x13604*x13615))+(((-1.0)*r22*sj5*x13615))+(((-1.0)*r20*x13607*x13615))+((x13601*x13611)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*x13608*x13616))+x13610+(((-1.0)*r10*x13607*x13615))+((x13601*x13605))+(((-1.0)*r12*sj5*x13615))+(((-1.0)*r11*x13604*x13615)));
evalcond[3]=((((-1.0)*x13614))+x13603+(((-1.0)*r10*x13607*x13616))+(((-1.0)*r11*x13604*x13616))+(((-1.0)*x13605*x13615))+((x13602*x13608))+(((-1.0)*r12*x13617)));
evalcond[4]=((((-1.0)*x13614))+x13603+((x13601*x13609))+(((-1.0)*x13612*x13616))+(((-1.0)*r00*x13607*x13615))+(((-1.0)*r02*sj5*x13615))+(((-1.0)*r01*x13604*x13615)));
evalcond[5]=((((-1.0)*x13609*x13615))+(((-1.0)*r02*x13617))+((x13602*x13612))+(((-1.0)*x13610))+(((-1.0)*r00*x13607*x13616))+(((-1.0)*r01*x13604*x13616))+(((-1.0)*cj2*x13613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13618=cj6*cj6;
IkReal x13619=cj5*cj5;
IkReal x13620=((1.0)*r11);
IkReal x13621=(r22*sj5);
IkReal x13622=(cj0*sj2);
IkReal x13623=(cj5*sj6);
IkReal x13624=(cj6*r20);
IkReal x13625=(cj2*sj0);
IkReal x13626=(r21*sj6);
IkReal x13627=(cj6*r10);
IkReal x13628=(r12*r22);
IkReal x13629=(r12*sj5);
IkReal x13630=(r21*x13618);
IkReal x13631=(r20*x13625);
IkReal x13632=(cj5*cj6*r21);
IkReal x13633=(r11*x13619);
IkReal x13634=(r10*r20*x13619);
CheckValue<IkReal> x13635 = IKatan2WithCheck(IkReal(((((-1.0)*x13622*x13626))+((x13624*x13625))+(((-1.0)*x13625*x13626))+((x13622*x13624)))),(((x13623*x13631))+((x13625*x13632))+((x13621*x13622))+((x13621*x13625))+((x13622*x13632))+((r20*x13622*x13623))),IKFAST_ATAN2_MAGTHRESH);
if(!x13635.valid){
continue;
}
CheckValue<IkReal> x13636=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj6*x13620*x13624))+(((-1.0)*x13620*x13630))+(((-1.0)*x13626*x13627))+x13628+x13634+((r11*r21))+((cj5*cj6*r11*x13621))+(((-1.0)*x13618*x13634))+((sj6*x13624*x13633))+(((-1.0)*x13619*x13628))+((r20*x13623*x13629))+((r10*x13621*x13623))+((x13630*x13633))+((x13629*x13632))+((x13619*x13626*x13627))+((r10*r20*x13618)))),-1);
if(!x13636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13635.value)+(((1.5707963267949)*(x13636.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13637=IKsin(j4);
IkReal x13638=IKcos(j4);
IkReal x13639=(cj0*cj2);
IkReal x13640=(cj5*cj6);
IkReal x13641=(r11*sj6);
IkReal x13642=(cj6*r20);
IkReal x13643=(cj5*sj6);
IkReal x13644=(cj6*r10);
IkReal x13645=(r01*sj6);
IkReal x13646=(cj0*sj2);
IkReal x13647=(r21*sj6);
IkReal x13648=(cj6*r00);
IkReal x13649=((1.0)*sj0);
IkReal x13650=(sj2*x13649);
IkReal x13651=((1.0)*x13638);
IkReal x13652=((1.0)*x13637);
IkReal x13653=(sj5*x13652);
evalcond[0]=((((-1.0)*r22*x13653))+(((-1.0)*r20*x13643*x13652))+((x13638*x13642))+(((-1.0)*x13647*x13651))+(((-1.0)*r21*x13640*x13652)));
evalcond[1]=((((-1.0)*x13642*x13652))+(((-1.0)*r20*x13643*x13651))+(((-1.0)*r22*sj5*x13651))+((x13637*x13647))+(((-1.0)*r21*x13640*x13651)));
evalcond[2]=((((-1.0)*r10*x13643*x13651))+((cj2*sj0))+(((-1.0)*r12*sj5*x13651))+x13646+(((-1.0)*x13644*x13652))+(((-1.0)*r11*x13640*x13651))+((x13637*x13641)));
evalcond[3]=((((-1.0)*r10*x13643*x13652))+x13639+(((-1.0)*r11*x13640*x13652))+(((-1.0)*r12*x13653))+(((-1.0)*x13641*x13651))+((x13638*x13644))+(((-1.0)*x13650)));
evalcond[4]=((((-1.0)*x13648*x13652))+(((-1.0)*r02*sj5*x13651))+x13639+(((-1.0)*r00*x13643*x13651))+(((-1.0)*r01*x13640*x13651))+((x13637*x13645))+(((-1.0)*x13650)));
evalcond[5]=((((-1.0)*r02*x13653))+(((-1.0)*r00*x13643*x13652))+(((-1.0)*x13645*x13651))+(((-1.0)*r01*x13640*x13652))+(((-1.0)*x13646))+(((-1.0)*cj2*x13649))+((x13638*x13648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13654=(cj0*cj2);
IkReal x13655=(cj6*r20);
IkReal x13656=(r21*sj6);
IkReal x13657=(sj0*sj2);
IkReal x13658=(r22*sj5);
IkReal x13659=(cj5*r20*sj6);
IkReal x13660=(cj5*cj6*r21);
CheckValue<IkReal> x13661=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13661.valid){
continue;
}
CheckValue<IkReal> x13662 = IKatan2WithCheck(IkReal(((((-1.0)*x13654*x13656))+((x13656*x13657))+(((-1.0)*x13655*x13657))+((x13654*x13655)))),(((x13654*x13660))+(((-1.0)*x13657*x13660))+(((-1.0)*x13657*x13659))+(((-1.0)*x13657*x13658))+((x13654*x13659))+((x13654*x13658))),IKFAST_ATAN2_MAGTHRESH);
if(!x13662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13661.value)))+(x13662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13663=IKsin(j4);
IkReal x13664=IKcos(j4);
IkReal x13665=(cj0*cj2);
IkReal x13666=(cj5*cj6);
IkReal x13667=(r11*sj6);
IkReal x13668=(cj6*r20);
IkReal x13669=(cj5*sj6);
IkReal x13670=(cj6*r10);
IkReal x13671=(r01*sj6);
IkReal x13672=(cj0*sj2);
IkReal x13673=(r21*sj6);
IkReal x13674=(cj6*r00);
IkReal x13675=((1.0)*sj0);
IkReal x13676=(sj2*x13675);
IkReal x13677=((1.0)*x13664);
IkReal x13678=((1.0)*x13663);
IkReal x13679=(sj5*x13678);
evalcond[0]=((((-1.0)*r20*x13669*x13678))+(((-1.0)*r21*x13666*x13678))+((x13664*x13668))+(((-1.0)*x13673*x13677))+(((-1.0)*r22*x13679)));
evalcond[1]=((((-1.0)*r20*x13669*x13677))+(((-1.0)*x13668*x13678))+(((-1.0)*r21*x13666*x13677))+(((-1.0)*r22*sj5*x13677))+((x13663*x13673)));
evalcond[2]=(((cj2*sj0))+x13672+(((-1.0)*r10*x13669*x13677))+(((-1.0)*r11*x13666*x13677))+(((-1.0)*r12*sj5*x13677))+(((-1.0)*x13670*x13678))+((x13663*x13667)));
evalcond[3]=(x13665+((x13664*x13670))+(((-1.0)*r10*x13669*x13678))+(((-1.0)*r11*x13666*x13678))+(((-1.0)*r12*x13679))+(((-1.0)*x13676))+(((-1.0)*x13667*x13677)));
evalcond[4]=(x13665+(((-1.0)*x13674*x13678))+(((-1.0)*r00*x13669*x13677))+(((-1.0)*x13676))+(((-1.0)*r01*x13666*x13677))+(((-1.0)*r02*sj5*x13677))+((x13663*x13671)));
evalcond[5]=(((x13664*x13674))+(((-1.0)*r00*x13669*x13678))+(((-1.0)*r01*x13666*x13678))+(((-1.0)*x13671*x13677))+(((-1.0)*r02*x13679))+(((-1.0)*x13672))+(((-1.0)*cj2*x13675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13680=cj5*cj5;
IkReal x13681=cj6*cj6;
IkReal x13682=r22*r22;
IkReal x13683=r21*r21;
IkReal x13684=r20*r20;
IkReal x13685=(cj6*r21);
IkReal x13686=(r20*sj6);
IkReal x13687=(cj1*cj5);
IkReal x13688=((1.0)*sj2);
IkReal x13689=(cj1*cj2);
IkReal x13690=(cj6*r20);
IkReal x13691=(r22*sj5);
IkReal x13692=(r21*sj6);
IkReal x13693=((2.0)*cj5);
IkReal x13694=((1.0)*x13683);
IkReal x13695=((1.0)*x13684);
IkReal x13696=(x13680*x13681);
CheckValue<IkReal> x13697 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x13688*x13691))+(((-1.0)*x13686*x13687*x13688))+(((-1.0)*x13685*x13687*x13688))+((x13689*x13690))+(((-1.0)*x13689*x13692)))),(((cj1*sj2*x13690))+(((-1.0)*cj1*x13688*x13692))+((cj2*x13685*x13687))+((x13689*x13691))+((cj2*x13686*x13687))),IKFAST_ATAN2_MAGTHRESH);
if(!x13697.valid){
continue;
}
CheckValue<IkReal> x13698=IKPowWithIntegerCheck(IKsign((((x13684*x13696))+(((-1.0)*x13686*x13691*x13693))+(((-1.0)*x13694))+(((-1.0)*x13681*x13695))+(((-1.0)*x13680*x13695))+(((-1.0)*x13682))+((x13681*x13683))+(((-1.0)*x13694*x13696))+((x13680*x13682))+(((-2.0)*x13680*x13685*x13686))+(((-1.0)*x13685*x13691*x13693))+(((2.0)*x13685*x13686)))),-1);
if(!x13698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13697.value)+(((1.5707963267949)*(x13698.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13699=IKsin(j4);
IkReal x13700=IKcos(j4);
IkReal x13701=(cj5*cj6);
IkReal x13702=(cj0*sj1);
IkReal x13703=(r11*sj6);
IkReal x13704=(cj6*r20);
IkReal x13705=(cj5*sj6);
IkReal x13706=(cj6*r10);
IkReal x13707=((1.0)*cj2);
IkReal x13708=(r21*sj6);
IkReal x13709=(cj6*r00);
IkReal x13710=(sj0*sj1);
IkReal x13711=(r01*sj6);
IkReal x13712=((1.0)*x13700);
IkReal x13713=((1.0)*x13699);
IkReal x13714=(sj5*x13713);
evalcond[0]=((((-1.0)*r20*x13705*x13713))+(((-1.0)*r22*x13714))+((x13700*x13704))+((cj1*sj2))+(((-1.0)*r21*x13701*x13713))+(((-1.0)*x13708*x13712)));
evalcond[1]=((((-1.0)*r20*x13705*x13712))+(((-1.0)*cj1*x13707))+(((-1.0)*r22*sj5*x13712))+(((-1.0)*r21*x13701*x13712))+(((-1.0)*x13704*x13713))+((x13699*x13708)));
evalcond[2]=((((-1.0)*r11*x13701*x13713))+(((-1.0)*x13703*x13712))+((x13700*x13706))+((sj2*x13710))+(((-1.0)*r12*x13714))+((cj0*cj2))+(((-1.0)*r10*x13705*x13713)));
evalcond[3]=((((-1.0)*sj0*x13707))+((x13700*x13709))+((sj2*x13702))+(((-1.0)*r01*x13701*x13713))+(((-1.0)*r00*x13705*x13713))+(((-1.0)*r02*x13714))+(((-1.0)*x13711*x13712)));
evalcond[4]=((((-1.0)*r11*x13701*x13712))+(((-1.0)*x13707*x13710))+(((-1.0)*x13706*x13713))+(((-1.0)*r12*sj5*x13712))+(((-1.0)*r10*x13705*x13712))+((cj0*sj2))+((x13699*x13703)));
evalcond[5]=((((-1.0)*x13709*x13713))+(((-1.0)*x13702*x13707))+(((-1.0)*r01*x13701*x13712))+(((-1.0)*r00*x13705*x13712))+(((-1.0)*sj0*sj2))+(((-1.0)*r02*sj5*x13712))+((x13699*x13711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13715=(cj6*r21);
IkReal x13716=(r20*sj6);
IkReal x13717=(cj1*sj2);
IkReal x13718=((1.0)*cj6);
IkReal x13719=((1.0)*sj5);
IkReal x13720=(cj0*cj2);
IkReal x13721=(r21*sj6);
IkReal x13722=(sj0*sj1*sj2);
IkReal x13723=((1.0)*cj5*x13720);
IkReal x13724=((1.0)*cj5*x13722);
CheckValue<IkReal> x13725 = IKatan2WithCheck(IkReal((((cj6*r10*x13717))+(((-1.0)*r20*x13718*x13722))+(((-1.0)*r20*x13718*x13720))+((x13720*x13721))+((x13721*x13722))+(((-1.0)*r11*sj6*x13717)))),(((cj5*cj6*r11*x13717))+(((-1.0)*r22*x13719*x13722))+(((-1.0)*r22*x13719*x13720))+((cj5*r10*sj6*x13717))+((r12*sj5*x13717))+(((-1.0)*x13716*x13723))+(((-1.0)*x13716*x13724))+(((-1.0)*x13715*x13723))+(((-1.0)*x13715*x13724))),IKFAST_ATAN2_MAGTHRESH);
if(!x13725.valid){
continue;
}
CheckValue<IkReal> x13726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x13718))+(((-1.0)*r00*sj6*x13719))+((cj5*r02)))),-1);
if(!x13726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13725.value)+(((1.5707963267949)*(x13726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13727=IKsin(j4);
IkReal x13728=IKcos(j4);
IkReal x13729=(cj5*cj6);
IkReal x13730=(cj0*sj1);
IkReal x13731=(r11*sj6);
IkReal x13732=(cj6*r20);
IkReal x13733=(cj5*sj6);
IkReal x13734=(cj6*r10);
IkReal x13735=((1.0)*cj2);
IkReal x13736=(r21*sj6);
IkReal x13737=(cj6*r00);
IkReal x13738=(sj0*sj1);
IkReal x13739=(r01*sj6);
IkReal x13740=((1.0)*x13728);
IkReal x13741=((1.0)*x13727);
IkReal x13742=(sj5*x13741);
evalcond[0]=((((-1.0)*r22*x13742))+((x13728*x13732))+(((-1.0)*r20*x13733*x13741))+((cj1*sj2))+(((-1.0)*r21*x13729*x13741))+(((-1.0)*x13736*x13740)));
evalcond[1]=((((-1.0)*r20*x13733*x13740))+(((-1.0)*r22*sj5*x13740))+(((-1.0)*x13732*x13741))+(((-1.0)*r21*x13729*x13740))+((x13727*x13736))+(((-1.0)*cj1*x13735)));
evalcond[2]=((((-1.0)*r12*x13742))+((x13728*x13734))+(((-1.0)*r11*x13729*x13741))+((cj0*cj2))+(((-1.0)*r10*x13733*x13741))+((sj2*x13738))+(((-1.0)*x13731*x13740)));
evalcond[3]=((((-1.0)*r02*x13742))+(((-1.0)*x13739*x13740))+((x13728*x13737))+(((-1.0)*r01*x13729*x13741))+((sj2*x13730))+(((-1.0)*r00*x13733*x13741))+(((-1.0)*sj0*x13735)));
evalcond[4]=((((-1.0)*r12*sj5*x13740))+(((-1.0)*x13735*x13738))+(((-1.0)*r11*x13729*x13740))+(((-1.0)*r10*x13733*x13740))+(((-1.0)*x13734*x13741))+((x13727*x13731))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x13730*x13735))+(((-1.0)*r01*x13729*x13740))+(((-1.0)*x13737*x13741))+(((-1.0)*r02*sj5*x13740))+((x13727*x13739))+(((-1.0)*sj0*sj2))+(((-1.0)*r00*x13733*x13740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13743=(cj6*r20);
IkReal x13744=(cj2*sj0);
IkReal x13745=((1.0)*sj2);
IkReal x13746=(cj0*sj1);
IkReal x13747=(cj1*r01);
IkReal x13748=(r22*sj5);
IkReal x13749=(cj5*cj6);
IkReal x13750=(cj1*sj2);
IkReal x13751=(r21*sj6);
IkReal x13752=(cj5*r20*sj6);
CheckValue<IkReal> x13753=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x13753.valid){
continue;
}
CheckValue<IkReal> x13754 = IKatan2WithCheck(IkReal((((cj6*r00*x13750))+(((-1.0)*x13744*x13751))+((x13743*x13744))+(((-1.0)*sj6*x13745*x13747))+((sj2*x13746*x13751))+(((-1.0)*x13743*x13745*x13746)))),(((x13744*x13748))+(((-1.0)*x13745*x13746*x13752))+((sj2*x13747*x13749))+((r02*sj5*x13750))+((cj5*r00*sj6*x13750))+((x13744*x13752))+((r21*x13744*x13749))+(((-1.0)*x13745*x13746*x13748))+(((-1.0)*r21*x13745*x13746*x13749))),IKFAST_ATAN2_MAGTHRESH);
if(!x13754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13753.value)))+(x13754.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13755=IKsin(j4);
IkReal x13756=IKcos(j4);
IkReal x13757=(cj5*cj6);
IkReal x13758=(cj0*sj1);
IkReal x13759=(r11*sj6);
IkReal x13760=(cj6*r20);
IkReal x13761=(cj5*sj6);
IkReal x13762=(cj6*r10);
IkReal x13763=((1.0)*cj2);
IkReal x13764=(r21*sj6);
IkReal x13765=(cj6*r00);
IkReal x13766=(sj0*sj1);
IkReal x13767=(r01*sj6);
IkReal x13768=((1.0)*x13756);
IkReal x13769=((1.0)*x13755);
IkReal x13770=(sj5*x13769);
evalcond[0]=((((-1.0)*r22*x13770))+(((-1.0)*r21*x13757*x13769))+((cj1*sj2))+(((-1.0)*x13764*x13768))+(((-1.0)*r20*x13761*x13769))+((x13756*x13760)));
evalcond[1]=((((-1.0)*r22*sj5*x13768))+(((-1.0)*cj1*x13763))+(((-1.0)*r21*x13757*x13768))+(((-1.0)*r20*x13761*x13768))+((x13755*x13764))+(((-1.0)*x13760*x13769)));
evalcond[2]=((((-1.0)*x13759*x13768))+((sj2*x13766))+((cj0*cj2))+(((-1.0)*r12*x13770))+(((-1.0)*r10*x13761*x13769))+(((-1.0)*r11*x13757*x13769))+((x13756*x13762)));
evalcond[3]=((((-1.0)*r00*x13761*x13769))+(((-1.0)*r02*x13770))+((sj2*x13758))+(((-1.0)*x13767*x13768))+(((-1.0)*r01*x13757*x13769))+(((-1.0)*sj0*x13763))+((x13756*x13765)));
evalcond[4]=((((-1.0)*r12*sj5*x13768))+(((-1.0)*r10*x13761*x13768))+(((-1.0)*r11*x13757*x13768))+((cj0*sj2))+(((-1.0)*x13762*x13769))+(((-1.0)*x13763*x13766))+((x13755*x13759)));
evalcond[5]=((((-1.0)*r00*x13761*x13768))+(((-1.0)*x13758*x13763))+((x13755*x13767))+(((-1.0)*r01*x13757*x13768))+(((-1.0)*sj0*sj2))+(((-1.0)*x13765*x13769))+(((-1.0)*r02*sj5*x13768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13771=cj5*cj5;
IkReal x13772=cj6*cj6;
IkReal x13773=r22*r22;
IkReal x13774=r21*r21;
IkReal x13775=r20*r20;
IkReal x13776=(cj6*r21);
IkReal x13777=(r20*sj6);
IkReal x13778=(cj1*cj5);
IkReal x13779=((1.0)*sj2);
IkReal x13780=(cj1*cj2);
IkReal x13781=(cj6*r20);
IkReal x13782=(r22*sj5);
IkReal x13783=(r21*sj6);
IkReal x13784=((2.0)*cj5);
IkReal x13785=((1.0)*x13774);
IkReal x13786=((1.0)*x13775);
IkReal x13787=(x13771*x13772);
CheckValue<IkReal> x13788=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13773))+((x13772*x13774))+(((-1.0)*x13771*x13786))+(((-1.0)*x13785*x13787))+(((-1.0)*x13777*x13782*x13784))+(((-1.0)*x13772*x13786))+(((-1.0)*x13785))+((x13775*x13787))+(((-2.0)*x13771*x13776*x13777))+((x13771*x13773))+(((-1.0)*x13776*x13782*x13784))+(((2.0)*x13776*x13777)))),-1);
if(!x13788.valid){
continue;
}
CheckValue<IkReal> x13789 = IKatan2WithCheck(IkReal(((((-1.0)*x13780*x13783))+((x13780*x13781))+(((-1.0)*x13776*x13778*x13779))+(((-1.0)*x13777*x13778*x13779))+(((-1.0)*cj1*x13779*x13782)))),(((cj1*sj2*x13781))+((cj2*x13776*x13778))+((cj2*x13777*x13778))+((x13780*x13782))+(((-1.0)*cj1*x13779*x13783))),IKFAST_ATAN2_MAGTHRESH);
if(!x13789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13788.value)))+(x13789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x13790=IKsin(j4);
IkReal x13791=IKcos(j4);
IkReal x13792=((1.0)*r21);
IkReal x13793=(r22*sj5);
IkReal x13794=(cj5*cj6);
IkReal x13795=(cj6*r20);
IkReal x13796=(cj5*r20);
IkReal x13797=(sj6*x13791);
IkReal x13798=((1.0)*x13790);
evalcond[0]=(((x13791*x13795))+(((-1.0)*x13790*x13792*x13794))+((cj1*sj2))+(((-1.0)*x13792*x13797))+(((-1.0)*sj6*x13796*x13798))+(((-1.0)*x13793*x13798)));
evalcond[1]=(((r21*sj6*x13790))+(((-1.0)*cj1*cj2))+(((-1.0)*x13796*x13797))+(((-1.0)*x13791*x13792*x13794))+(((-1.0)*x13791*x13793))+(((-1.0)*x13795*x13798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13799=((1.0)*cj6*sj5);
IkReal x13800=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x13800))+(((-1.0)*r11*x13799)))))+(IKabs(((((-1.0)*r01*x13799))+(((-1.0)*r00*x13800))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=sj1;
j0eval[2]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13801=((1.0)*cj4);
IkReal x13802=((1.0)*cj6);
IkReal x13803=(cj5*r21);
IkReal x13804=(r22*sj5);
IkReal x13805=(r21*sj5);
IkReal x13806=(r21*sj6);
IkReal x13807=((1.0)*sj4);
IkReal x13808=(cj5*r22);
IkReal x13809=(cj5*r20*sj6);
IkReal x13810=((1.0)*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x13807*x13809))+((cj4*cj6*r20))+(((-1.0)*sj4*x13802*x13803))+(((-1.0)*x13804*x13807))+(((-1.0)*x13801*x13806)));
evalcond[2]=((-0.36442)+(((-0.37429)*r20*sj5*sj6))+(((0.37429)*x13808))+(((-0.37429)*cj6*x13805))+(((-1.0)*pz))+(((0.01)*cj6*x13803))+(((0.01)*x13804))+(((0.01)*x13809)));
evalcond[3]=((1.0)+(((-1.0)*r20*x13810))+x13808+(((-1.0)*x13802*x13805)));
evalcond[4]=(((sj4*x13806))+(((-1.0)*cj6*x13801*x13803))+(((-1.0)*r20*sj4*x13802))+(((-1.0)*x13801*x13809))+(((-1.0)*x13801*x13804)));
evalcond[5]=((((-1.0)*r01*sj5*x13802))+(((-1.0)*r00*x13810))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*r10*x13810))+(((-1.0)*r11*sj5*x13802)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13811=(cj6*r10);
IkReal x13812=(sj2*sj4);
IkReal x13813=(r12*sj5);
IkReal x13814=(r01*sj6);
IkReal x13815=(cj2*r11);
IkReal x13816=(cj4*sj6);
IkReal x13817=((1.0)*cj6);
IkReal x13818=(cj4*r00);
IkReal x13819=(cj5*sj6);
IkReal x13820=(cj5*cj6);
IkReal x13821=(cj2*sj4);
IkReal x13822=(r02*sj5);
IkReal x13823=(cj4*sj2);
IkReal x13824=((1.0)*cj2*cj4);
if( IKabs((((r11*sj2*x13816))+((r10*x13812*x13819))+(((-1.0)*x13811*x13823))+((x13812*x13813))+(((-1.0)*cj5*r01*x13817*x13821))+(((-1.0)*x13814*x13824))+((cj2*cj6*x13818))+((r11*x13812*x13820))+(((-1.0)*r00*x13819*x13821))+(((-1.0)*x13821*x13822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x13819*x13821))+((r00*x13812*x13819))+((x13815*x13816))+(((-1.0)*x13811*x13824))+((x13814*x13823))+((x13812*x13822))+((r01*x13812*x13820))+((sj4*x13815*x13820))+(((-1.0)*sj2*x13817*x13818))+((x13813*x13821)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj2*x13816))+((r10*x13812*x13819))+(((-1.0)*x13811*x13823))+((x13812*x13813))+(((-1.0)*cj5*r01*x13817*x13821))+(((-1.0)*x13814*x13824))+((cj2*cj6*x13818))+((r11*x13812*x13820))+(((-1.0)*r00*x13819*x13821))+(((-1.0)*x13821*x13822))))+IKsqr((((r10*x13819*x13821))+((r00*x13812*x13819))+((x13815*x13816))+(((-1.0)*x13811*x13824))+((x13814*x13823))+((x13812*x13822))+((r01*x13812*x13820))+((sj4*x13815*x13820))+(((-1.0)*sj2*x13817*x13818))+((x13813*x13821))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*sj2*x13816))+((r10*x13812*x13819))+(((-1.0)*x13811*x13823))+((x13812*x13813))+(((-1.0)*cj5*r01*x13817*x13821))+(((-1.0)*x13814*x13824))+((cj2*cj6*x13818))+((r11*x13812*x13820))+(((-1.0)*r00*x13819*x13821))+(((-1.0)*x13821*x13822))), (((r10*x13819*x13821))+((r00*x13812*x13819))+((x13815*x13816))+(((-1.0)*x13811*x13824))+((x13814*x13823))+((x13812*x13822))+((r01*x13812*x13820))+((sj4*x13815*x13820))+(((-1.0)*sj2*x13817*x13818))+((x13813*x13821))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13825=IKcos(j0);
IkReal x13826=IKsin(j0);
IkReal x13827=((1.0)*sj4);
IkReal x13828=((0.37429)*sj5);
IkReal x13829=(r10*sj6);
IkReal x13830=(cj6*r00);
IkReal x13831=((0.37429)*cj5);
IkReal x13832=(cj6*r01);
IkReal x13833=((0.01)*cj5);
IkReal x13834=((1.0)*cj4);
IkReal x13835=(r00*sj6);
IkReal x13836=(r02*sj5);
IkReal x13837=(r12*sj5);
IkReal x13838=(cj6*r10);
IkReal x13839=(r01*sj6);
IkReal x13840=(r11*sj6);
IkReal x13841=(sj2*x13825);
IkReal x13842=(cj5*cj6*r11);
IkReal x13843=((0.069)*x13826);
IkReal x13844=(cj2*x13825);
IkReal x13845=((0.069)*x13825);
IkReal x13846=(sj2*x13826);
IkReal x13847=((1.0)*cj2*x13826);
evalcond[0]=((((-1.0)*x13834*x13840))+x13846+x13844+(((-1.0)*cj5*x13827*x13829))+(((-1.0)*x13827*x13842))+(((-1.0)*x13827*x13837))+((cj4*x13838)));
evalcond[1]=((((-1.0)*x13847))+(((-1.0)*x13834*x13839))+x13841+(((-1.0)*x13827*x13836))+(((-1.0)*cj5*x13827*x13835))+(((-1.0)*cj5*x13827*x13832))+((cj4*x13830)));
evalcond[2]=((((-1.0)*x13847))+(((-1.0)*x13834*x13842))+((sj4*x13840))+(((-1.0)*x13834*x13837))+x13841+(((-1.0)*x13827*x13838))+(((-1.0)*cj5*x13829*x13834)));
evalcond[3]=(((sj4*x13839))+(((-1.0)*x13834*x13836))+(((-1.0)*cj5*x13832*x13834))+(((-1.0)*x13827*x13830))+(((-1.0)*cj5*x13834*x13835))+(((-1.0)*x13844))+(((-1.0)*x13846)));
evalcond[4]=(x13845+((x13833*x13835))+(((-0.069)*x13844))+(((-1.0)*sj2*x13843))+(((0.01)*x13836))+(((-1.0)*px))+((r02*x13831))+((x13832*x13833))+(((-1.0)*x13828*x13835))+(((-1.0)*x13828*x13832)));
evalcond[5]=(((cj6*r11*x13833))+x13843+((r12*x13831))+((x13829*x13833))+(((-1.0)*x13828*x13829))+(((0.01)*x13837))+(((-1.0)*py))+(((-1.0)*cj6*r11*x13828))+(((-1.0)*cj2*x13843))+(((0.069)*x13841)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13848=((1.0)*cj4);
IkReal x13849=((1.0)*cj6);
IkReal x13850=(cj5*r21);
IkReal x13851=(r22*sj5);
IkReal x13852=(r21*sj5);
IkReal x13853=(r21*sj6);
IkReal x13854=((1.0)*sj4);
IkReal x13855=(cj5*r22);
IkReal x13856=(cj5*r20*sj6);
IkReal x13857=((1.0)*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x13848*x13853))+((cj4*cj6*r20))+(((-1.0)*x13851*x13854))+(((-1.0)*sj4*x13849*x13850))+(((-1.0)*x13854*x13856)));
evalcond[2]=((0.36442)+(((0.37429)*x13855))+(((-0.37429)*r20*sj5*sj6))+(((0.01)*x13856))+(((0.01)*x13851))+(((-1.0)*pz))+(((-0.37429)*cj6*x13852))+(((0.01)*cj6*x13850)));
evalcond[3]=((-1.0)+x13855+(((-1.0)*r20*x13857))+(((-1.0)*x13849*x13852)));
evalcond[4]=((((-1.0)*x13848*x13856))+(((-1.0)*x13848*x13851))+(((-1.0)*cj6*x13848*x13850))+(((-1.0)*r20*sj4*x13849))+((sj4*x13853)));
evalcond[5]=((((-1.0)*r01*sj5*x13849))+(((-1.0)*r00*x13857))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*r10*x13857))+(((-1.0)*r11*sj5*x13849)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13858=(cj5*cj6);
IkReal x13859=((1.0)*sj2);
IkReal x13860=(cj2*cj4);
IkReal x13861=(r12*sj5);
IkReal x13862=(cj4*sj2);
IkReal x13863=(r10*sj4);
IkReal x13864=(cj5*sj6);
IkReal x13865=(cj6*r10);
IkReal x13866=(r11*sj6);
IkReal x13867=(sj4*x13861);
IkReal x13868=(cj2*r11*sj4);
IkReal x13869=(r11*sj4*x13859);
IkReal x13870=(cj2*r10*x13864);
if( IKabs(((((-1.0)*cj4*x13859*x13866))+((x13860*x13861))+(((-1.0)*x13858*x13869))+(((-1.0)*x13859*x13863*x13864))+((r11*x13858*x13860))+((x13862*x13865))+(((-1.0)*x13859*x13867))+((cj2*cj6*x13863))+((r10*x13860*x13864))+(((-1.0)*cj2*sj4*x13866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x13860*x13866))+((x13861*x13862))+((cj6*sj2*x13863))+(((-1.0)*sj4*x13859*x13866))+((r11*x13858*x13862))+(((-1.0)*x13860*x13865))+((cj2*x13863*x13864))+((x13858*x13868))+((r10*x13862*x13864))+((cj2*x13867)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x13859*x13866))+((x13860*x13861))+(((-1.0)*x13858*x13869))+(((-1.0)*x13859*x13863*x13864))+((r11*x13858*x13860))+((x13862*x13865))+(((-1.0)*x13859*x13867))+((cj2*cj6*x13863))+((r10*x13860*x13864))+(((-1.0)*cj2*sj4*x13866))))+IKsqr((((x13860*x13866))+((x13861*x13862))+((cj6*sj2*x13863))+(((-1.0)*sj4*x13859*x13866))+((r11*x13858*x13862))+(((-1.0)*x13860*x13865))+((cj2*x13863*x13864))+((x13858*x13868))+((r10*x13862*x13864))+((cj2*x13867))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*x13859*x13866))+((x13860*x13861))+(((-1.0)*x13858*x13869))+(((-1.0)*x13859*x13863*x13864))+((r11*x13858*x13860))+((x13862*x13865))+(((-1.0)*x13859*x13867))+((cj2*cj6*x13863))+((r10*x13860*x13864))+(((-1.0)*cj2*sj4*x13866))), (((x13860*x13866))+((x13861*x13862))+((cj6*sj2*x13863))+(((-1.0)*sj4*x13859*x13866))+((r11*x13858*x13862))+(((-1.0)*x13860*x13865))+((cj2*x13863*x13864))+((x13858*x13868))+((r10*x13862*x13864))+((cj2*x13867))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13871=IKcos(j0);
IkReal x13872=IKsin(j0);
IkReal x13873=((1.0)*sj4);
IkReal x13874=((0.37429)*sj5);
IkReal x13875=(r10*sj6);
IkReal x13876=(cj6*r00);
IkReal x13877=((0.37429)*cj5);
IkReal x13878=(cj6*r01);
IkReal x13879=((0.01)*cj5);
IkReal x13880=(r12*sj5);
IkReal x13881=(r00*sj6);
IkReal x13882=(r02*sj5);
IkReal x13883=((1.0)*cj4);
IkReal x13884=(cj6*r10);
IkReal x13885=(r01*sj6);
IkReal x13886=(r11*sj6);
IkReal x13887=(cj2*x13871);
IkReal x13888=(cj5*cj6*r11);
IkReal x13889=((0.069)*x13872);
IkReal x13890=(sj2*x13871);
IkReal x13891=(cj2*x13872);
IkReal x13892=((1.0)*sj2*x13872);
evalcond[0]=((((-1.0)*x13873*x13884))+x13890+x13891+(((-1.0)*x13883*x13888))+(((-1.0)*x13880*x13883))+((sj4*x13886))+(((-1.0)*cj5*x13875*x13883)));
evalcond[1]=((((-1.0)*x13873*x13888))+(((-1.0)*x13873*x13880))+x13887+(((-1.0)*x13883*x13886))+(((-1.0)*x13892))+(((-1.0)*cj5*x13873*x13875))+((cj4*x13884)));
evalcond[2]=(x13887+(((-1.0)*x13882*x13883))+(((-1.0)*cj5*x13881*x13883))+(((-1.0)*x13873*x13876))+((sj4*x13885))+(((-1.0)*x13892))+(((-1.0)*cj5*x13878*x13883)));
evalcond[3]=((((-1.0)*x13873*x13882))+(((-1.0)*x13883*x13885))+(((-1.0)*cj5*x13873*x13881))+((cj4*x13876))+(((-1.0)*x13890))+(((-1.0)*x13891))+(((-1.0)*cj5*x13873*x13878)));
evalcond[4]=((((0.069)*x13887))+(((-1.0)*sj2*x13889))+((x13878*x13879))+(((0.01)*x13882))+(((-1.0)*px))+((x13879*x13881))+(((-1.0)*x13874*x13878))+((r02*x13877))+(((0.069)*x13871))+(((-1.0)*x13874*x13881)));
evalcond[5]=((((0.069)*x13890))+(((0.01)*x13880))+(((-1.0)*cj6*r11*x13874))+x13889+((cj2*x13889))+(((-1.0)*py))+((r12*x13877))+((x13875*x13879))+((cj6*r11*x13879))+(((-1.0)*x13874*x13875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13893=((1.0)*cj4);
IkReal x13894=(r22*sj5);
IkReal x13895=(r21*sj6);
IkReal x13896=((1.0)*sj4);
IkReal x13897=(cj6*r20);
IkReal x13898=(cj5*r22);
IkReal x13899=(cj5*r20*sj6);
IkReal x13900=((1.0)*cj6*r21);
IkReal x13901=(cj5*cj6*r21);
IkReal x13902=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*x13893*x13895))+(((-1.0)*x13896*x13901))+(((-1.0)*x13896*x13899))+((cj4*x13897))+(((-1.0)*x13894*x13896)));
evalcond[2]=((((0.01)*x13901))+(((-0.37429)*cj6*r21*sj5))+(((0.01)*x13899))+(((0.01)*x13894))+(((-0.37429)*x13902))+(((-0.069)*cj2))+(((-1.0)*pz))+(((0.37429)*x13898)));
evalcond[3]=((((-1.0)*sj5*x13900))+x13898+(((-1.0)*x13902)));
evalcond[4]=((((-1.0)*x13893*x13899))+(((-1.0)*x13893*x13894))+(((-1.0)*x13893*x13901))+(((-1.0)*x13896*x13897))+((sj4*x13895))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13903=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x13903))+(((-1.0)*cj6*r11*x13903)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x13903))+(((-1.0)*cj6*r01*x13903))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x13903))+(((-1.0)*cj6*r11*x13903))))+IKsqr(((((-1.0)*r00*sj6*x13903))+(((-1.0)*cj6*r01*x13903))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x13903))+(((-1.0)*cj6*r11*x13903))), ((((-1.0)*r00*sj6*x13903))+(((-1.0)*cj6*r01*x13903))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13904=IKcos(j0);
IkReal x13905=IKsin(j0);
IkReal x13906=((1.0)*cj5);
IkReal x13907=(cj6*sj4);
IkReal x13908=(cj4*sj6);
IkReal x13909=(cj5*r12);
IkReal x13910=((0.37429)*sj5);
IkReal x13911=(r10*sj6);
IkReal x13912=((1.0)*r00);
IkReal x13913=((0.069)*sj2);
IkReal x13914=(cj6*r01);
IkReal x13915=((0.01)*cj5);
IkReal x13916=(r00*sj6);
IkReal x13917=((1.0)*sj5);
IkReal x13918=(cj6*r11);
IkReal x13919=(cj4*cj6);
IkReal x13920=(cj5*r02);
IkReal x13921=((0.01)*sj5);
IkReal x13922=(sj4*sj6);
IkReal x13923=((1.0)*x13905);
evalcond[0]=((((-1.0)*x13914*x13917))+x13920+(((-1.0)*x13904))+(((-1.0)*sj5*sj6*x13912)));
evalcond[1]=((((-1.0)*x13917*x13918))+x13909+(((-1.0)*x13923))+(((-1.0)*x13911*x13917)));
evalcond[2]=(((r10*x13919))+(((-1.0)*r11*x13906*x13907))+(((-1.0)*r12*sj4*x13917))+((cj2*x13904))+(((-1.0)*sj4*x13906*x13911))+(((-1.0)*r11*x13908)));
evalcond[3]=((((-1.0)*r10*x13906*x13908))+(((-1.0)*r10*x13907))+(((-1.0)*cj4*r12*x13917))+((sj2*x13904))+(((-1.0)*cj4*x13906*x13918))+((r11*x13922)));
evalcond[4]=((((-1.0)*r01*x13906*x13907))+((r00*x13919))+(((-1.0)*r02*sj4*x13917))+(((-1.0)*cj2*x13923))+(((-1.0)*sj4*x13906*x13916))+(((-1.0)*r01*x13908)));
evalcond[5]=((((-1.0)*sj2*x13923))+(((-1.0)*cj4*r02*x13917))+(((-1.0)*r00*x13906*x13908))+(((-1.0)*x13907*x13912))+((r01*x13922))+(((-1.0)*cj4*x13906*x13914)));
evalcond[6]=((((0.37429)*x13920))+(((-1.0)*x13910*x13914))+(((-1.0)*x13910*x13916))+(((-1.0)*px))+(((-1.0)*x13905*x13913))+((x13915*x13916))+(((0.43342)*x13904))+((r02*x13921))+((x13914*x13915)));
evalcond[7]=((((-1.0)*x13910*x13918))+(((-1.0)*x13910*x13911))+(((-1.0)*py))+(((0.37429)*x13909))+((x13915*x13918))+(((0.43342)*x13905))+((x13904*x13913))+((x13911*x13915))+((r12*x13921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13924=((1.0)*cj4);
IkReal x13925=(r22*sj5);
IkReal x13926=(r21*sj6);
IkReal x13927=((1.0)*sj4);
IkReal x13928=(cj6*r20);
IkReal x13929=(cj5*r22);
IkReal x13930=(cj5*r20*sj6);
IkReal x13931=((1.0)*cj6*r21);
IkReal x13932=(cj5*cj6*r21);
IkReal x13933=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*x13927*x13932))+(((-1.0)*x13927*x13930))+((cj4*x13928))+(((-1.0)*x13924*x13926))+(((-1.0)*x13925*x13927)));
evalcond[2]=((((0.37429)*x13929))+(((-0.37429)*cj6*r21*sj5))+(((0.069)*cj2))+(((-1.0)*pz))+(((-0.37429)*x13933))+(((0.01)*x13930))+(((0.01)*x13932))+(((0.01)*x13925)));
evalcond[3]=((((-1.0)*sj5*x13931))+x13929+(((-1.0)*x13933)));
evalcond[4]=((((-1.0)*x13927*x13928))+cj2+(((-1.0)*x13924*x13925))+(((-1.0)*x13924*x13932))+(((-1.0)*x13924*x13930))+((sj4*x13926)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13934=(cj6*sj5);
IkReal x13935=(sj5*sj6);
IkReal x13936=((1.0)*cj5);
if( IKabs((((r11*x13934))+(((-1.0)*r12*x13936))+((r10*x13935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x13935))+((r01*x13934))+(((-1.0)*r02*x13936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x13934))+(((-1.0)*r12*x13936))+((r10*x13935))))+IKsqr((((r00*x13935))+((r01*x13934))+(((-1.0)*r02*x13936))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x13934))+(((-1.0)*r12*x13936))+((r10*x13935))), (((r00*x13935))+((r01*x13934))+(((-1.0)*r02*x13936))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13937=IKcos(j0);
IkReal x13938=IKsin(j0);
IkReal x13939=((1.0)*cj5);
IkReal x13940=(cj6*sj4);
IkReal x13941=(cj4*sj6);
IkReal x13942=(cj5*r12);
IkReal x13943=((0.37429)*sj5);
IkReal x13944=(r10*sj6);
IkReal x13945=((1.0)*r00);
IkReal x13946=((0.069)*sj2);
IkReal x13947=(cj6*r01);
IkReal x13948=((0.01)*cj5);
IkReal x13949=(r00*sj6);
IkReal x13950=((1.0)*sj5);
IkReal x13951=(cj6*r11);
IkReal x13952=((0.01)*sj5);
IkReal x13953=(cj4*cj6);
IkReal x13954=(cj5*r02);
IkReal x13955=(sj4*sj6);
IkReal x13956=((1.0)*x13938);
evalcond[0]=((((-1.0)*x13947*x13950))+x13937+x13954+(((-1.0)*sj5*sj6*x13945)));
evalcond[1]=((((-1.0)*x13944*x13950))+x13938+x13942+(((-1.0)*x13950*x13951)));
evalcond[2]=((((-1.0)*sj4*x13939*x13944))+(((-1.0)*r12*sj4*x13950))+((cj2*x13937))+(((-1.0)*r11*x13941))+(((-1.0)*r11*x13939*x13940))+((r10*x13953)));
evalcond[3]=(((r11*x13955))+((sj2*x13937))+(((-1.0)*r10*x13940))+(((-1.0)*cj4*x13939*x13951))+(((-1.0)*r10*x13939*x13941))+(((-1.0)*cj4*r12*x13950)));
evalcond[4]=((((-1.0)*sj4*x13939*x13949))+(((-1.0)*r01*x13939*x13940))+(((-1.0)*cj2*x13956))+((r00*x13953))+(((-1.0)*r01*x13941))+(((-1.0)*r02*sj4*x13950)));
evalcond[5]=((((-1.0)*x13940*x13945))+(((-1.0)*cj4*r02*x13950))+((r01*x13955))+(((-1.0)*cj4*x13939*x13947))+(((-1.0)*sj2*x13956))+(((-1.0)*r00*x13939*x13941)));
evalcond[6]=((((-1.0)*x13943*x13949))+(((-1.0)*x13943*x13947))+((r02*x13952))+(((-1.0)*x13938*x13946))+(((-1.0)*px))+((x13948*x13949))+((x13947*x13948))+(((-0.29542)*x13937))+(((0.37429)*x13954)));
evalcond[7]=(((x13948*x13951))+((r12*x13952))+(((0.37429)*x13942))+((x13944*x13948))+(((-1.0)*x13943*x13944))+((x13937*x13946))+(((-1.0)*py))+(((-0.29542)*x13938))+(((-1.0)*x13943*x13951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13957=((1.0)*cj4);
IkReal x13958=(r22*sj5);
IkReal x13959=(r21*sj6);
IkReal x13960=((1.0)*sj4);
IkReal x13961=(cj6*r20);
IkReal x13962=(cj5*r22);
IkReal x13963=(cj5*r20*sj6);
IkReal x13964=((1.0)*cj6*r21);
IkReal x13965=(cj5*cj6*r21);
IkReal x13966=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x13957*x13959))+((cj4*x13961))+(((-1.0)*x13960*x13963))+(((-1.0)*x13960*x13965))+(((-1.0)*x13958*x13960)));
evalcond[2]=((((0.01)*x13965))+(((0.01)*x13963))+(((-0.37429)*cj6*r21*sj5))+(((-0.069)*cj1))+(((0.37429)*x13962))+(((-0.37429)*x13966))+(((-1.0)*pz))+(((0.01)*x13958))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+x13962+(((-1.0)*sj5*x13964))+(((-1.0)*x13966)));
evalcond[4]=((((-1.0)*x13957*x13958))+((sj4*x13959))+(((-1.0)*x13960*x13961))+(((-1.0)*x13957*x13963))+(((-1.0)*x13957*x13965))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x13967=((1.0)*cj6*sj5);
IkReal x13968=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r01*x13967))+(((-1.0)*r00*x13968))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x13968))+(((-1.0)*r11*x13967))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x13969=((0.01)*cj5);
IkReal x13970=(r20*sj6);
IkReal x13971=(cj5*r21);
IkReal x13972=(sj4*sj6);
IkReal x13973=(r22*sj5);
IkReal x13974=((1.0)*cj6);
IkReal x13975=(cj4*cj5);
IkReal x13976=(r21*sj5);
IkReal x13977=((1.0)*cj4);
IkReal x13978=((1.0)*sj4);
IkReal x13979=(cj5*r22);
IkReal x13980=(sj4*x13974);
IkReal x13981=((1.0)*sj6*x13975);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x13973*x13978))+(((-1.0)*cj5*x13970*x13978))+((cj4*cj6*r20))+(((-1.0)*x13971*x13980))+(((-1.0)*r21*sj6*x13977)));
evalcond[2]=((-0.069)+(((0.01)*x13973))+(((-0.37429)*cj6*x13976))+(((-1.0)*pz))+((x13969*x13970))+(((0.37429)*x13979))+(((-0.37429)*sj5*x13970))+((cj6*r21*x13969)));
evalcond[3]=(x13979+(((-1.0)*x13974*x13976))+(((-1.0)*sj5*x13970)));
evalcond[4]=((-1.0)+(((-1.0)*x13973*x13977))+(((-1.0)*r20*x13980))+(((-1.0)*cj4*x13971*x13974))+(((-1.0)*x13970*x13975))+((r21*x13972)));
evalcond[5]=((((-1.0)*r12*sj5*x13977))+(((-1.0)*r11*x13974*x13975))+((r11*x13972))+(((-1.0)*r10*x13981))+(((-1.0)*r10*x13980)));
evalcond[6]=((((-1.0)*r01*x13974*x13975))+(((-1.0)*r02*sj5*x13977))+(((-1.0)*r00*x13980))+(((-1.0)*r00*x13981))+((r01*x13972)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13982=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x13982))+(((-1.0)*r10*sj6*x13982)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x13982))+(((-1.0)*cj6*r01*x13982))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x13982))+(((-1.0)*r10*sj6*x13982))))+IKsqr(((((-1.0)*r00*sj6*x13982))+(((-1.0)*cj6*r01*x13982))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x13982))+(((-1.0)*r10*sj6*x13982))), ((((-1.0)*r00*sj6*x13982))+(((-1.0)*cj6*r01*x13982))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13983=IKcos(j0);
IkReal x13984=IKsin(j0);
IkReal x13985=((1.0)*sj4);
IkReal x13986=(cj5*r12);
IkReal x13987=(r10*sj6);
IkReal x13988=((0.37429)*sj5);
IkReal x13989=(cj6*r01);
IkReal x13990=((0.01)*cj5);
IkReal x13991=(r12*sj5);
IkReal x13992=(r00*sj6);
IkReal x13993=((1.0)*sj5);
IkReal x13994=(r02*sj5);
IkReal x13995=(cj6*r11);
IkReal x13996=(cj4*cj6);
IkReal x13997=(cj5*r02);
IkReal x13998=((1.0)*x13984);
IkReal x13999=(cj5*x13995);
IkReal x14000=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x13992*x13993))+x13997+(((-1.0)*x13989*x13993))+(((-1.0)*x13983)));
evalcond[1]=((((-1.0)*x13993*x13995))+x13986+(((-1.0)*x13987*x13993))+(((-1.0)*x13998)));
evalcond[2]=(x13983+(((-1.0)*cj5*x13985*x13987))+((r10*x13996))+(((-1.0)*x13985*x13999))+(((-1.0)*x13985*x13991))+(((-1.0)*r11*x14000)));
evalcond[3]=((((-1.0)*cj5*x13985*x13989))+(((-1.0)*x13985*x13994))+(((-1.0)*x13998))+(((-1.0)*r01*x14000))+(((-1.0)*cj5*x13985*x13992))+((r00*x13996)));
evalcond[4]=((((0.43342)*x13983))+(((-1.0)*x13988*x13992))+(((0.01)*x13994))+(((-1.0)*px))+(((-1.0)*x13988*x13989))+((x13989*x13990))+((x13990*x13992))+(((0.37429)*x13997)));
evalcond[5]=((((0.43342)*x13984))+(((0.37429)*x13986))+(((-1.0)*x13987*x13988))+(((-1.0)*x13988*x13995))+(((0.01)*x13991))+(((-1.0)*py))+((x13990*x13995))+((x13987*x13990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14001=((0.01)*cj5);
IkReal x14002=(r20*sj6);
IkReal x14003=(cj5*r21);
IkReal x14004=(sj4*sj6);
IkReal x14005=(r22*sj5);
IkReal x14006=((1.0)*cj6);
IkReal x14007=(cj4*cj5);
IkReal x14008=(r21*sj5);
IkReal x14009=((1.0)*cj4);
IkReal x14010=((1.0)*sj4);
IkReal x14011=(cj5*r22);
IkReal x14012=(sj4*x14006);
IkReal x14013=((1.0)*sj6*x14007);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14005*x14010))+((cj4*cj6*r20))+(((-1.0)*cj5*x14002*x14010))+(((-1.0)*x14003*x14012))+(((-1.0)*r21*sj6*x14009)));
evalcond[2]=((0.069)+((cj6*r21*x14001))+(((-1.0)*pz))+(((0.37429)*x14011))+(((-0.37429)*cj6*x14008))+(((0.01)*x14005))+((x14001*x14002))+(((-0.37429)*sj5*x14002)));
evalcond[3]=((((-1.0)*sj5*x14002))+(((-1.0)*x14006*x14008))+x14011);
evalcond[4]=((1.0)+(((-1.0)*x14002*x14007))+(((-1.0)*cj4*x14003*x14006))+((r21*x14004))+(((-1.0)*x14005*x14009))+(((-1.0)*r20*x14012)));
evalcond[5]=((((-1.0)*r11*x14006*x14007))+(((-1.0)*r12*sj5*x14009))+((r11*x14004))+(((-1.0)*r10*x14012))+(((-1.0)*r10*x14013)));
evalcond[6]=((((-1.0)*r01*x14006*x14007))+((r01*x14004))+(((-1.0)*r02*sj5*x14009))+(((-1.0)*r00*x14013))+(((-1.0)*r00*x14012)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14014=(cj6*sj5);
IkReal x14015=(sj5*sj6);
IkReal x14016=((1.0)*cj5);
if( IKabs((((r11*x14014))+(((-1.0)*r12*x14016))+((r10*x14015)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x14016))+((r00*x14015))+((r01*x14014)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x14014))+(((-1.0)*r12*x14016))+((r10*x14015))))+IKsqr(((((-1.0)*r02*x14016))+((r00*x14015))+((r01*x14014))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x14014))+(((-1.0)*r12*x14016))+((r10*x14015))), ((((-1.0)*r02*x14016))+((r00*x14015))+((r01*x14014))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14017=IKcos(j0);
IkReal x14018=IKsin(j0);
IkReal x14019=((1.0)*sj4);
IkReal x14020=(cj5*r12);
IkReal x14021=(r10*sj6);
IkReal x14022=((0.37429)*sj5);
IkReal x14023=(cj6*r01);
IkReal x14024=((0.01)*cj5);
IkReal x14025=(r12*sj5);
IkReal x14026=(r00*sj6);
IkReal x14027=((1.0)*sj5);
IkReal x14028=(r02*sj5);
IkReal x14029=(cj6*r11);
IkReal x14030=(cj4*cj6);
IkReal x14031=(cj5*r02);
IkReal x14032=(cj5*x14029);
IkReal x14033=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14023*x14027))+(((-1.0)*x14026*x14027))+x14017+x14031);
evalcond[1]=((((-1.0)*x14021*x14027))+x14018+x14020+(((-1.0)*x14027*x14029)));
evalcond[2]=((((-1.0)*x14019*x14025))+((r10*x14030))+(((-1.0)*x14019*x14032))+(((-1.0)*r11*x14033))+x14017+(((-1.0)*cj5*x14019*x14021)));
evalcond[3]=(((r00*x14030))+(((-1.0)*x14019*x14028))+(((-1.0)*r01*x14033))+(((-1.0)*x14018))+(((-1.0)*cj5*x14019*x14026))+(((-1.0)*cj5*x14019*x14023)));
evalcond[4]=(((x14024*x14026))+((x14023*x14024))+(((0.37429)*x14031))+(((-0.29542)*x14017))+(((0.01)*x14028))+(((-1.0)*px))+(((-1.0)*x14022*x14023))+(((-1.0)*x14022*x14026)));
evalcond[5]=(((x14024*x14029))+((x14021*x14024))+(((0.37429)*x14020))+(((-0.29542)*x14018))+(((0.01)*x14025))+(((-1.0)*py))+(((-1.0)*x14021*x14022))+(((-1.0)*x14022*x14029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14034=(r21*sj4);
IkReal x14035=(cj5*sj6);
IkReal x14036=((1.0)*cj4);
IkReal x14037=(cj5*cj6);
IkReal x14038=(cj5*r12);
IkReal x14039=((1.0)*sj5);
IkReal x14040=(cj6*r11);
IkReal x14041=((0.01)*sj5);
IkReal x14042=(cj5*r02);
IkReal x14043=(cj6*r21);
IkReal x14044=((0.37429)*sj5);
IkReal x14045=(cj6*r01);
IkReal x14046=(cj6*r20);
IkReal x14047=((1.0)*sj4);
IkReal x14048=(cj5*r22);
IkReal x14049=(sj6*x14044);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*x14046))+(((-1.0)*x14034*x14037))+(((-1.0)*r20*x14035*x14047))+(((-1.0)*r21*sj6*x14036))+(((-1.0)*r22*sj4*x14039)));
evalcond[2]=((-0.36442)+((r22*x14041))+(((-1.0)*x14043*x14044))+(((0.01)*r20*x14035))+(((-1.0)*r20*x14049))+(((0.37429)*x14048))+(((0.01)*r21*x14037))+(((-1.0)*pz)));
evalcond[3]=((((-1.0)*x14044*x14045))+(((0.37429)*x14042))+(((-1.0)*r00*x14049))+(((-1.0)*px))+(((0.01)*r00*x14035))+(((0.01)*r01*x14037))+((r02*x14041)));
evalcond[4]=((((-1.0)*r10*x14049))+(((-1.0)*x14040*x14044))+(((0.01)*r10*x14035))+(((0.37429)*x14038))+(((0.01)*r11*x14037))+(((-1.0)*py))+((r12*x14041)));
evalcond[5]=((1.0)+(((-1.0)*x14039*x14043))+(((-1.0)*r20*sj6*x14039))+x14048);
evalcond[6]=((((-1.0)*r22*sj5*x14036))+(((-1.0)*r20*x14035*x14036))+((sj6*x14034))+(((-1.0)*r21*x14036*x14037))+(((-1.0)*x14046*x14047)));
evalcond[7]=((((-1.0)*x14039*x14045))+x14042+(((-1.0)*r00*sj6*x14039)));
evalcond[8]=((((-1.0)*r10*sj6*x14039))+(((-1.0)*x14039*x14040))+x14038);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14050=(cj4*sj6);
IkReal x14051=((1.0)*r01);
IkReal x14052=(cj5*sj4);
IkReal x14053=(sj4*sj5);
IkReal x14054=(cj4*cj6);
if( IKabs(((((-1.0)*r00*sj6*x14052))+((r00*x14054))+(((-1.0)*x14050*x14051))+(((-1.0)*r02*x14053))+(((-1.0)*cj6*x14051*x14052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x14054))+((r11*x14050))+((cj6*r11*x14052))+((r12*x14053))+((r10*sj6*x14052)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj6*x14052))+((r00*x14054))+(((-1.0)*x14050*x14051))+(((-1.0)*r02*x14053))+(((-1.0)*cj6*x14051*x14052))))+IKsqr(((((-1.0)*r10*x14054))+((r11*x14050))+((cj6*r11*x14052))+((r12*x14053))+((r10*sj6*x14052))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj6*x14052))+((r00*x14054))+(((-1.0)*x14050*x14051))+(((-1.0)*r02*x14053))+(((-1.0)*cj6*x14051*x14052))), ((((-1.0)*r10*x14054))+((r11*x14050))+((cj6*r11*x14052))+((r12*x14053))+((r10*sj6*x14052))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x14055=IKcos(j0);
IkReal x14056=(cj5*r11);
IkReal x14057=(cj5*r01);
IkReal x14058=(cj4*cj6);
IkReal x14059=((1.0)*cj4);
IkReal x14060=(r01*sj6);
IkReal x14061=(r11*sj6);
IkReal x14062=((1.0)*(IKsin(j0)));
IkReal x14063=((1.0)*cj6*sj4);
IkReal x14064=((1.0)*sj4*sj5);
IkReal x14065=(cj5*r00*sj6);
IkReal x14066=((1.0)*cj5*r10*sj6);
evalcond[0]=((((-1.0)*x14059*x14061))+((r10*x14058))+(((-1.0)*x14056*x14063))+(((-1.0)*r12*x14064))+x14055+(((-1.0)*sj4*x14066)));
evalcond[1]=((((-1.0)*x14057*x14063))+(((-1.0)*x14059*x14060))+((r00*x14058))+(((-1.0)*sj4*x14065))+(((-1.0)*x14062))+(((-1.0)*r02*x14064)));
evalcond[2]=((((-1.0)*x14056*x14058))+(((-1.0)*x14062))+(((-1.0)*r12*sj5*x14059))+(((-1.0)*r10*x14063))+((sj4*x14061))+(((-1.0)*cj5*r10*sj6*x14059)));
evalcond[3]=((((-1.0)*x14059*x14065))+(((-1.0)*x14055))+(((-1.0)*r00*x14063))+(((-1.0)*r02*sj5*x14059))+(((-1.0)*x14057*x14058))+((sj4*x14060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14067=((1.0)*cj4);
IkReal x14068=((1.0)*cj6);
IkReal x14069=(cj5*r21);
IkReal x14070=(r22*sj5);
IkReal x14071=(r21*sj5);
IkReal x14072=(r21*sj6);
IkReal x14073=((1.0)*sj4);
IkReal x14074=(cj5*r22);
IkReal x14075=(cj5*r20*sj6);
IkReal x14076=((1.0)*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x14068*x14069))+((cj4*cj6*r20))+(((-1.0)*x14073*x14075))+(((-1.0)*x14070*x14073))+(((-1.0)*x14067*x14072)));
evalcond[2]=((0.36442)+(((-0.37429)*r20*sj5*sj6))+(((-0.37429)*cj6*x14071))+(((0.37429)*x14074))+(((-1.0)*pz))+(((0.01)*x14070))+(((0.01)*x14075))+(((0.01)*cj6*x14069)));
evalcond[3]=((-1.0)+(((-1.0)*x14068*x14071))+(((-1.0)*r20*x14076))+x14074);
evalcond[4]=((((-1.0)*cj6*x14067*x14069))+((sj4*x14072))+(((-1.0)*x14067*x14075))+(((-1.0)*x14067*x14070))+(((-1.0)*r20*sj4*x14068)));
evalcond[5]=((((-1.0)*r00*x14076))+(((-1.0)*r01*sj5*x14068))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*r11*sj5*x14068))+(((-1.0)*r10*x14076)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14077=(r11*sj6);
IkReal x14078=(cj6*r10);
IkReal x14079=(r12*sj5);
IkReal x14080=(cj5*cj6*r11);
IkReal x14081=(cj5*r10*sj6);
if( IKabs((((cj4*x14080))+((cj4*x14081))+(((-1.0)*sj4*x14077))+((cj4*x14079))+((sj4*x14078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x14078))+((sj4*x14080))+((sj4*x14081))+((cj4*x14077))+((sj4*x14079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x14080))+((cj4*x14081))+(((-1.0)*sj4*x14077))+((cj4*x14079))+((sj4*x14078))))+IKsqr(((((-1.0)*cj4*x14078))+((sj4*x14080))+((sj4*x14081))+((cj4*x14077))+((sj4*x14079))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*x14080))+((cj4*x14081))+(((-1.0)*sj4*x14077))+((cj4*x14079))+((sj4*x14078))), ((((-1.0)*cj4*x14078))+((sj4*x14080))+((sj4*x14081))+((cj4*x14077))+((sj4*x14079))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14082=IKcos(j0);
IkReal x14083=IKsin(j0);
IkReal x14084=((1.0)*sj4);
IkReal x14085=(r10*sj6);
IkReal x14086=((0.37429)*sj5);
IkReal x14087=(cj6*r00);
IkReal x14088=((0.01)*cj5);
IkReal x14089=((1.0)*cj4);
IkReal x14090=(r00*sj6);
IkReal x14091=(r02*sj5);
IkReal x14092=(sj4*sj6);
IkReal x14093=(r12*sj5);
IkReal x14094=((0.37429)*cj5);
IkReal x14095=(cj6*r10);
IkReal x14096=(cj5*cj6*r11);
IkReal x14097=(cj5*cj6*r01);
evalcond[0]=(((cj4*x14095))+(((-1.0)*x14084*x14093))+(((-1.0)*x14084*x14096))+(((-1.0)*cj5*x14084*x14085))+(((-1.0)*r11*sj6*x14089))+x14082);
evalcond[1]=((((-1.0)*x14089*x14093))+(((-1.0)*x14089*x14096))+(((-1.0)*x14084*x14095))+((r11*x14092))+x14083+(((-1.0)*cj5*x14085*x14089)));
evalcond[2]=((((-1.0)*x14089*x14091))+(((-1.0)*x14089*x14097))+(((-1.0)*cj5*x14089*x14090))+(((-1.0)*x14084*x14087))+x14082+((r01*x14092)));
evalcond[3]=(((cj4*x14087))+(((-1.0)*x14083))+(((-1.0)*x14084*x14097))+(((-1.0)*x14084*x14091))+(((-1.0)*r01*sj6*x14089))+(((-1.0)*cj5*x14084*x14090)));
evalcond[4]=((((0.138)*x14082))+((x14088*x14090))+(((-1.0)*x14086*x14090))+(((-1.0)*px))+((r02*x14094))+(((0.01)*x14091))+((cj6*r01*x14088))+(((-1.0)*cj6*r01*x14086)));
evalcond[5]=((((-1.0)*cj6*r11*x14086))+((cj6*r11*x14088))+(((0.138)*x14083))+(((-1.0)*x14085*x14086))+(((-1.0)*py))+((r12*x14094))+(((0.01)*x14093))+((x14085*x14088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14098=((1.0)*cj6);
IkReal x14099=((1.0)*sj5);
IkReal x14100=(cj4*cj5);
CheckValue<IkReal> x14101=IKPowWithIntegerCheck(sj1,-1);
if(!x14101.valid){
continue;
}
CheckValue<IkReal> x14102=IKPowWithIntegerCheck(cj1,-1);
if(!x14102.valid){
continue;
}
if( IKabs(((x14101.value)*(((((-1.0)*r11*x14098*x14100))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x14100))+(((-1.0)*r10*sj4*x14098))+(((-1.0)*cj4*r12*x14099)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14102.value)*(((((-1.0)*r00*sj6*x14099))+(((-1.0)*r01*sj5*x14098))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14101.value)*(((((-1.0)*r11*x14098*x14100))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x14100))+(((-1.0)*r10*sj4*x14098))+(((-1.0)*cj4*r12*x14099))))))+IKsqr(((x14102.value)*(((((-1.0)*r00*sj6*x14099))+(((-1.0)*r01*sj5*x14098))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14101.value)*(((((-1.0)*r11*x14098*x14100))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x14100))+(((-1.0)*r10*sj4*x14098))+(((-1.0)*cj4*r12*x14099))))), ((x14102.value)*(((((-1.0)*r00*sj6*x14099))+(((-1.0)*r01*sj5*x14098))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14103=IKcos(j0);
IkReal x14104=IKsin(j0);
IkReal x14105=((1.0)*cj5);
IkReal x14106=(cj6*sj4);
IkReal x14107=(r00*sj6);
IkReal x14108=(cj5*r12);
IkReal x14109=((0.37429)*sj5);
IkReal x14110=(r10*sj6);
IkReal x14111=((0.36442)*cj1);
IkReal x14112=(cj6*r01);
IkReal x14113=((0.01)*cj5);
IkReal x14114=((1.0)*sj5);
IkReal x14115=(cj6*r11);
IkReal x14116=(cj4*cj6);
IkReal x14117=(cj5*r02);
IkReal x14118=(r01*sj6);
IkReal x14119=((1.0)*cj4);
IkReal x14120=((0.01)*sj5);
IkReal x14121=(r11*sj6);
IkReal x14122=((0.069)*x14104);
IkReal x14123=((1.0)*x14104);
IkReal x14124=((1.0)*x14103);
IkReal x14125=((0.069)*x14103);
evalcond[0]=((((-1.0)*cj1*x14124))+(((-1.0)*x14107*x14114))+x14117+(((-1.0)*x14112*x14114)));
evalcond[1]=((((-1.0)*x14114*x14115))+(((-1.0)*x14110*x14114))+(((-1.0)*cj1*x14123))+x14108);
evalcond[2]=((((-1.0)*r11*x14105*x14106))+((r10*x14116))+x14103+(((-1.0)*sj4*x14105*x14110))+(((-1.0)*r12*sj4*x14114))+(((-1.0)*x14119*x14121)));
evalcond[3]=(((r00*x14116))+(((-1.0)*x14123))+(((-1.0)*r01*x14105*x14106))+(((-1.0)*sj4*x14105*x14107))+(((-1.0)*x14118*x14119))+(((-1.0)*r02*sj4*x14114)));
evalcond[4]=((((-1.0)*r10*x14106))+((sj4*x14121))+(((-1.0)*cj4*r12*x14114))+(((-1.0)*sj1*x14123))+(((-1.0)*cj4*x14105*x14110))+(((-1.0)*cj4*x14105*x14115)));
evalcond[5]=((((-1.0)*cj4*r02*x14114))+(((-1.0)*sj1*x14124))+((sj4*x14118))+(((-1.0)*cj4*x14105*x14107))+(((-1.0)*cj4*x14105*x14112))+(((-1.0)*r00*x14106)));
evalcond[6]=(((x14103*x14111))+((x14112*x14113))+(((-1.0)*sj1*x14125))+(((-1.0)*px))+(((0.37429)*x14117))+(((-1.0)*x14107*x14109))+x14125+((x14107*x14113))+(((-1.0)*x14109*x14112))+((r02*x14120)));
evalcond[7]=(((r12*x14120))+((x14113*x14115))+((x14110*x14113))+(((-1.0)*sj1*x14122))+(((-1.0)*py))+(((0.37429)*x14108))+x14122+((x14104*x14111))+(((-1.0)*x14109*x14110))+(((-1.0)*x14109*x14115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14126=(cj5*sj4);
IkReal x14127=(cj6*r11);
IkReal x14128=((1.0)*r10);
CheckValue<IkReal> x14129=IKPowWithIntegerCheck(cj1,-1);
if(!x14129.valid){
continue;
}
if( IKabs(((x14129.value)*((((cj5*r12))+(((-1.0)*sj5*x14127))+(((-1.0)*sj5*sj6*x14128)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x14126*x14127))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x14126))+(((-1.0)*cj4*cj6*x14128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14129.value)*((((cj5*r12))+(((-1.0)*sj5*x14127))+(((-1.0)*sj5*sj6*x14128))))))+IKsqr((((x14126*x14127))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x14126))+(((-1.0)*cj4*cj6*x14128))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14129.value)*((((cj5*r12))+(((-1.0)*sj5*x14127))+(((-1.0)*sj5*sj6*x14128))))), (((x14126*x14127))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x14126))+(((-1.0)*cj4*cj6*x14128))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14130=IKcos(j0);
IkReal x14131=IKsin(j0);
IkReal x14132=((1.0)*cj5);
IkReal x14133=(cj6*sj4);
IkReal x14134=(r00*sj6);
IkReal x14135=(cj5*r12);
IkReal x14136=((0.37429)*sj5);
IkReal x14137=(r10*sj6);
IkReal x14138=((0.36442)*cj1);
IkReal x14139=(cj6*r01);
IkReal x14140=((0.01)*cj5);
IkReal x14141=((1.0)*sj5);
IkReal x14142=(cj6*r11);
IkReal x14143=(cj4*cj6);
IkReal x14144=(cj5*r02);
IkReal x14145=(r01*sj6);
IkReal x14146=((1.0)*cj4);
IkReal x14147=((0.01)*sj5);
IkReal x14148=(r11*sj6);
IkReal x14149=((0.069)*x14131);
IkReal x14150=((1.0)*x14131);
IkReal x14151=((1.0)*x14130);
IkReal x14152=((0.069)*x14130);
evalcond[0]=((((-1.0)*x14134*x14141))+(((-1.0)*x14139*x14141))+(((-1.0)*cj1*x14151))+x14144);
evalcond[1]=((((-1.0)*cj1*x14150))+x14135+(((-1.0)*x14141*x14142))+(((-1.0)*x14137*x14141)));
evalcond[2]=(((r10*x14143))+(((-1.0)*sj4*x14132*x14137))+(((-1.0)*r12*sj4*x14141))+(((-1.0)*r11*x14132*x14133))+(((-1.0)*x14146*x14148))+x14130);
evalcond[3]=((((-1.0)*sj4*x14132*x14134))+(((-1.0)*r02*sj4*x14141))+((r00*x14143))+(((-1.0)*x14150))+(((-1.0)*r01*x14132*x14133))+(((-1.0)*x14145*x14146)));
evalcond[4]=((((-1.0)*cj4*r12*x14141))+(((-1.0)*cj4*x14132*x14137))+(((-1.0)*sj1*x14150))+((sj4*x14148))+(((-1.0)*r10*x14133))+(((-1.0)*cj4*x14132*x14142)));
evalcond[5]=((((-1.0)*cj4*x14132*x14139))+(((-1.0)*cj4*x14132*x14134))+(((-1.0)*r00*x14133))+(((-1.0)*sj1*x14151))+((sj4*x14145))+(((-1.0)*cj4*r02*x14141)));
evalcond[6]=(((r02*x14147))+(((-1.0)*x14134*x14136))+(((-1.0)*px))+((x14134*x14140))+(((-1.0)*x14136*x14139))+((x14139*x14140))+x14152+(((-1.0)*sj1*x14152))+(((0.37429)*x14144))+((x14130*x14138)));
evalcond[7]=((((-1.0)*py))+((r12*x14147))+(((-1.0)*x14136*x14137))+x14149+(((-1.0)*sj1*x14149))+(((-1.0)*x14136*x14142))+(((0.37429)*x14135))+((x14140*x14142))+((x14131*x14138))+((x14137*x14140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14153=((1.0)*cj6*sj5);
IkReal x14154=((1.0)*sj5*sj6);
CheckValue<IkReal> x14155=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14155.valid){
continue;
}
CheckValue<IkReal> x14156 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x14153))+(((-1.0)*r10*x14154)))),((((-1.0)*r01*x14153))+(((-1.0)*r00*x14154))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14156.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14155.value)))+(x14156.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14157=IKcos(j0);
IkReal x14158=IKsin(j0);
IkReal x14159=((1.0)*cj5);
IkReal x14160=(cj6*sj4);
IkReal x14161=(r00*sj6);
IkReal x14162=(cj5*r12);
IkReal x14163=((0.37429)*sj5);
IkReal x14164=(r10*sj6);
IkReal x14165=((0.36442)*cj1);
IkReal x14166=(cj6*r01);
IkReal x14167=((0.01)*cj5);
IkReal x14168=((1.0)*sj5);
IkReal x14169=(cj6*r11);
IkReal x14170=(cj4*cj6);
IkReal x14171=(cj5*r02);
IkReal x14172=(r01*sj6);
IkReal x14173=((1.0)*cj4);
IkReal x14174=((0.01)*sj5);
IkReal x14175=(r11*sj6);
IkReal x14176=((0.069)*x14158);
IkReal x14177=((1.0)*x14158);
IkReal x14178=((1.0)*x14157);
IkReal x14179=((0.069)*x14157);
evalcond[0]=((((-1.0)*cj1*x14178))+(((-1.0)*x14166*x14168))+x14171+(((-1.0)*x14161*x14168)));
evalcond[1]=((((-1.0)*x14164*x14168))+(((-1.0)*cj1*x14177))+(((-1.0)*x14168*x14169))+x14162);
evalcond[2]=((((-1.0)*r12*sj4*x14168))+(((-1.0)*x14173*x14175))+((r10*x14170))+x14157+(((-1.0)*r11*x14159*x14160))+(((-1.0)*sj4*x14159*x14164)));
evalcond[3]=((((-1.0)*x14177))+((r00*x14170))+(((-1.0)*x14172*x14173))+(((-1.0)*r01*x14159*x14160))+(((-1.0)*sj4*x14159*x14161))+(((-1.0)*r02*sj4*x14168)));
evalcond[4]=((((-1.0)*cj4*r12*x14168))+(((-1.0)*r10*x14160))+((sj4*x14175))+(((-1.0)*sj1*x14177))+(((-1.0)*cj4*x14159*x14164))+(((-1.0)*cj4*x14159*x14169)));
evalcond[5]=((((-1.0)*cj4*r02*x14168))+((sj4*x14172))+(((-1.0)*sj1*x14178))+(((-1.0)*r00*x14160))+(((-1.0)*cj4*x14159*x14161))+(((-1.0)*cj4*x14159*x14166)));
evalcond[6]=(((x14161*x14167))+(((-1.0)*x14163*x14166))+(((0.37429)*x14171))+(((-1.0)*sj1*x14179))+((x14166*x14167))+(((-1.0)*px))+((r02*x14174))+x14179+((x14157*x14165))+(((-1.0)*x14161*x14163)));
evalcond[7]=((((-1.0)*x14163*x14164))+(((-1.0)*x14163*x14169))+((x14164*x14167))+((r12*x14174))+((x14158*x14165))+(((-1.0)*sj1*x14176))+((x14167*x14169))+(((-1.0)*py))+x14176+(((0.37429)*x14162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14180=((1.0)*cj4);
IkReal x14181=(r22*sj5);
IkReal x14182=(r21*sj6);
IkReal x14183=((1.0)*sj4);
IkReal x14184=(cj6*r20);
IkReal x14185=(cj5*r22);
IkReal x14186=(cj5*r20*sj6);
IkReal x14187=((1.0)*cj6*r21);
IkReal x14188=(cj5*cj6*r21);
IkReal x14189=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14180*x14182))+(((-1.0)*x14181*x14183))+((cj4*x14184))+(((-1.0)*x14183*x14186))+(((-1.0)*x14183*x14188)));
evalcond[2]=((((-0.37429)*x14189))+(((-0.37429)*cj6*r21*sj5))+(((0.069)*cj1))+(((-1.0)*pz))+(((0.01)*x14188))+(((0.01)*x14186))+(((0.01)*x14181))+(((0.37429)*x14185))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*sj5*x14187))+x14185+(((-1.0)*x14189)));
evalcond[4]=((((-1.0)*x14180*x14188))+(((-1.0)*x14180*x14181))+(((-1.0)*x14180*x14186))+cj1+(((-1.0)*x14183*x14184))+((sj4*x14182)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x14190=((1.0)*cj6*sj5);
IkReal x14191=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x14190))+(((-1.0)*r10*x14191)))))+(IKabs(((((-1.0)*r01*x14190))+(((-1.0)*r00*x14191))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14192=(cj4*cj5);
IkReal x14193=((1.0)*sj5);
CheckValue<IkReal> x14194=IKPowWithIntegerCheck(sj1,-1);
if(!x14194.valid){
continue;
}
CheckValue<IkReal> x14195=IKPowWithIntegerCheck(cj1,-1);
if(!x14195.valid){
continue;
}
if( IKabs(((x14194.value)*((((cj6*r10*sj4))+((r10*sj6*x14192))+((cj6*r11*x14192))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14195.value)*(((((-1.0)*cj6*r01*x14193))+(((-1.0)*r00*sj6*x14193))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14194.value)*((((cj6*r10*sj4))+((r10*sj6*x14192))+((cj6*r11*x14192))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))))+IKsqr(((x14195.value)*(((((-1.0)*cj6*r01*x14193))+(((-1.0)*r00*sj6*x14193))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14194.value)*((((cj6*r10*sj4))+((r10*sj6*x14192))+((cj6*r11*x14192))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))), ((x14195.value)*(((((-1.0)*cj6*r01*x14193))+(((-1.0)*r00*sj6*x14193))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14196=IKsin(j0);
IkReal x14197=IKcos(j0);
IkReal x14198=((1.0)*cj5);
IkReal x14199=(cj6*sj4);
IkReal x14200=(r00*sj6);
IkReal x14201=(cj5*r12);
IkReal x14202=((0.37429)*sj5);
IkReal x14203=(r10*sj6);
IkReal x14204=((0.36442)*cj1);
IkReal x14205=(cj6*r01);
IkReal x14206=((0.01)*cj5);
IkReal x14207=((1.0)*sj5);
IkReal x14208=(cj6*r11);
IkReal x14209=(cj4*cj6);
IkReal x14210=(cj5*r02);
IkReal x14211=(r01*sj6);
IkReal x14212=((1.0)*cj4);
IkReal x14213=((0.01)*sj5);
IkReal x14214=(r11*sj6);
IkReal x14215=(sj1*x14196);
IkReal x14216=((1.0)*x14197);
IkReal x14217=((0.069)*x14197);
evalcond[0]=((((-1.0)*cj1*x14216))+(((-1.0)*x14205*x14207))+x14210+(((-1.0)*x14200*x14207)));
evalcond[1]=((((-1.0)*cj1*x14196))+(((-1.0)*x14207*x14208))+(((-1.0)*x14203*x14207))+x14201);
evalcond[2]=((((-1.0)*r02*sj4*x14207))+(((-1.0)*x14211*x14212))+(((-1.0)*r01*x14198*x14199))+((r00*x14209))+x14196+(((-1.0)*sj4*x14198*x14200)));
evalcond[3]=((((-1.0)*r12*sj4*x14207))+(((-1.0)*x14212*x14214))+((r10*x14209))+(((-1.0)*r11*x14198*x14199))+(((-1.0)*x14216))+(((-1.0)*sj4*x14198*x14203)));
evalcond[4]=(((sj4*x14214))+(((-1.0)*cj4*x14198*x14203))+(((-1.0)*cj4*x14198*x14208))+(((-1.0)*r10*x14199))+x14215+(((-1.0)*cj4*r12*x14207)));
evalcond[5]=(((sj4*x14211))+((sj1*x14197))+(((-1.0)*cj4*x14198*x14205))+(((-1.0)*cj4*x14198*x14200))+(((-1.0)*r00*x14199))+(((-1.0)*cj4*r02*x14207)));
evalcond[6]=(((x14205*x14206))+((sj1*x14217))+(((-1.0)*px))+((x14197*x14204))+((x14200*x14206))+(((-1.0)*x14202*x14205))+((r02*x14213))+(((0.37429)*x14210))+x14217+(((-1.0)*x14200*x14202)));
evalcond[7]=(((r12*x14213))+((x14206*x14208))+(((0.37429)*x14201))+(((-1.0)*py))+(((0.069)*x14215))+((x14203*x14206))+(((0.069)*x14196))+((x14196*x14204))+(((-1.0)*x14202*x14208))+(((-1.0)*x14202*x14203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14218=((1.0)*r00);
IkReal x14219=(cj6*r01);
IkReal x14220=(cj5*sj4);
CheckValue<IkReal> x14221=IKPowWithIntegerCheck(cj1,-1);
if(!x14221.valid){
continue;
}
if( IKabs((((x14219*x14220))+((r00*sj6*x14220))+(((-1.0)*cj4*cj6*x14218))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14221.value)*(((((-1.0)*sj5*x14219))+(((-1.0)*sj5*sj6*x14218))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x14219*x14220))+((r00*sj6*x14220))+(((-1.0)*cj4*cj6*x14218))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x14221.value)*(((((-1.0)*sj5*x14219))+(((-1.0)*sj5*sj6*x14218))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x14219*x14220))+((r00*sj6*x14220))+(((-1.0)*cj4*cj6*x14218))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x14221.value)*(((((-1.0)*sj5*x14219))+(((-1.0)*sj5*sj6*x14218))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14222=IKsin(j0);
IkReal x14223=IKcos(j0);
IkReal x14224=((1.0)*cj5);
IkReal x14225=(cj6*sj4);
IkReal x14226=(r00*sj6);
IkReal x14227=(cj5*r12);
IkReal x14228=((0.37429)*sj5);
IkReal x14229=(r10*sj6);
IkReal x14230=((0.36442)*cj1);
IkReal x14231=(cj6*r01);
IkReal x14232=((0.01)*cj5);
IkReal x14233=((1.0)*sj5);
IkReal x14234=(cj6*r11);
IkReal x14235=(cj4*cj6);
IkReal x14236=(cj5*r02);
IkReal x14237=(r01*sj6);
IkReal x14238=((1.0)*cj4);
IkReal x14239=((0.01)*sj5);
IkReal x14240=(r11*sj6);
IkReal x14241=(sj1*x14222);
IkReal x14242=((1.0)*x14223);
IkReal x14243=((0.069)*x14223);
evalcond[0]=((((-1.0)*x14231*x14233))+(((-1.0)*cj1*x14242))+(((-1.0)*x14226*x14233))+x14236);
evalcond[1]=((((-1.0)*cj1*x14222))+(((-1.0)*x14233*x14234))+(((-1.0)*x14229*x14233))+x14227);
evalcond[2]=((((-1.0)*r02*sj4*x14233))+(((-1.0)*x14237*x14238))+(((-1.0)*sj4*x14224*x14226))+((r00*x14235))+x14222+(((-1.0)*r01*x14224*x14225)));
evalcond[3]=((((-1.0)*x14238*x14240))+(((-1.0)*r11*x14224*x14225))+(((-1.0)*sj4*x14224*x14229))+(((-1.0)*x14242))+((r10*x14235))+(((-1.0)*r12*sj4*x14233)));
evalcond[4]=((((-1.0)*cj4*x14224*x14234))+(((-1.0)*r10*x14225))+(((-1.0)*cj4*x14224*x14229))+((sj4*x14240))+(((-1.0)*cj4*r12*x14233))+x14241);
evalcond[5]=((((-1.0)*cj4*x14224*x14231))+((sj1*x14223))+(((-1.0)*cj4*x14224*x14226))+((sj4*x14237))+(((-1.0)*r00*x14225))+(((-1.0)*cj4*r02*x14233)));
evalcond[6]=((((-1.0)*x14226*x14228))+((x14231*x14232))+((x14223*x14230))+((r02*x14239))+(((-1.0)*x14228*x14231))+(((0.37429)*x14236))+(((-1.0)*px))+((x14226*x14232))+((sj1*x14243))+x14243);
evalcond[7]=((((0.37429)*x14227))+(((0.069)*x14241))+(((-1.0)*x14228*x14234))+((x14229*x14232))+(((0.069)*x14222))+(((-1.0)*x14228*x14229))+(((-1.0)*py))+((r12*x14239))+((x14222*x14230))+((x14232*x14234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14244=((1.0)*cj6*sj5);
IkReal x14245=((1.0)*sj5*sj6);
CheckValue<IkReal> x14246=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14246.valid){
continue;
}
CheckValue<IkReal> x14247 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x14245))+(((-1.0)*r11*x14244)))),((((-1.0)*r01*x14244))+(((-1.0)*r00*x14245))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14247.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14246.value)))+(x14247.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14248=IKsin(j0);
IkReal x14249=IKcos(j0);
IkReal x14250=((1.0)*cj5);
IkReal x14251=(cj6*sj4);
IkReal x14252=(r00*sj6);
IkReal x14253=(cj5*r12);
IkReal x14254=((0.37429)*sj5);
IkReal x14255=(r10*sj6);
IkReal x14256=((0.36442)*cj1);
IkReal x14257=(cj6*r01);
IkReal x14258=((0.01)*cj5);
IkReal x14259=((1.0)*sj5);
IkReal x14260=(cj6*r11);
IkReal x14261=(cj4*cj6);
IkReal x14262=(cj5*r02);
IkReal x14263=(r01*sj6);
IkReal x14264=((1.0)*cj4);
IkReal x14265=((0.01)*sj5);
IkReal x14266=(r11*sj6);
IkReal x14267=(sj1*x14248);
IkReal x14268=((1.0)*x14249);
IkReal x14269=((0.069)*x14249);
evalcond[0]=((((-1.0)*x14252*x14259))+(((-1.0)*cj1*x14268))+(((-1.0)*x14257*x14259))+x14262);
evalcond[1]=((((-1.0)*cj1*x14248))+(((-1.0)*x14255*x14259))+(((-1.0)*x14259*x14260))+x14253);
evalcond[2]=(((r00*x14261))+(((-1.0)*r01*x14250*x14251))+(((-1.0)*sj4*x14250*x14252))+(((-1.0)*r02*sj4*x14259))+(((-1.0)*x14263*x14264))+x14248);
evalcond[3]=((((-1.0)*sj4*x14250*x14255))+(((-1.0)*x14268))+(((-1.0)*r11*x14250*x14251))+(((-1.0)*r12*sj4*x14259))+(((-1.0)*x14264*x14266))+((r10*x14261)));
evalcond[4]=(((sj4*x14266))+(((-1.0)*cj4*x14250*x14255))+(((-1.0)*cj4*r12*x14259))+(((-1.0)*cj4*x14250*x14260))+(((-1.0)*r10*x14251))+x14267);
evalcond[5]=((((-1.0)*cj4*r02*x14259))+((sj4*x14263))+(((-1.0)*r00*x14251))+(((-1.0)*cj4*x14250*x14252))+(((-1.0)*cj4*x14250*x14257))+((sj1*x14249)));
evalcond[6]=((((-1.0)*x14254*x14257))+(((-1.0)*x14252*x14254))+((r02*x14265))+((x14249*x14256))+(((0.37429)*x14262))+((x14257*x14258))+(((-1.0)*px))+x14269+((x14252*x14258))+((sj1*x14269)));
evalcond[7]=((((-1.0)*x14254*x14255))+(((0.069)*x14267))+(((0.069)*x14248))+((x14248*x14256))+(((-1.0)*x14254*x14260))+(((-1.0)*py))+((r12*x14265))+(((0.37429)*x14253))+((x14258*x14260))+((x14255*x14258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14270=(cj4*cj5);
IkReal x14271=(cj5*r22);
IkReal x14272=(r22*sj5);
IkReal x14273=(cj6*r21);
IkReal x14274=((0.37429)*sj5);
IkReal x14275=((1.0)*sj4);
IkReal x14276=(r21*sj6);
IkReal x14277=((1.0)*cj4);
IkReal x14278=((0.01)*cj5);
IkReal x14279=(cj6*r20);
IkReal x14280=(r20*sj6);
IkReal x14281=((1.0)*x14273);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj1+(((-1.0)*x14272*x14275))+(((-1.0)*x14276*x14277))+((cj4*x14279))+(((-1.0)*cj5*x14275*x14280))+(((-1.0)*cj5*x14273*x14275)));
evalcond[2]=((((-1.0)*x14274*x14280))+(((-1.0)*x14273*x14274))+((x14273*x14278))+(((0.37429)*x14271))+(((-1.0)*pz))+((x14278*x14280))+(((0.01)*x14272))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*sj5*x14280))+sj1+(((-1.0)*sj5*x14281))+x14271);
evalcond[4]=((((-1.0)*x14272*x14277))+(((-1.0)*x14275*x14279))+((sj4*x14276))+(((-1.0)*x14270*x14280))+(((-1.0)*x14270*x14281)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x14282=((1.0)*cj6*sj5);
IkReal x14283=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r01*x14282))+(((-1.0)*r00*x14283))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x14283))+(((-1.0)*r11*x14282))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14284=(cj5*sj4);
IkReal x14285=((1.0)*cj6);
CheckValue<IkReal> x14286=IKPowWithIntegerCheck(sj1,-1);
if(!x14286.valid){
continue;
}
CheckValue<IkReal> x14287=IKPowWithIntegerCheck(cj1,-1);
if(!x14287.valid){
continue;
}
if( IKabs(((x14286.value)*(((((-1.0)*cj4*r10*x14285))+((r10*sj6*x14284))+((cj4*r11*sj6))+((cj6*r11*x14284))+((r12*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14287.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x14285))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14286.value)*(((((-1.0)*cj4*r10*x14285))+((r10*sj6*x14284))+((cj4*r11*sj6))+((cj6*r11*x14284))+((r12*sj4*sj5))))))+IKsqr(((x14287.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x14285))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14286.value)*(((((-1.0)*cj4*r10*x14285))+((r10*sj6*x14284))+((cj4*r11*sj6))+((cj6*r11*x14284))+((r12*sj4*sj5))))), ((x14287.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x14285))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14288=IKcos(j0);
IkReal x14289=IKsin(j0);
IkReal x14290=((1.0)*cj5);
IkReal x14291=(cj6*sj4);
IkReal x14292=(r00*sj6);
IkReal x14293=(cj5*r12);
IkReal x14294=((0.37429)*sj5);
IkReal x14295=(r10*sj6);
IkReal x14296=((0.36442)*cj1);
IkReal x14297=(cj6*r01);
IkReal x14298=((0.01)*cj5);
IkReal x14299=((1.0)*sj5);
IkReal x14300=(cj6*r11);
IkReal x14301=(sj4*sj6);
IkReal x14302=(cj4*cj6);
IkReal x14303=(cj5*r02);
IkReal x14304=((0.01)*sj5);
IkReal x14305=((0.069)*x14289);
IkReal x14306=((0.069)*x14288);
IkReal x14307=((1.0)*x14289);
IkReal x14308=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14292*x14299))+(((-1.0)*cj1*x14288))+(((-1.0)*x14297*x14299))+x14303);
evalcond[1]=((((-1.0)*cj1*x14307))+(((-1.0)*x14299*x14300))+(((-1.0)*x14295*x14299))+x14293);
evalcond[2]=((((-1.0)*cj4*r12*x14299))+((r11*x14301))+(((-1.0)*r10*x14291))+(((-1.0)*cj4*x14290*x14295))+(((-1.0)*cj4*x14290*x14300))+x14288);
evalcond[3]=((((-1.0)*sj4*x14290*x14295))+(((-1.0)*r11*x14308))+(((-1.0)*r12*sj4*x14299))+((sj1*x14289))+(((-1.0)*r11*x14290*x14291))+((r10*x14302)));
evalcond[4]=((((-1.0)*r01*x14290*x14291))+(((-1.0)*sj4*x14290*x14292))+(((-1.0)*r02*sj4*x14299))+((r00*x14302))+(((-1.0)*r01*x14308))+((sj1*x14288)));
evalcond[5]=((((-1.0)*r00*x14291))+((r01*x14301))+(((-1.0)*cj4*x14290*x14297))+(((-1.0)*cj4*x14290*x14292))+(((-1.0)*cj4*r02*x14299))+(((-1.0)*x14307)));
evalcond[6]=(((r02*x14304))+((x14292*x14298))+((x14297*x14298))+(((0.37429)*x14303))+(((-1.0)*px))+(((-1.0)*x14292*x14294))+x14306+(((-1.0)*x14294*x14297))+((x14288*x14296))+(((-1.0)*x14305)));
evalcond[7]=(((x14289*x14296))+((x14298*x14300))+(((-1.0)*x14294*x14300))+((r12*x14304))+((x14295*x14298))+(((-1.0)*py))+x14305+x14306+(((-1.0)*x14294*x14295))+(((0.37429)*x14293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14309=(cj4*cj5);
IkReal x14310=(cj6*r11);
IkReal x14311=(r10*sj6);
IkReal x14312=((1.0)*sj5);
CheckValue<IkReal> x14313=IKPowWithIntegerCheck(cj1,-1);
if(!x14313.valid){
continue;
}
if( IKabs(((x14313.value)*((((cj5*r12))+(((-1.0)*x14310*x14312))+(((-1.0)*x14311*x14312)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj4))+((x14309*x14310))+((x14309*x14311))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14313.value)*((((cj5*r12))+(((-1.0)*x14310*x14312))+(((-1.0)*x14311*x14312))))))+IKsqr((((cj6*r10*sj4))+((x14309*x14310))+((x14309*x14311))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14313.value)*((((cj5*r12))+(((-1.0)*x14310*x14312))+(((-1.0)*x14311*x14312))))), (((cj6*r10*sj4))+((x14309*x14310))+((x14309*x14311))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14314=IKcos(j0);
IkReal x14315=IKsin(j0);
IkReal x14316=((1.0)*cj5);
IkReal x14317=(cj6*sj4);
IkReal x14318=(r00*sj6);
IkReal x14319=(cj5*r12);
IkReal x14320=((0.37429)*sj5);
IkReal x14321=(r10*sj6);
IkReal x14322=((0.36442)*cj1);
IkReal x14323=(cj6*r01);
IkReal x14324=((0.01)*cj5);
IkReal x14325=((1.0)*sj5);
IkReal x14326=(cj6*r11);
IkReal x14327=(sj4*sj6);
IkReal x14328=(cj4*cj6);
IkReal x14329=(cj5*r02);
IkReal x14330=((0.01)*sj5);
IkReal x14331=((0.069)*x14315);
IkReal x14332=((0.069)*x14314);
IkReal x14333=((1.0)*x14315);
IkReal x14334=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*cj1*x14314))+(((-1.0)*x14318*x14325))+(((-1.0)*x14323*x14325))+x14329);
evalcond[1]=((((-1.0)*x14325*x14326))+(((-1.0)*cj1*x14333))+(((-1.0)*x14321*x14325))+x14319);
evalcond[2]=((((-1.0)*r10*x14317))+(((-1.0)*cj4*r12*x14325))+((r11*x14327))+x14314+(((-1.0)*cj4*x14316*x14326))+(((-1.0)*cj4*x14316*x14321)));
evalcond[3]=((((-1.0)*r11*x14316*x14317))+(((-1.0)*sj4*x14316*x14321))+(((-1.0)*r11*x14334))+((r10*x14328))+((sj1*x14315))+(((-1.0)*r12*sj4*x14325)));
evalcond[4]=(((r00*x14328))+(((-1.0)*r01*x14316*x14317))+((sj1*x14314))+(((-1.0)*sj4*x14316*x14318))+(((-1.0)*r01*x14334))+(((-1.0)*r02*sj4*x14325)));
evalcond[5]=((((-1.0)*x14333))+(((-1.0)*cj4*x14316*x14318))+(((-1.0)*cj4*r02*x14325))+((r01*x14327))+(((-1.0)*r00*x14317))+(((-1.0)*cj4*x14316*x14323)));
evalcond[6]=((((-1.0)*x14331))+((r02*x14330))+((x14318*x14324))+(((-1.0)*px))+(((-1.0)*x14318*x14320))+(((-1.0)*x14320*x14323))+((x14314*x14322))+x14332+(((0.37429)*x14329))+((x14323*x14324)));
evalcond[7]=(((x14321*x14324))+((x14315*x14322))+((r12*x14330))+(((-1.0)*py))+(((-1.0)*x14320*x14321))+(((-1.0)*x14320*x14326))+(((0.37429)*x14319))+x14331+x14332+((x14324*x14326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14335=((1.0)*cj6*sj5);
IkReal x14336=((1.0)*sj5*sj6);
CheckValue<IkReal> x14337=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14337.valid){
continue;
}
CheckValue<IkReal> x14338 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x14335))+(((-1.0)*r10*x14336)))),((((-1.0)*r00*x14336))+(((-1.0)*r01*x14335))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14338.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14337.value)))+(x14338.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14339=IKcos(j0);
IkReal x14340=IKsin(j0);
IkReal x14341=((1.0)*cj5);
IkReal x14342=(cj6*sj4);
IkReal x14343=(r00*sj6);
IkReal x14344=(cj5*r12);
IkReal x14345=((0.37429)*sj5);
IkReal x14346=(r10*sj6);
IkReal x14347=((0.36442)*cj1);
IkReal x14348=(cj6*r01);
IkReal x14349=((0.01)*cj5);
IkReal x14350=((1.0)*sj5);
IkReal x14351=(cj6*r11);
IkReal x14352=(sj4*sj6);
IkReal x14353=(cj4*cj6);
IkReal x14354=(cj5*r02);
IkReal x14355=((0.01)*sj5);
IkReal x14356=((0.069)*x14340);
IkReal x14357=((0.069)*x14339);
IkReal x14358=((1.0)*x14340);
IkReal x14359=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14348*x14350))+(((-1.0)*x14343*x14350))+(((-1.0)*cj1*x14339))+x14354);
evalcond[1]=((((-1.0)*x14346*x14350))+(((-1.0)*x14350*x14351))+x14344+(((-1.0)*cj1*x14358)));
evalcond[2]=((((-1.0)*cj4*x14341*x14346))+((r11*x14352))+(((-1.0)*cj4*x14341*x14351))+(((-1.0)*cj4*r12*x14350))+x14339+(((-1.0)*r10*x14342)));
evalcond[3]=(((sj1*x14340))+(((-1.0)*sj4*x14341*x14346))+(((-1.0)*r11*x14359))+((r10*x14353))+(((-1.0)*r12*sj4*x14350))+(((-1.0)*r11*x14341*x14342)));
evalcond[4]=((((-1.0)*r02*sj4*x14350))+((r00*x14353))+(((-1.0)*r01*x14341*x14342))+(((-1.0)*sj4*x14341*x14343))+(((-1.0)*r01*x14359))+((sj1*x14339)));
evalcond[5]=((((-1.0)*cj4*r02*x14350))+(((-1.0)*r00*x14342))+(((-1.0)*x14358))+(((-1.0)*cj4*x14341*x14343))+(((-1.0)*cj4*x14341*x14348))+((r01*x14352)));
evalcond[6]=((((-1.0)*x14356))+((r02*x14355))+(((-1.0)*x14343*x14345))+((x14343*x14349))+(((-1.0)*px))+(((0.37429)*x14354))+((x14348*x14349))+((x14339*x14347))+x14357+(((-1.0)*x14345*x14348)));
evalcond[7]=((((-1.0)*x14345*x14351))+((r12*x14355))+(((0.37429)*x14344))+((x14340*x14347))+((x14346*x14349))+(((-1.0)*py))+x14356+x14357+((x14349*x14351))+(((-1.0)*x14345*x14346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14360=((1.0)*cj4);
IkReal x14361=(r22*sj5);
IkReal x14362=(r21*sj6);
IkReal x14363=((1.0)*sj4);
IkReal x14364=(cj6*r20);
IkReal x14365=(cj5*r22);
IkReal x14366=(cj5*r20*sj6);
IkReal x14367=((1.0)*cj6*r21);
IkReal x14368=(cj5*cj6*r21);
IkReal x14369=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14361*x14363))+((cj4*x14364))+(((-1.0)*x14360*x14362))+(((-1.0)*cj1))+(((-1.0)*x14363*x14366))+(((-1.0)*x14363*x14368)));
evalcond[2]=((((-0.37429)*cj6*r21*sj5))+(((-1.0)*pz))+(((-0.37429)*x14369))+(((0.37429)*x14365))+(((0.01)*x14368))+(((0.01)*x14361))+(((0.01)*x14366))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*sj5*x14367))+(((-1.0)*x14369))+x14365);
evalcond[4]=((((-1.0)*x14360*x14368))+(((-1.0)*x14360*x14361))+(((-1.0)*x14360*x14366))+((sj4*x14362))+(((-1.0)*x14363*x14364)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x14370=((1.0)*cj6*sj5);
IkReal x14371=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x14370))+(((-1.0)*r10*x14371)))))+(IKabs(((((-1.0)*r01*x14370))+(((-1.0)*r00*x14371))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14372=((1.0)*cj6);
IkReal x14373=(cj5*sj4);
IkReal x14374=((1.0)*sj6);
CheckValue<IkReal> x14375=IKPowWithIntegerCheck(sj1,-1);
if(!x14375.valid){
continue;
}
CheckValue<IkReal> x14376=IKPowWithIntegerCheck(cj1,-1);
if(!x14376.valid){
continue;
}
if( IKabs(((x14375.value)*(((((-1.0)*r11*x14372*x14373))+(((-1.0)*cj4*r11*x14374))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r10))+(((-1.0)*r10*x14373*x14374)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14376.value)*(((((-1.0)*r01*sj5*x14372))+(((-1.0)*r00*sj5*x14374))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14375.value)*(((((-1.0)*r11*x14372*x14373))+(((-1.0)*cj4*r11*x14374))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r10))+(((-1.0)*r10*x14373*x14374))))))+IKsqr(((x14376.value)*(((((-1.0)*r01*sj5*x14372))+(((-1.0)*r00*sj5*x14374))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14375.value)*(((((-1.0)*r11*x14372*x14373))+(((-1.0)*cj4*r11*x14374))+(((-1.0)*r12*sj4*sj5))+((cj4*cj6*r10))+(((-1.0)*r10*x14373*x14374))))), ((x14376.value)*(((((-1.0)*r01*sj5*x14372))+(((-1.0)*r00*sj5*x14374))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14377=IKsin(j0);
IkReal x14378=IKcos(j0);
IkReal x14379=(cj5*r11);
IkReal x14380=(sj5*sj6);
IkReal x14381=((1.0)*r00);
IkReal x14382=(cj5*r12);
IkReal x14383=((0.36442)*cj1);
IkReal x14384=(cj5*r01);
IkReal x14385=((1.0)*cj6);
IkReal x14386=(r11*sj5);
IkReal x14387=((1.0)*cj4);
IkReal x14388=((0.01)*cj6);
IkReal x14389=(cj4*cj6);
IkReal x14390=(cj5*r02);
IkReal x14391=(r12*sj5);
IkReal x14392=(cj5*sj6);
IkReal x14393=(r01*sj6);
IkReal x14394=(r02*sj5);
IkReal x14395=(r11*sj6);
IkReal x14396=((0.069)*x14377);
IkReal x14397=((0.069)*x14378);
IkReal x14398=(sj4*x14385);
IkReal x14399=(cj6*r01*sj5);
IkReal x14400=(r10*x14392);
IkReal x14401=((1.0)*sj4*sj5);
IkReal x14402=((1.0)*x14378);
IkReal x14403=((1.0)*x14377);
evalcond[0]=((((-1.0)*cj1*x14402))+(((-1.0)*x14380*x14381))+(((-1.0)*r01*sj5*x14385))+x14390);
evalcond[1]=((((-1.0)*cj1*x14403))+(((-1.0)*x14385*x14386))+(((-1.0)*r10*x14380))+x14382);
evalcond[2]=((((-1.0)*cj6*sj4*x14381))+((sj4*x14393))+(((-1.0)*cj4*x14381*x14392))+x14377+(((-1.0)*x14387*x14394))+(((-1.0)*cj4*x14384*x14385)));
evalcond[3]=((((-1.0)*x14402))+((sj4*x14395))+(((-1.0)*cj4*x14379*x14385))+(((-1.0)*x14387*x14400))+(((-1.0)*x14387*x14391))+(((-1.0)*r10*x14398)));
evalcond[4]=((((-1.0)*sj4*x14391))+(((-1.0)*x14379*x14398))+(((-1.0)*sj4*x14400))+((r10*x14389))+(((-1.0)*sj1*x14403))+(((-1.0)*x14387*x14395)));
evalcond[5]=((((-1.0)*sj4*x14394))+(((-1.0)*x14384*x14398))+((r00*x14389))+(((-1.0)*sj4*x14381*x14392))+(((-1.0)*sj1*x14402))+(((-1.0)*x14387*x14393)));
evalcond[6]=(((x14378*x14383))+(((-0.37429)*x14399))+((x14384*x14388))+(((0.37429)*x14390))+(((0.01)*x14394))+(((-0.37429)*r00*x14380))+(((-1.0)*px))+(((0.01)*r00*x14392))+x14396+x14397);
evalcond[7]=((((-0.37429)*cj6*x14386))+(((0.01)*x14400))+((x14379*x14388))+(((0.37429)*x14382))+((x14377*x14383))+(((0.01)*x14391))+(((-1.0)*py))+x14396+(((-0.37429)*r10*x14380))+(((-1.0)*x14397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14404=((1.0)*sj6);
IkReal x14405=(cj4*cj5);
IkReal x14406=(cj6*r01);
CheckValue<IkReal> x14407=IKPowWithIntegerCheck(cj1,-1);
if(!x14407.valid){
continue;
}
if( IKabs((((r00*sj6*x14405))+((x14405*x14406))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x14404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14407.value)*(((((-1.0)*sj5*x14406))+(((-1.0)*r00*sj5*x14404))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj6*x14405))+((x14405*x14406))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x14404))))+IKsqr(((x14407.value)*(((((-1.0)*sj5*x14406))+(((-1.0)*r00*sj5*x14404))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj6*x14405))+((x14405*x14406))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x14404))), ((x14407.value)*(((((-1.0)*sj5*x14406))+(((-1.0)*r00*sj5*x14404))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14408=IKsin(j0);
IkReal x14409=IKcos(j0);
IkReal x14410=(cj5*r11);
IkReal x14411=(sj5*sj6);
IkReal x14412=((1.0)*r00);
IkReal x14413=(cj5*r12);
IkReal x14414=((0.36442)*cj1);
IkReal x14415=(cj5*r01);
IkReal x14416=((1.0)*cj6);
IkReal x14417=(r11*sj5);
IkReal x14418=((1.0)*cj4);
IkReal x14419=((0.01)*cj6);
IkReal x14420=(cj4*cj6);
IkReal x14421=(cj5*r02);
IkReal x14422=(r12*sj5);
IkReal x14423=(cj5*sj6);
IkReal x14424=(r01*sj6);
IkReal x14425=(r02*sj5);
IkReal x14426=(r11*sj6);
IkReal x14427=((0.069)*x14408);
IkReal x14428=((0.069)*x14409);
IkReal x14429=(sj4*x14416);
IkReal x14430=(cj6*r01*sj5);
IkReal x14431=(r10*x14423);
IkReal x14432=((1.0)*sj4*sj5);
IkReal x14433=((1.0)*x14409);
IkReal x14434=((1.0)*x14408);
evalcond[0]=((((-1.0)*r01*sj5*x14416))+(((-1.0)*cj1*x14433))+x14421+(((-1.0)*x14411*x14412)));
evalcond[1]=((((-1.0)*x14416*x14417))+(((-1.0)*cj1*x14434))+x14413+(((-1.0)*r10*x14411)));
evalcond[2]=(((sj4*x14424))+(((-1.0)*x14418*x14425))+(((-1.0)*cj6*sj4*x14412))+(((-1.0)*cj4*x14415*x14416))+x14408+(((-1.0)*cj4*x14412*x14423)));
evalcond[3]=((((-1.0)*x14433))+((sj4*x14426))+(((-1.0)*r10*x14429))+(((-1.0)*x14418*x14431))+(((-1.0)*x14418*x14422))+(((-1.0)*cj4*x14410*x14416)));
evalcond[4]=((((-1.0)*sj4*x14422))+(((-1.0)*x14418*x14426))+(((-1.0)*sj1*x14434))+((r10*x14420))+(((-1.0)*x14410*x14429))+(((-1.0)*sj4*x14431)));
evalcond[5]=((((-1.0)*sj4*x14425))+(((-1.0)*sj4*x14412*x14423))+(((-1.0)*x14418*x14424))+(((-1.0)*sj1*x14433))+((r00*x14420))+(((-1.0)*x14415*x14429)));
evalcond[6]=((((-0.37429)*x14430))+(((0.01)*r00*x14423))+(((0.01)*x14425))+((x14409*x14414))+(((0.37429)*x14421))+(((-1.0)*px))+x14427+x14428+((x14415*x14419))+(((-0.37429)*r00*x14411)));
evalcond[7]=((((0.01)*x14431))+(((0.01)*x14422))+((x14408*x14414))+(((-1.0)*py))+x14427+(((-0.37429)*cj6*x14417))+(((0.37429)*x14413))+(((-0.37429)*r10*x14411))+((x14410*x14419))+(((-1.0)*x14428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14435=((1.0)*cj6*sj5);
IkReal x14436=((1.0)*sj5*sj6);
CheckValue<IkReal> x14437=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14437.valid){
continue;
}
CheckValue<IkReal> x14438 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x14436))+(((-1.0)*r11*x14435)))),((((-1.0)*r00*x14436))+(((-1.0)*r01*x14435))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14438.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14437.value)))+(x14438.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14439=IKsin(j0);
IkReal x14440=IKcos(j0);
IkReal x14441=(cj5*r11);
IkReal x14442=(sj5*sj6);
IkReal x14443=((1.0)*r00);
IkReal x14444=(cj5*r12);
IkReal x14445=((0.36442)*cj1);
IkReal x14446=(cj5*r01);
IkReal x14447=((1.0)*cj6);
IkReal x14448=(r11*sj5);
IkReal x14449=((1.0)*cj4);
IkReal x14450=((0.01)*cj6);
IkReal x14451=(cj4*cj6);
IkReal x14452=(cj5*r02);
IkReal x14453=(r12*sj5);
IkReal x14454=(cj5*sj6);
IkReal x14455=(r01*sj6);
IkReal x14456=(r02*sj5);
IkReal x14457=(r11*sj6);
IkReal x14458=((0.069)*x14439);
IkReal x14459=((0.069)*x14440);
IkReal x14460=(sj4*x14447);
IkReal x14461=(cj6*r01*sj5);
IkReal x14462=(r10*x14454);
IkReal x14463=((1.0)*sj4*sj5);
IkReal x14464=((1.0)*x14440);
IkReal x14465=((1.0)*x14439);
evalcond[0]=((((-1.0)*cj1*x14464))+(((-1.0)*x14442*x14443))+x14452+(((-1.0)*r01*sj5*x14447)));
evalcond[1]=((((-1.0)*r10*x14442))+(((-1.0)*cj1*x14465))+x14444+(((-1.0)*x14447*x14448)));
evalcond[2]=(((sj4*x14455))+(((-1.0)*x14449*x14456))+(((-1.0)*cj4*x14443*x14454))+x14439+(((-1.0)*cj6*sj4*x14443))+(((-1.0)*cj4*x14446*x14447)));
evalcond[3]=((((-1.0)*x14449*x14462))+((sj4*x14457))+(((-1.0)*x14449*x14453))+(((-1.0)*r10*x14460))+(((-1.0)*cj4*x14441*x14447))+(((-1.0)*x14464)));
evalcond[4]=((((-1.0)*sj4*x14453))+(((-1.0)*x14449*x14457))+(((-1.0)*sj4*x14462))+((r10*x14451))+(((-1.0)*x14441*x14460))+(((-1.0)*sj1*x14465)));
evalcond[5]=((((-1.0)*sj4*x14456))+(((-1.0)*x14449*x14455))+((r00*x14451))+(((-1.0)*x14446*x14460))+(((-1.0)*sj4*x14443*x14454))+(((-1.0)*sj1*x14464)));
evalcond[6]=((((0.01)*x14456))+(((-0.37429)*x14461))+((x14440*x14445))+(((-1.0)*px))+((x14446*x14450))+(((0.37429)*x14452))+x14459+x14458+(((-0.37429)*r00*x14442))+(((0.01)*r00*x14454)));
evalcond[7]=(((x14439*x14445))+(((-0.37429)*r10*x14442))+(((-1.0)*x14459))+(((0.01)*x14453))+(((0.37429)*x14444))+(((-1.0)*py))+((x14441*x14450))+x14458+(((-0.37429)*cj6*x14448))+(((0.01)*x14462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x14472=IKPowWithIntegerCheck(cj1,-1);
if(!x14472.valid){
continue;
}
IkReal x14466=x14472.value;
IkReal x14467=(cj5*r02);
IkReal x14468=(cj1*sj6);
IkReal x14469=(cj1*sj4);
IkReal x14470=(cj6*r01*sj5);
IkReal x14471=(r00*sj5*sj6);
CheckValue<IkReal> x14473=IKPowWithIntegerCheck(sj1,-1);
if(!x14473.valid){
continue;
}
CheckValue<IkReal> x14474=IKPowWithIntegerCheck(sj2,-1);
if(!x14474.valid){
continue;
}
if( IKabs((x14466*(x14473.value)*(x14474.value)*((((cj2*x14470))+((cj2*x14471))+((cj5*cj6*r11*x14469))+((r12*sj5*x14469))+(((-1.0)*cj2*x14467))+((cj4*r11*x14468))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x14468)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14466*(((((-1.0)*x14470))+(((-1.0)*x14471))+x14467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14466*(x14473.value)*(x14474.value)*((((cj2*x14470))+((cj2*x14471))+((cj5*cj6*r11*x14469))+((r12*sj5*x14469))+(((-1.0)*cj2*x14467))+((cj4*r11*x14468))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x14468))))))+IKsqr((x14466*(((((-1.0)*x14470))+(((-1.0)*x14471))+x14467))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x14466*(x14473.value)*(x14474.value)*((((cj2*x14470))+((cj2*x14471))+((cj5*cj6*r11*x14469))+((r12*sj5*x14469))+(((-1.0)*cj2*x14467))+((cj4*r11*x14468))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x14468))))), (x14466*(((((-1.0)*x14470))+(((-1.0)*x14471))+x14467))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14475=IKsin(j0);
IkReal x14476=IKcos(j0);
IkReal x14477=((1.0)*cj5);
IkReal x14478=(cj6*sj4);
IkReal x14479=(r00*sj6);
IkReal x14480=(cj5*r12);
IkReal x14481=((0.37429)*sj5);
IkReal x14482=(r10*sj6);
IkReal x14483=(cj2*sj1);
IkReal x14484=((0.36442)*cj1);
IkReal x14485=(cj6*r01);
IkReal x14486=((0.01)*cj5);
IkReal x14487=((1.0)*sj5);
IkReal x14488=(cj6*r11);
IkReal x14489=(sj4*sj6);
IkReal x14490=((0.01)*sj5);
IkReal x14491=(cj4*cj6);
IkReal x14492=(cj5*r02);
IkReal x14493=((0.069)*x14475);
IkReal x14494=((1.0)*x14476);
IkReal x14495=(sj2*x14476);
IkReal x14496=((0.069)*x14476);
IkReal x14497=((1.0)*x14475);
IkReal x14498=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14479*x14487))+(((-1.0)*x14485*x14487))+x14492+(((-1.0)*cj1*x14494)));
evalcond[1]=((((-1.0)*x14487*x14488))+x14480+(((-1.0)*cj1*x14497))+(((-1.0)*x14482*x14487)));
evalcond[2]=((((-1.0)*r11*x14477*x14478))+((cj2*x14476))+((r10*x14491))+(((-1.0)*sj4*x14477*x14482))+(((-1.0)*r12*sj4*x14487))+((sj1*sj2*x14475))+(((-1.0)*r11*x14498)));
evalcond[3]=((((-1.0)*r01*x14498))+(((-1.0)*r01*x14477*x14478))+((sj1*x14495))+(((-1.0)*sj4*x14477*x14479))+((r00*x14491))+(((-1.0)*cj2*x14497))+(((-1.0)*r02*sj4*x14487)));
evalcond[4]=((((-1.0)*cj4*r12*x14487))+((r11*x14489))+(((-1.0)*x14483*x14497))+(((-1.0)*r10*x14478))+x14495+(((-1.0)*cj4*x14477*x14482))+(((-1.0)*cj4*x14477*x14488)));
evalcond[5]=((((-1.0)*cj4*x14477*x14479))+(((-1.0)*r00*x14478))+(((-1.0)*x14483*x14494))+(((-1.0)*cj4*x14477*x14485))+((r01*x14489))+(((-1.0)*cj4*r02*x14487))+(((-1.0)*sj2*x14497)));
evalcond[6]=((((-1.0)*x14481*x14485))+(((-1.0)*x14479*x14481))+((r02*x14490))+(((-1.0)*px))+((x14479*x14486))+(((-1.0)*x14483*x14496))+((x14485*x14486))+x14496+((x14476*x14484))+(((0.37429)*x14492))+(((-1.0)*sj2*x14493)));
evalcond[7]=(((x14482*x14486))+(((0.069)*x14495))+(((-1.0)*x14481*x14488))+(((-1.0)*x14481*x14482))+((x14486*x14488))+((r12*x14490))+((x14475*x14484))+(((-1.0)*py))+(((-1.0)*x14483*x14493))+x14493+(((0.37429)*x14480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x14507=IKPowWithIntegerCheck(cj1,-1);
if(!x14507.valid){
continue;
}
IkReal x14499=x14507.value;
IkReal x14500=(cj6*r11);
IkReal x14501=(cj1*sj6);
IkReal x14502=(cj5*r12);
IkReal x14503=(cj5*sj4);
IkReal x14504=(r10*sj6);
IkReal x14505=((1.0)*sj5);
IkReal x14506=(sj1*sj2*sj5);
CheckValue<IkReal> x14508=IKPowWithIntegerCheck(cj2,-1);
if(!x14508.valid){
continue;
}
if( IKabs((x14499*(((((-1.0)*x14500*x14505))+(((-1.0)*x14504*x14505))+x14502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14499*(x14508.value)*((((cj1*r12*sj4*sj5))+((cj1*x14500*x14503))+(((-1.0)*cj1*cj4*cj6*r10))+((x14500*x14506))+((cj4*r11*x14501))+((x14504*x14506))+(((-1.0)*sj1*sj2*x14502))+((r10*x14501*x14503)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14499*(((((-1.0)*x14500*x14505))+(((-1.0)*x14504*x14505))+x14502))))+IKsqr((x14499*(x14508.value)*((((cj1*r12*sj4*sj5))+((cj1*x14500*x14503))+(((-1.0)*cj1*cj4*cj6*r10))+((x14500*x14506))+((cj4*r11*x14501))+((x14504*x14506))+(((-1.0)*sj1*sj2*x14502))+((r10*x14501*x14503))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x14499*(((((-1.0)*x14500*x14505))+(((-1.0)*x14504*x14505))+x14502))), (x14499*(x14508.value)*((((cj1*r12*sj4*sj5))+((cj1*x14500*x14503))+(((-1.0)*cj1*cj4*cj6*r10))+((x14500*x14506))+((cj4*r11*x14501))+((x14504*x14506))+(((-1.0)*sj1*sj2*x14502))+((r10*x14501*x14503))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14509=IKsin(j0);
IkReal x14510=IKcos(j0);
IkReal x14511=((1.0)*cj5);
IkReal x14512=(cj6*sj4);
IkReal x14513=(r00*sj6);
IkReal x14514=(cj5*r12);
IkReal x14515=((0.37429)*sj5);
IkReal x14516=(r10*sj6);
IkReal x14517=(cj2*sj1);
IkReal x14518=((0.36442)*cj1);
IkReal x14519=(cj6*r01);
IkReal x14520=((0.01)*cj5);
IkReal x14521=((1.0)*sj5);
IkReal x14522=(cj6*r11);
IkReal x14523=(sj4*sj6);
IkReal x14524=((0.01)*sj5);
IkReal x14525=(cj4*cj6);
IkReal x14526=(cj5*r02);
IkReal x14527=((0.069)*x14509);
IkReal x14528=((1.0)*x14510);
IkReal x14529=(sj2*x14510);
IkReal x14530=((0.069)*x14510);
IkReal x14531=((1.0)*x14509);
IkReal x14532=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*cj1*x14528))+(((-1.0)*x14519*x14521))+(((-1.0)*x14513*x14521))+x14526);
evalcond[1]=((((-1.0)*cj1*x14531))+(((-1.0)*x14521*x14522))+x14514+(((-1.0)*x14516*x14521)));
evalcond[2]=((((-1.0)*r11*x14532))+((cj2*x14510))+(((-1.0)*r11*x14511*x14512))+((sj1*sj2*x14509))+(((-1.0)*r12*sj4*x14521))+((r10*x14525))+(((-1.0)*sj4*x14511*x14516)));
evalcond[3]=((((-1.0)*r01*x14532))+((r00*x14525))+(((-1.0)*r01*x14511*x14512))+((sj1*x14529))+(((-1.0)*r02*sj4*x14521))+(((-1.0)*cj2*x14531))+(((-1.0)*sj4*x14511*x14513)));
evalcond[4]=((((-1.0)*r10*x14512))+(((-1.0)*cj4*x14511*x14522))+(((-1.0)*cj4*x14511*x14516))+(((-1.0)*cj4*r12*x14521))+((r11*x14523))+(((-1.0)*x14517*x14531))+x14529);
evalcond[5]=((((-1.0)*r00*x14512))+(((-1.0)*x14517*x14528))+(((-1.0)*cj4*r02*x14521))+((r01*x14523))+(((-1.0)*sj2*x14531))+(((-1.0)*cj4*x14511*x14519))+(((-1.0)*cj4*x14511*x14513)));
evalcond[6]=((((-1.0)*x14515*x14519))+((x14519*x14520))+(((-1.0)*x14513*x14515))+(((-1.0)*x14517*x14530))+(((-1.0)*px))+(((0.37429)*x14526))+x14530+((r02*x14524))+((x14513*x14520))+(((-1.0)*sj2*x14527))+((x14510*x14518)));
evalcond[7]=((((-1.0)*x14515*x14516))+(((0.069)*x14529))+((x14520*x14522))+(((-1.0)*x14517*x14527))+((x14509*x14518))+((r12*x14524))+(((-1.0)*py))+x14527+(((0.37429)*x14514))+((x14516*x14520))+(((-1.0)*x14515*x14522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14533=((1.0)*cj6*sj5);
IkReal x14534=((1.0)*sj5*sj6);
CheckValue<IkReal> x14535=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14535.valid){
continue;
}
CheckValue<IkReal> x14536 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x14534))+(((-1.0)*r11*x14533)))),((((-1.0)*r00*x14534))+(((-1.0)*r01*x14533))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14536.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14535.value)))+(x14536.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14537=IKsin(j0);
IkReal x14538=IKcos(j0);
IkReal x14539=((1.0)*cj5);
IkReal x14540=(cj6*sj4);
IkReal x14541=(r00*sj6);
IkReal x14542=(cj5*r12);
IkReal x14543=((0.37429)*sj5);
IkReal x14544=(r10*sj6);
IkReal x14545=(cj2*sj1);
IkReal x14546=((0.36442)*cj1);
IkReal x14547=(cj6*r01);
IkReal x14548=((0.01)*cj5);
IkReal x14549=((1.0)*sj5);
IkReal x14550=(cj6*r11);
IkReal x14551=(sj4*sj6);
IkReal x14552=((0.01)*sj5);
IkReal x14553=(cj4*cj6);
IkReal x14554=(cj5*r02);
IkReal x14555=((0.069)*x14537);
IkReal x14556=((1.0)*x14538);
IkReal x14557=(sj2*x14538);
IkReal x14558=((0.069)*x14538);
IkReal x14559=((1.0)*x14537);
IkReal x14560=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*cj1*x14556))+(((-1.0)*x14547*x14549))+x14554+(((-1.0)*x14541*x14549)));
evalcond[1]=((((-1.0)*cj1*x14559))+x14542+(((-1.0)*x14549*x14550))+(((-1.0)*x14544*x14549)));
evalcond[2]=((((-1.0)*r12*sj4*x14549))+((sj1*sj2*x14537))+(((-1.0)*r11*x14539*x14540))+((cj2*x14538))+(((-1.0)*r11*x14560))+((r10*x14553))+(((-1.0)*sj4*x14539*x14544)));
evalcond[3]=((((-1.0)*r01*x14539*x14540))+(((-1.0)*r02*sj4*x14549))+(((-1.0)*cj2*x14559))+(((-1.0)*r01*x14560))+((sj1*x14557))+(((-1.0)*sj4*x14539*x14541))+((r00*x14553)));
evalcond[4]=((((-1.0)*x14545*x14559))+(((-1.0)*cj4*x14539*x14550))+(((-1.0)*cj4*r12*x14549))+x14557+(((-1.0)*cj4*x14539*x14544))+(((-1.0)*r10*x14540))+((r11*x14551)));
evalcond[5]=((((-1.0)*x14545*x14556))+(((-1.0)*r00*x14540))+(((-1.0)*cj4*x14539*x14541))+(((-1.0)*cj4*x14539*x14547))+(((-1.0)*cj4*r02*x14549))+((r01*x14551))+(((-1.0)*sj2*x14559)));
evalcond[6]=((((-1.0)*x14545*x14558))+((x14541*x14548))+((x14538*x14546))+(((0.37429)*x14554))+(((-1.0)*x14543*x14547))+((r02*x14552))+(((-1.0)*px))+x14558+((x14547*x14548))+(((-1.0)*x14541*x14543))+(((-1.0)*sj2*x14555)));
evalcond[7]=((((0.37429)*x14542))+(((-1.0)*x14545*x14555))+(((0.069)*x14557))+(((-1.0)*x14543*x14544))+(((-1.0)*py))+x14555+((r12*x14552))+((x14544*x14548))+((x14548*x14550))+(((-1.0)*x14543*x14550))+((x14537*x14546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14561=((1.0)*cj6*sj5);
IkReal x14562=((1.0)*sj5*sj6);
CheckValue<IkReal> x14563=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14563.valid){
continue;
}
CheckValue<IkReal> x14564 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14562))+((cj5*r12))+(((-1.0)*r11*x14561)))),((((-1.0)*r00*x14562))+(((-1.0)*r01*x14561))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14564.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14563.value)))+(x14564.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x14565=IKcos(j0);
IkReal x14566=IKsin(j0);
IkReal x14567=((0.01)*cj5);
IkReal x14568=(cj6*r11);
IkReal x14569=(cj5*r12);
IkReal x14570=(r10*sj6);
IkReal x14571=((0.37429)*sj5);
IkReal x14572=(r00*sj6);
IkReal x14573=((1.0)*sj5);
IkReal x14574=(cj6*r01);
IkReal x14575=(cj5*r02);
IkReal x14576=(cj2*sj1);
IkReal x14577=((0.01)*sj5);
IkReal x14578=(cj1*x14566);
IkReal x14579=((0.069)*x14566);
IkReal x14580=((0.069)*x14565);
IkReal x14581=(cj1*x14565);
evalcond[0]=((((-1.0)*x14573*x14574))+(((-1.0)*x14581))+(((-1.0)*x14572*x14573))+x14575);
evalcond[1]=((((-1.0)*x14570*x14573))+x14569+(((-1.0)*x14568*x14573))+(((-1.0)*x14578)));
evalcond[2]=((((-1.0)*x14571*x14574))+(((-1.0)*x14571*x14572))+(((0.36442)*x14581))+(((0.37429)*x14575))+((r02*x14577))+((x14567*x14574))+((x14567*x14572))+(((-1.0)*x14576*x14580))+(((-1.0)*px))+x14580+(((-1.0)*sj2*x14579)));
evalcond[3]=((((0.36442)*x14578))+(((-1.0)*x14570*x14571))+(((0.37429)*x14569))+(((-1.0)*x14576*x14579))+((x14567*x14570))+((x14567*x14568))+(((-1.0)*py))+x14579+(((-1.0)*x14568*x14571))+((r12*x14577))+((sj2*x14580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14582=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x14582;
j4eval[1]=IKsign(x14582);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14583=((1.0)*sj5);
IkReal x14584=((((-1.0)*r00*sj6*x14583))+((cj5*r02))+(((-1.0)*cj6*r01*x14583)));
j4eval[0]=x14584;
j4eval[1]=IKsign(x14584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14585=cj5*cj5;
IkReal x14586=cj6*cj6;
IkReal x14587=r22*r22;
IkReal x14588=r21*r21;
IkReal x14589=r20*r20;
IkReal x14590=(cj6*r21);
IkReal x14591=(r20*sj6);
IkReal x14592=(cj1*cj2);
IkReal x14593=(r22*sj5);
IkReal x14594=(cj6*r20);
IkReal x14595=((2.0)*cj5);
IkReal x14596=(cj1*sj2);
IkReal x14597=((1.0)*x14588);
IkReal x14598=((1.0)*x14589);
IkReal x14599=((1.0)*r21*sj6);
IkReal x14600=((1.0)*cj5*x14596);
IkReal x14601=(x14585*x14586);
IkReal x14602=((((-1.0)*x14591*x14593*x14595))+(((-1.0)*x14590*x14593*x14595))+(((2.0)*x14590*x14591))+(((-1.0)*x14597))+((x14589*x14601))+(((-1.0)*x14587))+(((-2.0)*x14585*x14590*x14591))+((x14585*x14587))+((x14586*x14588))+(((-1.0)*x14585*x14598))+(((-1.0)*x14586*x14598))+(((-1.0)*x14597*x14601)));
j4eval[0]=x14602;
j4eval[1]=((IKabs(((((-1.0)*x14596*x14599))+((x14594*x14596))+((x14592*x14593))+((cj5*x14591*x14592))+((cj5*x14590*x14592)))))+(IKabs(((((-1.0)*x14591*x14600))+(((-1.0)*x14592*x14599))+(((-1.0)*x14590*x14600))+(((-1.0)*x14593*x14596))+((x14592*x14594))))));
j4eval[2]=IKsign(x14602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x14603=((0.069)*cj0);
IkReal x14604=((0.01)*cj5);
IkReal x14605=(cj6*r11);
IkReal x14606=(r10*sj6);
IkReal x14607=((0.37429)*sj5);
IkReal x14608=(r00*sj6);
IkReal x14609=(r20*sj6);
IkReal x14610=((0.069)*sj0);
IkReal x14611=((1.0)*sj5);
IkReal x14612=((0.01)*sj5);
IkReal x14613=(cj6*r01);
IkReal x14614=((0.37429)*cj5);
IkReal x14615=(cj6*r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-1.0)*pz))+(((-1.0)*x14607*x14609))+(((-1.0)*x14607*x14615))+((r22*x14614))+((r22*x14612))+((x14604*x14615))+((x14604*x14609)));
evalcond[2]=(((r02*x14612))+((r02*x14614))+(((-1.0)*sj2*x14610))+(((-1.0)*cj2*x14603))+(((-1.0)*px))+(((-1.0)*x14607*x14608))+(((-1.0)*x14607*x14613))+x14603+((x14604*x14613))+((x14604*x14608)));
evalcond[3]=((((-1.0)*cj2*x14610))+(((-1.0)*py))+(((-1.0)*x14606*x14607))+x14610+(((-1.0)*x14605*x14607))+((sj2*x14603))+((r12*x14614))+((r12*x14612))+((x14604*x14606))+((x14604*x14605)));
evalcond[4]=((1.0)+((cj5*r22))+(((-1.0)*x14609*x14611))+(((-1.0)*x14611*x14615)));
evalcond[5]=((((-1.0)*x14608*x14611))+((cj5*r02))+(((-1.0)*x14611*x14613)));
evalcond[6]=(((cj5*r12))+(((-1.0)*x14606*x14611))+(((-1.0)*x14605*x14611)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14616=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14616;
j4eval[1]=IKsign(x14616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14617=((1.0)*sj5);
IkReal x14618=(((cj5*r12))+(((-1.0)*r10*sj6*x14617))+(((-1.0)*cj6*r11*x14617)));
j4eval[0]=x14618;
j4eval[1]=IKsign(x14618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14619=cj6*cj6;
IkReal x14620=cj5*cj5;
IkReal x14621=(cj5*sj5);
IkReal x14622=(cj6*r21);
IkReal x14623=((1.0)*r11);
IkReal x14624=(r10*r20);
IkReal x14625=(r10*sj6);
IkReal x14626=(r12*r22);
IkReal x14627=(r21*x14619);
IkReal x14628=(cj6*r20*sj6);
IkReal x14629=(r11*x14620);
IkReal x14630=((1.0)*x14620);
IkReal x14631=(((x14620*x14624))+(((-1.0)*x14626*x14630))+((r22*x14621*x14625))+((x14620*x14622*x14625))+((r11*r21))+((r12*r20*sj6*x14621))+((x14619*x14624))+(((-1.0)*x14619*x14624*x14630))+((cj6*r11*r22*x14621))+((x14628*x14629))+(((-1.0)*x14623*x14628))+(((-1.0)*x14623*x14627))+((r12*x14621*x14622))+x14626+(((-1.0)*x14622*x14625))+((x14627*x14629)));
j4eval[0]=x14631;
j4eval[1]=IKsign(x14631);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14632=cj6*cj6;
IkReal x14633=cj5*cj5;
IkReal x14634=(r22*sj5);
IkReal x14635=(cj0*sj2);
IkReal x14636=(r12*r22);
IkReal x14637=(cj5*sj6);
IkReal x14638=((1.0)*r11);
IkReal x14639=(cj6*r21);
IkReal x14640=(cj6*r20);
IkReal x14641=(r12*sj5);
IkReal x14642=((1.0)*sj6);
IkReal x14643=((1.0)*cj2*sj0);
IkReal x14644=((1.0)*x14633);
IkReal x14645=(r21*x14632);
IkReal x14646=(r10*x14633);
IkReal x14647=(r11*x14633);
IkReal x14648=(r10*r20*x14632);
CheckValue<IkReal> x14649=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14636*x14644))+((r10*x14634*x14637))+((cj5*x14639*x14641))+((r11*r21))+((cj5*cj6*r11*x14634))+(((-1.0)*sj6*x14638*x14640))+(((-1.0)*r10*x14639*x14642))+((sj6*x14640*x14647))+((x14645*x14647))+x14648+x14636+((r20*x14637*x14641))+((r20*x14646))+(((-1.0)*x14638*x14645))+(((-1.0)*x14644*x14648))+((sj6*x14639*x14646)))),-1);
if(!x14649.valid){
continue;
}
CheckValue<IkReal> x14650 = IKatan2WithCheck(IkReal((((cj2*r21*sj0*sj6))+((x14635*x14640))+(((-1.0)*x14640*x14643))+(((-1.0)*r21*x14635*x14642)))),((((-1.0)*r20*x14637*x14643))+(((-1.0)*cj5*x14639*x14643))+((x14634*x14635))+((r20*x14635*x14637))+((cj5*x14635*x14639))+(((-1.0)*x14634*x14643))),IKFAST_ATAN2_MAGTHRESH);
if(!x14650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14649.value)))+(x14650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14651=IKsin(j4);
IkReal x14652=IKcos(j4);
IkReal x14653=(cj0*sj2);
IkReal x14654=(cj5*cj6);
IkReal x14655=(cj0*cj2);
IkReal x14656=(r11*sj6);
IkReal x14657=(cj6*r20);
IkReal x14658=(cj5*sj6);
IkReal x14659=(cj6*r10);
IkReal x14660=(cj6*r00);
IkReal x14661=((1.0)*sj0);
IkReal x14662=(cj2*x14661);
IkReal x14663=((1.0)*x14652);
IkReal x14664=((1.0)*x14651);
IkReal x14665=(sj6*x14651);
IkReal x14666=(sj5*x14664);
evalcond[0]=((((-1.0)*r22*x14666))+(((-1.0)*r20*x14658*x14664))+(((-1.0)*r21*sj6*x14663))+((x14652*x14657))+(((-1.0)*r21*x14654*x14664)));
evalcond[1]=(((r21*x14665))+(((-1.0)*r20*x14658*x14663))+(((-1.0)*x14657*x14664))+(((-1.0)*r22*sj5*x14663))+(((-1.0)*r21*x14654*x14663)));
evalcond[2]=((((-1.0)*x14656*x14663))+(((-1.0)*r11*x14654*x14664))+(((-1.0)*r12*x14666))+((sj0*sj2))+(((-1.0)*r10*x14658*x14664))+x14655+((x14652*x14659)));
evalcond[3]=((((-1.0)*r00*x14658*x14664))+(((-1.0)*r01*x14654*x14664))+((x14652*x14660))+(((-1.0)*r01*sj6*x14663))+x14653+(((-1.0)*r02*x14666))+(((-1.0)*x14662)));
evalcond[4]=((((-1.0)*r11*x14654*x14663))+(((-1.0)*r12*sj5*x14663))+(((-1.0)*x14659*x14664))+(((-1.0)*r10*x14658*x14663))+x14653+((x14651*x14656))+(((-1.0)*x14662)));
evalcond[5]=((((-1.0)*sj2*x14661))+(((-1.0)*x14660*x14664))+(((-1.0)*r00*x14658*x14663))+(((-1.0)*x14655))+(((-1.0)*r01*x14654*x14663))+((r01*x14665))+(((-1.0)*r02*sj5*x14663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14667=(cj0*sj2);
IkReal x14668=(cj6*r20);
IkReal x14669=(r22*sj5);
IkReal x14670=((1.0)*sj5);
IkReal x14671=(r21*sj6);
IkReal x14672=((1.0)*cj2*sj0);
IkReal x14673=(cj5*cj6*r21);
IkReal x14674=(cj5*r20*sj6);
CheckValue<IkReal> x14675=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x14670))+(((-1.0)*cj6*r11*x14670)))),-1);
if(!x14675.valid){
continue;
}
CheckValue<IkReal> x14676 = IKatan2WithCheck(IkReal(((((-1.0)*x14668*x14672))+((cj2*sj0*x14671))+((x14667*x14668))+(((-1.0)*x14667*x14671)))),((((-1.0)*x14669*x14672))+(((-1.0)*x14672*x14673))+(((-1.0)*x14672*x14674))+((x14667*x14669))+((x14667*x14673))+((x14667*x14674))),IKFAST_ATAN2_MAGTHRESH);
if(!x14676.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14675.value)))+(x14676.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14677=IKsin(j4);
IkReal x14678=IKcos(j4);
IkReal x14679=(cj0*sj2);
IkReal x14680=(cj5*cj6);
IkReal x14681=(cj0*cj2);
IkReal x14682=(r11*sj6);
IkReal x14683=(cj6*r20);
IkReal x14684=(cj5*sj6);
IkReal x14685=(cj6*r10);
IkReal x14686=(cj6*r00);
IkReal x14687=((1.0)*sj0);
IkReal x14688=(cj2*x14687);
IkReal x14689=((1.0)*x14678);
IkReal x14690=((1.0)*x14677);
IkReal x14691=(sj6*x14677);
IkReal x14692=(sj5*x14690);
evalcond[0]=(((x14678*x14683))+(((-1.0)*r21*sj6*x14689))+(((-1.0)*r21*x14680*x14690))+(((-1.0)*r22*x14692))+(((-1.0)*r20*x14684*x14690)));
evalcond[1]=((((-1.0)*x14683*x14690))+(((-1.0)*r21*x14680*x14689))+(((-1.0)*r20*x14684*x14689))+(((-1.0)*r22*sj5*x14689))+((r21*x14691)));
evalcond[2]=((((-1.0)*r10*x14684*x14690))+((x14678*x14685))+(((-1.0)*r11*x14680*x14690))+(((-1.0)*x14682*x14689))+((sj0*sj2))+x14681+(((-1.0)*r12*x14692)));
evalcond[3]=(((x14678*x14686))+(((-1.0)*r02*x14692))+(((-1.0)*x14688))+x14679+(((-1.0)*r00*x14684*x14690))+(((-1.0)*r01*x14680*x14690))+(((-1.0)*r01*sj6*x14689)));
evalcond[4]=((((-1.0)*r10*x14684*x14689))+(((-1.0)*r11*x14680*x14689))+(((-1.0)*r12*sj5*x14689))+(((-1.0)*x14685*x14690))+(((-1.0)*x14688))+((x14677*x14682))+x14679);
evalcond[5]=(((r01*x14691))+(((-1.0)*r02*sj5*x14689))+(((-1.0)*x14686*x14690))+(((-1.0)*sj2*x14687))+(((-1.0)*r00*x14684*x14689))+(((-1.0)*r01*x14680*x14689))+(((-1.0)*x14681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14693=(sj0*sj2);
IkReal x14694=(cj0*cj2);
IkReal x14695=(cj6*r20);
IkReal x14696=(r22*sj5);
IkReal x14697=((1.0)*r21*sj6);
IkReal x14698=(cj5*cj6*r21);
IkReal x14699=(cj5*r20*sj6);
CheckValue<IkReal> x14700 = IKatan2WithCheck(IkReal(((((-1.0)*x14694*x14697))+((x14693*x14695))+((x14694*x14695))+(((-1.0)*x14693*x14697)))),(((x14693*x14696))+((x14693*x14698))+((x14693*x14699))+((x14694*x14698))+((x14694*x14699))+((x14694*x14696))),IKFAST_ATAN2_MAGTHRESH);
if(!x14700.valid){
continue;
}
CheckValue<IkReal> x14701=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14701.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14700.value)+(((1.5707963267949)*(x14701.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14702=IKsin(j4);
IkReal x14703=IKcos(j4);
IkReal x14704=(cj0*sj2);
IkReal x14705=(cj5*cj6);
IkReal x14706=(cj0*cj2);
IkReal x14707=(r11*sj6);
IkReal x14708=(cj6*r20);
IkReal x14709=(cj5*sj6);
IkReal x14710=(cj6*r10);
IkReal x14711=(cj6*r00);
IkReal x14712=((1.0)*sj0);
IkReal x14713=(cj2*x14712);
IkReal x14714=((1.0)*x14703);
IkReal x14715=((1.0)*x14702);
IkReal x14716=(sj6*x14702);
IkReal x14717=(sj5*x14715);
evalcond[0]=((((-1.0)*r22*x14717))+(((-1.0)*r20*x14709*x14715))+(((-1.0)*r21*x14705*x14715))+(((-1.0)*r21*sj6*x14714))+((x14703*x14708)));
evalcond[1]=(((r21*x14716))+(((-1.0)*r22*sj5*x14714))+(((-1.0)*r20*x14709*x14714))+(((-1.0)*r21*x14705*x14714))+(((-1.0)*x14708*x14715)));
evalcond[2]=((((-1.0)*r10*x14709*x14715))+((x14703*x14710))+(((-1.0)*x14707*x14714))+((sj0*sj2))+x14706+(((-1.0)*r11*x14705*x14715))+(((-1.0)*r12*x14717)));
evalcond[3]=((((-1.0)*r00*x14709*x14715))+((x14703*x14711))+(((-1.0)*r02*x14717))+(((-1.0)*r01*x14705*x14715))+(((-1.0)*r01*sj6*x14714))+(((-1.0)*x14713))+x14704);
evalcond[4]=((((-1.0)*r10*x14709*x14714))+(((-1.0)*r12*sj5*x14714))+(((-1.0)*x14713))+x14704+(((-1.0)*x14710*x14715))+(((-1.0)*r11*x14705*x14714))+((x14702*x14707)));
evalcond[5]=((((-1.0)*r02*sj5*x14714))+(((-1.0)*x14706))+(((-1.0)*r00*x14709*x14714))+(((-1.0)*r01*x14705*x14714))+((r01*x14716))+(((-1.0)*x14711*x14715))+(((-1.0)*sj2*x14712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14718=((0.069)*cj0);
IkReal x14719=((0.01)*cj5);
IkReal x14720=(cj6*r11);
IkReal x14721=(r10*sj6);
IkReal x14722=((0.37429)*sj5);
IkReal x14723=(r00*sj6);
IkReal x14724=(r20*sj6);
IkReal x14725=((0.069)*sj0);
IkReal x14726=((1.0)*sj5);
IkReal x14727=((0.01)*sj5);
IkReal x14728=(cj6*r01);
IkReal x14729=((0.37429)*cj5);
IkReal x14730=(cj6*r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+(((-1.0)*x14722*x14730))+(((-1.0)*x14722*x14724))+((x14719*x14724))+((x14719*x14730))+((r22*x14729))+((r22*x14727))+(((-1.0)*pz)));
evalcond[2]=(((cj2*x14718))+(((-1.0)*sj2*x14725))+(((-1.0)*x14722*x14728))+(((-1.0)*x14722*x14723))+((x14719*x14723))+((x14719*x14728))+((r02*x14729))+((r02*x14727))+(((-1.0)*px))+x14718);
evalcond[3]=(((x14719*x14721))+((x14719*x14720))+((sj2*x14718))+(((-1.0)*py))+x14725+(((-1.0)*x14721*x14722))+((cj2*x14725))+(((-1.0)*x14720*x14722))+((r12*x14729))+((r12*x14727)));
evalcond[4]=((-1.0)+((cj5*r22))+(((-1.0)*x14726*x14730))+(((-1.0)*x14724*x14726)));
evalcond[5]=((((-1.0)*x14723*x14726))+(((-1.0)*x14726*x14728))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*x14721*x14726))+(((-1.0)*x14720*x14726)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14731=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14731;
j4eval[1]=IKsign(x14731);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14732=cj6*cj6;
IkReal x14733=cj5*cj5;
IkReal x14734=(cj5*sj5);
IkReal x14735=(cj6*r21);
IkReal x14736=((1.0)*r11);
IkReal x14737=(r10*r20);
IkReal x14738=(r10*sj6);
IkReal x14739=(r12*r22);
IkReal x14740=(r21*x14732);
IkReal x14741=(cj6*r20*sj6);
IkReal x14742=(r11*x14733);
IkReal x14743=((1.0)*x14733);
IkReal x14744=((((-1.0)*x14732*x14737*x14743))+(((-1.0)*x14736*x14741))+(((-1.0)*x14736*x14740))+((x14733*x14735*x14738))+((r11*r21))+((r12*r20*sj6*x14734))+((x14733*x14737))+(((-1.0)*x14739*x14743))+((r22*x14734*x14738))+((x14732*x14737))+((x14741*x14742))+((r12*x14734*x14735))+(((-1.0)*x14735*x14738))+x14739+((cj6*r11*r22*x14734))+((x14740*x14742)));
j4eval[0]=x14744;
j4eval[1]=IKsign(x14744);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14745=cj5*cj5;
IkReal x14746=cj6*cj6;
IkReal x14747=(r00*r20);
IkReal x14748=(r02*r22);
IkReal x14749=(cj5*sj5);
IkReal x14750=(cj6*r21);
IkReal x14751=(r00*sj6);
IkReal x14752=(r20*sj6);
IkReal x14753=(cj6*r01);
IkReal x14754=((1.0)*x14745);
IkReal x14755=(r01*r21*x14746);
IkReal x14756=(((x14745*x14755))+((x14745*x14752*x14753))+(((-1.0)*x14746*x14747*x14754))+((r22*x14749*x14751))+((r22*x14749*x14753))+((r01*r21))+(((-1.0)*x14752*x14753))+((x14745*x14747))+((x14745*x14750*x14751))+((x14746*x14747))+(((-1.0)*x14750*x14751))+x14748+((r02*x14749*x14752))+((r02*x14749*x14750))+(((-1.0)*x14748*x14754))+(((-1.0)*x14755)));
j4eval[0]=x14756;
j4eval[1]=IKsign(x14756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14757=cj5*cj5;
IkReal x14758=cj6*cj6;
IkReal x14759=(cj6*r21);
IkReal x14760=(cj6*r20);
IkReal x14761=(cj0*cj2);
IkReal x14762=(r20*sj6);
IkReal x14763=((1.0)*sj6);
IkReal x14764=(sj0*sj2);
IkReal x14765=((1.0)*cj5);
IkReal x14766=(r02*r22);
IkReal x14767=(r22*sj5);
IkReal x14768=(r00*sj6);
IkReal x14769=(cj5*r02*sj5);
IkReal x14770=(r01*x14757);
IkReal x14771=(r21*x14758);
IkReal x14772=(r00*r20*x14757);
CheckValue<IkReal> x14773 = IKatan2WithCheck(IkReal((((r21*sj6*x14764))+((x14760*x14761))+(((-1.0)*x14760*x14764))+(((-1.0)*r21*x14761*x14763)))),((((-1.0)*x14759*x14764*x14765))+((x14761*x14767))+((cj5*x14759*x14761))+(((-1.0)*x14762*x14764*x14765))+(((-1.0)*x14764*x14767))+((cj5*x14761*x14762))),IKFAST_ATAN2_MAGTHRESH);
if(!x14773.valid){
continue;
}
CheckValue<IkReal> x14774=IKPowWithIntegerCheck(IKsign((((r00*r20*x14758))+((cj5*x14767*x14768))+((x14762*x14769))+((x14757*x14759*x14768))+((x14770*x14771))+((cj5*cj6*r01*x14767))+((r01*r21))+(((-1.0)*r01*x14771))+(((-1.0)*r00*x14759*x14763))+((sj6*x14760*x14770))+(((-1.0)*r01*x14760*x14763))+(((-1.0)*x14758*x14772))+x14766+x14772+((x14759*x14769))+(((-1.0)*x14757*x14766)))),-1);
if(!x14774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14773.value)+(((1.5707963267949)*(x14774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14775=IKsin(j4);
IkReal x14776=IKcos(j4);
IkReal x14777=(cj0*cj2);
IkReal x14778=(cj5*cj6);
IkReal x14779=(r11*sj6);
IkReal x14780=(cj6*r20);
IkReal x14781=(cj5*sj6);
IkReal x14782=(cj6*r10);
IkReal x14783=(r01*sj6);
IkReal x14784=(cj0*sj2);
IkReal x14785=(r21*sj6);
IkReal x14786=(cj6*r00);
IkReal x14787=((1.0)*sj0);
IkReal x14788=(sj2*x14787);
IkReal x14789=((1.0)*x14776);
IkReal x14790=((1.0)*x14775);
IkReal x14791=(sj5*x14790);
evalcond[0]=((((-1.0)*x14785*x14789))+(((-1.0)*r21*x14778*x14790))+(((-1.0)*r20*x14781*x14790))+(((-1.0)*r22*x14791))+((x14776*x14780)));
evalcond[1]=((((-1.0)*x14780*x14790))+(((-1.0)*r21*x14778*x14789))+(((-1.0)*r20*x14781*x14789))+(((-1.0)*r22*sj5*x14789))+((x14775*x14785)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r11*x14778*x14789))+(((-1.0)*x14782*x14790))+(((-1.0)*r10*x14781*x14789))+((x14775*x14779))+x14784+(((-1.0)*r12*sj5*x14789)));
evalcond[3]=((((-1.0)*x14779*x14789))+(((-1.0)*r11*x14778*x14790))+(((-1.0)*r12*x14791))+(((-1.0)*r10*x14781*x14790))+x14777+((x14776*x14782))+(((-1.0)*x14788)));
evalcond[4]=((((-1.0)*r00*x14781*x14789))+(((-1.0)*r02*sj5*x14789))+(((-1.0)*x14786*x14790))+x14777+(((-1.0)*r01*x14778*x14789))+((x14775*x14783))+(((-1.0)*x14788)));
evalcond[5]=((((-1.0)*r02*x14791))+(((-1.0)*x14784))+(((-1.0)*x14783*x14789))+(((-1.0)*cj2*x14787))+(((-1.0)*r01*x14778*x14790))+((x14776*x14786))+(((-1.0)*r00*x14781*x14790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14792=cj6*cj6;
IkReal x14793=cj5*cj5;
IkReal x14794=((1.0)*r11);
IkReal x14795=(r22*sj5);
IkReal x14796=(cj0*sj2);
IkReal x14797=(cj5*sj6);
IkReal x14798=(cj6*r20);
IkReal x14799=(cj2*sj0);
IkReal x14800=(r21*sj6);
IkReal x14801=(cj6*r10);
IkReal x14802=(r12*r22);
IkReal x14803=(r12*sj5);
IkReal x14804=(r21*x14792);
IkReal x14805=(r20*x14799);
IkReal x14806=(cj5*cj6*r21);
IkReal x14807=(r11*x14793);
IkReal x14808=(r10*r20*x14793);
CheckValue<IkReal> x14809 = IKatan2WithCheck(IkReal((((x14796*x14798))+((x14798*x14799))+(((-1.0)*x14799*x14800))+(((-1.0)*x14796*x14800)))),(((x14796*x14806))+((x14797*x14805))+((r20*x14796*x14797))+((x14799*x14806))+((x14795*x14799))+((x14795*x14796))),IKFAST_ATAN2_MAGTHRESH);
if(!x14809.valid){
continue;
}
CheckValue<IkReal> x14810=IKPowWithIntegerCheck(IKsign((((x14803*x14806))+(((-1.0)*sj6*x14794*x14798))+(((-1.0)*x14800*x14801))+((r11*r21))+x14802+x14808+((r10*r20*x14792))+(((-1.0)*x14794*x14804))+((r10*x14795*x14797))+(((-1.0)*x14793*x14802))+((sj6*x14798*x14807))+((r20*x14797*x14803))+((x14804*x14807))+((cj5*cj6*r11*x14795))+(((-1.0)*x14792*x14808))+((x14793*x14800*x14801)))),-1);
if(!x14810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14809.value)+(((1.5707963267949)*(x14810.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14811=IKsin(j4);
IkReal x14812=IKcos(j4);
IkReal x14813=(cj0*cj2);
IkReal x14814=(cj5*cj6);
IkReal x14815=(r11*sj6);
IkReal x14816=(cj6*r20);
IkReal x14817=(cj5*sj6);
IkReal x14818=(cj6*r10);
IkReal x14819=(r01*sj6);
IkReal x14820=(cj0*sj2);
IkReal x14821=(r21*sj6);
IkReal x14822=(cj6*r00);
IkReal x14823=((1.0)*sj0);
IkReal x14824=(sj2*x14823);
IkReal x14825=((1.0)*x14812);
IkReal x14826=((1.0)*x14811);
IkReal x14827=(sj5*x14826);
evalcond[0]=((((-1.0)*x14821*x14825))+(((-1.0)*r22*x14827))+(((-1.0)*r21*x14814*x14826))+(((-1.0)*r20*x14817*x14826))+((x14812*x14816)));
evalcond[1]=((((-1.0)*x14816*x14826))+(((-1.0)*r21*x14814*x14825))+(((-1.0)*r22*sj5*x14825))+((x14811*x14821))+(((-1.0)*r20*x14817*x14825)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*x14818*x14826))+x14820+(((-1.0)*r11*x14814*x14825))+((x14811*x14815))+(((-1.0)*r12*sj5*x14825))+(((-1.0)*r10*x14817*x14825)));
evalcond[3]=((((-1.0)*x14815*x14825))+x14813+(((-1.0)*x14824))+(((-1.0)*r11*x14814*x14826))+(((-1.0)*r10*x14817*x14826))+(((-1.0)*r12*x14827))+((x14812*x14818)));
evalcond[4]=(x14813+(((-1.0)*x14822*x14826))+(((-1.0)*r02*sj5*x14825))+(((-1.0)*x14824))+((x14811*x14819))+(((-1.0)*r00*x14817*x14825))+(((-1.0)*r01*x14814*x14825)));
evalcond[5]=((((-1.0)*x14819*x14825))+(((-1.0)*cj2*x14823))+(((-1.0)*x14820))+((x14812*x14822))+(((-1.0)*r02*x14827))+(((-1.0)*r00*x14817*x14826))+(((-1.0)*r01*x14814*x14826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14828=(cj0*cj2);
IkReal x14829=(cj6*r20);
IkReal x14830=(r21*sj6);
IkReal x14831=(sj0*sj2);
IkReal x14832=(r22*sj5);
IkReal x14833=(cj5*r20*sj6);
IkReal x14834=(cj5*cj6*r21);
CheckValue<IkReal> x14835=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14835.valid){
continue;
}
CheckValue<IkReal> x14836 = IKatan2WithCheck(IkReal(((((-1.0)*x14829*x14831))+((x14830*x14831))+((x14828*x14829))+(((-1.0)*x14828*x14830)))),((((-1.0)*x14831*x14832))+(((-1.0)*x14831*x14833))+(((-1.0)*x14831*x14834))+((x14828*x14834))+((x14828*x14832))+((x14828*x14833))),IKFAST_ATAN2_MAGTHRESH);
if(!x14836.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14835.value)))+(x14836.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14837=IKsin(j4);
IkReal x14838=IKcos(j4);
IkReal x14839=(cj0*cj2);
IkReal x14840=(cj5*cj6);
IkReal x14841=(r11*sj6);
IkReal x14842=(cj6*r20);
IkReal x14843=(cj5*sj6);
IkReal x14844=(cj6*r10);
IkReal x14845=(r01*sj6);
IkReal x14846=(cj0*sj2);
IkReal x14847=(r21*sj6);
IkReal x14848=(cj6*r00);
IkReal x14849=((1.0)*sj0);
IkReal x14850=(sj2*x14849);
IkReal x14851=((1.0)*x14838);
IkReal x14852=((1.0)*x14837);
IkReal x14853=(sj5*x14852);
evalcond[0]=((((-1.0)*x14847*x14851))+(((-1.0)*r20*x14843*x14852))+((x14838*x14842))+(((-1.0)*r22*x14853))+(((-1.0)*r21*x14840*x14852)));
evalcond[1]=(((x14837*x14847))+(((-1.0)*x14842*x14852))+(((-1.0)*r20*x14843*x14851))+(((-1.0)*r22*sj5*x14851))+(((-1.0)*r21*x14840*x14851)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r10*x14843*x14851))+((x14837*x14841))+(((-1.0)*r12*sj5*x14851))+x14846+(((-1.0)*x14844*x14852))+(((-1.0)*r11*x14840*x14851)));
evalcond[3]=((((-1.0)*r10*x14843*x14852))+x14839+(((-1.0)*x14850))+(((-1.0)*r12*x14853))+((x14838*x14844))+(((-1.0)*x14841*x14851))+(((-1.0)*r11*x14840*x14852)));
evalcond[4]=((((-1.0)*r02*sj5*x14851))+((x14837*x14845))+x14839+(((-1.0)*r00*x14843*x14851))+(((-1.0)*x14848*x14852))+(((-1.0)*x14850))+(((-1.0)*r01*x14840*x14851)));
evalcond[5]=((((-1.0)*x14846))+(((-1.0)*cj2*x14849))+(((-1.0)*r02*x14853))+(((-1.0)*r00*x14843*x14852))+(((-1.0)*x14845*x14851))+((x14838*x14848))+(((-1.0)*r01*x14840*x14852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14854=cj5*cj5;
IkReal x14855=cj6*cj6;
IkReal x14856=r22*r22;
IkReal x14857=r21*r21;
IkReal x14858=r20*r20;
IkReal x14859=(cj6*r21);
IkReal x14860=(r20*sj6);
IkReal x14861=(cj1*cj5);
IkReal x14862=((1.0)*sj2);
IkReal x14863=(cj1*cj2);
IkReal x14864=(cj6*r20);
IkReal x14865=(r22*sj5);
IkReal x14866=(r21*sj6);
IkReal x14867=((2.0)*cj5);
IkReal x14868=((1.0)*x14857);
IkReal x14869=((1.0)*x14858);
IkReal x14870=(x14854*x14855);
CheckValue<IkReal> x14871=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14855*x14869))+((x14854*x14856))+(((2.0)*x14859*x14860))+(((-1.0)*x14868*x14870))+(((-1.0)*x14859*x14865*x14867))+((x14855*x14857))+((x14858*x14870))+(((-2.0)*x14854*x14859*x14860))+(((-1.0)*x14868))+(((-1.0)*x14860*x14865*x14867))+(((-1.0)*x14854*x14869))+(((-1.0)*x14856)))),-1);
if(!x14871.valid){
continue;
}
CheckValue<IkReal> x14872 = IKatan2WithCheck(IkReal(((((-1.0)*x14860*x14861*x14862))+(((-1.0)*x14863*x14866))+(((-1.0)*cj1*x14862*x14865))+((x14863*x14864))+(((-1.0)*x14859*x14861*x14862)))),(((cj2*x14859*x14861))+((cj2*x14860*x14861))+((cj1*sj2*x14864))+(((-1.0)*cj1*x14862*x14866))+((x14863*x14865))),IKFAST_ATAN2_MAGTHRESH);
if(!x14872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14871.value)))+(x14872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14873=IKsin(j4);
IkReal x14874=IKcos(j4);
IkReal x14875=(cj5*cj6);
IkReal x14876=(cj0*sj1);
IkReal x14877=(r11*sj6);
IkReal x14878=(cj6*r20);
IkReal x14879=(cj5*sj6);
IkReal x14880=(cj6*r10);
IkReal x14881=((1.0)*cj2);
IkReal x14882=(r21*sj6);
IkReal x14883=(cj6*r00);
IkReal x14884=(sj0*sj1);
IkReal x14885=(r01*sj6);
IkReal x14886=((1.0)*x14874);
IkReal x14887=((1.0)*x14873);
IkReal x14888=(sj5*x14887);
evalcond[0]=((((-1.0)*r22*x14888))+((cj1*sj2))+((x14874*x14878))+(((-1.0)*r20*x14879*x14887))+(((-1.0)*x14882*x14886))+(((-1.0)*r21*x14875*x14887)));
evalcond[1]=((((-1.0)*x14878*x14887))+((x14873*x14882))+(((-1.0)*r20*x14879*x14886))+(((-1.0)*cj1*x14881))+(((-1.0)*r21*x14875*x14886))+(((-1.0)*r22*sj5*x14886)));
evalcond[2]=((((-1.0)*r11*x14875*x14887))+(((-1.0)*r10*x14879*x14887))+((cj0*cj2))+((x14874*x14880))+(((-1.0)*r12*x14888))+((sj2*x14884))+(((-1.0)*x14877*x14886)));
evalcond[3]=((((-1.0)*r02*x14888))+(((-1.0)*r01*x14875*x14887))+(((-1.0)*x14885*x14886))+((x14874*x14883))+(((-1.0)*sj0*x14881))+((sj2*x14876))+(((-1.0)*r00*x14879*x14887)));
evalcond[4]=((((-1.0)*r11*x14875*x14886))+(((-1.0)*r10*x14879*x14886))+((x14873*x14877))+(((-1.0)*x14880*x14887))+(((-1.0)*r12*sj5*x14886))+(((-1.0)*x14881*x14884))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r01*x14875*x14886))+((x14873*x14885))+(((-1.0)*sj0*sj2))+(((-1.0)*r02*sj5*x14886))+(((-1.0)*x14883*x14887))+(((-1.0)*x14876*x14881))+(((-1.0)*r00*x14879*x14886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14889=(cj6*r21);
IkReal x14890=(r20*sj6);
IkReal x14891=(cj1*sj2);
IkReal x14892=((1.0)*cj6);
IkReal x14893=((1.0)*sj5);
IkReal x14894=(cj0*cj2);
IkReal x14895=(r21*sj6);
IkReal x14896=(sj0*sj1*sj2);
IkReal x14897=((1.0)*cj5*x14894);
IkReal x14898=((1.0)*cj5*x14896);
CheckValue<IkReal> x14899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x14892))+(((-1.0)*r00*sj6*x14893))+((cj5*r02)))),-1);
if(!x14899.valid){
continue;
}
CheckValue<IkReal> x14900 = IKatan2WithCheck(IkReal((((x14895*x14896))+((x14894*x14895))+(((-1.0)*r11*sj6*x14891))+(((-1.0)*r20*x14892*x14894))+(((-1.0)*r20*x14892*x14896))+((cj6*r10*x14891)))),(((r12*sj5*x14891))+(((-1.0)*r22*x14893*x14894))+(((-1.0)*r22*x14893*x14896))+((cj5*cj6*r11*x14891))+(((-1.0)*x14890*x14898))+(((-1.0)*x14890*x14897))+(((-1.0)*x14889*x14898))+(((-1.0)*x14889*x14897))+((cj5*r10*sj6*x14891))),IKFAST_ATAN2_MAGTHRESH);
if(!x14900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14899.value)))+(x14900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14901=IKsin(j4);
IkReal x14902=IKcos(j4);
IkReal x14903=(cj5*cj6);
IkReal x14904=(cj0*sj1);
IkReal x14905=(r11*sj6);
IkReal x14906=(cj6*r20);
IkReal x14907=(cj5*sj6);
IkReal x14908=(cj6*r10);
IkReal x14909=((1.0)*cj2);
IkReal x14910=(r21*sj6);
IkReal x14911=(cj6*r00);
IkReal x14912=(sj0*sj1);
IkReal x14913=(r01*sj6);
IkReal x14914=((1.0)*x14902);
IkReal x14915=((1.0)*x14901);
IkReal x14916=(sj5*x14915);
evalcond[0]=((((-1.0)*r22*x14916))+(((-1.0)*r20*x14907*x14915))+(((-1.0)*x14910*x14914))+(((-1.0)*r21*x14903*x14915))+((x14902*x14906))+((cj1*sj2)));
evalcond[1]=((((-1.0)*r20*x14907*x14914))+(((-1.0)*cj1*x14909))+(((-1.0)*r21*x14903*x14914))+((x14901*x14910))+(((-1.0)*x14906*x14915))+(((-1.0)*r22*sj5*x14914)));
evalcond[2]=((((-1.0)*r10*x14907*x14915))+(((-1.0)*r12*x14916))+((sj2*x14912))+(((-1.0)*x14905*x14914))+((x14902*x14908))+((cj0*cj2))+(((-1.0)*r11*x14903*x14915)));
evalcond[3]=((((-1.0)*r00*x14907*x14915))+(((-1.0)*r02*x14916))+((sj2*x14904))+((x14902*x14911))+(((-1.0)*sj0*x14909))+(((-1.0)*x14913*x14914))+(((-1.0)*r01*x14903*x14915)));
evalcond[4]=((((-1.0)*r10*x14907*x14914))+(((-1.0)*r12*sj5*x14914))+((x14901*x14905))+(((-1.0)*r11*x14903*x14914))+(((-1.0)*x14908*x14915))+((cj0*sj2))+(((-1.0)*x14909*x14912)));
evalcond[5]=((((-1.0)*r00*x14907*x14914))+(((-1.0)*x14911*x14915))+((x14901*x14913))+(((-1.0)*r02*sj5*x14914))+(((-1.0)*sj0*sj2))+(((-1.0)*x14904*x14909))+(((-1.0)*r01*x14903*x14914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14917=(cj6*r20);
IkReal x14918=(cj2*sj0);
IkReal x14919=((1.0)*sj2);
IkReal x14920=(cj0*sj1);
IkReal x14921=(cj1*r01);
IkReal x14922=(r22*sj5);
IkReal x14923=(cj5*cj6);
IkReal x14924=(cj1*sj2);
IkReal x14925=(r21*sj6);
IkReal x14926=(cj5*r20*sj6);
CheckValue<IkReal> x14927 = IKatan2WithCheck(IkReal(((((-1.0)*x14918*x14925))+((cj6*r00*x14924))+(((-1.0)*x14917*x14919*x14920))+(((-1.0)*sj6*x14919*x14921))+((x14917*x14918))+((sj2*x14920*x14925)))),(((x14918*x14926))+((x14918*x14922))+((sj2*x14921*x14923))+(((-1.0)*r21*x14919*x14920*x14923))+((r02*sj5*x14924))+((r21*x14918*x14923))+(((-1.0)*x14919*x14920*x14926))+(((-1.0)*x14919*x14920*x14922))+((cj5*r00*sj6*x14924))),IKFAST_ATAN2_MAGTHRESH);
if(!x14927.valid){
continue;
}
CheckValue<IkReal> x14928=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x14928.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14927.value)+(((1.5707963267949)*(x14928.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14929=IKsin(j4);
IkReal x14930=IKcos(j4);
IkReal x14931=(cj5*cj6);
IkReal x14932=(cj0*sj1);
IkReal x14933=(r11*sj6);
IkReal x14934=(cj6*r20);
IkReal x14935=(cj5*sj6);
IkReal x14936=(cj6*r10);
IkReal x14937=((1.0)*cj2);
IkReal x14938=(r21*sj6);
IkReal x14939=(cj6*r00);
IkReal x14940=(sj0*sj1);
IkReal x14941=(r01*sj6);
IkReal x14942=((1.0)*x14930);
IkReal x14943=((1.0)*x14929);
IkReal x14944=(sj5*x14943);
evalcond[0]=(((x14930*x14934))+((cj1*sj2))+(((-1.0)*x14938*x14942))+(((-1.0)*r20*x14935*x14943))+(((-1.0)*r21*x14931*x14943))+(((-1.0)*r22*x14944)));
evalcond[1]=((((-1.0)*r22*sj5*x14942))+((x14929*x14938))+(((-1.0)*cj1*x14937))+(((-1.0)*x14934*x14943))+(((-1.0)*r20*x14935*x14942))+(((-1.0)*r21*x14931*x14942)));
evalcond[2]=((((-1.0)*r10*x14935*x14943))+((x14930*x14936))+(((-1.0)*x14933*x14942))+((cj0*cj2))+(((-1.0)*r12*x14944))+((sj2*x14940))+(((-1.0)*r11*x14931*x14943)));
evalcond[3]=((((-1.0)*sj0*x14937))+(((-1.0)*r01*x14931*x14943))+(((-1.0)*r00*x14935*x14943))+(((-1.0)*x14941*x14942))+((x14930*x14939))+(((-1.0)*r02*x14944))+((sj2*x14932)));
evalcond[4]=((((-1.0)*r10*x14935*x14942))+(((-1.0)*x14936*x14943))+(((-1.0)*x14937*x14940))+((x14929*x14933))+(((-1.0)*r12*sj5*x14942))+((cj0*sj2))+(((-1.0)*r11*x14931*x14942)));
evalcond[5]=((((-1.0)*r02*sj5*x14942))+((x14929*x14941))+(((-1.0)*r01*x14931*x14942))+(((-1.0)*r00*x14935*x14942))+(((-1.0)*x14932*x14937))+(((-1.0)*x14939*x14943))+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14945=(r20*sj6);
IkReal x14946=((0.01)*cj5);
IkReal x14947=(cj5*r22);
IkReal x14948=(cj6*r21);
IkReal x14949=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14945*x14949))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*x14947))+((x14945*x14946))+(((-1.0)*x14948*x14949))+((x14946*x14948))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
evalcond[2]=(sj1+(((-1.0)*x14947))+((sj5*x14945))+((sj5*x14948)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14950=(cj6*sj5);
IkReal x14951=(sj5*sj6);
IkReal x14952=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r10*x14951))+(((-1.0)*r12*x14952))+((r11*x14950)))))+(IKabs((((r01*x14950))+((r00*x14951))+(((-1.0)*r02*x14952))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14953=cj5*cj5;
IkReal x14954=cj6*cj6;
IkReal x14955=r22*r22;
IkReal x14956=r21*r21;
IkReal x14957=r20*r20;
IkReal x14958=((1.0)*cj5);
IkReal x14959=(cj6*r21);
IkReal x14960=(r20*sj6);
IkReal x14961=(cj1*cj2);
IkReal x14962=(cj1*sj2);
IkReal x14963=(r22*sj5);
IkReal x14964=(cj6*r20);
IkReal x14965=((2.0)*cj5);
IkReal x14966=(sj6*x14961);
IkReal x14967=((1.0)*x14956);
IkReal x14968=(x14954*x14957);
IkReal x14969=((((-1.0)*x14968))+(((-1.0)*x14953*x14954*x14967))+((x14953*x14955))+((x14954*x14956))+(((-1.0)*x14959*x14963*x14965))+(((-1.0)*x14967))+(((-1.0)*x14960*x14963*x14965))+(((2.0)*x14959*x14960))+(((-1.0)*x14953*x14957))+((x14953*x14968))+(((-1.0)*x14955))+(((-2.0)*x14953*x14959*x14960)));
j4eval[0]=x14969;
j4eval[1]=IKsign(x14969);
j4eval[2]=((IKabs(((((-1.0)*x14958*x14960*x14962))+(((-1.0)*x14962*x14963))+(((-1.0)*x14958*x14959*x14962))+(((-1.0)*x14961*x14964))+((r21*x14966)))))+(IKabs(((((-1.0)*x14958*x14960*x14961))+(((-1.0)*r21*sj6*x14962))+(((-1.0)*x14958*x14959*x14961))+((x14962*x14964))+(((-1.0)*x14961*x14963))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(cj1+(((-1.0)*cj1*cj2*sj1))+(((5.28144927536232)*(cj1*cj1))));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x14970=(cj6*sj5);
IkReal x14971=(sj5*sj6);
IkReal x14972=((0.01)*cj5);
IkReal x14973=(cj5*r22);
IkReal x14974=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-0.37429)*r20*x14971))+(((-0.37429)*r21*x14970))+((r20*sj6*x14972))+(((0.37429)*x14973))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((cj6*r21*x14972)));
evalcond[2]=((1.0)+(((-1.0)*x14973))+((r20*x14971))+((r21*x14970)));
evalcond[3]=(((r01*x14970))+((r00*x14971))+(((-1.0)*r02*x14974)));
evalcond[4]=((((-1.0)*r12*x14974))+((r11*x14970))+((r10*x14971)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((9522.0)+(((-9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14975=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*cj5*cj6*x14975))+(((-1.0)*r22*sj5)))))+(IKabs((((cj6*r20))+(((-1.0)*sj6*x14975))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x14976=((1.0)*cj5);
CheckValue<IkReal> x14978 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),((((-1.0)*r20*sj6*x14976))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x14976))),IKFAST_ATAN2_MAGTHRESH);
if(!x14978.valid){
continue;
}
IkReal x14977=x14978.value;
j4array[0]=((-1.0)*x14977);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x14977)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x14979=IKcos(j4);
IkReal x14980=IKsin(j4);
IkReal x14981=(cj5*x14979);
evalcond[0]=(((cj6*r20*x14980))+((r20*sj6*x14981))+(((-1.0)*r21*sj6*x14980))+((cj6*r21*x14981))+((r22*sj5*x14979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14982=(cj2*cj4);
IkReal x14983=(r02*sj5);
IkReal x14984=(cj4*sj2);
IkReal x14985=(r12*sj5);
IkReal x14986=((1.0)*r01);
IkReal x14987=(cj5*cj6*r11);
IkReal x14988=(cj5*r00*sj6);
IkReal x14989=(cj5*r10*sj6);
IkReal x14990=(cj6*r00*sj4);
IkReal x14991=(sj2*sj4*sj6);
IkReal x14992=(cj6*r10*sj4);
IkReal x14993=(cj2*sj4*sj6);
IkReal x14994=(cj5*cj6*r01);
if( IKabs((((x14984*x14994))+((x14984*x14988))+((sj2*x14990))+((cj2*x14992))+((x14983*x14984))+(((-1.0)*r11*x14993))+((x14982*x14989))+((x14982*x14985))+((x14982*x14987))+(((-1.0)*x14986*x14991)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x14984*x14985))+(((-1.0)*x14984*x14987))+(((-1.0)*x14984*x14989))+((cj2*x14990))+(((-1.0)*sj2*x14992))+((r11*x14991))+((x14982*x14988))+((x14982*x14983))+(((-1.0)*x14986*x14993))+((x14982*x14994)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x14984*x14994))+((x14984*x14988))+((sj2*x14990))+((cj2*x14992))+((x14983*x14984))+(((-1.0)*r11*x14993))+((x14982*x14989))+((x14982*x14985))+((x14982*x14987))+(((-1.0)*x14986*x14991))))+IKsqr(((((-1.0)*x14984*x14985))+(((-1.0)*x14984*x14987))+(((-1.0)*x14984*x14989))+((cj2*x14990))+(((-1.0)*sj2*x14992))+((r11*x14991))+((x14982*x14988))+((x14982*x14983))+(((-1.0)*x14986*x14993))+((x14982*x14994))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x14984*x14994))+((x14984*x14988))+((sj2*x14990))+((cj2*x14992))+((x14983*x14984))+(((-1.0)*r11*x14993))+((x14982*x14989))+((x14982*x14985))+((x14982*x14987))+(((-1.0)*x14986*x14991))), ((((-1.0)*x14984*x14985))+(((-1.0)*x14984*x14987))+(((-1.0)*x14984*x14989))+((cj2*x14990))+(((-1.0)*sj2*x14992))+((r11*x14991))+((x14982*x14988))+((x14982*x14983))+(((-1.0)*x14986*x14993))+((x14982*x14994))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14995=IKcos(j0);
IkReal x14996=IKsin(j0);
IkReal x14997=((1.0)*sj4);
IkReal x14998=(cj6*sj4);
IkReal x14999=((0.37429)*sj5);
IkReal x15000=(r10*sj6);
IkReal x15001=(r01*sj6);
IkReal x15002=((0.37429)*cj5);
IkReal x15003=((0.069)*sj2);
IkReal x15004=(cj6*r01);
IkReal x15005=((0.01)*cj5);
IkReal x15006=(r12*sj5);
IkReal x15007=(r00*sj6);
IkReal x15008=(r02*sj5);
IkReal x15009=(cj4*cj6);
IkReal x15010=(cj4*cj5);
IkReal x15011=((1.0)*cj4);
IkReal x15012=(r11*sj6);
IkReal x15013=(sj2*x14995);
IkReal x15014=(cj5*cj6*r11);
IkReal x15015=(cj2*x14995);
IkReal x15016=((0.069)*x14996);
IkReal x15017=(sj2*x14996);
IkReal x15018=((1.0)*cj2*x14996);
evalcond[0]=(((cj4*x15006))+(((-1.0)*x15018))+x15013+(((-1.0)*x14997*x15012))+((r10*x14998))+((x15000*x15010))+((cj5*r11*x15009)));
evalcond[1]=((((-1.0)*x15015))+(((-1.0)*x15017))+((cj4*x15008))+(((-1.0)*x14997*x15001))+((x15004*x15010))+((r00*x14998))+((x15007*x15010)));
evalcond[2]=((((-1.0)*cj5*x14997*x15000))+(((-1.0)*x15011*x15012))+(((-1.0)*x14997*x15006))+x15017+x15015+(((-1.0)*x14997*x15014))+((r10*x15009)));
evalcond[3]=((((-1.0)*x15018))+((r00*x15009))+(((-1.0)*cj5*x14997*x15004))+(((-1.0)*cj5*x14997*x15007))+(((-1.0)*x14997*x15008))+x15013+(((-1.0)*x15001*x15011)));
evalcond[4]=((((-1.0)*x14996*x15003))+(((-0.069)*x15015))+(((0.01)*x15008))+(((-1.0)*px))+(((-1.0)*x14999*x15007))+(((-1.0)*x14999*x15004))+((x15004*x15005))+((x15005*x15007))+((r02*x15002))+(((0.069)*x14995)));
evalcond[5]=((((-1.0)*cj2*x15016))+(((-1.0)*cj6*r11*x14999))+((cj6*r11*x15005))+x15016+((r12*x15002))+(((0.01)*x15006))+(((-1.0)*py))+(((-1.0)*x14999*x15000))+((x15000*x15005))+((x14995*x15003)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15020 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),(((cj6*r20))+(((-1.0)*r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x15020.valid){
continue;
}
IkReal x15019=x15020.value;
j4array[0]=((-1.0)*x15019);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x15019)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x15021=IKsin(j4);
IkReal x15022=IKcos(j4);
IkReal x15023=((1.0)*x15021);
evalcond[0]=((((-1.0)*cj5*r20*sj6*x15023))+(((-1.0)*r22*sj5*x15023))+(((-1.0)*r21*sj6*x15022))+(((-1.0)*cj5*cj6*r21*x15023))+((cj6*r20*x15022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15024=(cj2*cj4);
IkReal x15025=(r02*sj5);
IkReal x15026=(cj4*sj2);
IkReal x15027=(r12*sj5);
IkReal x15028=((1.0)*r01);
IkReal x15029=(cj5*cj6*r11);
IkReal x15030=(cj5*r00*sj6);
IkReal x15031=(cj5*r10*sj6);
IkReal x15032=(cj6*r00*sj4);
IkReal x15033=(sj2*sj4*sj6);
IkReal x15034=(cj6*r10*sj4);
IkReal x15035=(cj2*sj4*sj6);
IkReal x15036=(cj5*cj6*r01);
if( IKabs((((x15025*x15026))+(((-1.0)*x15028*x15033))+((x15024*x15031))+((x15026*x15036))+((x15026*x15030))+((sj2*x15032))+(((-1.0)*r11*x15035))+((cj2*x15034))+((x15024*x15029))+((x15024*x15027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x15028*x15035))+(((-1.0)*x15026*x15031))+((x15024*x15030))+((x15024*x15036))+((r11*x15033))+((cj2*x15032))+(((-1.0)*sj2*x15034))+((x15024*x15025))+(((-1.0)*x15026*x15029))+(((-1.0)*x15026*x15027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15025*x15026))+(((-1.0)*x15028*x15033))+((x15024*x15031))+((x15026*x15036))+((x15026*x15030))+((sj2*x15032))+(((-1.0)*r11*x15035))+((cj2*x15034))+((x15024*x15029))+((x15024*x15027))))+IKsqr(((((-1.0)*x15028*x15035))+(((-1.0)*x15026*x15031))+((x15024*x15030))+((x15024*x15036))+((r11*x15033))+((cj2*x15032))+(((-1.0)*sj2*x15034))+((x15024*x15025))+(((-1.0)*x15026*x15029))+(((-1.0)*x15026*x15027))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x15025*x15026))+(((-1.0)*x15028*x15033))+((x15024*x15031))+((x15026*x15036))+((x15026*x15030))+((sj2*x15032))+(((-1.0)*r11*x15035))+((cj2*x15034))+((x15024*x15029))+((x15024*x15027))), ((((-1.0)*x15028*x15035))+(((-1.0)*x15026*x15031))+((x15024*x15030))+((x15024*x15036))+((r11*x15033))+((cj2*x15032))+(((-1.0)*sj2*x15034))+((x15024*x15025))+(((-1.0)*x15026*x15029))+(((-1.0)*x15026*x15027))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15037=IKcos(j0);
IkReal x15038=IKsin(j0);
IkReal x15039=((1.0)*sj4);
IkReal x15040=(cj6*sj4);
IkReal x15041=((0.37429)*sj5);
IkReal x15042=(r10*sj6);
IkReal x15043=(r01*sj6);
IkReal x15044=((0.37429)*cj5);
IkReal x15045=((0.069)*sj2);
IkReal x15046=(cj6*r01);
IkReal x15047=((0.01)*cj5);
IkReal x15048=(r12*sj5);
IkReal x15049=(r00*sj6);
IkReal x15050=(r02*sj5);
IkReal x15051=(cj4*cj6);
IkReal x15052=(cj4*cj5);
IkReal x15053=((1.0)*cj4);
IkReal x15054=(r11*sj6);
IkReal x15055=(sj2*x15037);
IkReal x15056=(cj5*cj6*r11);
IkReal x15057=(cj2*x15037);
IkReal x15058=((0.069)*x15038);
IkReal x15059=(sj2*x15038);
IkReal x15060=((1.0)*cj2*x15038);
evalcond[0]=(((x15042*x15052))+(((-1.0)*x15039*x15054))+x15055+((cj5*r11*x15051))+((r10*x15040))+(((-1.0)*x15060))+((cj4*x15048)));
evalcond[1]=(((x15049*x15052))+(((-1.0)*x15057))+(((-1.0)*x15059))+((x15046*x15052))+((cj4*x15050))+((r00*x15040))+(((-1.0)*x15039*x15043)));
evalcond[2]=((((-1.0)*x15053*x15054))+(((-1.0)*x15039*x15056))+((r10*x15051))+x15059+x15057+(((-1.0)*cj5*x15039*x15042))+(((-1.0)*x15039*x15048)));
evalcond[3]=((((-1.0)*x15039*x15050))+x15055+(((-1.0)*cj5*x15039*x15049))+(((-1.0)*cj5*x15039*x15046))+(((-1.0)*x15060))+(((-1.0)*x15043*x15053))+((r00*x15051)));
evalcond[4]=(((r02*x15044))+(((-1.0)*x15041*x15046))+(((-1.0)*x15041*x15049))+(((-1.0)*px))+(((-0.069)*x15057))+((x15047*x15049))+((x15046*x15047))+(((-1.0)*x15038*x15045))+(((0.069)*x15037))+(((0.01)*x15050)));
evalcond[5]=((((-1.0)*x15041*x15042))+(((-1.0)*cj2*x15058))+((x15037*x15045))+(((-1.0)*cj6*r11*x15041))+((r12*x15044))+x15058+(((-1.0)*py))+(((0.01)*x15048))+((x15042*x15047))+((cj6*r11*x15047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15061=((690.0)*sj5);
IkReal x15062=(cj5*sj2);
IkReal x15063=((25826.01)*r02);
IkReal x15064=(cj6*r11);
IkReal x15065=((25826.01)*sj5);
IkReal x15066=(r00*sj6);
IkReal x15067=(r10*sj6);
IkReal x15068=((25826.01)*r12);
IkReal x15069=(cj6*r01);
IkReal x15070=((69000.0)*py);
IkReal x15071=((69000.0)*px);
IkReal x15072=((690.0)*cj5);
IkReal x15073=(cj2*cj5);
IkReal x15074=(cj2*x15072);
CheckValue<IkReal> x15075=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-9522.0)*cj2)))),-1);
if(!x15075.valid){
continue;
}
CheckValue<IkReal> x15076 = IKatan2WithCheck(IkReal(((((690.0)*x15062*x15066))+(((690.0)*x15062*x15069))+((cj2*r12*x15061))+((x15064*x15074))+(((-1.0)*cj2*x15065*x15067))+(((-1.0)*sj2*x15071))+(((-1.0)*sj2*x15065*x15066))+(((-1.0)*sj2*x15065*x15069))+((x15062*x15063))+x15070+((x15068*x15073))+(((-1.0)*cj5*x15068))+(((-1.0)*cj2*x15064*x15065))+((x15064*x15065))+((x15065*x15067))+(((-1.0)*x15064*x15072))+((r02*sj2*x15061))+(((-1.0)*r12*x15061))+((x15067*x15074))+(((-1.0)*x15067*x15072))+(((-1.0)*cj2*x15070)))),((((-1.0)*x15066*x15072))+(((-690.0)*x15062*x15064))+(((-690.0)*x15062*x15067))+(((-1.0)*x15069*x15072))+((x15063*x15073))+(((-1.0)*cj2*x15065*x15069))+(((-1.0)*cj2*x15065*x15066))+(((-1.0)*r12*sj2*x15061))+x15071+(((-1.0)*r02*x15061))+((x15069*x15074))+(((-1.0)*cj5*x15063))+((sj2*x15070))+((x15065*x15066))+((x15065*x15069))+((x15066*x15074))+((cj2*r02*x15061))+(((-1.0)*cj2*x15071))+((sj2*x15065*x15067))+(((-1.0)*x15062*x15068))+((sj2*x15064*x15065))),IKFAST_ATAN2_MAGTHRESH);
if(!x15076.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15075.value)))+(x15076.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x15077=IKcos(j0);
IkReal x15078=IKsin(j0);
IkReal x15079=((0.01)*cj5);
IkReal x15080=(cj6*r01);
IkReal x15081=((0.37429)*sj5);
IkReal x15082=(cj6*r11);
IkReal x15083=(r00*sj6);
IkReal x15084=((0.01)*sj5);
IkReal x15085=((0.37429)*cj5);
IkReal x15086=(r10*sj6);
IkReal x15087=((0.069)*x15077);
IkReal x15088=((0.069)*x15078);
evalcond[0]=(((r02*x15085))+((r02*x15084))+(((-1.0)*sj2*x15088))+x15087+((x15079*x15080))+((x15079*x15083))+(((-1.0)*px))+(((-1.0)*cj2*x15087))+(((-1.0)*x15080*x15081))+(((-1.0)*x15081*x15083)));
evalcond[1]=(((r12*x15085))+((r12*x15084))+x15088+((x15079*x15086))+((x15079*x15082))+(((-1.0)*py))+(((-1.0)*cj2*x15088))+((sj2*x15087))+(((-1.0)*x15081*x15086))+(((-1.0)*x15081*x15082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15089=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15089;
j4eval[1]=IKsign(x15089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15090=((1.0)*sj5);
IkReal x15091=(((cj5*r12))+(((-1.0)*r10*sj6*x15090))+(((-1.0)*cj6*r11*x15090)));
j4eval[0]=x15091;
j4eval[1]=IKsign(x15091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15092=cj6*cj6;
IkReal x15093=cj5*cj5;
IkReal x15094=(cj5*sj5);
IkReal x15095=(cj6*r21);
IkReal x15096=((1.0)*r11);
IkReal x15097=(r10*r20);
IkReal x15098=(r10*sj6);
IkReal x15099=(r12*r22);
IkReal x15100=(r21*x15092);
IkReal x15101=(cj6*r20*sj6);
IkReal x15102=(r11*x15093);
IkReal x15103=((1.0)*x15093);
IkReal x15104=(((cj6*r11*r22*x15094))+((r11*r21))+((r12*r20*sj6*x15094))+(((-1.0)*x15099*x15103))+((x15092*x15097))+((r12*x15094*x15095))+x15099+((x15093*x15095*x15098))+((r22*x15094*x15098))+(((-1.0)*x15092*x15097*x15103))+(((-1.0)*x15095*x15098))+((x15093*x15097))+(((-1.0)*x15096*x15100))+(((-1.0)*x15096*x15101))+((x15100*x15102))+((x15101*x15102)));
j4eval[0]=x15104;
j4eval[1]=IKsign(x15104);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15105=cj6*cj6;
IkReal x15106=cj5*cj5;
IkReal x15107=((1.0)*r11);
IkReal x15108=(cj6*r20);
IkReal x15109=(cj0*cj2);
IkReal x15110=(cj5*r20);
IkReal x15111=(r12*r22);
IkReal x15112=(cj6*r21);
IkReal x15113=(sj0*sj2);
IkReal x15114=(r22*sj5);
IkReal x15115=(r12*sj5);
IkReal x15116=(r10*sj6);
IkReal x15117=(r21*x15105);
IkReal x15118=(sj6*x15113);
IkReal x15119=((1.0)*x15106);
IkReal x15120=(r10*x15106);
IkReal x15121=(r11*x15106);
IkReal x15122=(r10*r20*x15105);
CheckValue<IkReal> x15123=IKPowWithIntegerCheck(IKsign((((r20*x15120))+((cj5*cj6*r11*x15114))+((r11*r21))+(((-1.0)*x15112*x15116))+(((-1.0)*sj6*x15107*x15108))+((sj6*x15110*x15115))+((cj5*x15114*x15116))+(((-1.0)*x15119*x15122))+x15122+x15111+((x15117*x15121))+((cj5*x15112*x15115))+(((-1.0)*x15111*x15119))+((x15106*x15112*x15116))+((sj6*x15108*x15121))+(((-1.0)*x15107*x15117)))),-1);
if(!x15123.valid){
continue;
}
CheckValue<IkReal> x15124 = IKatan2WithCheck(IkReal((((x15109*x15114))+((x15110*x15118))+((cj5*x15112*x15113))+((cj5*x15109*x15112))+((sj6*x15109*x15110))+((x15113*x15114)))),((((-1.0)*x15108*x15113))+((r21*sj6*x15109))+(((-1.0)*x15108*x15109))+((r21*x15118))),IKFAST_ATAN2_MAGTHRESH);
if(!x15124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15123.value)))+(x15124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15125=IKcos(j4);
IkReal x15126=IKsin(j4);
IkReal x15127=(cj0*sj2);
IkReal x15128=(cj0*cj2);
IkReal x15129=(cj5*sj6);
IkReal x15130=(cj5*r01);
IkReal x15131=(cj5*r21);
IkReal x15132=((1.0)*sj0);
IkReal x15133=(cj2*x15132);
IkReal x15134=(cj5*cj6*r11);
IkReal x15135=((1.0)*x15126);
IkReal x15136=(cj6*x15125);
IkReal x15137=(sj5*x15125);
IkReal x15138=(cj6*x15126);
IkReal x15139=(sj5*x15135);
IkReal x15140=((1.0)*sj6*x15125);
evalcond[0]=(((r20*x15125*x15129))+((r20*x15138))+((r22*x15137))+((x15131*x15136))+(((-1.0)*r21*sj6*x15135)));
evalcond[1]=(((r20*x15136))+(((-1.0)*cj6*x15131*x15135))+(((-1.0)*r21*x15140))+(((-1.0)*r22*x15139))+(((-1.0)*r20*x15129*x15135)));
evalcond[2]=((((-1.0)*r11*sj6*x15135))+(((-1.0)*x15133))+x15127+((r10*x15125*x15129))+((r10*x15138))+((r12*x15137))+((x15125*x15134)));
evalcond[3]=(((x15130*x15136))+((r00*x15125*x15129))+((r00*x15138))+(((-1.0)*x15128))+(((-1.0)*sj2*x15132))+(((-1.0)*r01*sj6*x15135))+((r02*x15137)));
evalcond[4]=((((-1.0)*r10*x15129*x15135))+(((-1.0)*x15134*x15135))+(((-1.0)*r12*x15139))+((sj0*sj2))+x15128+((r10*x15136))+(((-1.0)*r11*x15140)));
evalcond[5]=((((-1.0)*r01*x15140))+(((-1.0)*r02*x15139))+(((-1.0)*cj6*x15130*x15135))+(((-1.0)*x15133))+((r00*x15136))+(((-1.0)*r00*x15129*x15135))+x15127);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15141=((1.0)*r21);
IkReal x15142=(sj0*sj2);
IkReal x15143=(cj0*cj2);
IkReal x15144=((1.0)*sj5);
IkReal x15145=(cj6*x15143);
IkReal x15146=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x15147 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15143*x15144))+(((-1.0)*r22*x15142*x15144))+(((-1.0)*cj5*x15141*x15145))+(((-1.0)*x15142*x15146))+(((-1.0)*x15143*x15146))+(((-1.0)*cj5*cj6*x15141*x15142)))),(((cj6*r20*x15142))+((r20*x15145))+(((-1.0)*sj6*x15141*x15143))+(((-1.0)*sj6*x15141*x15142))),IKFAST_ATAN2_MAGTHRESH);
if(!x15147.valid){
continue;
}
CheckValue<IkReal> x15148=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x15144))+(((-1.0)*r10*sj6*x15144)))),-1);
if(!x15148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15147.value)+(((1.5707963267949)*(x15148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15149=IKcos(j4);
IkReal x15150=IKsin(j4);
IkReal x15151=(cj0*sj2);
IkReal x15152=(cj0*cj2);
IkReal x15153=(cj5*sj6);
IkReal x15154=(cj5*r01);
IkReal x15155=(cj5*r21);
IkReal x15156=((1.0)*sj0);
IkReal x15157=(cj2*x15156);
IkReal x15158=(cj5*cj6*r11);
IkReal x15159=((1.0)*x15150);
IkReal x15160=(cj6*x15149);
IkReal x15161=(sj5*x15149);
IkReal x15162=(cj6*x15150);
IkReal x15163=(sj5*x15159);
IkReal x15164=((1.0)*sj6*x15149);
evalcond[0]=(((r20*x15162))+((x15155*x15160))+(((-1.0)*r21*sj6*x15159))+((r22*x15161))+((r20*x15149*x15153)));
evalcond[1]=((((-1.0)*r20*x15153*x15159))+((r20*x15160))+(((-1.0)*cj6*x15155*x15159))+(((-1.0)*r21*x15164))+(((-1.0)*r22*x15163)));
evalcond[2]=(((x15149*x15158))+(((-1.0)*x15157))+((r10*x15162))+((r12*x15161))+(((-1.0)*r11*sj6*x15159))+x15151+((r10*x15149*x15153)));
evalcond[3]=(((r02*x15161))+((x15154*x15160))+(((-1.0)*x15152))+(((-1.0)*sj2*x15156))+((r00*x15149*x15153))+((r00*x15162))+(((-1.0)*r01*sj6*x15159)));
evalcond[4]=((((-1.0)*r10*x15153*x15159))+((r10*x15160))+((sj0*sj2))+x15152+(((-1.0)*x15158*x15159))+(((-1.0)*r11*x15164))+(((-1.0)*r12*x15163)));
evalcond[5]=((((-1.0)*r01*x15164))+(((-1.0)*x15157))+(((-1.0)*r00*x15153*x15159))+(((-1.0)*cj6*x15154*x15159))+x15151+(((-1.0)*r02*x15163))+((r00*x15160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15165=(r22*sj5);
IkReal x15166=(cj6*r20);
IkReal x15167=(cj0*sj2);
IkReal x15168=(r21*sj6);
IkReal x15169=((1.0)*cj2*sj0);
IkReal x15170=(cj5*cj6*r21);
IkReal x15171=(cj5*r20*sj6);
CheckValue<IkReal> x15172 = IKatan2WithCheck(IkReal((((x15165*x15167))+(((-1.0)*x15165*x15169))+((x15167*x15170))+((x15167*x15171))+(((-1.0)*x15169*x15170))+(((-1.0)*x15169*x15171)))),(((cj2*sj0*x15166))+((x15167*x15168))+(((-1.0)*x15168*x15169))+(((-1.0)*x15166*x15167))),IKFAST_ATAN2_MAGTHRESH);
if(!x15172.valid){
continue;
}
CheckValue<IkReal> x15173=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15172.value)+(((1.5707963267949)*(x15173.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15174=IKcos(j4);
IkReal x15175=IKsin(j4);
IkReal x15176=(cj0*sj2);
IkReal x15177=(cj0*cj2);
IkReal x15178=(cj5*sj6);
IkReal x15179=(cj5*r01);
IkReal x15180=(cj5*r21);
IkReal x15181=((1.0)*sj0);
IkReal x15182=(cj2*x15181);
IkReal x15183=(cj5*cj6*r11);
IkReal x15184=((1.0)*x15175);
IkReal x15185=(cj6*x15174);
IkReal x15186=(sj5*x15174);
IkReal x15187=(cj6*x15175);
IkReal x15188=(sj5*x15184);
IkReal x15189=((1.0)*sj6*x15174);
evalcond[0]=(((r20*x15187))+((r22*x15186))+((r20*x15174*x15178))+(((-1.0)*r21*sj6*x15184))+((x15180*x15185)));
evalcond[1]=((((-1.0)*r21*x15189))+((r20*x15185))+(((-1.0)*r20*x15178*x15184))+(((-1.0)*cj6*x15180*x15184))+(((-1.0)*r22*x15188)));
evalcond[2]=(((x15174*x15183))+(((-1.0)*x15182))+((r12*x15186))+x15176+((r10*x15174*x15178))+(((-1.0)*r11*sj6*x15184))+((r10*x15187)));
evalcond[3]=(((r00*x15174*x15178))+((r02*x15186))+((x15179*x15185))+(((-1.0)*sj2*x15181))+(((-1.0)*r01*sj6*x15184))+(((-1.0)*x15177))+((r00*x15187)));
evalcond[4]=(((sj0*sj2))+x15177+(((-1.0)*r11*x15189))+(((-1.0)*r12*x15188))+(((-1.0)*r10*x15178*x15184))+(((-1.0)*x15183*x15184))+((r10*x15185)));
evalcond[5]=((((-1.0)*r01*x15189))+(((-1.0)*r02*x15188))+(((-1.0)*x15182))+(((-1.0)*r00*x15178*x15184))+x15176+((r00*x15185))+(((-1.0)*cj6*x15179*x15184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15190=(cj6*sj5);
IkReal x15191=(sj5*sj6);
IkReal x15192=((0.01)*cj5);
IkReal x15193=(cj5*r22);
IkReal x15194=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((cj6*r21*x15192))+(((0.37429)*x15193))+(((-0.37429)*r20*x15191))+(((-0.37429)*r21*x15190))+((r20*sj6*x15192))+(((0.01)*r22*sj5))+(((-1.0)*pz)));
evalcond[2]=((-1.0)+((r21*x15190))+(((-1.0)*x15193))+((r20*x15191)));
evalcond[3]=(((r00*x15191))+(((-1.0)*r02*x15194))+((r01*x15190)));
evalcond[4]=(((r11*x15190))+(((-1.0)*r12*x15194))+((r10*x15191)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((9522.0)+(((9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15195=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*sj6*x15195))+((cj6*r20)))))+(IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*cj6*x15195))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x15196=((1.0)*cj5);
CheckValue<IkReal> x15198 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),((((-1.0)*r20*sj6*x15196))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x15196))),IKFAST_ATAN2_MAGTHRESH);
if(!x15198.valid){
continue;
}
IkReal x15197=x15198.value;
j4array[0]=((-1.0)*x15197);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x15197)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x15199=IKcos(j4);
IkReal x15200=IKsin(j4);
IkReal x15201=(cj5*x15199);
evalcond[0]=(((r22*sj5*x15199))+((cj6*r20*x15200))+((r20*sj6*x15201))+(((-1.0)*r21*sj6*x15200))+((cj6*r21*x15201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15202=(r02*sj5);
IkReal x15203=(cj5*sj6);
IkReal x15204=(r00*sj2);
IkReal x15205=(cj6*sj4);
IkReal x15206=((1.0)*cj2);
IkReal x15207=(r12*sj5);
IkReal x15208=(cj4*sj2);
IkReal x15209=(cj4*x15206);
IkReal x15210=(cj5*cj6*r11);
IkReal x15211=((1.0)*x15208);
IkReal x15212=(cj5*cj6*r01);
IkReal x15213=(sj2*sj4*sj6);
IkReal x15214=(cj2*sj4*sj6);
if( IKabs((((cj4*x15203*x15204))+(((-1.0)*r01*x15213))+((x15202*x15208))+((x15204*x15205))+((r11*x15214))+((x15208*x15212))+(((-1.0)*r10*x15203*x15209))+(((-1.0)*r10*x15205*x15206))+(((-1.0)*x15207*x15209))+(((-1.0)*x15209*x15210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x15205*x15206))+(((-1.0)*x15210*x15211))+((r11*x15213))+(((-1.0)*r10*sj2*x15205))+(((-1.0)*x15202*x15209))+(((-1.0)*r00*x15203*x15209))+(((-1.0)*r10*x15203*x15211))+((r01*x15214))+(((-1.0)*x15207*x15211))+(((-1.0)*x15209*x15212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x15203*x15204))+(((-1.0)*r01*x15213))+((x15202*x15208))+((x15204*x15205))+((r11*x15214))+((x15208*x15212))+(((-1.0)*r10*x15203*x15209))+(((-1.0)*r10*x15205*x15206))+(((-1.0)*x15207*x15209))+(((-1.0)*x15209*x15210))))+IKsqr(((((-1.0)*r00*x15205*x15206))+(((-1.0)*x15210*x15211))+((r11*x15213))+(((-1.0)*r10*sj2*x15205))+(((-1.0)*x15202*x15209))+(((-1.0)*r00*x15203*x15209))+(((-1.0)*r10*x15203*x15211))+((r01*x15214))+(((-1.0)*x15207*x15211))+(((-1.0)*x15209*x15212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*x15203*x15204))+(((-1.0)*r01*x15213))+((x15202*x15208))+((x15204*x15205))+((r11*x15214))+((x15208*x15212))+(((-1.0)*r10*x15203*x15209))+(((-1.0)*r10*x15205*x15206))+(((-1.0)*x15207*x15209))+(((-1.0)*x15209*x15210))), ((((-1.0)*r00*x15205*x15206))+(((-1.0)*x15210*x15211))+((r11*x15213))+(((-1.0)*r10*sj2*x15205))+(((-1.0)*x15202*x15209))+(((-1.0)*r00*x15203*x15209))+(((-1.0)*r10*x15203*x15211))+((r01*x15214))+(((-1.0)*x15207*x15211))+(((-1.0)*x15209*x15212))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15215=IKcos(j0);
IkReal x15216=IKsin(j0);
IkReal x15217=((1.0)*sj4);
IkReal x15218=(cj6*sj4);
IkReal x15219=((0.37429)*sj5);
IkReal x15220=(r10*sj6);
IkReal x15221=((0.069)*sj2);
IkReal x15222=(r01*sj6);
IkReal x15223=((0.37429)*cj5);
IkReal x15224=(cj6*r01);
IkReal x15225=((0.01)*cj5);
IkReal x15226=(r12*sj5);
IkReal x15227=(r00*sj6);
IkReal x15228=(r02*sj5);
IkReal x15229=(cj4*cj6);
IkReal x15230=(cj4*cj5);
IkReal x15231=((1.0)*cj4);
IkReal x15232=(r11*sj6);
IkReal x15233=(cj2*x15215);
IkReal x15234=(cj5*cj6*r11);
IkReal x15235=((0.069)*x15216);
IkReal x15236=(sj2*x15215);
IkReal x15237=(cj2*x15216);
IkReal x15238=((1.0)*sj2*x15216);
evalcond[0]=((((-1.0)*x15217*x15232))+((r10*x15218))+x15236+x15237+((cj5*r11*x15229))+((x15220*x15230))+((cj4*x15226)));
evalcond[1]=(((x15224*x15230))+(((-1.0)*x15238))+x15233+((x15227*x15230))+(((-1.0)*x15217*x15222))+((r00*x15218))+((cj4*x15228)));
evalcond[2]=((((-1.0)*x15217*x15234))+(((-1.0)*x15231*x15232))+(((-1.0)*x15238))+x15233+((r10*x15229))+(((-1.0)*x15217*x15226))+(((-1.0)*cj5*x15217*x15220)));
evalcond[3]=(((r00*x15229))+(((-1.0)*x15237))+(((-1.0)*x15236))+(((-1.0)*x15217*x15228))+(((-1.0)*cj5*x15217*x15227))+(((-1.0)*cj5*x15217*x15224))+(((-1.0)*x15222*x15231)));
evalcond[4]=(((x15224*x15225))+(((0.069)*x15215))+(((0.01)*x15228))+(((-1.0)*px))+((x15225*x15227))+((r02*x15223))+(((-1.0)*x15216*x15221))+(((-1.0)*x15219*x15227))+(((-1.0)*x15219*x15224))+(((0.069)*x15233)));
evalcond[5]=(((r12*x15223))+(((-1.0)*cj6*r11*x15219))+((cj2*x15235))+((x15220*x15225))+x15235+(((0.01)*x15226))+(((-1.0)*py))+((x15215*x15221))+(((-1.0)*x15219*x15220))+((cj6*r11*x15225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15240 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),(((cj6*r20))+(((-1.0)*r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x15240.valid){
continue;
}
IkReal x15239=x15240.value;
j4array[0]=((-1.0)*x15239);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x15239)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x15241=IKsin(j4);
IkReal x15242=IKcos(j4);
IkReal x15243=((1.0)*x15241);
evalcond[0]=((((-1.0)*cj5*r20*sj6*x15243))+(((-1.0)*r22*sj5*x15243))+(((-1.0)*r21*sj6*x15242))+((cj6*r20*x15242))+(((-1.0)*cj5*cj6*r21*x15243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15244=(r02*sj5);
IkReal x15245=(cj5*sj6);
IkReal x15246=(r00*sj2);
IkReal x15247=(cj6*sj4);
IkReal x15248=((1.0)*cj2);
IkReal x15249=(r12*sj5);
IkReal x15250=(cj4*sj2);
IkReal x15251=(cj4*x15248);
IkReal x15252=(cj5*cj6*r11);
IkReal x15253=((1.0)*x15250);
IkReal x15254=(cj5*cj6*r01);
IkReal x15255=(sj2*sj4*sj6);
IkReal x15256=(cj2*sj4*sj6);
if( IKabs((((x15246*x15247))+((cj4*x15245*x15246))+(((-1.0)*r10*x15245*x15251))+((x15244*x15250))+(((-1.0)*x15251*x15252))+(((-1.0)*x15249*x15251))+((r11*x15256))+(((-1.0)*r01*x15255))+(((-1.0)*r10*x15247*x15248))+((x15250*x15254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj2*x15247))+(((-1.0)*r10*x15245*x15253))+(((-1.0)*x15252*x15253))+((r01*x15256))+(((-1.0)*x15251*x15254))+(((-1.0)*x15249*x15253))+((r11*x15255))+(((-1.0)*r00*x15245*x15251))+(((-1.0)*x15244*x15251))+(((-1.0)*r00*x15247*x15248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15246*x15247))+((cj4*x15245*x15246))+(((-1.0)*r10*x15245*x15251))+((x15244*x15250))+(((-1.0)*x15251*x15252))+(((-1.0)*x15249*x15251))+((r11*x15256))+(((-1.0)*r01*x15255))+(((-1.0)*r10*x15247*x15248))+((x15250*x15254))))+IKsqr(((((-1.0)*r10*sj2*x15247))+(((-1.0)*r10*x15245*x15253))+(((-1.0)*x15252*x15253))+((r01*x15256))+(((-1.0)*x15251*x15254))+(((-1.0)*x15249*x15253))+((r11*x15255))+(((-1.0)*r00*x15245*x15251))+(((-1.0)*x15244*x15251))+(((-1.0)*r00*x15247*x15248))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x15246*x15247))+((cj4*x15245*x15246))+(((-1.0)*r10*x15245*x15251))+((x15244*x15250))+(((-1.0)*x15251*x15252))+(((-1.0)*x15249*x15251))+((r11*x15256))+(((-1.0)*r01*x15255))+(((-1.0)*r10*x15247*x15248))+((x15250*x15254))), ((((-1.0)*r10*sj2*x15247))+(((-1.0)*r10*x15245*x15253))+(((-1.0)*x15252*x15253))+((r01*x15256))+(((-1.0)*x15251*x15254))+(((-1.0)*x15249*x15253))+((r11*x15255))+(((-1.0)*r00*x15245*x15251))+(((-1.0)*x15244*x15251))+(((-1.0)*r00*x15247*x15248))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15257=IKcos(j0);
IkReal x15258=IKsin(j0);
IkReal x15259=((1.0)*sj4);
IkReal x15260=(cj6*sj4);
IkReal x15261=((0.37429)*sj5);
IkReal x15262=(r10*sj6);
IkReal x15263=((0.069)*sj2);
IkReal x15264=(r01*sj6);
IkReal x15265=((0.37429)*cj5);
IkReal x15266=(cj6*r01);
IkReal x15267=((0.01)*cj5);
IkReal x15268=(r12*sj5);
IkReal x15269=(r00*sj6);
IkReal x15270=(r02*sj5);
IkReal x15271=(cj4*cj6);
IkReal x15272=(cj4*cj5);
IkReal x15273=((1.0)*cj4);
IkReal x15274=(r11*sj6);
IkReal x15275=(cj2*x15257);
IkReal x15276=(cj5*cj6*r11);
IkReal x15277=((0.069)*x15258);
IkReal x15278=(sj2*x15257);
IkReal x15279=(cj2*x15258);
IkReal x15280=((1.0)*sj2*x15258);
evalcond[0]=(((cj5*r11*x15271))+x15278+x15279+((cj4*x15268))+((x15262*x15272))+(((-1.0)*x15259*x15274))+((r10*x15260)));
evalcond[1]=(((cj4*x15270))+x15275+((x15266*x15272))+(((-1.0)*x15259*x15264))+((x15269*x15272))+((r00*x15260))+(((-1.0)*x15280)));
evalcond[2]=(x15275+(((-1.0)*x15259*x15268))+((r10*x15271))+(((-1.0)*x15273*x15274))+(((-1.0)*x15259*x15276))+(((-1.0)*x15280))+(((-1.0)*cj5*x15259*x15262)));
evalcond[3]=((((-1.0)*x15264*x15273))+(((-1.0)*x15259*x15270))+(((-1.0)*x15278))+(((-1.0)*x15279))+(((-1.0)*cj5*x15259*x15266))+(((-1.0)*cj5*x15259*x15269))+((r00*x15271)));
evalcond[4]=(((x15267*x15269))+(((0.01)*x15270))+(((-1.0)*px))+(((0.069)*x15257))+(((-1.0)*x15261*x15266))+(((-1.0)*x15261*x15269))+(((-1.0)*x15258*x15263))+((x15266*x15267))+((r02*x15265))+(((0.069)*x15275)));
evalcond[5]=(((r12*x15265))+(((-1.0)*cj6*r11*x15261))+(((0.01)*x15268))+((cj6*r11*x15267))+((x15257*x15263))+x15277+(((-1.0)*py))+(((-1.0)*x15261*x15262))+((cj2*x15277))+((x15262*x15267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15281=((690.0)*sj5);
IkReal x15282=(cj5*sj2);
IkReal x15283=((25826.01)*r02);
IkReal x15284=(cj6*r11);
IkReal x15285=((25826.01)*sj5);
IkReal x15286=(r10*sj6);
IkReal x15287=((25826.01)*r12);
IkReal x15288=(cj6*r01);
IkReal x15289=((69000.0)*py);
IkReal x15290=((69000.0)*px);
IkReal x15291=((690.0)*cj5);
IkReal x15292=(cj2*cj5);
IkReal x15293=(r00*sj6);
IkReal x15294=(cj2*x15291);
IkReal x15295=((690.0)*x15293);
CheckValue<IkReal> x15296=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj2)))),-1);
if(!x15296.valid){
continue;
}
CheckValue<IkReal> x15297 = IKatan2WithCheck(IkReal(((((-1.0)*x15287*x15292))+((r02*sj2*x15281))+((cj2*x15284*x15285))+(((-1.0)*x15286*x15294))+(((-1.0)*x15286*x15291))+(((-1.0)*sj2*x15290))+(((-1.0)*sj2*x15285*x15288))+(((-1.0)*r12*x15281))+((cj2*x15289))+x15289+((cj2*x15285*x15286))+(((-1.0)*sj2*x15285*x15293))+((x15284*x15285))+((x15282*x15295))+(((690.0)*x15282*x15288))+(((-1.0)*cj5*x15287))+((x15282*x15283))+(((-1.0)*x15284*x15294))+(((-1.0)*x15284*x15291))+(((-1.0)*cj2*r12*x15281))+((x15285*x15286)))),((((-690.0)*x15282*x15286))+(((-690.0)*x15282*x15284))+(((-1.0)*x15283*x15292))+(((-1.0)*x15291*x15293))+(((-1.0)*r12*sj2*x15281))+x15290+((cj2*x15285*x15288))+((x15285*x15293))+(((-1.0)*r02*x15281))+(((-1.0)*x15282*x15287))+(((-1.0)*x15288*x15294))+(((-1.0)*x15288*x15291))+((sj2*x15285*x15286))+((sj2*x15284*x15285))+(((-1.0)*x15293*x15294))+((cj2*x15285*x15293))+((sj2*x15289))+(((-1.0)*cj5*x15283))+((cj2*x15290))+(((-1.0)*cj2*r02*x15281))+((x15285*x15288))),IKFAST_ATAN2_MAGTHRESH);
if(!x15297.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15296.value)))+(x15297.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x15298=IKcos(j0);
IkReal x15299=IKsin(j0);
IkReal x15300=((0.01)*cj5);
IkReal x15301=(cj6*r01);
IkReal x15302=((0.37429)*sj5);
IkReal x15303=(cj6*r11);
IkReal x15304=(r00*sj6);
IkReal x15305=((0.01)*sj5);
IkReal x15306=((0.37429)*cj5);
IkReal x15307=(r10*sj6);
IkReal x15308=((0.069)*x15298);
IkReal x15309=((0.069)*x15299);
evalcond[0]=(((r02*x15306))+((r02*x15305))+x15308+(((-1.0)*px))+(((-1.0)*x15301*x15302))+((x15300*x15301))+((x15300*x15304))+((cj2*x15308))+(((-1.0)*sj2*x15309))+(((-1.0)*x15302*x15304)));
evalcond[1]=(((sj2*x15308))+x15309+(((-1.0)*py))+((x15300*x15303))+((x15300*x15307))+((cj2*x15309))+((r12*x15306))+((r12*x15305))+(((-1.0)*x15302*x15303))+(((-1.0)*x15302*x15307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15310=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15310;
j4eval[1]=IKsign(x15310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15311=((1.0)*sj5);
IkReal x15312=(((cj5*r12))+(((-1.0)*cj6*r11*x15311))+(((-1.0)*r10*sj6*x15311)));
j4eval[0]=x15312;
j4eval[1]=IKsign(x15312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15313=cj6*cj6;
IkReal x15314=cj5*cj5;
IkReal x15315=(cj5*sj5);
IkReal x15316=(cj6*r21);
IkReal x15317=((1.0)*r11);
IkReal x15318=(r10*r20);
IkReal x15319=(r10*sj6);
IkReal x15320=(r12*r22);
IkReal x15321=(r21*x15313);
IkReal x15322=(cj6*r20*sj6);
IkReal x15323=(r11*x15314);
IkReal x15324=((1.0)*x15314);
IkReal x15325=((((-1.0)*x15316*x15319))+((r11*r21))+((x15314*x15316*x15319))+(((-1.0)*x15320*x15324))+(((-1.0)*x15313*x15318*x15324))+x15320+((r22*x15315*x15319))+((cj6*r11*r22*x15315))+((x15313*x15318))+(((-1.0)*x15317*x15322))+(((-1.0)*x15317*x15321))+((x15322*x15323))+((r12*r20*sj6*x15315))+((x15314*x15318))+((x15321*x15323))+((r12*x15315*x15316)));
j4eval[0]=x15325;
j4eval[1]=IKsign(x15325);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15326=cj6*cj6;
IkReal x15327=cj5*cj5;
IkReal x15328=((1.0)*r11);
IkReal x15329=((1.0)*r20);
IkReal x15330=(cj0*cj2);
IkReal x15331=(r12*r22);
IkReal x15332=(cj6*sj6);
IkReal x15333=((1.0)*r21);
IkReal x15334=(r22*sj5);
IkReal x15335=(sj0*sj2);
IkReal x15336=(r12*sj5);
IkReal x15337=(cj5*sj6);
IkReal x15338=(r21*x15326);
IkReal x15339=(cj5*x15335);
IkReal x15340=(r10*x15327);
IkReal x15341=(r11*x15327);
IkReal x15342=(cj5*cj6*r21);
CheckValue<IkReal> x15343=IKPowWithIntegerCheck(IKsign((((r20*x15336*x15337))+((r11*r21))+(((-1.0)*r20*x15328*x15332))+((x15338*x15341))+x15331+(((-1.0)*x15326*x15329*x15340))+((r20*x15340))+((r21*x15332*x15340))+((r20*x15332*x15341))+((r10*r20*x15326))+((cj5*cj6*r11*x15334))+((x15336*x15342))+(((-1.0)*x15328*x15338))+((r10*x15334*x15337))+(((-1.0)*r10*x15332*x15333))+(((-1.0)*x15327*x15331)))),-1);
if(!x15343.valid){
continue;
}
CheckValue<IkReal> x15344 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*x15333*x15339))+((x15330*x15334))+((r20*x15330*x15337))+(((-1.0)*x15334*x15335))+(((-1.0)*x15329*x15335*x15337))+((x15330*x15342)))),(((cj6*r20*x15335))+(((-1.0)*cj6*x15329*x15330))+((r21*sj6*x15330))+(((-1.0)*sj6*x15333*x15335))),IKFAST_ATAN2_MAGTHRESH);
if(!x15344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15343.value)))+(x15344.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15345=IKcos(j4);
IkReal x15346=IKsin(j4);
IkReal x15347=(cj0*cj2);
IkReal x15348=(cj5*sj6);
IkReal x15349=(cj5*r01);
IkReal x15350=(cj0*sj2);
IkReal x15351=(cj5*r21);
IkReal x15352=((1.0)*sj0);
IkReal x15353=(sj2*x15352);
IkReal x15354=(cj5*cj6*r11);
IkReal x15355=((1.0)*x15346);
IkReal x15356=(cj6*x15345);
IkReal x15357=(sj5*x15345);
IkReal x15358=(cj6*x15346);
IkReal x15359=(sj5*x15355);
IkReal x15360=((1.0)*sj6*x15345);
evalcond[0]=((((-1.0)*r21*sj6*x15355))+((r22*x15357))+((r20*x15345*x15348))+((x15351*x15356))+((r20*x15358)));
evalcond[1]=((((-1.0)*r22*x15359))+(((-1.0)*r20*x15348*x15355))+(((-1.0)*cj6*x15351*x15355))+((r20*x15356))+(((-1.0)*r21*x15360)));
evalcond[2]=(((cj2*sj0))+((r10*x15358))+((r12*x15357))+x15350+((x15345*x15354))+((r10*x15345*x15348))+(((-1.0)*r11*sj6*x15355)));
evalcond[3]=((((-1.0)*x15353))+x15347+((x15349*x15356))+((r02*x15357))+(((-1.0)*r01*sj6*x15355))+((r00*x15345*x15348))+((r00*x15358)));
evalcond[4]=((((-1.0)*r10*x15348*x15355))+((r10*x15356))+(((-1.0)*x15353))+(((-1.0)*r11*x15360))+(((-1.0)*r12*x15359))+(((-1.0)*x15354*x15355))+x15347);
evalcond[5]=((((-1.0)*cj6*x15349*x15355))+(((-1.0)*r00*x15348*x15355))+(((-1.0)*r02*x15359))+(((-1.0)*cj2*x15352))+(((-1.0)*x15350))+(((-1.0)*r01*x15360))+((r00*x15356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15361=(r21*sj6);
IkReal x15362=(sj0*sj2);
IkReal x15363=((1.0)*cj6);
IkReal x15364=(cj5*sj6);
IkReal x15365=(cj0*cj2);
IkReal x15366=(cj5*r21);
IkReal x15367=((1.0)*sj5);
IkReal x15368=(r20*x15365);
CheckValue<IkReal> x15369 = IKatan2WithCheck(IkReal((((r22*sj5*x15365))+(((-1.0)*r20*x15362*x15364))+(((-1.0)*r22*x15362*x15367))+((cj6*x15365*x15366))+(((-1.0)*x15362*x15363*x15366))+((x15364*x15368)))),(((cj6*r20*x15362))+(((-1.0)*x15363*x15368))+((x15361*x15365))+(((-1.0)*x15361*x15362))),IKFAST_ATAN2_MAGTHRESH);
if(!x15369.valid){
continue;
}
CheckValue<IkReal> x15370=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x15367))+(((-1.0)*r11*sj5*x15363)))),-1);
if(!x15370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15369.value)+(((1.5707963267949)*(x15370.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15371=IKcos(j4);
IkReal x15372=IKsin(j4);
IkReal x15373=(cj0*cj2);
IkReal x15374=(cj5*sj6);
IkReal x15375=(cj5*r01);
IkReal x15376=(cj0*sj2);
IkReal x15377=(cj5*r21);
IkReal x15378=((1.0)*sj0);
IkReal x15379=(sj2*x15378);
IkReal x15380=(cj5*cj6*r11);
IkReal x15381=((1.0)*x15372);
IkReal x15382=(cj6*x15371);
IkReal x15383=(sj5*x15371);
IkReal x15384=(cj6*x15372);
IkReal x15385=(sj5*x15381);
IkReal x15386=((1.0)*sj6*x15371);
evalcond[0]=(((r22*x15383))+((x15377*x15382))+((r20*x15371*x15374))+(((-1.0)*r21*sj6*x15381))+((r20*x15384)));
evalcond[1]=((((-1.0)*r21*x15386))+(((-1.0)*r22*x15385))+(((-1.0)*cj6*x15377*x15381))+((r20*x15382))+(((-1.0)*r20*x15374*x15381)));
evalcond[2]=(((cj2*sj0))+((x15371*x15380))+((r12*x15383))+((r10*x15384))+x15376+((r10*x15371*x15374))+(((-1.0)*r11*sj6*x15381)));
evalcond[3]=(x15373+((r02*x15383))+((r00*x15371*x15374))+((x15375*x15382))+(((-1.0)*x15379))+(((-1.0)*r01*sj6*x15381))+((r00*x15384)));
evalcond[4]=((((-1.0)*r10*x15374*x15381))+((r10*x15382))+x15373+(((-1.0)*r12*x15385))+(((-1.0)*r11*x15386))+(((-1.0)*x15380*x15381))+(((-1.0)*x15379)));
evalcond[5]=((((-1.0)*cj6*x15375*x15381))+(((-1.0)*x15376))+(((-1.0)*cj2*x15378))+(((-1.0)*r02*x15385))+(((-1.0)*r00*x15374*x15381))+(((-1.0)*r01*x15386))+((r00*x15382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15387=(cj5*r21);
IkReal x15388=(cj0*sj2);
IkReal x15389=(r22*sj5);
IkReal x15390=((1.0)*r20);
IkReal x15391=(cj5*r20);
IkReal x15392=(cj2*cj6*sj0);
IkReal x15393=(cj2*sj0*sj6);
CheckValue<IkReal> x15394 = IKatan2WithCheck(IkReal((((cj6*x15387*x15388))+((x15388*x15389))+((sj6*x15388*x15391))+((x15391*x15393))+((cj2*sj0*x15389))+((x15387*x15392)))),(((r21*x15393))+((r21*sj6*x15388))+(((-1.0)*x15390*x15392))+(((-1.0)*cj6*x15388*x15390))),IKFAST_ATAN2_MAGTHRESH);
if(!x15394.valid){
continue;
}
CheckValue<IkReal> x15395=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15395.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15394.value)+(((1.5707963267949)*(x15395.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15396=IKcos(j4);
IkReal x15397=IKsin(j4);
IkReal x15398=(cj0*cj2);
IkReal x15399=(cj5*sj6);
IkReal x15400=(cj5*r01);
IkReal x15401=(cj0*sj2);
IkReal x15402=(cj5*r21);
IkReal x15403=((1.0)*sj0);
IkReal x15404=(sj2*x15403);
IkReal x15405=(cj5*cj6*r11);
IkReal x15406=((1.0)*x15397);
IkReal x15407=(cj6*x15396);
IkReal x15408=(sj5*x15396);
IkReal x15409=(cj6*x15397);
IkReal x15410=(sj5*x15406);
IkReal x15411=((1.0)*sj6*x15396);
evalcond[0]=(((r20*x15396*x15399))+(((-1.0)*r21*sj6*x15406))+((r20*x15409))+((x15402*x15407))+((r22*x15408)));
evalcond[1]=((((-1.0)*r21*x15411))+(((-1.0)*r22*x15410))+(((-1.0)*cj6*x15402*x15406))+((r20*x15407))+(((-1.0)*r20*x15399*x15406)));
evalcond[2]=(((cj2*sj0))+((r12*x15408))+(((-1.0)*r11*sj6*x15406))+x15401+((r10*x15409))+((x15396*x15405))+((r10*x15396*x15399)));
evalcond[3]=((((-1.0)*x15404))+((x15400*x15407))+((r00*x15396*x15399))+x15398+(((-1.0)*r01*sj6*x15406))+((r00*x15409))+((r02*x15408)));
evalcond[4]=((((-1.0)*x15404))+(((-1.0)*r10*x15399*x15406))+(((-1.0)*r11*x15411))+(((-1.0)*x15405*x15406))+x15398+(((-1.0)*r12*x15410))+((r10*x15407)));
evalcond[5]=((((-1.0)*x15401))+(((-1.0)*r01*x15411))+(((-1.0)*cj2*x15403))+(((-1.0)*r00*x15399*x15406))+((r00*x15407))+(((-1.0)*r02*x15410))+(((-1.0)*cj6*x15400*x15406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15412=(cj1*r12);
IkReal x15413=(cj5*r02);
IkReal x15414=((69.0)*sj2);
IkReal x15415=((69.0)*cj1);
IkReal x15416=(cj6*r11);
IkReal x15417=(r10*sj6);
IkReal x15418=(cj6*r01*sj5);
IkReal x15419=(r00*sj5*sj6);
IkReal x15420=((374.29)*cj1*sj5);
IkReal x15421=((10.0)*cj1*cj5);
CheckValue<IkReal> x15422=IKPowWithIntegerCheck(((((364.42)*(cj1*cj1)))+x15415+(((-1.0)*cj2*sj1*x15415))),-1);
if(!x15422.valid){
continue;
}
CheckValue<IkReal> x15423=IKPowWithIntegerCheck(cj1,-1);
if(!x15423.valid){
continue;
}
if( IKabs(((x15422.value)*(((((-1.0)*x15416*x15421))+(((-374.29)*cj5*x15412))+(((1000.0)*cj1*py))+((x15417*x15420))+(((-1.0)*x15417*x15421))+((x15416*x15420))+((x15413*x15414))+(((-1.0)*x15414*x15419))+(((-1.0)*x15414*x15418))+(((-10.0)*sj5*x15412)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15423.value)*(((((-1.0)*x15413))+x15418+x15419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15422.value)*(((((-1.0)*x15416*x15421))+(((-374.29)*cj5*x15412))+(((1000.0)*cj1*py))+((x15417*x15420))+(((-1.0)*x15417*x15421))+((x15416*x15420))+((x15413*x15414))+(((-1.0)*x15414*x15419))+(((-1.0)*x15414*x15418))+(((-10.0)*sj5*x15412))))))+IKsqr(((x15423.value)*(((((-1.0)*x15413))+x15418+x15419))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15422.value)*(((((-1.0)*x15416*x15421))+(((-374.29)*cj5*x15412))+(((1000.0)*cj1*py))+((x15417*x15420))+(((-1.0)*x15417*x15421))+((x15416*x15420))+((x15413*x15414))+(((-1.0)*x15414*x15419))+(((-1.0)*x15414*x15418))+(((-10.0)*sj5*x15412))))), ((x15423.value)*(((((-1.0)*x15413))+x15418+x15419))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x15424=IKcos(j0);
IkReal x15425=IKsin(j0);
IkReal x15426=((0.01)*cj5);
IkReal x15427=(cj6*r11);
IkReal x15428=(r10*sj6);
IkReal x15429=((0.37429)*sj5);
IkReal x15430=(cj5*r12);
IkReal x15431=((1.0)*cj1);
IkReal x15432=((0.36442)*cj1);
IkReal x15433=(r00*sj6);
IkReal x15434=(cj6*r01);
IkReal x15435=(cj5*r02);
IkReal x15436=(cj2*sj1);
IkReal x15437=((0.01)*sj5);
IkReal x15438=((0.069)*x15425);
IkReal x15439=((0.069)*x15424);
evalcond[0]=(((sj5*x15434))+((sj5*x15433))+(((-1.0)*x15424*x15431))+(((-1.0)*x15435)));
evalcond[1]=(((sj5*x15427))+((sj5*x15428))+(((-1.0)*x15425*x15431))+(((-1.0)*x15430)));
evalcond[2]=((((-1.0)*x15429*x15433))+(((-1.0)*x15429*x15434))+(((-1.0)*sj2*x15438))+((r02*x15437))+(((-1.0)*x15436*x15439))+(((0.37429)*x15435))+(((-1.0)*px))+x15439+((x15426*x15434))+((x15426*x15433))+((x15424*x15432)));
evalcond[3]=(((x15425*x15432))+((sj2*x15439))+(((-1.0)*x15428*x15429))+(((-1.0)*x15427*x15429))+(((-1.0)*x15436*x15438))+(((0.37429)*x15430))+((r12*x15437))+(((-1.0)*py))+x15438+((x15426*x15428))+((x15426*x15427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15440=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15440;
j4eval[1]=IKsign(x15440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15441=((1.0)*sj5);
IkReal x15442=(((cj5*r12))+(((-1.0)*r10*sj6*x15441))+(((-1.0)*cj6*r11*x15441)));
j4eval[0]=x15442;
j4eval[1]=IKsign(x15442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15443=cj5*cj5;
IkReal x15444=cj6*cj6;
IkReal x15445=r22*r22;
IkReal x15446=r21*r21;
IkReal x15447=r20*r20;
IkReal x15448=((1.0)*cj5);
IkReal x15449=(cj6*r21);
IkReal x15450=(r20*sj6);
IkReal x15451=(cj1*cj2);
IkReal x15452=(cj1*sj2);
IkReal x15453=(r22*sj5);
IkReal x15454=(cj6*r20);
IkReal x15455=((2.0)*cj5);
IkReal x15456=(sj6*x15451);
IkReal x15457=((1.0)*x15446);
IkReal x15458=(x15444*x15447);
IkReal x15459=(((x15444*x15446))+(((2.0)*x15449*x15450))+((x15443*x15458))+(((-2.0)*x15443*x15449*x15450))+((x15443*x15445))+(((-1.0)*x15457))+(((-1.0)*x15450*x15453*x15455))+(((-1.0)*x15449*x15453*x15455))+(((-1.0)*x15443*x15447))+(((-1.0)*x15443*x15444*x15457))+(((-1.0)*x15445))+(((-1.0)*x15458)));
j4eval[0]=x15459;
j4eval[1]=IKsign(x15459);
j4eval[2]=((IKabs(((((-1.0)*x15451*x15454))+(((-1.0)*x15448*x15450*x15452))+(((-1.0)*x15452*x15453))+(((-1.0)*x15448*x15449*x15452))+((r21*x15456)))))+(IKabs(((((-1.0)*x15451*x15453))+(((-1.0)*x15448*x15450*x15451))+(((-1.0)*r21*sj6*x15452))+(((-1.0)*x15448*x15449*x15451))+((x15452*x15454))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x15460=((0.069)*cj0);
IkReal x15461=((0.01)*cj5);
IkReal x15462=(cj6*r11);
IkReal x15463=(r20*sj6);
IkReal x15464=((0.069)*sj0);
IkReal x15465=((0.01)*sj5);
IkReal x15466=((1.0)*cj5);
IkReal x15467=(cj6*r01);
IkReal x15468=((0.37429)*cj5);
IkReal x15469=((0.37429)*sj5);
IkReal x15470=(cj6*r21);
IkReal x15471=(r10*sj5*sj6);
IkReal x15472=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((r22*x15468))+((r22*x15465))+((x15461*x15470))+((x15461*x15463))+(((-1.0)*pz))+(((-1.0)*x15463*x15469))+(((-1.0)*x15469*x15470)));
evalcond[2]=(((r00*sj6*x15461))+((r02*x15468))+((r02*x15465))+(((-1.0)*sj2*x15464))+(((-1.0)*cj2*x15460))+((x15461*x15467))+(((-1.0)*px))+(((-1.0)*x15467*x15469))+x15460+(((-1.0)*r00*sj6*x15469)));
evalcond[3]=((((-1.0)*cj2*x15464))+(((-1.0)*r10*sj6*x15469))+((x15461*x15462))+(((-1.0)*x15462*x15469))+((r10*sj6*x15461))+(((-1.0)*py))+x15464+((r12*x15465))+((r12*x15468))+((sj2*x15460)));
evalcond[4]=((1.0)+(((-1.0)*r22*x15466))+((sj5*x15470))+((sj5*x15463)));
evalcond[5]=(x15472+((sj5*x15467))+(((-1.0)*r02*x15466)));
evalcond[6]=(x15471+((sj5*x15462))+(((-1.0)*r12*x15466)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15473=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15473;
j4eval[1]=IKsign(x15473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15474=((1.0)*sj5);
IkReal x15475=(((cj5*r12))+(((-1.0)*r10*sj6*x15474))+(((-1.0)*cj6*r11*x15474)));
j4eval[0]=x15475;
j4eval[1]=IKsign(x15475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15476=cj6*cj6;
IkReal x15477=cj5*cj5;
IkReal x15478=(cj5*sj5);
IkReal x15479=(cj6*r21);
IkReal x15480=((1.0)*r11);
IkReal x15481=(r10*r20);
IkReal x15482=(r10*sj6);
IkReal x15483=(r12*r22);
IkReal x15484=(r21*x15476);
IkReal x15485=(cj6*r20*sj6);
IkReal x15486=(r11*x15477);
IkReal x15487=((1.0)*x15477);
IkReal x15488=(((r11*r21))+((cj6*r11*r22*x15478))+((x15485*x15486))+(((-1.0)*x15476*x15481*x15487))+(((-1.0)*x15479*x15482))+((r12*x15478*x15479))+((x15477*x15479*x15482))+(((-1.0)*x15480*x15485))+(((-1.0)*x15480*x15484))+x15483+((r12*r20*sj6*x15478))+((x15484*x15486))+(((-1.0)*x15483*x15487))+((x15477*x15481))+((x15476*x15481))+((r22*x15478*x15482)));
j4eval[0]=x15488;
j4eval[1]=IKsign(x15488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15489=cj6*cj6;
IkReal x15490=cj5*cj5;
IkReal x15491=((1.0)*r11);
IkReal x15492=(cj6*r20);
IkReal x15493=(cj0*cj2);
IkReal x15494=(cj5*r20);
IkReal x15495=(r12*r22);
IkReal x15496=(cj6*r21);
IkReal x15497=(sj0*sj2);
IkReal x15498=(r22*sj5);
IkReal x15499=(r12*sj5);
IkReal x15500=(r10*sj6);
IkReal x15501=(r21*x15489);
IkReal x15502=(sj6*x15497);
IkReal x15503=((1.0)*x15490);
IkReal x15504=(r10*x15490);
IkReal x15505=(r11*x15490);
IkReal x15506=(r10*r20*x15489);
CheckValue<IkReal> x15507=IKPowWithIntegerCheck(IKsign((((cj5*x15498*x15500))+((cj5*x15496*x15499))+(((-1.0)*sj6*x15491*x15492))+((x15501*x15505))+((r11*r21))+((cj5*cj6*r11*x15498))+(((-1.0)*x15491*x15501))+((sj6*x15494*x15499))+(((-1.0)*x15503*x15506))+((sj6*x15492*x15505))+(((-1.0)*x15495*x15503))+x15495+((x15490*x15496*x15500))+(((-1.0)*x15496*x15500))+x15506+((r20*x15504)))),-1);
if(!x15507.valid){
continue;
}
CheckValue<IkReal> x15508 = IKatan2WithCheck(IkReal((((cj5*x15496*x15497))+((x15497*x15498))+((cj5*x15493*x15496))+((x15493*x15498))+((sj6*x15493*x15494))+((x15494*x15502)))),((((-1.0)*x15492*x15497))+(((-1.0)*x15492*x15493))+((r21*x15502))+((r21*sj6*x15493))),IKFAST_ATAN2_MAGTHRESH);
if(!x15508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15507.value)))+(x15508.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15509=IKcos(j4);
IkReal x15510=IKsin(j4);
IkReal x15511=(cj0*sj2);
IkReal x15512=(cj0*cj2);
IkReal x15513=(cj5*sj6);
IkReal x15514=(cj5*r01);
IkReal x15515=(cj5*r21);
IkReal x15516=((1.0)*sj0);
IkReal x15517=(cj2*x15516);
IkReal x15518=(cj5*cj6*r11);
IkReal x15519=((1.0)*x15510);
IkReal x15520=(cj6*x15509);
IkReal x15521=(sj5*x15509);
IkReal x15522=(cj6*x15510);
IkReal x15523=(sj5*x15519);
IkReal x15524=((1.0)*sj6*x15509);
evalcond[0]=((((-1.0)*r21*sj6*x15519))+((r20*x15522))+((r20*x15509*x15513))+((x15515*x15520))+((r22*x15521)));
evalcond[1]=((((-1.0)*r21*x15524))+(((-1.0)*r20*x15513*x15519))+((r20*x15520))+(((-1.0)*r22*x15523))+(((-1.0)*cj6*x15515*x15519)));
evalcond[2]=(((r10*x15522))+((x15509*x15518))+((r10*x15509*x15513))+((r12*x15521))+(((-1.0)*x15517))+x15511+(((-1.0)*r11*sj6*x15519)));
evalcond[3]=(((x15514*x15520))+((r02*x15521))+((r00*x15522))+((r00*x15509*x15513))+(((-1.0)*r01*sj6*x15519))+(((-1.0)*sj2*x15516))+(((-1.0)*x15512)));
evalcond[4]=((((-1.0)*r10*x15513*x15519))+(((-1.0)*r11*x15524))+((r10*x15520))+(((-1.0)*r12*x15523))+((sj0*sj2))+x15512+(((-1.0)*x15518*x15519)));
evalcond[5]=((((-1.0)*cj6*x15514*x15519))+((r00*x15520))+(((-1.0)*r01*x15524))+(((-1.0)*r02*x15523))+(((-1.0)*x15517))+x15511+(((-1.0)*r00*x15513*x15519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15525=((1.0)*r21);
IkReal x15526=(sj0*sj2);
IkReal x15527=(cj0*cj2);
IkReal x15528=((1.0)*sj5);
IkReal x15529=(cj6*x15527);
IkReal x15530=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x15531=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x15528))+(((-1.0)*cj6*r11*x15528)))),-1);
if(!x15531.valid){
continue;
}
CheckValue<IkReal> x15532 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15526*x15528))+(((-1.0)*x15526*x15530))+(((-1.0)*cj5*x15525*x15529))+(((-1.0)*x15527*x15530))+(((-1.0)*r22*x15527*x15528))+(((-1.0)*cj5*cj6*x15525*x15526)))),(((r20*x15529))+((cj6*r20*x15526))+(((-1.0)*sj6*x15525*x15527))+(((-1.0)*sj6*x15525*x15526))),IKFAST_ATAN2_MAGTHRESH);
if(!x15532.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15531.value)))+(x15532.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15533=IKcos(j4);
IkReal x15534=IKsin(j4);
IkReal x15535=(cj0*sj2);
IkReal x15536=(cj0*cj2);
IkReal x15537=(cj5*sj6);
IkReal x15538=(cj5*r01);
IkReal x15539=(cj5*r21);
IkReal x15540=((1.0)*sj0);
IkReal x15541=(cj2*x15540);
IkReal x15542=(cj5*cj6*r11);
IkReal x15543=((1.0)*x15534);
IkReal x15544=(cj6*x15533);
IkReal x15545=(sj5*x15533);
IkReal x15546=(cj6*x15534);
IkReal x15547=(sj5*x15543);
IkReal x15548=((1.0)*sj6*x15533);
evalcond[0]=(((r20*x15533*x15537))+((r20*x15546))+(((-1.0)*r21*sj6*x15543))+((x15539*x15544))+((r22*x15545)));
evalcond[1]=((((-1.0)*r21*x15548))+((r20*x15544))+(((-1.0)*cj6*x15539*x15543))+(((-1.0)*r22*x15547))+(((-1.0)*r20*x15537*x15543)));
evalcond[2]=(((x15533*x15542))+((r10*x15546))+(((-1.0)*x15541))+(((-1.0)*r11*sj6*x15543))+x15535+((r12*x15545))+((r10*x15533*x15537)));
evalcond[3]=(((r02*x15545))+(((-1.0)*r01*sj6*x15543))+(((-1.0)*x15536))+((r00*x15546))+(((-1.0)*sj2*x15540))+((x15538*x15544))+((r00*x15533*x15537)));
evalcond[4]=((((-1.0)*x15542*x15543))+((r10*x15544))+((sj0*sj2))+(((-1.0)*r10*x15537*x15543))+x15536+(((-1.0)*r11*x15548))+(((-1.0)*r12*x15547)));
evalcond[5]=((((-1.0)*r00*x15537*x15543))+(((-1.0)*x15541))+(((-1.0)*cj6*x15538*x15543))+((r00*x15544))+(((-1.0)*r01*x15548))+x15535+(((-1.0)*r02*x15547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15549=(r22*sj5);
IkReal x15550=(cj6*r20);
IkReal x15551=(cj0*sj2);
IkReal x15552=(r21*sj6);
IkReal x15553=((1.0)*cj2*sj0);
IkReal x15554=(cj5*cj6*r21);
IkReal x15555=(cj5*r20*sj6);
CheckValue<IkReal> x15556=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15556.valid){
continue;
}
CheckValue<IkReal> x15557 = IKatan2WithCheck(IkReal((((x15551*x15555))+((x15551*x15554))+((x15549*x15551))+(((-1.0)*x15553*x15555))+(((-1.0)*x15553*x15554))+(((-1.0)*x15549*x15553)))),(((x15551*x15552))+(((-1.0)*x15552*x15553))+((cj2*sj0*x15550))+(((-1.0)*x15550*x15551))),IKFAST_ATAN2_MAGTHRESH);
if(!x15557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15556.value)))+(x15557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15558=IKcos(j4);
IkReal x15559=IKsin(j4);
IkReal x15560=(cj0*sj2);
IkReal x15561=(cj0*cj2);
IkReal x15562=(cj5*sj6);
IkReal x15563=(cj5*r01);
IkReal x15564=(cj5*r21);
IkReal x15565=((1.0)*sj0);
IkReal x15566=(cj2*x15565);
IkReal x15567=(cj5*cj6*r11);
IkReal x15568=((1.0)*x15559);
IkReal x15569=(cj6*x15558);
IkReal x15570=(sj5*x15558);
IkReal x15571=(cj6*x15559);
IkReal x15572=(sj5*x15568);
IkReal x15573=((1.0)*sj6*x15558);
evalcond[0]=(((r22*x15570))+((r20*x15558*x15562))+((x15564*x15569))+((r20*x15571))+(((-1.0)*r21*sj6*x15568)));
evalcond[1]=((((-1.0)*r20*x15562*x15568))+(((-1.0)*r22*x15572))+(((-1.0)*r21*x15573))+(((-1.0)*cj6*x15564*x15568))+((r20*x15569)));
evalcond[2]=(((r10*x15571))+((r12*x15570))+((x15558*x15567))+x15560+(((-1.0)*r11*sj6*x15568))+((r10*x15558*x15562))+(((-1.0)*x15566)));
evalcond[3]=(((r00*x15558*x15562))+(((-1.0)*sj2*x15565))+((x15563*x15569))+((r02*x15570))+((r00*x15571))+(((-1.0)*r01*sj6*x15568))+(((-1.0)*x15561)));
evalcond[4]=((((-1.0)*r12*x15572))+((r10*x15569))+(((-1.0)*r11*x15573))+((sj0*sj2))+(((-1.0)*x15567*x15568))+x15561+(((-1.0)*r10*x15562*x15568)));
evalcond[5]=((((-1.0)*cj6*x15563*x15568))+(((-1.0)*r02*x15572))+(((-1.0)*r01*x15573))+x15560+((r00*x15569))+(((-1.0)*r00*x15562*x15568))+(((-1.0)*x15566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15574=((0.069)*cj0);
IkReal x15575=((0.01)*cj5);
IkReal x15576=(cj6*r11);
IkReal x15577=(r20*sj6);
IkReal x15578=((0.069)*sj0);
IkReal x15579=((0.01)*sj5);
IkReal x15580=((1.0)*cj5);
IkReal x15581=(cj6*r01);
IkReal x15582=((0.37429)*cj5);
IkReal x15583=((0.37429)*sj5);
IkReal x15584=(cj6*r21);
IkReal x15585=(r10*sj5*sj6);
IkReal x15586=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((r22*x15579))+((r22*x15582))+(((-1.0)*pz))+((x15575*x15584))+((x15575*x15577))+(((-1.0)*x15577*x15583))+(((-1.0)*x15583*x15584)));
evalcond[2]=((((-1.0)*sj2*x15578))+((cj2*x15574))+(((-1.0)*r00*sj6*x15583))+(((-1.0)*px))+((r02*x15579))+((x15575*x15581))+(((-1.0)*x15581*x15583))+((r00*sj6*x15575))+x15574+((r02*x15582)));
evalcond[3]=(((cj2*x15578))+((r12*x15582))+((r12*x15579))+(((-1.0)*py))+((sj2*x15574))+((r10*sj6*x15575))+x15578+((x15575*x15576))+(((-1.0)*x15576*x15583))+(((-1.0)*r10*sj6*x15583)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x15580))+((sj5*x15577))+((sj5*x15584)));
evalcond[5]=((((-1.0)*r02*x15580))+((sj5*x15581))+x15586);
evalcond[6]=(((sj5*x15576))+(((-1.0)*r12*x15580))+x15585);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15587=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15587;
j4eval[1]=IKsign(x15587);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15588=((1.0)*sj5);
IkReal x15589=(((cj5*r12))+(((-1.0)*cj6*r11*x15588))+(((-1.0)*r10*sj6*x15588)));
j4eval[0]=x15589;
j4eval[1]=IKsign(x15589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15590=cj6*cj6;
IkReal x15591=cj5*cj5;
IkReal x15592=(cj5*sj5);
IkReal x15593=(cj6*r21);
IkReal x15594=((1.0)*r11);
IkReal x15595=(r10*r20);
IkReal x15596=(r10*sj6);
IkReal x15597=(r12*r22);
IkReal x15598=(r21*x15590);
IkReal x15599=(cj6*r20*sj6);
IkReal x15600=(r11*x15591);
IkReal x15601=((1.0)*x15591);
IkReal x15602=(((cj6*r11*r22*x15592))+(((-1.0)*x15593*x15596))+((x15590*x15595))+((r22*x15592*x15596))+(((-1.0)*x15590*x15595*x15601))+((r11*r21))+((r12*r20*sj6*x15592))+((x15591*x15593*x15596))+((x15591*x15595))+x15597+(((-1.0)*x15594*x15598))+(((-1.0)*x15594*x15599))+((x15598*x15600))+((r12*x15592*x15593))+((x15599*x15600))+(((-1.0)*x15597*x15601)));
j4eval[0]=x15602;
j4eval[1]=IKsign(x15602);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15603=cj6*cj6;
IkReal x15604=cj5*cj5;
IkReal x15605=((1.0)*r11);
IkReal x15606=((1.0)*r20);
IkReal x15607=(cj0*cj2);
IkReal x15608=(r12*r22);
IkReal x15609=(cj6*sj6);
IkReal x15610=((1.0)*r21);
IkReal x15611=(r22*sj5);
IkReal x15612=(sj0*sj2);
IkReal x15613=(r12*sj5);
IkReal x15614=(cj5*sj6);
IkReal x15615=(r21*x15603);
IkReal x15616=(cj5*x15612);
IkReal x15617=(r10*x15604);
IkReal x15618=(r11*x15604);
IkReal x15619=(cj5*cj6*r21);
CheckValue<IkReal> x15620=IKPowWithIntegerCheck(IKsign((((r10*x15611*x15614))+(((-1.0)*r10*x15609*x15610))+((r21*x15609*x15617))+((r20*x15609*x15618))+((r11*r21))+((cj5*cj6*r11*x15611))+(((-1.0)*x15604*x15608))+x15608+((r10*r20*x15603))+((x15615*x15618))+(((-1.0)*x15603*x15606*x15617))+((r20*x15617))+((r20*x15613*x15614))+((x15613*x15619))+(((-1.0)*x15605*x15615))+(((-1.0)*r20*x15605*x15609)))),-1);
if(!x15620.valid){
continue;
}
CheckValue<IkReal> x15621 = IKatan2WithCheck(IkReal(((((-1.0)*x15606*x15612*x15614))+((r20*x15607*x15614))+(((-1.0)*x15611*x15612))+(((-1.0)*cj6*x15610*x15616))+((x15607*x15619))+((x15607*x15611)))),((((-1.0)*cj6*x15606*x15607))+(((-1.0)*sj6*x15610*x15612))+((cj6*r20*x15612))+((r21*sj6*x15607))),IKFAST_ATAN2_MAGTHRESH);
if(!x15621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15620.value)))+(x15621.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15622=IKcos(j4);
IkReal x15623=IKsin(j4);
IkReal x15624=(cj0*cj2);
IkReal x15625=(cj5*sj6);
IkReal x15626=(cj5*r01);
IkReal x15627=(cj0*sj2);
IkReal x15628=(cj5*r21);
IkReal x15629=((1.0)*sj0);
IkReal x15630=(sj2*x15629);
IkReal x15631=(cj5*cj6*r11);
IkReal x15632=((1.0)*x15623);
IkReal x15633=(cj6*x15622);
IkReal x15634=(sj5*x15622);
IkReal x15635=(cj6*x15623);
IkReal x15636=(sj5*x15632);
IkReal x15637=((1.0)*sj6*x15622);
evalcond[0]=(((r20*x15635))+(((-1.0)*r21*sj6*x15632))+((r22*x15634))+((r20*x15622*x15625))+((x15628*x15633)));
evalcond[1]=((((-1.0)*r21*x15637))+((r20*x15633))+(((-1.0)*cj6*x15628*x15632))+(((-1.0)*r20*x15625*x15632))+(((-1.0)*r22*x15636)));
evalcond[2]=(((cj2*sj0))+x15627+((r12*x15634))+((x15622*x15631))+((r10*x15622*x15625))+(((-1.0)*r11*sj6*x15632))+((r10*x15635)));
evalcond[3]=(((r02*x15634))+((r00*x15635))+((r00*x15622*x15625))+((x15626*x15633))+x15624+(((-1.0)*x15630))+(((-1.0)*r01*sj6*x15632)));
evalcond[4]=((((-1.0)*r12*x15636))+(((-1.0)*r10*x15625*x15632))+(((-1.0)*x15631*x15632))+(((-1.0)*r11*x15637))+x15624+(((-1.0)*x15630))+((r10*x15633)));
evalcond[5]=(((r00*x15633))+(((-1.0)*r01*x15637))+(((-1.0)*x15627))+(((-1.0)*r00*x15625*x15632))+(((-1.0)*cj6*x15626*x15632))+(((-1.0)*r02*x15636))+(((-1.0)*cj2*x15629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15638=(r21*sj6);
IkReal x15639=(sj0*sj2);
IkReal x15640=((1.0)*cj6);
IkReal x15641=(cj5*sj6);
IkReal x15642=(cj0*cj2);
IkReal x15643=(cj5*r21);
IkReal x15644=((1.0)*sj5);
IkReal x15645=(r20*x15642);
CheckValue<IkReal> x15646=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x15644))+(((-1.0)*r11*sj5*x15640)))),-1);
if(!x15646.valid){
continue;
}
CheckValue<IkReal> x15647 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x15639*x15641))+((r22*sj5*x15642))+((cj6*x15642*x15643))+((x15641*x15645))+(((-1.0)*x15639*x15640*x15643))+(((-1.0)*r22*x15639*x15644)))),(((cj6*r20*x15639))+(((-1.0)*x15638*x15639))+((x15638*x15642))+(((-1.0)*x15640*x15645))),IKFAST_ATAN2_MAGTHRESH);
if(!x15647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15646.value)))+(x15647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15648=IKcos(j4);
IkReal x15649=IKsin(j4);
IkReal x15650=(cj0*cj2);
IkReal x15651=(cj5*sj6);
IkReal x15652=(cj5*r01);
IkReal x15653=(cj0*sj2);
IkReal x15654=(cj5*r21);
IkReal x15655=((1.0)*sj0);
IkReal x15656=(sj2*x15655);
IkReal x15657=(cj5*cj6*r11);
IkReal x15658=((1.0)*x15649);
IkReal x15659=(cj6*x15648);
IkReal x15660=(sj5*x15648);
IkReal x15661=(cj6*x15649);
IkReal x15662=(sj5*x15658);
IkReal x15663=((1.0)*sj6*x15648);
evalcond[0]=(((x15654*x15659))+((r20*x15648*x15651))+((r20*x15661))+(((-1.0)*r21*sj6*x15658))+((r22*x15660)));
evalcond[1]=((((-1.0)*r20*x15651*x15658))+(((-1.0)*r21*x15663))+(((-1.0)*cj6*x15654*x15658))+(((-1.0)*r22*x15662))+((r20*x15659)));
evalcond[2]=(((cj2*sj0))+((r10*x15661))+((r12*x15660))+x15653+((r10*x15648*x15651))+((x15648*x15657))+(((-1.0)*r11*sj6*x15658)));
evalcond[3]=(((r02*x15660))+((r00*x15648*x15651))+((r00*x15661))+x15650+(((-1.0)*x15656))+((x15652*x15659))+(((-1.0)*r01*sj6*x15658)));
evalcond[4]=(((r10*x15659))+(((-1.0)*x15657*x15658))+x15650+(((-1.0)*x15656))+(((-1.0)*r12*x15662))+(((-1.0)*r11*x15663))+(((-1.0)*r10*x15651*x15658)));
evalcond[5]=((((-1.0)*cj6*x15652*x15658))+((r00*x15659))+(((-1.0)*r00*x15651*x15658))+(((-1.0)*cj2*x15655))+(((-1.0)*x15653))+(((-1.0)*r01*x15663))+(((-1.0)*r02*x15662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15664=(cj5*r21);
IkReal x15665=(cj0*sj2);
IkReal x15666=(r22*sj5);
IkReal x15667=((1.0)*r20);
IkReal x15668=(cj5*r20);
IkReal x15669=(cj2*cj6*sj0);
IkReal x15670=(cj2*sj0*sj6);
CheckValue<IkReal> x15671=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15671.valid){
continue;
}
CheckValue<IkReal> x15672 = IKatan2WithCheck(IkReal((((sj6*x15665*x15668))+((cj6*x15664*x15665))+((x15668*x15670))+((x15665*x15666))+((cj2*sj0*x15666))+((x15664*x15669)))),((((-1.0)*cj6*x15665*x15667))+(((-1.0)*x15667*x15669))+((r21*x15670))+((r21*sj6*x15665))),IKFAST_ATAN2_MAGTHRESH);
if(!x15672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15671.value)))+(x15672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15673=IKcos(j4);
IkReal x15674=IKsin(j4);
IkReal x15675=(cj0*cj2);
IkReal x15676=(cj5*sj6);
IkReal x15677=(cj5*r01);
IkReal x15678=(cj0*sj2);
IkReal x15679=(cj5*r21);
IkReal x15680=((1.0)*sj0);
IkReal x15681=(sj2*x15680);
IkReal x15682=(cj5*cj6*r11);
IkReal x15683=((1.0)*x15674);
IkReal x15684=(cj6*x15673);
IkReal x15685=(sj5*x15673);
IkReal x15686=(cj6*x15674);
IkReal x15687=(sj5*x15683);
IkReal x15688=((1.0)*sj6*x15673);
evalcond[0]=(((r20*x15686))+(((-1.0)*r21*sj6*x15683))+((x15679*x15684))+((r22*x15685))+((r20*x15673*x15676)));
evalcond[1]=((((-1.0)*r20*x15676*x15683))+((r20*x15684))+(((-1.0)*r21*x15688))+(((-1.0)*cj6*x15679*x15683))+(((-1.0)*r22*x15687)));
evalcond[2]=(((cj2*sj0))+((r10*x15686))+(((-1.0)*r11*sj6*x15683))+((r10*x15673*x15676))+x15678+((x15673*x15682))+((r12*x15685)));
evalcond[3]=(((r00*x15673*x15676))+((r00*x15686))+(((-1.0)*r01*sj6*x15683))+x15675+((x15677*x15684))+((r02*x15685))+(((-1.0)*x15681)));
evalcond[4]=((((-1.0)*r10*x15676*x15683))+((r10*x15684))+x15675+(((-1.0)*x15682*x15683))+(((-1.0)*x15681))+(((-1.0)*r12*x15687))+(((-1.0)*r11*x15688)));
evalcond[5]=((((-1.0)*r00*x15676*x15683))+((r00*x15684))+(((-1.0)*cj2*x15680))+(((-1.0)*cj6*x15677*x15683))+(((-1.0)*r01*x15688))+(((-1.0)*r02*x15687))+(((-1.0)*x15678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15689=cj5*cj5;
IkReal x15690=cj6*cj6;
IkReal x15691=r22*r22;
IkReal x15692=r21*r21;
IkReal x15693=r20*r20;
IkReal x15694=((1.0)*cj5);
IkReal x15695=(cj6*r21);
IkReal x15696=(r20*sj6);
IkReal x15697=(cj1*cj2);
IkReal x15698=(cj1*sj2);
IkReal x15699=(r22*sj5);
IkReal x15700=(cj6*r20);
IkReal x15701=((2.0)*cj5);
IkReal x15702=(sj6*x15697);
IkReal x15703=((1.0)*x15692);
IkReal x15704=(x15690*x15693);
CheckValue<IkReal> x15705 = IKatan2WithCheck(IkReal(((((-1.0)*x15698*x15699))+(((-1.0)*x15694*x15695*x15698))+(((-1.0)*x15694*x15696*x15698))+((r21*x15702))+(((-1.0)*x15697*x15700)))),(((x15698*x15700))+(((-1.0)*x15697*x15699))+(((-1.0)*x15694*x15695*x15697))+(((-1.0)*x15694*x15696*x15697))+(((-1.0)*r21*sj6*x15698))),IKFAST_ATAN2_MAGTHRESH);
if(!x15705.valid){
continue;
}
CheckValue<IkReal> x15706=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15703))+(((-1.0)*x15689*x15690*x15703))+(((-2.0)*x15689*x15695*x15696))+(((-1.0)*x15695*x15699*x15701))+((x15689*x15691))+((x15689*x15704))+(((-1.0)*x15689*x15693))+(((-1.0)*x15696*x15699*x15701))+((x15690*x15692))+(((2.0)*x15695*x15696))+(((-1.0)*x15691))+(((-1.0)*x15704)))),-1);
if(!x15706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15705.value)+(((1.5707963267949)*(x15706.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15707=IKcos(j4);
IkReal x15708=IKsin(j4);
IkReal x15709=(cj0*sj1);
IkReal x15710=((1.0)*cj2);
IkReal x15711=(cj5*sj6);
IkReal x15712=(sj0*sj1);
IkReal x15713=((1.0)*sj6);
IkReal x15714=(cj5*cj6);
IkReal x15715=(r11*x15714);
IkReal x15716=((1.0)*x15708);
IkReal x15717=(sj5*x15707);
IkReal x15718=(r01*x15707);
IkReal x15719=(cj6*x15707);
IkReal x15720=(cj6*x15708);
IkReal x15721=(sj5*x15716);
evalcond[0]=(((r20*x15720))+((r21*x15707*x15714))+((r20*x15707*x15711))+(((-1.0)*r21*x15708*x15713))+((r22*x15717))+(((-1.0)*cj1*x15710)));
evalcond[1]=((((-1.0)*r21*x15707*x15713))+((r20*x15719))+(((-1.0)*r21*x15714*x15716))+((cj1*sj2))+(((-1.0)*r20*x15711*x15716))+(((-1.0)*r22*x15721)));
evalcond[2]=(((r12*x15717))+(((-1.0)*r11*x15708*x15713))+(((-1.0)*x15710*x15712))+((x15707*x15715))+((r10*x15707*x15711))+((r10*x15720))+((cj0*sj2)));
evalcond[3]=(((r00*x15720))+(((-1.0)*r01*x15708*x15713))+((r00*x15707*x15711))+(((-1.0)*x15709*x15710))+(((-1.0)*sj0*sj2))+((x15714*x15718))+((r02*x15717)));
evalcond[4]=((((-1.0)*x15715*x15716))+((cj0*cj2))+(((-1.0)*r10*x15711*x15716))+((sj2*x15712))+(((-1.0)*r11*x15707*x15713))+(((-1.0)*r12*x15721))+((r10*x15719)));
evalcond[5]=((((-1.0)*r00*x15711*x15716))+(((-1.0)*r02*x15721))+(((-1.0)*x15713*x15718))+((r00*x15719))+((sj2*x15709))+(((-1.0)*sj0*x15710))+(((-1.0)*r01*x15714*x15716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15722=(sj0*sj2);
IkReal x15723=((1.0)*r21);
IkReal x15724=((1.0)*sj5);
IkReal x15725=(cj6*r20);
IkReal x15726=(cj5*cj6);
IkReal x15727=(cj1*cj2);
IkReal x15728=(sj6*x15727);
IkReal x15729=(cj0*cj2*sj1);
IkReal x15730=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x15731 = IKatan2WithCheck(IkReal(((((-1.0)*x15723*x15726*x15729))+((cj5*r00*x15728))+(((-1.0)*r22*x15724*x15729))+(((-1.0)*r22*x15722*x15724))+((r02*sj5*x15727))+(((-1.0)*x15722*x15730))+((r01*x15726*x15727))+(((-1.0)*x15722*x15723*x15726))+(((-1.0)*x15729*x15730)))),(((x15722*x15725))+((r01*x15728))+(((-1.0)*cj6*r00*x15727))+((x15725*x15729))+(((-1.0)*sj6*x15722*x15723))+(((-1.0)*sj6*x15723*x15729))),IKFAST_ATAN2_MAGTHRESH);
if(!x15731.valid){
continue;
}
CheckValue<IkReal> x15732=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x15724))+(((-1.0)*r10*sj6*x15724)))),-1);
if(!x15732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15731.value)+(((1.5707963267949)*(x15732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15733=IKcos(j4);
IkReal x15734=IKsin(j4);
IkReal x15735=(cj0*sj1);
IkReal x15736=((1.0)*cj2);
IkReal x15737=(cj5*sj6);
IkReal x15738=(sj0*sj1);
IkReal x15739=((1.0)*sj6);
IkReal x15740=(cj5*cj6);
IkReal x15741=(r11*x15740);
IkReal x15742=((1.0)*x15734);
IkReal x15743=(sj5*x15733);
IkReal x15744=(r01*x15733);
IkReal x15745=(cj6*x15733);
IkReal x15746=(cj6*x15734);
IkReal x15747=(sj5*x15742);
evalcond[0]=(((r22*x15743))+((r21*x15733*x15740))+((r20*x15733*x15737))+((r20*x15746))+(((-1.0)*r21*x15734*x15739))+(((-1.0)*cj1*x15736)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r21*x15733*x15739))+(((-1.0)*r21*x15740*x15742))+((r20*x15745))+(((-1.0)*r22*x15747))+(((-1.0)*r20*x15737*x15742)));
evalcond[2]=((((-1.0)*x15736*x15738))+((r10*x15733*x15737))+((x15733*x15741))+((r12*x15743))+(((-1.0)*r11*x15734*x15739))+((cj0*sj2))+((r10*x15746)));
evalcond[3]=(((r00*x15746))+((r00*x15733*x15737))+(((-1.0)*r01*x15734*x15739))+((x15740*x15744))+((r02*x15743))+(((-1.0)*x15735*x15736))+(((-1.0)*sj0*sj2)));
evalcond[4]=((((-1.0)*r11*x15733*x15739))+(((-1.0)*x15741*x15742))+((cj0*cj2))+(((-1.0)*r10*x15737*x15742))+((sj2*x15738))+(((-1.0)*r12*x15747))+((r10*x15745)));
evalcond[5]=(((r00*x15745))+(((-1.0)*x15739*x15744))+(((-1.0)*r00*x15737*x15742))+((sj2*x15735))+(((-1.0)*r02*x15747))+(((-1.0)*sj0*x15736))+(((-1.0)*r01*x15740*x15742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15748=(cj6*r20);
IkReal x15749=(cj0*sj2);
IkReal x15750=((1.0)*sj6);
IkReal x15751=(cj1*cj2);
IkReal x15752=(cj5*cj6);
IkReal x15753=(cj5*r20);
IkReal x15754=(r22*sj5);
IkReal x15755=(cj2*sj0*sj1);
CheckValue<IkReal> x15756 = IKatan2WithCheck(IkReal((((cj5*r10*sj6*x15751))+((r11*x15751*x15752))+(((-1.0)*x15750*x15753*x15755))+(((-1.0)*r21*x15752*x15755))+((sj6*x15749*x15753))+((x15749*x15754))+((r12*sj5*x15751))+(((-1.0)*x15754*x15755))+((r21*x15749*x15752)))),(((r21*sj6*x15749))+((r11*sj6*x15751))+((x15748*x15755))+(((-1.0)*r21*x15750*x15755))+(((-1.0)*x15748*x15749))+(((-1.0)*cj6*r10*x15751))),IKFAST_ATAN2_MAGTHRESH);
if(!x15756.valid){
continue;
}
CheckValue<IkReal> x15757=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15757.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15756.value)+(((1.5707963267949)*(x15757.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15758=IKcos(j4);
IkReal x15759=IKsin(j4);
IkReal x15760=(cj0*sj1);
IkReal x15761=((1.0)*cj2);
IkReal x15762=(cj5*sj6);
IkReal x15763=(sj0*sj1);
IkReal x15764=((1.0)*sj6);
IkReal x15765=(cj5*cj6);
IkReal x15766=(r11*x15765);
IkReal x15767=((1.0)*x15759);
IkReal x15768=(sj5*x15758);
IkReal x15769=(r01*x15758);
IkReal x15770=(cj6*x15758);
IkReal x15771=(cj6*x15759);
IkReal x15772=(sj5*x15767);
evalcond[0]=(((r22*x15768))+(((-1.0)*cj1*x15761))+((r20*x15771))+((r21*x15758*x15765))+(((-1.0)*r21*x15759*x15764))+((r20*x15758*x15762)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22*x15772))+(((-1.0)*r21*x15765*x15767))+(((-1.0)*r20*x15762*x15767))+((r20*x15770))+(((-1.0)*r21*x15758*x15764)));
evalcond[2]=(((r10*x15771))+(((-1.0)*r11*x15759*x15764))+((x15758*x15766))+((r10*x15758*x15762))+((r12*x15768))+((cj0*sj2))+(((-1.0)*x15761*x15763)));
evalcond[3]=((((-1.0)*x15760*x15761))+((r02*x15768))+((x15765*x15769))+((r00*x15771))+(((-1.0)*r01*x15759*x15764))+(((-1.0)*sj0*sj2))+((r00*x15758*x15762)));
evalcond[4]=(((r10*x15770))+(((-1.0)*r10*x15762*x15767))+((cj0*cj2))+(((-1.0)*r11*x15758*x15764))+((sj2*x15763))+(((-1.0)*r12*x15772))+(((-1.0)*x15766*x15767)));
evalcond[5]=((((-1.0)*r00*x15762*x15767))+(((-1.0)*x15764*x15769))+(((-1.0)*sj0*x15761))+((r00*x15770))+(((-1.0)*r02*x15772))+((sj2*x15760))+(((-1.0)*r01*x15765*x15767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15773=cj5*cj5;
IkReal x15774=cj6*cj6;
IkReal x15775=r22*r22;
IkReal x15776=r21*r21;
IkReal x15777=r20*r20;
IkReal x15778=((1.0)*cj5);
IkReal x15779=(cj6*r21);
IkReal x15780=(r20*sj6);
IkReal x15781=(cj1*cj2);
IkReal x15782=(cj1*sj2);
IkReal x15783=(r22*sj5);
IkReal x15784=(cj6*r20);
IkReal x15785=((2.0)*cj5);
IkReal x15786=(sj6*x15781);
IkReal x15787=((1.0)*x15776);
IkReal x15788=(x15774*x15777);
CheckValue<IkReal> x15789=IKPowWithIntegerCheck(IKsign(((((-2.0)*x15773*x15779*x15780))+(((-1.0)*x15788))+(((-1.0)*x15775))+(((-1.0)*x15773*x15777))+((x15774*x15776))+((x15773*x15775))+(((2.0)*x15779*x15780))+(((-1.0)*x15787))+(((-1.0)*x15773*x15774*x15787))+((x15773*x15788))+(((-1.0)*x15780*x15783*x15785))+(((-1.0)*x15779*x15783*x15785)))),-1);
if(!x15789.valid){
continue;
}
CheckValue<IkReal> x15790 = IKatan2WithCheck(IkReal(((((-1.0)*x15778*x15779*x15782))+((r21*x15786))+(((-1.0)*x15781*x15784))+(((-1.0)*x15778*x15780*x15782))+(((-1.0)*x15782*x15783)))),((((-1.0)*x15778*x15779*x15781))+(((-1.0)*r21*sj6*x15782))+((x15782*x15784))+(((-1.0)*x15781*x15783))+(((-1.0)*x15778*x15780*x15781))),IKFAST_ATAN2_MAGTHRESH);
if(!x15790.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15789.value)))+(x15790.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x15791=IKcos(j4);
IkReal x15792=IKsin(j4);
IkReal x15793=(r22*sj5);
IkReal x15794=(cj6*r20);
IkReal x15795=((1.0)*r21*sj6);
IkReal x15796=((1.0)*x15792);
IkReal x15797=(cj5*cj6*r21);
IkReal x15798=(cj5*r20*sj6);
evalcond[0]=((((-1.0)*cj1*cj2))+(((-1.0)*x15792*x15795))+((x15791*x15798))+((x15791*x15797))+((x15791*x15793))+((x15792*x15794)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x15796*x15798))+(((-1.0)*x15796*x15797))+(((-1.0)*x15793*x15796))+(((-1.0)*x15791*x15795))+((x15791*x15794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15799=(cj6*sj5);
IkReal x15800=(sj5*sj6);
IkReal x15801=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r02*x15801))+((r01*x15799))+((r00*x15800)))))+(IKabs(((((-1.0)*r12*x15801))+((r10*x15800))+((r11*x15799))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x15802=((1.0)*cj5);
IkReal x15803=(sj5*sj6);
IkReal x15804=(cj6*sj5);
IkReal x15805=(cj6*sj4);
IkReal x15806=(r22*sj5);
IkReal x15807=(cj4*r21);
IkReal x15808=(cj5*cj6);
IkReal x15809=((1.0)*sj6);
IkReal x15810=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x15807*x15809))+(((-1.0)*r21*x15802*x15805))+(((-1.0)*r20*sj4*sj6*x15802))+((cj4*cj6*r20))+(((-1.0)*sj4*x15806)));
evalcond[2]=((-0.36442)+(((-0.37429)*r21*x15804))+(((0.01)*r21*x15808))+(((-1.0)*pz))+(((0.01)*x15810))+(((0.01)*x15806))+(((0.37429)*cj5*r22))+(((-0.37429)*r20*x15803)));
evalcond[3]=((1.0)+((r21*x15804))+(((-1.0)*r22*x15802))+((r20*x15803)));
evalcond[4]=(((x15807*x15808))+(((-1.0)*r21*sj4*x15809))+((cj4*x15810))+((r20*x15805))+((cj4*x15806)));
evalcond[5]=((((-1.0)*r02*x15802))+((r01*x15804))+((r00*x15803)));
evalcond[6]=((((-1.0)*r12*x15802))+((r10*x15803))+((r11*x15804)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15811=(cj2*cj4);
IkReal x15812=(r02*sj5);
IkReal x15813=(cj4*sj2);
IkReal x15814=(r12*sj5);
IkReal x15815=((1.0)*r01);
IkReal x15816=(cj5*cj6*r11);
IkReal x15817=(cj5*r00*sj6);
IkReal x15818=(cj5*r10*sj6);
IkReal x15819=(cj6*r00*sj4);
IkReal x15820=(sj2*sj4*sj6);
IkReal x15821=(cj6*r10*sj4);
IkReal x15822=(cj2*sj4*sj6);
IkReal x15823=(cj5*cj6*r01);
if( IKabs((((cj2*x15821))+((x15813*x15817))+((x15813*x15823))+((sj2*x15819))+((x15812*x15813))+((x15811*x15816))+((x15811*x15814))+((x15811*x15818))+(((-1.0)*r11*x15822))+(((-1.0)*x15815*x15820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x15819))+((x15811*x15817))+((x15811*x15812))+(((-1.0)*x15813*x15818))+(((-1.0)*x15813*x15816))+(((-1.0)*x15813*x15814))+(((-1.0)*sj2*x15821))+((x15811*x15823))+((r11*x15820))+(((-1.0)*x15815*x15822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x15821))+((x15813*x15817))+((x15813*x15823))+((sj2*x15819))+((x15812*x15813))+((x15811*x15816))+((x15811*x15814))+((x15811*x15818))+(((-1.0)*r11*x15822))+(((-1.0)*x15815*x15820))))+IKsqr((((cj2*x15819))+((x15811*x15817))+((x15811*x15812))+(((-1.0)*x15813*x15818))+(((-1.0)*x15813*x15816))+(((-1.0)*x15813*x15814))+(((-1.0)*sj2*x15821))+((x15811*x15823))+((r11*x15820))+(((-1.0)*x15815*x15822))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj2*x15821))+((x15813*x15817))+((x15813*x15823))+((sj2*x15819))+((x15812*x15813))+((x15811*x15816))+((x15811*x15814))+((x15811*x15818))+(((-1.0)*r11*x15822))+(((-1.0)*x15815*x15820))), (((cj2*x15819))+((x15811*x15817))+((x15811*x15812))+(((-1.0)*x15813*x15818))+(((-1.0)*x15813*x15816))+(((-1.0)*x15813*x15814))+(((-1.0)*sj2*x15821))+((x15811*x15823))+((r11*x15820))+(((-1.0)*x15815*x15822))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15824=IKcos(j0);
IkReal x15825=IKsin(j0);
IkReal x15826=((1.0)*sj4);
IkReal x15827=(cj6*sj4);
IkReal x15828=((0.37429)*sj5);
IkReal x15829=(r10*sj6);
IkReal x15830=(r01*sj6);
IkReal x15831=((0.37429)*cj5);
IkReal x15832=((0.069)*sj2);
IkReal x15833=(cj6*r01);
IkReal x15834=((0.01)*cj5);
IkReal x15835=(r12*sj5);
IkReal x15836=(r00*sj6);
IkReal x15837=(r02*sj5);
IkReal x15838=(cj4*cj6);
IkReal x15839=(cj4*cj5);
IkReal x15840=((1.0)*cj4);
IkReal x15841=(r11*sj6);
IkReal x15842=(sj2*x15824);
IkReal x15843=(cj5*cj6*r11);
IkReal x15844=(cj2*x15824);
IkReal x15845=((0.069)*x15825);
IkReal x15846=(sj2*x15825);
IkReal x15847=((1.0)*cj2*x15825);
evalcond[0]=(((cj4*x15835))+((x15829*x15839))+(((-1.0)*x15826*x15841))+((cj5*r11*x15838))+(((-1.0)*x15847))+((r10*x15827))+x15842);
evalcond[1]=(((cj4*x15837))+(((-1.0)*x15826*x15830))+((r00*x15827))+((x15836*x15839))+((x15833*x15839))+(((-1.0)*x15844))+(((-1.0)*x15846)));
evalcond[2]=(((r10*x15838))+(((-1.0)*x15826*x15835))+(((-1.0)*x15826*x15843))+(((-1.0)*cj5*x15826*x15829))+(((-1.0)*x15840*x15841))+x15844+x15846);
evalcond[3]=((((-1.0)*x15830*x15840))+(((-1.0)*x15826*x15837))+(((-1.0)*x15847))+((r00*x15838))+x15842+(((-1.0)*cj5*x15826*x15833))+(((-1.0)*cj5*x15826*x15836)));
evalcond[4]=(((r02*x15831))+(((0.069)*x15824))+(((-1.0)*x15825*x15832))+((x15834*x15836))+(((0.01)*x15837))+(((-0.069)*x15844))+(((-1.0)*px))+(((-1.0)*x15828*x15836))+(((-1.0)*x15828*x15833))+((x15833*x15834)));
evalcond[5]=((((-1.0)*cj6*r11*x15828))+((x15824*x15832))+(((-1.0)*cj2*x15845))+((x15829*x15834))+(((0.01)*x15835))+(((-1.0)*x15828*x15829))+((r12*x15831))+(((-1.0)*py))+((cj6*r11*x15834))+x15845);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15848=((1.0)*cj5);
IkReal x15849=(sj5*sj6);
IkReal x15850=(cj6*sj5);
IkReal x15851=(cj6*sj4);
IkReal x15852=(r22*sj5);
IkReal x15853=(cj4*r21);
IkReal x15854=(cj5*cj6);
IkReal x15855=((1.0)*sj6);
IkReal x15856=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x15852))+(((-1.0)*r21*x15848*x15851))+((cj4*cj6*r20))+(((-1.0)*x15853*x15855))+(((-1.0)*r20*sj4*sj6*x15848)));
evalcond[2]=((0.36442)+(((0.01)*r21*x15854))+(((-1.0)*pz))+(((0.01)*x15852))+(((0.01)*x15856))+(((-0.37429)*r21*x15850))+(((-0.37429)*r20*x15849))+(((0.37429)*cj5*r22)));
evalcond[3]=((-1.0)+((r20*x15849))+(((-1.0)*r22*x15848))+((r21*x15850)));
evalcond[4]=(((r20*x15851))+((x15853*x15854))+(((-1.0)*r21*sj4*x15855))+((cj4*x15852))+((cj4*x15856)));
evalcond[5]=(((r00*x15849))+((r01*x15850))+(((-1.0)*r02*x15848)));
evalcond[6]=((((-1.0)*r12*x15848))+((r10*x15849))+((r11*x15850)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15857=(r02*sj5);
IkReal x15858=(cj5*sj6);
IkReal x15859=(r00*sj2);
IkReal x15860=(cj6*sj4);
IkReal x15861=((1.0)*cj2);
IkReal x15862=(r12*sj5);
IkReal x15863=(cj4*sj2);
IkReal x15864=(cj4*x15861);
IkReal x15865=(cj5*cj6*r11);
IkReal x15866=((1.0)*x15863);
IkReal x15867=(cj5*cj6*r01);
IkReal x15868=(sj2*sj4*sj6);
IkReal x15869=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*x15864*x15865))+(((-1.0)*x15862*x15864))+((r11*x15869))+((cj4*x15858*x15859))+(((-1.0)*r10*x15860*x15861))+((x15857*x15863))+(((-1.0)*r01*x15868))+((x15863*x15867))+((x15859*x15860))+(((-1.0)*r10*x15858*x15864)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x15864*x15867))+(((-1.0)*r10*sj2*x15860))+(((-1.0)*x15862*x15866))+((r11*x15868))+(((-1.0)*x15857*x15864))+(((-1.0)*r00*x15858*x15864))+(((-1.0)*r00*x15860*x15861))+(((-1.0)*x15865*x15866))+((r01*x15869))+(((-1.0)*r10*x15858*x15866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x15864*x15865))+(((-1.0)*x15862*x15864))+((r11*x15869))+((cj4*x15858*x15859))+(((-1.0)*r10*x15860*x15861))+((x15857*x15863))+(((-1.0)*r01*x15868))+((x15863*x15867))+((x15859*x15860))+(((-1.0)*r10*x15858*x15864))))+IKsqr(((((-1.0)*x15864*x15867))+(((-1.0)*r10*sj2*x15860))+(((-1.0)*x15862*x15866))+((r11*x15868))+(((-1.0)*x15857*x15864))+(((-1.0)*r00*x15858*x15864))+(((-1.0)*r00*x15860*x15861))+(((-1.0)*x15865*x15866))+((r01*x15869))+(((-1.0)*r10*x15858*x15866))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x15864*x15865))+(((-1.0)*x15862*x15864))+((r11*x15869))+((cj4*x15858*x15859))+(((-1.0)*r10*x15860*x15861))+((x15857*x15863))+(((-1.0)*r01*x15868))+((x15863*x15867))+((x15859*x15860))+(((-1.0)*r10*x15858*x15864))), ((((-1.0)*x15864*x15867))+(((-1.0)*r10*sj2*x15860))+(((-1.0)*x15862*x15866))+((r11*x15868))+(((-1.0)*x15857*x15864))+(((-1.0)*r00*x15858*x15864))+(((-1.0)*r00*x15860*x15861))+(((-1.0)*x15865*x15866))+((r01*x15869))+(((-1.0)*r10*x15858*x15866))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15870=IKcos(j0);
IkReal x15871=IKsin(j0);
IkReal x15872=((1.0)*sj4);
IkReal x15873=(cj6*sj4);
IkReal x15874=((0.37429)*sj5);
IkReal x15875=(r10*sj6);
IkReal x15876=((0.069)*sj2);
IkReal x15877=(r01*sj6);
IkReal x15878=((0.37429)*cj5);
IkReal x15879=(cj6*r01);
IkReal x15880=((0.01)*cj5);
IkReal x15881=(r12*sj5);
IkReal x15882=(r00*sj6);
IkReal x15883=(r02*sj5);
IkReal x15884=(cj4*cj6);
IkReal x15885=(cj4*cj5);
IkReal x15886=((1.0)*cj4);
IkReal x15887=(r11*sj6);
IkReal x15888=(cj2*x15870);
IkReal x15889=(cj5*cj6*r11);
IkReal x15890=((0.069)*x15871);
IkReal x15891=(sj2*x15870);
IkReal x15892=(cj2*x15871);
IkReal x15893=((1.0)*sj2*x15871);
evalcond[0]=(((cj5*r11*x15884))+(((-1.0)*x15872*x15887))+((r10*x15873))+((x15875*x15885))+((cj4*x15881))+x15892+x15891);
evalcond[1]=((((-1.0)*x15872*x15877))+((r00*x15873))+((x15879*x15885))+((x15882*x15885))+(((-1.0)*x15893))+((cj4*x15883))+x15888);
evalcond[2]=(((r10*x15884))+(((-1.0)*x15886*x15887))+(((-1.0)*x15872*x15889))+(((-1.0)*x15872*x15881))+(((-1.0)*x15893))+(((-1.0)*cj5*x15872*x15875))+x15888);
evalcond[3]=(((r00*x15884))+(((-1.0)*x15891))+(((-1.0)*x15892))+(((-1.0)*x15872*x15883))+(((-1.0)*cj5*x15872*x15882))+(((-1.0)*x15877*x15886))+(((-1.0)*cj5*x15872*x15879)));
evalcond[4]=((((-1.0)*x15874*x15879))+(((0.01)*x15883))+(((-1.0)*x15871*x15876))+(((0.069)*x15870))+((x15879*x15880))+(((-1.0)*px))+(((-1.0)*x15874*x15882))+((r02*x15878))+(((0.069)*x15888))+((x15880*x15882)));
evalcond[5]=(((x15870*x15876))+(((-1.0)*x15874*x15875))+(((0.01)*x15881))+((cj2*x15890))+((cj6*r11*x15880))+(((-1.0)*py))+((x15875*x15880))+((r12*x15878))+x15890+(((-1.0)*cj6*r11*x15874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15894=((1.0)*sj4);
IkReal x15895=(r21*sj6);
IkReal x15896=(cj6*r21);
IkReal x15897=(cj4*cj5);
IkReal x15898=(r22*sj5);
IkReal x15899=(cj5*r22);
IkReal x15900=((0.01)*cj5);
IkReal x15901=(cj6*r20);
IkReal x15902=(r20*sj6);
IkReal x15903=(sj5*x15902);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*x15901))+(((-1.0)*cj5*x15894*x15902))+cj1+(((-1.0)*cj5*x15894*x15896))+(((-1.0)*x15894*x15898))+(((-1.0)*cj4*x15895)));
evalcond[2]=(((x15900*x15902))+((x15896*x15900))+(((0.01)*x15898))+(((-0.37429)*x15903))+(((-1.0)*pz))+(((0.37429)*x15899))+(((-0.37429)*sj5*x15896))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*x15899))+((sj5*x15896))+x15903);
evalcond[4]=(((x15897*x15902))+(((-1.0)*x15894*x15895))+((sj4*x15901))+((cj4*x15898))+((x15896*x15897)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x15904=(cj6*sj5);
IkReal x15905=(sj5*sj6);
IkReal x15906=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r12*x15906))+((r11*x15904))+((r10*x15905)))))+(IKabs((((r01*x15904))+(((-1.0)*r02*x15906))+((r00*x15905))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15907=(cj5*sj4);
CheckValue<IkReal> x15908=IKPowWithIntegerCheck(sj1,-1);
if(!x15908.valid){
continue;
}
CheckValue<IkReal> x15909=IKPowWithIntegerCheck(cj1,-1);
if(!x15909.valid){
continue;
}
if( IKabs(((x15908.value)*((((r10*sj6*x15907))+((cj6*r11*x15907))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15909.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15908.value)*((((r10*sj6*x15907))+((cj6*r11*x15907))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))))+IKsqr(((x15909.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15908.value)*((((r10*sj6*x15907))+((cj6*r11*x15907))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))), ((x15909.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15910=IKcos(j0);
IkReal x15911=IKsin(j0);
IkReal x15912=((1.0)*sj4);
IkReal x15913=(cj6*sj4);
IkReal x15914=((0.37429)*sj5);
IkReal x15915=(r10*sj6);
IkReal x15916=(r01*sj6);
IkReal x15917=((0.36442)*cj1);
IkReal x15918=(cj6*r01);
IkReal x15919=(r00*sj6);
IkReal x15920=(cj6*r11);
IkReal x15921=(r02*sj5);
IkReal x15922=((0.01)*cj5);
IkReal x15923=(r12*sj5);
IkReal x15924=(cj4*cj6);
IkReal x15925=(cj5*r02);
IkReal x15926=(cj4*cj5);
IkReal x15927=((1.0)*cj4);
IkReal x15928=(r11*sj6);
IkReal x15929=(cj5*r12);
IkReal x15930=((0.069)*x15911);
IkReal x15931=((0.069)*x15910);
IkReal x15932=(cj5*x15920);
IkReal x15933=((1.0)*x15911);
evalcond[0]=(((sj5*x15919))+((sj5*x15918))+(((-1.0)*x15925))+(((-1.0)*cj1*x15910)));
evalcond[1]=(((sj5*x15915))+(((-1.0)*cj1*x15933))+((sj5*x15920))+(((-1.0)*x15929)));
evalcond[2]=((((-1.0)*x15912*x15928))+((x15920*x15926))+((x15915*x15926))+((r10*x15913))+((cj4*x15923))+x15910);
evalcond[3]=(((r00*x15913))+((x15918*x15926))+(((-1.0)*x15933))+(((-1.0)*x15912*x15916))+((cj4*x15921))+((x15919*x15926)));
evalcond[4]=(((r10*x15924))+(((-1.0)*x15912*x15923))+(((-1.0)*x15927*x15928))+((sj1*x15911))+(((-1.0)*cj5*x15912*x15915))+(((-1.0)*x15912*x15932)));
evalcond[5]=((((-1.0)*x15912*x15921))+(((-1.0)*x15916*x15927))+((r00*x15924))+((sj1*x15910))+(((-1.0)*cj5*x15912*x15919))+(((-1.0)*cj5*x15912*x15918)));
evalcond[6]=((((0.01)*x15921))+((x15910*x15917))+(((-1.0)*px))+((x15918*x15922))+(((-1.0)*x15914*x15918))+(((-1.0)*x15914*x15919))+(((-1.0)*x15930))+(((0.37429)*x15925))+x15931+((x15919*x15922)));
evalcond[7]=((((0.01)*x15923))+((x15911*x15917))+(((-1.0)*x15914*x15920))+(((-1.0)*py))+((x15920*x15922))+((x15915*x15922))+(((-1.0)*x15914*x15915))+(((0.37429)*x15929))+x15931+x15930);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15934=(cj6*r01);
IkReal x15935=(cj4*cj5);
IkReal x15936=(r00*sj6);
CheckValue<IkReal> x15937=IKPowWithIntegerCheck(cj1,-1);
if(!x15937.valid){
continue;
}
if( IKabs((((cj6*r00*sj4))+((x15935*x15936))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15934*x15935)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15937.value)*((((sj5*x15934))+((sj5*x15936))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj4))+((x15935*x15936))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15934*x15935))))+IKsqr(((x15937.value)*((((sj5*x15934))+((sj5*x15936))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj6*r00*sj4))+((x15935*x15936))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15934*x15935))), ((x15937.value)*((((sj5*x15934))+((sj5*x15936))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15938=IKcos(j0);
IkReal x15939=IKsin(j0);
IkReal x15940=((1.0)*sj4);
IkReal x15941=(cj6*sj4);
IkReal x15942=((0.37429)*sj5);
IkReal x15943=(r10*sj6);
IkReal x15944=(r01*sj6);
IkReal x15945=((0.36442)*cj1);
IkReal x15946=(cj6*r01);
IkReal x15947=(r00*sj6);
IkReal x15948=(cj6*r11);
IkReal x15949=(r02*sj5);
IkReal x15950=((0.01)*cj5);
IkReal x15951=(r12*sj5);
IkReal x15952=(cj4*cj6);
IkReal x15953=(cj5*r02);
IkReal x15954=(cj4*cj5);
IkReal x15955=((1.0)*cj4);
IkReal x15956=(r11*sj6);
IkReal x15957=(cj5*r12);
IkReal x15958=((0.069)*x15939);
IkReal x15959=((0.069)*x15938);
IkReal x15960=(cj5*x15948);
IkReal x15961=((1.0)*x15939);
evalcond[0]=((((-1.0)*x15953))+((sj5*x15947))+((sj5*x15946))+(((-1.0)*cj1*x15938)));
evalcond[1]=((((-1.0)*x15957))+((sj5*x15943))+((sj5*x15948))+(((-1.0)*cj1*x15961)));
evalcond[2]=(((x15943*x15954))+((cj4*x15951))+((r10*x15941))+(((-1.0)*x15940*x15956))+((x15948*x15954))+x15938);
evalcond[3]=(((r00*x15941))+((cj4*x15949))+(((-1.0)*x15961))+(((-1.0)*x15940*x15944))+((x15946*x15954))+((x15947*x15954)));
evalcond[4]=((((-1.0)*x15955*x15956))+(((-1.0)*cj5*x15940*x15943))+((r10*x15952))+(((-1.0)*x15940*x15951))+(((-1.0)*x15940*x15960))+((sj1*x15939)));
evalcond[5]=(((r00*x15952))+(((-1.0)*x15944*x15955))+(((-1.0)*cj5*x15940*x15946))+(((-1.0)*cj5*x15940*x15947))+(((-1.0)*x15940*x15949))+((sj1*x15938)));
evalcond[6]=((((0.37429)*x15953))+(((-1.0)*px))+(((-1.0)*x15958))+(((0.01)*x15949))+(((-1.0)*x15942*x15947))+(((-1.0)*x15942*x15946))+((x15938*x15945))+((x15946*x15950))+((x15947*x15950))+x15959);
evalcond[7]=(((x15943*x15950))+((x15939*x15945))+(((0.37429)*x15957))+(((0.01)*x15951))+(((-1.0)*py))+(((-1.0)*x15942*x15948))+(((-1.0)*x15942*x15943))+((x15948*x15950))+x15959+x15958);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15962=(cj6*sj5);
IkReal x15963=(sj5*sj6);
IkReal x15964=((1.0)*cj5);
CheckValue<IkReal> x15965=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15965.valid){
continue;
}
CheckValue<IkReal> x15966 = IKatan2WithCheck(IkReal((((r11*x15962))+((r10*x15963))+(((-1.0)*r12*x15964)))),(((r01*x15962))+(((-1.0)*r02*x15964))+((r00*x15963))),IKFAST_ATAN2_MAGTHRESH);
if(!x15966.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15965.value)))+(x15966.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15967=IKcos(j0);
IkReal x15968=IKsin(j0);
IkReal x15969=((1.0)*sj4);
IkReal x15970=(cj6*sj4);
IkReal x15971=((0.37429)*sj5);
IkReal x15972=(r10*sj6);
IkReal x15973=(r01*sj6);
IkReal x15974=((0.36442)*cj1);
IkReal x15975=(cj6*r01);
IkReal x15976=(r00*sj6);
IkReal x15977=(cj6*r11);
IkReal x15978=(r02*sj5);
IkReal x15979=((0.01)*cj5);
IkReal x15980=(r12*sj5);
IkReal x15981=(cj4*cj6);
IkReal x15982=(cj5*r02);
IkReal x15983=(cj4*cj5);
IkReal x15984=((1.0)*cj4);
IkReal x15985=(r11*sj6);
IkReal x15986=(cj5*r12);
IkReal x15987=((0.069)*x15968);
IkReal x15988=((0.069)*x15967);
IkReal x15989=(cj5*x15977);
IkReal x15990=((1.0)*x15968);
evalcond[0]=((((-1.0)*x15982))+(((-1.0)*cj1*x15967))+((sj5*x15975))+((sj5*x15976)));
evalcond[1]=((((-1.0)*x15986))+(((-1.0)*cj1*x15990))+((sj5*x15977))+((sj5*x15972)));
evalcond[2]=(((x15977*x15983))+(((-1.0)*x15969*x15985))+((cj4*x15980))+((x15972*x15983))+((r10*x15970))+x15967);
evalcond[3]=(((x15975*x15983))+(((-1.0)*x15990))+((cj4*x15978))+((r00*x15970))+((x15976*x15983))+(((-1.0)*x15969*x15973)));
evalcond[4]=((((-1.0)*x15969*x15989))+(((-1.0)*x15969*x15980))+((sj1*x15968))+(((-1.0)*x15984*x15985))+((r10*x15981))+(((-1.0)*cj5*x15969*x15972)));
evalcond[5]=(((r00*x15981))+((sj1*x15967))+(((-1.0)*x15973*x15984))+(((-1.0)*cj5*x15969*x15976))+(((-1.0)*cj5*x15969*x15975))+(((-1.0)*x15969*x15978)));
evalcond[6]=((((-1.0)*x15987))+((x15975*x15979))+(((0.01)*x15978))+(((-1.0)*px))+((x15976*x15979))+((x15967*x15974))+(((0.37429)*x15982))+(((-1.0)*x15971*x15975))+(((-1.0)*x15971*x15976))+x15988);
evalcond[7]=(((x15968*x15974))+((x15977*x15979))+(((0.01)*x15980))+(((-1.0)*py))+((x15972*x15979))+(((0.37429)*x15986))+(((-1.0)*x15971*x15977))+(((-1.0)*x15971*x15972))+x15988+x15987);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15991=((1.0)*cj5);
IkReal x15992=(cj6*sj4);
IkReal x15993=(r22*sj5);
IkReal x15994=(cj4*r21);
IkReal x15995=(cj5*cj6);
IkReal x15996=((1.0)*sj6);
IkReal x15997=(cj5*r20*sj6);
IkReal x15998=(r20*sj5*sj6);
IkReal x15999=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*x15991*x15992))+((cj4*cj6*r20))+(((-1.0)*r20*sj4*sj6*x15991))+(((-1.0)*sj4*x15993))+(((-1.0)*x15994*x15996))+(((-1.0)*cj1)));
evalcond[2]=((((0.01)*x15993))+(((0.01)*x15997))+(((-1.0)*pz))+(((0.01)*r21*x15995))+(((-0.37429)*x15998))+(((-0.37429)*x15999))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*r22*x15991))+x15999+x15998);
evalcond[4]=(((r20*x15992))+((cj4*x15997))+((cj4*x15993))+(((-1.0)*r21*sj4*x15996))+((x15994*x15995)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x16000=(cj6*sj5);
IkReal x16001=(sj5*sj6);
IkReal x16002=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r02*x16002))+((r01*x16000))+((r00*x16001)))))+(IKabs((((r10*x16001))+((r11*x16000))+(((-1.0)*r12*x16002))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16003=((1.0)*cj5*sj4);
CheckValue<IkReal> x16004=IKPowWithIntegerCheck(sj1,-1);
if(!x16004.valid){
continue;
}
CheckValue<IkReal> x16005=IKPowWithIntegerCheck(cj1,-1);
if(!x16005.valid){
continue;
}
if( IKabs(((x16004.value)*(((((-1.0)*cj6*r11*x16003))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*r10*sj6*x16003)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16005.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16004.value)*(((((-1.0)*cj6*r11*x16003))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*r10*sj6*x16003))))))+IKsqr(((x16005.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16004.value)*(((((-1.0)*cj6*r11*x16003))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*r10*sj6*x16003))))), ((x16005.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16006=IKsin(j0);
IkReal x16007=IKcos(j0);
IkReal x16008=((1.0)*sj4);
IkReal x16009=(cj6*sj4);
IkReal x16010=((0.37429)*sj5);
IkReal x16011=(r10*sj6);
IkReal x16012=(r01*sj6);
IkReal x16013=((0.36442)*cj1);
IkReal x16014=(cj6*r01);
IkReal x16015=(r00*sj6);
IkReal x16016=(r12*sj5);
IkReal x16017=(cj6*r11);
IkReal x16018=(r02*sj5);
IkReal x16019=((0.01)*cj5);
IkReal x16020=(cj4*cj6);
IkReal x16021=(cj5*r02);
IkReal x16022=(cj4*cj5);
IkReal x16023=((1.0)*cj4);
IkReal x16024=(r11*sj6);
IkReal x16025=(cj5*r12);
IkReal x16026=((0.069)*x16006);
IkReal x16027=((0.069)*x16007);
IkReal x16028=(cj5*x16017);
IkReal x16029=((1.0)*x16007);
IkReal x16030=((1.0)*x16006);
evalcond[0]=(((sj5*x16015))+((sj5*x16014))+(((-1.0)*cj1*x16029))+(((-1.0)*x16021)));
evalcond[1]=(((sj5*x16011))+((sj5*x16017))+(((-1.0)*cj1*x16030))+(((-1.0)*x16025)));
evalcond[2]=(((x16014*x16022))+x16006+((r00*x16009))+((x16015*x16022))+(((-1.0)*x16008*x16012))+((cj4*x16018)));
evalcond[3]=(((r10*x16009))+(((-1.0)*x16008*x16024))+(((-1.0)*x16029))+((x16017*x16022))+((x16011*x16022))+((cj4*x16016)));
evalcond[4]=((((-1.0)*x16008*x16028))+(((-1.0)*cj5*x16008*x16011))+(((-1.0)*x16008*x16016))+((r10*x16020))+(((-1.0)*sj1*x16030))+(((-1.0)*x16023*x16024)));
evalcond[5]=((((-1.0)*cj5*x16008*x16015))+(((-1.0)*cj5*x16008*x16014))+(((-1.0)*sj1*x16029))+(((-1.0)*x16012*x16023))+(((-1.0)*x16008*x16018))+((r00*x16020)));
evalcond[6]=(((x16007*x16013))+(((0.37429)*x16021))+(((-1.0)*x16010*x16015))+(((-1.0)*x16010*x16014))+((x16015*x16019))+(((-1.0)*px))+x16026+x16027+((x16014*x16019))+(((0.01)*x16018)));
evalcond[7]=((((0.37429)*x16025))+(((-1.0)*x16010*x16011))+(((-1.0)*x16010*x16017))+(((-1.0)*x16027))+((x16011*x16019))+(((-1.0)*py))+x16026+((x16006*x16013))+(((0.01)*x16016))+((x16017*x16019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16031=(cj6*r11);
IkReal x16032=(cj4*cj5);
IkReal x16033=(r10*sj6);
CheckValue<IkReal> x16034=IKPowWithIntegerCheck(cj1,-1);
if(!x16034.valid){
continue;
}
if( IKabs(((x16034.value)*(((((-1.0)*cj5*r12))+((sj5*x16031))+((sj5*x16033)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x16032*x16033))+((cj6*r10*sj4))+(((-1.0)*r11*sj4*sj6))+((x16031*x16032))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16034.value)*(((((-1.0)*cj5*r12))+((sj5*x16031))+((sj5*x16033))))))+IKsqr((((x16032*x16033))+((cj6*r10*sj4))+(((-1.0)*r11*sj4*sj6))+((x16031*x16032))+((cj4*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16034.value)*(((((-1.0)*cj5*r12))+((sj5*x16031))+((sj5*x16033))))), (((x16032*x16033))+((cj6*r10*sj4))+(((-1.0)*r11*sj4*sj6))+((x16031*x16032))+((cj4*r12*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16035=IKsin(j0);
IkReal x16036=IKcos(j0);
IkReal x16037=((1.0)*sj4);
IkReal x16038=(cj6*sj4);
IkReal x16039=((0.37429)*sj5);
IkReal x16040=(r10*sj6);
IkReal x16041=(r01*sj6);
IkReal x16042=((0.36442)*cj1);
IkReal x16043=(cj6*r01);
IkReal x16044=(r00*sj6);
IkReal x16045=(r12*sj5);
IkReal x16046=(cj6*r11);
IkReal x16047=(r02*sj5);
IkReal x16048=((0.01)*cj5);
IkReal x16049=(cj4*cj6);
IkReal x16050=(cj5*r02);
IkReal x16051=(cj4*cj5);
IkReal x16052=((1.0)*cj4);
IkReal x16053=(r11*sj6);
IkReal x16054=(cj5*r12);
IkReal x16055=((0.069)*x16035);
IkReal x16056=((0.069)*x16036);
IkReal x16057=(cj5*x16046);
IkReal x16058=((1.0)*x16036);
IkReal x16059=((1.0)*x16035);
evalcond[0]=((((-1.0)*x16050))+((sj5*x16043))+((sj5*x16044))+(((-1.0)*cj1*x16058)));
evalcond[1]=((((-1.0)*x16054))+((sj5*x16040))+((sj5*x16046))+(((-1.0)*cj1*x16059)));
evalcond[2]=(((cj4*x16047))+x16035+((x16043*x16051))+(((-1.0)*x16037*x16041))+((r00*x16038))+((x16044*x16051)));
evalcond[3]=(((x16046*x16051))+((r10*x16038))+(((-1.0)*x16058))+(((-1.0)*x16037*x16053))+((cj4*x16045))+((x16040*x16051)));
evalcond[4]=(((r10*x16049))+(((-1.0)*sj1*x16059))+(((-1.0)*cj5*x16037*x16040))+(((-1.0)*x16037*x16057))+(((-1.0)*x16037*x16045))+(((-1.0)*x16052*x16053)));
evalcond[5]=((((-1.0)*x16041*x16052))+(((-1.0)*sj1*x16058))+(((-1.0)*cj5*x16037*x16044))+(((-1.0)*cj5*x16037*x16043))+(((-1.0)*x16037*x16047))+((r00*x16049)));
evalcond[6]=((((0.01)*x16047))+(((0.37429)*x16050))+(((-1.0)*px))+x16056+x16055+((x16043*x16048))+((x16036*x16042))+((x16044*x16048))+(((-1.0)*x16039*x16044))+(((-1.0)*x16039*x16043)));
evalcond[7]=((((0.01)*x16045))+(((0.37429)*x16054))+(((-1.0)*x16056))+((x16035*x16042))+(((-1.0)*py))+x16055+((x16040*x16048))+(((-1.0)*x16039*x16046))+(((-1.0)*x16039*x16040))+((x16046*x16048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16060=(cj6*sj5);
IkReal x16061=(sj5*sj6);
IkReal x16062=((1.0)*cj5);
CheckValue<IkReal> x16063=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16063.valid){
continue;
}
CheckValue<IkReal> x16064 = IKatan2WithCheck(IkReal((((r10*x16061))+(((-1.0)*r12*x16062))+((r11*x16060)))),(((r00*x16061))+((r01*x16060))+(((-1.0)*r02*x16062))),IKFAST_ATAN2_MAGTHRESH);
if(!x16064.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16063.value)))+(x16064.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16065=IKsin(j0);
IkReal x16066=IKcos(j0);
IkReal x16067=((1.0)*sj4);
IkReal x16068=(cj6*sj4);
IkReal x16069=((0.37429)*sj5);
IkReal x16070=(r10*sj6);
IkReal x16071=(r01*sj6);
IkReal x16072=((0.36442)*cj1);
IkReal x16073=(cj6*r01);
IkReal x16074=(r00*sj6);
IkReal x16075=(r12*sj5);
IkReal x16076=(cj6*r11);
IkReal x16077=(r02*sj5);
IkReal x16078=((0.01)*cj5);
IkReal x16079=(cj4*cj6);
IkReal x16080=(cj5*r02);
IkReal x16081=(cj4*cj5);
IkReal x16082=((1.0)*cj4);
IkReal x16083=(r11*sj6);
IkReal x16084=(cj5*r12);
IkReal x16085=((0.069)*x16065);
IkReal x16086=((0.069)*x16066);
IkReal x16087=(cj5*x16076);
IkReal x16088=((1.0)*x16066);
IkReal x16089=((1.0)*x16065);
evalcond[0]=((((-1.0)*x16080))+(((-1.0)*cj1*x16088))+((sj5*x16073))+((sj5*x16074)));
evalcond[1]=((((-1.0)*x16084))+(((-1.0)*cj1*x16089))+((sj5*x16070))+((sj5*x16076)));
evalcond[2]=(((x16073*x16081))+((r00*x16068))+((x16074*x16081))+(((-1.0)*x16067*x16071))+((cj4*x16077))+x16065);
evalcond[3]=(((x16070*x16081))+((x16076*x16081))+((r10*x16068))+((cj4*x16075))+(((-1.0)*x16067*x16083))+(((-1.0)*x16088)));
evalcond[4]=((((-1.0)*cj5*x16067*x16070))+(((-1.0)*sj1*x16089))+((r10*x16079))+(((-1.0)*x16067*x16075))+(((-1.0)*x16082*x16083))+(((-1.0)*x16067*x16087)));
evalcond[5]=((((-1.0)*cj5*x16067*x16074))+(((-1.0)*cj5*x16067*x16073))+(((-1.0)*sj1*x16088))+(((-1.0)*x16071*x16082))+(((-1.0)*x16067*x16077))+((r00*x16079)));
evalcond[6]=(((x16066*x16072))+(((0.01)*x16077))+(((-1.0)*x16069*x16074))+(((-1.0)*x16069*x16073))+((x16073*x16078))+(((-1.0)*px))+x16085+x16086+(((0.37429)*x16080))+((x16074*x16078)));
evalcond[7]=((((0.01)*x16075))+(((-1.0)*x16069*x16076))+(((-1.0)*x16069*x16070))+((x16065*x16072))+(((-1.0)*py))+x16085+((x16076*x16078))+((x16070*x16078))+(((0.37429)*x16084))+(((-1.0)*x16086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16090=((1.0)*cj5);
IkReal x16091=(cj6*sj4);
IkReal x16092=(r22*sj5);
IkReal x16093=(cj4*r21);
IkReal x16094=(cj5*cj6);
IkReal x16095=((1.0)*sj6);
IkReal x16096=(cj5*r20*sj6);
IkReal x16097=(r20*sj5*sj6);
IkReal x16098=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(sj2+((cj4*cj6*r20))+(((-1.0)*x16093*x16095))+(((-1.0)*r21*x16090*x16091))+(((-1.0)*sj4*x16092))+(((-1.0)*r20*sj4*sj6*x16090)));
evalcond[2]=((((0.01)*x16096))+(((0.01)*x16092))+(((-0.069)*cj2))+(((-0.37429)*x16097))+(((-0.37429)*x16098))+(((0.01)*r21*x16094))+(((-1.0)*pz))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r22*x16090))+x16098+x16097);
evalcond[4]=((((-1.0)*r21*sj4*x16095))+((r20*x16091))+((cj4*x16092))+((cj4*x16096))+((x16093*x16094))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16099=(cj6*sj5);
IkReal x16100=(sj5*sj6);
IkReal x16101=((1.0)*cj5);
if( IKabs((((r11*x16099))+(((-1.0)*r12*x16101))+((r10*x16100)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x16101))+((r01*x16099))+((r00*x16100)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x16099))+(((-1.0)*r12*x16101))+((r10*x16100))))+IKsqr(((((-1.0)*r02*x16101))+((r01*x16099))+((r00*x16100))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x16099))+(((-1.0)*r12*x16101))+((r10*x16100))), ((((-1.0)*r02*x16101))+((r01*x16099))+((r00*x16100))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16102=IKcos(j0);
IkReal x16103=IKsin(j0);
IkReal x16104=((1.0)*sj4);
IkReal x16105=(cj6*sj4);
IkReal x16106=((0.37429)*sj5);
IkReal x16107=(r10*sj6);
IkReal x16108=(r01*sj6);
IkReal x16109=((0.069)*sj2);
IkReal x16110=(cj6*r01);
IkReal x16111=(r00*sj6);
IkReal x16112=(r12*sj5);
IkReal x16113=(cj6*r11);
IkReal x16114=(r02*sj5);
IkReal x16115=((0.01)*cj5);
IkReal x16116=(cj4*cj6);
IkReal x16117=(cj5*r02);
IkReal x16118=(cj4*cj5);
IkReal x16119=((1.0)*cj4);
IkReal x16120=(r11*sj6);
IkReal x16121=(cj5*r12);
IkReal x16122=(cj5*x16113);
IkReal x16123=((1.0)*x16103);
evalcond[0]=((((-1.0)*x16102))+(((-1.0)*x16117))+((sj5*x16111))+((sj5*x16110)));
evalcond[1]=((((-1.0)*x16123))+(((-1.0)*x16121))+((sj5*x16113))+((sj5*x16107)));
evalcond[2]=(((x16113*x16118))+((cj4*x16112))+((x16107*x16118))+((r10*x16105))+(((-1.0)*x16104*x16120))+((sj2*x16102)));
evalcond[3]=(((cj4*x16114))+(((-1.0)*x16104*x16108))+((x16111*x16118))+((x16110*x16118))+(((-1.0)*sj2*x16123))+((r00*x16105)));
evalcond[4]=(((cj2*x16102))+(((-1.0)*x16104*x16112))+(((-1.0)*x16119*x16120))+((r10*x16116))+(((-1.0)*x16104*x16122))+(((-1.0)*cj5*x16104*x16107)));
evalcond[5]=(((r00*x16116))+(((-1.0)*x16108*x16119))+(((-1.0)*x16104*x16114))+(((-1.0)*cj2*x16123))+(((-1.0)*cj5*x16104*x16111))+(((-1.0)*cj5*x16104*x16110)));
evalcond[6]=((((-1.0)*px))+((x16111*x16115))+(((0.43342)*x16102))+(((-1.0)*x16106*x16110))+(((-1.0)*x16106*x16111))+((x16110*x16115))+(((-1.0)*x16103*x16109))+(((0.01)*x16114))+(((0.37429)*x16117)));
evalcond[7]=(((x16113*x16115))+((x16102*x16109))+(((-1.0)*py))+((x16107*x16115))+(((0.37429)*x16121))+(((0.43342)*x16103))+(((-1.0)*x16106*x16113))+(((-1.0)*x16106*x16107))+(((0.01)*x16112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16124=((1.0)*cj5);
IkReal x16125=(cj6*sj4);
IkReal x16126=(r22*sj5);
IkReal x16127=(cj4*r21);
IkReal x16128=(cj5*cj6);
IkReal x16129=((1.0)*sj6);
IkReal x16130=(cj5*r20*sj6);
IkReal x16131=(r20*sj5*sj6);
IkReal x16132=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*r21*x16124*x16125))+((cj4*cj6*r20))+(((-1.0)*sj4*x16126))+(((-1.0)*r20*sj4*sj6*x16124))+(((-1.0)*x16127*x16129)));
evalcond[2]=((((-0.37429)*x16131))+(((-0.37429)*x16132))+(((0.069)*cj2))+(((-1.0)*pz))+(((0.01)*x16130))+(((0.01)*x16126))+(((0.01)*r21*x16128))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r22*x16124))+x16131+x16132);
evalcond[4]=(cj2+((x16127*x16128))+(((-1.0)*r21*sj4*x16129))+((r20*x16125))+((cj4*x16130))+((cj4*x16126)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16133=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x16133))+(((-1.0)*cj6*r11*x16133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x16133))+(((-1.0)*r00*sj6*x16133))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x16133))+(((-1.0)*cj6*r11*x16133))))+IKsqr(((((-1.0)*cj6*r01*x16133))+(((-1.0)*r00*sj6*x16133))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x16133))+(((-1.0)*cj6*r11*x16133))), ((((-1.0)*cj6*r01*x16133))+(((-1.0)*r00*sj6*x16133))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16134=IKcos(j0);
IkReal x16135=IKsin(j0);
IkReal x16136=((1.0)*sj4);
IkReal x16137=(cj6*sj4);
IkReal x16138=((0.37429)*sj5);
IkReal x16139=(r10*sj6);
IkReal x16140=(r01*sj6);
IkReal x16141=((0.37429)*cj5);
IkReal x16142=((0.069)*sj2);
IkReal x16143=(cj6*r01);
IkReal x16144=(r00*sj6);
IkReal x16145=(r12*sj5);
IkReal x16146=(cj6*r11);
IkReal x16147=(r02*sj5);
IkReal x16148=((0.01)*cj5);
IkReal x16149=(cj4*cj6);
IkReal x16150=((1.0)*cj5);
IkReal x16151=(cj4*cj5);
IkReal x16152=((1.0)*cj4);
IkReal x16153=(r11*sj6);
IkReal x16154=(cj5*x16146);
IkReal x16155=((1.0)*x16135);
evalcond[0]=(x16134+((sj5*x16144))+((sj5*x16143))+(((-1.0)*r02*x16150)));
evalcond[1]=(x16135+((sj5*x16146))+(((-1.0)*r12*x16150))+((sj5*x16139)));
evalcond[2]=(((cj4*x16145))+((sj2*x16134))+((x16146*x16151))+((r10*x16137))+((x16139*x16151))+(((-1.0)*x16136*x16153)));
evalcond[3]=(((cj4*x16147))+(((-1.0)*sj2*x16155))+((x16144*x16151))+((x16143*x16151))+(((-1.0)*x16136*x16140))+((r00*x16137)));
evalcond[4]=((((-1.0)*cj5*x16136*x16139))+(((-1.0)*x16152*x16153))+((cj2*x16134))+((r10*x16149))+(((-1.0)*x16136*x16154))+(((-1.0)*x16136*x16145)));
evalcond[5]=((((-1.0)*cj2*x16155))+(((-1.0)*cj5*x16136*x16143))+(((-1.0)*cj5*x16136*x16144))+((r00*x16149))+(((-1.0)*x16140*x16152))+(((-1.0)*x16136*x16147)));
evalcond[6]=((((0.01)*x16147))+((x16144*x16148))+(((-1.0)*x16138*x16144))+(((-1.0)*x16138*x16143))+(((-1.0)*px))+((x16143*x16148))+(((-0.29542)*x16134))+(((-1.0)*x16135*x16142))+((r02*x16141)));
evalcond[7]=((((0.01)*x16145))+((r12*x16141))+(((-1.0)*x16138*x16146))+((x16134*x16142))+(((-1.0)*py))+((x16139*x16148))+((x16146*x16148))+(((-0.29542)*x16135))+(((-1.0)*x16138*x16139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16156=((1.0)*cj5);
IkReal x16157=(cj6*sj4);
IkReal x16158=(r22*sj5);
IkReal x16159=(cj4*r21);
IkReal x16160=(cj5*cj6);
IkReal x16161=((1.0)*sj6);
IkReal x16162=(cj5*r20*sj6);
IkReal x16163=(r20*sj5*sj6);
IkReal x16164=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x16158))+(((-1.0)*x16159*x16161))+((cj4*cj6*r20))+(((-1.0)*r20*sj4*sj6*x16156))+(((-1.0)*r21*x16156*x16157)));
evalcond[2]=((((0.01)*r21*x16160))+(((-0.37429)*x16164))+(((-0.37429)*x16163))+(((0.01)*x16158))+(((-0.069)*cj1))+(((0.01)*x16162))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+x16163+x16164+(((-1.0)*r22*x16156)));
evalcond[4]=(((cj4*x16158))+((cj4*x16162))+((r20*x16157))+(((-1.0)*r21*sj4*x16161))+((x16159*x16160))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x16165=(cj6*sj5);
IkReal x16166=(sj5*sj6);
IkReal x16167=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r11*x16165))+((r10*x16166))+(((-1.0)*r12*x16167)))))+(IKabs((((r00*x16166))+((r01*x16165))+(((-1.0)*r02*x16167))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16168=(cj4*cj5);
CheckValue<IkReal> x16169=IKPowWithIntegerCheck(sj1,-1);
if(!x16169.valid){
continue;
}
CheckValue<IkReal> x16170=IKPowWithIntegerCheck(cj1,-1);
if(!x16170.valid){
continue;
}
if( IKabs(((x16169.value)*((((cj6*r10*sj4))+((r10*sj6*x16168))+(((-1.0)*r11*sj4*sj6))+((cj6*r11*x16168))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16170.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16169.value)*((((cj6*r10*sj4))+((r10*sj6*x16168))+(((-1.0)*r11*sj4*sj6))+((cj6*r11*x16168))+((cj4*r12*sj5))))))+IKsqr(((x16170.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16169.value)*((((cj6*r10*sj4))+((r10*sj6*x16168))+(((-1.0)*r11*sj4*sj6))+((cj6*r11*x16168))+((cj4*r12*sj5))))), ((x16170.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16171=IKcos(j0);
IkReal x16172=IKsin(j0);
IkReal x16173=((1.0)*sj4);
IkReal x16174=(cj6*sj4);
IkReal x16175=((0.37429)*sj5);
IkReal x16176=(r10*sj6);
IkReal x16177=(r01*sj6);
IkReal x16178=((0.36442)*cj1);
IkReal x16179=(cj6*r01);
IkReal x16180=(r00*sj6);
IkReal x16181=(r12*sj5);
IkReal x16182=(cj6*r11);
IkReal x16183=(r02*sj5);
IkReal x16184=((1.0)*cj5);
IkReal x16185=((0.01)*cj5);
IkReal x16186=(cj4*cj6);
IkReal x16187=((0.37429)*cj5);
IkReal x16188=(cj4*cj5);
IkReal x16189=((1.0)*cj4);
IkReal x16190=(r11*sj6);
IkReal x16191=(cj5*x16182);
IkReal x16192=((0.069)*x16171);
IkReal x16193=((0.069)*x16172);
IkReal x16194=((1.0)*x16172);
IkReal x16195=((1.0)*x16171);
evalcond[0]=((((-1.0)*r02*x16184))+((sj5*x16179))+(((-1.0)*cj1*x16195))+((sj5*x16180)));
evalcond[1]=(((sj5*x16176))+(((-1.0)*r12*x16184))+(((-1.0)*cj1*x16194))+((sj5*x16182)));
evalcond[2]=(((r10*x16186))+(((-1.0)*x16189*x16190))+x16171+(((-1.0)*x16173*x16191))+(((-1.0)*x16173*x16181))+(((-1.0)*cj5*x16173*x16176)));
evalcond[3]=(((x16182*x16188))+((cj4*x16181))+((r10*x16174))+(((-1.0)*x16173*x16190))+((x16176*x16188))+(((-1.0)*sj1*x16194)));
evalcond[4]=(((x16179*x16188))+((cj4*x16183))+((r00*x16174))+((x16180*x16188))+(((-1.0)*sj1*x16195))+(((-1.0)*x16173*x16177)));
evalcond[5]=((((-1.0)*cj5*x16173*x16180))+((r00*x16186))+(((-1.0)*x16194))+(((-1.0)*x16177*x16189))+(((-1.0)*x16173*x16183))+(((-1.0)*cj5*x16173*x16179)));
evalcond[6]=(((x16171*x16178))+(((0.01)*x16183))+((x16179*x16185))+(((-1.0)*x16175*x16180))+x16192+(((-1.0)*px))+((x16180*x16185))+((r02*x16187))+(((-1.0)*sj1*x16192))+(((-1.0)*x16175*x16179)));
evalcond[7]=((((0.01)*x16181))+((x16182*x16185))+((x16172*x16178))+(((-1.0)*x16175*x16182))+((r12*x16187))+x16193+(((-1.0)*py))+((x16176*x16185))+(((-1.0)*sj1*x16193))+(((-1.0)*x16175*x16176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16196=(cj6*r11);
IkReal x16197=(cj5*sj4);
IkReal x16198=(r10*sj6);
CheckValue<IkReal> x16199=IKPowWithIntegerCheck(cj1,-1);
if(!x16199.valid){
continue;
}
if( IKabs(((x16199.value)*(((((-1.0)*cj5*r12))+((sj5*x16198))+((sj5*x16196)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x16196*x16197))+(((-1.0)*cj4*cj6*r10))+((x16197*x16198))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16199.value)*(((((-1.0)*cj5*r12))+((sj5*x16198))+((sj5*x16196))))))+IKsqr((((x16196*x16197))+(((-1.0)*cj4*cj6*r10))+((x16197*x16198))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16199.value)*(((((-1.0)*cj5*r12))+((sj5*x16198))+((sj5*x16196))))), (((x16196*x16197))+(((-1.0)*cj4*cj6*r10))+((x16197*x16198))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16200=IKcos(j0);
IkReal x16201=IKsin(j0);
IkReal x16202=((1.0)*sj4);
IkReal x16203=(cj6*sj4);
IkReal x16204=((0.37429)*sj5);
IkReal x16205=(r10*sj6);
IkReal x16206=(r01*sj6);
IkReal x16207=((0.36442)*cj1);
IkReal x16208=(cj6*r01);
IkReal x16209=(r00*sj6);
IkReal x16210=(r12*sj5);
IkReal x16211=(cj6*r11);
IkReal x16212=(r02*sj5);
IkReal x16213=((1.0)*cj5);
IkReal x16214=((0.01)*cj5);
IkReal x16215=(cj4*cj6);
IkReal x16216=((0.37429)*cj5);
IkReal x16217=(cj4*cj5);
IkReal x16218=((1.0)*cj4);
IkReal x16219=(r11*sj6);
IkReal x16220=(cj5*x16211);
IkReal x16221=((0.069)*x16200);
IkReal x16222=((0.069)*x16201);
IkReal x16223=((1.0)*x16201);
IkReal x16224=((1.0)*x16200);
evalcond[0]=((((-1.0)*r02*x16213))+(((-1.0)*cj1*x16224))+((sj5*x16208))+((sj5*x16209)));
evalcond[1]=(((sj5*x16211))+(((-1.0)*r12*x16213))+(((-1.0)*cj1*x16223))+((sj5*x16205)));
evalcond[2]=((((-1.0)*cj5*x16202*x16205))+x16200+(((-1.0)*x16218*x16219))+(((-1.0)*x16202*x16210))+((r10*x16215))+(((-1.0)*x16202*x16220)));
evalcond[3]=(((x16205*x16217))+((cj4*x16210))+(((-1.0)*sj1*x16223))+((r10*x16203))+((x16211*x16217))+(((-1.0)*x16202*x16219)));
evalcond[4]=(((cj4*x16212))+((x16209*x16217))+(((-1.0)*x16202*x16206))+((x16208*x16217))+(((-1.0)*sj1*x16224))+((r00*x16203)));
evalcond[5]=((((-1.0)*cj5*x16202*x16209))+(((-1.0)*cj5*x16202*x16208))+((r00*x16215))+(((-1.0)*x16223))+(((-1.0)*x16206*x16218))+(((-1.0)*x16202*x16212)));
evalcond[6]=((((0.01)*x16212))+((x16209*x16214))+(((-1.0)*x16204*x16208))+(((-1.0)*x16204*x16209))+((x16208*x16214))+((x16200*x16207))+(((-1.0)*sj1*x16221))+x16221+(((-1.0)*px))+((r02*x16216)));
evalcond[7]=(((x16205*x16214))+(((0.01)*x16210))+(((-1.0)*x16204*x16205))+(((-1.0)*sj1*x16222))+x16222+(((-1.0)*py))+((x16211*x16214))+((x16201*x16207))+(((-1.0)*x16204*x16211))+((r12*x16216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16225=(cj6*sj5);
IkReal x16226=(sj5*sj6);
IkReal x16227=((1.0)*cj5);
CheckValue<IkReal> x16228=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16228.valid){
continue;
}
CheckValue<IkReal> x16229 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x16227))+((r10*x16226))+((r11*x16225)))),(((r00*x16226))+((r01*x16225))+(((-1.0)*r02*x16227))),IKFAST_ATAN2_MAGTHRESH);
if(!x16229.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16228.value)))+(x16229.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16230=IKcos(j0);
IkReal x16231=IKsin(j0);
IkReal x16232=((1.0)*sj4);
IkReal x16233=(cj6*sj4);
IkReal x16234=((0.37429)*sj5);
IkReal x16235=(r10*sj6);
IkReal x16236=(r01*sj6);
IkReal x16237=((0.36442)*cj1);
IkReal x16238=(cj6*r01);
IkReal x16239=(r00*sj6);
IkReal x16240=(r12*sj5);
IkReal x16241=(cj6*r11);
IkReal x16242=(r02*sj5);
IkReal x16243=((1.0)*cj5);
IkReal x16244=((0.01)*cj5);
IkReal x16245=(cj4*cj6);
IkReal x16246=((0.37429)*cj5);
IkReal x16247=(cj4*cj5);
IkReal x16248=((1.0)*cj4);
IkReal x16249=(r11*sj6);
IkReal x16250=(cj5*x16241);
IkReal x16251=((0.069)*x16230);
IkReal x16252=((0.069)*x16231);
IkReal x16253=((1.0)*x16231);
IkReal x16254=((1.0)*x16230);
evalcond[0]=((((-1.0)*cj1*x16254))+(((-1.0)*r02*x16243))+((sj5*x16239))+((sj5*x16238)));
evalcond[1]=((((-1.0)*cj1*x16253))+((sj5*x16241))+(((-1.0)*r12*x16243))+((sj5*x16235)));
evalcond[2]=((((-1.0)*x16232*x16240))+(((-1.0)*x16248*x16249))+x16230+(((-1.0)*x16232*x16250))+((r10*x16245))+(((-1.0)*cj5*x16232*x16235)));
evalcond[3]=((((-1.0)*x16232*x16249))+((cj4*x16240))+(((-1.0)*sj1*x16253))+((x16235*x16247))+((r10*x16233))+((x16241*x16247)));
evalcond[4]=(((r00*x16233))+((cj4*x16242))+((x16239*x16247))+(((-1.0)*sj1*x16254))+(((-1.0)*x16232*x16236))+((x16238*x16247)));
evalcond[5]=(((r00*x16245))+(((-1.0)*x16232*x16242))+(((-1.0)*x16236*x16248))+(((-1.0)*cj5*x16232*x16239))+(((-1.0)*cj5*x16232*x16238))+(((-1.0)*x16253)));
evalcond[6]=(((x16230*x16237))+((r02*x16246))+(((-1.0)*x16234*x16238))+(((-1.0)*x16234*x16239))+x16251+((x16239*x16244))+(((-1.0)*px))+(((-1.0)*sj1*x16251))+(((0.01)*x16242))+((x16238*x16244)));
evalcond[7]=(((x16231*x16237))+((r12*x16246))+(((-1.0)*x16234*x16235))+x16252+(((-1.0)*py))+(((-1.0)*sj1*x16252))+((x16235*x16244))+((x16241*x16244))+(((0.01)*x16240))+(((-1.0)*x16234*x16241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16255=((1.0)*cj5);
IkReal x16256=(cj6*sj4);
IkReal x16257=(r22*sj5);
IkReal x16258=(cj4*r21);
IkReal x16259=(cj5*cj6);
IkReal x16260=((1.0)*sj6);
IkReal x16261=(cj5*r20*sj6);
IkReal x16262=(r20*sj5*sj6);
IkReal x16263=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r20*sj4*sj6*x16255))+((cj4*cj6*r20))+(((-1.0)*r21*x16255*x16256))+(((-1.0)*sj4*x16257))+(((-1.0)*x16258*x16260)));
evalcond[2]=((((0.01)*r21*x16259))+(((0.069)*cj1))+(((0.01)*x16261))+(((0.01)*x16257))+(((-1.0)*pz))+(((-0.37429)*x16262))+(((-0.37429)*x16263))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*r22*x16255))+x16262+x16263);
evalcond[4]=(((cj4*x16261))+cj1+((x16258*x16259))+((r20*x16256))+(((-1.0)*r21*sj4*x16260))+((cj4*x16257)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x16264=(cj6*sj5);
IkReal x16265=(sj5*sj6);
IkReal x16266=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r02*x16266))+((r00*x16265))+((r01*x16264)))))+(IKabs((((r10*x16265))+((r11*x16264))+(((-1.0)*r12*x16266))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16267=((1.0)*cj6);
IkReal x16268=((1.0)*cj4);
CheckValue<IkReal> x16269=IKPowWithIntegerCheck(sj1,-1);
if(!x16269.valid){
continue;
}
CheckValue<IkReal> x16270=IKPowWithIntegerCheck(cj1,-1);
if(!x16270.valid){
continue;
}
if( IKabs(((x16269.value)*(((((-1.0)*cj5*r10*sj6*x16268))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x16267))+(((-1.0)*cj4*cj5*r11*x16267))+(((-1.0)*r12*sj5*x16268)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16270.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16269.value)*(((((-1.0)*cj5*r10*sj6*x16268))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x16267))+(((-1.0)*cj4*cj5*r11*x16267))+(((-1.0)*r12*sj5*x16268))))))+IKsqr(((x16270.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16269.value)*(((((-1.0)*cj5*r10*sj6*x16268))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x16267))+(((-1.0)*cj4*cj5*r11*x16267))+(((-1.0)*r12*sj5*x16268))))), ((x16270.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16271=IKsin(j0);
IkReal x16272=IKcos(j0);
IkReal x16273=((1.0)*sj4);
IkReal x16274=(cj6*sj4);
IkReal x16275=((0.37429)*sj5);
IkReal x16276=(r10*sj6);
IkReal x16277=(r01*sj6);
IkReal x16278=((0.36442)*cj1);
IkReal x16279=(cj6*r01);
IkReal x16280=(r00*sj6);
IkReal x16281=(cj6*r11);
IkReal x16282=(r02*sj5);
IkReal x16283=((0.01)*cj5);
IkReal x16284=(r12*sj5);
IkReal x16285=(cj4*cj6);
IkReal x16286=(cj5*r02);
IkReal x16287=(cj4*cj5);
IkReal x16288=((1.0)*cj4);
IkReal x16289=(r11*sj6);
IkReal x16290=(cj5*r12);
IkReal x16291=(cj5*x16281);
IkReal x16292=(sj1*x16271);
IkReal x16293=((1.0)*x16272);
IkReal x16294=((0.069)*x16272);
evalcond[0]=((((-1.0)*x16286))+((sj5*x16279))+((sj5*x16280))+(((-1.0)*cj1*x16293)));
evalcond[1]=((((-1.0)*x16290))+((sj5*x16276))+((sj5*x16281))+(((-1.0)*cj1*x16271)));
evalcond[2]=(((r10*x16274))+((cj4*x16284))+((x16276*x16287))+((x16281*x16287))+x16292+(((-1.0)*x16273*x16289)));
evalcond[3]=(((cj4*x16282))+((r00*x16274))+((sj1*x16272))+((x16280*x16287))+(((-1.0)*x16273*x16277))+((x16279*x16287)));
evalcond[4]=((((-1.0)*cj5*x16273*x16279))+(((-1.0)*cj5*x16273*x16280))+(((-1.0)*x16277*x16288))+((r00*x16285))+x16271+(((-1.0)*x16273*x16282)));
evalcond[5]=((((-1.0)*cj5*x16273*x16276))+(((-1.0)*x16273*x16291))+(((-1.0)*x16273*x16284))+(((-1.0)*x16293))+(((-1.0)*x16288*x16289))+((r10*x16285)));
evalcond[6]=(x16294+((x16280*x16283))+(((0.37429)*x16286))+(((-1.0)*px))+(((-1.0)*x16275*x16280))+(((-1.0)*x16275*x16279))+(((0.01)*x16282))+((x16272*x16278))+((sj1*x16294))+((x16279*x16283)));
evalcond[7]=((((0.37429)*x16290))+(((0.069)*x16271))+((x16276*x16283))+(((0.069)*x16292))+((x16281*x16283))+((x16271*x16278))+(((-1.0)*py))+(((-1.0)*x16275*x16281))+(((-1.0)*x16275*x16276))+(((0.01)*x16284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16295=(cj6*r01);
IkReal x16296=(cj5*sj4);
IkReal x16297=(r00*sj6);
CheckValue<IkReal> x16298=IKPowWithIntegerCheck(cj1,-1);
if(!x16298.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj6*r00))+((x16295*x16296))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x16296*x16297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16298.value)*((((sj5*x16295))+((sj5*x16297))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj6*r00))+((x16295*x16296))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x16296*x16297))))+IKsqr(((x16298.value)*((((sj5*x16295))+((sj5*x16297))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj6*r00))+((x16295*x16296))+((cj4*r01*sj6))+((r02*sj4*sj5))+((x16296*x16297))), ((x16298.value)*((((sj5*x16295))+((sj5*x16297))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16299=IKsin(j0);
IkReal x16300=IKcos(j0);
IkReal x16301=((1.0)*sj4);
IkReal x16302=(cj6*sj4);
IkReal x16303=((0.37429)*sj5);
IkReal x16304=(r10*sj6);
IkReal x16305=(r01*sj6);
IkReal x16306=((0.36442)*cj1);
IkReal x16307=(cj6*r01);
IkReal x16308=(r00*sj6);
IkReal x16309=(cj6*r11);
IkReal x16310=(r02*sj5);
IkReal x16311=((0.01)*cj5);
IkReal x16312=(r12*sj5);
IkReal x16313=(cj4*cj6);
IkReal x16314=(cj5*r02);
IkReal x16315=(cj4*cj5);
IkReal x16316=((1.0)*cj4);
IkReal x16317=(r11*sj6);
IkReal x16318=(cj5*r12);
IkReal x16319=(cj5*x16309);
IkReal x16320=(sj1*x16299);
IkReal x16321=((1.0)*x16300);
IkReal x16322=((0.069)*x16300);
evalcond[0]=((((-1.0)*cj1*x16321))+((sj5*x16307))+((sj5*x16308))+(((-1.0)*x16314)));
evalcond[1]=((((-1.0)*cj1*x16299))+((sj5*x16304))+((sj5*x16309))+(((-1.0)*x16318)));
evalcond[2]=(((cj4*x16312))+((x16304*x16315))+x16320+(((-1.0)*x16301*x16317))+((r10*x16302))+((x16309*x16315)));
evalcond[3]=(((cj4*x16310))+((sj1*x16300))+((r00*x16302))+(((-1.0)*x16301*x16305))+((x16308*x16315))+((x16307*x16315)));
evalcond[4]=(x16299+((r00*x16313))+(((-1.0)*x16301*x16310))+(((-1.0)*x16305*x16316))+(((-1.0)*cj5*x16301*x16308))+(((-1.0)*cj5*x16301*x16307)));
evalcond[5]=((((-1.0)*x16301*x16319))+(((-1.0)*x16301*x16312))+(((-1.0)*x16321))+(((-1.0)*x16316*x16317))+(((-1.0)*cj5*x16301*x16304))+((r10*x16313)));
evalcond[6]=((((0.01)*x16310))+x16322+(((0.37429)*x16314))+((x16300*x16306))+(((-1.0)*px))+((sj1*x16322))+((x16308*x16311))+(((-1.0)*x16303*x16308))+(((-1.0)*x16303*x16307))+((x16307*x16311)));
evalcond[7]=((((0.01)*x16312))+((x16304*x16311))+(((0.069)*x16299))+(((0.37429)*x16318))+(((-1.0)*py))+((x16299*x16306))+(((0.069)*x16320))+(((-1.0)*x16303*x16309))+(((-1.0)*x16303*x16304))+((x16309*x16311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16323=(cj6*sj5);
IkReal x16324=(sj5*sj6);
IkReal x16325=((1.0)*cj5);
CheckValue<IkReal> x16326=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16326.valid){
continue;
}
CheckValue<IkReal> x16327 = IKatan2WithCheck(IkReal((((r10*x16324))+(((-1.0)*r12*x16325))+((r11*x16323)))),(((r00*x16324))+((r01*x16323))+(((-1.0)*r02*x16325))),IKFAST_ATAN2_MAGTHRESH);
if(!x16327.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16326.value)))+(x16327.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16328=IKsin(j0);
IkReal x16329=IKcos(j0);
IkReal x16330=((1.0)*sj4);
IkReal x16331=(cj6*sj4);
IkReal x16332=((0.37429)*sj5);
IkReal x16333=(r10*sj6);
IkReal x16334=(r01*sj6);
IkReal x16335=((0.36442)*cj1);
IkReal x16336=(cj6*r01);
IkReal x16337=(r00*sj6);
IkReal x16338=(cj6*r11);
IkReal x16339=(r02*sj5);
IkReal x16340=((0.01)*cj5);
IkReal x16341=(r12*sj5);
IkReal x16342=(cj4*cj6);
IkReal x16343=(cj5*r02);
IkReal x16344=(cj4*cj5);
IkReal x16345=((1.0)*cj4);
IkReal x16346=(r11*sj6);
IkReal x16347=(cj5*r12);
IkReal x16348=(cj5*x16338);
IkReal x16349=(sj1*x16328);
IkReal x16350=((1.0)*x16329);
IkReal x16351=((0.069)*x16329);
evalcond[0]=((((-1.0)*cj1*x16350))+((sj5*x16336))+((sj5*x16337))+(((-1.0)*x16343)));
evalcond[1]=((((-1.0)*cj1*x16328))+((sj5*x16333))+((sj5*x16338))+(((-1.0)*x16347)));
evalcond[2]=(((x16338*x16344))+((r10*x16331))+(((-1.0)*x16330*x16346))+x16349+((x16333*x16344))+((cj4*x16341)));
evalcond[3]=((((-1.0)*x16330*x16334))+((x16337*x16344))+((x16336*x16344))+((sj1*x16329))+((r00*x16331))+((cj4*x16339)));
evalcond[4]=((((-1.0)*x16330*x16339))+x16328+(((-1.0)*cj5*x16330*x16336))+(((-1.0)*cj5*x16330*x16337))+((r00*x16342))+(((-1.0)*x16334*x16345)));
evalcond[5]=((((-1.0)*x16350))+(((-1.0)*x16330*x16348))+(((-1.0)*x16330*x16341))+(((-1.0)*x16345*x16346))+((r10*x16342))+(((-1.0)*cj5*x16330*x16333)));
evalcond[6]=((((-1.0)*x16332*x16337))+(((-1.0)*x16332*x16336))+((x16337*x16340))+((sj1*x16351))+x16351+(((-1.0)*px))+(((0.37429)*x16343))+((x16336*x16340))+((x16329*x16335))+(((0.01)*x16339)));
evalcond[7]=(((x16338*x16340))+(((0.01)*x16341))+(((-1.0)*x16332*x16338))+(((-1.0)*x16332*x16333))+(((-1.0)*py))+((x16333*x16340))+(((0.37429)*x16347))+((x16328*x16335))+(((0.069)*x16349))+(((0.069)*x16328)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x16359=IKPowWithIntegerCheck(cj1,-1);
if(!x16359.valid){
continue;
}
IkReal x16352=x16359.value;
IkReal x16353=(cj1*r10);
IkReal x16354=(cj1*cj4);
IkReal x16355=(sj2*sj5);
IkReal x16356=(cj6*r01);
IkReal x16357=(r00*sj6);
IkReal x16358=((1.0)*cj5*r02);
CheckValue<IkReal> x16360=IKPowWithIntegerCheck(cj2,-1);
if(!x16360.valid){
continue;
}
CheckValue<IkReal> x16361=IKPowWithIntegerCheck(sj1,-1);
if(!x16361.valid){
continue;
}
if( IKabs((x16352*(x16360.value)*(x16361.value)*(((((-1.0)*sj2*x16358))+((cj4*cj5*sj6*x16353))+((r12*sj5*x16354))+((cj5*cj6*r11*x16354))+((cj6*sj4*x16353))+(((-1.0)*cj1*r11*sj4*sj6))+((x16355*x16357))+((x16355*x16356)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x16352*(((((-1.0)*x16358))+((sj5*x16356))+((sj5*x16357)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16352*(x16360.value)*(x16361.value)*(((((-1.0)*sj2*x16358))+((cj4*cj5*sj6*x16353))+((r12*sj5*x16354))+((cj5*cj6*r11*x16354))+((cj6*sj4*x16353))+(((-1.0)*cj1*r11*sj4*sj6))+((x16355*x16357))+((x16355*x16356))))))+IKsqr((x16352*(((((-1.0)*x16358))+((sj5*x16356))+((sj5*x16357))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x16352*(x16360.value)*(x16361.value)*(((((-1.0)*sj2*x16358))+((cj4*cj5*sj6*x16353))+((r12*sj5*x16354))+((cj5*cj6*r11*x16354))+((cj6*sj4*x16353))+(((-1.0)*cj1*r11*sj4*sj6))+((x16355*x16357))+((x16355*x16356))))), (x16352*(((((-1.0)*x16358))+((sj5*x16356))+((sj5*x16357))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16362=IKcos(j0);
IkReal x16363=IKsin(j0);
IkReal x16364=((1.0)*sj4);
IkReal x16365=(cj6*sj4);
IkReal x16366=((0.37429)*sj5);
IkReal x16367=(r10*sj6);
IkReal x16368=((0.36442)*cj1);
IkReal x16369=(cj6*r11);
IkReal x16370=(r01*sj6);
IkReal x16371=(r00*sj6);
IkReal x16372=((0.069)*sj2);
IkReal x16373=(cj6*r01);
IkReal x16374=(r12*sj5);
IkReal x16375=(r02*sj5);
IkReal x16376=((1.0)*sj1);
IkReal x16377=((0.01)*cj5);
IkReal x16378=((1.0)*cj1);
IkReal x16379=(cj4*cj6);
IkReal x16380=(cj5*r02);
IkReal x16381=(cj4*cj5);
IkReal x16382=((1.0)*cj4);
IkReal x16383=(r11*sj6);
IkReal x16384=(cj5*r12);
IkReal x16385=(cj5*x16369);
IkReal x16386=(cj2*x16362);
IkReal x16387=((0.069)*x16363);
IkReal x16388=(sj2*x16362);
IkReal x16389=((1.0)*x16363);
evalcond[0]=(((sj5*x16373))+((sj5*x16371))+(((-1.0)*x16380))+(((-1.0)*x16362*x16378)));
evalcond[1]=(((sj5*x16367))+((sj5*x16369))+(((-1.0)*x16384))+(((-1.0)*x16363*x16378)));
evalcond[2]=(x16388+((cj4*x16374))+((r10*x16365))+((x16369*x16381))+(((-1.0)*x16364*x16383))+((x16367*x16381))+(((-1.0)*cj2*x16363*x16376)));
evalcond[3]=(((r00*x16365))+(((-1.0)*sj2*x16389))+((cj4*x16375))+(((-1.0)*x16364*x16370))+(((-1.0)*x16376*x16386))+((x16373*x16381))+((x16371*x16381)));
evalcond[4]=((((-1.0)*x16382*x16383))+x16386+(((-1.0)*x16364*x16374))+((sj1*sj2*x16363))+((r10*x16379))+(((-1.0)*x16364*x16385))+(((-1.0)*cj5*x16364*x16367)));
evalcond[5]=(((sj1*x16388))+((r00*x16379))+(((-1.0)*x16370*x16382))+(((-1.0)*x16364*x16375))+(((-1.0)*cj2*x16389))+(((-1.0)*cj5*x16364*x16373))+(((-1.0)*cj5*x16364*x16371)));
evalcond[6]=((((-0.069)*sj1*x16386))+(((-1.0)*x16366*x16373))+(((-1.0)*x16366*x16371))+(((0.01)*x16375))+(((-1.0)*px))+((x16362*x16368))+(((0.069)*x16362))+((x16373*x16377))+(((0.37429)*x16380))+(((-1.0)*x16363*x16372))+((x16371*x16377)));
evalcond[7]=(((x16363*x16368))+x16387+(((0.01)*x16374))+((x16362*x16372))+(((-1.0)*py))+(((-1.0)*cj2*sj1*x16387))+((x16367*x16377))+(((-1.0)*x16366*x16367))+(((-1.0)*x16366*x16369))+((x16369*x16377))+(((0.37429)*x16384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x16397=IKPowWithIntegerCheck(cj1,-1);
if(!x16397.valid){
continue;
}
IkReal x16390=x16397.value;
IkReal x16391=(cj1*cj4);
IkReal x16392=(cj2*sj1);
IkReal x16393=(cj5*r02);
IkReal x16394=(r00*sj6);
IkReal x16395=(cj1*sj4);
IkReal x16396=(cj6*r01*sj5);
CheckValue<IkReal> x16398=IKPowWithIntegerCheck(sj2,-1);
if(!x16398.valid){
continue;
}
if( IKabs((x16390*(x16398.value)*(((((-1.0)*x16392*x16396))+((r02*sj5*x16391))+((cj5*x16391*x16394))+((x16392*x16393))+(((-1.0)*sj5*x16392*x16394))+(((-1.0)*r01*sj6*x16395))+((cj6*r00*x16395))+((cj5*cj6*r01*x16391)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x16390*((x16396+(((-1.0)*x16393))+((sj5*x16394)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16390*(x16398.value)*(((((-1.0)*x16392*x16396))+((r02*sj5*x16391))+((cj5*x16391*x16394))+((x16392*x16393))+(((-1.0)*sj5*x16392*x16394))+(((-1.0)*r01*sj6*x16395))+((cj6*r00*x16395))+((cj5*cj6*r01*x16391))))))+IKsqr((x16390*((x16396+(((-1.0)*x16393))+((sj5*x16394))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x16390*(x16398.value)*(((((-1.0)*x16392*x16396))+((r02*sj5*x16391))+((cj5*x16391*x16394))+((x16392*x16393))+(((-1.0)*sj5*x16392*x16394))+(((-1.0)*r01*sj6*x16395))+((cj6*r00*x16395))+((cj5*cj6*r01*x16391))))), (x16390*((x16396+(((-1.0)*x16393))+((sj5*x16394))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16399=IKcos(j0);
IkReal x16400=IKsin(j0);
IkReal x16401=((1.0)*sj4);
IkReal x16402=(cj6*sj4);
IkReal x16403=((0.37429)*sj5);
IkReal x16404=(r10*sj6);
IkReal x16405=((0.36442)*cj1);
IkReal x16406=(cj6*r11);
IkReal x16407=(r01*sj6);
IkReal x16408=(r00*sj6);
IkReal x16409=((0.069)*sj2);
IkReal x16410=(cj6*r01);
IkReal x16411=(r12*sj5);
IkReal x16412=(r02*sj5);
IkReal x16413=((1.0)*sj1);
IkReal x16414=((0.01)*cj5);
IkReal x16415=((1.0)*cj1);
IkReal x16416=(cj4*cj6);
IkReal x16417=(cj5*r02);
IkReal x16418=(cj4*cj5);
IkReal x16419=((1.0)*cj4);
IkReal x16420=(r11*sj6);
IkReal x16421=(cj5*r12);
IkReal x16422=(cj5*x16406);
IkReal x16423=(cj2*x16399);
IkReal x16424=((0.069)*x16400);
IkReal x16425=(sj2*x16399);
IkReal x16426=((1.0)*x16400);
evalcond[0]=(((sj5*x16410))+(((-1.0)*x16399*x16415))+((sj5*x16408))+(((-1.0)*x16417)));
evalcond[1]=(((sj5*x16404))+((sj5*x16406))+(((-1.0)*x16400*x16415))+(((-1.0)*x16421)));
evalcond[2]=(((cj4*x16411))+x16425+((x16406*x16418))+((r10*x16402))+((x16404*x16418))+(((-1.0)*cj2*x16400*x16413))+(((-1.0)*x16401*x16420)));
evalcond[3]=(((cj4*x16412))+((x16410*x16418))+(((-1.0)*sj2*x16426))+(((-1.0)*x16401*x16407))+((x16408*x16418))+(((-1.0)*x16413*x16423))+((r00*x16402)));
evalcond[4]=(((sj1*sj2*x16400))+x16423+(((-1.0)*cj5*x16401*x16404))+(((-1.0)*x16401*x16411))+((r10*x16416))+(((-1.0)*x16419*x16420))+(((-1.0)*x16401*x16422)));
evalcond[5]=(((sj1*x16425))+(((-1.0)*cj5*x16401*x16408))+(((-1.0)*x16401*x16412))+((r00*x16416))+(((-1.0)*x16407*x16419))+(((-1.0)*cj5*x16401*x16410))+(((-1.0)*cj2*x16426)));
evalcond[6]=((((-0.069)*sj1*x16423))+(((-1.0)*x16400*x16409))+(((-1.0)*x16403*x16410))+(((0.01)*x16412))+(((-1.0)*x16403*x16408))+(((0.069)*x16399))+((x16410*x16414))+((x16399*x16405))+(((-1.0)*px))+(((0.37429)*x16417))+((x16408*x16414)));
evalcond[7]=((((0.37429)*x16421))+(((0.01)*x16411))+(((-1.0)*x16403*x16406))+(((-1.0)*x16403*x16404))+(((-1.0)*cj2*sj1*x16424))+x16424+((x16406*x16414))+((x16399*x16409))+((x16404*x16414))+(((-1.0)*py))+((x16400*x16405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16427=(cj6*sj5);
IkReal x16428=(sj5*sj6);
IkReal x16429=((1.0)*cj5);
CheckValue<IkReal> x16430=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16430.valid){
continue;
}
CheckValue<IkReal> x16431 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x16429))+((r11*x16427))+((r10*x16428)))),(((r00*x16428))+((r01*x16427))+(((-1.0)*r02*x16429))),IKFAST_ATAN2_MAGTHRESH);
if(!x16431.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16430.value)))+(x16431.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16432=IKcos(j0);
IkReal x16433=IKsin(j0);
IkReal x16434=((1.0)*sj4);
IkReal x16435=(cj6*sj4);
IkReal x16436=((0.37429)*sj5);
IkReal x16437=(r10*sj6);
IkReal x16438=((0.36442)*cj1);
IkReal x16439=(cj6*r11);
IkReal x16440=(r01*sj6);
IkReal x16441=(r00*sj6);
IkReal x16442=((0.069)*sj2);
IkReal x16443=(cj6*r01);
IkReal x16444=(r12*sj5);
IkReal x16445=(r02*sj5);
IkReal x16446=((1.0)*sj1);
IkReal x16447=((0.01)*cj5);
IkReal x16448=((1.0)*cj1);
IkReal x16449=(cj4*cj6);
IkReal x16450=(cj5*r02);
IkReal x16451=(cj4*cj5);
IkReal x16452=((1.0)*cj4);
IkReal x16453=(r11*sj6);
IkReal x16454=(cj5*r12);
IkReal x16455=(cj5*x16439);
IkReal x16456=(cj2*x16432);
IkReal x16457=((0.069)*x16433);
IkReal x16458=(sj2*x16432);
IkReal x16459=((1.0)*x16433);
evalcond[0]=(((sj5*x16441))+((sj5*x16443))+(((-1.0)*x16450))+(((-1.0)*x16432*x16448)));
evalcond[1]=((((-1.0)*x16433*x16448))+((sj5*x16437))+((sj5*x16439))+(((-1.0)*x16454)));
evalcond[2]=((((-1.0)*x16434*x16453))+((x16439*x16451))+(((-1.0)*cj2*x16433*x16446))+((x16437*x16451))+x16458+((r10*x16435))+((cj4*x16444)));
evalcond[3]=(((x16443*x16451))+((r00*x16435))+((x16441*x16451))+(((-1.0)*x16446*x16456))+(((-1.0)*sj2*x16459))+(((-1.0)*x16434*x16440))+((cj4*x16445)));
evalcond[4]=(((sj1*sj2*x16433))+(((-1.0)*x16434*x16455))+((r10*x16449))+x16456+(((-1.0)*x16452*x16453))+(((-1.0)*x16434*x16444))+(((-1.0)*cj5*x16434*x16437)));
evalcond[5]=(((sj1*x16458))+(((-1.0)*cj5*x16434*x16441))+(((-1.0)*cj5*x16434*x16443))+(((-1.0)*x16440*x16452))+(((-1.0)*x16434*x16445))+((r00*x16449))+(((-1.0)*cj2*x16459)));
evalcond[6]=((((-1.0)*x16433*x16442))+(((0.069)*x16432))+(((-1.0)*x16436*x16443))+(((-1.0)*x16436*x16441))+(((-1.0)*px))+((x16443*x16447))+(((0.01)*x16445))+((x16441*x16447))+((x16432*x16438))+(((-0.069)*sj1*x16456))+(((0.37429)*x16450)));
evalcond[7]=(((x16432*x16442))+x16457+(((-1.0)*cj2*sj1*x16457))+(((-1.0)*py))+(((0.01)*x16444))+((x16439*x16447))+((x16437*x16447))+((x16433*x16438))+(((-1.0)*x16436*x16439))+(((-1.0)*x16436*x16437))+(((0.37429)*x16454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16460=(cj6*sj5);
IkReal x16461=(sj5*sj6);
IkReal x16462=((1.0)*cj5);
CheckValue<IkReal> x16463=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16463.valid){
continue;
}
CheckValue<IkReal> x16464 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x16462))+((r10*x16461))+((r11*x16460)))),((((-1.0)*r02*x16462))+((r01*x16460))+((r00*x16461))),IKFAST_ATAN2_MAGTHRESH);
if(!x16464.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16463.value)))+(x16464.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x16465=IKcos(j0);
IkReal x16466=IKsin(j0);
IkReal x16467=((0.01)*cj5);
IkReal x16468=(cj6*r11);
IkReal x16469=(r10*sj6);
IkReal x16470=((0.37429)*sj5);
IkReal x16471=(cj5*r12);
IkReal x16472=((1.0)*cj1);
IkReal x16473=((0.36442)*cj1);
IkReal x16474=(r00*sj6);
IkReal x16475=(cj6*r01);
IkReal x16476=(cj5*r02);
IkReal x16477=(cj2*sj1);
IkReal x16478=((0.01)*sj5);
IkReal x16479=((0.069)*x16466);
IkReal x16480=((0.069)*x16465);
evalcond[0]=(((sj5*x16474))+((sj5*x16475))+(((-1.0)*x16465*x16472))+(((-1.0)*x16476)));
evalcond[1]=(((sj5*x16469))+((sj5*x16468))+(((-1.0)*x16471))+(((-1.0)*x16466*x16472)));
evalcond[2]=((((-1.0)*x16470*x16474))+(((-1.0)*x16470*x16475))+x16480+((r02*x16478))+(((-1.0)*sj2*x16479))+((x16467*x16475))+((x16467*x16474))+(((-1.0)*px))+((x16465*x16473))+(((-1.0)*x16477*x16480))+(((0.37429)*x16476)));
evalcond[3]=((((-1.0)*x16468*x16470))+(((-1.0)*x16469*x16470))+((sj2*x16480))+x16479+(((-1.0)*x16477*x16479))+((x16467*x16468))+((x16467*x16469))+(((-1.0)*py))+((r12*x16478))+(((0.37429)*x16471))+((x16466*x16473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x16481=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x16481;
j4eval[1]=IKsign(x16481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x16482=((1.0)*sj5);
IkReal x16483=(((cj5*r12))+(((-1.0)*cj6*r11*x16482))+(((-1.0)*r10*sj6*x16482)));
j4eval[0]=x16483;
j4eval[1]=IKsign(x16483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x16484=cj5*cj5;
IkReal x16485=cj6*cj6;
IkReal x16486=r22*r22;
IkReal x16487=r21*r21;
IkReal x16488=r20*r20;
IkReal x16489=((1.0)*cj5);
IkReal x16490=(cj6*r21);
IkReal x16491=(r20*sj6);
IkReal x16492=(cj1*cj2);
IkReal x16493=(cj1*sj2);
IkReal x16494=(r22*sj5);
IkReal x16495=(cj6*r20);
IkReal x16496=((2.0)*cj5);
IkReal x16497=(sj6*x16492);
IkReal x16498=((1.0)*x16487);
IkReal x16499=(x16485*x16488);
IkReal x16500=(((x16484*x16499))+(((-1.0)*x16484*x16485*x16498))+(((-1.0)*x16490*x16494*x16496))+(((2.0)*x16490*x16491))+(((-1.0)*x16484*x16488))+((x16485*x16487))+(((-1.0)*x16498))+(((-1.0)*x16499))+(((-1.0)*x16486))+(((-1.0)*x16491*x16494*x16496))+(((-2.0)*x16484*x16490*x16491))+((x16484*x16486)));
j4eval[0]=x16500;
j4eval[1]=IKsign(x16500);
j4eval[2]=((IKabs((((x16493*x16495))+(((-1.0)*x16492*x16494))+(((-1.0)*x16489*x16490*x16492))+(((-1.0)*r21*sj6*x16493))+(((-1.0)*x16489*x16491*x16492)))))+(IKabs(((((-1.0)*x16493*x16494))+(((-1.0)*x16492*x16495))+((r21*x16497))+(((-1.0)*x16489*x16490*x16493))+(((-1.0)*x16489*x16491*x16493))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16501=((0.069)*cj0);
IkReal x16502=((0.01)*cj5);
IkReal x16503=(cj6*r11);
IkReal x16504=(r20*sj6);
IkReal x16505=((0.069)*sj0);
IkReal x16506=((0.01)*sj5);
IkReal x16507=((1.0)*cj5);
IkReal x16508=(cj6*r01);
IkReal x16509=((0.37429)*cj5);
IkReal x16510=((0.37429)*sj5);
IkReal x16511=(cj6*r21);
IkReal x16512=(r10*sj5*sj6);
IkReal x16513=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-1.0)*x16504*x16510))+(((-1.0)*pz))+((x16502*x16511))+(((-1.0)*x16510*x16511))+((r22*x16509))+((r22*x16506))+((x16502*x16504)));
evalcond[2]=((((-1.0)*r00*sj6*x16510))+(((-1.0)*x16508*x16510))+x16501+(((-1.0)*cj2*x16501))+(((-1.0)*sj2*x16505))+(((-1.0)*px))+((r00*sj6*x16502))+((r02*x16509))+((r02*x16506))+((x16502*x16508)));
evalcond[3]=(((r10*sj6*x16502))+((r12*x16506))+((r12*x16509))+x16505+(((-1.0)*cj2*x16505))+(((-1.0)*r10*sj6*x16510))+(((-1.0)*x16503*x16510))+(((-1.0)*py))+((x16502*x16503))+((sj2*x16501)));
evalcond[4]=((1.0)+((sj5*x16504))+((sj5*x16511))+(((-1.0)*r22*x16507)));
evalcond[5]=(((sj5*x16508))+(((-1.0)*r02*x16507))+x16513);
evalcond[6]=((((-1.0)*r12*x16507))+((sj5*x16503))+x16512);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x16514=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x16514;
j4eval[1]=IKsign(x16514);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x16515=((1.0)*sj5);
IkReal x16516=(((cj5*r12))+(((-1.0)*r10*sj6*x16515))+(((-1.0)*cj6*r11*x16515)));
j4eval[0]=x16516;
j4eval[1]=IKsign(x16516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x16517=cj6*cj6;
IkReal x16518=cj5*cj5;
IkReal x16519=(cj5*sj5);
IkReal x16520=(cj6*r21);
IkReal x16521=((1.0)*r11);
IkReal x16522=(r10*r20);
IkReal x16523=(r10*sj6);
IkReal x16524=(r12*r22);
IkReal x16525=(r21*x16517);
IkReal x16526=(cj6*r20*sj6);
IkReal x16527=(r11*x16518);
IkReal x16528=((1.0)*x16518);
IkReal x16529=(((x16517*x16522))+x16524+((r11*r21))+(((-1.0)*x16517*x16522*x16528))+((x16526*x16527))+((cj6*r11*r22*x16519))+(((-1.0)*x16524*x16528))+(((-1.0)*x16521*x16526))+(((-1.0)*x16521*x16525))+((r12*x16519*x16520))+((x16525*x16527))+((x16518*x16520*x16523))+((r12*r20*sj6*x16519))+(((-1.0)*x16520*x16523))+((x16518*x16522))+((r22*x16519*x16523)));
j4eval[0]=x16529;
j4eval[1]=IKsign(x16529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16530=cj6*cj6;
IkReal x16531=cj5*cj5;
IkReal x16532=((1.0)*r11);
IkReal x16533=(cj6*r20);
IkReal x16534=(cj0*cj2);
IkReal x16535=(cj5*r20);
IkReal x16536=(r12*r22);
IkReal x16537=(cj6*r21);
IkReal x16538=(sj0*sj2);
IkReal x16539=(r22*sj5);
IkReal x16540=(r12*sj5);
IkReal x16541=(r10*sj6);
IkReal x16542=(r21*x16530);
IkReal x16543=(sj6*x16538);
IkReal x16544=((1.0)*x16531);
IkReal x16545=(r10*x16531);
IkReal x16546=(r11*x16531);
IkReal x16547=(r10*r20*x16530);
CheckValue<IkReal> x16548=IKPowWithIntegerCheck(IKsign((((x16542*x16546))+((sj6*x16535*x16540))+x16547+x16536+((r11*r21))+(((-1.0)*x16544*x16547))+((sj6*x16533*x16546))+((cj5*x16539*x16541))+((r20*x16545))+((cj5*x16537*x16540))+((cj5*cj6*r11*x16539))+(((-1.0)*sj6*x16532*x16533))+(((-1.0)*x16532*x16542))+((x16531*x16537*x16541))+(((-1.0)*x16536*x16544))+(((-1.0)*x16537*x16541)))),-1);
if(!x16548.valid){
continue;
}
CheckValue<IkReal> x16549 = IKatan2WithCheck(IkReal((((sj6*x16534*x16535))+((x16535*x16543))+((cj5*x16534*x16537))+((x16534*x16539))+((x16538*x16539))+((cj5*x16537*x16538)))),(((r21*x16543))+(((-1.0)*x16533*x16538))+(((-1.0)*x16533*x16534))+((r21*sj6*x16534))),IKFAST_ATAN2_MAGTHRESH);
if(!x16549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16548.value)))+(x16549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16550=IKcos(j4);
IkReal x16551=IKsin(j4);
IkReal x16552=(cj0*sj2);
IkReal x16553=(cj0*cj2);
IkReal x16554=(cj5*sj6);
IkReal x16555=(cj5*r01);
IkReal x16556=(cj5*r21);
IkReal x16557=((1.0)*sj0);
IkReal x16558=(cj2*x16557);
IkReal x16559=(cj5*cj6*r11);
IkReal x16560=((1.0)*x16551);
IkReal x16561=(cj6*x16550);
IkReal x16562=(sj5*x16550);
IkReal x16563=(cj6*x16551);
IkReal x16564=(sj5*x16560);
IkReal x16565=((1.0)*sj6*x16550);
evalcond[0]=((((-1.0)*r21*sj6*x16560))+((x16556*x16561))+((r22*x16562))+((r20*x16550*x16554))+((r20*x16563)));
evalcond[1]=((((-1.0)*r20*x16554*x16560))+(((-1.0)*cj6*x16556*x16560))+(((-1.0)*r21*x16565))+(((-1.0)*r22*x16564))+((r20*x16561)));
evalcond[2]=(x16552+((r12*x16562))+((r10*x16563))+(((-1.0)*x16558))+((r10*x16550*x16554))+(((-1.0)*r11*sj6*x16560))+((x16550*x16559)));
evalcond[3]=((((-1.0)*r01*sj6*x16560))+((x16555*x16561))+(((-1.0)*x16553))+((r00*x16550*x16554))+((r02*x16562))+(((-1.0)*sj2*x16557))+((r00*x16563)));
evalcond[4]=((((-1.0)*r10*x16554*x16560))+(((-1.0)*x16559*x16560))+x16553+((sj0*sj2))+((r10*x16561))+(((-1.0)*r12*x16564))+(((-1.0)*r11*x16565)));
evalcond[5]=((((-1.0)*r02*x16564))+(((-1.0)*cj6*x16555*x16560))+x16552+(((-1.0)*r00*x16554*x16560))+(((-1.0)*x16558))+(((-1.0)*r01*x16565))+((r00*x16561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16566=((1.0)*r21);
IkReal x16567=(sj0*sj2);
IkReal x16568=(cj0*cj2);
IkReal x16569=((1.0)*sj5);
IkReal x16570=(cj6*x16568);
IkReal x16571=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x16572=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x16569))+(((-1.0)*r10*sj6*x16569)))),-1);
if(!x16572.valid){
continue;
}
CheckValue<IkReal> x16573 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16568*x16569))+(((-1.0)*x16567*x16571))+(((-1.0)*r22*x16567*x16569))+(((-1.0)*cj5*cj6*x16566*x16567))+(((-1.0)*cj5*x16566*x16570))+(((-1.0)*x16568*x16571)))),(((cj6*r20*x16567))+(((-1.0)*sj6*x16566*x16568))+(((-1.0)*sj6*x16566*x16567))+((r20*x16570))),IKFAST_ATAN2_MAGTHRESH);
if(!x16573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16572.value)))+(x16573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16574=IKcos(j4);
IkReal x16575=IKsin(j4);
IkReal x16576=(cj0*sj2);
IkReal x16577=(cj0*cj2);
IkReal x16578=(cj5*sj6);
IkReal x16579=(cj5*r01);
IkReal x16580=(cj5*r21);
IkReal x16581=((1.0)*sj0);
IkReal x16582=(cj2*x16581);
IkReal x16583=(cj5*cj6*r11);
IkReal x16584=((1.0)*x16575);
IkReal x16585=(cj6*x16574);
IkReal x16586=(sj5*x16574);
IkReal x16587=(cj6*x16575);
IkReal x16588=(sj5*x16584);
IkReal x16589=((1.0)*sj6*x16574);
evalcond[0]=((((-1.0)*r21*sj6*x16584))+((r20*x16587))+((r22*x16586))+((r20*x16574*x16578))+((x16580*x16585)));
evalcond[1]=(((r20*x16585))+(((-1.0)*r20*x16578*x16584))+(((-1.0)*r21*x16589))+(((-1.0)*r22*x16588))+(((-1.0)*cj6*x16580*x16584)));
evalcond[2]=((((-1.0)*x16582))+x16576+((r12*x16586))+((r10*x16574*x16578))+((x16574*x16583))+((r10*x16587))+(((-1.0)*r11*sj6*x16584)));
evalcond[3]=(((r00*x16574*x16578))+(((-1.0)*r01*sj6*x16584))+((x16579*x16585))+((r00*x16587))+(((-1.0)*x16577))+(((-1.0)*sj2*x16581))+((r02*x16586)));
evalcond[4]=((((-1.0)*r12*x16588))+(((-1.0)*r11*x16589))+(((-1.0)*x16583*x16584))+x16577+((sj0*sj2))+(((-1.0)*r10*x16578*x16584))+((r10*x16585)));
evalcond[5]=((((-1.0)*x16582))+x16576+(((-1.0)*r01*x16589))+(((-1.0)*r02*x16588))+(((-1.0)*r00*x16578*x16584))+((r00*x16585))+(((-1.0)*cj6*x16579*x16584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16590=(r22*sj5);
IkReal x16591=(cj6*r20);
IkReal x16592=(cj0*sj2);
IkReal x16593=(r21*sj6);
IkReal x16594=((1.0)*cj2*sj0);
IkReal x16595=(cj5*cj6*r21);
IkReal x16596=(cj5*r20*sj6);
CheckValue<IkReal> x16597 = IKatan2WithCheck(IkReal((((x16590*x16592))+(((-1.0)*x16590*x16594))+((x16592*x16596))+((x16592*x16595))+(((-1.0)*x16594*x16595))+(((-1.0)*x16594*x16596)))),((((-1.0)*x16593*x16594))+(((-1.0)*x16591*x16592))+((x16592*x16593))+((cj2*sj0*x16591))),IKFAST_ATAN2_MAGTHRESH);
if(!x16597.valid){
continue;
}
CheckValue<IkReal> x16598=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x16598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16597.value)+(((1.5707963267949)*(x16598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16599=IKcos(j4);
IkReal x16600=IKsin(j4);
IkReal x16601=(cj0*sj2);
IkReal x16602=(cj0*cj2);
IkReal x16603=(cj5*sj6);
IkReal x16604=(cj5*r01);
IkReal x16605=(cj5*r21);
IkReal x16606=((1.0)*sj0);
IkReal x16607=(cj2*x16606);
IkReal x16608=(cj5*cj6*r11);
IkReal x16609=((1.0)*x16600);
IkReal x16610=(cj6*x16599);
IkReal x16611=(sj5*x16599);
IkReal x16612=(cj6*x16600);
IkReal x16613=(sj5*x16609);
IkReal x16614=((1.0)*sj6*x16599);
evalcond[0]=(((x16605*x16610))+((r20*x16599*x16603))+((r22*x16611))+(((-1.0)*r21*sj6*x16609))+((r20*x16612)));
evalcond[1]=((((-1.0)*cj6*x16605*x16609))+(((-1.0)*r22*x16613))+(((-1.0)*r21*x16614))+((r20*x16610))+(((-1.0)*r20*x16603*x16609)));
evalcond[2]=(x16601+(((-1.0)*r11*sj6*x16609))+((x16599*x16608))+(((-1.0)*x16607))+((r10*x16599*x16603))+((r12*x16611))+((r10*x16612)));
evalcond[3]=(((r02*x16611))+((x16604*x16610))+((r00*x16612))+(((-1.0)*sj2*x16606))+(((-1.0)*x16602))+(((-1.0)*r01*sj6*x16609))+((r00*x16599*x16603)));
evalcond[4]=(x16602+(((-1.0)*r11*x16614))+(((-1.0)*r12*x16613))+((sj0*sj2))+(((-1.0)*r10*x16603*x16609))+(((-1.0)*x16608*x16609))+((r10*x16610)));
evalcond[5]=(x16601+(((-1.0)*r02*x16613))+((r00*x16610))+(((-1.0)*r01*x16614))+(((-1.0)*cj6*x16604*x16609))+(((-1.0)*x16607))+(((-1.0)*r00*x16603*x16609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16615=((0.069)*cj0);
IkReal x16616=((0.01)*cj5);
IkReal x16617=(cj6*r11);
IkReal x16618=(r20*sj6);
IkReal x16619=((0.069)*sj0);
IkReal x16620=((0.01)*sj5);
IkReal x16621=((1.0)*cj5);
IkReal x16622=(cj6*r01);
IkReal x16623=((0.37429)*cj5);
IkReal x16624=((0.37429)*sj5);
IkReal x16625=(cj6*r21);
IkReal x16626=(r10*sj5*sj6);
IkReal x16627=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((r22*x16620))+((r22*x16623))+(((-1.0)*x16618*x16624))+(((-1.0)*pz))+((x16616*x16625))+(((-1.0)*x16624*x16625))+((x16616*x16618)));
evalcond[2]=((((-1.0)*x16622*x16624))+x16615+((r02*x16620))+((r02*x16623))+((cj2*x16615))+((r00*sj6*x16616))+(((-1.0)*px))+((x16616*x16622))+(((-1.0)*sj2*x16619))+(((-1.0)*r00*sj6*x16624)));
evalcond[3]=(((r12*x16620))+((r12*x16623))+((r10*sj6*x16616))+x16619+((cj2*x16619))+(((-1.0)*r10*sj6*x16624))+(((-1.0)*py))+((x16616*x16617))+(((-1.0)*x16617*x16624))+((sj2*x16615)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x16621))+((sj5*x16618))+((sj5*x16625)));
evalcond[5]=(x16627+(((-1.0)*r02*x16621))+((sj5*x16622)));
evalcond[6]=(x16626+(((-1.0)*r12*x16621))+((sj5*x16617)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x16628=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x16628;
j4eval[1]=IKsign(x16628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x16629=((1.0)*sj5);
IkReal x16630=(((cj5*r12))+(((-1.0)*r10*sj6*x16629))+(((-1.0)*cj6*r11*x16629)));
j4eval[0]=x16630;
j4eval[1]=IKsign(x16630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x16631=cj6*cj6;
IkReal x16632=cj5*cj5;
IkReal x16633=(cj5*sj5);
IkReal x16634=(cj6*r21);
IkReal x16635=((1.0)*r11);
IkReal x16636=(r10*r20);
IkReal x16637=(r10*sj6);
IkReal x16638=(r12*r22);
IkReal x16639=(r21*x16631);
IkReal x16640=(cj6*r20*sj6);
IkReal x16641=(r11*x16632);
IkReal x16642=((1.0)*x16632);
IkReal x16643=((((-1.0)*x16635*x16640))+x16638+((cj6*r11*r22*x16633))+((r11*r21))+((x16632*x16634*x16637))+((r12*x16633*x16634))+((x16639*x16641))+((x16631*x16636))+(((-1.0)*x16638*x16642))+((r12*r20*sj6*x16633))+((x16640*x16641))+((r22*x16633*x16637))+((x16632*x16636))+(((-1.0)*x16634*x16637))+(((-1.0)*x16635*x16639))+(((-1.0)*x16631*x16636*x16642)));
j4eval[0]=x16643;
j4eval[1]=IKsign(x16643);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16644=cj6*cj6;
IkReal x16645=cj5*cj5;
IkReal x16646=((1.0)*r11);
IkReal x16647=((1.0)*r20);
IkReal x16648=(cj0*cj2);
IkReal x16649=(r12*r22);
IkReal x16650=(cj6*sj6);
IkReal x16651=((1.0)*r21);
IkReal x16652=(r22*sj5);
IkReal x16653=(sj0*sj2);
IkReal x16654=(r12*sj5);
IkReal x16655=(cj5*sj6);
IkReal x16656=(r21*x16644);
IkReal x16657=(cj5*x16653);
IkReal x16658=(r10*x16645);
IkReal x16659=(r11*x16645);
IkReal x16660=(cj5*cj6*r21);
CheckValue<IkReal> x16661=IKPowWithIntegerCheck(IKsign((((r20*x16650*x16659))+x16649+((r11*r21))+((cj5*cj6*r11*x16652))+((x16656*x16659))+(((-1.0)*r10*x16650*x16651))+((r20*x16658))+(((-1.0)*x16644*x16647*x16658))+(((-1.0)*x16645*x16649))+((r10*x16652*x16655))+((r21*x16650*x16658))+((r10*r20*x16644))+((x16654*x16660))+((r20*x16654*x16655))+(((-1.0)*x16646*x16656))+(((-1.0)*r20*x16646*x16650)))),-1);
if(!x16661.valid){
continue;
}
CheckValue<IkReal> x16662 = IKatan2WithCheck(IkReal((((r20*x16648*x16655))+(((-1.0)*x16652*x16653))+(((-1.0)*cj6*x16651*x16657))+((x16648*x16652))+(((-1.0)*x16647*x16653*x16655))+((x16648*x16660)))),((((-1.0)*cj6*x16647*x16648))+((r21*sj6*x16648))+((cj6*r20*x16653))+(((-1.0)*sj6*x16651*x16653))),IKFAST_ATAN2_MAGTHRESH);
if(!x16662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16661.value)))+(x16662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16663=IKcos(j4);
IkReal x16664=IKsin(j4);
IkReal x16665=(cj0*cj2);
IkReal x16666=(cj5*sj6);
IkReal x16667=(cj5*r01);
IkReal x16668=(cj0*sj2);
IkReal x16669=(cj5*r21);
IkReal x16670=((1.0)*sj0);
IkReal x16671=(sj2*x16670);
IkReal x16672=(cj5*cj6*r11);
IkReal x16673=((1.0)*x16664);
IkReal x16674=(cj6*x16663);
IkReal x16675=(sj5*x16663);
IkReal x16676=(cj6*x16664);
IkReal x16677=(sj5*x16673);
IkReal x16678=((1.0)*sj6*x16663);
evalcond[0]=(((r22*x16675))+((x16669*x16674))+((r20*x16663*x16666))+(((-1.0)*r21*sj6*x16673))+((r20*x16676)));
evalcond[1]=((((-1.0)*r21*x16678))+(((-1.0)*cj6*x16669*x16673))+(((-1.0)*r20*x16666*x16673))+(((-1.0)*r22*x16677))+((r20*x16674)));
evalcond[2]=(((cj2*sj0))+x16668+(((-1.0)*r11*sj6*x16673))+((r10*x16663*x16666))+((r12*x16675))+((r10*x16676))+((x16663*x16672)));
evalcond[3]=(x16665+((x16667*x16674))+((r00*x16663*x16666))+((r02*x16675))+(((-1.0)*r01*sj6*x16673))+((r00*x16676))+(((-1.0)*x16671)));
evalcond[4]=(x16665+(((-1.0)*x16672*x16673))+(((-1.0)*r12*x16677))+(((-1.0)*r11*x16678))+(((-1.0)*r10*x16666*x16673))+((r10*x16674))+(((-1.0)*x16671)));
evalcond[5]=((((-1.0)*r02*x16677))+(((-1.0)*cj2*x16670))+(((-1.0)*cj6*x16667*x16673))+(((-1.0)*r00*x16666*x16673))+(((-1.0)*r01*x16678))+(((-1.0)*x16668))+((r00*x16674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16679=(r21*sj6);
IkReal x16680=(sj0*sj2);
IkReal x16681=((1.0)*cj6);
IkReal x16682=(cj5*sj6);
IkReal x16683=(cj0*cj2);
IkReal x16684=(cj5*r21);
IkReal x16685=((1.0)*sj5);
IkReal x16686=(r20*x16683);
CheckValue<IkReal> x16687=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r11*sj5*x16681))+(((-1.0)*r10*sj6*x16685)))),-1);
if(!x16687.valid){
continue;
}
CheckValue<IkReal> x16688 = IKatan2WithCheck(IkReal(((((-1.0)*x16680*x16681*x16684))+(((-1.0)*r22*x16680*x16685))+((r22*sj5*x16683))+(((-1.0)*r20*x16680*x16682))+((x16682*x16686))+((cj6*x16683*x16684)))),((((-1.0)*x16679*x16680))+((x16679*x16683))+(((-1.0)*x16681*x16686))+((cj6*r20*x16680))),IKFAST_ATAN2_MAGTHRESH);
if(!x16688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16687.value)))+(x16688.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16689=IKcos(j4);
IkReal x16690=IKsin(j4);
IkReal x16691=(cj0*cj2);
IkReal x16692=(cj5*sj6);
IkReal x16693=(cj5*r01);
IkReal x16694=(cj0*sj2);
IkReal x16695=(cj5*r21);
IkReal x16696=((1.0)*sj0);
IkReal x16697=(sj2*x16696);
IkReal x16698=(cj5*cj6*r11);
IkReal x16699=((1.0)*x16690);
IkReal x16700=(cj6*x16689);
IkReal x16701=(sj5*x16689);
IkReal x16702=(cj6*x16690);
IkReal x16703=(sj5*x16699);
IkReal x16704=((1.0)*sj6*x16689);
evalcond[0]=(((r20*x16702))+((x16695*x16700))+((r20*x16689*x16692))+(((-1.0)*r21*sj6*x16699))+((r22*x16701)));
evalcond[1]=((((-1.0)*cj6*x16695*x16699))+((r20*x16700))+(((-1.0)*r22*x16703))+(((-1.0)*r20*x16692*x16699))+(((-1.0)*r21*x16704)));
evalcond[2]=((((-1.0)*r11*sj6*x16699))+((cj2*sj0))+((x16689*x16698))+x16694+((r10*x16689*x16692))+((r10*x16702))+((r12*x16701)));
evalcond[3]=(((r02*x16701))+(((-1.0)*x16697))+x16691+((r00*x16702))+((r00*x16689*x16692))+(((-1.0)*r01*sj6*x16699))+((x16693*x16700)));
evalcond[4]=((((-1.0)*x16698*x16699))+(((-1.0)*x16697))+x16691+(((-1.0)*r10*x16692*x16699))+(((-1.0)*r12*x16703))+(((-1.0)*r11*x16704))+((r10*x16700)));
evalcond[5]=((((-1.0)*cj6*x16693*x16699))+(((-1.0)*r00*x16692*x16699))+(((-1.0)*r01*x16704))+(((-1.0)*cj2*x16696))+((r00*x16700))+(((-1.0)*r02*x16703))+(((-1.0)*x16694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16705=(cj5*r21);
IkReal x16706=(cj0*sj2);
IkReal x16707=(r22*sj5);
IkReal x16708=((1.0)*r20);
IkReal x16709=(cj5*r20);
IkReal x16710=(cj2*cj6*sj0);
IkReal x16711=(cj2*sj0*sj6);
CheckValue<IkReal> x16712 = IKatan2WithCheck(IkReal((((cj6*x16705*x16706))+((x16705*x16710))+((sj6*x16706*x16709))+((x16706*x16707))+((cj2*sj0*x16707))+((x16709*x16711)))),((((-1.0)*x16708*x16710))+((r21*sj6*x16706))+((r21*x16711))+(((-1.0)*cj6*x16706*x16708))),IKFAST_ATAN2_MAGTHRESH);
if(!x16712.valid){
continue;
}
CheckValue<IkReal> x16713=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x16713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16712.value)+(((1.5707963267949)*(x16713.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16714=IKcos(j4);
IkReal x16715=IKsin(j4);
IkReal x16716=(cj0*cj2);
IkReal x16717=(cj5*sj6);
IkReal x16718=(cj5*r01);
IkReal x16719=(cj0*sj2);
IkReal x16720=(cj5*r21);
IkReal x16721=((1.0)*sj0);
IkReal x16722=(sj2*x16721);
IkReal x16723=(cj5*cj6*r11);
IkReal x16724=((1.0)*x16715);
IkReal x16725=(cj6*x16714);
IkReal x16726=(sj5*x16714);
IkReal x16727=(cj6*x16715);
IkReal x16728=(sj5*x16724);
IkReal x16729=((1.0)*sj6*x16714);
evalcond[0]=(((r20*x16727))+((x16720*x16725))+(((-1.0)*r21*sj6*x16724))+((r20*x16714*x16717))+((r22*x16726)));
evalcond[1]=((((-1.0)*r20*x16717*x16724))+(((-1.0)*r21*x16729))+((r20*x16725))+(((-1.0)*r22*x16728))+(((-1.0)*cj6*x16720*x16724)));
evalcond[2]=(x16719+((cj2*sj0))+((x16714*x16723))+((r10*x16714*x16717))+((r12*x16726))+(((-1.0)*r11*sj6*x16724))+((r10*x16727)));
evalcond[3]=(x16716+(((-1.0)*x16722))+((r00*x16714*x16717))+((r02*x16726))+((r00*x16727))+((x16718*x16725))+(((-1.0)*r01*sj6*x16724)));
evalcond[4]=(x16716+(((-1.0)*r10*x16717*x16724))+(((-1.0)*r12*x16728))+(((-1.0)*r11*x16729))+(((-1.0)*x16722))+(((-1.0)*x16723*x16724))+((r10*x16725)));
evalcond[5]=((((-1.0)*r01*x16729))+(((-1.0)*cj2*x16721))+(((-1.0)*x16719))+((r00*x16725))+(((-1.0)*r02*x16728))+(((-1.0)*r00*x16717*x16724))+(((-1.0)*cj6*x16718*x16724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16730=cj5*cj5;
IkReal x16731=cj6*cj6;
IkReal x16732=r22*r22;
IkReal x16733=r21*r21;
IkReal x16734=r20*r20;
IkReal x16735=((1.0)*cj5);
IkReal x16736=(cj6*r21);
IkReal x16737=(r20*sj6);
IkReal x16738=(cj1*cj2);
IkReal x16739=(cj1*sj2);
IkReal x16740=(r22*sj5);
IkReal x16741=(cj6*r20);
IkReal x16742=((2.0)*cj5);
IkReal x16743=(sj6*x16738);
IkReal x16744=((1.0)*x16733);
IkReal x16745=(x16731*x16734);
CheckValue<IkReal> x16746=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16730*x16734))+((x16730*x16745))+(((-1.0)*x16745))+((x16731*x16733))+(((-1.0)*x16730*x16731*x16744))+(((2.0)*x16736*x16737))+(((-2.0)*x16730*x16736*x16737))+((x16730*x16732))+(((-1.0)*x16744))+(((-1.0)*x16732))+(((-1.0)*x16737*x16740*x16742))+(((-1.0)*x16736*x16740*x16742)))),-1);
if(!x16746.valid){
continue;
}
CheckValue<IkReal> x16747 = IKatan2WithCheck(IkReal(((((-1.0)*x16735*x16737*x16739))+(((-1.0)*x16735*x16736*x16739))+(((-1.0)*x16739*x16740))+(((-1.0)*x16738*x16741))+((r21*x16743)))),((((-1.0)*x16735*x16737*x16738))+(((-1.0)*x16735*x16736*x16738))+(((-1.0)*x16738*x16740))+((x16739*x16741))+(((-1.0)*r21*sj6*x16739))),IKFAST_ATAN2_MAGTHRESH);
if(!x16747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16746.value)))+(x16747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16748=IKcos(j4);
IkReal x16749=IKsin(j4);
IkReal x16750=(cj0*sj1);
IkReal x16751=((1.0)*cj2);
IkReal x16752=(cj5*sj6);
IkReal x16753=(sj0*sj1);
IkReal x16754=((1.0)*sj6);
IkReal x16755=(cj5*cj6);
IkReal x16756=(r11*x16755);
IkReal x16757=((1.0)*x16749);
IkReal x16758=(sj5*x16748);
IkReal x16759=(r01*x16748);
IkReal x16760=(cj6*x16748);
IkReal x16761=(cj6*x16749);
IkReal x16762=(sj5*x16757);
evalcond[0]=(((r21*x16748*x16755))+((r20*x16748*x16752))+((r22*x16758))+(((-1.0)*cj1*x16751))+((r20*x16761))+(((-1.0)*r21*x16749*x16754)));
evalcond[1]=((((-1.0)*r22*x16762))+((cj1*sj2))+(((-1.0)*r20*x16752*x16757))+((r20*x16760))+(((-1.0)*r21*x16755*x16757))+(((-1.0)*r21*x16748*x16754)));
evalcond[2]=(((r12*x16758))+(((-1.0)*x16751*x16753))+((x16748*x16756))+((r10*x16748*x16752))+((r10*x16761))+(((-1.0)*r11*x16749*x16754))+((cj0*sj2)));
evalcond[3]=(((r00*x16761))+(((-1.0)*x16750*x16751))+((r00*x16748*x16752))+(((-1.0)*r01*x16749*x16754))+(((-1.0)*sj0*sj2))+((x16755*x16759))+((r02*x16758)));
evalcond[4]=((((-1.0)*r10*x16752*x16757))+(((-1.0)*r12*x16762))+(((-1.0)*r11*x16748*x16754))+((cj0*cj2))+((r10*x16760))+((sj2*x16753))+(((-1.0)*x16756*x16757)));
evalcond[5]=((((-1.0)*r02*x16762))+((r00*x16760))+(((-1.0)*x16754*x16759))+(((-1.0)*r00*x16752*x16757))+((sj2*x16750))+(((-1.0)*sj0*x16751))+(((-1.0)*r01*x16755*x16757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16763=(sj0*sj2);
IkReal x16764=((1.0)*r21);
IkReal x16765=((1.0)*sj5);
IkReal x16766=(cj6*r20);
IkReal x16767=(cj5*cj6);
IkReal x16768=(cj1*cj2);
IkReal x16769=(sj6*x16768);
IkReal x16770=(cj0*cj2*sj1);
IkReal x16771=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x16772=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x16765))+(((-1.0)*cj6*r11*x16765)))),-1);
if(!x16772.valid){
continue;
}
CheckValue<IkReal> x16773 = IKatan2WithCheck(IkReal((((cj5*r00*x16769))+(((-1.0)*r22*x16763*x16765))+((r02*sj5*x16768))+(((-1.0)*x16770*x16771))+(((-1.0)*x16763*x16764*x16767))+(((-1.0)*x16764*x16767*x16770))+(((-1.0)*r22*x16765*x16770))+(((-1.0)*x16763*x16771))+((r01*x16767*x16768)))),(((r01*x16769))+(((-1.0)*cj6*r00*x16768))+(((-1.0)*sj6*x16763*x16764))+((x16766*x16770))+(((-1.0)*sj6*x16764*x16770))+((x16763*x16766))),IKFAST_ATAN2_MAGTHRESH);
if(!x16773.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16772.value)))+(x16773.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16774=IKcos(j4);
IkReal x16775=IKsin(j4);
IkReal x16776=(cj0*sj1);
IkReal x16777=((1.0)*cj2);
IkReal x16778=(cj5*sj6);
IkReal x16779=(sj0*sj1);
IkReal x16780=((1.0)*sj6);
IkReal x16781=(cj5*cj6);
IkReal x16782=(r11*x16781);
IkReal x16783=((1.0)*x16775);
IkReal x16784=(sj5*x16774);
IkReal x16785=(r01*x16774);
IkReal x16786=(cj6*x16774);
IkReal x16787=(cj6*x16775);
IkReal x16788=(sj5*x16783);
evalcond[0]=(((r21*x16774*x16781))+(((-1.0)*r21*x16775*x16780))+((r22*x16784))+((r20*x16787))+(((-1.0)*cj1*x16777))+((r20*x16774*x16778)));
evalcond[1]=((((-1.0)*r20*x16778*x16783))+(((-1.0)*r21*x16781*x16783))+(((-1.0)*r21*x16774*x16780))+((cj1*sj2))+(((-1.0)*r22*x16788))+((r20*x16786)));
evalcond[2]=(((r10*x16774*x16778))+((r10*x16787))+((r12*x16784))+((x16774*x16782))+(((-1.0)*x16777*x16779))+((cj0*sj2))+(((-1.0)*r11*x16775*x16780)));
evalcond[3]=(((x16781*x16785))+((r00*x16774*x16778))+((r02*x16784))+(((-1.0)*sj0*sj2))+(((-1.0)*x16776*x16777))+((r00*x16787))+(((-1.0)*r01*x16775*x16780)));
evalcond[4]=(((sj2*x16779))+((r10*x16786))+(((-1.0)*x16782*x16783))+((cj0*cj2))+(((-1.0)*r11*x16774*x16780))+(((-1.0)*r10*x16778*x16783))+(((-1.0)*r12*x16788)));
evalcond[5]=((((-1.0)*r01*x16781*x16783))+((sj2*x16776))+(((-1.0)*sj0*x16777))+(((-1.0)*x16780*x16785))+(((-1.0)*r02*x16788))+(((-1.0)*r00*x16778*x16783))+((r00*x16786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16789=(cj6*r20);
IkReal x16790=(cj0*sj2);
IkReal x16791=((1.0)*sj6);
IkReal x16792=(cj1*cj2);
IkReal x16793=(cj5*cj6);
IkReal x16794=(cj5*r20);
IkReal x16795=(r22*sj5);
IkReal x16796=(cj2*sj0*sj1);
CheckValue<IkReal> x16797 = IKatan2WithCheck(IkReal((((cj5*r10*sj6*x16792))+((sj6*x16790*x16794))+((r21*x16790*x16793))+((x16790*x16795))+((r11*x16792*x16793))+((r12*sj5*x16792))+(((-1.0)*r21*x16793*x16796))+(((-1.0)*x16791*x16794*x16796))+(((-1.0)*x16795*x16796)))),((((-1.0)*cj6*r10*x16792))+(((-1.0)*r21*x16791*x16796))+(((-1.0)*x16789*x16790))+((r21*sj6*x16790))+((x16789*x16796))+((r11*sj6*x16792))),IKFAST_ATAN2_MAGTHRESH);
if(!x16797.valid){
continue;
}
CheckValue<IkReal> x16798=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x16798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16797.value)+(((1.5707963267949)*(x16798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16799=IKcos(j4);
IkReal x16800=IKsin(j4);
IkReal x16801=(cj0*sj1);
IkReal x16802=((1.0)*cj2);
IkReal x16803=(cj5*sj6);
IkReal x16804=(sj0*sj1);
IkReal x16805=((1.0)*sj6);
IkReal x16806=(cj5*cj6);
IkReal x16807=(r11*x16806);
IkReal x16808=((1.0)*x16800);
IkReal x16809=(sj5*x16799);
IkReal x16810=(r01*x16799);
IkReal x16811=(cj6*x16799);
IkReal x16812=(cj6*x16800);
IkReal x16813=(sj5*x16808);
evalcond[0]=((((-1.0)*r21*x16800*x16805))+((r20*x16799*x16803))+((r20*x16812))+((r22*x16809))+(((-1.0)*cj1*x16802))+((r21*x16799*x16806)));
evalcond[1]=((((-1.0)*r22*x16813))+((r20*x16811))+((cj1*sj2))+(((-1.0)*r21*x16799*x16805))+(((-1.0)*r20*x16803*x16808))+(((-1.0)*r21*x16806*x16808)));
evalcond[2]=((((-1.0)*x16802*x16804))+((r12*x16809))+(((-1.0)*r11*x16800*x16805))+((r10*x16812))+((r10*x16799*x16803))+((x16799*x16807))+((cj0*sj2)));
evalcond[3]=(((x16806*x16810))+((r00*x16799*x16803))+(((-1.0)*r01*x16800*x16805))+(((-1.0)*sj0*sj2))+((r00*x16812))+(((-1.0)*x16801*x16802))+((r02*x16809)));
evalcond[4]=((((-1.0)*r12*x16813))+((sj2*x16804))+(((-1.0)*r10*x16803*x16808))+((cj0*cj2))+((r10*x16811))+(((-1.0)*x16807*x16808))+(((-1.0)*r11*x16799*x16805)));
evalcond[5]=((((-1.0)*r01*x16806*x16808))+((sj2*x16801))+(((-1.0)*x16805*x16810))+(((-1.0)*sj0*x16802))+(((-1.0)*r00*x16803*x16808))+((r00*x16811))+(((-1.0)*r02*x16813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16814=cj1*cj1;
IkReal x16815=(cj5*r02);
IkReal x16816=((136398.7618)*cj1);
IkReal x16817=(r10*sj6);
IkReal x16818=((690.0)*r12);
IkReal x16819=((25826.01)*sj2);
IkReal x16820=(r00*sj6);
IkReal x16821=(cj6*sj5);
IkReal x16822=((25826.01)*r11);
IkReal x16823=((69000.0)*py);
IkReal x16824=(sj2*sj5);
IkReal x16825=(cj2*sj1);
IkReal x16826=((25826.01)*sj5);
IkReal x16827=((690.0)*r02);
IkReal x16828=((364420.0)*cj1);
IkReal x16829=((3644.2)*cj1);
IkReal x16830=(cj5*cj6);
IkReal x16831=((690.0)*r11);
IkReal x16832=((69000.0)*px);
IkReal x16833=((50289.96)*cj1);
IkReal x16834=((690.0)*cj5);
IkReal x16835=((690.0)*r01);
IkReal x16836=((25826.01)*r01);
IkReal x16837=(cj5*r12);
IkReal x16838=(sj5*x16825);
IkReal x16839=(sj2*x16834);
IkReal x16840=((25826.01)*x16837);
CheckValue<IkReal> x16841 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x16829*x16830))+x16823+(((-1.0)*sj2*x16832))+((py*x16828))+((r11*x16816*x16821))+((x16818*x16838))+(((-1.0)*x16817*x16834))+((x16825*x16840))+(((-1.0)*x16816*x16837))+(((-1.0)*x16823*x16825))+(((-1.0)*cj5*x16817*x16829))+((x16824*x16827))+(((-1.0)*sj5*x16818))+((x16825*x16830*x16831))+(((-1.0)*x16840))+((x16820*x16839))+(((-1.0)*r01*x16819*x16821))+((x16821*x16822))+(((-1.0)*r12*sj5*x16829))+((x16815*x16819))+(((-1.0)*x16821*x16822*x16825))+((sj5*x16816*x16817))+(((-1.0)*x16817*x16825*x16826))+((x16817*x16826))+((sj2*x16830*x16835))+((x16817*x16825*x16834))+(((-1.0)*x16830*x16831))+(((-1.0)*sj5*x16819*x16820)))),(((px*x16828))+((sj5*x16816*x16820))+x16832+(((-25826.01)*x16815))+(((-1.0)*sj5*x16827))+(((-1.0)*x16817*x16839))+(((-1.0)*sj2*x16830*x16831))+((x16820*x16825*x16834))+((r11*x16819*x16821))+(((-1.0)*x16820*x16834))+(((-1.0)*cj5*x16820*x16829))+((x16827*x16838))+(((-1.0)*r02*sj5*x16829))+((x16825*x16830*x16835))+(((-1.0)*x16820*x16825*x16826))+((sj5*x16817*x16819))+(((-1.0)*r01*x16829*x16830))+((x16820*x16826))+((x16821*x16836))+(((-1.0)*x16825*x16832))+(((-1.0)*x16821*x16825*x16836))+(((25826.01)*x16815*x16825))+(((-1.0)*x16815*x16816))+(((-1.0)*x16818*x16824))+((sj2*x16823))+((r01*x16816*x16821))+(((-1.0)*x16830*x16835))+(((-1.0)*x16819*x16837))),IKFAST_ATAN2_MAGTHRESH);
if(!x16841.valid){
continue;
}
CheckValue<IkReal> x16842=IKPowWithIntegerCheck(IKsign(((9522.0)+x16833+(((-9522.0)*x16825))+(((-4761.0)*x16814*(cj2*cj2)))+(((-1.0)*x16825*x16833))+(((132801.9364)*x16814)))),-1);
if(!x16842.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x16841.value)+(((1.5707963267949)*(x16842.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x16843=IKcos(j0);
IkReal x16844=IKsin(j0);
IkReal x16845=(r10*sj6);
IkReal x16846=((0.37429)*sj5);
IkReal x16847=((0.36442)*cj1);
IkReal x16848=((0.01)*cj5);
IkReal x16849=(cj6*r11);
IkReal x16850=(r00*sj6);
IkReal x16851=(cj6*r01);
IkReal x16852=((0.37429)*cj5);
IkReal x16853=(cj2*sj1);
IkReal x16854=((0.01)*sj5);
IkReal x16855=((0.069)*x16844);
IkReal x16856=((0.069)*x16843);
evalcond[0]=(x16856+((x16843*x16847))+(((-1.0)*x16846*x16850))+(((-1.0)*x16846*x16851))+((x16848*x16851))+((x16848*x16850))+(((-1.0)*px))+(((-1.0)*x16853*x16856))+((r02*x16852))+((r02*x16854))+(((-1.0)*sj2*x16855)));
evalcond[1]=(x16855+((r12*x16854))+((r12*x16852))+(((-1.0)*py))+(((-1.0)*x16846*x16849))+((x16844*x16847))+(((-1.0)*x16845*x16846))+(((-1.0)*x16853*x16855))+((x16845*x16848))+((sj2*x16856))+((x16848*x16849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x16857=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x16857;
j4eval[1]=IKsign(x16857);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16858=((1.0)*sj5);
IkReal x16859=((((-1.0)*r00*sj6*x16858))+(((-1.0)*cj6*r01*x16858))+((cj5*r02)));
j4eval[0]=x16859;
j4eval[1]=IKsign(x16859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16860=((1.0)*sj5);
IkReal x16861=(((cj5*r22))+(((-1.0)*r20*sj6*x16860))+(((-1.0)*cj6*r21*x16860)));
j4eval[0]=x16861;
j4eval[1]=IKsign(x16861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16862=((1.0)*sj6);
IkReal x16863=(cj5*cj6);
IkReal x16864=(sj1*sj2);
IkReal x16865=(cj0*r11);
IkReal x16866=(cj6*r00);
IkReal x16867=(cj2*sj0);
IkReal x16868=(cj0*cj2);
IkReal x16869=(r02*sj5);
IkReal x16870=((1.0)*sj5);
IkReal x16871=(cj5*sj6);
IkReal x16872=(cj0*r10);
IkReal x16873=(r01*sj0*x16864);
CheckValue<IkReal> x16874=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x16870))+(((-1.0)*r20*sj5*x16862)))),-1);
if(!x16874.valid){
continue;
}
CheckValue<IkReal> x16875 = IKatan2WithCheck(IkReal((((cj6*r10*x16867))+((sj6*x16864*x16865))+(((-1.0)*r11*x16862*x16867))+(((-1.0)*r01*x16862*x16868))+(((-1.0)*cj6*x16864*x16872))+(((-1.0)*x16862*x16873))+((x16866*x16868))+((sj0*x16864*x16866)))),((((-1.0)*cj0*r12*x16864*x16870))+((r12*sj5*x16867))+(((-1.0)*cj5*x16862*x16864*x16872))+((r00*sj0*x16864*x16871))+((x16863*x16873))+((r11*x16863*x16867))+((x16868*x16869))+((r00*x16868*x16871))+((r10*x16867*x16871))+((r01*x16863*x16868))+(((-1.0)*x16863*x16864*x16865))+((sj0*x16864*x16869))),IKFAST_ATAN2_MAGTHRESH);
if(!x16875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16874.value)))+(x16875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16876=IKsin(j4);
IkReal x16877=IKcos(j4);
IkReal x16878=(r01*sj3);
IkReal x16879=((1.0)*sj5);
IkReal x16880=(cj3*r02);
IkReal x16881=((1.0)*cj6);
IkReal x16882=(cj5*r12);
IkReal x16883=(cj0*sj2);
IkReal x16884=(sj3*sj6);
IkReal x16885=((1.0)*r20);
IkReal x16886=(cj0*cj2);
IkReal x16887=(cj3*sj6);
IkReal x16888=((1.0)*cj1);
IkReal x16889=((1.0)*cj5);
IkReal x16890=(cj6*sj5);
IkReal x16891=(r21*sj3);
IkReal x16892=((1.0)*r00);
IkReal x16893=((1.0)*r10);
IkReal x16894=(cj3*r22);
IkReal x16895=(r11*sj3);
IkReal x16896=((1.0)*sj0);
IkReal x16897=(cj3*x16881);
IkReal x16898=(cj5*x16877);
IkReal x16899=(sj6*x16876);
IkReal x16900=(r10*x16876);
IkReal x16901=(r00*x16876);
IkReal x16902=(cj6*x16877);
IkReal x16903=(sj3*x16877);
IkReal x16904=(cj5*x16876);
IkReal x16905=(r20*x16876);
IkReal x16906=((1.0)*sj6*x16877);
evalcond[0]=(((cj1*sj2))+(((-1.0)*cj5*x16885*x16899))+(((-1.0)*r22*x16876*x16879))+(((-1.0)*r21*x16881*x16904))+(((-1.0)*r21*x16906))+((r20*x16902)));
evalcond[1]=(x16886+((r10*x16902))+(((-1.0)*r11*x16881*x16904))+(((-1.0)*r11*x16906))+(((-1.0)*r10*x16889*x16899))+((sj0*sj1*sj2))+(((-1.0)*r12*x16876*x16879)));
evalcond[2]=((((-1.0)*r01*x16906))+(((-1.0)*r02*x16876*x16879))+(((-1.0)*cj2*x16896))+((r00*x16902))+((sj1*x16883))+(((-1.0)*r00*x16889*x16899))+(((-1.0)*r01*x16881*x16904)));
evalcond[3]=(sj1+(((-1.0)*x16881*x16891*x16898))+((cj5*x16894))+(((-1.0)*x16884*x16885*x16898))+(((-1.0)*r22*x16879*x16903))+(((-1.0)*sj3*x16881*x16905))+(((-1.0)*r20*x16879*x16887))+((r21*x16876*x16884))+(((-1.0)*cj3*cj6*r21*x16879)));
evalcond[4]=((((-1.0)*r22*sj3*x16889))+(((-1.0)*x16877*x16879*x16894))+(((-1.0)*x16897*x16905))+((x16890*x16891))+(((-1.0)*x16885*x16887*x16898))+((r20*sj5*x16884))+((r21*x16876*x16887))+(((-1.0)*cj2*x16888))+(((-1.0)*r21*x16897*x16898)));
evalcond[5]=((((-1.0)*r00*x16879*x16887))+(((-1.0)*r00*x16877*x16884*x16889))+((cj5*x16880))+((x16878*x16899))+(((-1.0)*r02*x16879*x16903))+(((-1.0)*x16878*x16881*x16898))+(((-1.0)*cj0*x16888))+(((-1.0)*sj3*x16881*x16901))+(((-1.0)*cj3*cj6*r01*x16879)));
evalcond[6]=(((r11*x16876*x16884))+(((-1.0)*cj3*cj6*r11*x16879))+(((-1.0)*r12*x16879*x16903))+((cj3*x16882))+(((-1.0)*x16881*x16895*x16898))+(((-1.0)*r10*x16877*x16884*x16889))+(((-1.0)*r10*x16879*x16887))+(((-1.0)*sj3*x16881*x16900))+(((-1.0)*sj0*x16888)));
evalcond[7]=((((-1.0)*cj3*r12*x16877*x16879))+x16883+((r10*sj5*x16884))+((r11*x16876*x16887))+(((-1.0)*cj2*sj1*x16896))+(((-1.0)*x16897*x16900))+((x16890*x16895))+(((-1.0)*sj3*x16882))+(((-1.0)*r10*x16877*x16887*x16889))+(((-1.0)*r11*x16897*x16898)));
evalcond[8]=((((-1.0)*r02*sj3*x16889))+(((-1.0)*sj1*x16886))+((r01*x16876*x16887))+((x16878*x16890))+(((-1.0)*x16897*x16901))+(((-1.0)*x16877*x16879*x16880))+((r00*sj5*x16884))+(((-1.0)*r01*x16897*x16898))+(((-1.0)*sj2*x16896))+(((-1.0)*r00*x16877*x16887*x16889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16907=(cj6*r21);
IkReal x16908=(r20*sj6);
IkReal x16909=(cj1*sj2);
IkReal x16910=((1.0)*cj6);
IkReal x16911=((1.0)*sj5);
IkReal x16912=(cj0*cj2);
IkReal x16913=(r21*sj6);
IkReal x16914=(sj0*sj1*sj2);
IkReal x16915=((1.0)*cj5*x16912);
IkReal x16916=((1.0)*cj5*x16914);
CheckValue<IkReal> x16917 = IKatan2WithCheck(IkReal((((x16913*x16914))+((x16912*x16913))+(((-1.0)*r20*x16910*x16914))+(((-1.0)*r20*x16910*x16912))+((cj6*r10*x16909))+(((-1.0)*r11*sj6*x16909)))),(((cj5*r10*sj6*x16909))+((r12*sj5*x16909))+(((-1.0)*x16908*x16916))+(((-1.0)*x16908*x16915))+(((-1.0)*r22*x16911*x16914))+(((-1.0)*r22*x16911*x16912))+(((-1.0)*x16907*x16916))+(((-1.0)*x16907*x16915))+((cj5*cj6*r11*x16909))),IKFAST_ATAN2_MAGTHRESH);
if(!x16917.valid){
continue;
}
CheckValue<IkReal> x16918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x16910))+(((-1.0)*r00*sj6*x16911))+((cj5*r02)))),-1);
if(!x16918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16917.value)+(((1.5707963267949)*(x16918.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16919=IKsin(j4);
IkReal x16920=IKcos(j4);
IkReal x16921=(r01*sj3);
IkReal x16922=((1.0)*sj5);
IkReal x16923=(cj3*r02);
IkReal x16924=((1.0)*cj6);
IkReal x16925=(cj5*r12);
IkReal x16926=(cj0*sj2);
IkReal x16927=(sj3*sj6);
IkReal x16928=((1.0)*r20);
IkReal x16929=(cj0*cj2);
IkReal x16930=(cj3*sj6);
IkReal x16931=((1.0)*cj1);
IkReal x16932=((1.0)*cj5);
IkReal x16933=(cj6*sj5);
IkReal x16934=(r21*sj3);
IkReal x16935=((1.0)*r00);
IkReal x16936=((1.0)*r10);
IkReal x16937=(cj3*r22);
IkReal x16938=(r11*sj3);
IkReal x16939=((1.0)*sj0);
IkReal x16940=(cj3*x16924);
IkReal x16941=(cj5*x16920);
IkReal x16942=(sj6*x16919);
IkReal x16943=(r10*x16919);
IkReal x16944=(r00*x16919);
IkReal x16945=(cj6*x16920);
IkReal x16946=(sj3*x16920);
IkReal x16947=(cj5*x16919);
IkReal x16948=(r20*x16919);
IkReal x16949=((1.0)*sj6*x16920);
evalcond[0]=((((-1.0)*cj5*x16928*x16942))+((r20*x16945))+((cj1*sj2))+(((-1.0)*r22*x16919*x16922))+(((-1.0)*r21*x16924*x16947))+(((-1.0)*r21*x16949)));
evalcond[1]=((((-1.0)*r11*x16949))+(((-1.0)*r12*x16919*x16922))+((r10*x16945))+(((-1.0)*r11*x16924*x16947))+((sj0*sj1*sj2))+x16929+(((-1.0)*r10*x16932*x16942)));
evalcond[2]=((((-1.0)*r01*x16924*x16947))+((sj1*x16926))+(((-1.0)*r01*x16949))+(((-1.0)*r02*x16919*x16922))+((r00*x16945))+(((-1.0)*cj2*x16939))+(((-1.0)*r00*x16932*x16942)));
evalcond[3]=(sj1+(((-1.0)*sj3*x16924*x16948))+(((-1.0)*r22*x16922*x16946))+(((-1.0)*r20*x16922*x16930))+((r21*x16919*x16927))+(((-1.0)*x16927*x16928*x16941))+((cj5*x16937))+(((-1.0)*cj3*cj6*r21*x16922))+(((-1.0)*x16924*x16934*x16941)));
evalcond[4]=((((-1.0)*x16940*x16948))+(((-1.0)*x16920*x16922*x16937))+(((-1.0)*r22*sj3*x16932))+((r20*sj5*x16927))+((x16933*x16934))+(((-1.0)*cj2*x16931))+(((-1.0)*r21*x16940*x16941))+(((-1.0)*x16928*x16930*x16941))+((r21*x16919*x16930)));
evalcond[5]=(((x16921*x16942))+(((-1.0)*r00*x16922*x16930))+(((-1.0)*sj3*x16924*x16944))+(((-1.0)*x16921*x16924*x16941))+(((-1.0)*r02*x16922*x16946))+(((-1.0)*cj0*x16931))+(((-1.0)*r00*x16920*x16927*x16932))+(((-1.0)*cj3*cj6*r01*x16922))+((cj5*x16923)));
evalcond[6]=((((-1.0)*sj3*x16924*x16943))+(((-1.0)*x16924*x16938*x16941))+(((-1.0)*r10*x16922*x16930))+((cj3*x16925))+((r11*x16919*x16927))+(((-1.0)*r10*x16920*x16927*x16932))+(((-1.0)*r12*x16922*x16946))+(((-1.0)*sj0*x16931))+(((-1.0)*cj3*cj6*r11*x16922)));
evalcond[7]=(((r11*x16919*x16930))+(((-1.0)*x16940*x16943))+(((-1.0)*r11*x16940*x16941))+(((-1.0)*cj3*r12*x16920*x16922))+(((-1.0)*cj2*sj1*x16939))+(((-1.0)*sj3*x16925))+(((-1.0)*r10*x16920*x16930*x16932))+((x16933*x16938))+((r10*sj5*x16927))+x16926);
evalcond[8]=(((x16921*x16933))+(((-1.0)*x16940*x16944))+(((-1.0)*x16920*x16922*x16923))+((r00*sj5*x16927))+(((-1.0)*sj1*x16929))+(((-1.0)*sj2*x16939))+(((-1.0)*r01*x16940*x16941))+(((-1.0)*r02*sj3*x16932))+((r01*x16919*x16930))+(((-1.0)*r00*x16920*x16930*x16932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16950=(cj6*r20);
IkReal x16951=(cj2*sj0);
IkReal x16952=((1.0)*sj2);
IkReal x16953=(cj0*sj1);
IkReal x16954=(cj1*r01);
IkReal x16955=(r22*sj5);
IkReal x16956=(cj5*cj6);
IkReal x16957=(cj1*sj2);
IkReal x16958=(r21*sj6);
IkReal x16959=(cj5*r20*sj6);
CheckValue<IkReal> x16960=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x16960.valid){
continue;
}
CheckValue<IkReal> x16961 = IKatan2WithCheck(IkReal((((x16950*x16951))+(((-1.0)*x16950*x16952*x16953))+(((-1.0)*sj6*x16952*x16954))+((cj6*r00*x16957))+(((-1.0)*x16951*x16958))+((sj2*x16953*x16958)))),((((-1.0)*r21*x16952*x16953*x16956))+((r21*x16951*x16956))+((sj2*x16954*x16956))+(((-1.0)*x16952*x16953*x16955))+(((-1.0)*x16952*x16953*x16959))+((r02*sj5*x16957))+((cj5*r00*sj6*x16957))+((x16951*x16959))+((x16951*x16955))),IKFAST_ATAN2_MAGTHRESH);
if(!x16961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16960.value)))+(x16961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16962=IKsin(j4);
IkReal x16963=IKcos(j4);
IkReal x16964=(r01*sj3);
IkReal x16965=((1.0)*sj5);
IkReal x16966=(cj3*r02);
IkReal x16967=((1.0)*cj6);
IkReal x16968=(cj5*r12);
IkReal x16969=(cj0*sj2);
IkReal x16970=(sj3*sj6);
IkReal x16971=((1.0)*r20);
IkReal x16972=(cj0*cj2);
IkReal x16973=(cj3*sj6);
IkReal x16974=((1.0)*cj1);
IkReal x16975=((1.0)*cj5);
IkReal x16976=(cj6*sj5);
IkReal x16977=(r21*sj3);
IkReal x16978=((1.0)*r00);
IkReal x16979=((1.0)*r10);
IkReal x16980=(cj3*r22);
IkReal x16981=(r11*sj3);
IkReal x16982=((1.0)*sj0);
IkReal x16983=(cj3*x16967);
IkReal x16984=(cj5*x16963);
IkReal x16985=(sj6*x16962);
IkReal x16986=(r10*x16962);
IkReal x16987=(r00*x16962);
IkReal x16988=(cj6*x16963);
IkReal x16989=(sj3*x16963);
IkReal x16990=(cj5*x16962);
IkReal x16991=(r20*x16962);
IkReal x16992=((1.0)*sj6*x16963);
evalcond[0]=((((-1.0)*r22*x16962*x16965))+((cj1*sj2))+(((-1.0)*r21*x16967*x16990))+(((-1.0)*cj5*x16971*x16985))+(((-1.0)*r21*x16992))+((r20*x16988)));
evalcond[1]=(((r10*x16988))+(((-1.0)*r10*x16975*x16985))+(((-1.0)*r11*x16992))+((sj0*sj1*sj2))+(((-1.0)*r11*x16967*x16990))+(((-1.0)*r12*x16962*x16965))+x16972);
evalcond[2]=((((-1.0)*r01*x16967*x16990))+(((-1.0)*r01*x16992))+(((-1.0)*r00*x16975*x16985))+(((-1.0)*r02*x16962*x16965))+((r00*x16988))+(((-1.0)*cj2*x16982))+((sj1*x16969)));
evalcond[3]=((((-1.0)*cj3*cj6*r21*x16965))+sj1+(((-1.0)*r20*x16965*x16973))+(((-1.0)*x16970*x16971*x16984))+(((-1.0)*r22*x16965*x16989))+(((-1.0)*sj3*x16967*x16991))+((cj5*x16980))+(((-1.0)*x16967*x16977*x16984))+((r21*x16962*x16970)));
evalcond[4]=((((-1.0)*x16963*x16965*x16980))+(((-1.0)*r21*x16983*x16984))+(((-1.0)*cj2*x16974))+((x16976*x16977))+(((-1.0)*x16983*x16991))+((r20*sj5*x16970))+((r21*x16962*x16973))+(((-1.0)*x16971*x16973*x16984))+(((-1.0)*r22*sj3*x16975)));
evalcond[5]=(((x16964*x16985))+(((-1.0)*r00*x16963*x16970*x16975))+((cj5*x16966))+(((-1.0)*r02*x16965*x16989))+(((-1.0)*sj3*x16967*x16987))+(((-1.0)*cj3*cj6*r01*x16965))+(((-1.0)*r00*x16965*x16973))+(((-1.0)*cj0*x16974))+(((-1.0)*x16964*x16967*x16984)));
evalcond[6]=((((-1.0)*cj3*cj6*r11*x16965))+(((-1.0)*r10*x16965*x16973))+(((-1.0)*x16967*x16981*x16984))+(((-1.0)*r10*x16963*x16970*x16975))+(((-1.0)*sj0*x16974))+(((-1.0)*r12*x16965*x16989))+((r11*x16962*x16970))+(((-1.0)*sj3*x16967*x16986))+((cj3*x16968)));
evalcond[7]=(((r10*sj5*x16970))+(((-1.0)*cj2*sj1*x16982))+(((-1.0)*cj3*r12*x16963*x16965))+((r11*x16962*x16973))+(((-1.0)*sj3*x16968))+(((-1.0)*r11*x16983*x16984))+(((-1.0)*x16983*x16986))+((x16976*x16981))+(((-1.0)*r10*x16963*x16973*x16975))+x16969);
evalcond[8]=((((-1.0)*sj1*x16972))+((r00*sj5*x16970))+(((-1.0)*x16963*x16965*x16966))+(((-1.0)*r00*x16963*x16973*x16975))+((x16964*x16976))+(((-1.0)*sj2*x16982))+((r01*x16962*x16973))+(((-1.0)*r01*x16983*x16984))+(((-1.0)*x16983*x16987))+(((-1.0)*r02*sj3*x16975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16993=cj6*cj6;
IkReal x16994=r20*r20;
IkReal x16995=cj5*cj5;
IkReal x16996=r21*r21;
IkReal x16997=r22*r22;
IkReal x16998=(cj6*sj5);
IkReal x16999=(cj3*r22);
IkReal x17000=(cj5*r21);
IkReal x17001=(sj3*sj6);
IkReal x17002=((1.0)*r22);
IkReal x17003=(cj6*r21);
IkReal x17004=(cj3*cj6);
IkReal x17005=(cj1*cj2);
IkReal x17006=(cj5*sj3);
IkReal x17007=(cj6*r20);
IkReal x17008=((1.0)*cj3);
IkReal x17009=(cj3*sj6);
IkReal x17010=(cj5*r20);
IkReal x17011=((2.0)*r20);
IkReal x17012=(r21*sj3);
IkReal x17013=((1.0)*x16994);
IkReal x17014=(cj3*x16993);
IkReal x17015=((1.0)*cj1*sj2);
IkReal x17016=(sj5*x16993);
IkReal x17017=(r22*x16995);
IkReal x17018=((1.0)*x16996);
IkReal x17019=(cj3*x16995);
CheckValue<IkReal> x17020 = IKatan2WithCheck(IkReal((((r22*x17006*x17007))+((r20*sj5*x17012))+((x17005*x17007))+((x16996*x16998*x17001))+(((-1.0)*cj1*sj2*sj6*x17008*x17010))+(((-1.0)*sj5*x16999*x17015))+(((-1.0)*x17000*x17001*x17002))+(((-1.0)*x17011*x17012*x17016))+(((-1.0)*r21*sj6*x17005))+(((-1.0)*x17000*x17004*x17015))+(((-1.0)*x16998*x17001*x17013)))),(((cj6*x17000*x17005))+((r22*sj5*x17005))+(((-1.0)*sj3*x17002*x17003))+(((-1.0)*x16998*x17000*x17001*x17011))+(((-1.0)*x17006*x17016*x17018))+((cj1*r20*sj2*x17004))+(((2.0)*sj3*x17003*x17017))+((x16994*x17006*x17016))+(((-1.0)*r20*x17001*x17002))+((sj5*x16997*x17006))+(((-1.0)*cj1*r21*sj2*sj6*x17008))+(((-1.0)*sj5*x17006*x17013))+((x17001*x17011*x17017))+((sj6*x17005*x17010))),IKFAST_ATAN2_MAGTHRESH);
if(!x17020.valid){
continue;
}
CheckValue<IkReal> x17021=IKPowWithIntegerCheck(IKsign((((x16996*x17014))+(((-1.0)*x16996*x17008))+(((-1.0)*x16997*x17008))+(((-1.0)*x16993*x16994*x17008))+((x17003*x17009*x17011))+(((-1.0)*x16994*x16995*x17008))+(((-2.0)*sj5*sj6*x16999*x17010))+((x16994*x16995*x17014))+(((-1.0)*x16993*x16995*x16996*x17008))+(((-2.0)*x16998*x16999*x17000))+(((-1.0)*x16995*x17003*x17009*x17011))+((x16997*x17019)))),-1);
if(!x17021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x17020.value)+(((1.5707963267949)*(x17021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x17022=IKsin(j4);
IkReal x17023=IKcos(j4);
IkReal x17024=(cj3*r21);
IkReal x17025=((1.0)*sj5);
IkReal x17026=(r21*sj3);
IkReal x17027=((1.0)*cj5);
IkReal x17028=(r22*sj3);
IkReal x17029=(cj6*r20);
IkReal x17030=(cj3*r22);
IkReal x17031=(sj6*x17022);
IkReal x17032=(r20*sj3*sj6);
IkReal x17033=(cj3*r20*sj6);
IkReal x17034=((1.0)*x17022);
IkReal x17035=(x17023*x17027);
evalcond[0]=(((cj1*sj2))+(((-1.0)*r22*x17022*x17025))+(((-1.0)*r21*sj6*x17023))+(((-1.0)*r20*x17027*x17031))+((x17023*x17029))+(((-1.0)*cj6*r21*x17022*x17027)));
evalcond[1]=((((-1.0)*x17025*x17033))+sj1+(((-1.0)*x17023*x17025*x17028))+(((-1.0)*sj3*x17029*x17034))+(((-1.0)*cj6*x17024*x17025))+(((-1.0)*x17032*x17035))+((x17026*x17031))+(((-1.0)*cj6*x17026*x17035))+((cj5*x17030)));
evalcond[2]=(((x17024*x17031))+(((-1.0)*cj1*cj2))+(((-1.0)*x17027*x17028))+(((-1.0)*x17023*x17025*x17030))+(((-1.0)*x17033*x17035))+(((-1.0)*cj6*x17024*x17035))+((sj5*x17032))+((cj6*sj5*x17026))+(((-1.0)*cj3*x17029*x17034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x17036=cj1*cj1;
IkReal x17037=((1.0)+(((-1.0)*x17036))+((x17036*(cj2*cj2))));
j0eval[0]=x17037;
j0eval[1]=IKsign(x17037);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x17038=(cj1*cj2);
j0eval[0]=((((-1.0)*sj1))+cj2+(((5.28144927536232)*x17038)));
j0eval[1]=IKsign(((((-69.0)*sj1))+(((69.0)*cj2))+(((364.42)*x17038))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x17039=cj1*cj1;
IkReal x17040=(sj1*sj2);
IkReal x17041=((5.28144927536232)*cj1);
IkReal x17042=(cj2*x17039);
j0eval[0]=(((sj2*x17042))+((x17040*x17041))+x17040);
j0eval[1]=((((-1.0)*sj1))+(((-1.0)*x17042))+(((-1.0)*sj1*x17041)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x17043=(cj6*r21);
IkReal x17044=(cj3*r22);
IkReal x17045=(cj3*sj4);
IkReal x17046=(r21*sj6);
IkReal x17047=(r20*sj6);
IkReal x17048=(sj3*sj5);
IkReal x17049=((1.0)*sj5);
IkReal x17050=((0.01)*cj5);
IkReal x17051=(sj3*sj4);
IkReal x17052=((1.0)*cj5);
IkReal x17053=(cj3*cj4);
IkReal x17054=((1.0)*cj4);
IkReal x17055=((0.37429)*sj5);
IkReal x17056=((1.0)*cj6*r20);
IkReal x17057=(cj4*sj3*x17052);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*sj4*x17049))+((cj4*cj6*r20))+(((-1.0)*sj4*x17047*x17052))+(((-1.0)*x17046*x17054))+(((-1.0)*sj4*x17043*x17052)));
evalcond[2]=((((-1.0)*x17043*x17055))+(((-1.0)*x17047*x17055))+(((-0.069)*cj1))+((x17047*x17050))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17043*x17050))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*x17043*x17057))+(((-1.0)*x17047*x17057))+(((-1.0)*r22*x17048*x17054))+sj1+((x17046*x17051))+(((-1.0)*x17051*x17056))+(((-1.0)*cj3*x17043*x17049))+((cj5*x17044))+(((-1.0)*cj3*x17047*x17049)));
evalcond[4]=((((-1.0)*r22*sj3*x17052))+(((-1.0)*x17045*x17056))+((x17047*x17048))+(((-1.0)*x17047*x17052*x17053))+(((-1.0)*cj4*x17044*x17049))+(((-1.0)*x17043*x17052*x17053))+((x17045*x17046))+((x17043*x17048))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17058=(cj4*sj6);
IkReal x17059=((1.0)*r01);
IkReal x17060=(cj5*sj4);
IkReal x17061=(sj4*sj5);
IkReal x17062=(cj4*cj6);
if( IKabs((((r00*x17062))+(((-1.0)*x17058*x17059))+(((-1.0)*r00*sj6*x17060))+(((-1.0)*r02*x17061))+(((-1.0)*cj6*x17059*x17060)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x17062))+((r10*sj6*x17060))+((r12*x17061))+((r11*x17058))+((cj6*r11*x17060)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x17062))+(((-1.0)*x17058*x17059))+(((-1.0)*r00*sj6*x17060))+(((-1.0)*r02*x17061))+(((-1.0)*cj6*x17059*x17060))))+IKsqr(((((-1.0)*r10*x17062))+((r10*sj6*x17060))+((r12*x17061))+((r11*x17058))+((cj6*r11*x17060))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x17062))+(((-1.0)*x17058*x17059))+(((-1.0)*r00*sj6*x17060))+(((-1.0)*r02*x17061))+(((-1.0)*cj6*x17059*x17060))), ((((-1.0)*r10*x17062))+((r10*sj6*x17060))+((r12*x17061))+((r11*x17058))+((cj6*r11*x17060))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17063=IKcos(j0);
IkReal x17064=IKsin(j0);
IkReal x17065=((1.0)*sj4);
IkReal x17066=(cj6*r10);
IkReal x17067=(sj5*sj6);
IkReal x17068=(cj3*cj5);
IkReal x17069=(r00*sj3);
IkReal x17070=((0.36442)*cj1);
IkReal x17071=(cj6*r01);
IkReal x17072=((1.0)*cj3);
IkReal x17073=((0.01)*cj5);
IkReal x17074=(r10*sj6);
IkReal x17075=(r12*sj5);
IkReal x17076=(sj3*sj5);
IkReal x17077=(r02*sj5);
IkReal x17078=(cj6*r00);
IkReal x17079=((1.0)*cj4);
IkReal x17080=(r00*sj6);
IkReal x17081=((0.37429)*cj5);
IkReal x17082=(cj6*r11);
IkReal x17083=((0.37429)*sj5);
IkReal x17084=(cj5*x17082);
IkReal x17085=((0.069)*x17064);
IkReal x17086=(r11*sj4*sj6);
IkReal x17087=(sj3*x17079);
IkReal x17088=(r01*sj4*sj6);
IkReal x17089=((1.0)*x17064);
IkReal x17090=((1.0)*x17063);
IkReal x17091=((0.069)*x17063);
IkReal x17092=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*x17065*x17084))+(((-1.0)*r11*sj6*x17079))+(((-1.0)*x17065*x17075))+((cj4*x17066))+x17063+(((-1.0)*cj5*x17065*x17074)));
evalcond[1]=((((-1.0)*cj5*x17065*x17080))+(((-1.0)*r01*sj6*x17079))+(((-1.0)*x17089))+(((-1.0)*x17065*x17077))+((cj4*x17078))+(((-1.0)*cj5*x17065*x17071)));
evalcond[2]=((((0.01)*x17077))+((x17063*x17070))+((x17071*x17073))+((x17073*x17080))+(((-1.0)*sj1*x17091))+(((-0.37429)*r00*x17067))+(((-1.0)*px))+x17091+(((-1.0)*x17071*x17083))+((r02*x17081)));
evalcond[3]=((((-1.0)*x17082*x17083))+(((0.01)*x17075))+((r12*x17081))+((x17073*x17082))+((x17064*x17070))+(((-1.0)*py))+(((-1.0)*sj1*x17085))+x17085+((x17073*x17074))+(((-0.37429)*r10*x17067)));
evalcond[4]=(((cj3*x17086))+(((-1.0)*x17068*x17074*x17079))+((x17076*x17082))+(((-1.0)*cj3*x17065*x17066))+(((-1.0)*x17068*x17079*x17082))+(((-1.0)*sj1*x17089))+((r10*sj3*x17067))+(((-1.0)*cj4*x17072*x17075))+(((-1.0)*r12*x17092)));
evalcond[5]=(((cj3*x17088))+((x17071*x17076))+(((-1.0)*sj1*x17090))+((x17067*x17069))+(((-1.0)*x17068*x17079*x17080))+(((-1.0)*cj4*x17072*x17077))+(((-1.0)*r02*x17092))+(((-1.0)*cj3*x17065*x17078))+(((-1.0)*x17068*x17071*x17079)));
evalcond[6]=((((-1.0)*r02*x17076*x17079))+((sj3*x17088))+(((-1.0)*cj5*sj6*x17069*x17079))+(((-1.0)*cj6*x17065*x17069))+(((-1.0)*r00*x17067*x17072))+((r02*x17068))+(((-1.0)*sj5*x17071*x17072))+(((-1.0)*cj5*x17071*x17087))+(((-1.0)*cj1*x17090)));
evalcond[7]=(((sj3*x17086))+(((-1.0)*x17075*x17087))+(((-1.0)*sj3*x17065*x17066))+(((-1.0)*cj5*x17074*x17087))+(((-1.0)*sj5*x17072*x17082))+((r12*x17068))+(((-1.0)*r10*x17067*x17072))+(((-1.0)*x17084*x17087))+(((-1.0)*cj1*x17089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17093=(cj6*r21);
IkReal x17094=(cj3*r22);
IkReal x17095=(cj3*sj4);
IkReal x17096=(r21*sj6);
IkReal x17097=(r20*sj6);
IkReal x17098=(sj3*sj5);
IkReal x17099=((1.0)*sj5);
IkReal x17100=((0.01)*cj5);
IkReal x17101=(sj3*sj4);
IkReal x17102=((1.0)*cj5);
IkReal x17103=(cj3*cj4);
IkReal x17104=((1.0)*cj4);
IkReal x17105=((0.37429)*sj5);
IkReal x17106=((1.0)*cj6*r20);
IkReal x17107=(cj4*sj3*x17102);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*cj6*r20))+(((-1.0)*x17096*x17104))+(((-1.0)*sj4*x17097*x17102))+(((-1.0)*sj4*x17093*x17102))+(((-1.0)*r22*sj4*x17099)));
evalcond[2]=((((-1.0)*x17097*x17105))+(((0.069)*cj1))+((x17097*x17100))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17093*x17100))+(((-1.0)*x17093*x17105))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((x17096*x17101))+(((-1.0)*x17097*x17107))+sj1+((cj5*x17094))+(((-1.0)*cj3*x17093*x17099))+(((-1.0)*x17101*x17106))+(((-1.0)*x17093*x17107))+(((-1.0)*r22*x17098*x17104))+(((-1.0)*cj3*x17097*x17099)));
evalcond[4]=(cj1+(((-1.0)*cj4*x17094*x17099))+(((-1.0)*x17095*x17106))+((x17093*x17098))+(((-1.0)*x17097*x17102*x17103))+((x17095*x17096))+((x17097*x17098))+(((-1.0)*x17093*x17102*x17103))+(((-1.0)*r22*sj3*x17102)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17108=((1.0)*cj4);
IkReal x17109=(sj4*sj5);
IkReal x17110=(cj5*sj4*sj6);
IkReal x17111=(cj5*cj6*sj4);
if( IKabs(((((-1.0)*cj6*r00*x17108))+((r02*x17109))+((r01*x17111))+((r00*x17110))+((cj4*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj6*x17108))+(((-1.0)*r12*x17109))+(((-1.0)*r11*x17111))+((cj4*cj6*r10))+(((-1.0)*r10*x17110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r00*x17108))+((r02*x17109))+((r01*x17111))+((r00*x17110))+((cj4*r01*sj6))))+IKsqr(((((-1.0)*r11*sj6*x17108))+(((-1.0)*r12*x17109))+(((-1.0)*r11*x17111))+((cj4*cj6*r10))+(((-1.0)*r10*x17110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj6*r00*x17108))+((r02*x17109))+((r01*x17111))+((r00*x17110))+((cj4*r01*sj6))), ((((-1.0)*r11*sj6*x17108))+(((-1.0)*r12*x17109))+(((-1.0)*r11*x17111))+((cj4*cj6*r10))+(((-1.0)*r10*x17110))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17112=IKcos(j0);
IkReal x17113=IKsin(j0);
IkReal x17114=((1.0)*sj4);
IkReal x17115=(cj6*sj3);
IkReal x17116=(sj5*sj6);
IkReal x17117=(cj3*cj5);
IkReal x17118=(r00*sj3);
IkReal x17119=((0.36442)*cj1);
IkReal x17120=(cj5*r01);
IkReal x17121=((1.0)*cj3);
IkReal x17122=(r10*sj6);
IkReal x17123=((0.01)*cj5);
IkReal x17124=(r12*sj5);
IkReal x17125=(r01*sj5);
IkReal x17126=((1.0)*cj4);
IkReal x17127=(r02*sj5);
IkReal x17128=(cj3*cj6);
IkReal x17129=(r00*sj6);
IkReal x17130=((0.37429)*cj5);
IkReal x17131=(cj4*cj6);
IkReal x17132=(r11*sj5);
IkReal x17133=(cj5*sj3);
IkReal x17134=((0.37429)*cj6);
IkReal x17135=(cj5*cj6*r11);
IkReal x17136=((0.069)*x17113);
IkReal x17137=(r11*sj4*sj6);
IkReal x17138=(r01*sj4*sj6);
IkReal x17139=((1.0)*x17112);
IkReal x17140=((0.069)*x17112);
evalcond[0]=((((-1.0)*cj6*x17114*x17120))+(((-1.0)*cj5*x17114*x17129))+(((-1.0)*x17114*x17127))+(((-1.0)*r01*sj6*x17126))+x17113+((r00*x17131)));
evalcond[1]=((((-1.0)*x17114*x17135))+(((-1.0)*cj5*x17114*x17122))+(((-1.0)*x17139))+((r10*x17131))+(((-1.0)*x17114*x17124))+(((-1.0)*r11*sj6*x17126)));
evalcond[2]=(((x17112*x17119))+((sj1*x17140))+((r02*x17130))+(((0.01)*x17127))+(((-1.0)*px))+(((-0.37429)*r00*x17116))+(((-1.0)*x17125*x17134))+(((0.01)*cj6*x17120))+x17140+((x17123*x17129)));
evalcond[3]=(((x17113*x17119))+((sj1*x17136))+((r12*x17130))+(((-0.37429)*r10*x17116))+(((0.01)*x17124))+(((-1.0)*py))+(((-1.0)*x17132*x17134))+((x17122*x17123))+x17136+((cj6*r11*x17123)));
evalcond[4]=((((-1.0)*r10*x17114*x17128))+((cj3*x17137))+(((-1.0)*r12*x17133))+((x17115*x17132))+(((-1.0)*x17117*x17122*x17126))+(((-1.0)*cj6*r11*x17117*x17126))+((r10*sj3*x17116))+((sj1*x17113))+(((-1.0)*cj4*x17121*x17124)));
evalcond[5]=((((-1.0)*r02*x17133))+((x17115*x17125))+((cj3*x17138))+((x17116*x17118))+(((-1.0)*cj6*r01*x17117*x17126))+(((-1.0)*r00*x17114*x17128))+(((-1.0)*x17117*x17126*x17129))+((sj1*x17112))+(((-1.0)*cj4*x17121*x17127)));
evalcond[6]=((((-1.0)*sj3*x17126*x17127))+(((-1.0)*x17115*x17120*x17126))+((sj3*x17138))+(((-1.0)*cj5*sj6*x17118*x17126))+(((-1.0)*cj1*x17139))+(((-1.0)*r00*x17114*x17115))+((r02*x17117))+(((-1.0)*r00*x17116*x17121))+(((-1.0)*cj6*x17121*x17125)));
evalcond[7]=((((-1.0)*r10*x17114*x17115))+(((-1.0)*x17122*x17126*x17133))+((sj3*x17137))+(((-1.0)*cj6*x17121*x17132))+(((-1.0)*cj5*r11*x17115*x17126))+(((-1.0)*r10*x17116*x17121))+((r12*x17117))+(((-1.0)*cj1*x17113))+(((-1.0)*sj3*x17124*x17126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17141=(cj4*sj3);
IkReal x17142=(cj3*r22);
IkReal x17143=(cj3*sj4);
IkReal x17144=(r21*sj6);
IkReal x17145=(r20*sj6);
IkReal x17146=((1.0)*cj5);
IkReal x17147=(sj3*sj5);
IkReal x17148=((1.0)*sj5);
IkReal x17149=(cj6*r21);
IkReal x17150=((0.01)*cj5);
IkReal x17151=(sj3*sj4);
IkReal x17152=(cj3*cj4);
IkReal x17153=(cj4*cj6);
IkReal x17154=((1.0)*cj4);
IkReal x17155=(sj4*sj6);
IkReal x17156=((0.37429)*sj5);
IkReal x17157=(cj6*x17146);
IkReal x17158=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x17153))+(((-1.0)*sj4*x17146*x17149))+(((-1.0)*x17144*x17154))+(((-1.0)*sj4*x17145*x17146))+(((-1.0)*r22*sj4*x17148)));
evalcond[2]=(((x17145*x17150))+(((-1.0)*x17149*x17156))+(((0.01)*r22*sj5))+(((-1.0)*x17145*x17156))+(((-1.0)*pz))+((x17149*x17150))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r10*x17146*x17155))+((r10*x17153))+(((-1.0)*r11*sj6*x17154))+(((-1.0)*r11*sj4*x17157))+(((-1.0)*r12*sj4*x17148)));
evalcond[4]=((((-1.0)*r01*sj4*x17157))+((r00*x17153))+(((-1.0)*r00*x17146*x17155))+(((-1.0)*r01*sj6*x17154))+(((-1.0)*r02*sj4*x17148)));
evalcond[5]=((((-1.0)*cj3*x17148*x17149))+(((-1.0)*x17151*x17158))+(((-1.0)*x17141*x17145*x17146))+(((-1.0)*x17141*x17146*x17149))+(((-1.0)*cj3*x17145*x17148))+(((-1.0)*r22*x17141*x17148))+((cj5*x17142))+((x17144*x17151)));
evalcond[6]=(((x17147*x17149))+((x17143*x17144))+((x17145*x17147))+(((-1.0)*x17145*x17146*x17152))+(((-1.0)*x17143*x17158))+(((-1.0)*r22*sj3*x17146))+(((-1.0)*cj4*x17142*x17148))+(((-1.0)*x17146*x17149*x17152)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17159=((0.842227766698146)*sj5);
IkReal x17160=(r10*sj6);
IkReal x17161=(cj6*r01);
IkReal x17162=((0.00358229604870815)*cj5);
IkReal x17163=(cj6*r11);
IkReal x17164=((0.0225020109192911)*sj5);
IkReal x17165=((0.134081758807097)*sj5);
IkReal x17166=(r00*sj6);
IkReal x17167=((0.134081758807097)*cj5);
IkReal x17168=((0.0225020109192911)*cj5);
IkReal x17169=((0.842227766698146)*cj5);
IkReal x17170=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*r12*x17169))+(((-1.0)*r12*x17164))+(((-1.0)*x17165*x17166))+(((2.25020109192911)*py))+(((-0.358229604870815)*px))+(((-1.0)*x17163*x17168))+(((-1.0)*x17161*x17165))+(((-1.0)*x17160*x17168))+((x17162*x17166))+((r02*x17167))+((x17159*x17160))+((x17159*x17163))+((x17161*x17162))+((r02*x17170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x17167))+(((-1.0)*x17162*x17163))+(((2.25020109192911)*px))+(((0.358229604870815)*py))+((x17163*x17165))+(((-1.0)*x17161*x17168))+(((-1.0)*x17160*x17162))+((x17160*x17165))+(((-1.0)*x17166*x17168))+((x17159*x17166))+((x17159*x17161))+(((-1.0)*r02*x17164))+(((-1.0)*r02*x17169))+(((-1.0)*r12*x17170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x17169))+(((-1.0)*r12*x17164))+(((-1.0)*x17165*x17166))+(((2.25020109192911)*py))+(((-0.358229604870815)*px))+(((-1.0)*x17163*x17168))+(((-1.0)*x17161*x17165))+(((-1.0)*x17160*x17168))+((x17162*x17166))+((r02*x17167))+((x17159*x17160))+((x17159*x17163))+((x17161*x17162))+((r02*x17170))))+IKsqr(((((-1.0)*r12*x17167))+(((-1.0)*x17162*x17163))+(((2.25020109192911)*px))+(((0.358229604870815)*py))+((x17163*x17165))+(((-1.0)*x17161*x17168))+(((-1.0)*x17160*x17162))+((x17160*x17165))+(((-1.0)*x17166*x17168))+((x17159*x17166))+((x17159*x17161))+(((-1.0)*r02*x17164))+(((-1.0)*r02*x17169))+(((-1.0)*r12*x17170))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x17169))+(((-1.0)*r12*x17164))+(((-1.0)*x17165*x17166))+(((2.25020109192911)*py))+(((-0.358229604870815)*px))+(((-1.0)*x17163*x17168))+(((-1.0)*x17161*x17165))+(((-1.0)*x17160*x17168))+((x17162*x17166))+((r02*x17167))+((x17159*x17160))+((x17159*x17163))+((x17161*x17162))+((r02*x17170))), ((((-1.0)*r12*x17167))+(((-1.0)*x17162*x17163))+(((2.25020109192911)*px))+(((0.358229604870815)*py))+((x17163*x17165))+(((-1.0)*x17161*x17168))+(((-1.0)*x17160*x17162))+((x17160*x17165))+(((-1.0)*x17166*x17168))+((x17159*x17166))+((x17159*x17161))+(((-1.0)*r02*x17164))+(((-1.0)*r02*x17169))+(((-1.0)*r12*x17170))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17171=IKsin(j0);
IkReal x17172=IKcos(j0);
IkReal x17173=(r10*sj3);
IkReal x17174=(cj3*r00);
IkReal x17175=(sj5*sj6);
IkReal x17176=(cj5*r12);
IkReal x17177=(r00*sj3);
IkReal x17178=(cj3*r10);
IkReal x17179=(cj5*sj6);
IkReal x17180=((1.0)*cj4);
IkReal x17181=(cj5*r02);
IkReal x17182=(cj3*r01);
IkReal x17183=(sj4*sj6);
IkReal x17184=(r12*sj5);
IkReal x17185=(cj6*sj5);
IkReal x17186=(r01*sj3);
IkReal x17187=(r11*sj3);
IkReal x17188=((1.0)*sj3);
IkReal x17189=(r02*sj5);
IkReal x17190=(cj5*cj6);
IkReal x17191=(cj3*r11);
IkReal x17192=((1.0)*x17171);
IkReal x17193=((1.0)*cj6*sj4);
IkReal x17194=(r11*x17183);
IkReal x17195=((0.01)*x17190);
evalcond[0]=((((0.43342)*x17172))+(((0.01)*x17189))+(((-1.0)*px))+((r01*x17195))+(((0.01)*r00*x17179))+(((-0.37429)*r01*x17185))+(((-0.069)*x17171))+(((-0.37429)*r00*x17175))+(((0.37429)*x17181)));
evalcond[1]=((((0.43342)*x17171))+(((0.01)*x17184))+((r11*x17195))+(((0.069)*x17172))+(((0.37429)*x17176))+(((-1.0)*py))+(((-0.37429)*r10*x17175))+(((0.01)*r10*x17179))+(((-0.37429)*r11*x17185)));
evalcond[2]=(((x17185*x17187))+(((-1.0)*x17176*x17188))+(((-1.0)*x17178*x17179*x17180))+(((-1.0)*x17180*x17190*x17191))+(((-1.0)*x17178*x17193))+((x17183*x17191))+x17172+((x17173*x17175))+(((-1.0)*cj3*x17180*x17184)));
evalcond[3]=(((x17185*x17186))+(((-1.0)*x17192))+(((-1.0)*x17181*x17188))+(((-1.0)*x17174*x17193))+(((-1.0)*x17174*x17179*x17180))+(((-1.0)*x17180*x17182*x17190))+((x17175*x17177))+((x17182*x17183))+(((-1.0)*cj3*x17180*x17189)));
evalcond[4]=((((-1.0)*sj3*x17180*x17189))+(((-1.0)*x17180*x17186*x17190))+((x17183*x17186))+(((-1.0)*x17177*x17193))+(((-1.0)*x17174*x17175))+(((-1.0)*x17172))+(((-1.0)*x17182*x17185))+(((-1.0)*x17177*x17179*x17180))+((cj3*x17181)));
evalcond[5]=((((-1.0)*x17175*x17178))+(((-1.0)*sj3*x17180*x17184))+((x17183*x17187))+(((-1.0)*x17192))+(((-1.0)*x17180*x17187*x17190))+((cj3*x17176))+(((-1.0)*x17185*x17191))+(((-1.0)*x17173*x17193))+(((-1.0)*x17173*x17179*x17180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17196=(cj4*sj3);
IkReal x17197=(cj3*r22);
IkReal x17198=(cj3*sj4);
IkReal x17199=(r21*sj6);
IkReal x17200=(r20*sj6);
IkReal x17201=((1.0)*cj5);
IkReal x17202=(sj3*sj5);
IkReal x17203=((1.0)*sj5);
IkReal x17204=(cj6*r21);
IkReal x17205=((0.01)*cj5);
IkReal x17206=(sj3*sj4);
IkReal x17207=(cj3*cj4);
IkReal x17208=(cj4*cj6);
IkReal x17209=((1.0)*cj4);
IkReal x17210=(sj4*sj6);
IkReal x17211=((0.37429)*sj5);
IkReal x17212=(cj6*x17201);
IkReal x17213=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x17200*x17201))+(((-1.0)*x17199*x17209))+(((-1.0)*r22*sj4*x17203))+((r20*x17208))+(((-1.0)*sj4*x17201*x17204)));
evalcond[2]=(((x17200*x17205))+((x17204*x17205))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17200*x17211))+(((-1.0)*x17204*x17211))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj6*x17209))+(((-1.0)*r11*sj4*x17212))+(((-1.0)*r12*sj4*x17203))+((r10*x17208))+(((-1.0)*r10*x17201*x17210)));
evalcond[4]=((((-1.0)*r02*sj4*x17203))+(((-1.0)*r01*sj4*x17212))+(((-1.0)*r00*x17201*x17210))+(((-1.0)*r01*sj6*x17209))+((r00*x17208)));
evalcond[5]=((((-1.0)*x17196*x17201*x17204))+(((-1.0)*r22*x17196*x17203))+(((-1.0)*cj3*x17203*x17204))+(((-1.0)*cj3*x17200*x17203))+((x17199*x17206))+(((-1.0)*x17206*x17213))+((cj5*x17197))+(((-1.0)*x17196*x17200*x17201)));
evalcond[6]=(((x17202*x17204))+((x17200*x17202))+((x17198*x17199))+(((-1.0)*r22*sj3*x17201))+(((-1.0)*x17198*x17213))+(((-1.0)*x17201*x17204*x17207))+(((-1.0)*cj4*x17197*x17203))+(((-1.0)*x17200*x17201*x17207)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17214=((0.842227766698146)*sj5);
IkReal x17215=(r10*sj6);
IkReal x17216=(cj6*r01);
IkReal x17217=((0.00358229604870815)*cj5);
IkReal x17218=(cj6*r11);
IkReal x17219=((0.0225020109192911)*sj5);
IkReal x17220=((0.134081758807097)*sj5);
IkReal x17221=(r00*sj6);
IkReal x17222=((0.134081758807097)*cj5);
IkReal x17223=((0.0225020109192911)*cj5);
IkReal x17224=((0.842227766698146)*cj5);
IkReal x17225=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*r12*x17219))+((x17214*x17218))+((x17214*x17215))+(((-1.0)*r02*x17222))+(((-1.0)*r02*x17225))+(((-1.0)*x17216*x17217))+(((2.25020109192911)*py))+((x17220*x17221))+(((-1.0)*x17215*x17223))+(((0.358229604870815)*px))+((x17216*x17220))+(((-1.0)*r12*x17224))+(((-1.0)*x17217*x17221))+(((-1.0)*x17218*x17223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x17214*x17216))+((r12*x17225))+((r12*x17222))+(((-1.0)*r02*x17224))+((x17215*x17217))+(((2.25020109192911)*px))+(((-1.0)*r02*x17219))+(((-0.358229604870815)*py))+(((-1.0)*x17215*x17220))+((x17214*x17221))+(((-1.0)*x17216*x17223))+(((-1.0)*x17221*x17223))+((x17217*x17218))+(((-1.0)*x17218*x17220)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x17219))+((x17214*x17218))+((x17214*x17215))+(((-1.0)*r02*x17222))+(((-1.0)*r02*x17225))+(((-1.0)*x17216*x17217))+(((2.25020109192911)*py))+((x17220*x17221))+(((-1.0)*x17215*x17223))+(((0.358229604870815)*px))+((x17216*x17220))+(((-1.0)*r12*x17224))+(((-1.0)*x17217*x17221))+(((-1.0)*x17218*x17223))))+IKsqr((((x17214*x17216))+((r12*x17225))+((r12*x17222))+(((-1.0)*r02*x17224))+((x17215*x17217))+(((2.25020109192911)*px))+(((-1.0)*r02*x17219))+(((-0.358229604870815)*py))+(((-1.0)*x17215*x17220))+((x17214*x17221))+(((-1.0)*x17216*x17223))+(((-1.0)*x17221*x17223))+((x17217*x17218))+(((-1.0)*x17218*x17220))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x17219))+((x17214*x17218))+((x17214*x17215))+(((-1.0)*r02*x17222))+(((-1.0)*r02*x17225))+(((-1.0)*x17216*x17217))+(((2.25020109192911)*py))+((x17220*x17221))+(((-1.0)*x17215*x17223))+(((0.358229604870815)*px))+((x17216*x17220))+(((-1.0)*r12*x17224))+(((-1.0)*x17217*x17221))+(((-1.0)*x17218*x17223))), (((x17214*x17216))+((r12*x17225))+((r12*x17222))+(((-1.0)*r02*x17224))+((x17215*x17217))+(((2.25020109192911)*px))+(((-1.0)*r02*x17219))+(((-0.358229604870815)*py))+(((-1.0)*x17215*x17220))+((x17214*x17221))+(((-1.0)*x17216*x17223))+(((-1.0)*x17221*x17223))+((x17217*x17218))+(((-1.0)*x17218*x17220))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17226=IKsin(j0);
IkReal x17227=IKcos(j0);
IkReal x17228=(r10*sj3);
IkReal x17229=(cj3*r00);
IkReal x17230=(sj5*sj6);
IkReal x17231=(cj5*r12);
IkReal x17232=(r00*sj3);
IkReal x17233=((1.0)*cj3);
IkReal x17234=(cj5*r02);
IkReal x17235=((0.01)*cj5);
IkReal x17236=(r10*sj6);
IkReal x17237=(cj6*r11);
IkReal x17238=(cj4*cj5);
IkReal x17239=((1.0)*sj3);
IkReal x17240=(cj6*r01);
IkReal x17241=((1.0)*sj6);
IkReal x17242=((0.01)*sj5);
IkReal x17243=((1.0)*x17227);
IkReal x17244=((1.0)*cj6*sj4);
IkReal x17245=(sj5*x17240);
IkReal x17246=(r11*sj4*sj6);
IkReal x17247=(cj4*r12*sj5);
IkReal x17248=(r01*sj4*sj6);
IkReal x17249=(cj4*r02*sj5);
evalcond[0]=(((r02*x17242))+(((0.069)*x17226))+((r00*sj6*x17235))+(((-1.0)*px))+(((-0.37429)*r00*x17230))+(((0.43342)*x17227))+(((-0.37429)*x17245))+(((0.37429)*x17234))+((x17235*x17240)));
evalcond[1]=(((r12*x17242))+((x17235*x17237))+((x17235*x17236))+(((-1.0)*py))+(((0.43342)*x17226))+(((-0.069)*x17227))+(((-0.37429)*sj5*x17237))+(((0.37429)*x17231))+(((-0.37429)*r10*x17230)));
evalcond[2]=((((-1.0)*x17233*x17238*x17240))+(((-1.0)*x17229*x17238*x17241))+((sj3*x17245))+((x17230*x17232))+((cj3*x17248))+(((-1.0)*x17233*x17249))+x17226+(((-1.0)*x17229*x17244))+(((-1.0)*x17234*x17239)));
evalcond[3]=((((-1.0)*x17233*x17236*x17238))+((sj3*sj5*x17237))+((x17228*x17230))+(((-1.0)*cj6*r10*sj4*x17233))+(((-1.0)*x17231*x17239))+((cj3*x17246))+(((-1.0)*x17243))+(((-1.0)*x17233*x17237*x17238))+(((-1.0)*x17233*x17247)));
evalcond[4]=((((-1.0)*x17232*x17238*x17241))+(((-1.0)*x17239*x17249))+((sj3*x17248))+(((-1.0)*x17229*x17230))+(((-1.0)*x17243))+(((-1.0)*x17238*x17239*x17240))+(((-1.0)*x17233*x17245))+(((-1.0)*x17232*x17244))+((cj3*x17234)));
evalcond[5]=((((-1.0)*x17237*x17238*x17239))+(((-1.0)*x17228*x17238*x17241))+(((-1.0)*x17239*x17247))+((sj3*x17246))+(((-1.0)*r10*x17230*x17233))+(((-1.0)*sj5*x17233*x17237))+(((-1.0)*x17228*x17244))+(((-1.0)*x17226))+((cj3*x17231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17250=(cj4*sj3);
IkReal x17251=(cj3*r22);
IkReal x17252=(cj3*sj4);
IkReal x17253=(r21*sj6);
IkReal x17254=(r20*sj6);
IkReal x17255=((1.0)*cj5);
IkReal x17256=(sj3*sj5);
IkReal x17257=((1.0)*sj5);
IkReal x17258=(cj6*r21);
IkReal x17259=((0.01)*cj5);
IkReal x17260=(sj3*sj4);
IkReal x17261=(cj3*cj4);
IkReal x17262=(cj4*cj6);
IkReal x17263=((1.0)*cj4);
IkReal x17264=(sj4*sj6);
IkReal x17265=((0.37429)*sj5);
IkReal x17266=(cj6*x17255);
IkReal x17267=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x17255*x17258))+(((-1.0)*sj4*x17254*x17255))+(((-1.0)*r22*sj4*x17257))+((r20*x17262))+(((-1.0)*x17253*x17263)));
evalcond[2]=(((x17258*x17259))+((x17254*x17259))+(((-1.0)*x17258*x17265))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17254*x17265))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj6*x17263))+(((-1.0)*r11*sj4*x17266))+(((-1.0)*r10*x17255*x17264))+((r10*x17262))+(((-1.0)*r12*sj4*x17257)));
evalcond[4]=((((-1.0)*r01*sj6*x17263))+((r00*x17262))+(((-1.0)*r01*sj4*x17266))+(((-1.0)*r00*x17255*x17264))+(((-1.0)*r02*sj4*x17257)));
evalcond[5]=(((x17253*x17260))+(((-1.0)*x17250*x17254*x17255))+(((-1.0)*cj3*x17257*x17258))+(((-1.0)*r22*x17250*x17257))+(((-1.0)*cj3*x17254*x17257))+(((-1.0)*x17250*x17255*x17258))+(((-1.0)*x17260*x17267))+((cj5*x17251)));
evalcond[6]=((((-1.0)*x17255*x17258*x17261))+((x17252*x17253))+(((-1.0)*r22*sj3*x17255))+(((-1.0)*cj4*x17251*x17257))+((x17254*x17256))+(((-1.0)*x17252*x17267))+(((-1.0)*x17254*x17255*x17261))+((x17256*x17258)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17268=((0.0320990151198118)*sj5);
IkReal x17269=((0.00749723120732182)*sj5);
IkReal x17270=(cj6*r01);
IkReal x17271=((0.00749723120732182)*cj5);
IkReal x17272=(r00*sj6);
IkReal x17273=((1.20143403691943)*sj5);
IkReal x17274=((0.0320990151198118)*cj5);
IkReal x17275=(r10*sj6);
IkReal x17276=((0.280613866858848)*cj5);
IkReal x17277=((1.20143403691943)*cj5);
IkReal x17278=((0.280613866858848)*sj5);
IkReal x17279=(cj6*r11);
IkReal x17280=(cj6*x17273);
IkReal x17281=(cj6*x17274);
if( IKabs(((((-0.749723120732182)*px))+(((-1.0)*x17270*x17278))+((x17270*x17271))+((x17274*x17279))+((x17274*x17275))+((r12*x17277))+((r02*x17276))+(((-1.0)*x17272*x17278))+(((-1.0)*x17273*x17279))+(((-1.0)*x17273*x17275))+((r12*x17268))+((r02*x17269))+(((-3.20990151198118)*py))+((x17271*x17272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x17270*x17273))+((x17270*x17274))+((x17275*x17278))+((r02*x17277))+(((-1.0)*r12*x17276))+((x17272*x17274))+(((-1.0)*x17272*x17273))+((x17278*x17279))+(((0.749723120732182)*py))+((r02*x17268))+(((-1.0)*r12*x17269))+(((-3.20990151198118)*px))+(((-1.0)*x17271*x17279))+(((-1.0)*x17271*x17275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.749723120732182)*px))+(((-1.0)*x17270*x17278))+((x17270*x17271))+((x17274*x17279))+((x17274*x17275))+((r12*x17277))+((r02*x17276))+(((-1.0)*x17272*x17278))+(((-1.0)*x17273*x17279))+(((-1.0)*x17273*x17275))+((r12*x17268))+((r02*x17269))+(((-3.20990151198118)*py))+((x17271*x17272))))+IKsqr(((((-1.0)*x17270*x17273))+((x17270*x17274))+((x17275*x17278))+((r02*x17277))+(((-1.0)*r12*x17276))+((x17272*x17274))+(((-1.0)*x17272*x17273))+((x17278*x17279))+(((0.749723120732182)*py))+((r02*x17268))+(((-1.0)*r12*x17269))+(((-3.20990151198118)*px))+(((-1.0)*x17271*x17279))+(((-1.0)*x17271*x17275))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.749723120732182)*px))+(((-1.0)*x17270*x17278))+((x17270*x17271))+((x17274*x17279))+((x17274*x17275))+((r12*x17277))+((r02*x17276))+(((-1.0)*x17272*x17278))+(((-1.0)*x17273*x17279))+(((-1.0)*x17273*x17275))+((r12*x17268))+((r02*x17269))+(((-3.20990151198118)*py))+((x17271*x17272))), ((((-1.0)*x17270*x17273))+((x17270*x17274))+((x17275*x17278))+((r02*x17277))+(((-1.0)*r12*x17276))+((x17272*x17274))+(((-1.0)*x17272*x17273))+((x17278*x17279))+(((0.749723120732182)*py))+((r02*x17268))+(((-1.0)*r12*x17269))+(((-3.20990151198118)*px))+(((-1.0)*x17271*x17279))+(((-1.0)*x17271*x17275))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17282=IKcos(j0);
IkReal x17283=IKsin(j0);
IkReal x17284=(r10*sj3);
IkReal x17285=(cj3*r00);
IkReal x17286=(sj5*sj6);
IkReal x17287=(cj3*cj5);
IkReal x17288=(r00*sj3);
IkReal x17289=(cj3*r10);
IkReal x17290=(cj5*sj6);
IkReal x17291=((1.0)*cj4);
IkReal x17292=(cj5*cj6);
IkReal x17293=(r01*sj3);
IkReal x17294=(cj3*r01);
IkReal x17295=(sj4*sj6);
IkReal x17296=(r12*sj5);
IkReal x17297=(cj6*sj5);
IkReal x17298=((0.37429)*cj5);
IkReal x17299=(r11*sj3);
IkReal x17300=(r02*sj5);
IkReal x17301=((1.0)*cj6*sj4);
IkReal x17302=(r11*x17295);
IkReal x17303=((1.0)*cj5*sj3);
evalcond[0]=((((-0.069)*x17283))+(((-0.37429)*r01*x17297))+(((0.01)*x17300))+(((-0.29542)*x17282))+((r02*x17298))+(((-1.0)*px))+(((0.01)*r01*x17292))+(((0.01)*r00*x17290))+(((-0.37429)*r00*x17286)));
evalcond[1]=((((-0.37429)*r11*x17297))+(((0.01)*r11*x17292))+(((0.069)*x17282))+(((-0.29542)*x17283))+(((-0.37429)*r10*x17286))+(((-1.0)*py))+(((0.01)*x17296))+(((0.01)*r10*x17290))+((r12*x17298)));
evalcond[2]=(((cj3*x17302))+(((-1.0)*cj3*x17291*x17296))+(((-1.0)*cj6*r11*x17287*x17291))+((x17284*x17286))+(((-1.0)*x17289*x17301))+((x17297*x17299))+x17282+(((-1.0)*r10*sj6*x17287*x17291))+(((-1.0)*r12*x17303)));
evalcond[3]=((((-1.0)*x17285*x17286))+(((-1.0)*x17291*x17292*x17293))+(((-1.0)*x17294*x17297))+(((-1.0)*x17288*x17301))+(((-1.0)*x17288*x17290*x17291))+x17282+(((-1.0)*sj3*x17291*x17300))+((r02*x17287))+((x17293*x17295)));
evalcond[4]=((((-1.0)*sj3*x17291*x17296))+(((-1.0)*x17291*x17292*x17299))+(((-1.0)*x17286*x17289))+(((-1.0)*x17284*x17290*x17291))+((r12*x17287))+(((-1.0)*x17284*x17301))+((x17295*x17299))+x17283+(((-1.0)*cj3*r11*x17297)));
evalcond[5]=((((-1.0)*cj3*x17291*x17300))+(((-1.0)*r02*x17303))+((x17286*x17288))+(((-1.0)*cj6*r01*x17287*x17291))+(((-1.0)*x17285*x17301))+((x17294*x17295))+(((-1.0)*x17283))+(((-1.0)*x17285*x17290*x17291))+((x17293*x17297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17304=(cj4*sj3);
IkReal x17305=(cj3*r22);
IkReal x17306=(cj3*sj4);
IkReal x17307=(r21*sj6);
IkReal x17308=(r20*sj6);
IkReal x17309=((1.0)*cj5);
IkReal x17310=(sj3*sj5);
IkReal x17311=((1.0)*sj5);
IkReal x17312=(cj6*r21);
IkReal x17313=((0.01)*cj5);
IkReal x17314=(sj3*sj4);
IkReal x17315=(cj3*cj4);
IkReal x17316=(cj4*cj6);
IkReal x17317=((1.0)*cj4);
IkReal x17318=(sj4*sj6);
IkReal x17319=((0.37429)*sj5);
IkReal x17320=(cj6*x17309);
IkReal x17321=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x17316))+(((-1.0)*sj4*x17308*x17309))+(((-1.0)*r22*sj4*x17311))+(((-1.0)*sj4*x17309*x17312))+(((-1.0)*x17307*x17317)));
evalcond[2]=(((x17308*x17313))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17308*x17319))+(((-1.0)*x17312*x17319))+((x17312*x17313))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r12*sj4*x17311))+(((-1.0)*r10*x17309*x17318))+(((-1.0)*r11*sj4*x17320))+((r10*x17316))+(((-1.0)*r11*sj6*x17317)));
evalcond[4]=(((r00*x17316))+(((-1.0)*r01*sj6*x17317))+(((-1.0)*r01*sj4*x17320))+(((-1.0)*r02*sj4*x17311))+(((-1.0)*r00*x17309*x17318)));
evalcond[5]=((((-1.0)*x17314*x17321))+(((-1.0)*x17304*x17309*x17312))+((cj5*x17305))+(((-1.0)*cj3*x17311*x17312))+(((-1.0)*x17304*x17308*x17309))+(((-1.0)*r22*x17304*x17311))+((x17307*x17314))+(((-1.0)*cj3*x17308*x17311)));
evalcond[6]=(((x17308*x17310))+(((-1.0)*cj4*x17305*x17311))+(((-1.0)*r22*sj3*x17309))+(((-1.0)*x17306*x17321))+((x17310*x17312))+((x17306*x17307))+(((-1.0)*x17309*x17312*x17315))+(((-1.0)*x17308*x17309*x17315)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17322=((0.0320990151198118)*sj5);
IkReal x17323=((0.00749723120732182)*sj5);
IkReal x17324=(cj6*r01);
IkReal x17325=((0.00749723120732182)*cj5);
IkReal x17326=(r00*sj6);
IkReal x17327=((1.20143403691943)*sj5);
IkReal x17328=((0.0320990151198118)*cj5);
IkReal x17329=(r10*sj6);
IkReal x17330=((0.280613866858848)*cj5);
IkReal x17331=((1.20143403691943)*cj5);
IkReal x17332=((0.280613866858848)*sj5);
IkReal x17333=(cj6*r11);
IkReal x17334=(cj6*x17327);
IkReal x17335=(cj6*x17328);
if( IKabs(((((-1.0)*r02*x17323))+(((-1.0)*r02*x17330))+((r12*x17322))+((x17324*x17332))+((r12*x17331))+((x17328*x17329))+(((-1.0)*x17325*x17326))+((x17328*x17333))+(((-1.0)*x17327*x17333))+(((0.749723120732182)*px))+(((-1.0)*x17324*x17325))+(((-1.0)*x17327*x17329))+(((-3.20990151198118)*py))+((x17326*x17332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.749723120732182)*py))+((x17326*x17328))+(((-1.0)*x17326*x17327))+((x17325*x17333))+(((-1.0)*x17329*x17332))+((x17325*x17329))+((r02*x17322))+((x17324*x17328))+((r12*x17323))+((r02*x17331))+(((-1.0)*x17332*x17333))+((r12*x17330))+(((-1.0)*x17324*x17327))+(((-3.20990151198118)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x17323))+(((-1.0)*r02*x17330))+((r12*x17322))+((x17324*x17332))+((r12*x17331))+((x17328*x17329))+(((-1.0)*x17325*x17326))+((x17328*x17333))+(((-1.0)*x17327*x17333))+(((0.749723120732182)*px))+(((-1.0)*x17324*x17325))+(((-1.0)*x17327*x17329))+(((-3.20990151198118)*py))+((x17326*x17332))))+IKsqr(((((-0.749723120732182)*py))+((x17326*x17328))+(((-1.0)*x17326*x17327))+((x17325*x17333))+(((-1.0)*x17329*x17332))+((x17325*x17329))+((r02*x17322))+((x17324*x17328))+((r12*x17323))+((r02*x17331))+(((-1.0)*x17332*x17333))+((r12*x17330))+(((-1.0)*x17324*x17327))+(((-3.20990151198118)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x17323))+(((-1.0)*r02*x17330))+((r12*x17322))+((x17324*x17332))+((r12*x17331))+((x17328*x17329))+(((-1.0)*x17325*x17326))+((x17328*x17333))+(((-1.0)*x17327*x17333))+(((0.749723120732182)*px))+(((-1.0)*x17324*x17325))+(((-1.0)*x17327*x17329))+(((-3.20990151198118)*py))+((x17326*x17332))), ((((-0.749723120732182)*py))+((x17326*x17328))+(((-1.0)*x17326*x17327))+((x17325*x17333))+(((-1.0)*x17329*x17332))+((x17325*x17329))+((r02*x17322))+((x17324*x17328))+((r12*x17323))+((r02*x17331))+(((-1.0)*x17332*x17333))+((r12*x17330))+(((-1.0)*x17324*x17327))+(((-3.20990151198118)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17336=IKcos(j0);
IkReal x17337=IKsin(j0);
IkReal x17338=(r10*sj3);
IkReal x17339=(cj3*r00);
IkReal x17340=(sj5*sj6);
IkReal x17341=(cj3*cj5);
IkReal x17342=(r00*sj3);
IkReal x17343=((1.0)*cj3);
IkReal x17344=(cj6*r01);
IkReal x17345=((0.37429)*sj5);
IkReal x17346=((0.01)*cj5);
IkReal x17347=(r10*sj6);
IkReal x17348=(cj6*r11);
IkReal x17349=((1.0)*cj4);
IkReal x17350=(cj5*sj3);
IkReal x17351=(r12*sj5);
IkReal x17352=((0.37429)*cj5);
IkReal x17353=(sj3*sj5);
IkReal x17354=(cj5*sj6);
IkReal x17355=(r02*sj5);
IkReal x17356=((1.0)*cj6*sj4);
IkReal x17357=(r11*sj4*sj6);
IkReal x17358=(r01*sj4*sj6);
evalcond[0]=((((0.069)*x17337))+(((-0.29542)*x17336))+(((0.01)*x17355))+(((-1.0)*px))+(((-0.37429)*r00*x17340))+(((-1.0)*x17344*x17345))+((r00*sj6*x17346))+((r02*x17352))+((x17344*x17346)));
evalcond[1]=(((r12*x17352))+((x17346*x17348))+((x17346*x17347))+(((-0.29542)*x17337))+(((0.01)*x17351))+(((-1.0)*x17345*x17348))+(((-1.0)*py))+(((-0.37429)*r10*x17340))+(((-0.069)*x17336)));
evalcond[2]=((((-1.0)*x17341*x17344*x17349))+(((-1.0)*x17339*x17349*x17354))+(((-1.0)*x17339*x17356))+((x17340*x17342))+(((-1.0)*cj4*x17343*x17355))+(((-1.0)*r02*x17350))+x17337+((x17344*x17353))+((cj3*x17358)));
evalcond[3]=((((-1.0)*x17344*x17349*x17350))+(((-1.0)*sj5*x17343*x17344))+(((-1.0)*x17339*x17340))+((sj3*x17358))+((r02*x17341))+(((-1.0)*x17342*x17349*x17354))+x17336+(((-1.0)*x17342*x17356))+(((-1.0)*r02*x17349*x17353)));
evalcond[4]=((((-1.0)*x17338*x17356))+(((-1.0)*sj5*x17343*x17348))+(((-1.0)*x17338*x17349*x17354))+(((-1.0)*x17348*x17349*x17350))+((r12*x17341))+(((-1.0)*sj3*x17349*x17351))+(((-1.0)*r10*x17340*x17343))+((sj3*x17357))+x17337);
evalcond[5]=((((-1.0)*cj6*r10*sj4*x17343))+(((-1.0)*x17341*x17347*x17349))+((x17348*x17353))+(((-1.0)*x17341*x17348*x17349))+((x17338*x17340))+(((-1.0)*cj4*x17343*x17351))+(((-1.0)*x17336))+((cj3*x17357))+(((-1.0)*r12*x17350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17359=cj1*cj1;
IkReal x17360=((69.0)*r10);
IkReal x17361=(cj4*cj6);
IkReal x17362=((364.42)*cj1);
IkReal x17363=(cj5*sj4);
IkReal x17364=((374.29)*cj2);
IkReal x17365=(cj5*r02);
IkReal x17366=(sj1*sj5);
IkReal x17367=((10.0)*r02);
IkReal x17368=(sj1*sj2);
IkReal x17369=(cj6*r11);
IkReal x17370=((69.0)*cj2);
IkReal x17371=(cj6*r01);
IkReal x17372=(cj2*sj1);
IkReal x17373=(r12*sj4);
IkReal x17374=(r00*sj6);
IkReal x17375=((1000.0)*px);
IkReal x17376=(cj4*r11*sj6);
IkReal x17377=((10.0)*cj5*sj1);
IkReal x17378=((10.0)*cj2*cj5);
IkReal x17379=(x17360*x17361);
IkReal x17380=((69.0)*x17376);
IkReal x17381=((69.0)*sj5*x17373);
IkReal x17382=((69.0)*x17363*x17369);
IkReal x17383=(sj6*x17360*x17363);
IkReal x17384=(x17380+x17381+x17382+x17383);
CheckValue<IkReal> x17385=IKPowWithIntegerCheck((((x17362*x17368))+((sj2*x17359*x17370))+(((69.0)*x17368))),-1);
if(!x17385.valid){
continue;
}
CheckValue<IkReal> x17386=IKPowWithIntegerCheck(((((-1.0)*x17359*x17370))+(((-69.0)*sj1))+(((-1.0)*sj1*x17362))),-1);
if(!x17386.valid){
continue;
}
if( IKabs(((x17385.value)*((((x17364*x17365))+(((-1.0)*sj1*x17370*x17376))+(((-1.0)*x17372*x17383))+((r10*sj6*x17362*x17363))+(((-1.0)*x17379))+((x17374*x17378))+(((-1.0)*cj2*x17375))+((x17372*x17379))+(((-1.0)*x17366*x17370*x17373))+((sj5*x17362*x17373))+((x17362*x17376))+((x17362*x17363*x17369))+((x17371*x17378))+(((-1.0)*r10*x17361*x17362))+(((-1.0)*sj1*x17363*x17369*x17370))+(((-1.0)*sj5*x17364*x17371))+(((-1.0)*sj5*x17364*x17374))+((cj2*sj5*x17367))+x17384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17386.value)*((((x17374*x17377))+(((-1.0)*sj1*x17375))+((x17371*x17377))+(((-1.0)*x17384))+(((-374.29)*x17366*x17374))+(((-374.29)*x17366*x17371))+(((374.29)*sj1*x17365))+x17379+((x17366*x17367)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x17385.value)*((((x17364*x17365))+(((-1.0)*sj1*x17370*x17376))+(((-1.0)*x17372*x17383))+((r10*sj6*x17362*x17363))+(((-1.0)*x17379))+((x17374*x17378))+(((-1.0)*cj2*x17375))+((x17372*x17379))+(((-1.0)*x17366*x17370*x17373))+((sj5*x17362*x17373))+((x17362*x17376))+((x17362*x17363*x17369))+((x17371*x17378))+(((-1.0)*r10*x17361*x17362))+(((-1.0)*sj1*x17363*x17369*x17370))+(((-1.0)*sj5*x17364*x17371))+(((-1.0)*sj5*x17364*x17374))+((cj2*sj5*x17367))+x17384))))+IKsqr(((x17386.value)*((((x17374*x17377))+(((-1.0)*sj1*x17375))+((x17371*x17377))+(((-1.0)*x17384))+(((-374.29)*x17366*x17374))+(((-374.29)*x17366*x17371))+(((374.29)*sj1*x17365))+x17379+((x17366*x17367))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x17385.value)*((((x17364*x17365))+(((-1.0)*sj1*x17370*x17376))+(((-1.0)*x17372*x17383))+((r10*sj6*x17362*x17363))+(((-1.0)*x17379))+((x17374*x17378))+(((-1.0)*cj2*x17375))+((x17372*x17379))+(((-1.0)*x17366*x17370*x17373))+((sj5*x17362*x17373))+((x17362*x17376))+((x17362*x17363*x17369))+((x17371*x17378))+(((-1.0)*r10*x17361*x17362))+(((-1.0)*sj1*x17363*x17369*x17370))+(((-1.0)*sj5*x17364*x17371))+(((-1.0)*sj5*x17364*x17374))+((cj2*sj5*x17367))+x17384))), ((x17386.value)*((((x17374*x17377))+(((-1.0)*sj1*x17375))+((x17371*x17377))+(((-1.0)*x17384))+(((-374.29)*x17366*x17374))+(((-374.29)*x17366*x17371))+(((374.29)*sj1*x17365))+x17379+((x17366*x17367))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17387=IKcos(j0);
IkReal x17388=IKsin(j0);
IkReal x17389=((1.0)*sj4);
IkReal x17390=(cj6*sj3);
IkReal x17391=(cj3*cj5);
IkReal x17392=(sj5*sj6);
IkReal x17393=(r00*sj3);
IkReal x17394=((0.36442)*cj1);
IkReal x17395=((0.069)*sj2);
IkReal x17396=(cj6*r01);
IkReal x17397=((1.0)*cj3);
IkReal x17398=((0.37429)*sj5);
IkReal x17399=((0.01)*cj5);
IkReal x17400=(r10*sj6);
IkReal x17401=(r12*sj5);
IkReal x17402=((1.0)*cj4);
IkReal x17403=(r02*sj5);
IkReal x17404=((1.0)*sj1);
IkReal x17405=(cj3*cj6);
IkReal x17406=(r01*sj6);
IkReal x17407=(r00*sj6);
IkReal x17408=(cj6*r11);
IkReal x17409=((0.37429)*cj5);
IkReal x17410=(cj4*cj6);
IkReal x17411=(cj5*sj3);
IkReal x17412=(cj5*x17408);
IkReal x17413=(cj2*x17387);
IkReal x17414=((0.069)*x17388);
IkReal x17415=(r11*sj4*sj6);
IkReal x17416=(sj2*x17387);
IkReal x17417=((1.0)*x17388);
evalcond[0]=((((-1.0)*x17389*x17401))+(((-1.0)*r11*sj6*x17402))+((sj1*sj2*x17388))+x17413+(((-1.0)*cj5*x17389*x17400))+((r10*x17410))+(((-1.0)*x17389*x17412)));
evalcond[1]=((((-1.0)*x17389*x17403))+((r00*x17410))+(((-1.0)*cj2*x17417))+((sj1*x17416))+(((-1.0)*cj5*x17389*x17396))+(((-1.0)*cj5*x17389*x17407))+(((-1.0)*x17402*x17406)));
evalcond[2]=((((-1.0)*r00*x17392*x17397))+(((-1.0)*sj3*x17402*x17403))+(((-1.0)*cj5*r01*x17390*x17402))+(((-1.0)*cj1*x17387))+(((-1.0)*sj5*x17396*x17397))+((sj3*sj4*x17406))+((r02*x17391))+(((-1.0)*cj5*sj6*x17393*x17402))+(((-1.0)*r00*x17389*x17390)));
evalcond[3]=((((-1.0)*x17400*x17402*x17411))+((sj3*x17415))+((r12*x17391))+(((-1.0)*cj5*r11*x17390*x17402))+(((-1.0)*cj1*x17417))+(((-1.0)*sj5*x17397*x17408))+(((-1.0)*r10*x17389*x17390))+(((-1.0)*r10*x17392*x17397))+(((-1.0)*sj3*x17401*x17402)));
evalcond[4]=((((-0.069)*sj1*x17413))+(((-1.0)*x17388*x17395))+((r02*x17409))+((x17387*x17394))+(((0.01)*x17403))+(((-1.0)*px))+((x17396*x17399))+(((-1.0)*x17396*x17398))+(((0.069)*x17387))+(((-0.37429)*r00*x17392))+((x17399*x17407)));
evalcond[5]=(((x17388*x17394))+x17414+((x17387*x17395))+(((0.01)*x17401))+(((-1.0)*cj2*sj1*x17414))+(((-1.0)*py))+((r12*x17409))+(((-0.37429)*r10*x17392))+(((-1.0)*x17398*x17408))+((x17399*x17400))+((x17399*x17408)));
evalcond[6]=((((-1.0)*cj2*x17388*x17404))+(((-1.0)*x17391*x17402*x17408))+(((-1.0)*r12*x17411))+x17416+(((-1.0)*x17391*x17400*x17402))+(((-1.0)*r10*x17389*x17405))+((cj3*x17415))+(((-1.0)*cj4*x17397*x17401))+((r11*sj5*x17390))+((r10*sj3*x17392)));
evalcond[7]=((((-1.0)*r00*x17389*x17405))+((r01*sj5*x17390))+(((-1.0)*x17391*x17402*x17407))+(((-1.0)*sj2*x17417))+(((-1.0)*r02*x17411))+(((-1.0)*x17391*x17396*x17402))+(((-1.0)*cj4*x17397*x17403))+(((-1.0)*x17404*x17413))+((x17392*x17393))+((cj3*sj4*x17406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17418=(r10*sj6);
IkReal x17419=((69.0)*cj2);
IkReal x17420=(cj6*r11);
IkReal x17421=((374.29)*sj5);
IkReal x17422=((10.0)*cj5);
IkReal x17423=(cj5*sj4);
IkReal x17424=(r11*sj6);
IkReal x17425=(sj1*sj2);
IkReal x17426=((1000.0)*py);
IkReal x17427=((69.0)*sj2);
IkReal x17428=(r12*sj5);
IkReal x17429=((364.42)*cj1);
IkReal x17430=(cj4*x17429);
IkReal x17431=(sj1*x17428);
IkReal x17432=((374.29)*cj5*r12);
IkReal x17433=((69.0)*cj4*cj6*r10);
IkReal x17434=(x17423*x17429);
CheckValue<IkReal> x17435=IKPowWithIntegerCheck(IKsign(((((-69.0)*sj1))+x17419+((cj2*x17429)))),-1);
if(!x17435.valid){
continue;
}
CheckValue<IkReal> x17436 = IKatan2WithCheck(IkReal((((cj2*x17420*x17421))+(((-1.0)*cj2*x17432))+(((-10.0)*cj2*x17428))+(((-1.0)*x17418*x17423*x17427))+(((-1.0)*cj2*x17418*x17422))+((cj2*x17426))+((cj4*cj6*r10*x17427))+((cj2*x17418*x17421))+(((-1.0)*cj2*x17420*x17422))+(((-1.0)*sj4*x17427*x17428))+(((-1.0)*x17420*x17423*x17427))+(((-1.0)*cj4*x17424*x17427)))),((((-1.0)*x17420*x17421*x17425))+((x17425*x17432))+((x17418*x17422*x17425))+(((-1.0)*x17433))+(((-1.0)*cj4*sj1*x17419*x17424))+(((-1.0)*x17418*x17421*x17425))+(((69.0)*x17418*x17423))+((x17418*x17434))+(((-1.0)*sj4*x17419*x17431))+(((69.0)*x17420*x17423))+(((69.0)*sj4*x17428))+(((69.0)*cj4*x17424))+((x17420*x17434))+(((10.0)*x17425*x17428))+((x17424*x17430))+((cj4*cj6*r10*sj1*x17419))+(((-1.0)*sj1*x17419*x17420*x17423))+(((-1.0)*x17425*x17426))+(((-1.0)*sj1*x17418*x17419*x17423))+(((-1.0)*cj6*r10*x17430))+((sj4*x17428*x17429))+((x17420*x17422*x17425))),IKFAST_ATAN2_MAGTHRESH);
if(!x17436.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17435.value)))+(x17436.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17437=IKcos(j0);
IkReal x17438=IKsin(j0);
IkReal x17439=((1.0)*sj4);
IkReal x17440=(cj6*sj3);
IkReal x17441=(cj3*cj5);
IkReal x17442=(sj5*sj6);
IkReal x17443=(r00*sj3);
IkReal x17444=((0.36442)*cj1);
IkReal x17445=((0.069)*sj2);
IkReal x17446=(cj6*r01);
IkReal x17447=((1.0)*cj3);
IkReal x17448=((0.37429)*sj5);
IkReal x17449=((0.01)*cj5);
IkReal x17450=(r10*sj6);
IkReal x17451=(r12*sj5);
IkReal x17452=((1.0)*cj4);
IkReal x17453=(r02*sj5);
IkReal x17454=((1.0)*sj1);
IkReal x17455=(cj3*cj6);
IkReal x17456=(r01*sj6);
IkReal x17457=(r00*sj6);
IkReal x17458=(cj6*r11);
IkReal x17459=((0.37429)*cj5);
IkReal x17460=(cj4*cj6);
IkReal x17461=(cj5*sj3);
IkReal x17462=(cj5*x17458);
IkReal x17463=(cj2*x17437);
IkReal x17464=((0.069)*x17438);
IkReal x17465=(r11*sj4*sj6);
IkReal x17466=(sj2*x17437);
IkReal x17467=((1.0)*x17438);
evalcond[0]=((((-1.0)*r11*sj6*x17452))+(((-1.0)*cj5*x17439*x17450))+x17463+(((-1.0)*x17439*x17462))+((r10*x17460))+((sj1*sj2*x17438))+(((-1.0)*x17439*x17451)));
evalcond[1]=(((r00*x17460))+(((-1.0)*cj5*x17439*x17457))+(((-1.0)*cj2*x17467))+(((-1.0)*x17439*x17453))+(((-1.0)*x17452*x17456))+((sj1*x17466))+(((-1.0)*cj5*x17439*x17446)));
evalcond[2]=((((-1.0)*cj1*x17437))+((sj3*sj4*x17456))+((r02*x17441))+(((-1.0)*cj5*sj6*x17443*x17452))+(((-1.0)*sj3*x17452*x17453))+(((-1.0)*r00*x17442*x17447))+(((-1.0)*cj5*r01*x17440*x17452))+(((-1.0)*r00*x17439*x17440))+(((-1.0)*sj5*x17446*x17447)));
evalcond[3]=((((-1.0)*sj5*x17447*x17458))+(((-1.0)*sj3*x17451*x17452))+(((-1.0)*r10*x17442*x17447))+(((-1.0)*cj1*x17467))+((r12*x17441))+(((-1.0)*r10*x17439*x17440))+(((-1.0)*x17450*x17452*x17461))+((sj3*x17465))+(((-1.0)*cj5*r11*x17440*x17452)));
evalcond[4]=((((0.01)*x17453))+(((-1.0)*x17438*x17445))+((x17446*x17449))+((x17437*x17444))+((x17449*x17457))+(((-1.0)*px))+((r02*x17459))+(((-0.37429)*r00*x17442))+(((-0.069)*sj1*x17463))+(((-1.0)*x17446*x17448))+(((0.069)*x17437)));
evalcond[5]=((((0.01)*x17451))+((x17437*x17445))+(((-0.37429)*r10*x17442))+((x17449*x17450))+((x17449*x17458))+x17464+((x17438*x17444))+(((-1.0)*py))+(((-1.0)*cj2*sj1*x17464))+(((-1.0)*x17448*x17458))+((r12*x17459)));
evalcond[6]=((((-1.0)*x17441*x17450*x17452))+(((-1.0)*x17441*x17452*x17458))+((r11*sj5*x17440))+x17466+(((-1.0)*cj4*x17447*x17451))+(((-1.0)*r12*x17461))+((r10*sj3*x17442))+(((-1.0)*cj2*x17438*x17454))+(((-1.0)*r10*x17439*x17455))+((cj3*x17465)));
evalcond[7]=(((r01*sj5*x17440))+(((-1.0)*r02*x17461))+(((-1.0)*x17441*x17446*x17452))+(((-1.0)*x17441*x17452*x17457))+(((-1.0)*sj2*x17467))+(((-1.0)*r00*x17439*x17455))+((cj3*sj4*x17456))+(((-1.0)*cj4*x17447*x17453))+((x17442*x17443))+(((-1.0)*x17454*x17463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17468=cj1*cj1;
IkReal x17469=((1.0)*r01);
IkReal x17470=(cj5*cj6);
IkReal x17471=(r02*sj5);
IkReal x17472=(cj2*sj4);
IkReal x17473=(cj5*sj6);
IkReal x17474=(cj4*cj6);
IkReal x17475=(r12*sj5);
IkReal x17476=(cj2*cj4*sj6);
IkReal x17477=(sj1*sj2*sj4);
IkReal x17478=((1.0)*sj1*sj2);
IkReal x17479=(cj4*sj1*sj2*sj6);
CheckValue<IkReal> x17480=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x17468))+((x17468*(cj2*cj2))))),-1);
if(!x17480.valid){
continue;
}
CheckValue<IkReal> x17481 = IKatan2WithCheck(IkReal((((r11*x17479))+(((-1.0)*x17471*x17472))+(((-1.0)*r00*x17472*x17473))+((x17475*x17477))+((cj2*r00*x17474))+(((-1.0)*r10*x17474*x17478))+(((-1.0)*x17469*x17476))+((r11*x17470*x17477))+((r10*x17473*x17477))+(((-1.0)*x17469*x17470*x17472)))),(((r11*x17476))+(((-1.0)*r00*x17474*x17478))+((r00*x17473*x17477))+((r01*x17479))+((x17471*x17477))+(((-1.0)*cj2*r10*x17474))+((r01*x17470*x17477))+((r11*x17470*x17472))+((r10*x17472*x17473))+((x17472*x17475))),IKFAST_ATAN2_MAGTHRESH);
if(!x17481.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17480.value)))+(x17481.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17482=IKcos(j0);
IkReal x17483=IKsin(j0);
IkReal x17484=((1.0)*sj4);
IkReal x17485=(cj6*sj3);
IkReal x17486=(cj3*cj5);
IkReal x17487=(sj5*sj6);
IkReal x17488=(r00*sj3);
IkReal x17489=((0.36442)*cj1);
IkReal x17490=((0.069)*sj2);
IkReal x17491=(cj6*r01);
IkReal x17492=((1.0)*cj3);
IkReal x17493=((0.37429)*sj5);
IkReal x17494=((0.01)*cj5);
IkReal x17495=(r10*sj6);
IkReal x17496=(r12*sj5);
IkReal x17497=((1.0)*cj4);
IkReal x17498=(r02*sj5);
IkReal x17499=((1.0)*sj1);
IkReal x17500=(cj3*cj6);
IkReal x17501=(r01*sj6);
IkReal x17502=(r00*sj6);
IkReal x17503=(cj6*r11);
IkReal x17504=((0.37429)*cj5);
IkReal x17505=(cj4*cj6);
IkReal x17506=(cj5*sj3);
IkReal x17507=(cj5*x17503);
IkReal x17508=(cj2*x17482);
IkReal x17509=((0.069)*x17483);
IkReal x17510=(r11*sj4*sj6);
IkReal x17511=(sj2*x17482);
IkReal x17512=((1.0)*x17483);
evalcond[0]=(((r10*x17505))+(((-1.0)*x17484*x17507))+(((-1.0)*x17484*x17496))+x17508+(((-1.0)*r11*sj6*x17497))+(((-1.0)*cj5*x17484*x17495))+((sj1*sj2*x17483)));
evalcond[1]=((((-1.0)*x17497*x17501))+(((-1.0)*x17484*x17498))+(((-1.0)*cj5*x17484*x17502))+(((-1.0)*cj5*x17484*x17491))+((r00*x17505))+(((-1.0)*cj2*x17512))+((sj1*x17511)));
evalcond[2]=(((r02*x17486))+(((-1.0)*sj5*x17491*x17492))+(((-1.0)*r00*x17484*x17485))+(((-1.0)*r00*x17487*x17492))+((sj3*sj4*x17501))+(((-1.0)*sj3*x17497*x17498))+(((-1.0)*cj1*x17482))+(((-1.0)*cj5*sj6*x17488*x17497))+(((-1.0)*cj5*r01*x17485*x17497)));
evalcond[3]=((((-1.0)*sj5*x17492*x17503))+(((-1.0)*r10*x17487*x17492))+((sj3*x17510))+(((-1.0)*cj5*r11*x17485*x17497))+((r12*x17486))+(((-1.0)*sj3*x17496*x17497))+(((-1.0)*cj1*x17512))+(((-1.0)*x17495*x17497*x17506))+(((-1.0)*r10*x17484*x17485)));
evalcond[4]=(((r02*x17504))+(((0.069)*x17482))+((x17491*x17494))+(((-0.069)*sj1*x17508))+(((-0.37429)*r00*x17487))+(((-1.0)*px))+(((-1.0)*x17483*x17490))+((x17494*x17502))+(((0.01)*x17498))+((x17482*x17489))+(((-1.0)*x17491*x17493)));
evalcond[5]=(((r12*x17504))+(((-0.37429)*r10*x17487))+((x17494*x17495))+((x17482*x17490))+(((-1.0)*x17493*x17503))+(((-1.0)*cj2*sj1*x17509))+(((-1.0)*py))+x17509+((x17494*x17503))+((x17483*x17489))+(((0.01)*x17496)));
evalcond[6]=(((r10*sj3*x17487))+(((-1.0)*r10*x17484*x17500))+((r11*sj5*x17485))+(((-1.0)*r12*x17506))+x17511+(((-1.0)*cj4*x17492*x17496))+(((-1.0)*x17486*x17495*x17497))+(((-1.0)*x17486*x17497*x17503))+((cj3*x17510))+(((-1.0)*cj2*x17483*x17499)));
evalcond[7]=((((-1.0)*r02*x17506))+((x17487*x17488))+(((-1.0)*sj2*x17512))+(((-1.0)*x17486*x17491*x17497))+((r01*sj5*x17485))+((cj3*sj4*x17501))+(((-1.0)*x17499*x17508))+(((-1.0)*cj4*x17492*x17498))+(((-1.0)*x17486*x17497*x17502))+(((-1.0)*r00*x17484*x17500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17513=cj6*cj6;
IkReal x17514=r21*r21;
IkReal x17515=r20*r20;
IkReal x17516=cj5*cj5;
IkReal x17517=r22*r22;
IkReal x17518=(cj3*r21);
IkReal x17519=((1.0)*r20);
IkReal x17520=(cj6*r22);
IkReal x17521=(cj1*sj2);
IkReal x17522=(cj3*cj5);
IkReal x17523=((2.0)*sj6);
IkReal x17524=((1.0)*sj3);
IkReal x17525=(cj5*cj6);
IkReal x17526=(r22*sj5);
IkReal x17527=(cj5*sj3);
IkReal x17528=(r21*sj6);
IkReal x17529=(r20*sj5);
IkReal x17530=(cj5*sj6);
IkReal x17531=((1.0)*sj1);
IkReal x17532=(cj6*r20*sj3);
IkReal x17533=(sj3*x17516);
IkReal x17534=(sj5*x17515);
IkReal x17535=(cj3*r20*r22);
IkReal x17536=(sj5*x17514);
IkReal x17537=(cj3*cj6*sj6);
IkReal x17538=(x17513*x17515);
IkReal x17539=(sj3*x17513*x17514);
CheckValue<IkReal> x17540 = IKatan2WithCheck(IkReal((((r22*x17518*x17530))+((x17534*x17537))+(((-1.0)*sj5*x17518*x17519))+(((-1.0)*r21*x17521*x17524*x17525))+(((2.0)*x17513*x17518*x17529))+(((-1.0)*sj6*x17519*x17521*x17527))+(((-1.0)*x17536*x17537))+(((-1.0)*x17521*x17524*x17526))+(((-1.0)*x17519*x17520*x17522))+((sj1*x17528))+(((-1.0)*cj6*sj1*x17519)))),((((-1.0)*r21*x17525*x17531))+(((-1.0)*sj1*x17519*x17530))+((sj6*x17535))+((x17518*x17523*x17525*x17529))+(((-2.0)*x17516*x17518*x17520))+(((-1.0)*x17516*x17523*x17535))+(((-1.0)*x17513*x17522*x17534))+(((-1.0)*sj5*x17517*x17522))+((x17518*x17520))+((x17522*x17534))+(((-1.0)*x17521*x17524*x17528))+(((-1.0)*x17526*x17531))+((x17521*x17532))+((x17513*x17522*x17536))),IKFAST_ATAN2_MAGTHRESH);
if(!x17540.valid){
continue;
}
CheckValue<IkReal> x17541=IKPowWithIntegerCheck(IKsign(((((-1.0)*x17514*x17524))+(((-1.0)*x17513*x17514*x17516*x17524))+((r21*x17523*x17532))+(((-1.0)*r21*x17516*x17523*x17532))+((x17517*x17533))+x17539+(((-1.0)*x17524*x17538))+(((-1.0)*r20*x17523*x17526*x17527))+(((-1.0)*x17517*x17524))+(((-1.0)*x17515*x17516*x17524))+(((-2.0)*r21*sj5*x17520*x17527))+((x17533*x17538)))),-1);
if(!x17541.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x17540.value)+(((1.5707963267949)*(x17541.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x17542=IKsin(j4);
IkReal x17543=IKcos(j4);
IkReal x17544=(cj3*r21);
IkReal x17545=((1.0)*sj5);
IkReal x17546=(r21*sj3);
IkReal x17547=((1.0)*cj5);
IkReal x17548=(r22*sj3);
IkReal x17549=(cj6*r20);
IkReal x17550=(cj3*r22);
IkReal x17551=(sj6*x17542);
IkReal x17552=(r20*sj3*sj6);
IkReal x17553=(cj3*r20*sj6);
IkReal x17554=((1.0)*x17542);
IkReal x17555=(x17543*x17547);
evalcond[0]=((((-1.0)*r22*x17542*x17545))+((cj1*sj2))+((x17543*x17549))+(((-1.0)*cj6*r21*x17542*x17547))+(((-1.0)*r21*sj6*x17543))+(((-1.0)*r20*x17547*x17551)));
evalcond[1]=((((-1.0)*sj3*x17549*x17554))+sj1+(((-1.0)*x17545*x17553))+((x17546*x17551))+((cj5*x17550))+(((-1.0)*cj6*x17544*x17545))+(((-1.0)*x17552*x17555))+(((-1.0)*cj6*x17546*x17555))+(((-1.0)*x17543*x17545*x17548)));
evalcond[2]=(((cj6*sj5*x17546))+((x17544*x17551))+((sj5*x17552))+(((-1.0)*cj1*cj2))+(((-1.0)*x17547*x17548))+(((-1.0)*x17553*x17555))+(((-1.0)*cj3*x17549*x17554))+(((-1.0)*cj6*x17544*x17555))+(((-1.0)*x17543*x17545*x17550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x17556=cj1*cj1;
IkReal x17557=((1.0)+(((-1.0)*x17556))+((x17556*(cj2*cj2))));
j0eval[0]=x17557;
j0eval[1]=IKsign(x17557);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x17558=(cj1*cj2);
j0eval[0]=((((-1.0)*sj1))+cj2+(((5.28144927536232)*x17558)));
j0eval[1]=IKsign(((((364.42)*x17558))+(((-69.0)*sj1))+(((69.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x17559=cj1*cj1;
IkReal x17560=(sj1*sj2);
IkReal x17561=((5.28144927536232)*cj1);
IkReal x17562=(cj2*x17559);
j0eval[0]=(((x17560*x17561))+((sj2*x17562))+x17560);
j0eval[1]=((((-1.0)*x17562))+(((-1.0)*sj1))+(((-1.0)*sj1*x17561)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x17563=(cj6*r21);
IkReal x17564=(cj3*r22);
IkReal x17565=(cj3*sj4);
IkReal x17566=(r21*sj6);
IkReal x17567=(r20*sj6);
IkReal x17568=(sj3*sj5);
IkReal x17569=((1.0)*sj5);
IkReal x17570=((0.01)*cj5);
IkReal x17571=(sj3*sj4);
IkReal x17572=((1.0)*cj5);
IkReal x17573=(cj3*cj4);
IkReal x17574=((1.0)*cj4);
IkReal x17575=((0.37429)*sj5);
IkReal x17576=((1.0)*cj6*r20);
IkReal x17577=(cj4*sj3*x17572);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x17567*x17572))+((cj4*cj6*r20))+(((-1.0)*sj4*x17563*x17572))+(((-1.0)*r22*sj4*x17569))+(((-1.0)*x17566*x17574)));
evalcond[2]=((((-0.069)*cj1))+((x17563*x17570))+(((-1.0)*x17567*x17575))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17567*x17570))+(((0.37429)*cj5*r22))+(((-1.0)*x17563*x17575))+(((-0.36442)*sj1)));
evalcond[3]=(((x17566*x17571))+sj1+((cj5*x17564))+(((-1.0)*x17567*x17577))+(((-1.0)*x17571*x17576))+(((-1.0)*cj3*x17563*x17569))+(((-1.0)*cj3*x17567*x17569))+(((-1.0)*r22*x17568*x17574))+(((-1.0)*x17563*x17577)));
evalcond[4]=(((x17563*x17568))+(((-1.0)*x17567*x17572*x17573))+(((-1.0)*r22*sj3*x17572))+(((-1.0)*cj4*x17564*x17569))+(((-1.0)*x17565*x17576))+((x17567*x17568))+((x17565*x17566))+(((-1.0)*cj1))+(((-1.0)*x17563*x17572*x17573)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17578=(cj4*sj6);
IkReal x17579=((1.0)*r01);
IkReal x17580=(cj5*sj4);
IkReal x17581=(sj4*sj5);
IkReal x17582=(cj4*cj6);
if( IKabs(((((-1.0)*r00*sj6*x17580))+((r00*x17582))+(((-1.0)*cj6*x17579*x17580))+(((-1.0)*r02*x17581))+(((-1.0)*x17578*x17579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x17582))+((r12*x17581))+((r11*x17578))+((r10*sj6*x17580))+((cj6*r11*x17580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj6*x17580))+((r00*x17582))+(((-1.0)*cj6*x17579*x17580))+(((-1.0)*r02*x17581))+(((-1.0)*x17578*x17579))))+IKsqr(((((-1.0)*r10*x17582))+((r12*x17581))+((r11*x17578))+((r10*sj6*x17580))+((cj6*r11*x17580))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj6*x17580))+((r00*x17582))+(((-1.0)*cj6*x17579*x17580))+(((-1.0)*r02*x17581))+(((-1.0)*x17578*x17579))), ((((-1.0)*r10*x17582))+((r12*x17581))+((r11*x17578))+((r10*sj6*x17580))+((cj6*r11*x17580))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17583=IKcos(j0);
IkReal x17584=IKsin(j0);
IkReal x17585=((1.0)*sj4);
IkReal x17586=(cj6*r10);
IkReal x17587=(sj5*sj6);
IkReal x17588=(cj3*cj5);
IkReal x17589=(r00*sj3);
IkReal x17590=((0.36442)*cj1);
IkReal x17591=(cj6*r01);
IkReal x17592=((1.0)*cj3);
IkReal x17593=((0.01)*cj5);
IkReal x17594=(r10*sj6);
IkReal x17595=(r12*sj5);
IkReal x17596=(sj3*sj5);
IkReal x17597=(r02*sj5);
IkReal x17598=(cj6*r00);
IkReal x17599=((1.0)*cj4);
IkReal x17600=(r00*sj6);
IkReal x17601=((0.37429)*cj5);
IkReal x17602=(cj6*r11);
IkReal x17603=((0.37429)*sj5);
IkReal x17604=(cj5*x17602);
IkReal x17605=((0.069)*x17584);
IkReal x17606=(r11*sj4*sj6);
IkReal x17607=(sj3*x17599);
IkReal x17608=(r01*sj4*sj6);
IkReal x17609=((1.0)*x17584);
IkReal x17610=((1.0)*x17583);
IkReal x17611=((0.069)*x17583);
IkReal x17612=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*r11*sj6*x17599))+(((-1.0)*x17585*x17595))+x17583+((cj4*x17586))+(((-1.0)*x17585*x17604))+(((-1.0)*cj5*x17585*x17594)));
evalcond[1]=((((-1.0)*x17585*x17597))+(((-1.0)*cj5*x17585*x17600))+(((-1.0)*x17609))+(((-1.0)*r01*sj6*x17599))+((cj4*x17598))+(((-1.0)*cj5*x17585*x17591)));
evalcond[2]=(((x17591*x17593))+(((-1.0)*x17591*x17603))+((x17583*x17590))+(((-1.0)*sj1*x17611))+((x17593*x17600))+((r02*x17601))+(((-1.0)*px))+x17611+(((-0.37429)*r00*x17587))+(((0.01)*x17597)));
evalcond[3]=((((-1.0)*sj1*x17605))+(((-1.0)*x17602*x17603))+((x17593*x17594))+((x17584*x17590))+((x17593*x17602))+(((-1.0)*py))+x17605+((r12*x17601))+(((0.01)*x17595))+(((-0.37429)*r10*x17587)));
evalcond[4]=((((-1.0)*sj1*x17609))+(((-1.0)*x17588*x17594*x17599))+((r10*sj3*x17587))+((cj3*x17606))+(((-1.0)*cj4*x17592*x17595))+(((-1.0)*x17588*x17599*x17602))+((x17596*x17602))+(((-1.0)*r12*x17612))+(((-1.0)*cj3*x17585*x17586)));
evalcond[5]=(((x17591*x17596))+(((-1.0)*cj3*x17585*x17598))+(((-1.0)*sj1*x17610))+((cj3*x17608))+(((-1.0)*cj4*x17592*x17597))+((x17587*x17589))+(((-1.0)*r02*x17612))+(((-1.0)*x17588*x17599*x17600))+(((-1.0)*x17588*x17591*x17599)));
evalcond[6]=((((-1.0)*r00*x17587*x17592))+(((-1.0)*sj5*x17591*x17592))+(((-1.0)*cj1*x17610))+(((-1.0)*cj5*x17591*x17607))+((r02*x17588))+(((-1.0)*r02*x17596*x17599))+(((-1.0)*cj6*x17585*x17589))+((sj3*x17608))+(((-1.0)*cj5*sj6*x17589*x17599)));
evalcond[7]=((((-1.0)*sj5*x17592*x17602))+(((-1.0)*r10*x17587*x17592))+((r12*x17588))+(((-1.0)*cj5*x17594*x17607))+(((-1.0)*x17595*x17607))+(((-1.0)*sj3*x17585*x17586))+((sj3*x17606))+(((-1.0)*cj1*x17609))+(((-1.0)*x17604*x17607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17613=(cj6*r21);
IkReal x17614=(cj3*r22);
IkReal x17615=(cj3*sj4);
IkReal x17616=(r21*sj6);
IkReal x17617=(r20*sj6);
IkReal x17618=(sj3*sj5);
IkReal x17619=((1.0)*sj5);
IkReal x17620=((0.01)*cj5);
IkReal x17621=(sj3*sj4);
IkReal x17622=((1.0)*cj5);
IkReal x17623=(cj3*cj4);
IkReal x17624=((1.0)*cj4);
IkReal x17625=((0.37429)*sj5);
IkReal x17626=((1.0)*cj6*r20);
IkReal x17627=(cj4*sj3*x17622);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*cj6*r20))+(((-1.0)*x17616*x17624))+(((-1.0)*sj4*x17617*x17622))+(((-1.0)*r22*sj4*x17619))+(((-1.0)*sj4*x17613*x17622)));
evalcond[2]=((((-1.0)*x17613*x17625))+(((0.069)*cj1))+((x17617*x17620))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17617*x17625))+((x17613*x17620))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*x17613*x17627))+(((-1.0)*x17621*x17626))+(((-1.0)*cj3*x17617*x17619))+((cj5*x17614))+(((-1.0)*x17617*x17627))+(((-1.0)*cj3*x17613*x17619))+((x17616*x17621))+(((-1.0)*r22*x17618*x17624)));
evalcond[4]=(cj1+(((-1.0)*x17613*x17622*x17623))+((x17613*x17618))+(((-1.0)*r22*sj3*x17622))+(((-1.0)*x17615*x17626))+((x17615*x17616))+(((-1.0)*x17617*x17622*x17623))+((x17617*x17618))+(((-1.0)*cj4*x17614*x17619)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17628=((1.0)*cj4);
IkReal x17629=(sj4*sj5);
IkReal x17630=(cj5*sj4*sj6);
IkReal x17631=(cj5*cj6*sj4);
if( IKabs(((((-1.0)*cj6*r00*x17628))+((r02*x17629))+((r01*x17631))+((r00*x17630))+((cj4*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x17630))+(((-1.0)*r11*sj6*x17628))+(((-1.0)*r12*x17629))+(((-1.0)*r11*x17631))+((cj4*cj6*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r00*x17628))+((r02*x17629))+((r01*x17631))+((r00*x17630))+((cj4*r01*sj6))))+IKsqr(((((-1.0)*r10*x17630))+(((-1.0)*r11*sj6*x17628))+(((-1.0)*r12*x17629))+(((-1.0)*r11*x17631))+((cj4*cj6*r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj6*r00*x17628))+((r02*x17629))+((r01*x17631))+((r00*x17630))+((cj4*r01*sj6))), ((((-1.0)*r10*x17630))+(((-1.0)*r11*sj6*x17628))+(((-1.0)*r12*x17629))+(((-1.0)*r11*x17631))+((cj4*cj6*r10))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17632=IKcos(j0);
IkReal x17633=IKsin(j0);
IkReal x17634=((1.0)*sj4);
IkReal x17635=(cj6*sj3);
IkReal x17636=(sj5*sj6);
IkReal x17637=(cj3*cj5);
IkReal x17638=(r00*sj3);
IkReal x17639=((0.36442)*cj1);
IkReal x17640=(cj5*r01);
IkReal x17641=((1.0)*cj3);
IkReal x17642=(r10*sj6);
IkReal x17643=((0.01)*cj5);
IkReal x17644=(r12*sj5);
IkReal x17645=(r01*sj5);
IkReal x17646=((1.0)*cj4);
IkReal x17647=(r02*sj5);
IkReal x17648=(cj3*cj6);
IkReal x17649=(r00*sj6);
IkReal x17650=((0.37429)*cj5);
IkReal x17651=(cj4*cj6);
IkReal x17652=(r11*sj5);
IkReal x17653=(cj5*sj3);
IkReal x17654=((0.37429)*cj6);
IkReal x17655=(cj5*cj6*r11);
IkReal x17656=((0.069)*x17633);
IkReal x17657=(r11*sj4*sj6);
IkReal x17658=(r01*sj4*sj6);
IkReal x17659=((1.0)*x17632);
IkReal x17660=((0.069)*x17632);
evalcond[0]=((((-1.0)*x17634*x17647))+(((-1.0)*cj6*x17634*x17640))+(((-1.0)*r01*sj6*x17646))+((r00*x17651))+x17633+(((-1.0)*cj5*x17634*x17649)));
evalcond[1]=((((-1.0)*x17634*x17655))+(((-1.0)*x17634*x17644))+(((-1.0)*r11*sj6*x17646))+(((-1.0)*x17659))+((r10*x17651))+(((-1.0)*cj5*x17634*x17642)));
evalcond[2]=(((r02*x17650))+(((-1.0)*x17645*x17654))+(((-0.37429)*r00*x17636))+(((0.01)*cj6*x17640))+((x17643*x17649))+((sj1*x17660))+(((0.01)*x17647))+(((-1.0)*px))+x17660+((x17632*x17639)));
evalcond[3]=(((r12*x17650))+(((0.01)*x17644))+((x17642*x17643))+((cj6*r11*x17643))+(((-1.0)*py))+((x17633*x17639))+x17656+(((-0.37429)*r10*x17636))+(((-1.0)*x17652*x17654))+((sj1*x17656)));
evalcond[4]=((((-1.0)*x17637*x17642*x17646))+(((-1.0)*cj4*x17641*x17644))+((x17635*x17652))+((sj1*x17633))+((cj3*x17657))+(((-1.0)*r10*x17634*x17648))+((r10*sj3*x17636))+(((-1.0)*r12*x17653))+(((-1.0)*cj6*r11*x17637*x17646)));
evalcond[5]=((((-1.0)*cj6*r01*x17637*x17646))+(((-1.0)*cj4*x17641*x17647))+((x17635*x17645))+((sj1*x17632))+((cj3*x17658))+((x17636*x17638))+(((-1.0)*r02*x17653))+(((-1.0)*x17637*x17646*x17649))+(((-1.0)*r00*x17634*x17648)));
evalcond[6]=((((-1.0)*cj6*x17641*x17645))+(((-1.0)*r00*x17634*x17635))+((sj3*x17658))+((r02*x17637))+(((-1.0)*sj3*x17646*x17647))+(((-1.0)*r00*x17636*x17641))+(((-1.0)*cj1*x17659))+(((-1.0)*cj5*sj6*x17638*x17646))+(((-1.0)*x17635*x17640*x17646)));
evalcond[7]=((((-1.0)*sj3*x17644*x17646))+(((-1.0)*r10*x17636*x17641))+(((-1.0)*cj6*x17641*x17652))+(((-1.0)*cj5*r11*x17635*x17646))+(((-1.0)*x17642*x17646*x17653))+((sj3*x17657))+((r12*x17637))+(((-1.0)*r10*x17634*x17635))+(((-1.0)*cj1*x17633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17661=(cj4*sj3);
IkReal x17662=(cj3*r22);
IkReal x17663=(cj3*sj4);
IkReal x17664=(r21*sj6);
IkReal x17665=(r20*sj6);
IkReal x17666=((1.0)*cj5);
IkReal x17667=(sj3*sj5);
IkReal x17668=((1.0)*sj5);
IkReal x17669=(cj6*r21);
IkReal x17670=((0.01)*cj5);
IkReal x17671=(sj3*sj4);
IkReal x17672=(cj3*cj4);
IkReal x17673=(cj4*cj6);
IkReal x17674=((1.0)*cj4);
IkReal x17675=(sj4*sj6);
IkReal x17676=((0.37429)*sj5);
IkReal x17677=(cj6*x17666);
IkReal x17678=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x17673))+(((-1.0)*r22*sj4*x17668))+(((-1.0)*x17664*x17674))+(((-1.0)*sj4*x17665*x17666))+(((-1.0)*sj4*x17666*x17669)));
evalcond[2]=((((-1.0)*x17669*x17676))+((x17665*x17670))+(((-1.0)*x17665*x17676))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17669*x17670))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r12*sj4*x17668))+(((-1.0)*r11*sj6*x17674))+((r10*x17673))+(((-1.0)*r11*sj4*x17677))+(((-1.0)*r10*x17666*x17675)));
evalcond[4]=((((-1.0)*r00*x17666*x17675))+(((-1.0)*r01*sj6*x17674))+((r00*x17673))+(((-1.0)*r01*sj4*x17677))+(((-1.0)*r02*sj4*x17668)));
evalcond[5]=(((x17664*x17671))+(((-1.0)*x17671*x17678))+(((-1.0)*x17661*x17665*x17666))+(((-1.0)*x17661*x17666*x17669))+(((-1.0)*cj3*x17665*x17668))+(((-1.0)*r22*x17661*x17668))+(((-1.0)*cj3*x17668*x17669))+((cj5*x17662)));
evalcond[6]=((((-1.0)*x17666*x17669*x17672))+(((-1.0)*cj4*x17662*x17668))+(((-1.0)*r22*sj3*x17666))+((x17667*x17669))+((x17665*x17667))+((x17663*x17664))+(((-1.0)*x17663*x17678))+(((-1.0)*x17665*x17666*x17672)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17679=((0.842227766698146)*sj5);
IkReal x17680=(r10*sj6);
IkReal x17681=(cj6*r01);
IkReal x17682=((0.00358229604870815)*cj5);
IkReal x17683=(cj6*r11);
IkReal x17684=((0.0225020109192911)*sj5);
IkReal x17685=((0.134081758807097)*sj5);
IkReal x17686=(r00*sj6);
IkReal x17687=((0.134081758807097)*cj5);
IkReal x17688=((0.0225020109192911)*cj5);
IkReal x17689=((0.842227766698146)*cj5);
IkReal x17690=((0.00358229604870815)*sj5);
if( IKabs((((x17681*x17682))+((r02*x17690))+(((-1.0)*x17683*x17688))+((x17679*x17680))+((x17679*x17683))+(((-1.0)*r12*x17689))+(((-1.0)*r12*x17684))+(((2.25020109192911)*py))+((x17682*x17686))+(((-0.358229604870815)*px))+(((-1.0)*x17685*x17686))+((r02*x17687))+(((-1.0)*x17681*x17685))+(((-1.0)*x17680*x17688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x17683*x17685))+((x17679*x17681))+((x17679*x17686))+(((-1.0)*r12*x17687))+(((2.25020109192911)*px))+(((-1.0)*r12*x17690))+((x17680*x17685))+(((0.358229604870815)*py))+(((-1.0)*r02*x17684))+(((-1.0)*r02*x17689))+(((-1.0)*x17681*x17688))+(((-1.0)*x17686*x17688))+(((-1.0)*x17680*x17682))+(((-1.0)*x17682*x17683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x17681*x17682))+((r02*x17690))+(((-1.0)*x17683*x17688))+((x17679*x17680))+((x17679*x17683))+(((-1.0)*r12*x17689))+(((-1.0)*r12*x17684))+(((2.25020109192911)*py))+((x17682*x17686))+(((-0.358229604870815)*px))+(((-1.0)*x17685*x17686))+((r02*x17687))+(((-1.0)*x17681*x17685))+(((-1.0)*x17680*x17688))))+IKsqr((((x17683*x17685))+((x17679*x17681))+((x17679*x17686))+(((-1.0)*r12*x17687))+(((2.25020109192911)*px))+(((-1.0)*r12*x17690))+((x17680*x17685))+(((0.358229604870815)*py))+(((-1.0)*r02*x17684))+(((-1.0)*r02*x17689))+(((-1.0)*x17681*x17688))+(((-1.0)*x17686*x17688))+(((-1.0)*x17680*x17682))+(((-1.0)*x17682*x17683))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x17681*x17682))+((r02*x17690))+(((-1.0)*x17683*x17688))+((x17679*x17680))+((x17679*x17683))+(((-1.0)*r12*x17689))+(((-1.0)*r12*x17684))+(((2.25020109192911)*py))+((x17682*x17686))+(((-0.358229604870815)*px))+(((-1.0)*x17685*x17686))+((r02*x17687))+(((-1.0)*x17681*x17685))+(((-1.0)*x17680*x17688))), (((x17683*x17685))+((x17679*x17681))+((x17679*x17686))+(((-1.0)*r12*x17687))+(((2.25020109192911)*px))+(((-1.0)*r12*x17690))+((x17680*x17685))+(((0.358229604870815)*py))+(((-1.0)*r02*x17684))+(((-1.0)*r02*x17689))+(((-1.0)*x17681*x17688))+(((-1.0)*x17686*x17688))+(((-1.0)*x17680*x17682))+(((-1.0)*x17682*x17683))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17691=IKsin(j0);
IkReal x17692=IKcos(j0);
IkReal x17693=(r10*sj3);
IkReal x17694=(cj3*r00);
IkReal x17695=(sj5*sj6);
IkReal x17696=(cj5*r12);
IkReal x17697=(r00*sj3);
IkReal x17698=(cj3*r10);
IkReal x17699=(cj5*sj6);
IkReal x17700=((1.0)*cj4);
IkReal x17701=(cj5*r02);
IkReal x17702=(cj3*r01);
IkReal x17703=(sj4*sj6);
IkReal x17704=(r12*sj5);
IkReal x17705=(cj6*sj5);
IkReal x17706=(r01*sj3);
IkReal x17707=(r11*sj3);
IkReal x17708=((1.0)*sj3);
IkReal x17709=(r02*sj5);
IkReal x17710=(cj5*cj6);
IkReal x17711=(cj3*r11);
IkReal x17712=((1.0)*x17691);
IkReal x17713=((1.0)*cj6*sj4);
IkReal x17714=(r11*x17703);
IkReal x17715=((0.01)*x17710);
evalcond[0]=((((0.43342)*x17692))+(((0.37429)*x17701))+(((-0.069)*x17691))+(((-1.0)*px))+((r01*x17715))+(((-0.37429)*r01*x17705))+(((0.01)*r00*x17699))+(((0.01)*x17709))+(((-0.37429)*r00*x17695)));
evalcond[1]=((((0.43342)*x17691))+(((0.01)*r10*x17699))+(((0.069)*x17692))+((r11*x17715))+(((0.37429)*x17696))+(((-1.0)*py))+(((0.01)*x17704))+(((-0.37429)*r11*x17705))+(((-0.37429)*r10*x17695)));
evalcond[2]=(((x17693*x17695))+(((-1.0)*cj3*x17700*x17704))+((x17703*x17711))+(((-1.0)*x17700*x17710*x17711))+(((-1.0)*x17698*x17699*x17700))+x17692+(((-1.0)*x17696*x17708))+(((-1.0)*x17698*x17713))+((x17705*x17707)));
evalcond[3]=((((-1.0)*x17700*x17702*x17710))+(((-1.0)*x17694*x17713))+(((-1.0)*x17701*x17708))+(((-1.0)*cj3*x17700*x17709))+((x17702*x17703))+(((-1.0)*x17712))+(((-1.0)*x17694*x17699*x17700))+((x17705*x17706))+((x17695*x17697)));
evalcond[4]=((((-1.0)*x17694*x17695))+(((-1.0)*x17692))+(((-1.0)*x17702*x17705))+((x17703*x17706))+(((-1.0)*x17700*x17706*x17710))+(((-1.0)*sj3*x17700*x17709))+(((-1.0)*x17697*x17699*x17700))+(((-1.0)*x17697*x17713))+((cj3*x17701)));
evalcond[5]=((((-1.0)*x17693*x17699*x17700))+(((-1.0)*x17693*x17713))+((x17703*x17707))+(((-1.0)*x17700*x17707*x17710))+(((-1.0)*sj3*x17700*x17704))+((cj3*x17696))+(((-1.0)*x17695*x17698))+(((-1.0)*x17712))+(((-1.0)*x17705*x17711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17716=(cj4*sj3);
IkReal x17717=(cj3*r22);
IkReal x17718=(cj3*sj4);
IkReal x17719=(r21*sj6);
IkReal x17720=(r20*sj6);
IkReal x17721=((1.0)*cj5);
IkReal x17722=(sj3*sj5);
IkReal x17723=((1.0)*sj5);
IkReal x17724=(cj6*r21);
IkReal x17725=((0.01)*cj5);
IkReal x17726=(sj3*sj4);
IkReal x17727=(cj3*cj4);
IkReal x17728=(cj4*cj6);
IkReal x17729=((1.0)*cj4);
IkReal x17730=(sj4*sj6);
IkReal x17731=((0.37429)*sj5);
IkReal x17732=(cj6*x17721);
IkReal x17733=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x17719*x17729))+(((-1.0)*r22*sj4*x17723))+(((-1.0)*sj4*x17720*x17721))+((r20*x17728))+(((-1.0)*sj4*x17721*x17724)));
evalcond[2]=(((x17724*x17725))+((x17720*x17725))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17724*x17731))+(((0.37429)*cj5*r22))+(((-1.0)*x17720*x17731)));
evalcond[3]=((((-1.0)*r10*x17721*x17730))+(((-1.0)*r11*sj4*x17732))+(((-1.0)*r12*sj4*x17723))+(((-1.0)*r11*sj6*x17729))+((r10*x17728)));
evalcond[4]=((((-1.0)*r00*x17721*x17730))+(((-1.0)*r02*sj4*x17723))+(((-1.0)*r01*sj4*x17732))+(((-1.0)*r01*sj6*x17729))+((r00*x17728)));
evalcond[5]=((((-1.0)*cj3*x17723*x17724))+(((-1.0)*x17716*x17720*x17721))+((cj5*x17717))+(((-1.0)*cj3*x17720*x17723))+(((-1.0)*r22*x17716*x17723))+(((-1.0)*x17716*x17721*x17724))+(((-1.0)*x17726*x17733))+((x17719*x17726)));
evalcond[6]=((((-1.0)*cj4*x17717*x17723))+((x17718*x17719))+(((-1.0)*x17718*x17733))+(((-1.0)*x17721*x17724*x17727))+((x17722*x17724))+((x17720*x17722))+(((-1.0)*x17720*x17721*x17727))+(((-1.0)*r22*sj3*x17721)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17734=((0.842227766698146)*sj5);
IkReal x17735=(r10*sj6);
IkReal x17736=(cj6*r01);
IkReal x17737=((0.00358229604870815)*cj5);
IkReal x17738=(cj6*r11);
IkReal x17739=((0.0225020109192911)*sj5);
IkReal x17740=((0.134081758807097)*sj5);
IkReal x17741=(r00*sj6);
IkReal x17742=((0.134081758807097)*cj5);
IkReal x17743=((0.0225020109192911)*cj5);
IkReal x17744=((0.842227766698146)*cj5);
IkReal x17745=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*r12*x17744))+((x17734*x17738))+((x17734*x17735))+((x17736*x17740))+(((2.25020109192911)*py))+(((-1.0)*r12*x17739))+(((-1.0)*r02*x17742))+(((-1.0)*r02*x17745))+(((-1.0)*x17736*x17737))+(((0.358229604870815)*px))+(((-1.0)*x17737*x17741))+(((-1.0)*x17735*x17743))+((x17740*x17741))+(((-1.0)*x17738*x17743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x17737*x17738))+((x17734*x17736))+(((2.25020109192911)*px))+((x17734*x17741))+((x17735*x17737))+(((-1.0)*r02*x17744))+(((-0.358229604870815)*py))+(((-1.0)*x17741*x17743))+(((-1.0)*r02*x17739))+((r12*x17745))+((r12*x17742))+(((-1.0)*x17735*x17740))+(((-1.0)*x17736*x17743))+(((-1.0)*x17738*x17740)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x17744))+((x17734*x17738))+((x17734*x17735))+((x17736*x17740))+(((2.25020109192911)*py))+(((-1.0)*r12*x17739))+(((-1.0)*r02*x17742))+(((-1.0)*r02*x17745))+(((-1.0)*x17736*x17737))+(((0.358229604870815)*px))+(((-1.0)*x17737*x17741))+(((-1.0)*x17735*x17743))+((x17740*x17741))+(((-1.0)*x17738*x17743))))+IKsqr((((x17737*x17738))+((x17734*x17736))+(((2.25020109192911)*px))+((x17734*x17741))+((x17735*x17737))+(((-1.0)*r02*x17744))+(((-0.358229604870815)*py))+(((-1.0)*x17741*x17743))+(((-1.0)*r02*x17739))+((r12*x17745))+((r12*x17742))+(((-1.0)*x17735*x17740))+(((-1.0)*x17736*x17743))+(((-1.0)*x17738*x17740))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x17744))+((x17734*x17738))+((x17734*x17735))+((x17736*x17740))+(((2.25020109192911)*py))+(((-1.0)*r12*x17739))+(((-1.0)*r02*x17742))+(((-1.0)*r02*x17745))+(((-1.0)*x17736*x17737))+(((0.358229604870815)*px))+(((-1.0)*x17737*x17741))+(((-1.0)*x17735*x17743))+((x17740*x17741))+(((-1.0)*x17738*x17743))), (((x17737*x17738))+((x17734*x17736))+(((2.25020109192911)*px))+((x17734*x17741))+((x17735*x17737))+(((-1.0)*r02*x17744))+(((-0.358229604870815)*py))+(((-1.0)*x17741*x17743))+(((-1.0)*r02*x17739))+((r12*x17745))+((r12*x17742))+(((-1.0)*x17735*x17740))+(((-1.0)*x17736*x17743))+(((-1.0)*x17738*x17740))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17746=IKsin(j0);
IkReal x17747=IKcos(j0);
IkReal x17748=(r10*sj3);
IkReal x17749=(cj3*r00);
IkReal x17750=(sj5*sj6);
IkReal x17751=(cj5*r12);
IkReal x17752=(r00*sj3);
IkReal x17753=((1.0)*cj3);
IkReal x17754=(cj5*r02);
IkReal x17755=((0.01)*cj5);
IkReal x17756=(r10*sj6);
IkReal x17757=(cj6*r11);
IkReal x17758=(cj4*cj5);
IkReal x17759=((1.0)*sj3);
IkReal x17760=(cj6*r01);
IkReal x17761=((1.0)*sj6);
IkReal x17762=((0.01)*sj5);
IkReal x17763=((1.0)*x17747);
IkReal x17764=((1.0)*cj6*sj4);
IkReal x17765=(sj5*x17760);
IkReal x17766=(r11*sj4*sj6);
IkReal x17767=(cj4*r12*sj5);
IkReal x17768=(r01*sj4*sj6);
IkReal x17769=(cj4*r02*sj5);
evalcond[0]=(((r02*x17762))+(((0.069)*x17746))+((x17755*x17760))+(((-0.37429)*r00*x17750))+(((-0.37429)*x17765))+(((-1.0)*px))+(((0.43342)*x17747))+((r00*sj6*x17755))+(((0.37429)*x17754)));
evalcond[1]=((((-0.37429)*r10*x17750))+(((-0.37429)*sj5*x17757))+(((-0.069)*x17747))+((x17755*x17757))+((x17755*x17756))+(((-1.0)*py))+(((0.43342)*x17746))+(((0.37429)*x17751))+((r12*x17762)));
evalcond[2]=((((-1.0)*x17749*x17764))+(((-1.0)*x17753*x17758*x17760))+(((-1.0)*x17754*x17759))+((x17750*x17752))+(((-1.0)*x17749*x17758*x17761))+(((-1.0)*x17753*x17769))+x17746+((cj3*x17768))+((sj3*x17765)));
evalcond[3]=(((x17748*x17750))+(((-1.0)*x17753*x17757*x17758))+(((-1.0)*x17753*x17767))+(((-1.0)*x17753*x17756*x17758))+(((-1.0)*x17763))+(((-1.0)*x17751*x17759))+((cj3*x17766))+(((-1.0)*cj6*r10*sj4*x17753))+((sj3*sj5*x17757)));
evalcond[4]=(((cj3*x17754))+(((-1.0)*x17759*x17769))+(((-1.0)*x17749*x17750))+(((-1.0)*x17758*x17759*x17760))+(((-1.0)*x17753*x17765))+(((-1.0)*x17752*x17758*x17761))+(((-1.0)*x17752*x17764))+(((-1.0)*x17763))+((sj3*x17768)));
evalcond[5]=(((cj3*x17751))+(((-1.0)*x17746))+(((-1.0)*x17748*x17764))+(((-1.0)*x17759*x17767))+(((-1.0)*x17757*x17758*x17759))+(((-1.0)*sj5*x17753*x17757))+(((-1.0)*x17748*x17758*x17761))+((sj3*x17766))+(((-1.0)*r10*x17750*x17753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17770=(cj4*sj3);
IkReal x17771=(cj3*r22);
IkReal x17772=(cj3*sj4);
IkReal x17773=(r21*sj6);
IkReal x17774=(r20*sj6);
IkReal x17775=((1.0)*cj5);
IkReal x17776=(sj3*sj5);
IkReal x17777=((1.0)*sj5);
IkReal x17778=(cj6*r21);
IkReal x17779=((0.01)*cj5);
IkReal x17780=(sj3*sj4);
IkReal x17781=(cj3*cj4);
IkReal x17782=(cj4*cj6);
IkReal x17783=((1.0)*cj4);
IkReal x17784=(sj4*sj6);
IkReal x17785=((0.37429)*sj5);
IkReal x17786=(cj6*x17775);
IkReal x17787=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x17774*x17775))+(((-1.0)*sj4*x17775*x17778))+(((-1.0)*x17773*x17783))+((r20*x17782))+(((-1.0)*r22*sj4*x17777)));
evalcond[2]=((((-1.0)*x17778*x17785))+(((-1.0)*x17774*x17785))+(((0.01)*r22*sj5))+((x17778*x17779))+(((-1.0)*pz))+((x17774*x17779))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj6*x17783))+(((-1.0)*r12*sj4*x17777))+(((-1.0)*r11*sj4*x17786))+((r10*x17782))+(((-1.0)*r10*x17775*x17784)));
evalcond[4]=((((-1.0)*r01*sj6*x17783))+(((-1.0)*r02*sj4*x17777))+((r00*x17782))+(((-1.0)*r01*sj4*x17786))+(((-1.0)*r00*x17775*x17784)));
evalcond[5]=(((x17773*x17780))+((cj5*x17771))+(((-1.0)*cj3*x17777*x17778))+(((-1.0)*r22*x17770*x17777))+(((-1.0)*x17770*x17774*x17775))+(((-1.0)*x17770*x17775*x17778))+(((-1.0)*x17780*x17787))+(((-1.0)*cj3*x17774*x17777)));
evalcond[6]=(((x17772*x17773))+(((-1.0)*r22*sj3*x17775))+((x17776*x17778))+((x17774*x17776))+(((-1.0)*x17775*x17778*x17781))+(((-1.0)*x17774*x17775*x17781))+(((-1.0)*cj4*x17771*x17777))+(((-1.0)*x17772*x17787)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17788=((0.0320990151198118)*sj5);
IkReal x17789=((0.00749723120732182)*sj5);
IkReal x17790=(cj6*r01);
IkReal x17791=((0.00749723120732182)*cj5);
IkReal x17792=(r00*sj6);
IkReal x17793=((1.20143403691943)*sj5);
IkReal x17794=((0.0320990151198118)*cj5);
IkReal x17795=(r10*sj6);
IkReal x17796=((0.280613866858848)*cj5);
IkReal x17797=((1.20143403691943)*cj5);
IkReal x17798=((0.280613866858848)*sj5);
IkReal x17799=(cj6*r11);
IkReal x17800=(cj6*x17793);
IkReal x17801=(cj6*x17794);
if( IKabs(((((-0.749723120732182)*px))+((r02*x17789))+(((-1.0)*x17793*x17795))+(((-1.0)*x17793*x17799))+((r12*x17788))+(((-1.0)*x17792*x17798))+((r02*x17796))+(((-1.0)*x17790*x17798))+(((-3.20990151198118)*py))+((x17791*x17792))+((x17794*x17799))+((x17794*x17795))+((x17790*x17791))+((r12*x17797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x17789))+((r02*x17788))+((x17792*x17794))+((x17798*x17799))+(((-1.0)*r12*x17796))+(((0.749723120732182)*py))+(((-1.0)*x17792*x17793))+((r02*x17797))+(((-1.0)*x17791*x17799))+(((-1.0)*x17791*x17795))+(((-1.0)*x17790*x17793))+(((-3.20990151198118)*px))+((x17795*x17798))+((x17790*x17794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.749723120732182)*px))+((r02*x17789))+(((-1.0)*x17793*x17795))+(((-1.0)*x17793*x17799))+((r12*x17788))+(((-1.0)*x17792*x17798))+((r02*x17796))+(((-1.0)*x17790*x17798))+(((-3.20990151198118)*py))+((x17791*x17792))+((x17794*x17799))+((x17794*x17795))+((x17790*x17791))+((r12*x17797))))+IKsqr(((((-1.0)*r12*x17789))+((r02*x17788))+((x17792*x17794))+((x17798*x17799))+(((-1.0)*r12*x17796))+(((0.749723120732182)*py))+(((-1.0)*x17792*x17793))+((r02*x17797))+(((-1.0)*x17791*x17799))+(((-1.0)*x17791*x17795))+(((-1.0)*x17790*x17793))+(((-3.20990151198118)*px))+((x17795*x17798))+((x17790*x17794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.749723120732182)*px))+((r02*x17789))+(((-1.0)*x17793*x17795))+(((-1.0)*x17793*x17799))+((r12*x17788))+(((-1.0)*x17792*x17798))+((r02*x17796))+(((-1.0)*x17790*x17798))+(((-3.20990151198118)*py))+((x17791*x17792))+((x17794*x17799))+((x17794*x17795))+((x17790*x17791))+((r12*x17797))), ((((-1.0)*r12*x17789))+((r02*x17788))+((x17792*x17794))+((x17798*x17799))+(((-1.0)*r12*x17796))+(((0.749723120732182)*py))+(((-1.0)*x17792*x17793))+((r02*x17797))+(((-1.0)*x17791*x17799))+(((-1.0)*x17791*x17795))+(((-1.0)*x17790*x17793))+(((-3.20990151198118)*px))+((x17795*x17798))+((x17790*x17794))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17802=IKcos(j0);
IkReal x17803=IKsin(j0);
IkReal x17804=(r10*sj3);
IkReal x17805=(cj3*r00);
IkReal x17806=(sj5*sj6);
IkReal x17807=(cj3*cj5);
IkReal x17808=(r00*sj3);
IkReal x17809=(cj3*r10);
IkReal x17810=(cj5*sj6);
IkReal x17811=((1.0)*cj4);
IkReal x17812=(cj5*cj6);
IkReal x17813=(r01*sj3);
IkReal x17814=(cj3*r01);
IkReal x17815=(sj4*sj6);
IkReal x17816=(r12*sj5);
IkReal x17817=(cj6*sj5);
IkReal x17818=((0.37429)*cj5);
IkReal x17819=(r11*sj3);
IkReal x17820=(r02*sj5);
IkReal x17821=((1.0)*cj6*sj4);
IkReal x17822=(r11*x17815);
IkReal x17823=((1.0)*cj5*sj3);
evalcond[0]=(((r02*x17818))+(((-0.37429)*r01*x17817))+(((-0.29542)*x17802))+(((0.01)*x17820))+(((-0.069)*x17803))+(((0.01)*r00*x17810))+(((-1.0)*px))+(((0.01)*r01*x17812))+(((-0.37429)*r00*x17806)));
evalcond[1]=((((0.01)*x17816))+(((0.01)*r10*x17810))+(((0.069)*x17802))+(((-0.29542)*x17803))+((r12*x17818))+(((-1.0)*py))+(((0.01)*r11*x17812))+(((-0.37429)*r10*x17806))+(((-0.37429)*r11*x17817)));
evalcond[2]=(x17802+(((-1.0)*r12*x17823))+(((-1.0)*r10*sj6*x17807*x17811))+(((-1.0)*cj6*r11*x17807*x17811))+(((-1.0)*x17809*x17821))+((x17804*x17806))+((x17817*x17819))+((cj3*x17822))+(((-1.0)*cj3*x17811*x17816)));
evalcond[3]=((((-1.0)*x17805*x17806))+x17802+(((-1.0)*x17808*x17810*x17811))+(((-1.0)*x17808*x17821))+((r02*x17807))+((x17813*x17815))+(((-1.0)*x17814*x17817))+(((-1.0)*sj3*x17811*x17820))+(((-1.0)*x17811*x17812*x17813)));
evalcond[4]=(((x17815*x17819))+(((-1.0)*x17806*x17809))+(((-1.0)*sj3*x17811*x17816))+x17803+(((-1.0)*x17804*x17810*x17811))+(((-1.0)*cj3*r11*x17817))+(((-1.0)*x17804*x17821))+((r12*x17807))+(((-1.0)*x17811*x17812*x17819)));
evalcond[5]=((((-1.0)*cj6*r01*x17807*x17811))+((x17806*x17808))+(((-1.0)*r02*x17823))+(((-1.0)*x17805*x17821))+((x17814*x17815))+(((-1.0)*cj3*x17811*x17820))+(((-1.0)*x17805*x17810*x17811))+((x17813*x17817))+(((-1.0)*x17803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17824=(cj4*sj3);
IkReal x17825=(cj3*r22);
IkReal x17826=(cj3*sj4);
IkReal x17827=(r21*sj6);
IkReal x17828=(r20*sj6);
IkReal x17829=((1.0)*cj5);
IkReal x17830=(sj3*sj5);
IkReal x17831=((1.0)*sj5);
IkReal x17832=(cj6*r21);
IkReal x17833=((0.01)*cj5);
IkReal x17834=(sj3*sj4);
IkReal x17835=(cj3*cj4);
IkReal x17836=(cj4*cj6);
IkReal x17837=((1.0)*cj4);
IkReal x17838=(sj4*sj6);
IkReal x17839=((0.37429)*sj5);
IkReal x17840=(cj6*x17829);
IkReal x17841=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*sj4*x17828*x17829))+(((-1.0)*x17827*x17837))+(((-1.0)*r22*sj4*x17831))+(((-1.0)*sj4*x17829*x17832))+((r20*x17836)));
evalcond[2]=(((x17832*x17833))+((x17828*x17833))+(((-1.0)*x17832*x17839))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17828*x17839))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r10*x17829*x17838))+(((-1.0)*r11*sj4*x17840))+(((-1.0)*r12*sj4*x17831))+((r10*x17836))+(((-1.0)*r11*sj6*x17837)));
evalcond[4]=((((-1.0)*r02*sj4*x17831))+(((-1.0)*r00*x17829*x17838))+(((-1.0)*r01*sj6*x17837))+(((-1.0)*r01*sj4*x17840))+((r00*x17836)));
evalcond[5]=((((-1.0)*x17824*x17828*x17829))+(((-1.0)*r22*x17824*x17831))+(((-1.0)*cj3*x17828*x17831))+(((-1.0)*x17824*x17829*x17832))+((cj5*x17825))+((x17827*x17834))+(((-1.0)*cj3*x17831*x17832))+(((-1.0)*x17834*x17841)));
evalcond[6]=(((x17830*x17832))+((x17826*x17827))+(((-1.0)*x17829*x17832*x17835))+(((-1.0)*x17828*x17829*x17835))+((x17828*x17830))+(((-1.0)*x17826*x17841))+(((-1.0)*r22*sj3*x17829))+(((-1.0)*cj4*x17825*x17831)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17842=((0.0320990151198118)*sj5);
IkReal x17843=((0.00749723120732182)*sj5);
IkReal x17844=(cj6*r01);
IkReal x17845=((0.00749723120732182)*cj5);
IkReal x17846=(r00*sj6);
IkReal x17847=((1.20143403691943)*sj5);
IkReal x17848=((0.0320990151198118)*cj5);
IkReal x17849=(r10*sj6);
IkReal x17850=((0.280613866858848)*cj5);
IkReal x17851=((1.20143403691943)*cj5);
IkReal x17852=((0.280613866858848)*sj5);
IkReal x17853=(cj6*r11);
IkReal x17854=(cj6*x17847);
IkReal x17855=(cj6*x17848);
if( IKabs((((x17844*x17852))+(((-1.0)*x17845*x17846))+((r12*x17842))+(((-1.0)*x17844*x17845))+((x17848*x17853))+(((-1.0)*r02*x17843))+((x17846*x17852))+(((-1.0)*r02*x17850))+(((-1.0)*x17847*x17853))+(((0.749723120732182)*px))+((x17848*x17849))+((r12*x17851))+(((-3.20990151198118)*py))+(((-1.0)*x17847*x17849)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.749723120732182)*py))+((r12*x17843))+(((-1.0)*x17844*x17847))+((r02*x17842))+((x17845*x17849))+(((-1.0)*x17846*x17847))+((x17844*x17848))+(((-1.0)*x17849*x17852))+(((-1.0)*x17852*x17853))+((r12*x17850))+((r02*x17851))+(((-3.20990151198118)*px))+((x17846*x17848))+((x17845*x17853)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x17844*x17852))+(((-1.0)*x17845*x17846))+((r12*x17842))+(((-1.0)*x17844*x17845))+((x17848*x17853))+(((-1.0)*r02*x17843))+((x17846*x17852))+(((-1.0)*r02*x17850))+(((-1.0)*x17847*x17853))+(((0.749723120732182)*px))+((x17848*x17849))+((r12*x17851))+(((-3.20990151198118)*py))+(((-1.0)*x17847*x17849))))+IKsqr(((((-0.749723120732182)*py))+((r12*x17843))+(((-1.0)*x17844*x17847))+((r02*x17842))+((x17845*x17849))+(((-1.0)*x17846*x17847))+((x17844*x17848))+(((-1.0)*x17849*x17852))+(((-1.0)*x17852*x17853))+((r12*x17850))+((r02*x17851))+(((-3.20990151198118)*px))+((x17846*x17848))+((x17845*x17853))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x17844*x17852))+(((-1.0)*x17845*x17846))+((r12*x17842))+(((-1.0)*x17844*x17845))+((x17848*x17853))+(((-1.0)*r02*x17843))+((x17846*x17852))+(((-1.0)*r02*x17850))+(((-1.0)*x17847*x17853))+(((0.749723120732182)*px))+((x17848*x17849))+((r12*x17851))+(((-3.20990151198118)*py))+(((-1.0)*x17847*x17849))), ((((-0.749723120732182)*py))+((r12*x17843))+(((-1.0)*x17844*x17847))+((r02*x17842))+((x17845*x17849))+(((-1.0)*x17846*x17847))+((x17844*x17848))+(((-1.0)*x17849*x17852))+(((-1.0)*x17852*x17853))+((r12*x17850))+((r02*x17851))+(((-3.20990151198118)*px))+((x17846*x17848))+((x17845*x17853))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17856=IKcos(j0);
IkReal x17857=IKsin(j0);
IkReal x17858=(r10*sj3);
IkReal x17859=(cj3*r00);
IkReal x17860=(sj5*sj6);
IkReal x17861=(cj3*cj5);
IkReal x17862=(r00*sj3);
IkReal x17863=((1.0)*cj3);
IkReal x17864=(cj6*r01);
IkReal x17865=((0.37429)*sj5);
IkReal x17866=((0.01)*cj5);
IkReal x17867=(r10*sj6);
IkReal x17868=(cj6*r11);
IkReal x17869=((1.0)*cj4);
IkReal x17870=(cj5*sj3);
IkReal x17871=(r12*sj5);
IkReal x17872=((0.37429)*cj5);
IkReal x17873=(sj3*sj5);
IkReal x17874=(cj5*sj6);
IkReal x17875=(r02*sj5);
IkReal x17876=((1.0)*cj6*sj4);
IkReal x17877=(r11*sj4*sj6);
IkReal x17878=(r01*sj4*sj6);
evalcond[0]=(((x17864*x17866))+(((0.069)*x17857))+((r00*sj6*x17866))+(((-0.29542)*x17856))+(((0.01)*x17875))+(((-1.0)*x17864*x17865))+(((-0.37429)*r00*x17860))+(((-1.0)*px))+((r02*x17872)));
evalcond[1]=((((-1.0)*x17865*x17868))+(((-0.29542)*x17857))+(((0.01)*x17871))+((x17866*x17868))+((x17866*x17867))+(((-1.0)*py))+(((-0.069)*x17856))+(((-0.37429)*r10*x17860))+((r12*x17872)));
evalcond[2]=(((x17860*x17862))+(((-1.0)*x17859*x17869*x17874))+(((-1.0)*r02*x17870))+x17857+(((-1.0)*x17859*x17876))+((x17864*x17873))+(((-1.0)*cj4*x17863*x17875))+(((-1.0)*x17861*x17864*x17869))+((cj3*x17878)));
evalcond[3]=((((-1.0)*r02*x17869*x17873))+((sj3*x17878))+(((-1.0)*x17859*x17860))+x17856+(((-1.0)*x17864*x17869*x17870))+((r02*x17861))+(((-1.0)*sj5*x17863*x17864))+(((-1.0)*x17862*x17876))+(((-1.0)*x17862*x17869*x17874)));
evalcond[4]=(((sj3*x17877))+(((-1.0)*x17858*x17876))+(((-1.0)*r10*x17860*x17863))+x17857+(((-1.0)*x17858*x17869*x17874))+((r12*x17861))+(((-1.0)*x17868*x17869*x17870))+(((-1.0)*sj5*x17863*x17868))+(((-1.0)*sj3*x17869*x17871)));
evalcond[5]=((((-1.0)*x17861*x17868*x17869))+(((-1.0)*x17856))+(((-1.0)*cj4*x17863*x17871))+((x17868*x17873))+((x17858*x17860))+(((-1.0)*cj6*r10*sj4*x17863))+(((-1.0)*x17861*x17867*x17869))+((cj3*x17877))+(((-1.0)*r12*x17870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17879=cj1*cj1;
IkReal x17880=((69.0)*r10);
IkReal x17881=(cj4*cj6);
IkReal x17882=((364.42)*cj1);
IkReal x17883=(cj5*sj4);
IkReal x17884=((374.29)*cj2);
IkReal x17885=(cj5*r02);
IkReal x17886=(sj1*sj5);
IkReal x17887=((10.0)*r02);
IkReal x17888=(sj1*sj2);
IkReal x17889=(cj6*r11);
IkReal x17890=((69.0)*cj2);
IkReal x17891=(cj6*r01);
IkReal x17892=(cj2*sj1);
IkReal x17893=(r12*sj4);
IkReal x17894=(r00*sj6);
IkReal x17895=((1000.0)*px);
IkReal x17896=(cj4*r11*sj6);
IkReal x17897=((10.0)*cj5*sj1);
IkReal x17898=((10.0)*cj2*cj5);
IkReal x17899=(x17880*x17881);
IkReal x17900=((69.0)*x17896);
IkReal x17901=((69.0)*sj5*x17893);
IkReal x17902=((69.0)*x17883*x17889);
IkReal x17903=(sj6*x17880*x17883);
IkReal x17904=(x17902+x17903+x17900+x17901);
CheckValue<IkReal> x17905=IKPowWithIntegerCheck(((((69.0)*x17888))+((sj2*x17879*x17890))+((x17882*x17888))),-1);
if(!x17905.valid){
continue;
}
CheckValue<IkReal> x17906=IKPowWithIntegerCheck(((((-69.0)*sj1))+(((-1.0)*sj1*x17882))+(((-1.0)*x17879*x17890))),-1);
if(!x17906.valid){
continue;
}
if( IKabs(((x17905.value)*(((((-1.0)*cj2*x17895))+((x17884*x17885))+((r10*sj6*x17882*x17883))+(((-1.0)*sj5*x17884*x17894))+(((-1.0)*sj5*x17884*x17891))+((cj2*sj5*x17887))+x17904+(((-1.0)*sj1*x17890*x17896))+((x17882*x17883*x17889))+(((-1.0)*x17899))+((x17882*x17896))+(((-1.0)*r10*x17881*x17882))+(((-1.0)*x17886*x17890*x17893))+(((-1.0)*sj1*x17883*x17889*x17890))+((sj5*x17882*x17893))+(((-1.0)*x17892*x17903))+((x17894*x17898))+((x17891*x17898))+((x17892*x17899)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17906.value)*((((x17886*x17887))+(((374.29)*sj1*x17885))+x17899+(((-1.0)*sj1*x17895))+(((-1.0)*x17904))+(((-374.29)*x17886*x17894))+(((-374.29)*x17886*x17891))+((x17894*x17897))+((x17891*x17897)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x17905.value)*(((((-1.0)*cj2*x17895))+((x17884*x17885))+((r10*sj6*x17882*x17883))+(((-1.0)*sj5*x17884*x17894))+(((-1.0)*sj5*x17884*x17891))+((cj2*sj5*x17887))+x17904+(((-1.0)*sj1*x17890*x17896))+((x17882*x17883*x17889))+(((-1.0)*x17899))+((x17882*x17896))+(((-1.0)*r10*x17881*x17882))+(((-1.0)*x17886*x17890*x17893))+(((-1.0)*sj1*x17883*x17889*x17890))+((sj5*x17882*x17893))+(((-1.0)*x17892*x17903))+((x17894*x17898))+((x17891*x17898))+((x17892*x17899))))))+IKsqr(((x17906.value)*((((x17886*x17887))+(((374.29)*sj1*x17885))+x17899+(((-1.0)*sj1*x17895))+(((-1.0)*x17904))+(((-374.29)*x17886*x17894))+(((-374.29)*x17886*x17891))+((x17894*x17897))+((x17891*x17897))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x17905.value)*(((((-1.0)*cj2*x17895))+((x17884*x17885))+((r10*sj6*x17882*x17883))+(((-1.0)*sj5*x17884*x17894))+(((-1.0)*sj5*x17884*x17891))+((cj2*sj5*x17887))+x17904+(((-1.0)*sj1*x17890*x17896))+((x17882*x17883*x17889))+(((-1.0)*x17899))+((x17882*x17896))+(((-1.0)*r10*x17881*x17882))+(((-1.0)*x17886*x17890*x17893))+(((-1.0)*sj1*x17883*x17889*x17890))+((sj5*x17882*x17893))+(((-1.0)*x17892*x17903))+((x17894*x17898))+((x17891*x17898))+((x17892*x17899))))), ((x17906.value)*((((x17886*x17887))+(((374.29)*sj1*x17885))+x17899+(((-1.0)*sj1*x17895))+(((-1.0)*x17904))+(((-374.29)*x17886*x17894))+(((-374.29)*x17886*x17891))+((x17894*x17897))+((x17891*x17897))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17907=IKcos(j0);
IkReal x17908=IKsin(j0);
IkReal x17909=((1.0)*sj4);
IkReal x17910=(cj6*sj3);
IkReal x17911=(cj3*cj5);
IkReal x17912=(sj5*sj6);
IkReal x17913=(r00*sj3);
IkReal x17914=((0.36442)*cj1);
IkReal x17915=((0.069)*sj2);
IkReal x17916=(cj6*r01);
IkReal x17917=((1.0)*cj3);
IkReal x17918=((0.37429)*sj5);
IkReal x17919=((0.01)*cj5);
IkReal x17920=(r10*sj6);
IkReal x17921=(r12*sj5);
IkReal x17922=((1.0)*cj4);
IkReal x17923=(r02*sj5);
IkReal x17924=((1.0)*sj1);
IkReal x17925=(cj3*cj6);
IkReal x17926=(r01*sj6);
IkReal x17927=(r00*sj6);
IkReal x17928=(cj6*r11);
IkReal x17929=((0.37429)*cj5);
IkReal x17930=(cj4*cj6);
IkReal x17931=(cj5*sj3);
IkReal x17932=(cj5*x17928);
IkReal x17933=(cj2*x17907);
IkReal x17934=((0.069)*x17908);
IkReal x17935=(r11*sj4*sj6);
IkReal x17936=(sj2*x17907);
IkReal x17937=((1.0)*x17908);
evalcond[0]=(x17933+((r10*x17930))+(((-1.0)*cj5*x17909*x17920))+(((-1.0)*x17909*x17921))+(((-1.0)*x17909*x17932))+(((-1.0)*r11*sj6*x17922))+((sj1*sj2*x17908)));
evalcond[1]=(((r00*x17930))+((sj1*x17936))+(((-1.0)*cj5*x17909*x17916))+(((-1.0)*cj5*x17909*x17927))+(((-1.0)*cj2*x17937))+(((-1.0)*x17922*x17926))+(((-1.0)*x17909*x17923)));
evalcond[2]=((((-1.0)*cj1*x17907))+(((-1.0)*r00*x17909*x17910))+(((-1.0)*r00*x17912*x17917))+(((-1.0)*sj5*x17916*x17917))+((r02*x17911))+(((-1.0)*cj5*r01*x17910*x17922))+((sj3*sj4*x17926))+(((-1.0)*sj3*x17922*x17923))+(((-1.0)*cj5*sj6*x17913*x17922)));
evalcond[3]=(((r12*x17911))+(((-1.0)*cj1*x17937))+(((-1.0)*sj3*x17921*x17922))+(((-1.0)*sj5*x17917*x17928))+(((-1.0)*x17920*x17922*x17931))+(((-1.0)*r10*x17912*x17917))+(((-1.0)*cj5*r11*x17910*x17922))+((sj3*x17935))+(((-1.0)*r10*x17909*x17910)));
evalcond[4]=(((x17919*x17927))+(((-0.069)*sj1*x17933))+(((0.01)*x17923))+(((-1.0)*x17916*x17918))+(((-1.0)*px))+(((-1.0)*x17908*x17915))+((x17907*x17914))+((r02*x17929))+((x17916*x17919))+(((0.069)*x17907))+(((-0.37429)*r00*x17912)));
evalcond[5]=(((x17919*x17928))+((x17919*x17920))+((x17908*x17914))+x17934+(((-1.0)*cj2*sj1*x17934))+(((-0.37429)*r10*x17912))+(((0.01)*x17921))+(((-1.0)*py))+((x17907*x17915))+(((-1.0)*x17918*x17928))+((r12*x17929)));
evalcond[6]=(((r11*sj5*x17910))+x17936+(((-1.0)*x17911*x17922*x17928))+(((-1.0)*x17911*x17920*x17922))+(((-1.0)*cj2*x17908*x17924))+(((-1.0)*r12*x17931))+(((-1.0)*cj4*x17917*x17921))+((cj3*x17935))+((r10*sj3*x17912))+(((-1.0)*r10*x17909*x17925)));
evalcond[7]=((((-1.0)*r00*x17909*x17925))+(((-1.0)*sj2*x17937))+((r01*sj5*x17910))+(((-1.0)*x17911*x17922*x17927))+(((-1.0)*r02*x17931))+(((-1.0)*x17911*x17916*x17922))+((cj3*sj4*x17926))+((x17912*x17913))+(((-1.0)*cj4*x17917*x17923))+(((-1.0)*x17924*x17933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17938=(r10*sj6);
IkReal x17939=((69.0)*cj2);
IkReal x17940=(cj6*r11);
IkReal x17941=((374.29)*sj5);
IkReal x17942=((10.0)*cj5);
IkReal x17943=(cj5*sj4);
IkReal x17944=(r11*sj6);
IkReal x17945=(sj1*sj2);
IkReal x17946=((1000.0)*py);
IkReal x17947=((69.0)*sj2);
IkReal x17948=(r12*sj5);
IkReal x17949=((364.42)*cj1);
IkReal x17950=(cj4*x17949);
IkReal x17951=(sj1*x17948);
IkReal x17952=((374.29)*cj5*r12);
IkReal x17953=((69.0)*cj4*cj6*r10);
IkReal x17954=(x17943*x17949);
CheckValue<IkReal> x17955=IKPowWithIntegerCheck(IKsign((((cj2*x17949))+(((-69.0)*sj1))+x17939)),-1);
if(!x17955.valid){
continue;
}
CheckValue<IkReal> x17956 = IKatan2WithCheck(IkReal(((((-1.0)*x17938*x17943*x17947))+(((-1.0)*sj4*x17947*x17948))+((cj2*x17946))+((cj4*cj6*r10*x17947))+(((-1.0)*x17940*x17943*x17947))+((cj2*x17938*x17941))+((cj2*x17940*x17941))+(((-1.0)*cj2*x17938*x17942))+(((-10.0)*cj2*x17948))+(((-1.0)*cj2*x17952))+(((-1.0)*cj4*x17944*x17947))+(((-1.0)*cj2*x17940*x17942)))),((((69.0)*x17940*x17943))+((x17940*x17954))+(((69.0)*cj4*x17944))+(((69.0)*x17938*x17943))+(((-1.0)*cj6*r10*x17950))+(((-1.0)*x17953))+(((-1.0)*sj4*x17939*x17951))+((cj4*cj6*r10*sj1*x17939))+(((-1.0)*x17945*x17946))+(((-1.0)*sj1*x17939*x17940*x17943))+(((-1.0)*sj1*x17938*x17939*x17943))+((x17938*x17954))+((x17945*x17952))+((x17944*x17950))+(((-1.0)*x17940*x17941*x17945))+((x17938*x17942*x17945))+((sj4*x17948*x17949))+(((10.0)*x17945*x17948))+(((69.0)*sj4*x17948))+((x17940*x17942*x17945))+(((-1.0)*x17938*x17941*x17945))+(((-1.0)*cj4*sj1*x17939*x17944))),IKFAST_ATAN2_MAGTHRESH);
if(!x17956.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17955.value)))+(x17956.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17957=IKcos(j0);
IkReal x17958=IKsin(j0);
IkReal x17959=((1.0)*sj4);
IkReal x17960=(cj6*sj3);
IkReal x17961=(cj3*cj5);
IkReal x17962=(sj5*sj6);
IkReal x17963=(r00*sj3);
IkReal x17964=((0.36442)*cj1);
IkReal x17965=((0.069)*sj2);
IkReal x17966=(cj6*r01);
IkReal x17967=((1.0)*cj3);
IkReal x17968=((0.37429)*sj5);
IkReal x17969=((0.01)*cj5);
IkReal x17970=(r10*sj6);
IkReal x17971=(r12*sj5);
IkReal x17972=((1.0)*cj4);
IkReal x17973=(r02*sj5);
IkReal x17974=((1.0)*sj1);
IkReal x17975=(cj3*cj6);
IkReal x17976=(r01*sj6);
IkReal x17977=(r00*sj6);
IkReal x17978=(cj6*r11);
IkReal x17979=((0.37429)*cj5);
IkReal x17980=(cj4*cj6);
IkReal x17981=(cj5*sj3);
IkReal x17982=(cj5*x17978);
IkReal x17983=(cj2*x17957);
IkReal x17984=((0.069)*x17958);
IkReal x17985=(r11*sj4*sj6);
IkReal x17986=(sj2*x17957);
IkReal x17987=((1.0)*x17958);
evalcond[0]=(((r10*x17980))+x17983+(((-1.0)*x17959*x17982))+((sj1*sj2*x17958))+(((-1.0)*x17959*x17971))+(((-1.0)*r11*sj6*x17972))+(((-1.0)*cj5*x17959*x17970)));
evalcond[1]=((((-1.0)*x17972*x17976))+(((-1.0)*x17959*x17973))+((r00*x17980))+(((-1.0)*cj5*x17959*x17977))+(((-1.0)*cj5*x17959*x17966))+((sj1*x17986))+(((-1.0)*cj2*x17987)));
evalcond[2]=(((r02*x17961))+((sj3*sj4*x17976))+(((-1.0)*sj5*x17966*x17967))+(((-1.0)*cj5*sj6*x17963*x17972))+(((-1.0)*r00*x17959*x17960))+(((-1.0)*r00*x17962*x17967))+(((-1.0)*sj3*x17972*x17973))+(((-1.0)*cj5*r01*x17960*x17972))+(((-1.0)*cj1*x17957)));
evalcond[3]=(((sj3*x17985))+((r12*x17961))+(((-1.0)*cj5*r11*x17960*x17972))+(((-1.0)*r10*x17962*x17967))+(((-1.0)*sj5*x17967*x17978))+(((-1.0)*cj1*x17987))+(((-1.0)*sj3*x17971*x17972))+(((-1.0)*x17970*x17972*x17981))+(((-1.0)*r10*x17959*x17960)));
evalcond[4]=((((-0.37429)*r00*x17962))+(((-1.0)*x17958*x17965))+((r02*x17979))+((x17966*x17969))+((x17957*x17964))+(((0.01)*x17973))+(((-1.0)*px))+(((-1.0)*x17966*x17968))+((x17969*x17977))+(((-0.069)*sj1*x17983))+(((0.069)*x17957)));
evalcond[5]=(((r12*x17979))+x17984+((x17957*x17965))+(((0.01)*x17971))+(((-0.37429)*r10*x17962))+((x17958*x17964))+(((-1.0)*py))+((x17969*x17978))+((x17969*x17970))+(((-1.0)*cj2*sj1*x17984))+(((-1.0)*x17968*x17978)));
evalcond[6]=(((r10*sj3*x17962))+((cj3*x17985))+x17986+(((-1.0)*r12*x17981))+((r11*sj5*x17960))+(((-1.0)*x17961*x17970*x17972))+(((-1.0)*x17961*x17972*x17978))+(((-1.0)*cj2*x17958*x17974))+(((-1.0)*cj4*x17967*x17971))+(((-1.0)*r10*x17959*x17975)));
evalcond[7]=((((-1.0)*x17961*x17966*x17972))+((cj3*sj4*x17976))+(((-1.0)*x17974*x17983))+((x17962*x17963))+(((-1.0)*r00*x17959*x17975))+(((-1.0)*sj2*x17987))+((r01*sj5*x17960))+(((-1.0)*r02*x17981))+(((-1.0)*x17961*x17972*x17977))+(((-1.0)*cj4*x17967*x17973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17988=cj1*cj1;
IkReal x17989=((1.0)*r01);
IkReal x17990=(cj5*cj6);
IkReal x17991=(r02*sj5);
IkReal x17992=(cj2*sj4);
IkReal x17993=(cj5*sj6);
IkReal x17994=(cj4*cj6);
IkReal x17995=(r12*sj5);
IkReal x17996=(cj2*cj4*sj6);
IkReal x17997=(sj1*sj2*sj4);
IkReal x17998=((1.0)*sj1*sj2);
IkReal x17999=(cj4*sj1*sj2*sj6);
CheckValue<IkReal> x18000 = IKatan2WithCheck(IkReal(((((-1.0)*x17989*x17996))+((cj2*r00*x17994))+(((-1.0)*r00*x17992*x17993))+(((-1.0)*x17989*x17990*x17992))+((r11*x17990*x17997))+((r11*x17999))+((x17995*x17997))+((r10*x17993*x17997))+(((-1.0)*r10*x17994*x17998))+(((-1.0)*x17991*x17992)))),(((r00*x17993*x17997))+((x17991*x17997))+((x17992*x17995))+((r11*x17990*x17992))+(((-1.0)*cj2*r10*x17994))+((r01*x17990*x17997))+((r11*x17996))+((r01*x17999))+(((-1.0)*r00*x17994*x17998))+((r10*x17992*x17993))),IKFAST_ATAN2_MAGTHRESH);
if(!x18000.valid){
continue;
}
CheckValue<IkReal> x18001=IKPowWithIntegerCheck(IKsign(((1.0)+((x17988*(cj2*cj2)))+(((-1.0)*x17988)))),-1);
if(!x18001.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x18000.value)+(((1.5707963267949)*(x18001.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x18002=IKcos(j0);
IkReal x18003=IKsin(j0);
IkReal x18004=((1.0)*sj4);
IkReal x18005=(cj6*sj3);
IkReal x18006=(cj3*cj5);
IkReal x18007=(sj5*sj6);
IkReal x18008=(r00*sj3);
IkReal x18009=((0.36442)*cj1);
IkReal x18010=((0.069)*sj2);
IkReal x18011=(cj6*r01);
IkReal x18012=((1.0)*cj3);
IkReal x18013=((0.37429)*sj5);
IkReal x18014=((0.01)*cj5);
IkReal x18015=(r10*sj6);
IkReal x18016=(r12*sj5);
IkReal x18017=((1.0)*cj4);
IkReal x18018=(r02*sj5);
IkReal x18019=((1.0)*sj1);
IkReal x18020=(cj3*cj6);
IkReal x18021=(r01*sj6);
IkReal x18022=(r00*sj6);
IkReal x18023=(cj6*r11);
IkReal x18024=((0.37429)*cj5);
IkReal x18025=(cj4*cj6);
IkReal x18026=(cj5*sj3);
IkReal x18027=(cj5*x18023);
IkReal x18028=(cj2*x18002);
IkReal x18029=((0.069)*x18003);
IkReal x18030=(r11*sj4*sj6);
IkReal x18031=(sj2*x18002);
IkReal x18032=((1.0)*x18003);
evalcond[0]=(((r10*x18025))+(((-1.0)*cj5*x18004*x18015))+(((-1.0)*x18004*x18016))+(((-1.0)*x18004*x18027))+((sj1*sj2*x18003))+(((-1.0)*r11*sj6*x18017))+x18028);
evalcond[1]=(((sj1*x18031))+(((-1.0)*cj5*x18004*x18022))+((r00*x18025))+(((-1.0)*cj5*x18004*x18011))+(((-1.0)*x18017*x18021))+(((-1.0)*cj2*x18032))+(((-1.0)*x18004*x18018)));
evalcond[2]=((((-1.0)*cj1*x18002))+((r02*x18006))+(((-1.0)*sj5*x18011*x18012))+((sj3*sj4*x18021))+(((-1.0)*sj3*x18017*x18018))+(((-1.0)*r00*x18004*x18005))+(((-1.0)*cj5*r01*x18005*x18017))+(((-1.0)*r00*x18007*x18012))+(((-1.0)*cj5*sj6*x18008*x18017)));
evalcond[3]=((((-1.0)*x18015*x18017*x18026))+(((-1.0)*r10*x18004*x18005))+((r12*x18006))+(((-1.0)*cj5*r11*x18005*x18017))+((sj3*x18030))+(((-1.0)*sj3*x18016*x18017))+(((-1.0)*r10*x18007*x18012))+(((-1.0)*sj5*x18012*x18023))+(((-1.0)*cj1*x18032)));
evalcond[4]=((((-1.0)*x18003*x18010))+((r02*x18024))+(((-1.0)*x18011*x18013))+(((-0.37429)*r00*x18007))+(((-0.069)*sj1*x18028))+(((0.01)*x18018))+((x18011*x18014))+(((-1.0)*px))+(((0.069)*x18002))+((x18002*x18009))+((x18014*x18022)));
evalcond[5]=(((x18003*x18009))+(((-0.37429)*r10*x18007))+(((0.01)*x18016))+(((-1.0)*py))+(((-1.0)*x18013*x18023))+((r12*x18024))+(((-1.0)*cj2*sj1*x18029))+((x18014*x18015))+((x18002*x18010))+((x18014*x18023))+x18029);
evalcond[6]=((((-1.0)*x18006*x18015*x18017))+(((-1.0)*r12*x18026))+(((-1.0)*r10*x18004*x18020))+((cj3*x18030))+(((-1.0)*cj2*x18003*x18019))+((r11*sj5*x18005))+(((-1.0)*cj4*x18012*x18016))+(((-1.0)*x18006*x18017*x18023))+((r10*sj3*x18007))+x18031);
evalcond[7]=((((-1.0)*r00*x18004*x18020))+((cj3*sj4*x18021))+(((-1.0)*sj2*x18032))+((x18007*x18008))+((r01*sj5*x18005))+(((-1.0)*x18019*x18028))+(((-1.0)*r02*x18026))+(((-1.0)*x18006*x18011*x18017))+(((-1.0)*cj4*x18012*x18018))+(((-1.0)*x18006*x18017*x18022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - single (91c3f199a2ea81000c5de80e69b58a33)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
